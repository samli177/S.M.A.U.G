
kommunikationsmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000211e  00800100  00001196  0000122a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063f  0080221e  0080221e  00003348  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00003348  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000598  00000000  00000000  000049bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004f54  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002a0  00000000  00000000  00004f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002109  00000000  00000000  00005223  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000918  00000000  00000000  0000732c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001858  00000000  00000000  00007c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007ec  00000000  00000000  0000949c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000851  00000000  00000000  00009c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000181c  00000000  00000000  0000a4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000298  00000000  00000000  0000bcf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	f4 c0       	rjmp	.+488    	; 0x21e <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f7 c6       	rjmp	.+3566   	; 0xe40 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	4b c3       	rjmp	.+1686   	; 0x700 <__vector_26>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__vector_32>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e2       	ldi	r17, 0x22	; 34
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e9       	ldi	r30, 0x96	; 150
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 31       	cpi	r26, 0x1E	; 30
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e2       	ldi	r18, 0x28	; 40
      b4:	ae e1       	ldi	r26, 0x1E	; 30
      b6:	b2 e2       	ldi	r27, 0x22	; 34
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 35       	cpi	r26, 0x5D	; 93
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	96 d0       	rcall	.+300    	; 0x1f0 <main>
      c4:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 18.000 * delay;
      ca:	bc 01       	movw	r22, r24
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	6f d7       	rcall	.+3806   	; 0xfb0 <__floatunsisf>
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	40 e9       	ldi	r20, 0x90	; 144
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	d0 d7       	rcall	.+4000   	; 0x107c <__mulsf3>
      dc:	3d d7       	rcall	.+3706   	; 0xf58 <__fixunssfsi>
	OCR1A = delay;
      de:	70 93 89 00 	sts	0x0089, r23
      e2:	60 93 88 00 	sts	0x0088, r22
      e6:	08 95       	ret

000000e8 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 18.000 * delay;
      e8:	bc 01       	movw	r22, r24
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	60 d7       	rcall	.+3776   	; 0xfb0 <__floatunsisf>
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	40 e9       	ldi	r20, 0x90	; 144
      f6:	51 e4       	ldi	r21, 0x41	; 65
      f8:	c1 d7       	rcall	.+3970   	; 0x107c <__mulsf3>
      fa:	2e d7       	rcall	.+3676   	; 0xf58 <__fixunssfsi>
	OCR3A = delay;
      fc:	70 93 99 00 	sts	0x0099, r23
     100:	60 93 98 00 	sts	0x0098, r22
     104:	08 95       	ret

00000106 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     106:	e1 e8       	ldi	r30, 0x81	; 129
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	85 60       	ori	r24, 0x05	; 5
     10e:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     110:	e1 e9       	ldi	r30, 0x91	; 145
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	85 60       	ori	r24, 0x05	; 5
     118:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     11a:	88 ee       	ldi	r24, 0xE8	; 232
     11c:	93 e0       	ldi	r25, 0x03	; 3
     11e:	d5 df       	rcall	.-86     	; 0xca <set_counter_1>
	set_counter_2(1000);
     120:	88 ee       	ldi	r24, 0xE8	; 232
     122:	93 e0       	ldi	r25, 0x03	; 3
     124:	e1 df       	rcall	.-62     	; 0xe8 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     126:	ef e6       	ldi	r30, 0x6F	; 111
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	82 60       	ori	r24, 0x02	; 2
     12e:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     130:	e1 e7       	ldi	r30, 0x71	; 113
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	82 60       	ori	r24, 0x02	; 2
     138:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     13a:	10 92 85 00 	sts	0x0085, r1
     13e:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     142:	10 92 95 00 	sts	0x0095, r1
     146:	10 92 94 00 	sts	0x0094, r1
     14a:	08 95       	ret

0000014c <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     14c:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     14e:	90 81       	ld	r25, Z
     150:	91 50       	subi	r25, 0x01	; 1
     152:	84 81       	ldd	r24, Z+4	; 0x04
     154:	22 81       	ldd	r18, Z+2	; 0x02
     156:	82 1b       	sub	r24, r18
};
     158:	89 23       	and	r24, r25
     15a:	08 95       	ret

0000015c <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     15c:	1f 93       	push	r17
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	ec 01       	movw	r28, r24
     164:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     166:	f2 df       	rcall	.-28     	; 0x14c <FifoDataLength>
     168:	28 81       	ld	r18, Y
     16a:	39 81       	ldd	r19, Y+1	; 0x01
     16c:	21 50       	subi	r18, 0x01	; 1
     16e:	31 09       	sbc	r19, r1
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	82 17       	cp	r24, r18
     174:	93 07       	cpc	r25, r19
     176:	69 f0       	breq	.+26     	; 0x192 <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     178:	8c 81       	ldd	r24, Y+4	; 0x04
     17a:	9d 81       	ldd	r25, Y+5	; 0x05
     17c:	fe 01       	movw	r30, r28
     17e:	e8 0f       	add	r30, r24
     180:	f9 1f       	adc	r31, r25
     182:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	28 23       	and	r18, r24
     188:	39 23       	and	r19, r25
     18a:	3d 83       	std	Y+5, r19	; 0x05
     18c:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	01 c0       	rjmp	.+2      	; 0x194 <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	08 95       	ret

0000019c <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     1a8:	d1 df       	rcall	.-94     	; 0x14c <FifoDataLength>
     1aa:	88 23       	and	r24, r24
     1ac:	a1 f0       	breq	.+40     	; 0x1d6 <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     1ae:	ea 81       	ldd	r30, Y+2	; 0x02
     1b0:	fb 81       	ldd	r31, Y+3	; 0x03
     1b2:	ec 0f       	add	r30, r28
     1b4:	fd 1f       	adc	r31, r29
     1b6:	86 81       	ldd	r24, Z+6	; 0x06
     1b8:	f8 01       	movw	r30, r16
     1ba:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     1bc:	28 81       	ld	r18, Y
     1be:	39 81       	ldd	r19, Y+1	; 0x01
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	31 09       	sbc	r19, r1
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	9b 81       	ldd	r25, Y+3	; 0x03
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	82 23       	and	r24, r18
     1cc:	93 23       	and	r25, r19
     1ce:	9b 83       	std	Y+3, r25	; 0x03
     1d0:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	08 95       	ret

000001e2 <init>:
// --  END MAIN --


void init()
{
	DDRA |= (1<<PORTA0|1<<PORTA1); //set status diodes to outputs
     1e2:	81 b1       	in	r24, 0x01	; 1
     1e4:	83 60       	ori	r24, 0x03	; 3
     1e6:	81 b9       	out	0x01, r24	; 1
	USART_init();
     1e8:	13 d4       	rcall	.+2086   	; 0xa10 <USART_init>
	TWI_init(C_ADRESS);
     1ea:	80 e8       	ldi	r24, 0x80	; 128
     1ec:	e8 d0       	rcall	.+464    	; 0x3be <TWI_init>
	init_counters();
     1ee:	8b cf       	rjmp	.-234    	; 0x106 <init_counters>

000001f0 <main>:

// -- MAIN --

int main(void)
{
	init();
     1f0:	f8 df       	rcall	.-16     	; 0x1e2 <init>
	sei();
     1f2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f4:	2f ef       	ldi	r18, 0xFF	; 255
     1f6:	8f e1       	ldi	r24, 0x1F	; 31
     1f8:	9c e1       	ldi	r25, 0x1C	; 28
     1fa:	21 50       	subi	r18, 0x01	; 1
     1fc:	80 40       	sbci	r24, 0x00	; 0
     1fe:	90 40       	sbci	r25, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <main+0xa>
     202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x14>
     204:	00 00       	nop
	while(1)
	{
		//PORTA ^= (1<<PORTA0);
		
		
		USART_DecodeRxFIFO();
     206:	ee d5       	rcall	.+3036   	; 0xde4 <USART_DecodeRxFIFO>
		USART_SendSensors();
     208:	04 d5       	rcall	.+2568   	; 0xc12 <USART_SendSensors>
     20a:	2f ef       	ldi	r18, 0xFF	; 255
     20c:	8f ec       	ldi	r24, 0xCF	; 207
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	21 50       	subi	r18, 0x01	; 1
     212:	80 40       	sbci	r24, 0x00	; 0
     214:	90 40       	sbci	r25, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <main+0x20>
     218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x2a>
     21a:	00 00       	nop
     21c:	f4 cf       	rjmp	.-24     	; 0x206 <main+0x16>

0000021e <__vector_13>:
}

//Interrupt vectors

ISR(TIMER1_COMPA_vect)
{
     21e:	1f 92       	push	r1
     220:	0f 92       	push	r0
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	0f 92       	push	r0
     226:	11 24       	eor	r1, r1
     228:	0b b6       	in	r0, 0x3b	; 59
     22a:	0f 92       	push	r0
     22c:	2f 93       	push	r18
     22e:	3f 93       	push	r19
     230:	4f 93       	push	r20
     232:	5f 93       	push	r21
     234:	6f 93       	push	r22
     236:	7f 93       	push	r23
     238:	8f 93       	push	r24
     23a:	9f 93       	push	r25
     23c:	af 93       	push	r26
     23e:	bf 93       	push	r27
     240:	ef 93       	push	r30
     242:	ff 93       	push	r31
	decode_message_TwiFIFO();
     244:	b3 d1       	rcall	.+870    	; 0x5ac <decode_message_TwiFIFO>
	TCNT1 = 0;
     246:	10 92 85 00 	sts	0x0085, r1
     24a:	10 92 84 00 	sts	0x0084, r1
}
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	bf 91       	pop	r27
     254:	af 91       	pop	r26
     256:	9f 91       	pop	r25
     258:	8f 91       	pop	r24
     25a:	7f 91       	pop	r23
     25c:	6f 91       	pop	r22
     25e:	5f 91       	pop	r21
     260:	4f 91       	pop	r20
     262:	3f 91       	pop	r19
     264:	2f 91       	pop	r18
     266:	0f 90       	pop	r0
     268:	0b be       	out	0x3b, r0	; 59
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     274:	1f 92       	push	r1
     276:	0f 92       	push	r0
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	0f 92       	push	r0
     27c:	11 24       	eor	r1, r1
	TCNT3 = 0;
     27e:	10 92 95 00 	sts	0x0095, r1
     282:	10 92 94 00 	sts	0x0094, r1
     286:	0f 90       	pop	r0
     288:	0f be       	out	0x3f, r0	; 63
     28a:	0f 90       	pop	r0
     28c:	1f 90       	pop	r1
     28e:	18 95       	reti

00000290 <set_twi_reciever_enable>:
     290:	85 e4       	ldi	r24, 0x45	; 69
     292:	80 93 bc 00 	sts	0x00BC, r24
     296:	08 95       	ret

00000298 <clear_int>:
     298:	81 ec       	ldi	r24, 0xC1	; 193
     29a:	80 93 bc 00 	sts	0x00BC, r24
     29e:	08 95       	ret

000002a0 <start_bus>:
     2a0:	84 ea       	ldi	r24, 0xA4	; 164
     2a2:	80 93 bc 00 	sts	0x00BC, r24
     2a6:	08 95       	ret

000002a8 <stop_bus>:
     2a8:	85 ed       	ldi	r24, 0xD5	; 213
     2aa:	80 93 bc 00 	sts	0x00BC, r24
     2ae:	08 95       	ret

000002b0 <Error>:
     2b0:	80 91 b9 00 	lds	r24, 0x00B9
     2b4:	88 7f       	andi	r24, 0xF8	; 248
     2b6:	88 33       	cpi	r24, 0x38	; 56
     2b8:	09 f0       	breq	.+2      	; 0x2bc <Error+0xc>
     2ba:	f6 cf       	rjmp	.-20     	; 0x2a8 <stop_bus>
     2bc:	ed cf       	rjmp	.-38     	; 0x298 <clear_int>

000002be <get_data>:
     2be:	80 91 bb 00 	lds	r24, 0x00BB
     2c2:	08 95       	ret

000002c4 <wait_for_bus>:
     2c4:	ec eb       	ldi	r30, 0xBC	; 188
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	88 23       	and	r24, r24
     2cc:	ec f7       	brge	.-6      	; 0x2c8 <wait_for_bus+0x4>
     2ce:	08 95       	ret

000002d0 <send_data_and_wait>:
     2d0:	80 93 bb 00 	sts	0x00BB, r24
     2d4:	84 e8       	ldi	r24, 0x84	; 132
     2d6:	80 93 bc 00 	sts	0x00BC, r24
     2da:	f4 cf       	rjmp	.-24     	; 0x2c4 <wait_for_bus>

000002dc <stop_twi>:
     2dc:	10 92 3d 23 	sts	0x233D, r1
     2e0:	10 92 3c 23 	sts	0x233C, r1
     2e4:	10 92 48 23 	sts	0x2348, r1
     2e8:	10 92 47 23 	sts	0x2347, r1
     2ec:	10 92 41 23 	sts	0x2341, r1
     2f0:	10 92 40 23 	sts	0x2340, r1
     2f4:	10 92 44 23 	sts	0x2344, r1
     2f8:	10 92 43 23 	sts	0x2343, r1
     2fc:	08 95       	ret

000002fe <reset_TWI>:
     2fe:	ec eb       	ldi	r30, 0xBC	; 188
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	80 6c       	ori	r24, 0xC0	; 192
     306:	80 83       	st	Z, r24
     308:	08 95       	ret

0000030a <get_sensor_from_bus>:
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	c0 91 47 23 	lds	r28, 0x2347
     312:	d0 91 48 23 	lds	r29, 0x2348
     316:	c7 30       	cpi	r28, 0x07	; 7
     318:	d1 05       	cpc	r29, r1
     31a:	91 f4       	brne	.+36     	; 0x340 <get_sensor_from_bus+0x36>
     31c:	ee e2       	ldi	r30, 0x2E	; 46
     31e:	f2 e2       	ldi	r31, 0x22	; 34
     320:	ad e4       	ldi	r26, 0x4D	; 77
     322:	b3 e2       	ldi	r27, 0x23	; 35
     324:	85 e3       	ldi	r24, 0x35	; 53
     326:	92 e2       	ldi	r25, 0x22	; 34
     328:	21 91       	ld	r18, Z+
     32a:	2d 93       	st	X+, r18
     32c:	e8 17       	cp	r30, r24
     32e:	f9 07       	cpc	r31, r25
     330:	d9 f7       	brne	.-10     	; 0x328 <get_sensor_from_bus+0x1e>
     332:	c5 df       	rcall	.-118    	; 0x2be <get_data>
     334:	80 93 42 23 	sts	0x2342, r24
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	80 93 23 22 	sts	0x2223, r24
     33e:	0d c0       	rjmp	.+26     	; 0x35a <get_sensor_from_bus+0x50>
     340:	be df       	rcall	.-132    	; 0x2be <get_data>
     342:	c2 5d       	subi	r28, 0xD2	; 210
     344:	dd 4d       	sbci	r29, 0xDD	; 221
     346:	88 83       	st	Y, r24
     348:	80 91 47 23 	lds	r24, 0x2347
     34c:	90 91 48 23 	lds	r25, 0x2348
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	90 93 48 23 	sts	0x2348, r25
     356:	80 93 47 23 	sts	0x2347, r24
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <get_control_settings_from_bus>:
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	c0 91 43 23 	lds	r28, 0x2343
     368:	d0 91 44 23 	lds	r29, 0x2344
     36c:	a8 df       	rcall	.-176    	; 0x2be <get_data>
     36e:	c7 5c       	subi	r28, 0xC7	; 199
     370:	dc 4d       	sbci	r29, 0xDC	; 220
     372:	88 83       	st	Y, r24
     374:	10 92 44 23 	sts	0x2344, r1
     378:	10 92 43 23 	sts	0x2343, r1
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <get_autonom_settings_from_bus>:
     382:	9d df       	rcall	.-198    	; 0x2be <get_data>
     384:	80 93 37 23 	sts	0x2337, r24
     388:	08 95       	ret

0000038a <get_char_from_bus>:
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	c0 91 40 23 	lds	r28, 0x2340
     392:	d0 91 41 23 	lds	r29, 0x2341
     396:	93 df       	rcall	.-218    	; 0x2be <get_data>
     398:	c8 5c       	subi	r28, 0xC8	; 200
     39a:	dd 4d       	sbci	r29, 0xDD	; 221
     39c:	88 83       	st	Y, r24
     39e:	80 91 40 23 	lds	r24, 0x2340
     3a2:	90 91 41 23 	lds	r25, 0x2341
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	90 93 41 23 	sts	0x2341, r25
     3ac:	80 93 40 23 	sts	0x2340, r24
     3b0:	90 93 29 22 	sts	0x2229, r25
     3b4:	80 93 28 22 	sts	0x2228, r24
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <TWI_init>:
     3be:	80 93 45 23 	sts	0x2345, r24
     3c2:	80 34       	cpi	r24, 0x40	; 64
     3c4:	79 f0       	breq	.+30     	; 0x3e4 <TWI_init+0x26>
     3c6:	80 38       	cpi	r24, 0x80	; 128
     3c8:	19 f0       	breq	.+6      	; 0x3d0 <TWI_init+0x12>
     3ca:	80 32       	cpi	r24, 0x20	; 32
     3cc:	d1 f4       	brne	.+52     	; 0x402 <TWI_init+0x44>
     3ce:	12 c0       	rjmp	.+36     	; 0x3f4 <TWI_init+0x36>
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	88 b9       	out	0x08, r24	; 8
     3d4:	5d df       	rcall	.-326    	; 0x290 <set_twi_reciever_enable>
     3d6:	8f e3       	ldi	r24, 0x3F	; 63
     3d8:	80 93 b8 00 	sts	0x00B8, r24
     3dc:	81 e8       	ldi	r24, 0x81	; 129
     3de:	80 93 ba 00 	sts	0x00BA, r24
     3e2:	08 95       	ret
     3e4:	8f e3       	ldi	r24, 0x3F	; 63
     3e6:	80 93 b8 00 	sts	0x00B8, r24
     3ea:	52 df       	rcall	.-348    	; 0x290 <set_twi_reciever_enable>
     3ec:	80 e4       	ldi	r24, 0x40	; 64
     3ee:	80 93 ba 00 	sts	0x00BA, r24
     3f2:	08 95       	ret
     3f4:	8f e3       	ldi	r24, 0x3F	; 63
     3f6:	80 93 b8 00 	sts	0x00B8, r24
     3fa:	4a df       	rcall	.-364    	; 0x290 <set_twi_reciever_enable>
     3fc:	81 e2       	ldi	r24, 0x21	; 33
     3fe:	80 93 ba 00 	sts	0x00BA, r24
     402:	08 95       	ret

00000404 <TWI_send_command>:
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	c8 2f       	mov	r28, r24
     40c:	d6 2f       	mov	r29, r22
     40e:	14 2f       	mov	r17, r20
     410:	47 df       	rcall	.-370    	; 0x2a0 <start_bus>
     412:	58 df       	rcall	.-336    	; 0x2c4 <wait_for_bus>
     414:	90 91 b9 00 	lds	r25, 0x00B9
     418:	98 7f       	andi	r25, 0xF8	; 248
     41a:	98 30       	cpi	r25, 0x08	; 8
     41c:	19 f0       	breq	.+6      	; 0x424 <TWI_send_command+0x20>
     41e:	48 df       	rcall	.-368    	; 0x2b0 <Error>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	34 c0       	rjmp	.+104    	; 0x48c <TWI_send_command+0x88>
     424:	80 e2       	ldi	r24, 0x20	; 32
     426:	54 df       	rcall	.-344    	; 0x2d0 <send_data_and_wait>
     428:	80 91 b9 00 	lds	r24, 0x00B9
     42c:	88 7f       	andi	r24, 0xF8	; 248
     42e:	88 31       	cpi	r24, 0x18	; 24
     430:	19 f0       	breq	.+6      	; 0x438 <TWI_send_command+0x34>
     432:	3e df       	rcall	.-388    	; 0x2b0 <Error>
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	2a c0       	rjmp	.+84     	; 0x48c <TWI_send_command+0x88>
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	4a df       	rcall	.-364    	; 0x2d0 <send_data_and_wait>
     43c:	80 91 b9 00 	lds	r24, 0x00B9
     440:	88 7f       	andi	r24, 0xF8	; 248
     442:	88 32       	cpi	r24, 0x28	; 40
     444:	19 f0       	breq	.+6      	; 0x44c <TWI_send_command+0x48>
     446:	34 df       	rcall	.-408    	; 0x2b0 <Error>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	20 c0       	rjmp	.+64     	; 0x48c <TWI_send_command+0x88>
     44c:	8c 2f       	mov	r24, r28
     44e:	40 df       	rcall	.-384    	; 0x2d0 <send_data_and_wait>
     450:	80 91 b9 00 	lds	r24, 0x00B9
     454:	88 7f       	andi	r24, 0xF8	; 248
     456:	88 32       	cpi	r24, 0x28	; 40
     458:	19 f0       	breq	.+6      	; 0x460 <TWI_send_command+0x5c>
     45a:	2a df       	rcall	.-428    	; 0x2b0 <Error>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	16 c0       	rjmp	.+44     	; 0x48c <TWI_send_command+0x88>
     460:	8d 2f       	mov	r24, r29
     462:	36 df       	rcall	.-404    	; 0x2d0 <send_data_and_wait>
     464:	80 91 b9 00 	lds	r24, 0x00B9
     468:	88 7f       	andi	r24, 0xF8	; 248
     46a:	88 32       	cpi	r24, 0x28	; 40
     46c:	19 f0       	breq	.+6      	; 0x474 <TWI_send_command+0x70>
     46e:	20 df       	rcall	.-448    	; 0x2b0 <Error>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0c c0       	rjmp	.+24     	; 0x48c <TWI_send_command+0x88>
     474:	81 2f       	mov	r24, r17
     476:	2c df       	rcall	.-424    	; 0x2d0 <send_data_and_wait>
     478:	80 91 b9 00 	lds	r24, 0x00B9
     47c:	88 7f       	andi	r24, 0xF8	; 248
     47e:	88 32       	cpi	r24, 0x28	; 40
     480:	19 f0       	breq	.+6      	; 0x488 <TWI_send_command+0x84>
     482:	16 df       	rcall	.-468    	; 0x2b0 <Error>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <TWI_send_command+0x88>
     488:	0f df       	rcall	.-482    	; 0x2a8 <stop_bus>
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	08 95       	ret

00000494 <TWI_send_string>:
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	c8 2f       	mov	r28, r24
     4a2:	e6 2e       	mov	r14, r22
     4a4:	f7 2e       	mov	r15, r23
     4a6:	fc de       	rcall	.-520    	; 0x2a0 <start_bus>
     4a8:	0d df       	rcall	.-486    	; 0x2c4 <wait_for_bus>
     4aa:	90 91 b9 00 	lds	r25, 0x00B9
     4ae:	98 7f       	andi	r25, 0xF8	; 248
     4b0:	98 30       	cpi	r25, 0x08	; 8
     4b2:	19 f0       	breq	.+6      	; 0x4ba <TWI_send_string+0x26>
     4b4:	fd de       	rcall	.-518    	; 0x2b0 <Error>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	2c c0       	rjmp	.+88     	; 0x512 <TWI_send_string+0x7e>
     4ba:	8c 2f       	mov	r24, r28
     4bc:	09 df       	rcall	.-494    	; 0x2d0 <send_data_and_wait>
     4be:	80 91 b9 00 	lds	r24, 0x00B9
     4c2:	88 7f       	andi	r24, 0xF8	; 248
     4c4:	88 31       	cpi	r24, 0x18	; 24
     4c6:	19 f0       	breq	.+6      	; 0x4ce <TWI_send_string+0x3a>
     4c8:	f3 de       	rcall	.-538    	; 0x2b0 <Error>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	22 c0       	rjmp	.+68     	; 0x512 <TWI_send_string+0x7e>
     4ce:	89 e1       	ldi	r24, 0x19	; 25
     4d0:	ff de       	rcall	.-514    	; 0x2d0 <send_data_and_wait>
     4d2:	80 91 b9 00 	lds	r24, 0x00B9
     4d6:	88 7f       	andi	r24, 0xF8	; 248
     4d8:	88 32       	cpi	r24, 0x28	; 40
     4da:	29 f4       	brne	.+10     	; 0x4e6 <TWI_send_string+0x52>
     4dc:	0e 2d       	mov	r16, r14
     4de:	1f 2d       	mov	r17, r15
     4e0:	c0 e0       	ldi	r28, 0x00	; 0
     4e2:	d0 e0       	ldi	r29, 0x00	; 0
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <TWI_send_string+0x62>
     4e6:	e4 de       	rcall	.-568    	; 0x2b0 <Error>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	13 c0       	rjmp	.+38     	; 0x512 <TWI_send_string+0x7e>
     4ec:	f8 01       	movw	r30, r16
     4ee:	81 91       	ld	r24, Z+
     4f0:	8f 01       	movw	r16, r30
     4f2:	ee de       	rcall	.-548    	; 0x2d0 <send_data_and_wait>
     4f4:	21 96       	adiw	r28, 0x01	; 1
     4f6:	ee 2d       	mov	r30, r14
     4f8:	ff 2d       	mov	r31, r15
     4fa:	df 01       	movw	r26, r30
     4fc:	0d 90       	ld	r0, X+
     4fe:	00 20       	and	r0, r0
     500:	e9 f7       	brne	.-6      	; 0x4fc <TWI_send_string+0x68>
     502:	11 97       	sbiw	r26, 0x01	; 1
     504:	ae 1b       	sub	r26, r30
     506:	bf 0b       	sbc	r27, r31
     508:	ca 17       	cp	r28, r26
     50a:	db 07       	cpc	r29, r27
     50c:	78 f3       	brcs	.-34     	; 0x4ec <TWI_send_string+0x58>
     50e:	cc de       	rcall	.-616    	; 0x2a8 <stop_bus>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	08 95       	ret

00000520 <TWI_send_string_fixed_length>:
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	c8 2f       	mov	r28, r24
     52e:	e6 2e       	mov	r14, r22
     530:	f7 2e       	mov	r15, r23
     532:	8a 01       	movw	r16, r20
     534:	b5 de       	rcall	.-662    	; 0x2a0 <start_bus>
     536:	c6 de       	rcall	.-628    	; 0x2c4 <wait_for_bus>
     538:	90 91 b9 00 	lds	r25, 0x00B9
     53c:	98 7f       	andi	r25, 0xF8	; 248
     53e:	98 30       	cpi	r25, 0x08	; 8
     540:	19 f0       	breq	.+6      	; 0x548 <TWI_send_string_fixed_length+0x28>
     542:	b6 de       	rcall	.-660    	; 0x2b0 <Error>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	23 c0       	rjmp	.+70     	; 0x58e <TWI_send_string_fixed_length+0x6e>
     548:	8c 2f       	mov	r24, r28
     54a:	c2 de       	rcall	.-636    	; 0x2d0 <send_data_and_wait>
     54c:	80 91 b9 00 	lds	r24, 0x00B9
     550:	88 7f       	andi	r24, 0xF8	; 248
     552:	88 31       	cpi	r24, 0x18	; 24
     554:	19 f0       	breq	.+6      	; 0x55c <TWI_send_string_fixed_length+0x3c>
     556:	ac de       	rcall	.-680    	; 0x2b0 <Error>
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	19 c0       	rjmp	.+50     	; 0x58e <TWI_send_string_fixed_length+0x6e>
     55c:	89 e1       	ldi	r24, 0x19	; 25
     55e:	b8 de       	rcall	.-656    	; 0x2d0 <send_data_and_wait>
     560:	80 91 b9 00 	lds	r24, 0x00B9
     564:	88 7f       	andi	r24, 0xF8	; 248
     566:	88 32       	cpi	r24, 0x28	; 40
     568:	21 f4       	brne	.+8      	; 0x572 <TWI_send_string_fixed_length+0x52>
     56a:	10 16       	cp	r1, r16
     56c:	11 06       	cpc	r1, r17
     56e:	24 f0       	brlt	.+8      	; 0x578 <TWI_send_string_fixed_length+0x58>
     570:	0c c0       	rjmp	.+24     	; 0x58a <TWI_send_string_fixed_length+0x6a>
     572:	9e de       	rcall	.-708    	; 0x2b0 <Error>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0b c0       	rjmp	.+22     	; 0x58e <TWI_send_string_fixed_length+0x6e>
     578:	ce 2d       	mov	r28, r14
     57a:	df 2d       	mov	r29, r15
     57c:	0c 0f       	add	r16, r28
     57e:	1d 1f       	adc	r17, r29
     580:	89 91       	ld	r24, Y+
     582:	a6 de       	rcall	.-692    	; 0x2d0 <send_data_and_wait>
     584:	c0 17       	cp	r28, r16
     586:	d1 07       	cpc	r29, r17
     588:	d9 f7       	brne	.-10     	; 0x580 <TWI_send_string_fixed_length+0x60>
     58a:	8e de       	rcall	.-740    	; 0x2a8 <stop_bus>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	08 95       	ret

0000059c <TWI_get_sensor>:
     59c:	83 5b       	subi	r24, 0xB3	; 179
     59e:	9c 4d       	sbci	r25, 0xDC	; 220
     5a0:	fc 01       	movw	r30, r24
     5a2:	80 81       	ld	r24, Z
     5a4:	08 95       	ret

000005a6 <TWI_get_servo>:
     5a6:	80 91 42 23 	lds	r24, 0x2342
     5aa:	08 95       	ret

000005ac <decode_message_TwiFIFO>:
     5ac:	8f 92       	push	r8
     5ae:	9f 92       	push	r9
     5b0:	af 92       	push	r10
     5b2:	bf 92       	push	r11
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	ad b6       	in	r10, 0x3d	; 61
     5ca:	be b6       	in	r11, 0x3e	; 62
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	80 91 00 01 	lds	r24, 0x0100
     5d4:	90 91 01 01 	lds	r25, 0x0101
     5d8:	e1 dd       	rcall	.-1086   	; 0x19c <FifoRead>
     5da:	81 11       	cpse	r24, r1
     5dc:	3b c0       	rjmp	.+118    	; 0x654 <decode_message_TwiFIFO+0xa8>
     5de:	c0 90 00 00 	lds	r12, 0x0000
     5e2:	d1 2c       	mov	r13, r1
     5e4:	96 01       	movw	r18, r12
     5e6:	21 50       	subi	r18, 0x01	; 1
     5e8:	31 09       	sbc	r19, r1
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	c1 14       	cp	r12, r1
     5f0:	d1 04       	cpc	r13, r1
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <decode_message_TwiFIFO+0x4c>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	82 0f       	add	r24, r18
     5fa:	93 1f       	adc	r25, r19
     5fc:	2d b7       	in	r18, 0x3d	; 61
     5fe:	3e b7       	in	r19, 0x3e	; 62
     600:	28 1b       	sub	r18, r24
     602:	39 0b       	sbc	r19, r25
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	3e bf       	out	0x3e, r19	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	2d bf       	out	0x3d, r18	; 61
     60e:	2f 5f       	subi	r18, 0xFF	; 255
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	82 2e       	mov	r8, r18
     614:	93 2e       	mov	r9, r19
     616:	1c 14       	cp	r1, r12
     618:	1d 04       	cpc	r1, r13
     61a:	bc f4       	brge	.+46     	; 0x64a <decode_message_TwiFIFO+0x9e>
     61c:	e2 2e       	mov	r14, r18
     61e:	f3 2e       	mov	r15, r19
     620:	00 e0       	ldi	r16, 0x00	; 0
     622:	10 e0       	ldi	r17, 0x00	; 0
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	80 91 00 01 	lds	r24, 0x0100
     62c:	90 91 01 01 	lds	r25, 0x0101
     630:	b5 dd       	rcall	.-1174   	; 0x19c <FifoRead>
     632:	81 11       	cpse	r24, r1
     634:	11 c0       	rjmp	.+34     	; 0x658 <decode_message_TwiFIFO+0xac>
     636:	20 91 00 00 	lds	r18, 0x0000
     63a:	f7 01       	movw	r30, r14
     63c:	21 93       	st	Z+, r18
     63e:	7f 01       	movw	r14, r30
     640:	0f 5f       	subi	r16, 0xFF	; 255
     642:	1f 4f       	sbci	r17, 0xFF	; 255
     644:	0c 15       	cp	r16, r12
     646:	1d 05       	cpc	r17, r13
     648:	6c f3       	brlt	.-38     	; 0x624 <decode_message_TwiFIFO+0x78>
     64a:	88 2d       	mov	r24, r8
     64c:	99 2d       	mov	r25, r9
     64e:	b2 d2       	rcall	.+1380   	; 0xbb4 <USART_SendMessage>
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	03 c0       	rjmp	.+6      	; 0x65a <decode_message_TwiFIFO+0xae>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	01 c0       	rjmp	.+2      	; 0x65a <decode_message_TwiFIFO+0xae>
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	be be       	out	0x3e, r11	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	ad be       	out	0x3d, r10	; 61
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	9f 90       	pop	r9
     67a:	8f 90       	pop	r8
     67c:	08 95       	ret

0000067e <write_to_TwiFIFO>:
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	e8 2e       	mov	r14, r24
     68c:	f9 2e       	mov	r15, r25
     68e:	e8 2f       	mov	r30, r24
     690:	f9 2f       	mov	r31, r25
     692:	df 01       	movw	r26, r30
     694:	0d 90       	ld	r0, X+
     696:	00 20       	and	r0, r0
     698:	e9 f7       	brne	.-6      	; 0x694 <write_to_TwiFIFO+0x16>
     69a:	11 97       	sbiw	r26, 0x01	; 1
     69c:	bd 01       	movw	r22, r26
     69e:	6e 1b       	sub	r22, r30
     6a0:	7f 0b       	sbc	r23, r31
     6a2:	80 91 00 01 	lds	r24, 0x0100
     6a6:	90 91 01 01 	lds	r25, 0x0101
     6aa:	58 dd       	rcall	.-1360   	; 0x15c <FifoWrite>
     6ac:	81 11       	cpse	r24, r1
     6ae:	1e c0       	rjmp	.+60     	; 0x6ec <write_to_TwiFIFO+0x6e>
     6b0:	0e 2d       	mov	r16, r14
     6b2:	1f 2d       	mov	r17, r15
     6b4:	c0 e0       	ldi	r28, 0x00	; 0
     6b6:	d0 e0       	ldi	r29, 0x00	; 0
     6b8:	0b c0       	rjmp	.+22     	; 0x6d0 <write_to_TwiFIFO+0x52>
     6ba:	f8 01       	movw	r30, r16
     6bc:	61 91       	ld	r22, Z+
     6be:	8f 01       	movw	r16, r30
     6c0:	80 91 00 01 	lds	r24, 0x0100
     6c4:	90 91 01 01 	lds	r25, 0x0101
     6c8:	49 dd       	rcall	.-1390   	; 0x15c <FifoWrite>
     6ca:	81 11       	cpse	r24, r1
     6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <write_to_TwiFIFO+0x72>
     6ce:	21 96       	adiw	r28, 0x01	; 1
     6d0:	ee 2d       	mov	r30, r14
     6d2:	ff 2d       	mov	r31, r15
     6d4:	df 01       	movw	r26, r30
     6d6:	0d 90       	ld	r0, X+
     6d8:	00 20       	and	r0, r0
     6da:	e9 f7       	brne	.-6      	; 0x6d6 <write_to_TwiFIFO+0x58>
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	ae 1b       	sub	r26, r30
     6e0:	bf 0b       	sbc	r27, r31
     6e2:	ca 17       	cp	r28, r26
     6e4:	db 07       	cpc	r29, r27
     6e6:	48 f3       	brcs	.-46     	; 0x6ba <write_to_TwiFIFO+0x3c>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <write_to_TwiFIFO+0x74>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <write_to_TwiFIFO+0x74>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	08 95       	ret

00000700 <__vector_26>:
     700:	1f 92       	push	r1
     702:	0f 92       	push	r0
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	0b b6       	in	r0, 0x3b	; 59
     70c:	0f 92       	push	r0
     70e:	2f 93       	push	r18
     710:	3f 93       	push	r19
     712:	4f 93       	push	r20
     714:	5f 93       	push	r21
     716:	6f 93       	push	r22
     718:	7f 93       	push	r23
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
     71e:	af 93       	push	r26
     720:	bf 93       	push	r27
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
     72a:	80 91 45 23 	lds	r24, 0x2345
     72e:	85 30       	cpi	r24, 0x05	; 5
     730:	09 f4       	brne	.+2      	; 0x734 <__vector_26+0x34>
     732:	54 c1       	rjmp	.+680    	; 0x9dc <__vector_26+0x2dc>
     734:	48 f4       	brcc	.+18     	; 0x748 <__vector_26+0x48>
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	09 f4       	brne	.+2      	; 0x73c <__vector_26+0x3c>
     73a:	4c c1       	rjmp	.+664    	; 0x9d4 <__vector_26+0x2d4>
     73c:	08 f4       	brcc	.+2      	; 0x740 <__vector_26+0x40>
     73e:	42 c1       	rjmp	.+644    	; 0x9c4 <__vector_26+0x2c4>
     740:	84 30       	cpi	r24, 0x04	; 4
     742:	09 f0       	breq	.+2      	; 0x746 <__vector_26+0x46>
     744:	50 c1       	rjmp	.+672    	; 0x9e6 <__vector_26+0x2e6>
     746:	42 c1       	rjmp	.+644    	; 0x9cc <__vector_26+0x2cc>
     748:	80 34       	cpi	r24, 0x40	; 64
     74a:	09 f4       	brne	.+2      	; 0x74e <__vector_26+0x4e>
     74c:	83 c0       	rjmp	.+262    	; 0x854 <__vector_26+0x154>
     74e:	80 38       	cpi	r24, 0x80	; 128
     750:	21 f0       	breq	.+8      	; 0x75a <__vector_26+0x5a>
     752:	80 32       	cpi	r24, 0x20	; 32
     754:	09 f0       	breq	.+2      	; 0x758 <__vector_26+0x58>
     756:	47 c1       	rjmp	.+654    	; 0x9e6 <__vector_26+0x2e6>
     758:	bd c0       	rjmp	.+378    	; 0x8d4 <__vector_26+0x1d4>
     75a:	80 91 b9 00 	lds	r24, 0x00B9
     75e:	88 7f       	andi	r24, 0xF8	; 248
     760:	80 36       	cpi	r24, 0x60	; 96
     762:	29 f0       	breq	.+10     	; 0x76e <__vector_26+0x6e>
     764:	80 91 b9 00 	lds	r24, 0x00B9
     768:	88 7f       	andi	r24, 0xF8	; 248
     76a:	88 36       	cpi	r24, 0x68	; 104
     76c:	21 f4       	brne	.+8      	; 0x776 <__vector_26+0x76>
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 93 38 23 	sts	0x2338, r24
     774:	6d c0       	rjmp	.+218    	; 0x850 <__vector_26+0x150>
     776:	80 91 b9 00 	lds	r24, 0x00B9
     77a:	88 7f       	andi	r24, 0xF8	; 248
     77c:	80 38       	cpi	r24, 0x80	; 128
     77e:	b9 f5       	brne	.+110    	; 0x7ee <__vector_26+0xee>
     780:	80 91 38 23 	lds	r24, 0x2338
     784:	88 23       	and	r24, r24
     786:	41 f0       	breq	.+16     	; 0x798 <__vector_26+0x98>
     788:	9a dd       	rcall	.-1228   	; 0x2be <get_data>
     78a:	80 93 2c 22 	sts	0x222C, r24
     78e:	10 92 2d 22 	sts	0x222D, r1
     792:	10 92 38 23 	sts	0x2338, r1
     796:	5c c0       	rjmp	.+184    	; 0x850 <__vector_26+0x150>
     798:	80 91 2c 22 	lds	r24, 0x222C
     79c:	90 91 2d 22 	lds	r25, 0x222D
     7a0:	85 30       	cpi	r24, 0x05	; 5
     7a2:	91 05       	cpc	r25, r1
     7a4:	71 f0       	breq	.+28     	; 0x7c2 <__vector_26+0xc2>
     7a6:	24 f4       	brge	.+8      	; 0x7b0 <__vector_26+0xb0>
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	09 f0       	breq	.+2      	; 0x7ae <__vector_26+0xae>
     7ac:	51 c0       	rjmp	.+162    	; 0x850 <__vector_26+0x150>
     7ae:	07 c0       	rjmp	.+14     	; 0x7be <__vector_26+0xbe>
     7b0:	86 30       	cpi	r24, 0x06	; 6
     7b2:	91 05       	cpc	r25, r1
     7b4:	51 f0       	breq	.+20     	; 0x7ca <__vector_26+0xca>
     7b6:	49 97       	sbiw	r24, 0x19	; 25
     7b8:	09 f0       	breq	.+2      	; 0x7bc <__vector_26+0xbc>
     7ba:	4a c0       	rjmp	.+148    	; 0x850 <__vector_26+0x150>
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__vector_26+0xc6>
     7be:	d0 dd       	rcall	.-1120   	; 0x360 <get_control_settings_from_bus>
     7c0:	47 c0       	rjmp	.+142    	; 0x850 <__vector_26+0x150>
     7c2:	df dd       	rcall	.-1090   	; 0x382 <get_autonom_settings_from_bus>
     7c4:	45 c0       	rjmp	.+138    	; 0x850 <__vector_26+0x150>
     7c6:	e1 dd       	rcall	.-1086   	; 0x38a <get_char_from_bus>
     7c8:	43 c0       	rjmp	.+134    	; 0x850 <__vector_26+0x150>
     7ca:	c0 91 2a 22 	lds	r28, 0x222A
     7ce:	d0 91 2b 22 	lds	r29, 0x222B
     7d2:	75 dd       	rcall	.-1302   	; 0x2be <get_data>
     7d4:	c7 5b       	subi	r28, 0xB7	; 183
     7d6:	dc 4d       	sbci	r29, 0xDC	; 220
     7d8:	88 83       	st	Y, r24
     7da:	80 91 2a 22 	lds	r24, 0x222A
     7de:	90 91 2b 22 	lds	r25, 0x222B
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	90 93 2b 22 	sts	0x222B, r25
     7e8:	80 93 2a 22 	sts	0x222A, r24
     7ec:	31 c0       	rjmp	.+98     	; 0x850 <__vector_26+0x150>
     7ee:	80 91 b9 00 	lds	r24, 0x00B9
     7f2:	88 7f       	andi	r24, 0xF8	; 248
     7f4:	80 39       	cpi	r24, 0x90	; 144
     7f6:	11 f4       	brne	.+4      	; 0x7fc <__vector_26+0xfc>
     7f8:	88 dd       	rcall	.-1264   	; 0x30a <get_sensor_from_bus>
     7fa:	2a c0       	rjmp	.+84     	; 0x850 <__vector_26+0x150>
     7fc:	80 91 b9 00 	lds	r24, 0x00B9
     800:	88 7f       	andi	r24, 0xF8	; 248
     802:	80 3a       	cpi	r24, 0xA0	; 160
     804:	29 f5       	brne	.+74     	; 0x850 <__vector_26+0x150>
     806:	6a dd       	rcall	.-1324   	; 0x2dc <stop_twi>
     808:	80 91 2c 22 	lds	r24, 0x222C
     80c:	90 91 2d 22 	lds	r25, 0x222D
     810:	85 30       	cpi	r24, 0x05	; 5
     812:	91 05       	cpc	r25, r1
     814:	71 f0       	breq	.+28     	; 0x832 <__vector_26+0x132>
     816:	1c f4       	brge	.+6      	; 0x81e <__vector_26+0x11e>
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	d1 f4       	brne	.+52     	; 0x850 <__vector_26+0x150>
     81c:	06 c0       	rjmp	.+12     	; 0x82a <__vector_26+0x12a>
     81e:	86 30       	cpi	r24, 0x06	; 6
     820:	91 05       	cpc	r25, r1
     822:	79 f0       	breq	.+30     	; 0x842 <__vector_26+0x142>
     824:	49 97       	sbiw	r24, 0x19	; 25
     826:	a1 f4       	brne	.+40     	; 0x850 <__vector_26+0x150>
     828:	08 c0       	rjmp	.+16     	; 0x83a <__vector_26+0x13a>
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 21 22 	sts	0x2221, r24
     830:	0f c0       	rjmp	.+30     	; 0x850 <__vector_26+0x150>
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	80 93 20 22 	sts	0x2220, r24
     838:	0b c0       	rjmp	.+22     	; 0x850 <__vector_26+0x150>
     83a:	88 e3       	ldi	r24, 0x38	; 56
     83c:	92 e2       	ldi	r25, 0x22	; 34
     83e:	1f df       	rcall	.-450    	; 0x67e <write_to_TwiFIFO>
     840:	07 c0       	rjmp	.+14     	; 0x850 <__vector_26+0x150>
     842:	89 e4       	ldi	r24, 0x49	; 73
     844:	93 e2       	ldi	r25, 0x23	; 35
     846:	d7 d1       	rcall	.+942    	; 0xbf6 <USART_SendValue>
     848:	10 92 2b 22 	sts	0x222B, r1
     84c:	10 92 2a 22 	sts	0x222A, r1
     850:	56 dd       	rcall	.-1364   	; 0x2fe <reset_TWI>
     852:	c9 c0       	rjmp	.+402    	; 0x9e6 <__vector_26+0x2e6>
     854:	80 91 b9 00 	lds	r24, 0x00B9
     858:	88 7f       	andi	r24, 0xF8	; 248
     85a:	80 36       	cpi	r24, 0x60	; 96
     85c:	29 f0       	breq	.+10     	; 0x868 <__vector_26+0x168>
     85e:	80 91 b9 00 	lds	r24, 0x00B9
     862:	88 7f       	andi	r24, 0xF8	; 248
     864:	88 36       	cpi	r24, 0x68	; 104
     866:	21 f4       	brne	.+8      	; 0x870 <__vector_26+0x170>
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 38 23 	sts	0x2338, r24
     86e:	30 c0       	rjmp	.+96     	; 0x8d0 <__vector_26+0x1d0>
     870:	80 91 b9 00 	lds	r24, 0x00B9
     874:	88 7f       	andi	r24, 0xF8	; 248
     876:	80 38       	cpi	r24, 0x80	; 128
     878:	e1 f4       	brne	.+56     	; 0x8b2 <__vector_26+0x1b2>
     87a:	80 91 38 23 	lds	r24, 0x2338
     87e:	88 23       	and	r24, r24
     880:	41 f0       	breq	.+16     	; 0x892 <__vector_26+0x192>
     882:	1d dd       	rcall	.-1478   	; 0x2be <get_data>
     884:	80 93 2c 22 	sts	0x222C, r24
     888:	10 92 2d 22 	sts	0x222D, r1
     88c:	10 92 38 23 	sts	0x2338, r1
     890:	1f c0       	rjmp	.+62     	; 0x8d0 <__vector_26+0x1d0>
     892:	80 91 2c 22 	lds	r24, 0x222C
     896:	90 91 2d 22 	lds	r25, 0x222D
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	91 05       	cpc	r25, r1
     89e:	19 f0       	breq	.+6      	; 0x8a6 <__vector_26+0x1a6>
     8a0:	49 97       	sbiw	r24, 0x19	; 25
     8a2:	b1 f4       	brne	.+44     	; 0x8d0 <__vector_26+0x1d0>
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__vector_26+0x1ae>
     8a6:	0b dd       	rcall	.-1514   	; 0x2be <get_data>
     8a8:	80 93 46 23 	sts	0x2346, r24
     8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <__vector_26+0x1d0>
     8ae:	6d dd       	rcall	.-1318   	; 0x38a <get_char_from_bus>
     8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <__vector_26+0x1d0>
     8b2:	80 91 b9 00 	lds	r24, 0x00B9
     8b6:	88 7f       	andi	r24, 0xF8	; 248
     8b8:	80 3a       	cpi	r24, 0xA0	; 160
     8ba:	51 f4       	brne	.+20     	; 0x8d0 <__vector_26+0x1d0>
     8bc:	0f dd       	rcall	.-1506   	; 0x2dc <stop_twi>
     8be:	80 91 2c 22 	lds	r24, 0x222C
     8c2:	90 91 2d 22 	lds	r25, 0x222D
     8c6:	02 97       	sbiw	r24, 0x02	; 2
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__vector_26+0x1d0>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	80 93 1e 22 	sts	0x221E, r24
     8d0:	16 dd       	rcall	.-1492   	; 0x2fe <reset_TWI>
     8d2:	89 c0       	rjmp	.+274    	; 0x9e6 <__vector_26+0x2e6>
     8d4:	80 91 b9 00 	lds	r24, 0x00B9
     8d8:	88 7f       	andi	r24, 0xF8	; 248
     8da:	80 36       	cpi	r24, 0x60	; 96
     8dc:	29 f0       	breq	.+10     	; 0x8e8 <__vector_26+0x1e8>
     8de:	80 91 b9 00 	lds	r24, 0x00B9
     8e2:	88 7f       	andi	r24, 0xF8	; 248
     8e4:	88 36       	cpi	r24, 0x68	; 104
     8e6:	21 f4       	brne	.+8      	; 0x8f0 <__vector_26+0x1f0>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 38 23 	sts	0x2338, r24
     8ee:	7a c0       	rjmp	.+244    	; 0x9e4 <__vector_26+0x2e4>
     8f0:	80 91 b9 00 	lds	r24, 0x00B9
     8f4:	88 7f       	andi	r24, 0xF8	; 248
     8f6:	80 38       	cpi	r24, 0x80	; 128
     8f8:	09 f0       	breq	.+2      	; 0x8fc <__vector_26+0x1fc>
     8fa:	57 c0       	rjmp	.+174    	; 0x9aa <__vector_26+0x2aa>
     8fc:	80 91 38 23 	lds	r24, 0x2338
     900:	88 23       	and	r24, r24
     902:	41 f0       	breq	.+16     	; 0x914 <__vector_26+0x214>
     904:	dc dc       	rcall	.-1608   	; 0x2be <get_data>
     906:	80 93 2c 22 	sts	0x222C, r24
     90a:	10 92 2d 22 	sts	0x222D, r1
     90e:	10 92 38 23 	sts	0x2338, r1
     912:	68 c0       	rjmp	.+208    	; 0x9e4 <__vector_26+0x2e4>
     914:	80 91 2c 22 	lds	r24, 0x222C
     918:	90 91 2d 22 	lds	r25, 0x222D
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	91 05       	cpc	r25, r1
     920:	09 f4       	brne	.+2      	; 0x924 <__vector_26+0x224>
     922:	3f c0       	rjmp	.+126    	; 0x9a2 <__vector_26+0x2a2>
     924:	1c f4       	brge	.+6      	; 0x92c <__vector_26+0x22c>
     926:	89 2b       	or	r24, r25
     928:	41 f0       	breq	.+16     	; 0x93a <__vector_26+0x23a>
     92a:	5c c0       	rjmp	.+184    	; 0x9e4 <__vector_26+0x2e4>
     92c:	84 30       	cpi	r24, 0x04	; 4
     92e:	91 05       	cpc	r25, r1
     930:	b1 f0       	breq	.+44     	; 0x95e <__vector_26+0x25e>
     932:	05 97       	sbiw	r24, 0x05	; 5
     934:	09 f0       	breq	.+2      	; 0x938 <__vector_26+0x238>
     936:	56 c0       	rjmp	.+172    	; 0x9e4 <__vector_26+0x2e4>
     938:	36 c0       	rjmp	.+108    	; 0x9a6 <__vector_26+0x2a6>
     93a:	c0 91 3c 23 	lds	r28, 0x233C
     93e:	d0 91 3d 23 	lds	r29, 0x233D
     942:	bd dc       	rcall	.-1670   	; 0x2be <get_data>
     944:	cb 5c       	subi	r28, 0xCB	; 203
     946:	dd 4d       	sbci	r29, 0xDD	; 221
     948:	88 83       	st	Y, r24
     94a:	80 91 3c 23 	lds	r24, 0x233C
     94e:	90 91 3d 23 	lds	r25, 0x233D
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	90 93 3d 23 	sts	0x233D, r25
     958:	80 93 3c 23 	sts	0x233C, r24
     95c:	43 c0       	rjmp	.+134    	; 0x9e4 <__vector_26+0x2e4>
     95e:	af dc       	rcall	.-1698   	; 0x2be <get_data>
     960:	20 91 3e 23 	lds	r18, 0x233E
     964:	30 91 3f 23 	lds	r19, 0x233F
     968:	a9 01       	movw	r20, r18
     96a:	48 0f       	add	r20, r24
     96c:	51 1d       	adc	r21, r1
     96e:	ca 01       	movw	r24, r20
     970:	18 16       	cp	r1, r24
     972:	19 06       	cpc	r1, r25
     974:	3c f0       	brlt	.+14     	; 0x984 <__vector_26+0x284>
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	90 93 3f 23 	sts	0x233F, r25
     97e:	80 93 3e 23 	sts	0x233E, r24
     982:	30 c0       	rjmp	.+96     	; 0x9e4 <__vector_26+0x2e4>
     984:	48 30       	cpi	r20, 0x08	; 8
     986:	51 05       	cpc	r21, r1
     988:	2c f4       	brge	.+10     	; 0x994 <__vector_26+0x294>
     98a:	50 93 3f 23 	sts	0x233F, r21
     98e:	40 93 3e 23 	sts	0x233E, r20
     992:	28 c0       	rjmp	.+80     	; 0x9e4 <__vector_26+0x2e4>
     994:	87 e0       	ldi	r24, 0x07	; 7
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	90 93 3f 23 	sts	0x233F, r25
     99c:	80 93 3e 23 	sts	0x233E, r24
     9a0:	21 c0       	rjmp	.+66     	; 0x9e4 <__vector_26+0x2e4>
     9a2:	de dc       	rcall	.-1604   	; 0x360 <get_control_settings_from_bus>
     9a4:	1f c0       	rjmp	.+62     	; 0x9e4 <__vector_26+0x2e4>
     9a6:	ed dc       	rcall	.-1574   	; 0x382 <get_autonom_settings_from_bus>
     9a8:	1d c0       	rjmp	.+58     	; 0x9e4 <__vector_26+0x2e4>
     9aa:	80 91 b9 00 	lds	r24, 0x00B9
     9ae:	88 7f       	andi	r24, 0xF8	; 248
     9b0:	80 39       	cpi	r24, 0x90	; 144
     9b2:	11 f4       	brne	.+4      	; 0x9b8 <__vector_26+0x2b8>
     9b4:	aa dc       	rcall	.-1708   	; 0x30a <get_sensor_from_bus>
     9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <__vector_26+0x2e4>
     9b8:	80 91 b9 00 	lds	r24, 0x00B9
     9bc:	88 7f       	andi	r24, 0xF8	; 248
     9be:	80 3a       	cpi	r24, 0xA0	; 160
     9c0:	89 f4       	brne	.+34     	; 0x9e4 <__vector_26+0x2e4>
     9c2:	8c dc       	rcall	.-1768   	; 0x2dc <stop_twi>
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 22 22 	sts	0x2222, r24
     9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__vector_26+0x2e6>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 1f 22 	sts	0x221F, r24
     9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <__vector_26+0x2e6>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	80 93 21 22 	sts	0x2221, r24
     9da:	05 c0       	rjmp	.+10     	; 0x9e6 <__vector_26+0x2e6>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 20 22 	sts	0x2220, r24
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <__vector_26+0x2e6>
     9e4:	8c dc       	rcall	.-1768   	; 0x2fe <reset_TWI>
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	bf 91       	pop	r27
     9f0:	af 91       	pop	r26
     9f2:	9f 91       	pop	r25
     9f4:	8f 91       	pop	r24
     9f6:	7f 91       	pop	r23
     9f8:	6f 91       	pop	r22
     9fa:	5f 91       	pop	r21
     9fc:	4f 91       	pop	r20
     9fe:	3f 91       	pop	r19
     a00:	2f 91       	pop	r18
     a02:	0f 90       	pop	r0
     a04:	0b be       	out	0x3b, r0	; 59
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	0f 90       	pop	r0
     a0c:	1f 90       	pop	r1
     a0e:	18 95       	reti

00000a10 <USART_init>:
uint8_t USART_ReadByte()
{
	// NOTE: check if data is available before calling this function. Should probably be implemented w. interrupt.
	return UDR0;

}
     a10:	10 92 c5 00 	sts	0x00C5, r1
     a14:	89 e0       	ldi	r24, 0x09	; 9
     a16:	80 93 c4 00 	sts	0x00C4, r24
     a1a:	88 e9       	ldi	r24, 0x98	; 152
     a1c:	80 93 c1 00 	sts	0x00C1, r24
     a20:	86 e0       	ldi	r24, 0x06	; 6
     a22:	80 93 c2 00 	sts	0x00C2, r24
     a26:	08 95       	ret

00000a28 <USART_CheckTxReady>:
     a28:	80 91 c0 00 	lds	r24, 0x00C0
     a2c:	80 72       	andi	r24, 0x20	; 32
     a2e:	08 95       	ret

00000a30 <USART_WriteByte>:
     a30:	cf 93       	push	r28
     a32:	c8 2f       	mov	r28, r24
     a34:	f9 df       	rcall	.-14     	; 0xa28 <USART_CheckTxReady>
     a36:	88 23       	and	r24, r24
     a38:	e9 f3       	breq	.-6      	; 0xa34 <USART_WriteByte+0x4>
     a3a:	c0 93 c6 00 	sts	0x00C6, r28
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <USART_crc16>:


// calculate crc for packet
uint16_t USART_crc16(uint8_t tag, uint8_t length)
{
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
	uint16_t data, i;
	unsigned int crc; // maybe use uint16_t here
	
	crc = 0xffff;
	
	if (length == 0)
     a52:	66 23       	and	r22, r22
     a54:	09 f4       	brne	.+2      	; 0xa58 <USART_crc16+0x16>
     a56:	3e c0       	rjmp	.+124    	; 0xad4 <USART_crc16+0x92>
	return (~crc);
	
	for(count = -2; count < length ; ++count)
     a58:	06 2f       	mov	r16, r22
     a5a:	10 e0       	ldi	r17, 0x00	; 0
     a5c:	4f ef       	ldi	r20, 0xFF	; 255
     a5e:	5f ef       	ldi	r21, 0xFF	; 255
     a60:	ee ef       	ldi	r30, 0xFE	; 254
     a62:	ff ef       	ldi	r31, 0xFF	; 255
		if(count == -2)
		{
			data = tag;
		}else if(count == -1)
		{
			data = length;
     a64:	c6 2e       	mov	r12, r22
     a66:	d1 2c       	mov	r13, r1
	
	for(count = -2; count < length ; ++count)
	{
		if(count == -2)
		{
			data = tag;
     a68:	e8 2e       	mov	r14, r24
     a6a:	f1 2c       	mov	r15, r1
	crc = 0xffff;
	
	if (length == 0)
	return (~crc);
	
	for(count = -2; count < length ; ++count)
     a6c:	c8 e0       	ldi	r28, 0x08	; 8
     a6e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(count == -2)
     a70:	ee 3f       	cpi	r30, 0xFE	; 254
     a72:	6f ef       	ldi	r22, 0xFF	; 255
     a74:	f6 07       	cpc	r31, r22
     a76:	19 f4       	brne	.+6      	; 0xa7e <USART_crc16+0x3c>
		{
			data = tag;
     a78:	8e 2d       	mov	r24, r14
     a7a:	9f 2d       	mov	r25, r15
     a7c:	30 c0       	rjmp	.+96     	; 0xade <USART_crc16+0x9c>
		}else if(count == -1)
     a7e:	ef 3f       	cpi	r30, 0xFF	; 255
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	f8 07       	cpc	r31, r24
     a84:	19 f4       	brne	.+6      	; 0xa8c <USART_crc16+0x4a>
		{
			data = length;
     a86:	8c 2d       	mov	r24, r12
     a88:	9d 2d       	mov	r25, r13
     a8a:	29 c0       	rjmp	.+82     	; 0xade <USART_crc16+0x9c>

}


// calculate crc for packet
uint16_t USART_crc16(uint8_t tag, uint8_t length)
     a8c:	df 01       	movw	r26, r30
     a8e:	a7 5a       	subi	r26, 0xA7	; 167
     a90:	ba 4d       	sbci	r27, 0xDA	; 218
		}else if(count == -1)
		{
			data = length;
		}else
		{
			data = gTxPayload[count];
     a92:	8c 91       	ld	r24, X
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	23 c0       	rjmp	.+70     	; 0xade <USART_crc16+0x9c>
		}
		
		for (i = 0; i < 8; ++i)
		{
			if ((crc & 0x0001) ^ (data & 0x0001))
     a98:	ba 01       	movw	r22, r20
     a9a:	68 27       	eor	r22, r24
     a9c:	79 27       	eor	r23, r25
     a9e:	60 ff       	sbrs	r22, 0
     aa0:	07 c0       	rjmp	.+14     	; 0xab0 <USART_crc16+0x6e>
			{
				crc = (crc >> 1) ^ POLY;
     aa2:	56 95       	lsr	r21
     aa4:	47 95       	ror	r20
     aa6:	68 e0       	ldi	r22, 0x08	; 8
     aa8:	46 27       	eor	r20, r22
     aaa:	64 e8       	ldi	r22, 0x84	; 132
     aac:	56 27       	eor	r21, r22
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <USART_crc16+0x72>
			}else
			{
				crc >>= 1;
     ab0:	56 95       	lsr	r21
     ab2:	47 95       	ror	r20
			}
			
			data >>= 1;
     ab4:	96 95       	lsr	r25
     ab6:	87 95       	ror	r24
     ab8:	21 50       	subi	r18, 0x01	; 1
     aba:	31 09       	sbc	r19, r1
		}else
		{
			data = gTxPayload[count];
		}
		
		for (i = 0; i < 8; ++i)
     abc:	69 f7       	brne	.-38     	; 0xa98 <USART_crc16+0x56>
	crc = 0xffff;
	
	if (length == 0)
	return (~crc);
	
	for(count = -2; count < length ; ++count)
     abe:	31 96       	adiw	r30, 0x01	; 1
     ac0:	e0 17       	cp	r30, r16
     ac2:	f1 07       	cpc	r31, r17
     ac4:	a9 f6       	brne	.-86     	; 0xa70 <USART_crc16+0x2e>
			
			data >>= 1;
		}
	}
	
	crc = ~crc;
     ac6:	9a 01       	movw	r18, r20
     ac8:	20 95       	com	r18
     aca:	30 95       	com	r19
	
	data = crc;
	crc = (crc << 8 | (data >> 8 & 0xff));
     acc:	32 27       	eor	r19, r18
     ace:	23 27       	eor	r18, r19
     ad0:	32 27       	eor	r19, r18
	
	return (crc);
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <USART_crc16+0x96>
	unsigned int crc; // maybe use uint16_t here
	
	crc = 0xffff;
	
	if (length == 0)
	return (~crc);
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	82 2f       	mov	r24, r18
     ada:	93 2f       	mov	r25, r19
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <USART_crc16+0xa0>
	
	for(count = -2; count < length ; ++count)
     ade:	9e 01       	movw	r18, r28
     ae0:	db cf       	rjmp	.-74     	; 0xa98 <USART_crc16+0x56>
	
	data = crc;
	crc = (crc << 8 | (data >> 8 & 0xff));
	
	return (crc);
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	08 95       	ret

00000af4 <USART_SendPacket>:

void USART_SendPacket(char tag, uint8_t length)
{
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
	int count, offset, buffersize;
	uint16_t crc;
	
	// put start of packet into transmit buffer
	gTxBuffer[0] = 0x7e; // frame delimiter
     afc:	9e e7       	ldi	r25, 0x7E	; 126
     afe:	90 93 58 26 	sts	0x2658, r25
	gTxBuffer[1] = tag;
     b02:	80 93 59 26 	sts	0x2659, r24
	gTxBuffer[2] = length;
     b06:	60 93 5a 26 	sts	0x265A, r22
	
	// payload
	
	offset = 3;
	
	for(count = 0; count < length; ++count)
     b0a:	26 2f       	mov	r18, r22
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	12 16       	cp	r1, r18
     b10:	13 06       	cpc	r1, r19
     b12:	4c f5       	brge	.+82     	; 0xb66 <USART_SendPacket+0x72>
     b14:	e9 e5       	ldi	r30, 0x59	; 89
     b16:	f5 e2       	ldi	r31, 0x25	; 37
	gTxBuffer[1] = tag;
	gTxBuffer[2] = length;
	
	// payload
	
	offset = 3;
     b18:	03 e0       	ldi	r16, 0x03	; 3
     b1a:	10 e0       	ldi	r17, 0x00	; 0
	
	for(count = 0; count < length; ++count)
     b1c:	c0 e0       	ldi	r28, 0x00	; 0
     b1e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(gTxPayload[count] == 0x7e || gTxPayload[count] == 0x7d) // if frame delimiter or escape octet occurs in data
		{
			gTxBuffer[count + offset] = 0x7d; // add the escape octet
     b20:	7d e7       	ldi	r23, 0x7D	; 125
			offset++;
			gTxBuffer[count + offset] = (1<<5)^gTxPayload[count]; // invert bit 5 in data
     b22:	50 e2       	ldi	r21, 0x20	; 32
	
	offset = 3;
	
	for(count = 0; count < length; ++count)
	{
		if(gTxPayload[count] == 0x7e || gTxPayload[count] == 0x7d) // if frame delimiter or escape octet occurs in data
     b24:	90 81       	ld	r25, Z
     b26:	49 2f       	mov	r20, r25
     b28:	4d 57       	subi	r20, 0x7D	; 125
     b2a:	42 30       	cpi	r20, 0x02	; 2
     b2c:	80 f4       	brcc	.+32     	; 0xb4e <USART_SendPacket+0x5a>
		{
			gTxBuffer[count + offset] = 0x7d; // add the escape octet
     b2e:	d8 01       	movw	r26, r16
     b30:	a8 5a       	subi	r26, 0xA8	; 168
     b32:	b9 4d       	sbci	r27, 0xD9	; 217
     b34:	ac 0f       	add	r26, r28
     b36:	bd 1f       	adc	r27, r29
     b38:	7c 93       	st	X, r23
			offset++;
     b3a:	0f 5f       	subi	r16, 0xFF	; 255
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
			gTxBuffer[count + offset] = (1<<5)^gTxPayload[count]; // invert bit 5 in data
     b3e:	d8 01       	movw	r26, r16
     b40:	a8 5a       	subi	r26, 0xA8	; 168
     b42:	b9 4d       	sbci	r27, 0xD9	; 217
     b44:	ac 0f       	add	r26, r28
     b46:	bd 1f       	adc	r27, r29
     b48:	95 27       	eor	r25, r21
     b4a:	9c 93       	st	X, r25
     b4c:	06 c0       	rjmp	.+12     	; 0xb5a <USART_SendPacket+0x66>
		}else
		{
			gTxBuffer[count + offset] = gTxPayload[count];
     b4e:	d8 01       	movw	r26, r16
     b50:	a8 5a       	subi	r26, 0xA8	; 168
     b52:	b9 4d       	sbci	r27, 0xD9	; 217
     b54:	ac 0f       	add	r26, r28
     b56:	bd 1f       	adc	r27, r29
     b58:	9c 93       	st	X, r25
	
	// payload
	
	offset = 3;
	
	for(count = 0; count < length; ++count)
     b5a:	21 96       	adiw	r28, 0x01	; 1
     b5c:	31 96       	adiw	r30, 0x01	; 1
     b5e:	c2 17       	cp	r28, r18
     b60:	d3 07       	cpc	r29, r19
     b62:	01 f7       	brne	.-64     	; 0xb24 <USART_SendPacket+0x30>
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <USART_SendPacket+0x7a>
	gTxBuffer[1] = tag;
	gTxBuffer[2] = length;
	
	// payload
	
	offset = 3;
     b66:	03 e0       	ldi	r16, 0x03	; 3
     b68:	10 e0       	ldi	r17, 0x00	; 0
	
	for(count = 0; count < length; ++count)
     b6a:	c0 e0       	ldi	r28, 0x00	; 0
     b6c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			gTxBuffer[count + offset] = gTxPayload[count];
		}
	}
	
	crc = USART_crc16(tag, length);
     b6e:	69 df       	rcall	.-302    	; 0xa42 <USART_crc16>
	
	gTxBuffer[count+offset] = (uint8_t)(crc >> 8);
     b70:	f8 01       	movw	r30, r16
     b72:	e8 5a       	subi	r30, 0xA8	; 168
     b74:	f9 4d       	sbci	r31, 0xD9	; 217
     b76:	ec 0f       	add	r30, r28
     b78:	fd 1f       	adc	r31, r29
     b7a:	90 83       	st	Z, r25
	++count;
	gTxBuffer[count + offset] = (uint8_t)(crc);
     b7c:	81 83       	std	Z+1, r24	; 0x01
	++count;
     b7e:	22 96       	adiw	r28, 0x02	; 2
	
	
	gTxBuffer[count+offset] = 0x7e;
     b80:	0c 0f       	add	r16, r28
     b82:	1d 1f       	adc	r17, r29
     b84:	f8 01       	movw	r30, r16
     b86:	e8 5a       	subi	r30, 0xA8	; 168
     b88:	f9 4d       	sbci	r31, 0xD9	; 217
     b8a:	8e e7       	ldi	r24, 0x7E	; 126
     b8c:	80 83       	st	Z, r24
	
	buffersize = count + offset;
	
	for(count = 0; count < buffersize + 1; ++count)
     b8e:	c8 01       	movw	r24, r16
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	18 16       	cp	r1, r24
     b94:	19 06       	cpc	r1, r25
     b96:	4c f4       	brge	.+18     	; 0xbaa <USART_SendPacket+0xb6>
     b98:	c8 e5       	ldi	r28, 0x58	; 88
     b9a:	d6 e2       	ldi	r29, 0x26	; 38
	crc = (crc << 8 | (data >> 8 & 0xff));
	
	return (crc);
}

void USART_SendPacket(char tag, uint8_t length)
     b9c:	07 5a       	subi	r16, 0xA7	; 167
     b9e:	19 4d       	sbci	r17, 0xD9	; 217
	
	buffersize = count + offset;
	
	for(count = 0; count < buffersize + 1; ++count)
	{
		USART_WriteByte(gTxBuffer[count]);
     ba0:	89 91       	ld	r24, Y+
     ba2:	46 df       	rcall	.-372    	; 0xa30 <USART_WriteByte>
	
	gTxBuffer[count+offset] = 0x7e;
	
	buffersize = count + offset;
	
	for(count = 0; count < buffersize + 1; ++count)
     ba4:	c0 17       	cp	r28, r16
     ba6:	d1 07       	cpc	r29, r17
     ba8:	d9 f7       	brne	.-10     	; 0xba0 <USART_SendPacket+0xac>
	{
		USART_WriteByte(gTxBuffer[count]);
	}
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <USART_SendMessage>:

void USART_SendMessage(char msg[])
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	c8 2f       	mov	r28, r24
     bba:	d9 2f       	mov	r29, r25
     bbc:	49 e5       	ldi	r20, 0x59	; 89
     bbe:	55 e2       	ldi	r21, 0x25	; 37
	for(int i = 0; i < strlen(msg); ++i )
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <USART_SendMessage+0x1e>
	{
		gTxPayload[i] = msg[i];
     bc6:	69 91       	ld	r22, Y+
     bc8:	fa 01       	movw	r30, r20
     bca:	61 93       	st	Z+, r22
     bcc:	af 01       	movw	r20, r30
	}
}

void USART_SendMessage(char msg[])
{
	for(int i = 0; i < strlen(msg); ++i )
     bce:	2f 5f       	subi	r18, 0xFF	; 255
     bd0:	3f 4f       	sbci	r19, 0xFF	; 255
     bd2:	e8 2f       	mov	r30, r24
     bd4:	f9 2f       	mov	r31, r25
     bd6:	df 01       	movw	r26, r30
     bd8:	0d 90       	ld	r0, X+
     bda:	00 20       	and	r0, r0
     bdc:	e9 f7       	brne	.-6      	; 0xbd8 <USART_SendMessage+0x24>
     bde:	11 97       	sbiw	r26, 0x01	; 1
     be0:	bd 01       	movw	r22, r26
     be2:	6e 1b       	sub	r22, r30
     be4:	7f 0b       	sbc	r23, r31
     be6:	26 17       	cp	r18, r22
     be8:	37 07       	cpc	r19, r23
     bea:	68 f3       	brcs	.-38     	; 0xbc6 <USART_SendMessage+0x12>
	{
		gTxPayload[i] = msg[i];
	}
	
	USART_SendPacket('M', strlen(msg));
     bec:	8d e4       	ldi	r24, 0x4D	; 77
     bee:	82 df       	rcall	.-252    	; 0xaf4 <USART_SendPacket>
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <USART_SendValue>:

void USART_SendValue(uint8_t msg[])
{
     bf6:	a8 2f       	mov	r26, r24
     bf8:	b9 2f       	mov	r27, r25
     bfa:	e9 e5       	ldi	r30, 0x59	; 89
     bfc:	f5 e2       	ldi	r31, 0x25	; 37
	}
	
	USART_SendPacket('M', strlen(msg));
}

void USART_SendValue(uint8_t msg[])
     bfe:	8d e5       	ldi	r24, 0x5D	; 93
     c00:	95 e2       	ldi	r25, 0x25	; 37
{
	for(int i = 0; i < 4; ++i )
	{
		gTxPayload[i] = msg[i];
     c02:	2d 91       	ld	r18, X+
     c04:	21 93       	st	Z+, r18
	USART_SendPacket('M', strlen(msg));
}

void USART_SendValue(uint8_t msg[])
{
	for(int i = 0; i < 4; ++i )
     c06:	e8 17       	cp	r30, r24
     c08:	f9 07       	cpc	r31, r25
     c0a:	d9 f7       	brne	.-10     	; 0xc02 <USART_SendValue+0xc>
	{
		gTxPayload[i] = msg[i];
	}
	
	USART_SendPacket('V', 4);
     c0c:	64 e0       	ldi	r22, 0x04	; 4
     c0e:	86 e5       	ldi	r24, 0x56	; 86
     c10:	71 cf       	rjmp	.-286    	; 0xaf4 <USART_SendPacket>

00000c12 <USART_SendSensors>:
}

void USART_SendSensors()
{
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	09 e5       	ldi	r16, 0x59	; 89
     c1c:	15 e2       	ldi	r17, 0x25	; 37
	for(int i = 0; i < 7; i++)
     c1e:	c0 e0       	ldi	r28, 0x00	; 0
     c20:	d0 e0       	ldi	r29, 0x00	; 0
	{
		gTxPayload[i] = TWI_get_sensor(i);
     c22:	ce 01       	movw	r24, r28
     c24:	bb dc       	rcall	.-1674   	; 0x59c <TWI_get_sensor>
     c26:	f8 01       	movw	r30, r16
     c28:	81 93       	st	Z+, r24
     c2a:	8f 01       	movw	r16, r30
	USART_SendPacket('V', 4);
}

void USART_SendSensors()
{
	for(int i = 0; i < 7; i++)
     c2c:	21 96       	adiw	r28, 0x01	; 1
     c2e:	c7 30       	cpi	r28, 0x07	; 7
     c30:	d1 05       	cpc	r29, r1
     c32:	b9 f7       	brne	.-18     	; 0xc22 <USART_SendSensors+0x10>
		gTxPayload[i] = TWI_get_sensor(i);
	}
	
	//UL sensor
	
	gTxPayload[7] = 254;
     c34:	8e ef       	ldi	r24, 0xFE	; 254
     c36:	80 93 60 25 	sts	0x2560, r24
	gTxPayload[8] = TWI_get_servo();
     c3a:	b5 dc       	rcall	.-1686   	; 0x5a6 <TWI_get_servo>
     c3c:	80 93 61 25 	sts	0x2561, r24
	
	USART_SendPacket('S', 9);
     c40:	69 e0       	ldi	r22, 0x09	; 9
     c42:	83 e5       	ldi	r24, 0x53	; 83
     c44:	57 df       	rcall	.-338    	; 0xaf4 <USART_SendPacket>
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <USART_DecodeMessageRxFIFO>:

uint8_t USART_DecodeMessageRxFIFO()
{
     c50:	8f 92       	push	r8
     c52:	9f 92       	push	r9
     c54:	af 92       	push	r10
     c56:	bf 92       	push	r11
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	
	// TODO: send to relevant party... the display for now
	TWI_send_string_fixed_length(S_ADRESS, msg, length);
	
	return 0;
}
     c6c:	ad b6       	in	r10, 0x3d	; 61
     c6e:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gRxFIFO, len))
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	80 91 08 11 	lds	r24, 0x1108
     c78:	90 91 09 11 	lds	r25, 0x1109
     c7c:	8f da       	rcall	.-2786   	; 0x19c <FifoRead>
     c7e:	88 23       	and	r24, r24
     c80:	31 f0       	breq	.+12     	; 0xc8e <USART_DecodeMessageRxFIFO+0x3e>
	{
		TWI_send_string(S_ADRESS, "RxFIFO MESSAGE ERROR: LEN MISSING");
     c82:	60 e1       	ldi	r22, 0x10	; 16
     c84:	71 e2       	ldi	r23, 0x21	; 33
     c86:	80 e4       	ldi	r24, 0x40	; 64
     c88:	05 dc       	rcall	.-2038   	; 0x494 <TWI_send_string>
		return 1; // error
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	43 c0       	rjmp	.+134    	; 0xd14 <USART_DecodeMessageRxFIFO+0xc4>
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
     c8e:	c0 90 00 00 	lds	r12, 0x0000
     c92:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];
     c94:	96 01       	movw	r18, r12
     c96:	21 50       	subi	r18, 0x01	; 1
     c98:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	c1 14       	cp	r12, r1
     ca0:	d1 04       	cpc	r13, r1
     ca2:	11 f0       	breq	.+4      	; 0xca8 <USART_DecodeMessageRxFIFO+0x58>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t msg[length-1+ifzero];
     ca8:	82 0f       	add	r24, r18
     caa:	93 1f       	adc	r25, r19
     cac:	2d b7       	in	r18, 0x3d	; 61
     cae:	3e b7       	in	r19, 0x3e	; 62
     cb0:	28 1b       	sub	r18, r24
     cb2:	39 0b       	sbc	r19, r25
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	3e bf       	out	0x3e, r19	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	2d bf       	out	0x3d, r18	; 61
     cbe:	8d b7       	in	r24, 0x3d	; 61
     cc0:	9e b7       	in	r25, 0x3e	; 62
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	88 2e       	mov	r8, r24
     cc6:	99 2e       	mov	r9, r25

	for(int i = 0; i < length; ++i)
     cc8:	1c 14       	cp	r1, r12
     cca:	1d 04       	cpc	r1, r13
     ccc:	ec f4       	brge	.+58     	; 0xd08 <USART_DecodeMessageRxFIFO+0xb8>
     cce:	e8 2e       	mov	r14, r24
     cd0:	f9 2e       	mov	r15, r25
     cd2:	00 e0       	ldi	r16, 0x00	; 0
     cd4:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gRxFIFO, character))
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 91 08 11 	lds	r24, 0x1108
     cde:	90 91 09 11 	lds	r25, 0x1109
     ce2:	5c da       	rcall	.-2888   	; 0x19c <FifoRead>
     ce4:	88 23       	and	r24, r24
     ce6:	31 f0       	breq	.+12     	; 0xcf4 <USART_DecodeMessageRxFIFO+0xa4>
		{
			TWI_send_string(S_ADRESS, "RxFIFO MESSAGE ERROR: DATA MISSING");
     ce8:	62 e3       	ldi	r22, 0x32	; 50
     cea:	71 e2       	ldi	r23, 0x21	; 33
     cec:	80 e4       	ldi	r24, 0x40	; 64
     cee:	d2 db       	rcall	.-2140   	; 0x494 <TWI_send_string>
			return 1; // error
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	10 c0       	rjmp	.+32     	; 0xd14 <USART_DecodeMessageRxFIFO+0xc4>
		}

		msg[i] = *character;
     cf4:	80 91 00 00 	lds	r24, 0x0000
     cf8:	f7 01       	movw	r30, r14
     cfa:	81 93       	st	Z+, r24
     cfc:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
     cfe:	0f 5f       	subi	r16, 0xFF	; 255
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	0c 15       	cp	r16, r12
     d04:	1d 05       	cpc	r17, r13
     d06:	3c f3       	brlt	.-50     	; 0xcd6 <USART_DecodeMessageRxFIFO+0x86>
		msg[i] = *character;
	}
	
	
	// TODO: send to relevant party... the display for now
	TWI_send_string_fixed_length(S_ADRESS, msg, length);
     d08:	a6 01       	movw	r20, r12
     d0a:	68 2d       	mov	r22, r8
     d0c:	79 2d       	mov	r23, r9
     d0e:	80 e4       	ldi	r24, 0x40	; 64
     d10:	07 dc       	rcall	.-2034   	; 0x520 <TWI_send_string_fixed_length>
	
	return 0;
     d12:	80 e0       	ldi	r24, 0x00	; 0
}
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	be be       	out	0x3e, r11	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	ad be       	out	0x3d, r10	; 61
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	08 95       	ret

00000d38 <USART_DecodeCommandRxFIFO>:

uint8_t USART_DecodeCommandRxFIFO()
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
	uint8_t *len = 0;
	uint8_t *data = 0;
	
	if(FifoRead(gRxFIFO, len))
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	80 91 08 11 	lds	r24, 0x1108
     d44:	90 91 09 11 	lds	r25, 0x1109
     d48:	29 da       	rcall	.-2990   	; 0x19c <FifoRead>
     d4a:	88 23       	and	r24, r24
     d4c:	31 f0       	breq	.+12     	; 0xd5a <USART_DecodeCommandRxFIFO+0x22>
	{
		TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: LEN MISSING");
     d4e:	65 e5       	ldi	r22, 0x55	; 85
     d50:	71 e2       	ldi	r23, 0x21	; 33
     d52:	80 e4       	ldi	r24, 0x40	; 64
     d54:	9f db       	rcall	.-2242   	; 0x494 <TWI_send_string>
		return 1; // error
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	42 c0       	rjmp	.+132    	; 0xdde <USART_DecodeCommandRxFIFO+0xa6>
	}
	
	int length = *len;
	uint8_t direction, rotation, speed;
	
	if(length == 3)
     d5a:	80 91 00 00 	lds	r24, 0x0000
     d5e:	83 30       	cpi	r24, 0x03	; 3
     d60:	09 f0       	breq	.+2      	; 0xd64 <USART_DecodeCommandRxFIFO+0x2c>
     d62:	38 c0       	rjmp	.+112    	; 0xdd4 <USART_DecodeCommandRxFIFO+0x9c>
	{
		
			if(FifoRead(gRxFIFO, data))
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	80 91 08 11 	lds	r24, 0x1108
     d6c:	90 91 09 11 	lds	r25, 0x1109
     d70:	15 da       	rcall	.-3030   	; 0x19c <FifoRead>
     d72:	88 23       	and	r24, r24
     d74:	31 f0       	breq	.+12     	; 0xd82 <USART_DecodeCommandRxFIFO+0x4a>
			{
				TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: DIRECTION MISSING");
     d76:	67 e7       	ldi	r22, 0x77	; 119
     d78:	71 e2       	ldi	r23, 0x21	; 33
     d7a:	80 e4       	ldi	r24, 0x40	; 64
     d7c:	8b db       	rcall	.-2282   	; 0x494 <TWI_send_string>
				return 1; // error
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	2e c0       	rjmp	.+92     	; 0xdde <USART_DecodeCommandRxFIFO+0xa6>
			}
			direction = *data;
     d82:	c0 91 00 00 	lds	r28, 0x0000
			
			if(FifoRead(gRxFIFO, data))
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	80 91 08 11 	lds	r24, 0x1108
     d8e:	90 91 09 11 	lds	r25, 0x1109
     d92:	04 da       	rcall	.-3064   	; 0x19c <FifoRead>
     d94:	88 23       	and	r24, r24
     d96:	31 f0       	breq	.+12     	; 0xda4 <USART_DecodeCommandRxFIFO+0x6c>
			{
				TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: ROTATION MISSING");
     d98:	6f e9       	ldi	r22, 0x9F	; 159
     d9a:	71 e2       	ldi	r23, 0x21	; 33
     d9c:	80 e4       	ldi	r24, 0x40	; 64
     d9e:	7a db       	rcall	.-2316   	; 0x494 <TWI_send_string>
				return 1; // error
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	1d c0       	rjmp	.+58     	; 0xdde <USART_DecodeCommandRxFIFO+0xa6>
			}
			
			rotation = *data;
     da4:	d0 91 00 00 	lds	r29, 0x0000
			
			if(FifoRead(gRxFIFO, data))
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	80 91 08 11 	lds	r24, 0x1108
     db0:	90 91 09 11 	lds	r25, 0x1109
     db4:	f3 d9       	rcall	.-3098   	; 0x19c <FifoRead>
     db6:	88 23       	and	r24, r24
     db8:	31 f0       	breq	.+12     	; 0xdc6 <USART_DecodeCommandRxFIFO+0x8e>
			{
				TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: SPEED MISSING");
     dba:	66 ec       	ldi	r22, 0xC6	; 198
     dbc:	71 e2       	ldi	r23, 0x21	; 33
     dbe:	80 e4       	ldi	r24, 0x40	; 64
     dc0:	69 db       	rcall	.-2350   	; 0x494 <TWI_send_string>
				return 1; // error
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	0c c0       	rjmp	.+24     	; 0xdde <USART_DecodeCommandRxFIFO+0xa6>
			}
			
			speed = *data;
		
		TWI_send_command(direction, rotation, speed);
     dc6:	40 91 00 00 	lds	r20, 0x0000
     dca:	6d 2f       	mov	r22, r29
     dcc:	8c 2f       	mov	r24, r28
     dce:	1a db       	rcall	.-2508   	; 0x404 <TWI_send_command>
	{
		TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: INCORRECT LENGTH");
		return 1;
	}

	return 0;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <USART_DecodeCommandRxFIFO+0xa6>
		
		TWI_send_command(direction, rotation, speed);

	}else
	{
		TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: INCORRECT LENGTH");
     dd4:	6a ee       	ldi	r22, 0xEA	; 234
     dd6:	71 e2       	ldi	r23, 0x21	; 33
     dd8:	80 e4       	ldi	r24, 0x40	; 64
     dda:	5c db       	rcall	.-2376   	; 0x494 <TWI_send_string>
		return 1;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
	
}
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <USART_DecodeRxFIFO>:

void USART_DecodeRxFIFO()
{
	uint8_t *tag = 0;
	
	while(!(FifoRead(gRxFIFO, tag))) // if the buffer is NOT empty
     de4:	0d c0       	rjmp	.+26     	; 0xe00 <USART_DecodeRxFIFO+0x1c>
	{
		switch(*tag){
     de6:	80 91 00 00 	lds	r24, 0x0000
     dea:	83 34       	cpi	r24, 0x43	; 67
     dec:	31 f0       	breq	.+12     	; 0xdfa <USART_DecodeRxFIFO+0x16>
     dee:	8d 34       	cpi	r24, 0x4D	; 77
     df0:	39 f4       	brne	.+14     	; 0xe00 <USART_DecodeRxFIFO+0x1c>
			case('M'): // if 'tag' is 'M'
			{
				if(USART_DecodeMessageRxFIFO()) // if decoding failed
     df2:	2e df       	rcall	.-420    	; 0xc50 <USART_DecodeMessageRxFIFO>
     df4:	88 23       	and	r24, r24
     df6:	21 f0       	breq	.+8      	; 0xe00 <USART_DecodeRxFIFO+0x1c>
     df8:	08 95       	ret
				
				break;
			}
			case('C'): // 
			{
				if(USART_DecodeCommandRxFIFO())
     dfa:	9e df       	rcall	.-196    	; 0xd38 <USART_DecodeCommandRxFIFO>
     dfc:	81 11       	cpse	r24, r1
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <USART_DecodeRxFIFO+0x2e>

void USART_DecodeRxFIFO()
{
	uint8_t *tag = 0;
	
	while(!(FifoRead(gRxFIFO, tag))) // if the buffer is NOT empty
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	80 91 08 11 	lds	r24, 0x1108
     e08:	90 91 09 11 	lds	r25, 0x1109
     e0c:	c7 d9       	rcall	.-3186   	; 0x19c <FifoRead>
     e0e:	88 23       	and	r24, r24
     e10:	51 f3       	breq	.-44     	; 0xde6 <USART_DecodeRxFIFO+0x2>
     e12:	08 95       	ret

00000e14 <USART_Bounce>:



void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
     e14:	60 91 55 23 	lds	r22, 0x2355
     e18:	26 2f       	mov	r18, r22
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	12 16       	cp	r1, r18
     e1e:	13 06       	cpc	r1, r19
     e20:	64 f4       	brge	.+24     	; 0xe3a <USART_Bounce+0x26>
     e22:	a6 e5       	ldi	r26, 0x56	; 86
     e24:	b3 e2       	ldi	r27, 0x23	; 35
     e26:	e9 e5       	ldi	r30, 0x59	; 89
     e28:	f5 e2       	ldi	r31, 0x25	; 37
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
	{
		gTxPayload[i] = gRxBuffer[i+2];
     e2e:	4d 91       	ld	r20, X+
     e30:	41 93       	st	Z+, r20



void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	d4 f3       	brlt	.-12     	; 0xe2e <USART_Bounce+0x1a>
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
     e3a:	80 91 54 23 	lds	r24, 0x2354
     e3e:	5a ce       	rjmp	.-844    	; 0xaf4 <USART_SendPacket>

00000e40 <__vector_20>:
}


ISR (USART0_RX_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	0b b6       	in	r0, 0x3b	; 59
     e4c:	0f 92       	push	r0
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
     e72:	20 91 c6 00 	lds	r18, 0x00C6
	
	
	
	if(data == 0x7e)
     e76:	2e 37       	cpi	r18, 0x7E	; 126
     e78:	09 f0       	breq	.+2      	; 0xe7c <__vector_20+0x3c>
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
     e7c:	80 91 26 22 	lds	r24, 0x2226
     e80:	90 91 27 22 	lds	r25, 0x2227
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	91 05       	cpc	r25, r1
     e88:	40 f4       	brcc	.+16     	; 0xe9a <__vector_20+0x5a>
     e8a:	20 91 55 23 	lds	r18, 0x2355
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	2c 5f       	subi	r18, 0xFC	; 252
     e92:	3f 4f       	sbci	r19, 0xFF	; 255
     e94:	82 17       	cp	r24, r18
     e96:	93 07       	cpc	r25, r19
     e98:	59 f5       	brne	.+86     	; 0xef0 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
     e9a:	80 91 24 22 	lds	r24, 0x2224
     e9e:	90 91 25 22 	lds	r25, 0x2225
     ea2:	89 2b       	or	r24, r25
     ea4:	21 f0       	breq	.+8      	; 0xeae <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
     ea6:	10 92 25 22 	sts	0x2225, r1
     eaa:	10 92 24 22 	sts	0x2224, r1
			}
			
			USART_Bounce();
     eae:	b2 df       	rcall	.-156    	; 0xe14 <USART_Bounce>
     eb0:	04 e5       	ldi	r16, 0x54	; 84
     eb2:	13 e2       	ldi	r17, 0x23	; 35
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
     eb4:	c0 e0       	ldi	r28, 0x00	; 0
     eb6:	d0 e0       	ldi	r29, 0x00	; 0
     eb8:	0f 2e       	mov	r0, r31
     eba:	f5 e5       	ldi	r31, 0x55	; 85
     ebc:	ef 2e       	mov	r14, r31
     ebe:	f3 e2       	ldi	r31, 0x23	; 35
     ec0:	ff 2e       	mov	r15, r31
     ec2:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
     ec4:	f8 01       	movw	r30, r16
     ec6:	61 91       	ld	r22, Z+
     ec8:	8f 01       	movw	r16, r30
     eca:	80 91 08 11 	lds	r24, 0x1108
     ece:	90 91 09 11 	lds	r25, 0x1109
     ed2:	44 d9       	rcall	.-3448   	; 0x15c <FifoWrite>
     ed4:	88 23       	and	r24, r24
     ed6:	21 f0       	breq	.+8      	; 0xee0 <__vector_20+0xa0>
				{
					TWI_send_string(S_ADRESS,"U_FIFO-full");
     ed8:	61 e1       	ldi	r22, 0x11	; 17
     eda:	72 e2       	ldi	r23, 0x22	; 34
     edc:	80 e4       	ldi	r24, 0x40	; 64
     ede:	da da       	rcall	.-2636   	; 0x494 <TWI_send_string>
			}
			
			USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
     ee0:	21 96       	adiw	r28, 0x01	; 1
     ee2:	f7 01       	movw	r30, r14
     ee4:	80 81       	ld	r24, Z
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 96       	adiw	r24, 0x02	; 2
     eea:	c8 17       	cp	r28, r24
     eec:	d9 07       	cpc	r29, r25
     eee:	54 f3       	brlt	.-44     	; 0xec4 <__vector_20+0x84>
					TWI_send_string(S_ADRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
     ef0:	10 92 27 22 	sts	0x2227, r1
     ef4:	10 92 26 22 	sts	0x2226, r1
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
     efa:	2d 37       	cpi	r18, 0x7D	; 125
     efc:	39 f4       	brne	.+14     	; 0xf0c <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 25 22 	sts	0x2225, r25
     f06:	80 93 24 22 	sts	0x2224, r24
     f0a:	0d c0       	rjmp	.+26     	; 0xf26 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
     f0c:	80 91 26 22 	lds	r24, 0x2226
     f10:	90 91 27 22 	lds	r25, 0x2227
     f14:	fc 01       	movw	r30, r24
     f16:	ec 5a       	subi	r30, 0xAC	; 172
     f18:	fc 4d       	sbci	r31, 0xDC	; 220
     f1a:	20 83       	st	Z, r18
		++gRxBufferIndex;
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	90 93 27 22 	sts	0x2227, r25
     f22:	80 93 26 22 	sts	0x2226, r24
	}
	
	
}
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	bf 91       	pop	r27
     f30:	af 91       	pop	r26
     f32:	9f 91       	pop	r25
     f34:	8f 91       	pop	r24
     f36:	7f 91       	pop	r23
     f38:	6f 91       	pop	r22
     f3a:	5f 91       	pop	r21
     f3c:	4f 91       	pop	r20
     f3e:	3f 91       	pop	r19
     f40:	2f 91       	pop	r18
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	0f 90       	pop	r0
     f4c:	0b be       	out	0x3b, r0	; 59
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <__fixunssfsi>:
     f58:	70 d0       	rcall	.+224    	; 0x103a <__fp_splitA>
     f5a:	88 f0       	brcs	.+34     	; 0xf7e <__fixunssfsi+0x26>
     f5c:	9f 57       	subi	r25, 0x7F	; 127
     f5e:	90 f0       	brcs	.+36     	; 0xf84 <__fixunssfsi+0x2c>
     f60:	b9 2f       	mov	r27, r25
     f62:	99 27       	eor	r25, r25
     f64:	b7 51       	subi	r27, 0x17	; 23
     f66:	a0 f0       	brcs	.+40     	; 0xf90 <__fixunssfsi+0x38>
     f68:	d1 f0       	breq	.+52     	; 0xf9e <__fixunssfsi+0x46>
     f6a:	66 0f       	add	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	88 1f       	adc	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	1a f0       	brmi	.+6      	; 0xf7a <__fixunssfsi+0x22>
     f74:	ba 95       	dec	r27
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__fixunssfsi+0x12>
     f78:	12 c0       	rjmp	.+36     	; 0xf9e <__fixunssfsi+0x46>
     f7a:	b1 30       	cpi	r27, 0x01	; 1
     f7c:	81 f0       	breq	.+32     	; 0xf9e <__fixunssfsi+0x46>
     f7e:	77 d0       	rcall	.+238    	; 0x106e <__fp_zero>
     f80:	b1 e0       	ldi	r27, 0x01	; 1
     f82:	08 95       	ret
     f84:	74 c0       	rjmp	.+232    	; 0x106e <__fp_zero>
     f86:	67 2f       	mov	r22, r23
     f88:	78 2f       	mov	r23, r24
     f8a:	88 27       	eor	r24, r24
     f8c:	b8 5f       	subi	r27, 0xF8	; 248
     f8e:	39 f0       	breq	.+14     	; 0xf9e <__fixunssfsi+0x46>
     f90:	b9 3f       	cpi	r27, 0xF9	; 249
     f92:	cc f3       	brlt	.-14     	; 0xf86 <__fixunssfsi+0x2e>
     f94:	86 95       	lsr	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b3 95       	inc	r27
     f9c:	d9 f7       	brne	.-10     	; 0xf94 <__fixunssfsi+0x3c>
     f9e:	3e f4       	brtc	.+14     	; 0xfae <__fixunssfsi+0x56>
     fa0:	90 95       	com	r25
     fa2:	80 95       	com	r24
     fa4:	70 95       	com	r23
     fa6:	61 95       	neg	r22
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	08 95       	ret

00000fb0 <__floatunsisf>:
     fb0:	e8 94       	clt
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <__floatsisf+0x12>

00000fb4 <__floatsisf>:
     fb4:	97 fb       	bst	r25, 7
     fb6:	3e f4       	brtc	.+14     	; 0xfc6 <__floatsisf+0x12>
     fb8:	90 95       	com	r25
     fba:	80 95       	com	r24
     fbc:	70 95       	com	r23
     fbe:	61 95       	neg	r22
     fc0:	7f 4f       	sbci	r23, 0xFF	; 255
     fc2:	8f 4f       	sbci	r24, 0xFF	; 255
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	99 23       	and	r25, r25
     fc8:	a9 f0       	breq	.+42     	; 0xff4 <__floatsisf+0x40>
     fca:	f9 2f       	mov	r31, r25
     fcc:	96 e9       	ldi	r25, 0x96	; 150
     fce:	bb 27       	eor	r27, r27
     fd0:	93 95       	inc	r25
     fd2:	f6 95       	lsr	r31
     fd4:	87 95       	ror	r24
     fd6:	77 95       	ror	r23
     fd8:	67 95       	ror	r22
     fda:	b7 95       	ror	r27
     fdc:	f1 11       	cpse	r31, r1
     fde:	f8 cf       	rjmp	.-16     	; 0xfd0 <__floatsisf+0x1c>
     fe0:	fa f4       	brpl	.+62     	; 0x1020 <__floatsisf+0x6c>
     fe2:	bb 0f       	add	r27, r27
     fe4:	11 f4       	brne	.+4      	; 0xfea <__floatsisf+0x36>
     fe6:	60 ff       	sbrs	r22, 0
     fe8:	1b c0       	rjmp	.+54     	; 0x1020 <__floatsisf+0x6c>
     fea:	6f 5f       	subi	r22, 0xFF	; 255
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	8f 4f       	sbci	r24, 0xFF	; 255
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <__floatsisf+0x6c>
     ff4:	88 23       	and	r24, r24
     ff6:	11 f0       	breq	.+4      	; 0xffc <__floatsisf+0x48>
     ff8:	96 e9       	ldi	r25, 0x96	; 150
     ffa:	11 c0       	rjmp	.+34     	; 0x101e <__floatsisf+0x6a>
     ffc:	77 23       	and	r23, r23
     ffe:	21 f0       	breq	.+8      	; 0x1008 <__floatsisf+0x54>
    1000:	9e e8       	ldi	r25, 0x8E	; 142
    1002:	87 2f       	mov	r24, r23
    1004:	76 2f       	mov	r23, r22
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <__floatsisf+0x5e>
    1008:	66 23       	and	r22, r22
    100a:	71 f0       	breq	.+28     	; 0x1028 <__floatsisf+0x74>
    100c:	96 e8       	ldi	r25, 0x86	; 134
    100e:	86 2f       	mov	r24, r22
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	2a f0       	brmi	.+10     	; 0x1020 <__floatsisf+0x6c>
    1016:	9a 95       	dec	r25
    1018:	66 0f       	add	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	88 1f       	adc	r24, r24
    101e:	da f7       	brpl	.-10     	; 0x1016 <__floatsisf+0x62>
    1020:	88 0f       	add	r24, r24
    1022:	96 95       	lsr	r25
    1024:	87 95       	ror	r24
    1026:	97 f9       	bld	r25, 7
    1028:	08 95       	ret

0000102a <__fp_split3>:
    102a:	57 fd       	sbrc	r21, 7
    102c:	90 58       	subi	r25, 0x80	; 128
    102e:	44 0f       	add	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	59 f0       	breq	.+22     	; 0x104a <__fp_splitA+0x10>
    1034:	5f 3f       	cpi	r21, 0xFF	; 255
    1036:	71 f0       	breq	.+28     	; 0x1054 <__fp_splitA+0x1a>
    1038:	47 95       	ror	r20

0000103a <__fp_splitA>:
    103a:	88 0f       	add	r24, r24
    103c:	97 fb       	bst	r25, 7
    103e:	99 1f       	adc	r25, r25
    1040:	61 f0       	breq	.+24     	; 0x105a <__fp_splitA+0x20>
    1042:	9f 3f       	cpi	r25, 0xFF	; 255
    1044:	79 f0       	breq	.+30     	; 0x1064 <__fp_splitA+0x2a>
    1046:	87 95       	ror	r24
    1048:	08 95       	ret
    104a:	12 16       	cp	r1, r18
    104c:	13 06       	cpc	r1, r19
    104e:	14 06       	cpc	r1, r20
    1050:	55 1f       	adc	r21, r21
    1052:	f2 cf       	rjmp	.-28     	; 0x1038 <__fp_split3+0xe>
    1054:	46 95       	lsr	r20
    1056:	f1 df       	rcall	.-30     	; 0x103a <__fp_splitA>
    1058:	08 c0       	rjmp	.+16     	; 0x106a <__fp_splitA+0x30>
    105a:	16 16       	cp	r1, r22
    105c:	17 06       	cpc	r1, r23
    105e:	18 06       	cpc	r1, r24
    1060:	99 1f       	adc	r25, r25
    1062:	f1 cf       	rjmp	.-30     	; 0x1046 <__fp_splitA+0xc>
    1064:	86 95       	lsr	r24
    1066:	71 05       	cpc	r23, r1
    1068:	61 05       	cpc	r22, r1
    106a:	08 94       	sec
    106c:	08 95       	ret

0000106e <__fp_zero>:
    106e:	e8 94       	clt

00001070 <__fp_szero>:
    1070:	bb 27       	eor	r27, r27
    1072:	66 27       	eor	r22, r22
    1074:	77 27       	eor	r23, r23
    1076:	cb 01       	movw	r24, r22
    1078:	97 f9       	bld	r25, 7
    107a:	08 95       	ret

0000107c <__mulsf3>:
    107c:	0b d0       	rcall	.+22     	; 0x1094 <__mulsf3x>
    107e:	78 c0       	rjmp	.+240    	; 0x1170 <__fp_round>
    1080:	69 d0       	rcall	.+210    	; 0x1154 <__fp_pscA>
    1082:	28 f0       	brcs	.+10     	; 0x108e <__mulsf3+0x12>
    1084:	6e d0       	rcall	.+220    	; 0x1162 <__fp_pscB>
    1086:	18 f0       	brcs	.+6      	; 0x108e <__mulsf3+0x12>
    1088:	95 23       	and	r25, r21
    108a:	09 f0       	breq	.+2      	; 0x108e <__mulsf3+0x12>
    108c:	5a c0       	rjmp	.+180    	; 0x1142 <__fp_inf>
    108e:	5f c0       	rjmp	.+190    	; 0x114e <__fp_nan>
    1090:	11 24       	eor	r1, r1
    1092:	ee cf       	rjmp	.-36     	; 0x1070 <__fp_szero>

00001094 <__mulsf3x>:
    1094:	ca df       	rcall	.-108    	; 0x102a <__fp_split3>
    1096:	a0 f3       	brcs	.-24     	; 0x1080 <__mulsf3+0x4>

00001098 <__mulsf3_pse>:
    1098:	95 9f       	mul	r25, r21
    109a:	d1 f3       	breq	.-12     	; 0x1090 <__mulsf3+0x14>
    109c:	95 0f       	add	r25, r21
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	55 1f       	adc	r21, r21
    10a2:	62 9f       	mul	r22, r18
    10a4:	f0 01       	movw	r30, r0
    10a6:	72 9f       	mul	r23, r18
    10a8:	bb 27       	eor	r27, r27
    10aa:	f0 0d       	add	r31, r0
    10ac:	b1 1d       	adc	r27, r1
    10ae:	63 9f       	mul	r22, r19
    10b0:	aa 27       	eor	r26, r26
    10b2:	f0 0d       	add	r31, r0
    10b4:	b1 1d       	adc	r27, r1
    10b6:	aa 1f       	adc	r26, r26
    10b8:	64 9f       	mul	r22, r20
    10ba:	66 27       	eor	r22, r22
    10bc:	b0 0d       	add	r27, r0
    10be:	a1 1d       	adc	r26, r1
    10c0:	66 1f       	adc	r22, r22
    10c2:	82 9f       	mul	r24, r18
    10c4:	22 27       	eor	r18, r18
    10c6:	b0 0d       	add	r27, r0
    10c8:	a1 1d       	adc	r26, r1
    10ca:	62 1f       	adc	r22, r18
    10cc:	73 9f       	mul	r23, r19
    10ce:	b0 0d       	add	r27, r0
    10d0:	a1 1d       	adc	r26, r1
    10d2:	62 1f       	adc	r22, r18
    10d4:	83 9f       	mul	r24, r19
    10d6:	a0 0d       	add	r26, r0
    10d8:	61 1d       	adc	r22, r1
    10da:	22 1f       	adc	r18, r18
    10dc:	74 9f       	mul	r23, r20
    10de:	33 27       	eor	r19, r19
    10e0:	a0 0d       	add	r26, r0
    10e2:	61 1d       	adc	r22, r1
    10e4:	23 1f       	adc	r18, r19
    10e6:	84 9f       	mul	r24, r20
    10e8:	60 0d       	add	r22, r0
    10ea:	21 1d       	adc	r18, r1
    10ec:	82 2f       	mov	r24, r18
    10ee:	76 2f       	mov	r23, r22
    10f0:	6a 2f       	mov	r22, r26
    10f2:	11 24       	eor	r1, r1
    10f4:	9f 57       	subi	r25, 0x7F	; 127
    10f6:	50 40       	sbci	r21, 0x00	; 0
    10f8:	8a f0       	brmi	.+34     	; 0x111c <__mulsf3_pse+0x84>
    10fa:	e1 f0       	breq	.+56     	; 0x1134 <__mulsf3_pse+0x9c>
    10fc:	88 23       	and	r24, r24
    10fe:	4a f0       	brmi	.+18     	; 0x1112 <__mulsf3_pse+0x7a>
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	bb 1f       	adc	r27, r27
    1106:	66 1f       	adc	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	91 50       	subi	r25, 0x01	; 1
    110e:	50 40       	sbci	r21, 0x00	; 0
    1110:	a9 f7       	brne	.-22     	; 0x10fc <__mulsf3_pse+0x64>
    1112:	9e 3f       	cpi	r25, 0xFE	; 254
    1114:	51 05       	cpc	r21, r1
    1116:	70 f0       	brcs	.+28     	; 0x1134 <__mulsf3_pse+0x9c>
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <__fp_inf>
    111a:	aa cf       	rjmp	.-172    	; 0x1070 <__fp_szero>
    111c:	5f 3f       	cpi	r21, 0xFF	; 255
    111e:	ec f3       	brlt	.-6      	; 0x111a <__mulsf3_pse+0x82>
    1120:	98 3e       	cpi	r25, 0xE8	; 232
    1122:	dc f3       	brlt	.-10     	; 0x111a <__mulsf3_pse+0x82>
    1124:	86 95       	lsr	r24
    1126:	77 95       	ror	r23
    1128:	67 95       	ror	r22
    112a:	b7 95       	ror	r27
    112c:	f7 95       	ror	r31
    112e:	e7 95       	ror	r30
    1130:	9f 5f       	subi	r25, 0xFF	; 255
    1132:	c1 f7       	brne	.-16     	; 0x1124 <__mulsf3_pse+0x8c>
    1134:	fe 2b       	or	r31, r30
    1136:	88 0f       	add	r24, r24
    1138:	91 1d       	adc	r25, r1
    113a:	96 95       	lsr	r25
    113c:	87 95       	ror	r24
    113e:	97 f9       	bld	r25, 7
    1140:	08 95       	ret

00001142 <__fp_inf>:
    1142:	97 f9       	bld	r25, 7
    1144:	9f 67       	ori	r25, 0x7F	; 127
    1146:	80 e8       	ldi	r24, 0x80	; 128
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	08 95       	ret

0000114e <__fp_nan>:
    114e:	9f ef       	ldi	r25, 0xFF	; 255
    1150:	80 ec       	ldi	r24, 0xC0	; 192
    1152:	08 95       	ret

00001154 <__fp_pscA>:
    1154:	00 24       	eor	r0, r0
    1156:	0a 94       	dec	r0
    1158:	16 16       	cp	r1, r22
    115a:	17 06       	cpc	r1, r23
    115c:	18 06       	cpc	r1, r24
    115e:	09 06       	cpc	r0, r25
    1160:	08 95       	ret

00001162 <__fp_pscB>:
    1162:	00 24       	eor	r0, r0
    1164:	0a 94       	dec	r0
    1166:	12 16       	cp	r1, r18
    1168:	13 06       	cpc	r1, r19
    116a:	14 06       	cpc	r1, r20
    116c:	05 06       	cpc	r0, r21
    116e:	08 95       	ret

00001170 <__fp_round>:
    1170:	09 2e       	mov	r0, r25
    1172:	03 94       	inc	r0
    1174:	00 0c       	add	r0, r0
    1176:	11 f4       	brne	.+4      	; 0x117c <__fp_round+0xc>
    1178:	88 23       	and	r24, r24
    117a:	52 f0       	brmi	.+20     	; 0x1190 <__fp_round+0x20>
    117c:	bb 0f       	add	r27, r27
    117e:	40 f4       	brcc	.+16     	; 0x1190 <__fp_round+0x20>
    1180:	bf 2b       	or	r27, r31
    1182:	11 f4       	brne	.+4      	; 0x1188 <__fp_round+0x18>
    1184:	60 ff       	sbrs	r22, 0
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <__fp_round+0x20>
    1188:	6f 5f       	subi	r22, 0xFF	; 255
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	8f 4f       	sbci	r24, 0xFF	; 255
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	08 95       	ret

00001192 <_exit>:
    1192:	f8 94       	cli

00001194 <__stop_program>:
    1194:	ff cf       	rjmp	.-2      	; 0x1194 <__stop_program>
