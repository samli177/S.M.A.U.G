package src;

import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import javax.swing.text.DefaultCaret;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortTimeoutException;
import net.java.games.input.Component;
import net.java.games.input.Controller;
import net.java.games.input.ControllerEnvironment;
import net.java.games.input.Event;
import net.java.games.input.EventQueue;

/**
 *
 * @author Martin
 */
public class MainWindow extends javax.swing.JFrame implements Runnable, SerialPortEventListener {

    public static enum SENSOR {

        LEFT_FRONT,
        RIGHT_FRONT,
        LEFT_BACK,
        RIGHT_BACK,
        FRONT,
        BACK,
        VERTICAL,
        ULTRA_SOUND
    }

    final int CONTROLL_DELAY = 100; // milli-seconds

    SerialPort comPort;
    LinkedList<byte[]> messageBuffer;
    final Object lock;

    Controller controller;
    EventQueue eventQueue;
    boolean controllerSticksLocked;
    Timer controllerTimer;
    float dPadValue = 0;
    float arrowsAngle = -1;
    int rotationValue = 0;

    Vector<Byte> debugData;

    boolean keyUpPressed, keyDownPressed, keyLeftPressed, keyRightPressed, keyZeroPressed, keyControlPressed;
    boolean keyRaisePressed, keyLowerPressed;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        DefaultCaret caret = (DefaultCaret) messageTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        DefaultCaret caret2 = (DefaultCaret) debugTextArea.getCaret();
        caret2.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        messageBuffer = new LinkedList<>();
        lock = new Object();

        debugData = new Vector();

        controllerTimer = new Timer();

        Thread t = new Thread(this);
        t.start();

        controllerTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                robotSteeringUpdate();
            }
        }, CONTROLL_DELAY, CONTROLL_DELAY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        autoButtonGroup = new javax.swing.ButtonGroup();
        inOutButtonGroup = new javax.swing.ButtonGroup();
        dataParseButtonGroup = new javax.swing.ButtonGroup();
        upperDrawArea = new UpperPanel();
        lowerDrawArea = new LowerPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        irLeftFrontTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        irRightFrontTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        irVerticalTextField = new javax.swing.JTextField();
        irVerticalAngleTextField = new javax.swing.JTextField();
        irLeftBackTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        irRightBackTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        irBackTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ultraSoundTextField = new javax.swing.JTextField();
        irFrontTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        autoButton = new javax.swing.JToggleButton();
        autoLeftRadioButton = new javax.swing.JRadioButton();
        autoRightRadioButton = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        comNameTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        sendMessageButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        messageTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        parameter2TextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        parameter1TextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        parameter3TextField = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        searchControllersButton = new javax.swing.JButton();
        controllersComboBox = new javax.swing.JComboBox();
        connectControllerButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        chosenControllerLabel = new javax.swing.JLabel();
        changeParametersButton = new javax.swing.JButton();
        sendAutoSettingsButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        debugTextArea = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        clearDebugButton = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        debugCallsTextField = new javax.swing.JTextField();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        sendDebugDataButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        debugDataList = new javax.swing.JList();
        jLabel21 = new javax.swing.JLabel();
        debugTagTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        debugDataTextField = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        addDebugDataButton = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        deleteAllDebugDataButton = new javax.swing.JButton();
        deleteDebugDataButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arkenstone");
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("mainFrame"); // NOI18N

        upperDrawArea.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout upperDrawAreaLayout = new javax.swing.GroupLayout(upperDrawArea);
        upperDrawArea.setLayout(upperDrawAreaLayout);
        upperDrawAreaLayout.setHorizontalGroup(
            upperDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 652, Short.MAX_VALUE)
        );
        upperDrawAreaLayout.setVerticalGroup(
            upperDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 263, Short.MAX_VALUE)
        );

        lowerDrawArea.setBackground(new java.awt.Color(255, 255, 255));
        lowerDrawArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lowerDrawAreaMouseClicked(evt);
            }
        });
        lowerDrawArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lowerDrawAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lowerDrawAreaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout lowerDrawAreaLayout = new javax.swing.GroupLayout(lowerDrawArea);
        lowerDrawArea.setLayout(lowerDrawAreaLayout);
        lowerDrawAreaLayout.setHorizontalGroup(
            lowerDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 652, Short.MAX_VALUE)
        );
        lowerDrawAreaLayout.setVerticalGroup(
            lowerDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        messageTextArea.setEditable(false);
        messageTextArea.setColumns(20);
        messageTextArea.setRows(5);
        messageTextArea.setText("Arkenstone startat.");
        jScrollPane1.setViewportView(messageTextArea);

        irLeftFrontTextField.setEditable(false);
        irLeftFrontTextField.setText("0");
        irLeftFrontTextField.setFocusable(false);

        jLabel1.setText("IR vänster fram");

        jLabel2.setText("IR höger fram");

        irRightFrontTextField.setEditable(false);
        irRightFrontTextField.setText("0");
        irRightFrontTextField.setFocusable(false);

        jLabel3.setText("IR vertikal fram");

        jLabel6.setText("IR vertikal vinkel");

        irVerticalTextField.setEditable(false);
        irVerticalTextField.setText("0");
        irVerticalTextField.setFocusable(false);

        irVerticalAngleTextField.setEditable(false);
        irVerticalAngleTextField.setText("0");
        irVerticalAngleTextField.setFocusable(false);

        irLeftBackTextField.setEditable(false);
        irLeftBackTextField.setText("0");
        irLeftBackTextField.setFocusable(false);

        jLabel7.setText("IR vänster bak");

        irRightBackTextField.setEditable(false);
        irRightBackTextField.setText("0");
        irRightBackTextField.setFocusable(false);

        jLabel8.setText("IR höger bak");

        irBackTextField.setEditable(false);
        irBackTextField.setText("0");
        irBackTextField.setFocusable(false);

        jLabel9.setText("IR bak");

        jLabel10.setText("Ultraljud");

        ultraSoundTextField.setEditable(false);
        ultraSoundTextField.setText("0");
        ultraSoundTextField.setFocusable(false);

        irFrontTextField.setEditable(false);
        irFrontTextField.setText("0");
        irFrontTextField.setFocusable(false);

        jLabel4.setText("IR fram");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(irLeftFrontTextField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(irRightFrontTextField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(irFrontTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irLeftBackTextField)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irRightBackTextField)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irBackTextField)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(irVerticalTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irVerticalAngleTextField)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ultraSoundTextField)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(318, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(irRightFrontTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(irLeftFrontTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(irFrontTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irLeftBackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irRightBackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irBackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irVerticalAngleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irVerticalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ultraSoundTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(117, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sensorvärden", jPanel4);

        autoButton.setText("Autonomt läge (av)");
        autoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoButtonActionPerformed(evt);
            }
        });

        autoButtonGroup.add(autoLeftRadioButton);
        autoLeftRadioButton.setSelected(true);
        autoLeftRadioButton.setText("Vänsteralgoritm");

        autoButtonGroup.add(autoRightRadioButton);
        autoRightRadioButton.setText("Högeralgoritm");

        jLabel11.setText("COM port namn:");

        comNameTextField.setText("COM1");

        connectButton.setText("Koppla upp");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Parametrar");

        sendMessageButton.setText("Skicka meddelande");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("Meddelandefält");

        messageTextField.setText("Test message");

        jLabel14.setText("Parameter Ki");

        parameter2TextField.setText("5");

        jLabel15.setText("Parameter Kp");

        parameter1TextField.setText("5");

        jLabel16.setText("Parameter Kd");

        parameter3TextField.setText("5");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Koppla upp till handkontroll");

        searchControllersButton.setText("Leta efter kontroller");
        searchControllersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchControllersButtonActionPerformed(evt);
            }
        });

        connectControllerButton.setText("Använd kontroll");
        connectControllerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectControllerButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Vald kontroll:");

        chosenControllerLabel.setText("Ingen");

        changeParametersButton.setText("Skicka parametrar");
        changeParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeParametersButtonActionPerformed(evt);
            }
        });

        sendAutoSettingsButton.setText("Skicka inställningar");
        sendAutoSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendAutoSettingsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator6)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(searchControllersButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(controllersComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(messageTextField)
                            .addComponent(sendMessageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(parameter1TextField))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(parameter2TextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(parameter3TextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(changeParametersButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(connectControllerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chosenControllerLabel))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(autoButton)
                                .addGap(18, 18, 18)
                                .addComponent(autoLeftRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(autoRightRadioButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sendAutoSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoButton)
                    .addComponent(autoLeftRadioButton)
                    .addComponent(autoRightRadioButton)
                    .addComponent(sendAutoSettingsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchControllersButton)
                    .addComponent(controllersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectControllerButton)
                    .addComponent(jLabel17)
                    .addComponent(chosenControllerLabel))
                .addGap(18, 18, 18)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(parameter1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(parameter2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel16)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(parameter3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendMessageButton)
                    .addComponent(changeParametersButton))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Inställningar", jPanel5);

        debugTextArea.setColumns(20);
        debugTextArea.setRows(5);
        jScrollPane2.setViewportView(debugTextArea);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Debugutskrifter");

        clearDebugButton.setText("Ta bort all text");
        clearDebugButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDebugButtonActionPerformed(evt);
            }
        });

        jLabel19.setText("Antal anrop:");

        debugCallsTextField.setEditable(false);
        debugCallsTextField.setText("0");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Manuell I/O för meddelanden");

        sendDebugDataButton.setText("Skicka meddelande");
        sendDebugDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendDebugDataButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(debugDataList);

        jLabel21.setText("Tag:");

        jLabel22.setText("Data:");

        inOutButtonGroup.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Inkommande");
        jRadioButton1.setActionCommand("I");

        inOutButtonGroup.add(jRadioButton2);
        jRadioButton2.setText("Utgående");
        jRadioButton2.setActionCommand("O");

        addDebugDataButton.setText("Lägg till data");
        addDebugDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDebugDataButtonActionPerformed(evt);
            }
        });

        jLabel23.setText("Tolka data som:");

        dataParseButtonGroup.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("Byte");
        jRadioButton3.setActionCommand("B");

        dataParseButtonGroup.add(jRadioButton4);
        jRadioButton4.setText("Int");
        jRadioButton4.setActionCommand("I");

        dataParseButtonGroup.add(jRadioButton5);
        jRadioButton5.setText("Float");
        jRadioButton5.setActionCommand("F");

        dataParseButtonGroup.add(jRadioButton6);
        jRadioButton6.setText("String");
        jRadioButton6.setActionCommand("S");

        deleteAllDebugDataButton.setText("Ta bort all data");
        deleteAllDebugDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllDebugDataButtonActionPerformed(evt);
            }
        });

        deleteDebugDataButton.setText("Ta bort vald data");
        deleteDebugDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDebugDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearDebugButton, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(debugCallsTextField)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jSeparator7)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel18)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sendDebugDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(debugTagTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                    .addComponent(debugDataTextField)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jRadioButton5, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton3, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton4)
                            .addComponent(addDebugDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteDebugDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(deleteAllDebugDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(debugCallsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearDebugButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addComponent(debugTagTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel22)
                                .addComponent(debugDataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addDebugDataButton))
                            .addComponent(jRadioButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton2)
                            .addComponent(jLabel23)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton6)
                            .addComponent(jRadioButton5))
                        .addGap(0, 12, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deleteDebugDataButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sendDebugDataButton)
                            .addComponent(deleteAllDebugDataButton)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Debug", jPanel1);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(upperDrawArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lowerDrawArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(upperDrawArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lowerDrawArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void autoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoButtonActionPerformed
        if (autoButton.isSelected()) {
            autoButton.setText("Autonomt läge (på)");
            writeMessage("Autonomt läge aktiverat");
        } else {
            autoButton.setText("Autonomt läge (av)");
            writeMessage("Autonomt läge avaktiverat");
        }
    }//GEN-LAST:event_autoButtonActionPerformed

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        String mess = messageTextField.getText();
        if (sendMessage(mess)) {
            writeMessage("Wrote: " + mess);
        } else {
            writeMessage("Kunde inte skicka");
        }
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (connectButton.getText() == "Koppla ifrån") {
            try {
                writeMessage("Kopplar ifrån");
                comPort.closePort();
                writeMessage("Ifrånkopplad");
                connectButton.setText("Koppla upp");
            } catch (SerialPortException ex) {
                System.out.println(ex);
            }
        } else {
            writeMessage("Kopplar upp...");
            connect(comNameTextField.getText());
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void searchControllersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchControllersButtonActionPerformed
        Controller[] controllers = ControllerEnvironment.getDefaultEnvironment().getControllers();
        for (Controller c : controllers) {
            if (c.getType() == Controller.Type.GAMEPAD) {
                controllersComboBox.addItem(c);
            }
        }
    }//GEN-LAST:event_searchControllersButtonActionPerformed

    private void connectControllerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectControllerButtonActionPerformed
        Controller c = (Controller) controllersComboBox.getSelectedItem();
        if (c != null) {
            controller = c;
            eventQueue = c.getEventQueue();
            chosenControllerLabel.setText(c.getName());
        }
    }//GEN-LAST:event_connectControllerButtonActionPerformed

    private void lowerDrawAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lowerDrawAreaKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                if (!keyUpPressed) {
                    keyUpPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_DOWN:
                if (!keyDownPressed) {
                    keyDownPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_LEFT:
                if (!keyLeftPressed) {
                    keyLeftPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_RIGHT:
                if (!keyRightPressed) {
                    keyRightPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_NUMPAD0:
                if (!keyZeroPressed) {
                    keyZeroPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_CONTROL:
                if (!keyControlPressed) {
                    keyControlPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_ADD:
                if (!keyRaisePressed) {
                    keyRaisePressed = true;
                    sendElevationCommand(true);
                }
                break;
            case KeyEvent.VK_SUBTRACT:
                if (!keyLowerPressed) {
                    keyLowerPressed = true;
                    sendElevationCommand(false);
                }
                break;
        }
    }//GEN-LAST:event_lowerDrawAreaKeyPressed

    private void lowerDrawAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lowerDrawAreaKeyReleased
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                keyUpPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_DOWN:
                keyDownPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_LEFT:
                keyLeftPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_RIGHT:
                keyRightPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_NUMPAD0:
                keyZeroPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_CONTROL:
                keyControlPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_ADD:
                keyRaisePressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_SUBTRACT:
                keyLowerPressed = false;
                keyUpdate();
                break;
        }
    }//GEN-LAST:event_lowerDrawAreaKeyReleased

    private void lowerDrawAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lowerDrawAreaMouseClicked
        lowerDrawArea.requestFocus();
    }//GEN-LAST:event_lowerDrawAreaMouseClicked

    private void changeParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeParametersButtonActionPerformed
        byte data[] = new byte[3];
        data[0] = Byte.parseByte(parameter1TextField.getText());
        data[1] = Byte.parseByte(parameter2TextField.getText());
        data[2] = Byte.parseByte(parameter3TextField.getText());

        if (sendData('P', data)) {
            writeMessage("Parametrar uppdaterade");
        } else {
            writeMessage("Kunde inte skicka");
        }
    }//GEN-LAST:event_changeParametersButtonActionPerformed

    private void clearDebugButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDebugButtonActionPerformed
        debugTextArea.setText("");
        debugCallsTextField.setText("0");
    }//GEN-LAST:event_clearDebugButtonActionPerformed

    private void addDebugDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDebugDataButtonActionPerformed
        String name = dataParseButtonGroup.getSelection().getActionCommand();
        String data = debugDataTextField.getText();
        if (data == "") {
            writeDebugMessage("Ange data innan du lägger till den.");
            return;
        }

        switch (name) {
            case "B":
                debugData.add(Byte.parseByte(data, 2));
                break;
            case "F":
                Float f = Float.parseFloat(data);
                for (byte b : ByteBuffer.allocate(4).putFloat(f).array()) {
                    debugData.add(b);
                }
                break;
            case "I":
                Integer i = Integer.parseInt(data);
                debugData.add(ByteBuffer.allocate(4).putInt(i).array()[3]);
                break;
            case "S":
                for (byte b : data.getBytes()) {
                    debugData.add(b);
                }
                break;
        }

        debugDataList.setListData(debugData);

        int lastIndex = debugDataList.getModel().getSize() - 1;
        if (lastIndex >= 0) {
            debugDataList.ensureIndexIsVisible(lastIndex);
        }
    }//GEN-LAST:event_addDebugDataButtonActionPerformed

    private void deleteAllDebugDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllDebugDataButtonActionPerformed
        debugData.clear();
        debugDataList.setListData(debugData);
    }//GEN-LAST:event_deleteAllDebugDataButtonActionPerformed

    private void deleteDebugDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDebugDataButtonActionPerformed
        if (debugDataList.getSelectedValue() != null) {
            debugData.remove(debugDataList.getSelectedIndex());
            debugDataList.setListData(debugData);
            int lastIndex = debugDataList.getModel().getSize() - 1;
            if (lastIndex >= 0) {
                debugDataList.ensureIndexIsVisible(lastIndex);
            }
        }
    }//GEN-LAST:event_deleteDebugDataButtonActionPerformed

    private void sendDebugDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendDebugDataButtonActionPerformed
        String name = inOutButtonGroup.getSelection().getActionCommand();
        byte[] data;
        switch (name) {
            case "I":
                data = new byte[debugData.size() + 2];
                data[0] = (byte) debugTagTextField.getText().charAt(0);
                data[1] = (byte) debugData.size();
                for (int i = 0; i < debugData.size(); i++) {
                    data[i + 2] = debugData.elementAt(i);
                }
                messageBuffer.addFirst(data);
                decodeMessage();
                break;
            case "O":
                data = new byte[debugData.size()];
                for (int i = 0; i < debugData.size(); i++) {
                    data[i] = debugData.elementAt(i);
                }
                sendData(debugTagTextField.getText().charAt(0), data);
                break;
        }
    }//GEN-LAST:event_sendDebugDataButtonActionPerformed

    private void sendAutoSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendAutoSettingsButtonActionPerformed
        byte data[] = new byte[1];
        if (autoButton.isSelected()) {
            if (autoLeftRadioButton.isSelected()) {
                data[0] = 1;
            } else {
                data[0] = 2;
            }
        } else {
            data[0] = 0;
        }
        if (sendData('A', data)) {
            writeMessage("Uppdaterade inställningar");
        } else {
            writeMessage("Kunde inte skicka!");
        }
    }//GEN-LAST:event_sendAutoSettingsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDebugDataButton;
    private javax.swing.JToggleButton autoButton;
    private javax.swing.ButtonGroup autoButtonGroup;
    private javax.swing.JRadioButton autoLeftRadioButton;
    private javax.swing.JRadioButton autoRightRadioButton;
    private javax.swing.JButton changeParametersButton;
    private javax.swing.JLabel chosenControllerLabel;
    private javax.swing.JButton clearDebugButton;
    private javax.swing.JTextField comNameTextField;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton connectControllerButton;
    private javax.swing.JComboBox controllersComboBox;
    private javax.swing.ButtonGroup dataParseButtonGroup;
    private javax.swing.JTextField debugCallsTextField;
    private javax.swing.JList debugDataList;
    private javax.swing.JTextField debugDataTextField;
    private javax.swing.JTextField debugTagTextField;
    private javax.swing.JTextArea debugTextArea;
    private javax.swing.JButton deleteAllDebugDataButton;
    private javax.swing.JButton deleteDebugDataButton;
    private javax.swing.ButtonGroup inOutButtonGroup;
    private javax.swing.JTextField irBackTextField;
    private javax.swing.JTextField irFrontTextField;
    private javax.swing.JTextField irLeftBackTextField;
    private javax.swing.JTextField irLeftFrontTextField;
    private javax.swing.JTextField irRightBackTextField;
    private javax.swing.JTextField irRightFrontTextField;
    private javax.swing.JTextField irVerticalAngleTextField;
    private javax.swing.JTextField irVerticalTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel lowerDrawArea;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JTextField parameter1TextField;
    private javax.swing.JTextField parameter2TextField;
    private javax.swing.JTextField parameter3TextField;
    private javax.swing.JButton searchControllersButton;
    private javax.swing.JButton sendAutoSettingsButton;
    private javax.swing.JButton sendDebugDataButton;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JTextField ultraSoundTextField;
    private javax.swing.JPanel upperDrawArea;
    // End of variables declaration//GEN-END:variables

    /* ------------------------------------------------
     My own functions, not generated by swing. */
    private void writeMessage(String message) {
        messageTextArea.append("\n" + message);
    }

    private void writeDebugMessage(String message) {
        debugTextArea.append(message + "\n");
        debugCallsTextField.setText(Integer.parseInt(debugCallsTextField.getText()) + 1 + "");
    }

    /**
     * Connects to serial port with specified name. Uses Baudrate 115200 Hz, 2
     * stop bits and no parity.
     *
     * @param portName Name of the serial port to be connected.
     */
    private void connect(String portName) {
        // Skapa ny COM-port
        comPort = new SerialPort(portName);
        try {
            //Open serial port
            comPort.openPort();
            //Set params. Also you can set params by this string: serialPort.setParams(9600, 8, 1, 0);
            comPort.setParams(SerialPort.BAUDRATE_115200,
                    SerialPort.DATABITS_8,
                    SerialPort.STOPBITS_2,
                    SerialPort.PARITY_NONE);
            comPort.addEventListener(this);
        } catch (SerialPortException ex) {
            writeMessage("Kunde inte koppla upp");
            System.out.println(ex);
            return;
        }

        connectButton.setText("Koppla ifrån");
        writeMessage("Uppkopplingen lyckades");
    }

    public void serialEvent(SerialPortEvent serialPortEvent) {
        try {
            ArrayList<Byte> bytes = new ArrayList();
            byte[] indata = comPort.readBytes(1);

            if (indata[0] == 0x7E) {

                boolean ceo = false;
                byte b;
                byte b2;

                while (true) {
                    try {
                        indata = comPort.readBytes(1, 100);
                    } catch (SerialPortTimeoutException ex) {
                        System.out.println("Timeout");
                        return;
                    }

                    b = indata[0];

                    if (b == 0x7D) {
                        ceo = true;
                    } else if (b == 0x7E) {
                        // Säger om meddelandet är korrekt
                        boolean correct = true;

                        // Kontrollera rätt längd på paketet och CRC
                        if (bytes.size() < 4) {
                            correct = false;
                        } else if (bytes.size() != 4 + bytes.get(1)) {
                            correct = false;
                        }
                        /* else {
                         byte[] crcIndata = new byte[length + 2];
                         for(int i = 0; i < length + 2; i++){
                         crcIndata[i] = bytes.get(i);
                         }
                         int crc = crc16(length, crcIndata);
                         byte crc1 = (byte) (crc & 0x00FF);
                         byte crc2 = (byte) ((crc & 0xFF00) >> 8);
                         System.out.println("CRC: " + crc1 + ", " + crc2);
                         if (crc1 != bytes.get(length + 2) || crc2 != bytes.get(length + 3)){
                         correct = false;
                         }
                         }*/

                        /*for (byte byte1 : bytes) {
                         System.out.println(byte1);
                         }*/
                        if (correct) {
                            int length = bytes.get(1);
                            byte[] relevantData = new byte[length + 2];
                            for (int i = 0; i < length + 2; i++) {
                                relevantData[i] = bytes.get(i);
                            }
                            // Synkronisera skrivning och läsning till och från buffern
                            synchronized (lock) {
                                messageBuffer.addLast(relevantData);
                            }
                            return;
                        } else {
                            System.out.println("Felaktigt meddelande");
                            bytes.clear();
                        }
                    } else {
                        if (ceo) {
                            b2 = (byte) (b ^ 0x20);
                            ceo = false;
                            bytes.add(b2);
                        } else {
                            bytes.add(b);
                        }
                    }
                }
            }
        } catch (SerialPortException ex) {
            System.out.println(ex);
        }
    }

    private int crc16(int length, byte[] data) {
        int crc = 0xFFFF;
        int poly = 0x8408;

        if (length == 0) {
            return 0;
        }
        for (int i = length - 1; i >= 0; i--) {
            byte b = data[i];
            for (int j = 0; j < 8; j++) {
                if ((crc & 0x0001) != ((b >> j) & 0x0001)) {
                    crc = (crc >> 1) ^ poly;
                } else {
                    crc >>= 1;
                }
            }
        }

        crc ^= 0xFFFF;
        int clone = crc;
        crc = (crc << 8) | ((clone >> 8) & 0x00FF);
        return crc;
    }

    public boolean sendMessage(String message) {
        return sendData('M', message.getBytes());
    }

    public boolean sendSteerCommand(int angle, int rotation, int speed) {
        // 0 <= angle < 180
        // 0 <= speed <= 100
        // 0 <= rotation <= 100
        byte data[] = new byte[3];
        data[0] = (byte) angle;
        data[1] = (byte) rotation;
        data[2] = (byte) speed;

        System.out.println("Styr");

        return sendData('C', data);
    }

    public boolean sendElevationCommand(boolean up) {
        System.out.println("Elevation");
        byte data[] = new byte[1];
        if (up) {
            data[0] = 1;
        } else {
            data[0] = 0;
        }
        return sendData('E', data);
    }

    public boolean sendData(char tag, byte[] data) {
        if (comPort == null || !comPort.isOpened()) {
            writeMessage("Koppla upp till roboten först!");
            return false;
        }

        byte length = (byte) data.length;
        int crc = crc16(length, data);
        byte crc1 = (byte) ((crc & 0xFF00) >> 8);
        byte crc2 = (byte) (crc & 0x00FF);

        ArrayList<Byte> message = new ArrayList<>();
        message.add((byte) 0x7E);
        message.add((byte) tag);
        message.add(length);
        for (int i = 0; i < length; i++) {
            byte b = data[i];
            if (b == 0x7E || b == 0x7D) {
                // Escape octet
                message.add((byte) 0x7D);
                message.add((byte) (b ^ 0x20));
            } else {
                message.add(b);
            }
        }
        message.add(crc1);
        message.add(crc2);
        message.add((byte) 0x7E);

        byte[] doneMessage = new byte[message.size()];
        for (int i = 0; i < message.size(); i++) {
            doneMessage[i] = message.get(i);
        }
        try {
            comPort.writeBytes(doneMessage);
        } catch (SerialPortException ex) {
            System.out.println(ex);
            return false;
        }

        return true;
    }

    public void run() {
        while (true) {
            // Draw sensor values
            upperDrawArea.repaint();
            lowerDrawArea.repaint();

            // Check buffer
            if (hasMessage()) {
                decodeMessage();
            }

            // Handle controll, must poll often to
            // detect lost controller and awoid crash.
            if (controller != null) {
                if (controller.poll()) {
                    Event event = new Event();

                    while (eventQueue.getNextEvent(event)) {
                        if (!event.getComponent().isAnalog()) {
                            controllerButtonPressed(event);
                        }
                    }
                } else {
                    controllerTimer.cancel();
                    controller = null;
                    searchControllersButtonActionPerformed(null);
                    chosenControllerLabel.setText("Ingen");
                }
            }

            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                System.out.println(ex);
            }
        }
    }

    private boolean hasMessage() {
        return messageBuffer.size() > 0;
    }

    private void decodeMessage() {
        byte[] message = messageBuffer.getFirst();
        //Kanske behöver synkroniseras med serialEvent...
        synchronized (lock) {
            messageBuffer.removeFirst();
        }

        char tag = (char) message[0];
        tag = Character.toUpperCase(tag);
        int length = message[1];
        byte data[] = new byte[length];
        for (int i = 0; i < length; i++) {
            data[i] = message[i + 2];
        }

        switch (tag) {
            case 'P':
                parametersUpdate(data);
                break;
            case 'M':
                messageRecieved(data);
                break;
            case 'S':
                sensorUpdate(data);
                break;
            case 'V':
                valueRecieved(data);
                break;
            default:
                debugMessageRecieved(tag, data);
                break;
        }
    }

    private void parametersUpdate(byte[] data) {
        parameter1TextField.setText("" + data[0]);
        parameter2TextField.setText("" + data[1]);
        parameter3TextField.setText("" + data[2]);
        writeMessage("Tog emot uppdaterade parametrar ");
    }

    private void messageRecieved(byte[] data) {
        String m = "";

        for (byte b : data) {
            m += (char) b;
        }

        writeMessage("Message: " + m);
    }

    private void sensorUpdate(byte[] data) {
        for (int sensor = 0; sensor < data.length - 1; sensor++) {
            int length = data[sensor];
            if (length < 0) {
                length += 256;
            }
            switch (sensor) {
                case 0:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.LEFT_FRONT);
                    irLeftFrontTextField.setText("" + length);
                    break;
                case 1:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.RIGHT_FRONT);
                    irRightFrontTextField.setText("" + length);
                    break;
                case 2:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.LEFT_BACK);
                    irLeftBackTextField.setText("" + length);
                    break;
                case 3:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.RIGHT_BACK);
                    irRightBackTextField.setText("" + length);
                    break;
                case 4:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.FRONT);
                    irFrontTextField.setText("" + length);
                    break;
                case 5:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.BACK);
                    irBackTextField.setText("" + length);
                    break;
                case 6:
                    ((UpperPanel) upperDrawArea).updatePoints(length, data[data.length - 1], SENSOR.VERTICAL);
                    irVerticalTextField.setText("" + length);
                    break;
                case 7:
                    ((UpperPanel) upperDrawArea).updatePoints(length, 20, SENSOR.ULTRA_SOUND);
                    ultraSoundTextField.setText("" + length);
                    break;
            }
        }
    }

    private void valueRecieved(byte[] data) {
        try {
            float f = ByteBuffer.wrap(data).order(ByteOrder.LITTLE_ENDIAN).getFloat();
            writeDebugMessage("Value: " + f);
        } catch (Exception e) {
            System.out.println("Fel vid float-avkodning");
        }
    }

    private void debugMessageRecieved(char tag, byte data[]) {
        writeDebugMessage("\n-- Okänt meddelande --");
        writeDebugMessage("Tag: " + tag);
        writeDebugMessage("Length: " + data.length);
        String m = "";
        for (byte b : data) {
            m += (char) b;
            writeDebugMessage("Byte: " + (int) b);
        }
        writeDebugMessage("String: " + m);
        writeDebugMessage("-- Slut --\n");
    }

    private void keyUpdate() {
        int walk = 0;
        int strafe = 0;
        int rot = 0;

        if (keyUpPressed) {
            walk++;
        }
        if (keyDownPressed) {
            walk--;
        }
        if (keyRightPressed) {
            strafe++;
        }
        if (keyLeftPressed) {
            strafe--;
        }
        if (keyControlPressed) {
            rot--;
        }
        if (keyZeroPressed) {
            rot++;
        }

        int direction = (int) Math.toDegrees(Math.atan2(walk, strafe)) - 90;
        if (direction < 0) {
            direction += 360;
        }

        if (walk == 0 && strafe == 0) {
            arrowsAngle = -1;
        } else {
            arrowsAngle = direction;
        }

        rotationValue = rot * 50;

        // Send package with direction, speed and rot.
        //sendSteerCommand(direction / 2, rot * 50, speed);
    }

    private void controllerButtonPressed(Event event) {
        switch (event.getComponent().getName()) {
            case "Button 0":
                break;
            case "Button 1":
                break;
            case "Button 2":
                break;
            case "Button 3":
                break;
            case "Button 4":
                // Left shoulder, send lower
                sendElevationCommand(true);
                break;
            case "Button 5":
                // Right shoulder, send raise
                sendElevationCommand(false);
                break;
            case "Button 6":
                break;
            case "Button 7":
                break;
            case "Button 8":
                break;
            case "Button 9":
                break;
            case "Button 10":
                break;
            case "Styrknapp":
                dPadValue = event.getValue();
                break;
        }
    }

    private void robotSteeringUpdate() {
        float x = 0, y = 0, xrot = 0;

        if (controller != null) {
            for (Component c : controller.getComponents()) {
                switch (c.getName()) {
                    case "X-axeln":
                        x = c.getPollData();
                        break;
                    case "Y-axeln":
                        y = c.getPollData();
                        break;
                    case "X-rotation":
                        xrot = c.getPollData();
                        break;
                }
            }
        }

        int speed;
        float angle = 0;
        if (arrowsAngle >= 0) {
            angle = arrowsAngle;
            speed = 100;
        } else if (dPadValue != 0) {
            angle = 360 * (1 - dPadValue) + 90;
            if (angle >= 360) {
                angle -= 360;
            }
            speed = 100;
        } else {
            angle = (float) Math.toDegrees(Math.atan2(x, y)) - 180;
            if (angle < 0) {
                angle += 360;
            } else if (angle >= 360) {
                angle -= 360;
            }
            speed = (int) Math.round(Math.sqrt(x * x + y * y) * 100);
            if (speed < 10) {
                speed = 0;
            } else if (speed > 100) {
                speed = 100;
            }
        }

        int rotation;
        if (rotationValue != 0) {
            rotation = rotationValue;
        } else {
            rotation = Math.round(50 * xrot);
            if (Math.abs(rotation) < 2) {
                rotation = 0;
            }
        }

        if (speed > 0 || Math.abs(rotation) > 0) {
            // För att kunna skicka över UART
            angle /= 4;
            rotation += 50;
            System.out.println("Direction: " + (int) angle + ", rotation: " + rotation + ", speed: " + speed);
            sendSteerCommand((int) angle, rotation, speed);
        }
    }
}
