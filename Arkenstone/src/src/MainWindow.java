package src;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import javax.swing.JTextField;
import javax.swing.text.DefaultCaret;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortTimeoutException;
import net.java.games.input.Component;
import net.java.games.input.Controller;
import net.java.games.input.ControllerEnvironment;
import net.java.games.input.Event;
import net.java.games.input.EventQueue;

/**
 * MainWindow.
 * This is the window in witch the entire program is displayed.
 * This class handles drawind and updating graphics, and has most of the
 * important functions for communicating with the robot.
 * The reason for this class to handle communications is that a lot of the
 * text fields, buttons, etc. needs to be read from when sending data,
 * so the most convinient way of handling this is to have all communication
 * in this class.
 * Another reason is that the communication functions needs to be synchronized
 * with stuff like reading message buffer and setting values in the
 * sensor display windows.
 * 
 * @author Martin
 */
public class MainWindow extends javax.swing.JFrame implements Runnable, SerialPortEventListener {

    public static enum SENSOR {
        // Just to make the code easier to read.
        LEFT_FRONT,
        RIGHT_FRONT,
        LEFT_BACK,
        RIGHT_BACK,
        FRONT,
        BACK,
        VERTICAL,
        ULTRA_SOUND
    }

    final int CONTROLL_DELAY = 100; // milli-seconds
    final int MIN_SPEED = 20; // For controller support
    final int MIN_ROTATION = 15; // For controller support

    SerialPort comPort;
    LinkedList<byte[]> messageBuffer;
    final Object lock; // Used for synchronization

    Controller controller;
    EventQueue eventQueue;
    boolean controllerSticksLocked;
    Timer controllerTimer;
    float dPadValue = 0;
    float arrowsAngle = -1;
    int rotationValue = 0;

    // Buffer for making custom debug messages.
    Vector<Byte> debugData;

    // used to make sure that the buttons only registrer once.
    boolean keyUpPressed, keyDownPressed, keyLeftPressed, keyRightPressed, keyZeroPressed, keyControlPressed;
    boolean keyRaisePressed, keyLowerPressed;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        // Make message windows auto scroll
        DefaultCaret caret = (DefaultCaret) messageTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        DefaultCaret caret2 = (DefaultCaret) debugTextArea.getCaret();
        caret2.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        messageBuffer = new LinkedList<>();
        lock = new Object();

        debugData = new Vector();

        controllerTimer = new Timer();

        Thread t = new Thread(this);
        t.start();

        // This timer handles keyboard and controller support
        controllerTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                robotSteeringUpdate();
            }
        }, CONTROLL_DELAY, CONTROLL_DELAY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        autoButtonGroup = new javax.swing.ButtonGroup();
        inOutButtonGroup = new javax.swing.ButtonGroup();
        dataParseButtonGroup = new javax.swing.ButtonGroup();
        etchedBorder1 = (javax.swing.border.EtchedBorder)javax.swing.BorderFactory.createEtchedBorder();
        upperDrawArea = new UpperPanel();
        lowerDrawArea = new LowerPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        irLeftFrontTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        irRightFrontTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        irVerticalTextField = new javax.swing.JTextField();
        irLeftBackTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        irRightBackTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        irBackTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ultraSoundTextField = new javax.swing.JTextField();
        irFrontTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        autoButton = new javax.swing.JToggleButton();
        autoLeftRadioButton = new javax.swing.JRadioButton();
        autoRightRadioButton = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        comNameTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        sendMessageButton = new javax.swing.JButton();
        messageTextField = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        searchControllersButton = new javax.swing.JButton();
        controllersComboBox = new javax.swing.JComboBox();
        connectControllerButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        chosenControllerLabel = new javax.swing.JLabel();
        sendAutoSettingsButton = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        statusToggleButton = new javax.swing.JToggleButton();
        jSeparator10 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        savedSensorValuesTextField = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        medianSensorValuesTextField = new javax.swing.JTextField();
        sensorValuesUpdateButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        debugTextArea = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        clearDebugButton = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        debugCallsTextField = new javax.swing.JTextField();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        sendDebugDataButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        debugDataList = new javax.swing.JList();
        jLabel21 = new javax.swing.JLabel();
        debugTagTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        debugDataTextField = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        addDebugDataButton = new javax.swing.JButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        deleteAllDebugDataButton = new javax.swing.JButton();
        deleteDebugDataButton = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        parameterOffsetRightTextField = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        parameterKPTextField = new javax.swing.JTextField();
        parameterEntryStepLeftTextField = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        parameterSpeedTextField = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        parameterExitStepLeftTextField = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        parameterEntryStepRightTextField = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        parameterExitStepRightTextField = new javax.swing.JTextField();
        jSeparator12 = new javax.swing.JSeparator();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        parameterOffsetLeftTextField = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jSeparator13 = new javax.swing.JSeparator();
        sendParametrsButton = new javax.swing.JButton();
        parameterSampleRateTextField = new javax.swing.JTextField();
        loadParametersButton = new javax.swing.JButton();
        jSeparator14 = new javax.swing.JSeparator();
        jLabel50 = new javax.swing.JLabel();
        saveLoadParametersTextField = new javax.swing.JTextField();
        saveParametersButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        parameterClimbLimitTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        parameterAngleScaleFactorTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        parameterMinFrontLengthTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        parameterCorridorWidthTextField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        parameterMaxDiffAngleTextField = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        parameterMaxDistDistTextField = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        parameterIterationsTextField = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        parameterServoSpeedTextField = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        parameterStepLengthTextField = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        parameterIterationsDelayStartTextField = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        parameterIterationsDelayTextField = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        parameterStepHeightTextField = new javax.swing.JTextField();
        parameterStepHeightClimbingTextField = new javax.swing.JTextField();
        parameterMaxWalkTurnTextField = new javax.swing.JTextField();
        parameterMinWalkTurnTextField = new javax.swing.JTextField();
        parameterTurnToleranceTextField = new javax.swing.JTextField();
        parameterTurnScaleFactorTextField = new javax.swing.JTextField();
        parameterTurnWalkScaleFactorTextField = new javax.swing.JTextField();
        parameterMinRotationTextField = new javax.swing.JTextField();
        parameterAutoElevationTextField = new javax.swing.JTextField();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        parameterAcceptableAngleTextField = new javax.swing.JTextField();
        parameterAcceptableDistTextField = new javax.swing.JTextField();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        parameterOffsetSensor4TextField = new javax.swing.JTextField();
        parameterOffsetSensor0TextField = new javax.swing.JTextField();
        parameterOffsetSensor2TextField = new javax.swing.JTextField();
        parameterOffsetSensor1TextField = new javax.swing.JTextField();
        parameterOffsetSensor3TextField = new javax.swing.JTextField();
        parameterOffsetSensor5TextField = new javax.swing.JTextField();
        parameterOffsetSensor6TextField = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        jLabel92 = new javax.swing.JLabel();
        parameterMaxDistRotTextField = new javax.swing.JTextField();
        jLabel93 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arkenstone");
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("mainFrame"); // NOI18N

        upperDrawArea.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout upperDrawAreaLayout = new javax.swing.GroupLayout(upperDrawArea);
        upperDrawArea.setLayout(upperDrawAreaLayout);
        upperDrawAreaLayout.setHorizontalGroup(
            upperDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        upperDrawAreaLayout.setVerticalGroup(
            upperDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 263, Short.MAX_VALUE)
        );

        lowerDrawArea.setBackground(new java.awt.Color(255, 255, 255));
        lowerDrawArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lowerDrawAreaMouseClicked(evt);
            }
        });
        lowerDrawArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lowerDrawAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lowerDrawAreaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout lowerDrawAreaLayout = new javax.swing.GroupLayout(lowerDrawArea);
        lowerDrawArea.setLayout(lowerDrawAreaLayout);
        lowerDrawAreaLayout.setHorizontalGroup(
            lowerDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        lowerDrawAreaLayout.setVerticalGroup(
            lowerDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        messageTextArea.setEditable(false);
        messageTextArea.setColumns(20);
        messageTextArea.setRows(5);
        messageTextArea.setText("Arkenstone startat.");
        jScrollPane1.setViewportView(messageTextArea);

        irLeftFrontTextField.setEditable(false);
        irLeftFrontTextField.setText("0");
        irLeftFrontTextField.setFocusable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("IR vänster fram");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("IR höger fram");

        irRightFrontTextField.setEditable(false);
        irRightFrontTextField.setText("0");
        irRightFrontTextField.setFocusable(false);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("IR hinder");

        irVerticalTextField.setEditable(false);
        irVerticalTextField.setText("0");
        irVerticalTextField.setFocusable(false);

        irLeftBackTextField.setEditable(false);
        irLeftBackTextField.setText("0");
        irLeftBackTextField.setFocusable(false);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("IR vänster bak");

        irRightBackTextField.setEditable(false);
        irRightBackTextField.setText("0");
        irRightBackTextField.setFocusable(false);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("IR höger bak");

        irBackTextField.setEditable(false);
        irBackTextField.setText("0");
        irBackTextField.setFocusable(false);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("IR bak");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Ultraljud");

        ultraSoundTextField.setEditable(false);
        ultraSoundTextField.setText("0");
        ultraSoundTextField.setFocusable(false);

        irFrontTextField.setEditable(false);
        irFrontTextField.setText("0");
        irFrontTextField.setFocusable(false);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("IR fram");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(irVerticalTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(irLeftFrontTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irLeftBackTextField)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irBackTextField)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(irRightFrontTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(irRightBackTextField)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(irFrontTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ultraSoundTextField)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(138, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(irFrontTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(ultraSoundTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(irVerticalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(irLeftFrontTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(irLeftBackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(irRightFrontTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irRightBackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irBackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sensorvärden", jPanel4);

        autoButton.setText("Autonomt läge (av)");
        autoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoButtonActionPerformed(evt);
            }
        });

        autoButtonGroup.add(autoLeftRadioButton);
        autoLeftRadioButton.setSelected(true);
        autoLeftRadioButton.setText("Vänsteralgoritm");

        autoButtonGroup.add(autoRightRadioButton);
        autoRightRadioButton.setText("Högeralgoritm");

        jLabel11.setText("COM port namn:");

        comNameTextField.setText("COM4");

        connectButton.setText("Koppla upp");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Meddelanden");

        sendMessageButton.setText("Skicka meddelande");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        messageTextField.setText("Test message");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Koppla upp till handkontroll");

        searchControllersButton.setText("Leta efter kontroller");
        searchControllersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchControllersButtonActionPerformed(evt);
            }
        });

        connectControllerButton.setText("Använd kontroll");
        connectControllerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectControllerButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Vald kontroll:");

        chosenControllerLabel.setText("Ingen");

        sendAutoSettingsButton.setText("Skicka inställningar");
        sendAutoSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendAutoSettingsButtonActionPerformed(evt);
            }
        });

        jLabel24.setText("Kontrollmeddelanden");

        statusToggleButton.setText("Av");
        statusToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusToggleButtonActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Sensorvisning");

        jLabel34.setText("Antal sparade värden:");

        savedSensorValuesTextField.setText("20");

        jLabel35.setText("Antal medianvärden:");

        medianSensorValuesTextField.setText("1");

        sensorValuesUpdateButton.setText("Uppdatera");
        sensorValuesUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sensorValuesUpdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator6)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(searchControllersButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(controllersComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statusToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator10)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(connectControllerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chosenControllerLabel))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(autoButton)
                                .addGap(18, 18, 18)
                                .addComponent(autoLeftRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(autoRightRadioButton))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(savedSensorValuesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel35)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(medianSensorValuesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendAutoSettingsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sensorValuesUpdateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoButton)
                    .addComponent(autoLeftRadioButton)
                    .addComponent(autoRightRadioButton)
                    .addComponent(sendAutoSettingsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchControllersButton)
                    .addComponent(controllersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectControllerButton)
                    .addComponent(jLabel17)
                    .addComponent(chosenControllerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendMessageButton))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statusToggleButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(savedSensorValuesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(medianSensorValuesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sensorValuesUpdateButton))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Inställningar", jPanel5);

        debugTextArea.setColumns(20);
        debugTextArea.setRows(5);
        jScrollPane2.setViewportView(debugTextArea);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Debugutskrifter");

        clearDebugButton.setText("Ta bort all text");
        clearDebugButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDebugButtonActionPerformed(evt);
            }
        });

        jLabel19.setText("Antal anrop:");

        debugCallsTextField.setEditable(false);
        debugCallsTextField.setText("0");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Manuell I/O för meddelanden");

        sendDebugDataButton.setText("Skicka meddelande");
        sendDebugDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendDebugDataButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(debugDataList);

        jLabel21.setText("Tag:");

        jLabel22.setText("Data:");

        inOutButtonGroup.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Inkommande");
        jRadioButton1.setActionCommand("I");

        inOutButtonGroup.add(jRadioButton2);
        jRadioButton2.setText("Utgående");
        jRadioButton2.setActionCommand("O");

        addDebugDataButton.setText("Lägg till data");
        addDebugDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDebugDataButtonActionPerformed(evt);
            }
        });

        dataParseButtonGroup.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("Byte");
        jRadioButton3.setActionCommand("B");

        dataParseButtonGroup.add(jRadioButton4);
        jRadioButton4.setText("Int");
        jRadioButton4.setActionCommand("I");

        dataParseButtonGroup.add(jRadioButton5);
        jRadioButton5.setText("Float");
        jRadioButton5.setActionCommand("F");

        dataParseButtonGroup.add(jRadioButton6);
        jRadioButton6.setText("String");
        jRadioButton6.setActionCommand("S");

        deleteAllDebugDataButton.setText("Ta bort all data");
        deleteAllDebugDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllDebugDataButtonActionPerformed(evt);
            }
        });

        deleteDebugDataButton.setText("Ta bort vald data");
        deleteDebugDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDebugDataButtonActionPerformed(evt);
            }
        });

        jLabel23.setText("Tolka data som:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(clearDebugButton, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                    .addComponent(jLabel19)
                                    .addComponent(debugCallsTextField)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sendDebugDataButton))
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jRadioButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadioButton4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadioButton5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadioButton6))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(debugTagTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                                    .addComponent(debugDataTextField)))
                                            .addComponent(jLabel23))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(deleteAllDebugDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(deleteDebugDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(addDebugDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator7)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(debugCallsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearDebugButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel21)
                                    .addComponent(debugTagTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addDebugDataButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(debugDataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deleteDebugDataButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteAllDebugDataButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton2)
                                .addGap(15, 15, 15)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sendDebugDataButton)
                                    .addComponent(jRadioButton3)
                                    .addComponent(jRadioButton4)
                                    .addComponent(jRadioButton5)
                                    .addComponent(jRadioButton6))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Debug", jPanel1);

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel7.setMaximumSize(new java.awt.Dimension(549, 32767));

        parameterOffsetRightTextField.setText("5");
        parameterOffsetRightTextField.setName("Offset right"); // NOI18N

        jLabel37.setText("Offset för högersensorer (cm):");

        jLabel38.setText("Straffparameter för avstånd till väggarna (Kp):");

        parameterKPTextField.setText("0.05");
        parameterKPTextField.setName("Kp"); // NOI18N

        parameterEntryStepLeftTextField.setText("0");
        parameterEntryStepLeftTextField.setName("Entry steps left"); // NOI18N

        jLabel39.setText("Steg in i vänsterkurva:");

        parameterSpeedTextField.setText("90");
        parameterSpeedTextField.setName("Speed"); // NOI18N

        jLabel40.setText("Gånghastighet (0-100):");

        parameterExitStepLeftTextField.setText("0");
        parameterExitStepLeftTextField.setName("Exit steps left"); // NOI18N

        jLabel41.setText("Steg ut ur vänsterkurva:");

        parameterEntryStepRightTextField.setText("0");
        parameterEntryStepRightTextField.setName("Entry steps right"); // NOI18N

        jLabel42.setText("Steg in i högerkurva:");

        jLabel43.setText("Steg ut ur högerkurva:");

        parameterExitStepRightTextField.setText("0");
        parameterExitStepRightTextField.setName("Exit steps right"); // NOI18N

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel44.setText("Navigation");

        jLabel45.setText("Offset för vänstersensorer (cm):");

        parameterOffsetLeftTextField.setText("5");
        parameterOffsetLeftTextField.setName("Offset left"); // NOI18N

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel46.setText("Sätt värdet på olika parametrar i robotens algoritmer");

        jLabel47.setText("Samplingshastighet [samlingar/s]:");

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel48.setText("Sensorer");

        sendParametrsButton.setText("Skicka parametrar");
        sendParametrsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendParametrsButtonActionPerformed(evt);
            }
        });

        parameterSampleRateTextField.setText("20");
        parameterSampleRateTextField.setName("Sample rate"); // NOI18N

        loadParametersButton.setText("Ladda parametrar");
        loadParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadParametersButtonActionPerformed(evt);
            }
        });

        jLabel50.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel50.setText("Spara eller ladda parametrar från en fil");

        saveParametersButton.setText("Spara parametrar");
        saveParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveParametersButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Gräns för att klättringshindret hittas (cm):");

        parameterClimbLimitTextField.setText("35");
        parameterClimbLimitTextField.setName("Climb limit"); // NOI18N

        jLabel14.setText("Skalfaktor för vinkelreglering mot väggarna:");

        parameterAngleScaleFactorTextField.setText("0.3");
        parameterAngleScaleFactorTextField.setName("Angle scale factor"); // NOI18N

        jLabel15.setText("Avståndet som roboten ser väggar framför sig (cm):");

        parameterMinFrontLengthTextField.setText("50");
        parameterMinFrontLengthTextField.setName("Front min dist"); // NOI18N

        jLabel16.setText("Bredd på korridorerna (cm):");

        parameterCorridorWidthTextField.setText("80");
        parameterCorridorWidthTextField.setName("Corridor width"); // NOI18N

        jLabel25.setText("Maximal skillnad mellan sensorerna på en sida för reglering av vinkel (cm):");

        parameterMaxDiffAngleTextField.setText("10");
        parameterMaxDiffAngleTextField.setName("Max regulation sensor diff"); // NOI18N

        jLabel26.setText("Maximalt avstånd till väggen för reglering av avstånd (cm):");

        parameterMaxDistDistTextField.setText("50");
        parameterMaxDistDistTextField.setName("Regulation max dist dist"); // NOI18N

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setText("Gång");

        jLabel28.setText("Antal delsteg varje ben tar i ett steg:");

        parameterIterationsTextField.setText("5");
        parameterIterationsTextField.setName("Iterations"); // NOI18N

        jLabel29.setText("Servohastighet (0-1023):");

        parameterServoSpeedTextField.setText("768");
        parameterServoSpeedTextField.setName("Servo speed"); // NOI18N

        jLabel30.setText("Maximal steglängd (cm):");

        parameterStepLengthTextField.setText("8");
        parameterStepLengthTextField.setName("Max step length"); // NOI18N

        jLabel31.setText("Tidsfördröjning då ett ben lyfts (ms):");

        parameterIterationsDelayStartTextField.setText("50");
        parameterIterationsDelayStartTextField.setName("Iterations delay start"); // NOI18N

        jLabel32.setText("Tidsfördröjning då ett ben flyttas (ms):");

        parameterIterationsDelayTextField.setText("25");
        parameterIterationsDelayTextField.setName("Iterations delay"); // NOI18N

        jLabel33.setText("Steghöjd vid normal gång (cm):");

        jLabel36.setText("Steghöjd vid klättring (cm):");

        jLabel49.setText("Maximal framåthastighet vid svängar (0-100):");

        jLabel51.setText("Minimal framåthastighet vid svängar (0-100):");

        jLabel52.setText("Feltolerans vid svängar (grader):");

        jLabel53.setText("Vinkeln vid vilken rotationshastigheten skalas ner vid svängar (grader):");

        jLabel54.setText("Vinkeln vid vilken framåthastigheten skalas ner vid svängar (grader):");

        jLabel55.setText("Minsta rotationshastigheten vid svängar (0-50):");

        jLabel56.setText("Gånghöjd (mm):");

        parameterStepHeightTextField.setText("2");
        parameterStepHeightTextField.setName("Step height"); // NOI18N

        parameterStepHeightClimbingTextField.setText("9");
        parameterStepHeightClimbingTextField.setName("Step height climbing"); // NOI18N

        parameterMaxWalkTurnTextField.setText("75");
        parameterMaxWalkTurnTextField.setName("Max turn walk speed"); // NOI18N

        parameterMinWalkTurnTextField.setText("60");
        parameterMinWalkTurnTextField.setName("Min turn walk speed"); // NOI18N

        parameterTurnToleranceTextField.setText("5");
        parameterTurnToleranceTextField.setName("Turn tolerance"); // NOI18N

        parameterTurnScaleFactorTextField.setText("75");
        parameterTurnScaleFactorTextField.setName("Turn scale factor"); // NOI18N

        parameterTurnWalkScaleFactorTextField.setText("45");
        parameterTurnWalkScaleFactorTextField.setName("Turn walk scale factor"); // NOI18N

        parameterMinRotationTextField.setText("15");
        parameterMinRotationTextField.setName("Min turn rotation"); // NOI18N

        parameterAutoElevationTextField.setText("120");
        parameterAutoElevationTextField.setName("Auto elevation"); // NOI18N

        jLabel57.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel57.setText("Flyttal");

        jLabel58.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel58.setText("Flyttal");

        jLabel59.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel59.setText("Flyttal");

        jLabel60.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel60.setText("Flyttal");

        jLabel61.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel61.setText("Flyttal");

        jLabel62.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel62.setText("Flyttal");

        jLabel63.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel63.setText("Flyttal");

        jLabel64.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel64.setText("Flyttal");

        jLabel65.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel65.setText("Flyttal");

        jLabel66.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel66.setText("Flyttal");

        jLabel71.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel71.setText("Flyttal");

        jLabel72.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel72.setText("Flyttal");

        jLabel73.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel73.setText("Flyttal");

        jLabel74.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel74.setText("Flyttal");

        jLabel75.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel75.setText("Flyttal");

        jLabel67.setText("Tillåten vinkel mot väggen (grader):");

        jLabel68.setText("Tillåtet avstånd från mitten (cm):");

        parameterAcceptableAngleTextField.setText("5");
        parameterAcceptableAngleTextField.setName("Acceptable angle offset"); // NOI18N

        parameterAcceptableDistTextField.setText("2");
        parameterAcceptableDistTextField.setName("Acceptable distance offset"); // NOI18N

        jLabel69.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel69.setText("Flyttal");

        jLabel70.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel70.setText("Flyttal");

        jLabel76.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel76.setText("Flyttal");

        jLabel77.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel77.setText("Flyttal");

        jLabel78.setText("Offset sensor fram (cm):");

        jLabel79.setText("Offset sensor vänster fram (cm):");

        jLabel80.setText("Offset sensor vänster bak (cm):");

        jLabel81.setText("Offset sensor höger fram (cm):");

        jLabel82.setText("Offset sensor höger bak (cm):");

        jLabel83.setText("Offset sensor bak (cm):");

        jLabel84.setText("Offset sensor hinder (cm):");

        parameterOffsetSensor4TextField.setText("0");
        parameterOffsetSensor4TextField.setName("Sensor offset 4"); // NOI18N

        parameterOffsetSensor0TextField.setText("0");
        parameterOffsetSensor0TextField.setName("Sensor offset 0"); // NOI18N

        parameterOffsetSensor2TextField.setText("0");
        parameterOffsetSensor2TextField.setName("Sensor offset 2"); // NOI18N

        parameterOffsetSensor1TextField.setText("0");
        parameterOffsetSensor1TextField.setName("Sensor offset 1"); // NOI18N

        parameterOffsetSensor3TextField.setText("0");
        parameterOffsetSensor3TextField.setName("Sensor offset 3"); // NOI18N

        parameterOffsetSensor5TextField.setText("0");
        parameterOffsetSensor5TextField.setName("Sensor offset 5"); // NOI18N

        parameterOffsetSensor6TextField.setText("0");
        parameterOffsetSensor6TextField.setName("Sensor offset 6"); // NOI18N

        jLabel85.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel85.setText("Flyttal");

        jLabel86.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel86.setText("Flyttal");

        jLabel87.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel87.setText("Flyttal");

        jLabel88.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel88.setText("Flyttal");

        jLabel89.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel89.setText("Flyttal");

        jLabel90.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel90.setText("Flyttal");

        jLabel91.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel91.setText("Flyttal");

        jLabel92.setText("Maximalt avstånd till väggen för reglering av rotation (cm):");
        jLabel92.setName("Regulation max dist rot"); // NOI18N

        parameterMaxDistRotTextField.setText("60");
        parameterMaxDistRotTextField.setName("Max regulation sensor diff"); // NOI18N

        jLabel93.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel93.setText("Flyttal");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jSeparator13)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel84)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(parameterOffsetSensor6TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel83)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(parameterOffsetSensor5TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel82)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(parameterOffsetSensor3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel81)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(parameterOffsetSensor1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel80)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(parameterOffsetSensor2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel79)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(parameterOffsetSensor0TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel78)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(parameterOffsetSensor4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(parameterSampleRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel85)
                                    .addComponent(jLabel86)
                                    .addComponent(jLabel87)
                                    .addComponent(jLabel88)
                                    .addComponent(jLabel89)
                                    .addComponent(jLabel90)
                                    .addComponent(jLabel91)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel30)
                                    .addComponent(jLabel52)
                                    .addComponent(jLabel53)
                                    .addComponent(jLabel54)
                                    .addComponent(jLabel55)
                                    .addComponent(jLabel56)
                                    .addComponent(jLabel32)
                                    .addComponent(jLabel33)
                                    .addComponent(jLabel36)
                                    .addComponent(jLabel49)
                                    .addComponent(jLabel51)
                                    .addComponent(jLabel31))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(parameterServoSpeedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(parameterIterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(parameterIterationsDelayStartTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(parameterIterationsDelayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(parameterStepHeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(parameterStepHeightClimbingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(parameterMaxWalkTurnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(parameterMinWalkTurnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(parameterTurnToleranceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel72))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(parameterTurnScaleFactorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel73))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(parameterTurnWalkScaleFactorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel74))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(parameterMinRotationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel75))
                                    .addComponent(parameterAutoElevationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(parameterStepLengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel71)))))
                        .addContainerGap(71, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator8)
                            .addComponent(jSeparator14)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel47)
                                    .addComponent(jLabel48)
                                    .addComponent(jLabel44)
                                    .addComponent(jLabel50)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel92)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterMaxDistRotTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel68)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterAcceptableDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel67)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterAcceptableAngleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel38)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterKPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel40)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterSpeedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel39)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterEntryStepLeftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel41)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterExitStepLeftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel42)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterEntryStepRightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel43)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterExitStepRightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel45)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterOffsetLeftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel37)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterOffsetRightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterClimbLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel14)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterAngleScaleFactorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel15)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterMinFrontLengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel16)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterCorridorWidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel25)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                                .addComponent(parameterMaxDiffAngleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                                .addComponent(jLabel26)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(parameterMaxDistDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel70)
                                            .addComponent(jLabel58)
                                            .addComponent(jLabel57)
                                            .addComponent(jLabel59)
                                            .addComponent(jLabel60)
                                            .addComponent(jLabel61)
                                            .addComponent(jLabel62)
                                            .addComponent(jLabel63)
                                            .addComponent(jLabel77)
                                            .addComponent(jLabel64)
                                            .addComponent(jLabel76)
                                            .addComponent(jLabel65)
                                            .addComponent(jLabel66)
                                            .addComponent(jLabel69)
                                            .addComponent(jLabel93))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(saveLoadParametersTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveParametersButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(loadParametersButton)))
                        .addContainerGap())
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel46)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sendParametrsButton)
                        .addContainerGap())
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jSeparator12)
                        .addContainerGap())))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(sendParametrsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel44)
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterKPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(jLabel57))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterSpeedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterEntryStepLeftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39)
                    .addComponent(jLabel58))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterExitStepLeftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41)
                    .addComponent(jLabel59))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterEntryStepRightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42)
                    .addComponent(jLabel60))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterExitStepRightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43)
                    .addComponent(jLabel61))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterOffsetLeftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45)
                    .addComponent(jLabel62))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterOffsetRightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37)
                    .addComponent(jLabel63))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterClimbLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel77))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterAngleScaleFactorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel64))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(parameterMinFrontLengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel76))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(parameterCorridorWidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(parameterMaxDiffAngleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel65))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel92)
                    .addComponent(parameterMaxDistRotTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel93))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel66)
                    .addComponent(parameterMaxDistDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel67)
                    .addComponent(parameterAcceptableAngleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel69))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel68)
                    .addComponent(parameterAcceptableDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel70))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(parameterIterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(parameterServoSpeedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(parameterStepLengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel71))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(parameterIterationsDelayStartTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(parameterIterationsDelayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(parameterStepHeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(parameterStepHeightClimbingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49)
                    .addComponent(parameterMaxWalkTurnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(parameterMinWalkTurnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(parameterTurnToleranceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel72))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(parameterTurnScaleFactorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel73))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel54)
                    .addComponent(parameterTurnWalkScaleFactorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel74))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel55)
                    .addComponent(parameterMinRotationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel75))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel56)
                    .addComponent(parameterAutoElevationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(parameterSampleRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel78)
                    .addComponent(parameterOffsetSensor4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel85))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel79)
                    .addComponent(parameterOffsetSensor0TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel86))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel80)
                    .addComponent(parameterOffsetSensor2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel87))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel81)
                    .addComponent(parameterOffsetSensor1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel88))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel82)
                    .addComponent(parameterOffsetSensor3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel89))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel83)
                    .addComponent(parameterOffsetSensor5TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel90))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel84)
                    .addComponent(parameterOffsetSensor6TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel91))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel50)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadParametersButton)
                    .addComponent(saveParametersButton)
                    .addComponent(saveLoadParametersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(jPanel7);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Parametrar", jPanel6);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lowerDrawArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(upperDrawArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator5)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(upperDrawArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lowerDrawArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Is called when a key pressed event happens while the lower
     * sensor window has focus. Handles pressed keys.
     */
    private void lowerDrawAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lowerDrawAreaKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                if (!keyUpPressed) {
                    keyUpPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_DOWN:
                if (!keyDownPressed) {
                    keyDownPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_LEFT:
                if (!keyLeftPressed) {
                    keyLeftPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_RIGHT:
                if (!keyRightPressed) {
                    keyRightPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_NUMPAD0:
                if (!keyZeroPressed) {
                    keyZeroPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_CONTROL:
                if (!keyControlPressed) {
                    keyControlPressed = true;
                    keyUpdate();
                }
                break;
            case KeyEvent.VK_ADD:
                if (!keyRaisePressed) {
                    keyRaisePressed = true;
                    sendElevationCommand(true);
                }
                break;
            case KeyEvent.VK_SUBTRACT:
                if (!keyLowerPressed) {
                    keyLowerPressed = true;
                    sendElevationCommand(false);
                }
                break;
        }
    }//GEN-LAST:event_lowerDrawAreaKeyPressed

    /**
    * Is called when a key released event happens while the lower
    * sensor window has focus. Handles released keys.
    */
    private void lowerDrawAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lowerDrawAreaKeyReleased
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                keyUpPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_DOWN:
                keyDownPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_LEFT:
                keyLeftPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_RIGHT:
                keyRightPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_NUMPAD0:
                keyZeroPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_CONTROL:
                keyControlPressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_ADD:
                keyRaisePressed = false;
                keyUpdate();
                break;
            case KeyEvent.VK_SUBTRACT:
                keyLowerPressed = false;
                keyUpdate();
                break;
        }
    }//GEN-LAST:event_lowerDrawAreaKeyReleased

    /**
     * Makes sure that the right class has focus.
     * This is used to steer the robot with the keyboard.
     */
    private void lowerDrawAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lowerDrawAreaMouseClicked
        lowerDrawArea.requestFocus();
    }//GEN-LAST:event_lowerDrawAreaMouseClicked

    /**
     * Deletes a specific item in the debug byte buffer.
     */
    private void deleteDebugDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDebugDataButtonActionPerformed
        if (debugDataList.getSelectedValue() != null) {
            // Item selected
            debugData.remove(debugDataList.getSelectedIndex());
            debugDataList.setListData(debugData);
            int lastIndex = debugDataList.getModel().getSize() - 1;
            if (lastIndex >= 0) {
                debugDataList.ensureIndexIsVisible(lastIndex);
            }
        }
    }//GEN-LAST:event_deleteDebugDataButtonActionPerformed

    /**
     * Clears the debug byte buffer.
     */
    private void deleteAllDebugDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllDebugDataButtonActionPerformed
        debugData.clear();
        debugDataList.setListData(debugData);
    }//GEN-LAST:event_deleteAllDebugDataButtonActionPerformed

    /**
     * Adds data to the debug byte buffer.
     */
    private void addDebugDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDebugDataButtonActionPerformed
        String name = dataParseButtonGroup.getSelection().getActionCommand();
        String data = debugDataTextField.getText();
        if (data == "") {
            writeDebugMessage("Ange data innan du lägger till den.");
            return;
        }
        
        switch (name) {
            case "B":
                // Add single byte
                debugData.add(Byte.parseByte(data, 2));
                break;
            case "F":
                // Add a float as four bytes
                Float f = Float.parseFloat(data);
                for (byte b : ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putFloat(f).array()) {
                    debugData.add(b);
                }
                break;
            case "I":
                // Add an integer as one byte
                Integer i = Integer.parseInt(data);
                debugData.add(ByteBuffer.allocate(4).putInt(i).array()[3]);
                break;
            case "S":
                // Add a string as bytes
                for (byte b : data.getBytes()) {
                    debugData.add(b);
                }
                break;
        }

        debugDataList.setListData(debugData);

        int lastIndex = debugDataList.getModel().getSize() - 1;
        if (lastIndex >= 0) {
            debugDataList.ensureIndexIsVisible(lastIndex);
        }
    }//GEN-LAST:event_addDebugDataButtonActionPerformed

    /**
     * Send the data in the debug byte buffer to the selected reciever.
     */
    private void sendDebugDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendDebugDataButtonActionPerformed
        String name = inOutButtonGroup.getSelection().getActionCommand();
        byte[] data;
        switch (name) {
            case "I":
                // Emulate data recieved from robot
                data = new byte[debugData.size() + 2];
                data[0] = (byte) debugTagTextField.getText().charAt(0);
                data[1] = (byte) debugData.size();
                for (int i = 0; i < debugData.size(); i++) {
                    data[i + 2] = debugData.elementAt(i);
                }
                messageBuffer.addFirst(data);
                decodeMessage();
                break;
            case "O":
                // Send data to robot
                data = new byte[debugData.size()];
                for (int i = 0; i < debugData.size(); i++) {
                    data[i] = debugData.elementAt(i);
                }
                sendData(debugTagTextField.getText().charAt(0), data);
                break;
        }
    }//GEN-LAST:event_sendDebugDataButtonActionPerformed

    /**
     * Clears the debug counter.
     */
    private void clearDebugButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDebugButtonActionPerformed
        debugTextArea.setText("");
        debugCallsTextField.setText("0");
    }//GEN-LAST:event_clearDebugButtonActionPerformed

    /**
     * Sets new parameters for displaying sensors in the upper and lower
     * draw windows.
     */
    private void sensorValuesUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorValuesUpdateButtonActionPerformed
        int s = Integer.parseInt(savedSensorValuesTextField.getText());
        int m = Integer.parseInt(medianSensorValuesTextField.getText());
        ((UpperPanel) upperDrawArea).setParameters(s, m);
        ((LowerPanel) lowerDrawArea).setParameters(s, m);
    }//GEN-LAST:event_sensorValuesUpdateButtonActionPerformed

    /**
     * Sends data to robot telling if status messages is to be sent to computer.
     */
    private void statusToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusToggleButtonActionPerformed
        byte data[] = new byte[1];
        if (statusToggleButton.isSelected()) {
            statusToggleButton.setText("På");
            data[0] = 1;
        } else {
            statusToggleButton.setText("Av");
            data[0] = 0;
        }
        sendData('T', data);
    }//GEN-LAST:event_statusToggleButtonActionPerformed

    /**
     * Sends data to robot setting it in auto/manual mode and in which algoritm.
     */
    private void sendAutoSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendAutoSettingsButtonActionPerformed
        byte data[] = new byte[1];
        if (autoButton.isSelected()) {
            if (autoLeftRadioButton.isSelected()) {
                data[0] = 1;
            } else {
                data[0] = 2;
            }
        } else {
            data[0] = 0;
        }
        if (sendData('A', data)) {
            writeMessage("Skickade inställningar");
        } else {
            writeMessage("Kunde inte skicka!");
        }
    }//GEN-LAST:event_sendAutoSettingsButtonActionPerformed

    /**
     * Connects a controller to the program.
     */
    private void connectControllerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectControllerButtonActionPerformed
        Controller c = (Controller) controllersComboBox.getSelectedItem();
        if (c != null) {
            controller = c;
            eventQueue = c.getEventQueue();
            chosenControllerLabel.setText(c.getName());
        }
    }//GEN-LAST:event_connectControllerButtonActionPerformed
    
    /**
     * Finds all controllers of type GAMEPAD connected to the computer.
     */
    private void searchControllersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchControllersButtonActionPerformed
        controllersComboBox.removeAllItems();
        Controller[] controllers = ControllerEnvironment.getDefaultEnvironment().getControllers();
        for (Controller c : controllers) {
            if (c.getType() == Controller.Type.GAMEPAD) {
                controllersComboBox.addItem(c);
            }
        }
    }//GEN-LAST:event_searchControllersButtonActionPerformed

    /**
     * Sends a message to the the robot.
     * It will be displayed on the LCD display.
     */
    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        String mess = messageTextField.getText();
        if (sendMessage(mess)) {
            writeMessage("Wrote: " + mess);
        } else {
            writeMessage("Kunde inte skicka");
        }
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    /**
     * Toggles connection on/off.
     */
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (connectButton.getText() == "Koppla ifrån") {
            try {
                writeMessage("Kopplar ifrån");
                comPort.purgePort(15); // I believe this will fix the PORT BUSY problem...
                comPort.closePort();
                writeMessage("Ifrånkopplad");
                connectButton.setText("Koppla upp");
            } catch (SerialPortException ex) {
                System.out.println(ex);
            }
        } else {
            writeMessage("Kopplar upp...");
            connect(comNameTextField.getText());
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * Toogles autonomous mode on/off.
     * The information is not sent to the robot until the
     * sendAutoSettings button is pressed.
     */
    private void autoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoButtonActionPerformed
        if (autoButton.isSelected()) {
            autoButton.setText("Autonomt läge (på)");
        } else {
            autoButton.setText("Autonomt läge (av)");
        }
    }//GEN-LAST:event_autoButtonActionPerformed

    /**
     * Saves the testing parameters in the parameters tab to a file.
     * The file is .txt and can be read and written outside this program.
     */
    private void saveParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveParametersButtonActionPerformed
        String path = MainWindow.class.getProtectionDomain().getCodeSource().getLocation().toString().substring(6);
        
        // This ensures that it works both from the IDE and standalone version.
        if(!path.endsWith("/")){
            path = path.substring(0, path.lastIndexOf('/') + 1);
        }
        
        // Create folder if it does not exist.
        File folder = new File(path, "Parametrar");
        folder.mkdir();

        String name = saveLoadParametersTextField.getText();
        if (name.equals("")) {
            writeMessage("Skriv ett namn innan du sparar!");
            return;
        }
        File file = new File(path + "Parametrar/", name + ".txt");
        PrintWriter pw = null;
        try {
            if (!file.createNewFile()) {
                writeMessage("Filen finns redan!");
                return;
            }

            pw = new PrintWriter(file);
            JTextField tf;
            for (java.awt.Component c : jPanel7.getComponents()) {
                if (c instanceof JTextField) {
                    tf = (JTextField) c;
                    if (tf.getName() != null) {
                        pw.println(tf.getName() + " : " + tf.getText());
                    }
                }
            }
            pw.close();
            writeMessage("Sparade parametrar i \"" + name + ".txt\"");
        } catch (IOException e) {
            writeMessage("Fel vid hantering av filen.");
            System.out.println(e);
            if (pw != null) {
                pw.close();
            }
        }
    }//GEN-LAST:event_saveParametersButtonActionPerformed

    /**
     * Loads the parameters from a file.
     */
    private void loadParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadParametersButtonActionPerformed
        String path = MainWindow.class.getProtectionDomain().getCodeSource().getLocation().toString().substring(6);
        if(!path.endsWith("/")){
            path = path.substring(0, path.lastIndexOf('/') + 1);
        }
        String name = saveLoadParametersTextField.getText();
        if (name.equals("")) {
            writeMessage("Skriv ett namn innan du laddar!");
            return;
        }
        File file = new File(path + "Parametrar/", name + ".txt");
        if (!file.exists()) {
            writeMessage("Filen finns inte!");
            return;
        }

        try {
            BufferedReader br = new BufferedReader(new FileReader(file));

            String line;
            JTextField tf;
            while ((line = br.readLine()) != null && line.length() != 0) {
                int colonIndex = line.indexOf(':');
                String fieldName = line.substring(0, colonIndex - 1);
                String value = line.substring(colonIndex + 2);

                for (java.awt.Component c : jPanel7.getComponents()) {
                    if (c instanceof JTextField) {
                        tf = (JTextField) c;
                        if (tf.getName() != null && tf.getName().equals(fieldName)) {
                            tf.setText(value);
                            break;
                        }
                    }
                }
            }

        } catch (IOException ex) {
            writeMessage("Fel vid läsning av filen!");
            System.out.println(ex);
        }
    }//GEN-LAST:event_loadParametersButtonActionPerformed

    /**
     * Sends the parameters to the robot. Uses three packages to reduce size.
     */
    private void sendParametrsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendParametrsButtonActionPerformed
        boolean correct = true;
        
        byte data[] = new byte[63];
        data[0] = (byte) 'N';
        addFloatToData(data, 1, Float.parseFloat(parameterKPTextField.getText()));
        data[5] = Byte.parseByte(parameterSpeedTextField.getText());
        addFloatToData(data, 6, Float.parseFloat(parameterEntryStepLeftTextField.getText()));
        addFloatToData(data, 10, Float.parseFloat(parameterEntryStepRightTextField.getText()));
        addFloatToData(data, 14, Float.parseFloat(parameterExitStepLeftTextField.getText()));
        addFloatToData(data, 18, Float.parseFloat(parameterExitStepRightTextField.getText()));
        addFloatToData(data, 22, Float.parseFloat(parameterOffsetLeftTextField.getText()));
        addFloatToData(data, 26, Float.parseFloat(parameterOffsetRightTextField.getText()));
        addFloatToData(data, 30, Float.parseFloat(parameterClimbLimitTextField.getText()));
        addFloatToData(data, 34, Float.parseFloat(parameterAngleScaleFactorTextField.getText()));
        addFloatToData(data, 38, Float.parseFloat(parameterMinFrontLengthTextField.getText()));
        data[42] = Byte.parseByte(parameterCorridorWidthTextField.getText());
        addFloatToData(data, 43, Float.parseFloat(parameterMaxDiffAngleTextField.getText()));
        addFloatToData(data, 47, Float.parseFloat(parameterMaxDistRotTextField.getText()));
        addFloatToData(data, 51, Float.parseFloat(parameterMaxDistDistTextField.getText()));
        addFloatToData(data, 55, Float.parseFloat(parameterAcceptableAngleTextField.getText()));
        addFloatToData(data, 59, Float.parseFloat(parameterAcceptableDistTextField.getText()));
        correct = correct && sendData('P', data);

        try {
            Thread.sleep(50);
        } catch (InterruptedException ex) {
        }
        
        data = new byte[34];
        data[0] = (byte) 'G';
        data[1] = Byte.parseByte(parameterIterationsTextField.getText());
        addInt16ToData(data, 2, Integer.parseInt(parameterServoSpeedTextField.getText()));
        addFloatToData(data, 4, Float.parseFloat(parameterStepLengthTextField.getText()));
        addInt16ToData(data, 8, Integer.parseInt(parameterIterationsDelayStartTextField.getText()));
        addInt16ToData(data, 10, Integer.parseInt(parameterIterationsDelayTextField.getText()));
        data[12] = Byte.parseByte(parameterStepHeightTextField.getText());
        data[13] = Byte.parseByte(parameterStepHeightClimbingTextField.getText());
        data[14] = Byte.parseByte(parameterMaxWalkTurnTextField.getText());
        data[15] = Byte.parseByte(parameterMinWalkTurnTextField.getText());
        addFloatToData(data, 16, Float.parseFloat(parameterTurnToleranceTextField.getText()));
        addFloatToData(data, 20, Float.parseFloat(parameterTurnScaleFactorTextField.getText()));
        addFloatToData(data, 24, Float.parseFloat(parameterTurnWalkScaleFactorTextField.getText()));
        addFloatToData(data, 28, Float.parseFloat(parameterMinRotationTextField.getText()));
        addInt16ToData(data, 32, Integer.parseInt(parameterAutoElevationTextField.getText()));
        correct = sendData('P', data) && correct;
        
        try {
            Thread.sleep(50);
        } catch (InterruptedException ex) {
        }
        
        data = new byte[30];
        data[0] = (byte) 'S';
        data[1] = Byte.parseByte(parameterSampleRateTextField.getText());
        addFloatToData(data, 2, Float.parseFloat(parameterOffsetSensor0TextField.getText()));
        addFloatToData(data, 6, Float.parseFloat(parameterOffsetSensor0TextField.getText()));
        addFloatToData(data, 10, Float.parseFloat(parameterOffsetSensor0TextField.getText()));
        addFloatToData(data, 14, Float.parseFloat(parameterOffsetSensor0TextField.getText()));
        addFloatToData(data, 18, Float.parseFloat(parameterOffsetSensor0TextField.getText()));
        addFloatToData(data, 22, Float.parseFloat(parameterOffsetSensor0TextField.getText()));
        addFloatToData(data, 26, Float.parseFloat(parameterOffsetSensor0TextField.getText()));
        correct = sendData('P', data) && correct;
        
        if(correct){
            writeMessage("Skickade parametrar");
        } else {
            writeMessage("Kunde inte skicka parametrar");
        }
    }//GEN-LAST:event_sendParametrsButtonActionPerformed

    /**
     * Adds a float to a byte array using LITTLE_ENDIAN format.
     * @param data The byte array to be written to.
     * @param index The index in the array for the first byte of the float.
     * @param f The value.
     */
    private void addFloatToData(byte data[], int index, float f) {
        for (byte b : ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putFloat(f).array()) {
            data[index] = b;
            index++;
        }
    }
    
    /**
     * Adds an integer to a byte array. Only unsigned values are supported.
     * @param data The array to be written to.
     * @param index The index of the first byte of the integer.
     * @param i The integer.
     */
    private void addInt16ToData(byte data[], int index, int i){
        data[index] = (byte) (i >> 8);
        data[index + 1] = (byte) (i & 0x00FF);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDebugDataButton;
    private javax.swing.JToggleButton autoButton;
    private javax.swing.ButtonGroup autoButtonGroup;
    private javax.swing.JRadioButton autoLeftRadioButton;
    private javax.swing.JRadioButton autoRightRadioButton;
    private javax.swing.JLabel chosenControllerLabel;
    private javax.swing.JButton clearDebugButton;
    private javax.swing.JTextField comNameTextField;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton connectControllerButton;
    private javax.swing.JComboBox controllersComboBox;
    private javax.swing.ButtonGroup dataParseButtonGroup;
    private javax.swing.JTextField debugCallsTextField;
    private javax.swing.JList debugDataList;
    private javax.swing.JTextField debugDataTextField;
    private javax.swing.JTextField debugTagTextField;
    private javax.swing.JTextArea debugTextArea;
    private javax.swing.JButton deleteAllDebugDataButton;
    private javax.swing.JButton deleteDebugDataButton;
    private javax.swing.border.EtchedBorder etchedBorder1;
    private javax.swing.ButtonGroup inOutButtonGroup;
    private javax.swing.JTextField irBackTextField;
    private javax.swing.JTextField irFrontTextField;
    private javax.swing.JTextField irLeftBackTextField;
    private javax.swing.JTextField irLeftFrontTextField;
    private javax.swing.JTextField irRightBackTextField;
    private javax.swing.JTextField irRightFrontTextField;
    private javax.swing.JTextField irVerticalTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton loadParametersButton;
    private javax.swing.JPanel lowerDrawArea;
    private javax.swing.JTextField medianSensorValuesTextField;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JTextField parameterAcceptableAngleTextField;
    private javax.swing.JTextField parameterAcceptableDistTextField;
    private javax.swing.JTextField parameterAngleScaleFactorTextField;
    private javax.swing.JTextField parameterAutoElevationTextField;
    private javax.swing.JTextField parameterClimbLimitTextField;
    private javax.swing.JTextField parameterCorridorWidthTextField;
    private javax.swing.JTextField parameterEntryStepLeftTextField;
    private javax.swing.JTextField parameterEntryStepRightTextField;
    private javax.swing.JTextField parameterExitStepLeftTextField;
    private javax.swing.JTextField parameterExitStepRightTextField;
    private javax.swing.JTextField parameterIterationsDelayStartTextField;
    private javax.swing.JTextField parameterIterationsDelayTextField;
    private javax.swing.JTextField parameterIterationsTextField;
    private javax.swing.JTextField parameterKPTextField;
    private javax.swing.JTextField parameterMaxDiffAngleTextField;
    private javax.swing.JTextField parameterMaxDistDistTextField;
    private javax.swing.JTextField parameterMaxDistRotTextField;
    private javax.swing.JTextField parameterMaxWalkTurnTextField;
    private javax.swing.JTextField parameterMinFrontLengthTextField;
    private javax.swing.JTextField parameterMinRotationTextField;
    private javax.swing.JTextField parameterMinWalkTurnTextField;
    private javax.swing.JTextField parameterOffsetLeftTextField;
    private javax.swing.JTextField parameterOffsetRightTextField;
    private javax.swing.JTextField parameterOffsetSensor0TextField;
    private javax.swing.JTextField parameterOffsetSensor1TextField;
    private javax.swing.JTextField parameterOffsetSensor2TextField;
    private javax.swing.JTextField parameterOffsetSensor3TextField;
    private javax.swing.JTextField parameterOffsetSensor4TextField;
    private javax.swing.JTextField parameterOffsetSensor5TextField;
    private javax.swing.JTextField parameterOffsetSensor6TextField;
    private javax.swing.JTextField parameterSampleRateTextField;
    private javax.swing.JTextField parameterServoSpeedTextField;
    private javax.swing.JTextField parameterSpeedTextField;
    private javax.swing.JTextField parameterStepHeightClimbingTextField;
    private javax.swing.JTextField parameterStepHeightTextField;
    private javax.swing.JTextField parameterStepLengthTextField;
    private javax.swing.JTextField parameterTurnScaleFactorTextField;
    private javax.swing.JTextField parameterTurnToleranceTextField;
    private javax.swing.JTextField parameterTurnWalkScaleFactorTextField;
    private javax.swing.JTextField saveLoadParametersTextField;
    private javax.swing.JButton saveParametersButton;
    private javax.swing.JTextField savedSensorValuesTextField;
    private javax.swing.JButton searchControllersButton;
    private javax.swing.JButton sendAutoSettingsButton;
    private javax.swing.JButton sendDebugDataButton;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JButton sendParametrsButton;
    private javax.swing.JButton sensorValuesUpdateButton;
    private javax.swing.JToggleButton statusToggleButton;
    private javax.swing.JTextField ultraSoundTextField;
    private javax.swing.JPanel upperDrawArea;
    // End of variables declaration//GEN-END:variables

    /* ------------------------------------------------
     Methods not generated by swing. */
    
    /**
     * Writes a message in the message window. Always starts on a new line.
     * @param message The string that will be written.
     */
    private void writeMessage(String message) {
        messageTextArea.append("\n" + message);
        if (!messageTextArea.hasFocus()) {
            messageTextArea.setCaretPosition(messageTextArea.getDocument().getLength());
        }
    }

    /**
     * Writes a message in the debug window. Always starts on a new line.
     * @param message The string to be written.
     */
    private void writeDebugMessage(String message) {
        debugTextArea.append(message + "\n");
        debugCallsTextField.setText(Integer.parseInt(debugCallsTextField.getText()) + 1 + "");
        if (!debugTextArea.hasFocus()) {
            debugTextArea.setCaretPosition(debugTextArea.getDocument().getLength());
        }
    }

    /**
     * Connects to serial port with specified name. Uses Baudrate 115200 Hz, 2
     * stop bits and no parity.
     *
     * @param portName Name of the serial port to be connected.
     */
    private void connect(String portName) {
        // Skapa ny COM-port
        comPort = new SerialPort(portName);
        try {
            //Open serial port
            comPort.openPort();
            //Set params. Also you can set params by this string: serialPort.setParams(9600, 8, 1, 0);
            comPort.setParams(SerialPort.BAUDRATE_115200,
                    SerialPort.DATABITS_8,
                    SerialPort.STOPBITS_2,
                    SerialPort.PARITY_NONE);
            comPort.addEventListener(this);
        } catch (SerialPortException ex) {
            writeMessage("Kunde inte koppla upp");
            System.out.println(ex);
            return;
        }

        connectButton.setText("Koppla ifrån");
        writeMessage("Uppkopplingen lyckades");
    }

    /**
     * Is called when data is recieved on the serial port.
     * Reads bytes until eighter a stop byte is read, or the function times out.
     * If read successfully, the data is stored in the message buffer to be
     * decoded later.
     * @param serialPortEvent 
     */
    public void serialEvent(SerialPortEvent serialPortEvent) {
        try {
            ArrayList<Byte> bytes = new ArrayList();
            byte[] indata = comPort.readBytes(1);

            if (indata[0] == 0x7E) {

                boolean ceo = false;
                byte b;
                byte b2;

                while (true) {
                    try {
                        indata = comPort.readBytes(1, 100);
                    } catch (SerialPortTimeoutException ex) {
                        System.out.println("Timeout");
                        return;
                    }

                    b = indata[0];

                    if (b == 0x7D) {
                        ceo = true;
                    } else if (b == 0x7E) {
                        // Säger om meddelandet är korrekt
                        boolean correct = true;

                        // Kontrollera rätt längd på paketet och CRC
                        if (bytes.size() < 4) {
                            correct = false;
                        } else if (bytes.size() != 4 + bytes.get(1)) {
                            correct = false;
                        }
                        /* else {
                         byte[] crcIndata = new byte[length + 2];
                         for(int i = 0; i < length + 2; i++){
                         crcIndata[i] = bytes.get(i);
                         }
                         int crc = crc16(length, crcIndata);
                         byte crc1 = (byte) (crc & 0x00FF);
                         byte crc2 = (byte) ((crc & 0xFF00) >> 8);
                         System.out.println("CRC: " + crc1 + ", " + crc2);
                         if (crc1 != bytes.get(length + 2) || crc2 != bytes.get(length + 3)){
                         correct = false;
                         }
                         }*/

                        /*for (byte byte1 : bytes) {
                         System.out.println(byte1);
                         }*/
                        if (correct) {
                            int length = bytes.get(1);
                            byte[] relevantData = new byte[length + 2];
                            for (int i = 0; i < length + 2; i++) {
                                relevantData[i] = bytes.get(i);
                            }
                            // Synkronisera skrivning och läsning till och från buffern
                            synchronized (lock) {
                                messageBuffer.addLast(relevantData);
                            }
                            return;
                        } else {
                            System.out.println("Felaktigt meddelande");
                            bytes.clear();
                        }
                    } else {
                        if (ceo) {
                            b2 = (byte) (b ^ 0x20);
                            ceo = false;
                            bytes.add(b2);
                        } else {
                            bytes.add(b);
                        }
                    }
                }
            }
        } catch (SerialPortException ex) {
            System.out.println(ex);
        }
    }

    /**
     * Cyclic redundancy check with 16 bits.
     * @param length Length of the message.
     * @param data The message
     * @return Byte one and two of the CRC16 as byte one and two of an int.
     */
    private int crc16(int length, byte[] data) {
        int crc = 0xFFFF;
        int poly = 0x8408;

        if (length == 0) {
            return 0;
        }
        for (int i = length - 1; i >= 0; i--) {
            byte b = data[i];
            for (int j = 0; j < 8; j++) {
                if ((crc & 0x0001) != ((b >> j) & 0x0001)) {
                    crc = (crc >> 1) ^ poly;
                } else {
                    crc >>= 1;
                }
            }
        }

        crc ^= 0xFFFF;
        int clone = crc;
        crc = (crc << 8) | ((clone >> 8) & 0x00FF);
        return crc;
    }

    /**
     * Sends a message string to the robot.
     * @param message The string to be sent.
     * @return True if successfull, false otherwise.
     */
    public boolean sendMessage(String message) {
        return sendData('M', message.getBytes());
    }

    /**
     * Sends a command telling the robot to move.
     * @param angle The direction the robot should walk. Direction 0 is straight ahead, and increase counter clockwice 4 degrees per unit. Maximum direction is 90.
     * @param rotation The rotation speed the robot should use. Rotation 0 is max left, rotation 100 is max right. Rotation 0 is no rotation.
     * @param speed The walking speed. From 0 to 100.
     * @return True is successfully sent, false otherwise.
     */
    public boolean sendSteerCommand(int angle, int rotation, int speed) {
        // 0 <= angle < 90
        // 0 <= speed <= 100
        // 0 <= rotation <= 100
        byte data[] = new byte[3];
        data[0] = (byte) angle;
        data[1] = (byte) rotation;
        data[2] = (byte) speed;
        
        return sendData('C', data);
    }

    /**
     * Sends command to the robot changing elevation.
     * @param up True is robot should raise, false if it should lower itself.
     * @return True is successfully sent, false otherwise.
     */
    public boolean sendElevationCommand(boolean up) {
        System.out.println("Elevation");
        byte data[] = new byte[1];
        if (up) {
            data[0] = 1;
        } else {
            data[0] = 0;
        }
        return sendData('E', data);
    }

    /**
     * Sends a sequense of bytes to the robot.
     * Used by all the other send methods.
     * @param tag The message tag. Tells the robot what to do with the data.
     * @param data The bytes to be sent.
     * @return True is successfully sent, false otherwise.
     */
    public boolean sendData(char tag, byte[] data) {
        if (comPort == null || !comPort.isOpened()) {
            writeMessage("Koppla upp till roboten först!");
            return false;
        }

        byte length = (byte) data.length;
        int crc = crc16(length, data);
        byte crc1 = (byte) ((crc & 0xFF00) >> 8);
        byte crc2 = (byte) (crc & 0x00FF);

        ArrayList<Byte> message = new ArrayList<>();
        message.add((byte) 0x7E);
        message.add((byte) tag);
        message.add(length);
        for (int i = 0; i < length; i++) {
            byte b = data[i];
            if (b == 0x7E || b == 0x7D) {
                // Escape octet
                message.add((byte) 0x7D);
                message.add((byte) (b ^ 0x20));
            } else {
                message.add(b);
            }
        }
        message.add(crc1);
        message.add(crc2);
        message.add((byte) 0x7E);

        byte[] doneMessage = new byte[message.size()];
        for (int i = 0; i < message.size(); i++) {
            doneMessage[i] = message.get(i);
        }
        try {
            comPort.writeBytes(doneMessage);
        } catch (SerialPortException ex) {
            System.out.println(ex);
            return false;
        }

        return true;
    }

    /**
     * The main loop, does the painting and updating of everything.
     */
    public void run() {
        while (true) {
            // Draw sensor values
            upperDrawArea.repaint();
            lowerDrawArea.repaint();

            // Check buffer
            if (hasMessage()) {
                decodeMessage();
            }

            // Handle controll, must poll often to
            // detect lost controller and awoid crash.
            if (controller != null) {
                if (controller.poll()) {
                    Event event = new Event();

                    while (eventQueue.getNextEvent(event)) {
                        if (!event.getComponent().isAnalog()) {
                            controllerButtonEvent(event);
                        }
                    }
                } else {
                    controllerTimer.cancel();
                    controller = null;
                    searchControllersButtonActionPerformed(null);
                    chosenControllerLabel.setText("Ingen");
                }
            }

            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                System.out.println(ex);
            }
        }
    }

    /**
     * Checks if message buffer has message.
     * @return True is there is a buffered message, false otherwise.
     */
    private boolean hasMessage() {
        return messageBuffer.size() > 0;
    }

    /**
     * Takes the first message in the message buffer and decodes it
     * by reading its tag, and handling the data depending on it.
     */
    private void decodeMessage() {
        byte[] message = messageBuffer.getFirst();
        // Maybe needs to be synchronized with serialEvent...
        synchronized (lock) {
            messageBuffer.removeFirst();
        }

        char tag = (char) message[0];
        tag = Character.toUpperCase(tag);
        int length = message[1];
        byte data[] = new byte[length];
        for (int i = 0; i < length; i++) {
            data[i] = message[i + 2];
        }

        switch (tag) {
            case 'A':
                autonomousUpdate(data);
                break;
            case 'M':
                messageRecieved(data);
                break;
            case 'S':
                sensorUpdate(data);
                break;
            case 'V':
                valueRecieved(data);
                break;
            default:
                debugMessageRecieved(tag, data);
                break;
        }
    }

    /**
     * Updates autonomous settings because it changed on the robot.
     * @param data The settings.
     */
    private void autonomousUpdate(byte[] data) {
        int a = data[0];
        if (a == 0) {
            autoRightRadioButton.setSelected(true);
            writeMessage("Autonomt högerläge aktiverat på roboten");
        } else {
            autoLeftRadioButton.setSelected(true);
            writeMessage("Autonomt vänsterläge aktiverat på roboten");
        }
        autoButton.setSelected(true);
    }

    /**
     * Decodes a message and displays it.
     * @param data The message.
     */
    private void messageRecieved(byte[] data) {
        String m = "";

        for (byte b : data) {
            m += (char) b;
        }

        writeMessage("Message: " + m);
    }

    /**
     * Decodes sensor values and updates the drawing areas and text fields.
     * @param data The values. Each value is a unsigned int16.
     */
    private void sensorUpdate(byte[] data) {
        for (int sensor = 0; sensor < data.length / 2; sensor++) {
            int msb = data[sensor * 2];
            if (msb < 0) {
                msb += 256;
            }
            int lsb = data[sensor * 2 + 1];
            if (lsb < 0) {
                lsb += 256;
            }
            int length = msb * 256 + lsb;
            
            switch (sensor) {
                case 0:
                    ((LowerPanel) lowerDrawArea).updatePoints(length / 10, SENSOR.LEFT_FRONT);
                    irLeftFrontTextField.setText("" + length);
                    break;
                case 1:
                    ((LowerPanel) lowerDrawArea).updatePoints(length / 10, SENSOR.RIGHT_FRONT);
                    irRightFrontTextField.setText("" + length);
                    break;
                case 2:
                    ((LowerPanel) lowerDrawArea).updatePoints(length / 10, SENSOR.LEFT_BACK);
                    irLeftBackTextField.setText("" + length);
                    break;
                case 3:
                    ((LowerPanel) lowerDrawArea).updatePoints(length / 10, SENSOR.RIGHT_BACK);
                    irRightBackTextField.setText("" + length);
                    break;
                case 4:
                    ((LowerPanel) lowerDrawArea).updatePoints(length / 10, SENSOR.FRONT);
                    irFrontTextField.setText("" + length);
                    break;
                case 5:
                    ((LowerPanel) lowerDrawArea).updatePoints(length / 10, SENSOR.BACK);
                    irBackTextField.setText("" + length);
                    break;
                case 6:
                    ((UpperPanel) upperDrawArea).updatePoints(length / 10, SENSOR.VERTICAL);
                    irVerticalTextField.setText("" + length);
                    break;
                case 7:
                    ((UpperPanel) upperDrawArea).updatePoints(length / 10, SENSOR.ULTRA_SOUND);
                    ultraSoundTextField.setText("" + length);
                    break;
                default:
                    return;
            }
        }
    }

    /**
     * Decodes a float value using LITTLE_ENDIAN format.
     * @param data The float as four bytes.
     */
    private void valueRecieved(byte[] data) {
        try {
            float f = ByteBuffer.wrap(data).order(ByteOrder.LITTLE_ENDIAN).getFloat();
            writeDebugMessage("Value: " + f);
        } catch (Exception e) {
            System.out.println("Fel vid float-avkodning");
        }
    }

    /**
     * Decodes an unknown message and displays it in the debug window.
     * This is called when the tag is not recogniced.
     * Prints the tag, the byte values and the message as a string.
     * @param tag The message tag.
     * @param data The data.
     */
    private void debugMessageRecieved(char tag, byte data[]) {
        writeDebugMessage("\n-- Okänt meddelande --");
        writeDebugMessage("Tag: " + tag);
        writeDebugMessage("Length: " + data.length);
        String m = "";
        for (byte b : data) {
            m += (char) b;
            writeDebugMessage("Byte: " + (int) b);
        }
        writeDebugMessage("String: " + m);
        writeDebugMessage("-- Slut --\n");
    }

    /**
     * Updates steering values from keyboard state.
     * The values are used in the timer controlling the steering commands.
     */
    private void keyUpdate() {
        int walk = 0;
        int strafe = 0;
        int rot = 0;

        if (keyUpPressed) {
            walk++;
        }
        if (keyDownPressed) {
            walk--;
        }
        if (keyRightPressed) {
            strafe++;
        }
        if (keyLeftPressed) {
            strafe--;
        }
        if (keyControlPressed) {
            rot--;
        }
        if (keyZeroPressed) {
            rot++;
        }

        int direction = (int) Math.toDegrees(Math.atan2(walk, strafe)) - 90;
        if (direction < 0) {
            direction += 360;
        }

        if (walk == 0 && strafe == 0) {
            arrowsAngle = -1;
        } else {
            arrowsAngle = direction;
        }

        rotationValue = rot * 50;
    }

    /**
     * Called when a button on the controller is pressed.
     * @param event 
     */
    private void controllerButtonEvent(Event event) {
        String name = event.getComponent().getName();
        if (name.equals("Styrknapp")) {
            dPadValue = event.getValue();
        } else if (event.getValue() == 1) {
            switch (name) {
                case "Knapp 4":
                    // Left shoulder, send lower
                    sendElevationCommand(true);
                    break;
                case "Knapp 5":
                    // Right shoulder, send raise
                    sendElevationCommand(false);
                    break;
            }
        }
    }

    /**
     * Called from timer. Handles controller input and keyboard values.
     * Sends steering command to robot.
     */
    private void robotSteeringUpdate() {
        float x = 0, y = 0, xrot = 0;

        if (controller != null) {
            for (Component c : controller.getComponents()) {
                switch (c.getName()) {
                    case "X-axeln":
                        x = c.getPollData();
                        break;
                    case "Y-axeln":
                        y = c.getPollData();
                        break;
                    case "X-rotation":
                        xrot = c.getPollData();
                        break;
                }
            }
        }

        int speed;
        float angle = 0;
        if (arrowsAngle >= 0) {
            angle = arrowsAngle;
            speed = 100;
        } else if (dPadValue != 0) {
            angle = 360 * (1 - dPadValue) + 90;
            if (angle >= 360) {
                angle -= 360;
            }
            speed = 100;
        } else {
            angle = (float) Math.toDegrees(Math.atan2(x, y)) - 180;
            if (angle < 0) {
                angle += 360;
            } else if (angle >= 360) {
                angle -= 360;
            }
            speed = (int) Math.round(Math.sqrt(x * x + y * y) * 100);
            if (speed < MIN_SPEED) {
                speed = 0;
            } else if (speed > 100) {
                speed = 100;
            }
        }

        int rotation;
        if (rotationValue != 0) {
            rotation = rotationValue;
        } else {
            rotation = Math.round(50 * xrot);
            if (Math.abs(rotation) < MIN_ROTATION) {
                rotation = 0;
            }
        }

        if (speed > 0 || Math.abs(rotation) > 0) {
            // Scale the values to be able to send them the the robot.
            // Must be carefull about signed/unsigned representations.
            angle /= 4;
            rotation += 50;
            System.out.println("Direction: " + (int) angle + ", rotation: " + rotation + ", speed: " + speed);
            sendSteerCommand((int) angle, rotation, speed);
        }
    }
}
