
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001182  00800100  00001850  000018e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001850  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000680  00801282  00801282  00002a66  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00002a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000db9  00000000  00000000  00005cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006a6d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000408  00000000  00000000  00006a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003af7  00000000  00000000  00006ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f24  00000000  00000000  0000a99b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002508  00000000  00000000  0000b8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c94  00000000  00000000  0000ddc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d8f  00000000  00000000  0000ea5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002610  00000000  00000000  0000f7eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000490  00000000  00000000  00011dfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	b9 c1       	rjmp	.+882    	; 0x378 <__vector_1>
       6:	00 00       	nop
       8:	e1 c1       	rjmp	.+962    	; 0x3cc <__vector_2>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	56 c2       	rjmp	.+1196   	; 0x4be <__vector_4>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	28 c2       	rjmp	.+1104   	; 0x486 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_20>
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	74 c4       	rjmp	.+2280   	; 0x952 <__vector_26>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	10 c2       	rjmp	.+1056   	; 0x4a2 <__vector_32>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e1       	ldi	r17, 0x12	; 18
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e5       	ldi	r30, 0x50	; 80
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 38       	cpi	r26, 0x82	; 130
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	29 e1       	ldi	r18, 0x19	; 25
      b4:	a2 e8       	ldi	r26, 0x82	; 130
      b6:	b2 e1       	ldi	r27, 0x12	; 18
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 30       	cpi	r26, 0x02	; 2
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ae d1       	rcall	.+860    	; 0x420 <main>
      c4:	0c 94 26 0c 	jmp	0x184c	; 0x184c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <turn_degrees>:
{
	return gStatus;
}

void turn_degrees(int16_t degrees)
{
      ca:	5f 92       	push	r5
      cc:	6f 92       	push	r6
      ce:	7f 92       	push	r7
      d0:	8f 92       	push	r8
      d2:	9f 92       	push	r9
      d4:	af 92       	push	r10
      d6:	bf 92       	push	r11
      d8:	cf 92       	push	r12
      da:	df 92       	push	r13
      dc:	ef 92       	push	r14
      de:	ff 92       	push	r15
      e0:	0f 93       	push	r16
      e2:	1f 93       	push	r17
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	ec 01       	movw	r28, r24
	if(degrees == 0)
      ea:	00 97       	sbiw	r24, 0x00	; 0
      ec:	09 f4       	brne	.+2      	; 0xf0 <turn_degrees+0x26>
      ee:	71 c0       	rjmp	.+226    	; 0x1d2 <turn_degrees+0x108>
	{
		return;
	}
	
	USART_RequestGyro();
      f0:	92 d6       	rcall	.+3364   	; 0xe16 <USART_RequestGyro>
	while(USART_GyroFlag() == 0)
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <turn_degrees+0x2e>
	{
		USART_DecodeRxFIFO();
      f4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <USART_DecodeRxFIFO>
	{
		return;
	}
	
	USART_RequestGyro();
	while(USART_GyroFlag() == 0)
      f8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <USART_GyroFlag>
      fc:	88 23       	and	r24, r24
      fe:	d1 f3       	breq	.-12     	; 0xf4 <turn_degrees+0x2a>
	{
		USART_DecodeRxFIFO();
	}
	
	float startDegree = USART_gyro_get_Y() * 180/PI;
     100:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <USART_gyro_get_Y>
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	44 e3       	ldi	r20, 0x34	; 52
     10a:	53 e4       	ldi	r21, 0x43	; 67
     10c:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     110:	2b ed       	ldi	r18, 0xDB	; 219
     112:	3f e0       	ldi	r19, 0x0F	; 15
     114:	49 e4       	ldi	r20, 0x49	; 73
     116:	50 e4       	ldi	r21, 0x40	; 64
     118:	0e 94 1d 0a 	call	0x143a	; 0x143a <__divsf3>
     11c:	56 2e       	mov	r5, r22
     11e:	67 2e       	mov	r6, r23
     120:	78 2e       	mov	r7, r24
     122:	09 2f       	mov	r16, r25
			USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		}
		
		while(USART_ready() == 0)
		{
			PORTA ^= (1 << PORTA1);
     124:	12 e0       	ldi	r17, 0x02	; 2
		}
		newDegree = USART_gyro_get_Y() * 180/PI;
		++steps;
		
		float turned = fmod(fabs(newDegree - startDegree), 180);
		if(turned >= fabs(degrees) - tolerance)
     126:	4e 01       	movw	r8, r28
     128:	aa 24       	eor	r10, r10
     12a:	97 fc       	sbrc	r9, 7
     12c:	a0 94       	com	r10
     12e:	ba 2c       	mov	r11, r10
	float tolerance = 0;
	uint8_t done = 0;
	
	do
	{
		if(degrees > 0)
     130:	1c 16       	cp	r1, r28
     132:	1d 06       	cpc	r1, r29
     134:	34 f4       	brge	.+12     	; 0x142 <turn_degrees+0x78>
		{
			USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	6e e1       	ldi	r22, 0x1E	; 30
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 af 09 	call	0x135e	; 0x135e <USART_send_command_parameters>
     140:	11 c0       	rjmp	.+34     	; 0x164 <turn_degrees+0x9a>
		} else {
			USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	66 e4       	ldi	r22, 0x46	; 70
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 af 09 	call	0x135e	; 0x135e <USART_send_command_parameters>
     14c:	0b c0       	rjmp	.+22     	; 0x164 <turn_degrees+0x9a>
		}
		
		while(USART_ready() == 0)
		{
			PORTA ^= (1 << PORTA1);
     14e:	82 b1       	in	r24, 0x02	; 2
     150:	81 27       	eor	r24, r17
     152:	82 b9       	out	0x02, r24	; 2
			USART_RequestGyro();
     154:	60 d6       	rcall	.+3264   	; 0xe16 <USART_RequestGyro>
			while(USART_GyroFlag() == 0)
     156:	02 c0       	rjmp	.+4      	; 0x15c <turn_degrees+0x92>
			{
				USART_DecodeRxFIFO();
     158:	0e 94 f6 08 	call	0x11ec	; 0x11ec <USART_DecodeRxFIFO>
		
		while(USART_ready() == 0)
		{
			PORTA ^= (1 << PORTA1);
			USART_RequestGyro();
			while(USART_GyroFlag() == 0)
     15c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <USART_GyroFlag>
     160:	88 23       	and	r24, r24
     162:	d1 f3       	breq	.-12     	; 0x158 <turn_degrees+0x8e>
			USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		} else {
			USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		}
		
		while(USART_ready() == 0)
     164:	0e 94 d6 08 	call	0x11ac	; 0x11ac <USART_ready>
     168:	88 23       	and	r24, r24
     16a:	89 f3       	breq	.-30     	; 0x14e <turn_degrees+0x84>
			while(USART_GyroFlag() == 0)
			{
				USART_DecodeRxFIFO();
			}
		}
		newDegree = USART_gyro_get_Y() * 180/PI;
     16c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <USART_gyro_get_Y>
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	44 e3       	ldi	r20, 0x34	; 52
     176:	53 e4       	ldi	r21, 0x43	; 67
     178:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     17c:	2b ed       	ldi	r18, 0xDB	; 219
     17e:	3f e0       	ldi	r19, 0x0F	; 15
     180:	49 e4       	ldi	r20, 0x49	; 73
     182:	50 e4       	ldi	r21, 0x40	; 64
     184:	0e 94 1d 0a 	call	0x143a	; 0x143a <__divsf3>
		++steps;
		
		float turned = fmod(fabs(newDegree - startDegree), 180);
     188:	25 2d       	mov	r18, r5
     18a:	36 2d       	mov	r19, r6
     18c:	47 2d       	mov	r20, r7
     18e:	50 2f       	mov	r21, r16
     190:	0e 94 b8 09 	call	0x1370	; 0x1370 <__subsf3>
     194:	9f 77       	andi	r25, 0x7F	; 127
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	44 e3       	ldi	r20, 0x34	; 52
     19c:	53 e4       	ldi	r21, 0x43	; 67
     19e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <fmod>
     1a2:	c6 2e       	mov	r12, r22
     1a4:	d7 2e       	mov	r13, r23
     1a6:	e8 2e       	mov	r14, r24
     1a8:	f9 2e       	mov	r15, r25
		if(turned >= fabs(degrees) - tolerance)
     1aa:	c5 01       	movw	r24, r10
     1ac:	b4 01       	movw	r22, r8
     1ae:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__floatsisf>
     1b2:	9b 01       	movw	r18, r22
     1b4:	ac 01       	movw	r20, r24
     1b6:	5f 77       	andi	r21, 0x7F	; 127
     1b8:	6c 2d       	mov	r22, r12
     1ba:	7d 2d       	mov	r23, r13
     1bc:	8e 2d       	mov	r24, r14
     1be:	9f 2d       	mov	r25, r15
     1c0:	0e 94 bf 0b 	call	0x177e	; 0x177e <__gesf2>
     1c4:	88 23       	and	r24, r24
     1c6:	0c f4       	brge	.+2      	; 0x1ca <turn_degrees+0x100>
     1c8:	b3 cf       	rjmp	.-154    	; 0x130 <turn_degrees+0x66>
		{
			done = 1;
			PORTA ^= (1 << PORTA0);
     1ca:	92 b1       	in	r25, 0x02	; 2
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	89 27       	eor	r24, r25
     1d0:	82 b9       	out	0x02, r24	; 2
		}
	} while (done == 0);
}
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	df 90       	pop	r13
     1e0:	cf 90       	pop	r12
     1e2:	bf 90       	pop	r11
     1e4:	af 90       	pop	r10
     1e6:	9f 90       	pop	r9
     1e8:	8f 90       	pop	r8
     1ea:	7f 90       	pop	r7
     1ec:	6f 90       	pop	r6
     1ee:	5f 90       	pop	r5
     1f0:	08 95       	ret

000001f2 <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     1f2:	bc 01       	movw	r22, r24
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__floatunsisf>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	4a e7       	ldi	r20, 0x7A	; 122
     202:	51 e4       	ldi	r21, 0x41	; 65
     204:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     208:	0e 94 85 0a 	call	0x150a	; 0x150a <__fixunssfsi>
	OCR1A = delay;
     20c:	70 93 89 00 	sts	0x0089, r23
     210:	60 93 88 00 	sts	0x0088, r22
     214:	08 95       	ret

00000216 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     216:	bc 01       	movw	r22, r24
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__floatunsisf>
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	4a e7       	ldi	r20, 0x7A	; 122
     226:	51 e4       	ldi	r21, 0x41	; 65
     228:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     22c:	0e 94 85 0a 	call	0x150a	; 0x150a <__fixunssfsi>
	OCR3A = delay;
     230:	70 93 99 00 	sts	0x0099, r23
     234:	60 93 98 00 	sts	0x0098, r22
     238:	08 95       	ret

0000023a <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     23a:	e1 e8       	ldi	r30, 0x81	; 129
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	85 60       	ori	r24, 0x05	; 5
     242:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     244:	e1 e9       	ldi	r30, 0x91	; 145
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	85 60       	ori	r24, 0x05	; 5
     24c:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     24e:	88 ee       	ldi	r24, 0xE8	; 232
     250:	93 e0       	ldi	r25, 0x03	; 3
     252:	cf df       	rcall	.-98     	; 0x1f2 <set_counter_1>
	set_counter_2(1000);
     254:	88 ee       	ldi	r24, 0xE8	; 232
     256:	93 e0       	ldi	r25, 0x03	; 3
     258:	de df       	rcall	.-68     	; 0x216 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     25a:	ef e6       	ldi	r30, 0x6F	; 111
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	82 60       	ori	r24, 0x02	; 2
     262:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     264:	e1 e7       	ldi	r30, 0x71	; 113
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	82 60       	ori	r24, 0x02	; 2
     26c:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     26e:	10 92 85 00 	sts	0x0085, r1
     272:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     276:	10 92 95 00 	sts	0x0095, r1
     27a:	10 92 94 00 	sts	0x0094, r1
     27e:	08 95       	ret

00000280 <FifoDataLength>:
     280:	fc 01       	movw	r30, r24
     282:	90 81       	ld	r25, Z
     284:	91 50       	subi	r25, 0x01	; 1
     286:	84 81       	ldd	r24, Z+4	; 0x04
     288:	22 81       	ldd	r18, Z+2	; 0x02
     28a:	82 1b       	sub	r24, r18
     28c:	89 23       	and	r24, r25
     28e:	08 95       	ret

00000290 <FifoWrite>:
     290:	1f 93       	push	r17
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	ec 01       	movw	r28, r24
     298:	16 2f       	mov	r17, r22
     29a:	f2 df       	rcall	.-28     	; 0x280 <FifoDataLength>
     29c:	28 81       	ld	r18, Y
     29e:	39 81       	ldd	r19, Y+1	; 0x01
     2a0:	21 50       	subi	r18, 0x01	; 1
     2a2:	31 09       	sbc	r19, r1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	82 17       	cp	r24, r18
     2a8:	93 07       	cpc	r25, r19
     2aa:	69 f0       	breq	.+26     	; 0x2c6 <FifoWrite+0x36>
     2ac:	8c 81       	ldd	r24, Y+4	; 0x04
     2ae:	9d 81       	ldd	r25, Y+5	; 0x05
     2b0:	fe 01       	movw	r30, r28
     2b2:	e8 0f       	add	r30, r24
     2b4:	f9 1f       	adc	r31, r25
     2b6:	16 83       	std	Z+6, r17	; 0x06
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	28 23       	and	r18, r24
     2bc:	39 23       	and	r19, r25
     2be:	3d 83       	std	Y+5, r19	; 0x05
     2c0:	2c 83       	std	Y+4, r18	; 0x04
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <FifoWrite+0x38>
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	08 95       	ret

000002d0 <FifoRead>:
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	ec 01       	movw	r28, r24
     2da:	8b 01       	movw	r16, r22
     2dc:	d1 df       	rcall	.-94     	; 0x280 <FifoDataLength>
     2de:	88 23       	and	r24, r24
     2e0:	a1 f0       	breq	.+40     	; 0x30a <FifoRead+0x3a>
     2e2:	ea 81       	ldd	r30, Y+2	; 0x02
     2e4:	fb 81       	ldd	r31, Y+3	; 0x03
     2e6:	ec 0f       	add	r30, r28
     2e8:	fd 1f       	adc	r31, r29
     2ea:	86 81       	ldd	r24, Z+6	; 0x06
     2ec:	f8 01       	movw	r30, r16
     2ee:	80 83       	st	Z, r24
     2f0:	28 81       	ld	r18, Y
     2f2:	39 81       	ldd	r19, Y+1	; 0x01
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	31 09       	sbc	r19, r1
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	9b 81       	ldd	r25, Y+3	; 0x03
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	82 23       	and	r24, r18
     300:	93 23       	and	r25, r19
     302:	9b 83       	std	Y+3, r25	; 0x03
     304:	8a 83       	std	Y+2, r24	; 0x02
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	01 c0       	rjmp	.+2      	; 0x30c <FifoRead+0x3c>
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	08 95       	ret

00000316 <navigation_set_algorithm>:
	}
	else
	{
		return 0;
	}
}
     316:	80 93 01 01 	sts	0x0101, r24
     31a:	08 95       	ret

0000031c <navigation_set_autonomous_walk>:
     31c:	80 93 00 01 	sts	0x0100, r24
     320:	08 95       	ret

00000322 <navigation_fill_buffer>:
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	c0 e0       	ldi	r28, 0x00	; 0
     32c:	d0 e0       	ldi	r29, 0x00	; 0
     32e:	00 91 82 12 	lds	r16, 0x1282
     332:	10 e0       	ldi	r17, 0x00	; 0
     334:	ce 01       	movw	r24, r28
     336:	d0 d2       	rcall	.+1440   	; 0x8d8 <TWI_get_sensor>
     338:	fe 01       	movw	r30, r28
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	ee 0f       	add	r30, r30
     340:	ff 1f       	adc	r31, r31
     342:	ec 0f       	add	r30, r28
     344:	fd 1f       	adc	r31, r29
     346:	0e 0f       	add	r16, r30
     348:	1f 1f       	adc	r17, r31
     34a:	f8 01       	movw	r30, r16
     34c:	ed 55       	subi	r30, 0x5D	; 93
     34e:	fd 4e       	sbci	r31, 0xED	; 237
     350:	80 83       	st	Z, r24
     352:	21 96       	adiw	r28, 0x01	; 1
     354:	c8 30       	cpi	r28, 0x08	; 8
     356:	d1 05       	cpc	r29, r1
     358:	51 f7       	brne	.-44     	; 0x32e <navigation_fill_buffer+0xc>
     35a:	80 91 82 12 	lds	r24, 0x1282
     35e:	84 30       	cpi	r24, 0x04	; 4
     360:	19 f4       	brne	.+6      	; 0x368 <navigation_fill_buffer+0x46>
     362:	10 92 82 12 	sts	0x1282, r1
     366:	03 c0       	rjmp	.+6      	; 0x36e <navigation_fill_buffer+0x4c>
     368:	8f 5f       	subi	r24, 0xFF	; 255
     36a:	80 93 82 12 	sts	0x1282, r24
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	08 95       	ret

00000378 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	0b b6       	in	r0, 0x3b	; 59
     384:	0f 92       	push	r0
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	ba df       	rcall	.-140    	; 0x316 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	bb df       	rcall	.-138    	; 0x31c <navigation_set_autonomous_walk>
}
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	bf 91       	pop	r27
     3ac:	af 91       	pop	r26
     3ae:	9f 91       	pop	r25
     3b0:	8f 91       	pop	r24
     3b2:	7f 91       	pop	r23
     3b4:	6f 91       	pop	r22
     3b6:	5f 91       	pop	r21
     3b8:	4f 91       	pop	r20
     3ba:	3f 91       	pop	r19
     3bc:	2f 91       	pop	r18
     3be:	0f 90       	pop	r0
     3c0:	0b be       	out	0x3b, r0	; 59
     3c2:	0f 90       	pop	r0
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	0f 90       	pop	r0
     3c8:	1f 90       	pop	r1
     3ca:	18 95       	reti

000003cc <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	0b b6       	in	r0, 0x3b	; 59
     3d8:	0f 92       	push	r0
     3da:	2f 93       	push	r18
     3dc:	3f 93       	push	r19
     3de:	4f 93       	push	r20
     3e0:	5f 93       	push	r21
     3e2:	6f 93       	push	r22
     3e4:	7f 93       	push	r23
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	af 93       	push	r26
     3ec:	bf 93       	push	r27
     3ee:	ef 93       	push	r30
     3f0:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 df       	rcall	.-224    	; 0x316 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	91 df       	rcall	.-222    	; 0x31c <navigation_set_autonomous_walk>
     3fa:	ff 91       	pop	r31
     3fc:	ef 91       	pop	r30
     3fe:	bf 91       	pop	r27
     400:	af 91       	pop	r26
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	7f 91       	pop	r23
     408:	6f 91       	pop	r22
     40a:	5f 91       	pop	r21
     40c:	4f 91       	pop	r20
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0b be       	out	0x3b, r0	; 59
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <main>:
#include "Navigation.h"
#include "autonomouswalk.h"

int main(void)
{
	USART_init();
     420:	23 d4       	rcall	.+2118   	; 0xc68 <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); // send messages from gang to the display, not the computer
     422:	80 e8       	ldi	r24, 0x80	; 128
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	2c d4       	rcall	.+2136   	; 0xc80 <USART_set_twi_message_destination>
	sei();
     428:	78 94       	sei
	TWI_init(ST_ADDRESS);
     42a:	80 e2       	ldi	r24, 0x20	; 32
     42c:	1e d1       	rcall	.+572    	; 0x66a <TWI_init>
	init_counters();
     42e:	05 df       	rcall	.-502    	; 0x23a <init_counters>
	
	//LED
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
     430:	81 b1       	in	r24, 0x01	; 1
     432:	83 60       	ori	r24, 0x03	; 3
     434:	81 b9       	out	0x01, r24	; 1
	DDRC |= (1<<PORTC6 | 1<<PORTC7);
     436:	87 b1       	in	r24, 0x07	; 7
     438:	80 6c       	ori	r24, 0xC0	; 192
     43a:	87 b9       	out	0x07, r24	; 7
	
	//Buttons
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //For emphasize
     43c:	81 b1       	in	r24, 0x01	; 1
     43e:	8f 73       	andi	r24, 0x3F	; 63
     440:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     442:	e8 e6       	ldi	r30, 0x68	; 104
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	81 60       	ori	r24, 0x01	; 1
     44a:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //mask for porta6 and porta7
     44c:	eb e6       	ldi	r30, 0x6B	; 107
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	80 6c       	ori	r24, 0xC0	; 192
     454:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     456:	2f ef       	ldi	r18, 0xFF	; 255
     458:	83 e2       	ldi	r24, 0x23	; 35
     45a:	94 ef       	ldi	r25, 0xF4	; 244
     45c:	21 50       	subi	r18, 0x01	; 1
     45e:	80 40       	sbci	r24, 0x00	; 0
     460:	90 40       	sbci	r25, 0x00	; 0
     462:	e1 f7       	brne	.-8      	; 0x45c <main+0x3c>
     464:	00 c0       	rjmp	.+0      	; 0x466 <main+0x46>
     466:	00 00       	nop
	
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	58 df       	rcall	.-336    	; 0x31c <navigation_set_autonomous_walk>
	
	while(1)
	{
		turn_degrees(90);
     46c:	8a e5       	ldi	r24, 0x5A	; 90
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	2c de       	rcall	.-936    	; 0xca <turn_degrees>
     472:	2f ef       	ldi	r18, 0xFF	; 255
     474:	8f e4       	ldi	r24, 0x4F	; 79
     476:	93 ec       	ldi	r25, 0xC3	; 195
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	80 40       	sbci	r24, 0x00	; 0
     47c:	90 40       	sbci	r25, 0x00	; 0
     47e:	e1 f7       	brne	.-8      	; 0x478 <main+0x58>
     480:	00 c0       	rjmp	.+0      	; 0x482 <main+0x62>
     482:	00 00       	nop
     484:	f3 cf       	rjmp	.-26     	; 0x46c <main+0x4c>

00000486 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
	TCNT1 = 0;
     490:	10 92 85 00 	sts	0x0085, r1
     494:	10 92 84 00 	sts	0x0084, r1
}
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
	//TWI_send_float(C_ADDRESS, (float)navigation_get_sensor(0));
	TCNT3 = 0;
     4ac:	10 92 95 00 	sts	0x0095, r1
     4b0:	10 92 94 00 	sts	0x0094, r1
}
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <__vector_4>:

//-------------------Buttons PinChange interrupt---------------------

ISR(PCINT0_vect)
{
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	0f 92       	push	r0
     4c6:	11 24       	eor	r1, r1
     4c8:	0b b6       	in	r0, 0x3b	; 59
     4ca:	0f 92       	push	r0
     4cc:	2f 93       	push	r18
     4ce:	3f 93       	push	r19
     4d0:	4f 93       	push	r20
     4d2:	5f 93       	push	r21
     4d4:	6f 93       	push	r22
     4d6:	7f 93       	push	r23
     4d8:	8f 93       	push	r24
     4da:	9f 93       	push	r25
     4dc:	af 93       	push	r26
     4de:	bf 93       	push	r27
     4e0:	ef 93       	push	r30
     4e2:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     4e4:	06 9b       	sbis	0x00, 6	; 0
     4e6:	09 c0       	rjmp	.+18     	; 0x4fa <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	18 df       	rcall	.-464    	; 0x31c <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	13 df       	rcall	.-474    	; 0x316 <navigation_set_algorithm>
		//test
		PORTC ^= (1<<PORTC6);
     4f0:	98 b1       	in	r25, 0x08	; 8
     4f2:	80 e4       	ldi	r24, 0x40	; 64
     4f4:	89 27       	eor	r24, r25
     4f6:	88 b9       	out	0x08, r24	; 8
     4f8:	09 c0       	rjmp	.+18     	; 0x50c <__vector_4+0x4e>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     4fa:	07 9b       	sbis	0x00, 7	; 0
     4fc:	07 c0       	rjmp	.+14     	; 0x50c <__vector_4+0x4e>
	{
		navigation_set_autonomous_walk(1);
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	0d df       	rcall	.-486    	; 0x31c <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 df       	rcall	.-496    	; 0x316 <navigation_set_algorithm>
		//test
		PORTC ^= (1<<PORTC7);
     506:	88 b1       	in	r24, 0x08	; 8
     508:	80 58       	subi	r24, 0x80	; 128
     50a:	88 b9       	out	0x08, r24	; 8
	}	
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0b be       	out	0x3b, r0	; 59
     528:	0f 90       	pop	r0
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	0f 90       	pop	r0
     52e:	1f 90       	pop	r1
     530:	18 95       	reti

00000532 <set_twi_reciever_enable>:
	
	//Do something with the message here... Send to display for now
	TWI_send_string_fixed_length(S_ADDRESS, msg, length);
	
	return 0;
}
     532:	85 e4       	ldi	r24, 0x45	; 69
     534:	80 93 bc 00 	sts	0x00BC, r24
     538:	08 95       	ret

0000053a <clear_int>:
     53a:	81 ec       	ldi	r24, 0xC1	; 193
     53c:	80 93 bc 00 	sts	0x00BC, r24
     540:	08 95       	ret

00000542 <start_bus>:
     542:	84 ea       	ldi	r24, 0xA4	; 164
     544:	80 93 bc 00 	sts	0x00BC, r24
     548:	08 95       	ret

0000054a <stop_bus>:
     54a:	85 ed       	ldi	r24, 0xD5	; 213
     54c:	80 93 bc 00 	sts	0x00BC, r24
     550:	08 95       	ret

00000552 <Error>:
     552:	80 91 b9 00 	lds	r24, 0x00B9
     556:	88 7f       	andi	r24, 0xF8	; 248
     558:	88 33       	cpi	r24, 0x38	; 56
     55a:	09 f0       	breq	.+2      	; 0x55e <Error+0xc>
     55c:	f6 cf       	rjmp	.-20     	; 0x54a <stop_bus>
     55e:	ed cf       	rjmp	.-38     	; 0x53a <clear_int>

00000560 <get_data>:
     560:	80 91 bb 00 	lds	r24, 0x00BB
     564:	08 95       	ret

00000566 <wait_for_bus>:
     566:	ec eb       	ldi	r30, 0xBC	; 188
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	88 23       	and	r24, r24
     56e:	ec f7       	brge	.-6      	; 0x56a <wait_for_bus+0x4>
     570:	08 95       	ret

00000572 <send_data_and_wait>:
     572:	80 93 bb 00 	sts	0x00BB, r24
     576:	84 e8       	ldi	r24, 0x84	; 132
     578:	80 93 bc 00 	sts	0x00BC, r24
     57c:	f4 cf       	rjmp	.-24     	; 0x566 <wait_for_bus>

0000057e <stop_twi>:
     57e:	10 92 de 13 	sts	0x13DE, r1
     582:	10 92 dd 13 	sts	0x13DD, r1
     586:	10 92 e8 13 	sts	0x13E8, r1
     58a:	10 92 e7 13 	sts	0x13E7, r1
     58e:	10 92 d3 13 	sts	0x13D3, r1
     592:	10 92 d2 13 	sts	0x13D2, r1
     596:	10 92 d8 13 	sts	0x13D8, r1
     59a:	10 92 d7 13 	sts	0x13D7, r1
     59e:	10 92 db 13 	sts	0x13DB, r1
     5a2:	10 92 da 13 	sts	0x13DA, r1
     5a6:	08 95       	ret

000005a8 <reset_TWI>:
     5a8:	ec eb       	ldi	r30, 0xBC	; 188
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	80 6c       	ori	r24, 0xC0	; 192
     5b0:	80 83       	st	Z, r24
     5b2:	08 95       	ret

000005b4 <get_control_settings_from_bus>:
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	c0 91 d7 13 	lds	r28, 0x13D7
     5bc:	d0 91 d8 13 	lds	r29, 0x13D8
     5c0:	cf df       	rcall	.-98     	; 0x560 <get_data>
     5c2:	cc 52       	subi	r28, 0x2C	; 44
     5c4:	dc 4e       	sbci	r29, 0xEC	; 236
     5c6:	88 83       	st	Y, r24
     5c8:	10 92 d8 13 	sts	0x13D8, r1
     5cc:	10 92 d7 13 	sts	0x13D7, r1
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <get_autonom_settings_from_bus>:
     5d6:	c4 df       	rcall	.-120    	; 0x560 <get_data>
     5d8:	80 93 d2 12 	sts	0x12D2, r24
     5dc:	08 95       	ret

000005de <get_char_from_bus>:
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	c0 91 d2 13 	lds	r28, 0x13D2
     5e6:	d0 91 d3 13 	lds	r29, 0x13D3
     5ea:	ba df       	rcall	.-140    	; 0x560 <get_data>
     5ec:	cd 52       	subi	r28, 0x2D	; 45
     5ee:	dd 4e       	sbci	r29, 0xED	; 237
     5f0:	88 83       	st	Y, r24
     5f2:	80 91 d2 13 	lds	r24, 0x13D2
     5f6:	90 91 d3 13 	lds	r25, 0x13D3
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	90 93 d3 13 	sts	0x13D3, r25
     600:	80 93 d2 13 	sts	0x13D2, r24
     604:	90 93 e3 13 	sts	0x13E3, r25
     608:	80 93 e2 13 	sts	0x13E2, r24
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <get_sensor_from_bus>:
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	c0 91 e7 13 	lds	r28, 0x13E7
     61a:	d0 91 e8 13 	lds	r29, 0x13E8
     61e:	c8 30       	cpi	r28, 0x08	; 8
     620:	d1 05       	cpc	r29, r1
     622:	99 f4       	brne	.+38     	; 0x64a <get_sensor_from_bus+0x38>
     624:	e9 ee       	ldi	r30, 0xE9	; 233
     626:	f3 e1       	ldi	r31, 0x13	; 19
     628:	a1 ef       	ldi	r26, 0xF1	; 241
     62a:	b3 e1       	ldi	r27, 0x13	; 19
     62c:	81 ef       	ldi	r24, 0xF1	; 241
     62e:	93 e1       	ldi	r25, 0x13	; 19
     630:	21 91       	ld	r18, Z+
     632:	2d 93       	st	X+, r18
     634:	e8 17       	cp	r30, r24
     636:	f9 07       	cpc	r31, r25
     638:	d9 f7       	brne	.-10     	; 0x630 <get_sensor_from_bus+0x1e>
     63a:	92 df       	rcall	.-220    	; 0x560 <get_data>
     63c:	80 93 e1 13 	sts	0x13E1, r24
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	80 93 88 12 	sts	0x1288, r24
     646:	6d de       	rcall	.-806    	; 0x322 <navigation_fill_buffer>
     648:	0d c0       	rjmp	.+26     	; 0x664 <get_sensor_from_bus+0x52>
     64a:	8a df       	rcall	.-236    	; 0x560 <get_data>
     64c:	c7 51       	subi	r28, 0x17	; 23
     64e:	dc 4e       	sbci	r29, 0xEC	; 236
     650:	88 83       	st	Y, r24
     652:	80 91 e7 13 	lds	r24, 0x13E7
     656:	90 91 e8 13 	lds	r25, 0x13E8
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	90 93 e8 13 	sts	0x13E8, r25
     660:	80 93 e7 13 	sts	0x13E7, r24
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <TWI_init>:
     66a:	80 93 d9 13 	sts	0x13D9, r24
     66e:	80 34       	cpi	r24, 0x40	; 64
     670:	79 f0       	breq	.+30     	; 0x690 <TWI_init+0x26>
     672:	80 38       	cpi	r24, 0x80	; 128
     674:	19 f0       	breq	.+6      	; 0x67c <TWI_init+0x12>
     676:	80 32       	cpi	r24, 0x20	; 32
     678:	d1 f4       	brne	.+52     	; 0x6ae <TWI_init+0x44>
     67a:	12 c0       	rjmp	.+36     	; 0x6a0 <TWI_init+0x36>
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	88 b9       	out	0x08, r24	; 8
     680:	58 df       	rcall	.-336    	; 0x532 <set_twi_reciever_enable>
     682:	8f e3       	ldi	r24, 0x3F	; 63
     684:	80 93 b8 00 	sts	0x00B8, r24
     688:	81 e8       	ldi	r24, 0x81	; 129
     68a:	80 93 ba 00 	sts	0x00BA, r24
     68e:	08 95       	ret
     690:	8f e3       	ldi	r24, 0x3F	; 63
     692:	80 93 b8 00 	sts	0x00B8, r24
     696:	4d df       	rcall	.-358    	; 0x532 <set_twi_reciever_enable>
     698:	80 e4       	ldi	r24, 0x40	; 64
     69a:	80 93 ba 00 	sts	0x00BA, r24
     69e:	08 95       	ret
     6a0:	8f e3       	ldi	r24, 0x3F	; 63
     6a2:	80 93 b8 00 	sts	0x00B8, r24
     6a6:	45 df       	rcall	.-374    	; 0x532 <set_twi_reciever_enable>
     6a8:	81 e2       	ldi	r24, 0x21	; 33
     6aa:	80 93 ba 00 	sts	0x00BA, r24
     6ae:	08 95       	ret

000006b0 <TWI_send_command>:
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	c8 2f       	mov	r28, r24
     6b8:	d6 2f       	mov	r29, r22
     6ba:	14 2f       	mov	r17, r20
     6bc:	42 df       	rcall	.-380    	; 0x542 <start_bus>
     6be:	53 df       	rcall	.-346    	; 0x566 <wait_for_bus>
     6c0:	90 91 b9 00 	lds	r25, 0x00B9
     6c4:	98 7f       	andi	r25, 0xF8	; 248
     6c6:	98 30       	cpi	r25, 0x08	; 8
     6c8:	19 f0       	breq	.+6      	; 0x6d0 <TWI_send_command+0x20>
     6ca:	43 df       	rcall	.-378    	; 0x552 <Error>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	34 c0       	rjmp	.+104    	; 0x738 <TWI_send_command+0x88>
     6d0:	80 e2       	ldi	r24, 0x20	; 32
     6d2:	4f df       	rcall	.-354    	; 0x572 <send_data_and_wait>
     6d4:	80 91 b9 00 	lds	r24, 0x00B9
     6d8:	88 7f       	andi	r24, 0xF8	; 248
     6da:	88 31       	cpi	r24, 0x18	; 24
     6dc:	19 f0       	breq	.+6      	; 0x6e4 <TWI_send_command+0x34>
     6de:	39 df       	rcall	.-398    	; 0x552 <Error>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	2a c0       	rjmp	.+84     	; 0x738 <TWI_send_command+0x88>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	45 df       	rcall	.-374    	; 0x572 <send_data_and_wait>
     6e8:	80 91 b9 00 	lds	r24, 0x00B9
     6ec:	88 7f       	andi	r24, 0xF8	; 248
     6ee:	88 32       	cpi	r24, 0x28	; 40
     6f0:	19 f0       	breq	.+6      	; 0x6f8 <TWI_send_command+0x48>
     6f2:	2f df       	rcall	.-418    	; 0x552 <Error>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	20 c0       	rjmp	.+64     	; 0x738 <TWI_send_command+0x88>
     6f8:	8c 2f       	mov	r24, r28
     6fa:	3b df       	rcall	.-394    	; 0x572 <send_data_and_wait>
     6fc:	80 91 b9 00 	lds	r24, 0x00B9
     700:	88 7f       	andi	r24, 0xF8	; 248
     702:	88 32       	cpi	r24, 0x28	; 40
     704:	19 f0       	breq	.+6      	; 0x70c <TWI_send_command+0x5c>
     706:	25 df       	rcall	.-438    	; 0x552 <Error>
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	16 c0       	rjmp	.+44     	; 0x738 <TWI_send_command+0x88>
     70c:	8d 2f       	mov	r24, r29
     70e:	31 df       	rcall	.-414    	; 0x572 <send_data_and_wait>
     710:	80 91 b9 00 	lds	r24, 0x00B9
     714:	88 7f       	andi	r24, 0xF8	; 248
     716:	88 32       	cpi	r24, 0x28	; 40
     718:	19 f0       	breq	.+6      	; 0x720 <TWI_send_command+0x70>
     71a:	1b df       	rcall	.-458    	; 0x552 <Error>
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0c c0       	rjmp	.+24     	; 0x738 <TWI_send_command+0x88>
     720:	81 2f       	mov	r24, r17
     722:	27 df       	rcall	.-434    	; 0x572 <send_data_and_wait>
     724:	80 91 b9 00 	lds	r24, 0x00B9
     728:	88 7f       	andi	r24, 0xF8	; 248
     72a:	88 32       	cpi	r24, 0x28	; 40
     72c:	19 f0       	breq	.+6      	; 0x734 <TWI_send_command+0x84>
     72e:	11 df       	rcall	.-478    	; 0x552 <Error>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	02 c0       	rjmp	.+4      	; 0x738 <TWI_send_command+0x88>
     734:	0a df       	rcall	.-492    	; 0x54a <stop_bus>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	08 95       	ret

00000740 <TWI_send_string>:
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	c8 2f       	mov	r28, r24
     74e:	e6 2e       	mov	r14, r22
     750:	f7 2e       	mov	r15, r23
     752:	f7 de       	rcall	.-530    	; 0x542 <start_bus>
     754:	08 df       	rcall	.-496    	; 0x566 <wait_for_bus>
     756:	90 91 b9 00 	lds	r25, 0x00B9
     75a:	98 7f       	andi	r25, 0xF8	; 248
     75c:	98 30       	cpi	r25, 0x08	; 8
     75e:	19 f0       	breq	.+6      	; 0x766 <TWI_send_string+0x26>
     760:	f8 de       	rcall	.-528    	; 0x552 <Error>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	2c c0       	rjmp	.+88     	; 0x7be <TWI_send_string+0x7e>
     766:	8c 2f       	mov	r24, r28
     768:	04 df       	rcall	.-504    	; 0x572 <send_data_and_wait>
     76a:	80 91 b9 00 	lds	r24, 0x00B9
     76e:	88 7f       	andi	r24, 0xF8	; 248
     770:	88 31       	cpi	r24, 0x18	; 24
     772:	19 f0       	breq	.+6      	; 0x77a <TWI_send_string+0x3a>
     774:	ee de       	rcall	.-548    	; 0x552 <Error>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	22 c0       	rjmp	.+68     	; 0x7be <TWI_send_string+0x7e>
     77a:	89 e1       	ldi	r24, 0x19	; 25
     77c:	fa de       	rcall	.-524    	; 0x572 <send_data_and_wait>
     77e:	80 91 b9 00 	lds	r24, 0x00B9
     782:	88 7f       	andi	r24, 0xF8	; 248
     784:	88 32       	cpi	r24, 0x28	; 40
     786:	29 f4       	brne	.+10     	; 0x792 <TWI_send_string+0x52>
     788:	0e 2d       	mov	r16, r14
     78a:	1f 2d       	mov	r17, r15
     78c:	c0 e0       	ldi	r28, 0x00	; 0
     78e:	d0 e0       	ldi	r29, 0x00	; 0
     790:	08 c0       	rjmp	.+16     	; 0x7a2 <TWI_send_string+0x62>
     792:	df de       	rcall	.-578    	; 0x552 <Error>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	13 c0       	rjmp	.+38     	; 0x7be <TWI_send_string+0x7e>
     798:	f8 01       	movw	r30, r16
     79a:	81 91       	ld	r24, Z+
     79c:	8f 01       	movw	r16, r30
     79e:	e9 de       	rcall	.-558    	; 0x572 <send_data_and_wait>
     7a0:	21 96       	adiw	r28, 0x01	; 1
     7a2:	ee 2d       	mov	r30, r14
     7a4:	ff 2d       	mov	r31, r15
     7a6:	df 01       	movw	r26, r30
     7a8:	0d 90       	ld	r0, X+
     7aa:	00 20       	and	r0, r0
     7ac:	e9 f7       	brne	.-6      	; 0x7a8 <TWI_send_string+0x68>
     7ae:	11 97       	sbiw	r26, 0x01	; 1
     7b0:	ae 1b       	sub	r26, r30
     7b2:	bf 0b       	sbc	r27, r31
     7b4:	ca 17       	cp	r28, r26
     7b6:	db 07       	cpc	r29, r27
     7b8:	78 f3       	brcs	.-34     	; 0x798 <TWI_send_string+0x58>
     7ba:	c7 de       	rcall	.-626    	; 0x54a <stop_bus>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	08 95       	ret

000007cc <TWI_send_string_fixed_length>:
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	c8 2f       	mov	r28, r24
     7da:	e6 2e       	mov	r14, r22
     7dc:	f7 2e       	mov	r15, r23
     7de:	8a 01       	movw	r16, r20
     7e0:	b0 de       	rcall	.-672    	; 0x542 <start_bus>
     7e2:	c1 de       	rcall	.-638    	; 0x566 <wait_for_bus>
     7e4:	90 91 b9 00 	lds	r25, 0x00B9
     7e8:	98 7f       	andi	r25, 0xF8	; 248
     7ea:	98 30       	cpi	r25, 0x08	; 8
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <TWI_send_string_fixed_length+0x28>
     7ee:	b1 de       	rcall	.-670    	; 0x552 <Error>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	23 c0       	rjmp	.+70     	; 0x83a <TWI_send_string_fixed_length+0x6e>
     7f4:	8c 2f       	mov	r24, r28
     7f6:	bd de       	rcall	.-646    	; 0x572 <send_data_and_wait>
     7f8:	80 91 b9 00 	lds	r24, 0x00B9
     7fc:	88 7f       	andi	r24, 0xF8	; 248
     7fe:	88 31       	cpi	r24, 0x18	; 24
     800:	19 f0       	breq	.+6      	; 0x808 <TWI_send_string_fixed_length+0x3c>
     802:	a7 de       	rcall	.-690    	; 0x552 <Error>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	19 c0       	rjmp	.+50     	; 0x83a <TWI_send_string_fixed_length+0x6e>
     808:	89 e1       	ldi	r24, 0x19	; 25
     80a:	b3 de       	rcall	.-666    	; 0x572 <send_data_and_wait>
     80c:	80 91 b9 00 	lds	r24, 0x00B9
     810:	88 7f       	andi	r24, 0xF8	; 248
     812:	88 32       	cpi	r24, 0x28	; 40
     814:	21 f4       	brne	.+8      	; 0x81e <TWI_send_string_fixed_length+0x52>
     816:	10 16       	cp	r1, r16
     818:	11 06       	cpc	r1, r17
     81a:	24 f0       	brlt	.+8      	; 0x824 <TWI_send_string_fixed_length+0x58>
     81c:	0c c0       	rjmp	.+24     	; 0x836 <TWI_send_string_fixed_length+0x6a>
     81e:	99 de       	rcall	.-718    	; 0x552 <Error>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0b c0       	rjmp	.+22     	; 0x83a <TWI_send_string_fixed_length+0x6e>
     824:	ce 2d       	mov	r28, r14
     826:	df 2d       	mov	r29, r15
     828:	0c 0f       	add	r16, r28
     82a:	1d 1f       	adc	r17, r29
     82c:	89 91       	ld	r24, Y+
     82e:	a1 de       	rcall	.-702    	; 0x572 <send_data_and_wait>
     830:	c0 17       	cp	r28, r16
     832:	d1 07       	cpc	r29, r17
     834:	d9 f7       	brne	.-10     	; 0x82c <TWI_send_string_fixed_length+0x60>
     836:	89 de       	rcall	.-750    	; 0x54a <stop_bus>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <TWI_send_float>:
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <TWI_send_float+0xe>
     856:	00 d0       	rcall	.+0      	; 0x858 <TWI_send_float+0x10>
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	18 2f       	mov	r17, r24
     85e:	49 83       	std	Y+1, r20	; 0x01
     860:	5a 83       	std	Y+2, r21	; 0x02
     862:	6b 83       	std	Y+3, r22	; 0x03
     864:	7c 83       	std	Y+4, r23	; 0x04
     866:	6d de       	rcall	.-806    	; 0x542 <start_bus>
     868:	7e de       	rcall	.-772    	; 0x566 <wait_for_bus>
     86a:	90 91 b9 00 	lds	r25, 0x00B9
     86e:	98 7f       	andi	r25, 0xF8	; 248
     870:	98 30       	cpi	r25, 0x08	; 8
     872:	19 f0       	breq	.+6      	; 0x87a <TWI_send_float+0x32>
     874:	6e de       	rcall	.-804    	; 0x552 <Error>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	24 c0       	rjmp	.+72     	; 0x8c2 <TWI_send_float+0x7a>
     87a:	81 2f       	mov	r24, r17
     87c:	7a de       	rcall	.-780    	; 0x572 <send_data_and_wait>
     87e:	80 91 b9 00 	lds	r24, 0x00B9
     882:	88 7f       	andi	r24, 0xF8	; 248
     884:	88 31       	cpi	r24, 0x18	; 24
     886:	19 f0       	breq	.+6      	; 0x88e <TWI_send_float+0x46>
     888:	64 de       	rcall	.-824    	; 0x552 <Error>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	1a c0       	rjmp	.+52     	; 0x8c2 <TWI_send_float+0x7a>
     88e:	86 e0       	ldi	r24, 0x06	; 6
     890:	70 de       	rcall	.-800    	; 0x572 <send_data_and_wait>
     892:	80 91 b9 00 	lds	r24, 0x00B9
     896:	88 7f       	andi	r24, 0xF8	; 248
     898:	88 32       	cpi	r24, 0x28	; 40
     89a:	19 f0       	breq	.+6      	; 0x8a2 <TWI_send_float+0x5a>
     89c:	5a de       	rcall	.-844    	; 0x552 <Error>
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	10 c0       	rjmp	.+32     	; 0x8c2 <TWI_send_float+0x7a>
     8a2:	8e 01       	movw	r16, r28
     8a4:	0f 5f       	subi	r16, 0xFF	; 255
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	7e 01       	movw	r14, r28
     8aa:	85 e0       	ldi	r24, 0x05	; 5
     8ac:	e8 0e       	add	r14, r24
     8ae:	f1 1c       	adc	r15, r1
     8b0:	f8 01       	movw	r30, r16
     8b2:	81 91       	ld	r24, Z+
     8b4:	8f 01       	movw	r16, r30
     8b6:	5d de       	rcall	.-838    	; 0x572 <send_data_and_wait>
     8b8:	0e 15       	cp	r16, r14
     8ba:	1f 05       	cpc	r17, r15
     8bc:	c9 f7       	brne	.-14     	; 0x8b0 <TWI_send_float+0x68>
     8be:	45 de       	rcall	.-886    	; 0x54a <stop_bus>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	08 95       	ret

000008d8 <TWI_get_sensor>:
     8d8:	8f 50       	subi	r24, 0x0F	; 15
     8da:	9c 4e       	sbci	r25, 0xEC	; 236
     8dc:	fc 01       	movw	r30, r24
     8de:	80 81       	ld	r24, Z
     8e0:	08 95       	ret

000008e2 <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	d8 2f       	mov	r29, r24
     8ec:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
     8ee:	60 91 e2 13 	lds	r22, 0x13E2
     8f2:	80 91 02 01 	lds	r24, 0x0102
     8f6:	90 91 03 01 	lds	r25, 0x0103
     8fa:	ca dc       	rcall	.-1644   	; 0x290 <FifoWrite>
     8fc:	81 11       	cpse	r24, r1
     8fe:	1f c0       	rjmp	.+62     	; 0x93e <write_to_TwiFIFO+0x5c>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
     900:	20 91 e2 13 	lds	r18, 0x13E2
     904:	30 91 e3 13 	lds	r19, 0x13E3
     908:	12 16       	cp	r1, r18
     90a:	13 06       	cpc	r1, r19
     90c:	d4 f4       	brge	.+52     	; 0x942 <write_to_TwiFIFO+0x60>
     90e:	0d 2f       	mov	r16, r29
     910:	1c 2f       	mov	r17, r28
     912:	c0 e0       	ldi	r28, 0x00	; 0
     914:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
     916:	f8 01       	movw	r30, r16
     918:	61 91       	ld	r22, Z+
     91a:	8f 01       	movw	r16, r30
     91c:	80 91 02 01 	lds	r24, 0x0102
     920:	90 91 03 01 	lds	r25, 0x0103
     924:	b5 dc       	rcall	.-1686   	; 0x290 <FifoWrite>
     926:	81 11       	cpse	r24, r1
     928:	0e c0       	rjmp	.+28     	; 0x946 <write_to_TwiFIFO+0x64>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
     92a:	21 96       	adiw	r28, 0x01	; 1
     92c:	80 91 e2 13 	lds	r24, 0x13E2
     930:	90 91 e3 13 	lds	r25, 0x13E3
     934:	c8 17       	cp	r28, r24
     936:	d9 07       	cpc	r29, r25
     938:	74 f3       	brlt	.-36     	; 0x916 <write_to_TwiFIFO+0x34>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	05 c0       	rjmp	.+10     	; 0x948 <write_to_TwiFIFO+0x66>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//Can't add length!?
		return 1;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	03 c0       	rjmp	.+6      	; 0x948 <write_to_TwiFIFO+0x66>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	01 c0       	rjmp	.+2      	; 0x948 <write_to_TwiFIFO+0x66>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//Can't add chars!?
			return 1;
     946:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <__vector_26>:

//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	0b b6       	in	r0, 0x3b	; 59
     95e:	0f 92       	push	r0
     960:	2f 93       	push	r18
     962:	3f 93       	push	r19
     964:	4f 93       	push	r20
     966:	5f 93       	push	r21
     968:	6f 93       	push	r22
     96a:	7f 93       	push	r23
     96c:	8f 93       	push	r24
     96e:	9f 93       	push	r25
     970:	af 93       	push	r26
     972:	bf 93       	push	r27
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
	switch(myAdress)
     97c:	80 91 d9 13 	lds	r24, 0x13D9
     980:	80 34       	cpi	r24, 0x40	; 64
     982:	09 f4       	brne	.+2      	; 0x986 <__vector_26+0x34>
     984:	87 c0       	rjmp	.+270    	; 0xa94 <__vector_26+0x142>
     986:	80 38       	cpi	r24, 0x80	; 128
     988:	21 f0       	breq	.+8      	; 0x992 <__vector_26+0x40>
     98a:	80 32       	cpi	r24, 0x20	; 32
     98c:	09 f0       	breq	.+2      	; 0x990 <__vector_26+0x3e>
     98e:	57 c1       	rjmp	.+686    	; 0xc3e <__vector_26+0x2ec>
     990:	c9 c0       	rjmp	.+402    	; 0xb24 <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
     992:	80 91 b9 00 	lds	r24, 0x00B9
     996:	88 7f       	andi	r24, 0xF8	; 248
     998:	80 36       	cpi	r24, 0x60	; 96
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__vector_26+0x54>
     99c:	80 91 b9 00 	lds	r24, 0x00B9
     9a0:	88 7f       	andi	r24, 0xF8	; 248
     9a2:	88 36       	cpi	r24, 0x68	; 104
     9a4:	21 f4       	brne	.+8      	; 0x9ae <__vector_26+0x5c>
			{
				instruction = 1;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	80 93 dc 13 	sts	0x13DC, r24
     9ac:	71 c0       	rjmp	.+226    	; 0xa90 <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
     9ae:	80 91 b9 00 	lds	r24, 0x00B9
     9b2:	88 7f       	andi	r24, 0xF8	; 248
     9b4:	80 37       	cpi	r24, 0x70	; 112
     9b6:	29 f0       	breq	.+10     	; 0x9c2 <__vector_26+0x70>
     9b8:	80 91 b9 00 	lds	r24, 0x00B9
     9bc:	88 7f       	andi	r24, 0xF8	; 248
     9be:	88 37       	cpi	r24, 0x78	; 120
     9c0:	39 f4       	brne	.+14     	; 0x9d0 <__vector_26+0x7e>
			{
				currentInstruction = 255;
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	90 93 e6 13 	sts	0x13E6, r25
     9ca:	80 93 e5 13 	sts	0x13E5, r24
     9ce:	60 c0       	rjmp	.+192    	; 0xa90 <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
     9d0:	80 91 b9 00 	lds	r24, 0x00B9
     9d4:	88 7f       	andi	r24, 0xF8	; 248
     9d6:	80 38       	cpi	r24, 0x80	; 128
     9d8:	b9 f5       	brne	.+110    	; 0xa48 <__vector_26+0xf6>
			{
				if(instruction)
     9da:	80 91 dc 13 	lds	r24, 0x13DC
     9de:	88 23       	and	r24, r24
     9e0:	41 f0       	breq	.+16     	; 0x9f2 <__vector_26+0xa0>
				{
					currentInstruction = get_data();
     9e2:	be dd       	rcall	.-1156   	; 0x560 <get_data>
     9e4:	80 93 e5 13 	sts	0x13E5, r24
     9e8:	10 92 e6 13 	sts	0x13E6, r1
					instruction = 0;
     9ec:	10 92 dc 13 	sts	0x13DC, r1
     9f0:	4f c0       	rjmp	.+158    	; 0xa90 <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
     9f2:	80 91 e5 13 	lds	r24, 0x13E5
     9f6:	90 91 e6 13 	lds	r25, 0x13E6
     9fa:	85 30       	cpi	r24, 0x05	; 5
     9fc:	91 05       	cpc	r25, r1
     9fe:	71 f0       	breq	.+28     	; 0xa1c <__vector_26+0xca>
     a00:	24 f4       	brge	.+8      	; 0xa0a <__vector_26+0xb8>
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	09 f0       	breq	.+2      	; 0xa08 <__vector_26+0xb6>
     a06:	44 c0       	rjmp	.+136    	; 0xa90 <__vector_26+0x13e>
     a08:	07 c0       	rjmp	.+14     	; 0xa18 <__vector_26+0xc6>
     a0a:	86 30       	cpi	r24, 0x06	; 6
     a0c:	91 05       	cpc	r25, r1
     a0e:	51 f0       	breq	.+20     	; 0xa24 <__vector_26+0xd2>
     a10:	49 97       	sbiw	r24, 0x19	; 25
     a12:	09 f0       	breq	.+2      	; 0xa16 <__vector_26+0xc4>
     a14:	3d c0       	rjmp	.+122    	; 0xa90 <__vector_26+0x13e>
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
     a18:	cd dd       	rcall	.-1126   	; 0x5b4 <get_control_settings_from_bus>
							break;
     a1a:	3a c0       	rjmp	.+116    	; 0xa90 <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
     a1c:	dc dd       	rcall	.-1096   	; 0x5d6 <get_autonom_settings_from_bus>
							break;
     a1e:	38 c0       	rjmp	.+112    	; 0xa90 <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
     a20:	de dd       	rcall	.-1092   	; 0x5de <get_char_from_bus>
							break;
     a22:	36 c0       	rjmp	.+108    	; 0xa90 <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
     a24:	c0 91 da 13 	lds	r28, 0x13DA
     a28:	d0 91 db 13 	lds	r29, 0x13DB
     a2c:	99 dd       	rcall	.-1230   	; 0x560 <get_data>
     a2e:	c5 53       	subi	r28, 0x35	; 53
     a30:	dd 4e       	sbci	r29, 0xED	; 237
     a32:	88 83       	st	Y, r24
	floatCounter += 1;
     a34:	80 91 da 13 	lds	r24, 0x13DA
     a38:	90 91 db 13 	lds	r25, 0x13DB
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	90 93 db 13 	sts	0x13DB, r25
     a42:	80 93 da 13 	sts	0x13DA, r24
     a46:	24 c0       	rjmp	.+72     	; 0xa90 <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
     a48:	80 91 b9 00 	lds	r24, 0x00B9
     a4c:	88 7f       	andi	r24, 0xF8	; 248
     a4e:	80 39       	cpi	r24, 0x90	; 144
     a50:	11 f4       	brne	.+4      	; 0xa56 <__vector_26+0x104>
			{
				get_sensor_from_bus();
     a52:	df dd       	rcall	.-1090   	; 0x612 <get_sensor_from_bus>
     a54:	1d c0       	rjmp	.+58     	; 0xa90 <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
     a56:	80 91 b9 00 	lds	r24, 0x00B9
     a5a:	88 7f       	andi	r24, 0xF8	; 248
     a5c:	80 3a       	cpi	r24, 0xA0	; 160
     a5e:	c1 f4       	brne	.+48     	; 0xa90 <__vector_26+0x13e>
			{
				stop_twi();
     a60:	8e dd       	rcall	.-1252   	; 0x57e <stop_twi>
				switch(currentInstruction)
     a62:	80 91 e5 13 	lds	r24, 0x13E5
     a66:	90 91 e6 13 	lds	r25, 0x13E6
     a6a:	85 30       	cpi	r24, 0x05	; 5
     a6c:	91 05       	cpc	r25, r1
     a6e:	49 f0       	breq	.+18     	; 0xa82 <__vector_26+0x130>
     a70:	89 31       	cpi	r24, 0x19	; 25
     a72:	91 05       	cpc	r25, r1
     a74:	51 f0       	breq	.+20     	; 0xa8a <__vector_26+0x138>
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	59 f4       	brne	.+22     	; 0xa90 <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 86 12 	sts	0x1286, r24
						break;
     a80:	07 c0       	rjmp	.+14     	; 0xa90 <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	80 93 85 12 	sts	0x1285, r24
						break;
     a88:	03 c0       	rjmp	.+6      	; 0xa90 <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
     a8a:	83 ed       	ldi	r24, 0xD3	; 211
     a8c:	92 e1       	ldi	r25, 0x12	; 18
     a8e:	29 df       	rcall	.-430    	; 0x8e2 <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
     a90:	8b dd       	rcall	.-1258   	; 0x5a8 <reset_TWI>
			break;
     a92:	d5 c0       	rjmp	.+426    	; 0xc3e <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
     a94:	80 91 b9 00 	lds	r24, 0x00B9
     a98:	88 7f       	andi	r24, 0xF8	; 248
     a9a:	80 36       	cpi	r24, 0x60	; 96
     a9c:	29 f0       	breq	.+10     	; 0xaa8 <__vector_26+0x156>
     a9e:	80 91 b9 00 	lds	r24, 0x00B9
     aa2:	88 7f       	andi	r24, 0xF8	; 248
     aa4:	88 36       	cpi	r24, 0x68	; 104
     aa6:	21 f4       	brne	.+8      	; 0xab0 <__vector_26+0x15e>
			{
				instruction = 1;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 dc 13 	sts	0x13DC, r24
     aae:	38 c0       	rjmp	.+112    	; 0xb20 <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
     ab0:	80 91 b9 00 	lds	r24, 0x00B9
     ab4:	88 7f       	andi	r24, 0xF8	; 248
     ab6:	80 38       	cpi	r24, 0x80	; 128
     ab8:	e1 f4       	brne	.+56     	; 0xaf2 <__vector_26+0x1a0>
			{
				if(instruction)
     aba:	80 91 dc 13 	lds	r24, 0x13DC
     abe:	88 23       	and	r24, r24
     ac0:	41 f0       	breq	.+16     	; 0xad2 <__vector_26+0x180>
				{
					currentInstruction = get_data();
     ac2:	4e dd       	rcall	.-1380   	; 0x560 <get_data>
     ac4:	80 93 e5 13 	sts	0x13E5, r24
     ac8:	10 92 e6 13 	sts	0x13E6, r1
					instruction = 0;
     acc:	10 92 dc 13 	sts	0x13DC, r1
     ad0:	27 c0       	rjmp	.+78     	; 0xb20 <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
     ad2:	80 91 e5 13 	lds	r24, 0x13E5
     ad6:	90 91 e6 13 	lds	r25, 0x13E6
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	91 05       	cpc	r25, r1
     ade:	19 f0       	breq	.+6      	; 0xae6 <__vector_26+0x194>
     ae0:	49 97       	sbiw	r24, 0x19	; 25
     ae2:	f1 f4       	brne	.+60     	; 0xb20 <__vector_26+0x1ce>
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
     ae6:	3c dd       	rcall	.-1416   	; 0x560 <get_data>
     ae8:	80 93 e4 13 	sts	0x13E4, r24
     aec:	19 c0       	rjmp	.+50     	; 0xb20 <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
     aee:	77 dd       	rcall	.-1298   	; 0x5de <get_char_from_bus>
							break;
     af0:	17 c0       	rjmp	.+46     	; 0xb20 <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
     af2:	80 91 b9 00 	lds	r24, 0x00B9
     af6:	88 7f       	andi	r24, 0xF8	; 248
     af8:	80 3a       	cpi	r24, 0xA0	; 160
     afa:	91 f4       	brne	.+36     	; 0xb20 <__vector_26+0x1ce>
			{
				stop_twi();
     afc:	40 dd       	rcall	.-1408   	; 0x57e <stop_twi>
				switch(currentInstruction)
     afe:	80 91 e5 13 	lds	r24, 0x13E5
     b02:	90 91 e6 13 	lds	r25, 0x13E6
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	91 05       	cpc	r25, r1
     b0a:	19 f0       	breq	.+6      	; 0xb12 <__vector_26+0x1c0>
     b0c:	49 97       	sbiw	r24, 0x19	; 25
     b0e:	41 f4       	brne	.+16     	; 0xb20 <__vector_26+0x1ce>
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 83 12 	sts	0x1283, r24
						break;
     b18:	03 c0       	rjmp	.+6      	; 0xb20 <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
     b1a:	83 ed       	ldi	r24, 0xD3	; 211
     b1c:	92 e1       	ldi	r25, 0x12	; 18
     b1e:	e1 de       	rcall	.-574    	; 0x8e2 <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
     b20:	43 dd       	rcall	.-1402   	; 0x5a8 <reset_TWI>
			break;
     b22:	8d c0       	rjmp	.+282    	; 0xc3e <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
     b24:	80 91 b9 00 	lds	r24, 0x00B9
     b28:	88 7f       	andi	r24, 0xF8	; 248
     b2a:	80 36       	cpi	r24, 0x60	; 96
     b2c:	29 f0       	breq	.+10     	; 0xb38 <__vector_26+0x1e6>
     b2e:	80 91 b9 00 	lds	r24, 0x00B9
     b32:	88 7f       	andi	r24, 0xF8	; 248
     b34:	88 36       	cpi	r24, 0x68	; 104
     b36:	21 f4       	brne	.+8      	; 0xb40 <__vector_26+0x1ee>
			{
				instruction = 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 dc 13 	sts	0x13DC, r24
     b3e:	7e c0       	rjmp	.+252    	; 0xc3c <__vector_26+0x2ea>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
     b40:	80 91 b9 00 	lds	r24, 0x00B9
     b44:	88 7f       	andi	r24, 0xF8	; 248
     b46:	80 37       	cpi	r24, 0x70	; 112
     b48:	29 f0       	breq	.+10     	; 0xb54 <__vector_26+0x202>
     b4a:	80 91 b9 00 	lds	r24, 0x00B9
     b4e:	88 7f       	andi	r24, 0xF8	; 248
     b50:	88 37       	cpi	r24, 0x78	; 120
     b52:	39 f4       	brne	.+14     	; 0xb62 <__vector_26+0x210>
			{
				currentInstruction = 255;
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	90 93 e6 13 	sts	0x13E6, r25
     b5c:	80 93 e5 13 	sts	0x13E5, r24
     b60:	6d c0       	rjmp	.+218    	; 0xc3c <__vector_26+0x2ea>
			}
			else if(CONTROL == DATA_SLAW)
     b62:	80 91 b9 00 	lds	r24, 0x00B9
     b66:	88 7f       	andi	r24, 0xF8	; 248
     b68:	80 38       	cpi	r24, 0x80	; 128
     b6a:	09 f0       	breq	.+2      	; 0xb6e <__vector_26+0x21c>
     b6c:	3a c0       	rjmp	.+116    	; 0xbe2 <__vector_26+0x290>
			{
				if(instruction)
     b6e:	80 91 dc 13 	lds	r24, 0x13DC
     b72:	88 23       	and	r24, r24
     b74:	41 f0       	breq	.+16     	; 0xb86 <__vector_26+0x234>
				{
					currentInstruction = get_data();
     b76:	f4 dc       	rcall	.-1560   	; 0x560 <get_data>
     b78:	80 93 e5 13 	sts	0x13E5, r24
     b7c:	10 92 e6 13 	sts	0x13E6, r1
					instruction = 0;
     b80:	10 92 dc 13 	sts	0x13DC, r1
     b84:	5b c0       	rjmp	.+182    	; 0xc3c <__vector_26+0x2ea>
				}
				else
				{
					switch(currentInstruction)
     b86:	80 91 e5 13 	lds	r24, 0x13E5
     b8a:	90 91 e6 13 	lds	r25, 0x13E6
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	19 f1       	breq	.+70     	; 0xbda <__vector_26+0x288>
     b94:	1c f4       	brge	.+6      	; 0xb9c <__vector_26+0x24a>
     b96:	89 2b       	or	r24, r25
     b98:	41 f0       	breq	.+16     	; 0xbaa <__vector_26+0x258>
     b9a:	50 c0       	rjmp	.+160    	; 0xc3c <__vector_26+0x2ea>
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	91 05       	cpc	r25, r1
     ba0:	b1 f0       	breq	.+44     	; 0xbce <__vector_26+0x27c>
     ba2:	05 97       	sbiw	r24, 0x05	; 5
     ba4:	09 f0       	breq	.+2      	; 0xba8 <__vector_26+0x256>
     ba6:	4a c0       	rjmp	.+148    	; 0xc3c <__vector_26+0x2ea>
     ba8:	1a c0       	rjmp	.+52     	; 0xbde <__vector_26+0x28c>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
     baa:	c0 91 dd 13 	lds	r28, 0x13DD
     bae:	d0 91 de 13 	lds	r29, 0x13DE
     bb2:	d6 dc       	rcall	.-1620   	; 0x560 <get_data>
     bb4:	c1 53       	subi	r28, 0x31	; 49
     bb6:	dd 4e       	sbci	r29, 0xED	; 237
     bb8:	88 83       	st	Y, r24
	currentCommand += 1;
     bba:	80 91 dd 13 	lds	r24, 0x13DD
     bbe:	90 91 de 13 	lds	r25, 0x13DE
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	90 93 de 13 	sts	0x13DE, r25
     bc8:	80 93 dd 13 	sts	0x13DD, r24
     bcc:	37 c0       	rjmp	.+110    	; 0xc3c <__vector_26+0x2ea>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation = get_data();
     bce:	c8 dc       	rcall	.-1648   	; 0x560 <get_data>
     bd0:	80 93 df 13 	sts	0x13DF, r24
     bd4:	10 92 e0 13 	sts	0x13E0, r1
     bd8:	31 c0       	rjmp	.+98     	; 0xc3c <__vector_26+0x2ea>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
     bda:	ec dc       	rcall	.-1576   	; 0x5b4 <get_control_settings_from_bus>
							break;
     bdc:	2f c0       	rjmp	.+94     	; 0xc3c <__vector_26+0x2ea>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
     bde:	fb dc       	rcall	.-1546   	; 0x5d6 <get_autonom_settings_from_bus>
							break;
     be0:	2d c0       	rjmp	.+90     	; 0xc3c <__vector_26+0x2ea>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
     be2:	80 91 b9 00 	lds	r24, 0x00B9
     be6:	88 7f       	andi	r24, 0xF8	; 248
     be8:	80 39       	cpi	r24, 0x90	; 144
     bea:	11 f4       	brne	.+4      	; 0xbf0 <__vector_26+0x29e>
			{
				get_sensor_from_bus();
     bec:	12 dd       	rcall	.-1500   	; 0x612 <get_sensor_from_bus>
     bee:	26 c0       	rjmp	.+76     	; 0xc3c <__vector_26+0x2ea>
			}
			else if (CONTROL == STOP)
     bf0:	80 91 b9 00 	lds	r24, 0x00B9
     bf4:	88 7f       	andi	r24, 0xF8	; 248
     bf6:	80 3a       	cpi	r24, 0xA0	; 160
     bf8:	09 f5       	brne	.+66     	; 0xc3c <__vector_26+0x2ea>
			{
				stop_twi();
     bfa:	c1 dc       	rcall	.-1662   	; 0x57e <stop_twi>
				switch(currentInstruction)
     bfc:	80 91 e5 13 	lds	r24, 0x13E5
     c00:	90 91 e6 13 	lds	r25, 0x13E6
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	91 05       	cpc	r25, r1
     c08:	91 f0       	breq	.+36     	; 0xc2e <__vector_26+0x2dc>
     c0a:	1c f4       	brge	.+6      	; 0xc12 <__vector_26+0x2c0>
     c0c:	89 2b       	or	r24, r25
     c0e:	39 f0       	breq	.+14     	; 0xc1e <__vector_26+0x2cc>
     c10:	15 c0       	rjmp	.+42     	; 0xc3c <__vector_26+0x2ea>
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	91 05       	cpc	r25, r1
     c16:	39 f0       	breq	.+14     	; 0xc26 <__vector_26+0x2d4>
     c18:	05 97       	sbiw	r24, 0x05	; 5
     c1a:	81 f4       	brne	.+32     	; 0xc3c <__vector_26+0x2ea>
     c1c:	0c c0       	rjmp	.+24     	; 0xc36 <__vector_26+0x2e4>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	80 93 87 12 	sts	0x1287, r24
						break;
     c24:	0b c0       	rjmp	.+22     	; 0xc3c <__vector_26+0x2ea>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 84 12 	sts	0x1284, r24
						break;
     c2c:	07 c0       	rjmp	.+14     	; 0xc3c <__vector_26+0x2ea>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 86 12 	sts	0x1286, r24
						break;
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <__vector_26+0x2ea>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 85 12 	sts	0x1285, r24
						break;
					}
				}
			}
			reset_TWI();
     c3c:	b5 dc       	rcall	.-1686   	; 0x5a8 <reset_TWI>
			break;
		}
	}
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0b be       	out	0x3b, r0	; 59
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	0f 90       	pop	r0
     c64:	1f 90       	pop	r1
     c66:	18 95       	reti

00000c68 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
     c68:	10 92 c5 00 	sts	0x00C5, r1
     c6c:	87 e0       	ldi	r24, 0x07	; 7
     c6e:	80 93 c4 00 	sts	0x00C4, r24
     c72:	88 e9       	ldi	r24, 0x98	; 152
     c74:	80 93 c1 00 	sts	0x00C1, r24
     c78:	86 e0       	ldi	r24, 0x06	; 6
     c7a:	80 93 c2 00 	sts	0x00C2, r24
     c7e:	08 95       	ret

00000c80 <USART_set_twi_message_destination>:
     c80:	90 93 14 11 	sts	0x1114, r25
     c84:	80 93 13 11 	sts	0x1113, r24
     c88:	08 95       	ret

00000c8a <USART_CheckTxReady>:
     c8a:	80 91 c0 00 	lds	r24, 0x00C0
     c8e:	80 72       	andi	r24, 0x20	; 32
     c90:	08 95       	ret

00000c92 <USART_WriteByte>:
     c92:	cf 93       	push	r28
     c94:	c8 2f       	mov	r28, r24
     c96:	f9 df       	rcall	.-14     	; 0xc8a <USART_CheckTxReady>
     c98:	88 23       	and	r24, r24
     c9a:	e9 f3       	breq	.-6      	; 0xc96 <USART_WriteByte+0x4>
     c9c:	c0 93 c6 00 	sts	0x00C6, r28
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <USART_crc16>:
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	66 23       	and	r22, r22
     cb6:	09 f4       	brne	.+2      	; 0xcba <USART_crc16+0x16>
     cb8:	3e c0       	rjmp	.+124    	; 0xd36 <USART_crc16+0x92>
     cba:	06 2f       	mov	r16, r22
     cbc:	10 e0       	ldi	r17, 0x00	; 0
     cbe:	4f ef       	ldi	r20, 0xFF	; 255
     cc0:	5f ef       	ldi	r21, 0xFF	; 255
     cc2:	ee ef       	ldi	r30, 0xFE	; 254
     cc4:	ff ef       	ldi	r31, 0xFF	; 255
     cc6:	c6 2e       	mov	r12, r22
     cc8:	d1 2c       	mov	r13, r1
     cca:	e8 2e       	mov	r14, r24
     ccc:	f1 2c       	mov	r15, r1
     cce:	c8 e0       	ldi	r28, 0x08	; 8
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
     cd2:	ee 3f       	cpi	r30, 0xFE	; 254
     cd4:	6f ef       	ldi	r22, 0xFF	; 255
     cd6:	f6 07       	cpc	r31, r22
     cd8:	19 f4       	brne	.+6      	; 0xce0 <USART_crc16+0x3c>
     cda:	8e 2d       	mov	r24, r14
     cdc:	9f 2d       	mov	r25, r15
     cde:	30 c0       	rjmp	.+96     	; 0xd40 <USART_crc16+0x9c>
     ce0:	ef 3f       	cpi	r30, 0xFF	; 255
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	f8 07       	cpc	r31, r24
     ce6:	19 f4       	brne	.+6      	; 0xcee <USART_crc16+0x4a>
     ce8:	8c 2d       	mov	r24, r12
     cea:	9d 2d       	mov	r25, r13
     cec:	29 c0       	rjmp	.+82     	; 0xd40 <USART_crc16+0x9c>
     cee:	df 01       	movw	r26, r30
     cf0:	a2 50       	subi	r26, 0x02	; 2
     cf2:	ba 4e       	sbci	r27, 0xEA	; 234
     cf4:	8c 91       	ld	r24, X
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	23 c0       	rjmp	.+70     	; 0xd40 <USART_crc16+0x9c>
     cfa:	ba 01       	movw	r22, r20
     cfc:	68 27       	eor	r22, r24
     cfe:	79 27       	eor	r23, r25
     d00:	60 ff       	sbrs	r22, 0
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <USART_crc16+0x6e>
     d04:	56 95       	lsr	r21
     d06:	47 95       	ror	r20
     d08:	68 e0       	ldi	r22, 0x08	; 8
     d0a:	46 27       	eor	r20, r22
     d0c:	64 e8       	ldi	r22, 0x84	; 132
     d0e:	56 27       	eor	r21, r22
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <USART_crc16+0x72>
     d12:	56 95       	lsr	r21
     d14:	47 95       	ror	r20
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	21 50       	subi	r18, 0x01	; 1
     d1c:	31 09       	sbc	r19, r1
     d1e:	69 f7       	brne	.-38     	; 0xcfa <USART_crc16+0x56>
     d20:	31 96       	adiw	r30, 0x01	; 1
     d22:	e0 17       	cp	r30, r16
     d24:	f1 07       	cpc	r31, r17
     d26:	a9 f6       	brne	.-86     	; 0xcd2 <USART_crc16+0x2e>
     d28:	9a 01       	movw	r18, r20
     d2a:	20 95       	com	r18
     d2c:	30 95       	com	r19
     d2e:	32 27       	eor	r19, r18
     d30:	23 27       	eor	r18, r19
     d32:	32 27       	eor	r19, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <USART_crc16+0x96>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	82 2f       	mov	r24, r18
     d3c:	93 2f       	mov	r25, r19
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <USART_crc16+0xa0>
     d40:	9e 01       	movw	r18, r28
     d42:	db cf       	rjmp	.-74     	; 0xcfa <USART_crc16+0x56>
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	08 95       	ret

00000d56 <USART_SendPacket>:
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	9e e7       	ldi	r25, 0x7E	; 126
     d60:	90 93 fd 16 	sts	0x16FD, r25
     d64:	80 93 fe 16 	sts	0x16FE, r24
     d68:	60 93 ff 16 	sts	0x16FF, r22
     d6c:	26 2f       	mov	r18, r22
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	12 16       	cp	r1, r18
     d72:	13 06       	cpc	r1, r19
     d74:	4c f5       	brge	.+82     	; 0xdc8 <USART_SendPacket+0x72>
     d76:	ee ef       	ldi	r30, 0xFE	; 254
     d78:	f5 e1       	ldi	r31, 0x15	; 21
     d7a:	03 e0       	ldi	r16, 0x03	; 3
     d7c:	10 e0       	ldi	r17, 0x00	; 0
     d7e:	c0 e0       	ldi	r28, 0x00	; 0
     d80:	d0 e0       	ldi	r29, 0x00	; 0
     d82:	7d e7       	ldi	r23, 0x7D	; 125
     d84:	50 e2       	ldi	r21, 0x20	; 32
     d86:	90 81       	ld	r25, Z
     d88:	49 2f       	mov	r20, r25
     d8a:	4d 57       	subi	r20, 0x7D	; 125
     d8c:	42 30       	cpi	r20, 0x02	; 2
     d8e:	80 f4       	brcc	.+32     	; 0xdb0 <USART_SendPacket+0x5a>
     d90:	d8 01       	movw	r26, r16
     d92:	a3 50       	subi	r26, 0x03	; 3
     d94:	b9 4e       	sbci	r27, 0xE9	; 233
     d96:	ac 0f       	add	r26, r28
     d98:	bd 1f       	adc	r27, r29
     d9a:	7c 93       	st	X, r23
     d9c:	0f 5f       	subi	r16, 0xFF	; 255
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	d8 01       	movw	r26, r16
     da2:	a3 50       	subi	r26, 0x03	; 3
     da4:	b9 4e       	sbci	r27, 0xE9	; 233
     da6:	ac 0f       	add	r26, r28
     da8:	bd 1f       	adc	r27, r29
     daa:	95 27       	eor	r25, r21
     dac:	9c 93       	st	X, r25
     dae:	06 c0       	rjmp	.+12     	; 0xdbc <USART_SendPacket+0x66>
     db0:	d8 01       	movw	r26, r16
     db2:	a3 50       	subi	r26, 0x03	; 3
     db4:	b9 4e       	sbci	r27, 0xE9	; 233
     db6:	ac 0f       	add	r26, r28
     db8:	bd 1f       	adc	r27, r29
     dba:	9c 93       	st	X, r25
     dbc:	21 96       	adiw	r28, 0x01	; 1
     dbe:	31 96       	adiw	r30, 0x01	; 1
     dc0:	c2 17       	cp	r28, r18
     dc2:	d3 07       	cpc	r29, r19
     dc4:	01 f7       	brne	.-64     	; 0xd86 <USART_SendPacket+0x30>
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <USART_SendPacket+0x7a>
     dc8:	03 e0       	ldi	r16, 0x03	; 3
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	c0 e0       	ldi	r28, 0x00	; 0
     dce:	d0 e0       	ldi	r29, 0x00	; 0
     dd0:	69 df       	rcall	.-302    	; 0xca4 <USART_crc16>
     dd2:	f8 01       	movw	r30, r16
     dd4:	e3 50       	subi	r30, 0x03	; 3
     dd6:	f9 4e       	sbci	r31, 0xE9	; 233
     dd8:	ec 0f       	add	r30, r28
     dda:	fd 1f       	adc	r31, r29
     ddc:	90 83       	st	Z, r25
     dde:	81 83       	std	Z+1, r24	; 0x01
     de0:	22 96       	adiw	r28, 0x02	; 2
     de2:	0c 0f       	add	r16, r28
     de4:	1d 1f       	adc	r17, r29
     de6:	f8 01       	movw	r30, r16
     de8:	e3 50       	subi	r30, 0x03	; 3
     dea:	f9 4e       	sbci	r31, 0xE9	; 233
     dec:	8e e7       	ldi	r24, 0x7E	; 126
     dee:	80 83       	st	Z, r24
     df0:	c8 01       	movw	r24, r16
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	18 16       	cp	r1, r24
     df6:	19 06       	cpc	r1, r25
     df8:	4c f4       	brge	.+18     	; 0xe0c <USART_SendPacket+0xb6>
     dfa:	cd ef       	ldi	r28, 0xFD	; 253
     dfc:	d6 e1       	ldi	r29, 0x16	; 22
     dfe:	02 50       	subi	r16, 0x02	; 2
     e00:	19 4e       	sbci	r17, 0xE9	; 233
     e02:	89 91       	ld	r24, Y+
     e04:	46 df       	rcall	.-372    	; 0xc92 <USART_WriteByte>
     e06:	c0 17       	cp	r28, r16
     e08:	d1 07       	cpc	r29, r17
     e0a:	d9 f7       	brne	.-10     	; 0xe02 <USART_SendPacket+0xac>
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	08 95       	ret

00000e16 <USART_RequestGyro>:
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	87 e4       	ldi	r24, 0x47	; 71
     e1a:	9d cf       	rjmp	.-198    	; 0xd56 <USART_SendPacket>

00000e1c <USART_DecodeMessageRxFIFO>:
     e1c:	8f 92       	push	r8
     e1e:	9f 92       	push	r9
     e20:	af 92       	push	r10
     e22:	bf 92       	push	r11
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	ad b6       	in	r10, 0x3d	; 61
     e3a:	be b6       	in	r11, 0x3e	; 62
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	80 91 0b 01 	lds	r24, 0x010B
     e44:	90 91 0c 01 	lds	r25, 0x010C
     e48:	43 da       	rcall	.-2938   	; 0x2d0 <FifoRead>
     e4a:	88 23       	and	r24, r24
     e4c:	31 f0       	breq	.+12     	; 0xe5a <USART_DecodeMessageRxFIFO+0x3e>
     e4e:	65 e1       	ldi	r22, 0x15	; 21
     e50:	71 e1       	ldi	r23, 0x11	; 17
     e52:	80 e4       	ldi	r24, 0x40	; 64
     e54:	75 dc       	rcall	.-1814   	; 0x740 <TWI_send_string>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	44 c0       	rjmp	.+136    	; 0xee2 <USART_DecodeMessageRxFIFO+0xc6>
     e5a:	c0 90 00 00 	lds	r12, 0x0000
     e5e:	d1 2c       	mov	r13, r1
     e60:	96 01       	movw	r18, r12
     e62:	21 50       	subi	r18, 0x01	; 1
     e64:	31 09       	sbc	r19, r1
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	c1 14       	cp	r12, r1
     e6c:	d1 04       	cpc	r13, r1
     e6e:	11 f0       	breq	.+4      	; 0xe74 <USART_DecodeMessageRxFIFO+0x58>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	82 0f       	add	r24, r18
     e76:	93 1f       	adc	r25, r19
     e78:	2d b7       	in	r18, 0x3d	; 61
     e7a:	3e b7       	in	r19, 0x3e	; 62
     e7c:	28 1b       	sub	r18, r24
     e7e:	39 0b       	sbc	r19, r25
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	3e bf       	out	0x3e, r19	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	2d bf       	out	0x3d, r18	; 61
     e8a:	8d b7       	in	r24, 0x3d	; 61
     e8c:	9e b7       	in	r25, 0x3e	; 62
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	88 2e       	mov	r8, r24
     e92:	99 2e       	mov	r9, r25
     e94:	1c 14       	cp	r1, r12
     e96:	1d 04       	cpc	r1, r13
     e98:	ec f4       	brge	.+58     	; 0xed4 <USART_DecodeMessageRxFIFO+0xb8>
     e9a:	e8 2e       	mov	r14, r24
     e9c:	f9 2e       	mov	r15, r25
     e9e:	00 e0       	ldi	r16, 0x00	; 0
     ea0:	10 e0       	ldi	r17, 0x00	; 0
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 91 0b 01 	lds	r24, 0x010B
     eaa:	90 91 0c 01 	lds	r25, 0x010C
     eae:	10 da       	rcall	.-3040   	; 0x2d0 <FifoRead>
     eb0:	88 23       	and	r24, r24
     eb2:	31 f0       	breq	.+12     	; 0xec0 <USART_DecodeMessageRxFIFO+0xa4>
     eb4:	67 e3       	ldi	r22, 0x37	; 55
     eb6:	71 e1       	ldi	r23, 0x11	; 17
     eb8:	80 e4       	ldi	r24, 0x40	; 64
     eba:	42 dc       	rcall	.-1916   	; 0x740 <TWI_send_string>
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	11 c0       	rjmp	.+34     	; 0xee2 <USART_DecodeMessageRxFIFO+0xc6>
     ec0:	80 91 00 00 	lds	r24, 0x0000
     ec4:	f7 01       	movw	r30, r14
     ec6:	81 93       	st	Z+, r24
     ec8:	7f 01       	movw	r14, r30
     eca:	0f 5f       	subi	r16, 0xFF	; 255
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
     ece:	0c 15       	cp	r16, r12
     ed0:	1d 05       	cpc	r17, r13
     ed2:	3c f3       	brlt	.-50     	; 0xea2 <USART_DecodeMessageRxFIFO+0x86>
     ed4:	a6 01       	movw	r20, r12
     ed6:	68 2d       	mov	r22, r8
     ed8:	79 2d       	mov	r23, r9
     eda:	80 91 13 11 	lds	r24, 0x1113
     ede:	76 dc       	rcall	.-1812   	; 0x7cc <TWI_send_string_fixed_length>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	be be       	out	0x3e, r11	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	ad be       	out	0x3d, r10	; 61
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	08 95       	ret

00000f06 <USART_DecodeGyroFIFO>:
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <USART_DecodeGyroFIFO+0x16>
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <USART_DecodeGyroFIFO+0x18>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	80 93 95 12 	sts	0x1295, r24
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	80 91 0b 01 	lds	r24, 0x010B
     f30:	90 91 0c 01 	lds	r25, 0x010C
     f34:	cd d9       	rcall	.-3174   	; 0x2d0 <FifoRead>
     f36:	88 23       	and	r24, r24
     f38:	31 f0       	breq	.+12     	; 0xf46 <USART_DecodeGyroFIFO+0x40>
     f3a:	6a e5       	ldi	r22, 0x5A	; 90
     f3c:	71 e1       	ldi	r23, 0x11	; 17
     f3e:	80 e4       	ldi	r24, 0x40	; 64
     f40:	ff db       	rcall	.-2050   	; 0x740 <TWI_send_string>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	68 c0       	rjmp	.+208    	; 0x1016 <USART_DecodeGyroFIFO+0x110>
     f46:	80 91 00 00 	lds	r24, 0x0000
     f4a:	8c 30       	cpi	r24, 0x0C	; 12
     f4c:	09 f4       	brne	.+2      	; 0xf50 <USART_DecodeGyroFIFO+0x4a>
     f4e:	52 c0       	rjmp	.+164    	; 0xff4 <USART_DecodeGyroFIFO+0xee>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	61 c0       	rjmp	.+194    	; 0x1016 <USART_DecodeGyroFIFO+0x110>
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	80 91 0b 01 	lds	r24, 0x010B
     f5c:	90 91 0c 01 	lds	r25, 0x010C
     f60:	b7 d9       	rcall	.-3218   	; 0x2d0 <FifoRead>
     f62:	88 23       	and	r24, r24
     f64:	31 f0       	breq	.+12     	; 0xf72 <USART_DecodeGyroFIFO+0x6c>
     f66:	69 e7       	ldi	r22, 0x79	; 121
     f68:	71 e1       	ldi	r23, 0x11	; 17
     f6a:	80 e4       	ldi	r24, 0x40	; 64
     f6c:	e9 db       	rcall	.-2094   	; 0x740 <TWI_send_string>
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	52 c0       	rjmp	.+164    	; 0x1016 <USART_DecodeGyroFIFO+0x110>
     f72:	80 91 00 00 	lds	r24, 0x0000
     f76:	f6 01       	movw	r30, r12
     f78:	81 93       	st	Z+, r24
     f7a:	6f 01       	movw	r12, r30
     f7c:	e0 17       	cp	r30, r16
     f7e:	f1 07       	cpc	r31, r17
     f80:	49 f7       	brne	.-46     	; 0xf54 <USART_DecodeGyroFIFO+0x4e>
     f82:	f1 e0       	ldi	r31, 0x01	; 1
     f84:	af 16       	cp	r10, r31
     f86:	b1 04       	cpc	r11, r1
     f88:	99 f0       	breq	.+38     	; 0xfb0 <USART_DecodeGyroFIFO+0xaa>
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	a8 16       	cp	r10, r24
     f8e:	b1 04       	cpc	r11, r1
     f90:	e1 f0       	breq	.+56     	; 0xfca <USART_DecodeGyroFIFO+0xc4>
     f92:	ab 28       	or	r10, r11
     f94:	39 f5       	brne	.+78     	; 0xfe4 <USART_DecodeGyroFIFO+0xde>
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	ab 81       	ldd	r26, Y+3	; 0x03
     f9c:	bc 81       	ldd	r27, Y+4	; 0x04
     f9e:	80 93 91 12 	sts	0x1291, r24
     fa2:	90 93 92 12 	sts	0x1292, r25
     fa6:	a0 93 93 12 	sts	0x1293, r26
     faa:	b0 93 94 12 	sts	0x1294, r27
     fae:	1e c0       	rjmp	.+60     	; 0xfec <USART_DecodeGyroFIFO+0xe6>
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	ab 81       	ldd	r26, Y+3	; 0x03
     fb6:	bc 81       	ldd	r27, Y+4	; 0x04
     fb8:	80 93 8d 12 	sts	0x128D, r24
     fbc:	90 93 8e 12 	sts	0x128E, r25
     fc0:	a0 93 8f 12 	sts	0x128F, r26
     fc4:	b0 93 90 12 	sts	0x1290, r27
     fc8:	11 c0       	rjmp	.+34     	; 0xfec <USART_DecodeGyroFIFO+0xe6>
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	ab 81       	ldd	r26, Y+3	; 0x03
     fd0:	bc 81       	ldd	r27, Y+4	; 0x04
     fd2:	80 93 89 12 	sts	0x1289, r24
     fd6:	90 93 8a 12 	sts	0x128A, r25
     fda:	a0 93 8b 12 	sts	0x128B, r26
     fde:	b0 93 8c 12 	sts	0x128C, r27
     fe2:	18 c0       	rjmp	.+48     	; 0x1014 <USART_DecodeGyroFIFO+0x10e>
     fe4:	e3 e0       	ldi	r30, 0x03	; 3
     fe6:	ee 16       	cp	r14, r30
     fe8:	f1 04       	cpc	r15, r1
     fea:	a4 f4       	brge	.+40     	; 0x1014 <USART_DecodeGyroFIFO+0x10e>
     fec:	ff ef       	ldi	r31, 0xFF	; 255
     fee:	ef 1a       	sub	r14, r31
     ff0:	ff 0a       	sbc	r15, r31
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <USART_DecodeGyroFIFO+0xfa>
     ff4:	ee 24       	eor	r14, r14
     ff6:	e3 94       	inc	r14
     ff8:	f1 2c       	mov	r15, r1
     ffa:	8e 01       	movw	r16, r28
     ffc:	0b 5f       	subi	r16, 0xFB	; 251
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	57 01       	movw	r10, r14
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	a8 1a       	sub	r10, r24
    1006:	b1 08       	sbc	r11, r1
    1008:	cc 24       	eor	r12, r12
    100a:	c3 94       	inc	r12
    100c:	d1 2c       	mov	r13, r1
    100e:	cc 0e       	add	r12, r28
    1010:	dd 1e       	adc	r13, r29
    1012:	a0 cf       	rjmp	.-192    	; 0xf54 <USART_DecodeGyroFIFO+0x4e>
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	bf 90       	pop	r11
    1030:	af 90       	pop	r10
    1032:	08 95       	ret

00001034 <USART_DecodeCommandRxFIFO>:
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	80 91 0b 01 	lds	r24, 0x010B
    1040:	90 91 0c 01 	lds	r25, 0x010C
    1044:	45 d9       	rcall	.-3446   	; 0x2d0 <FifoRead>
    1046:	88 23       	and	r24, r24
    1048:	31 f0       	breq	.+12     	; 0x1056 <USART_DecodeCommandRxFIFO+0x22>
    104a:	69 e9       	ldi	r22, 0x99	; 153
    104c:	71 e1       	ldi	r23, 0x11	; 17
    104e:	80 e4       	ldi	r24, 0x40	; 64
    1050:	77 db       	rcall	.-2322   	; 0x740 <TWI_send_string>
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	42 c0       	rjmp	.+132    	; 0x10da <USART_DecodeCommandRxFIFO+0xa6>
    1056:	80 91 00 00 	lds	r24, 0x0000
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	09 f0       	breq	.+2      	; 0x1060 <USART_DecodeCommandRxFIFO+0x2c>
    105e:	38 c0       	rjmp	.+112    	; 0x10d0 <USART_DecodeCommandRxFIFO+0x9c>
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	80 91 0b 01 	lds	r24, 0x010B
    1068:	90 91 0c 01 	lds	r25, 0x010C
    106c:	31 d9       	rcall	.-3486   	; 0x2d0 <FifoRead>
    106e:	88 23       	and	r24, r24
    1070:	31 f0       	breq	.+12     	; 0x107e <USART_DecodeCommandRxFIFO+0x4a>
    1072:	6b eb       	ldi	r22, 0xBB	; 187
    1074:	71 e1       	ldi	r23, 0x11	; 17
    1076:	80 e4       	ldi	r24, 0x40	; 64
    1078:	63 db       	rcall	.-2362   	; 0x740 <TWI_send_string>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	2e c0       	rjmp	.+92     	; 0x10da <USART_DecodeCommandRxFIFO+0xa6>
    107e:	c0 91 00 00 	lds	r28, 0x0000
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	80 91 0b 01 	lds	r24, 0x010B
    108a:	90 91 0c 01 	lds	r25, 0x010C
    108e:	20 d9       	rcall	.-3520   	; 0x2d0 <FifoRead>
    1090:	88 23       	and	r24, r24
    1092:	31 f0       	breq	.+12     	; 0x10a0 <USART_DecodeCommandRxFIFO+0x6c>
    1094:	63 ee       	ldi	r22, 0xE3	; 227
    1096:	71 e1       	ldi	r23, 0x11	; 17
    1098:	80 e4       	ldi	r24, 0x40	; 64
    109a:	52 db       	rcall	.-2396   	; 0x740 <TWI_send_string>
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	1d c0       	rjmp	.+58     	; 0x10da <USART_DecodeCommandRxFIFO+0xa6>
    10a0:	d0 91 00 00 	lds	r29, 0x0000
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	80 91 0b 01 	lds	r24, 0x010B
    10ac:	90 91 0c 01 	lds	r25, 0x010C
    10b0:	0f d9       	rcall	.-3554   	; 0x2d0 <FifoRead>
    10b2:	88 23       	and	r24, r24
    10b4:	31 f0       	breq	.+12     	; 0x10c2 <USART_DecodeCommandRxFIFO+0x8e>
    10b6:	6a e0       	ldi	r22, 0x0A	; 10
    10b8:	72 e1       	ldi	r23, 0x12	; 18
    10ba:	80 e4       	ldi	r24, 0x40	; 64
    10bc:	41 db       	rcall	.-2430   	; 0x740 <TWI_send_string>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	0c c0       	rjmp	.+24     	; 0x10da <USART_DecodeCommandRxFIFO+0xa6>
    10c2:	40 91 00 00 	lds	r20, 0x0000
    10c6:	6d 2f       	mov	r22, r29
    10c8:	8c 2f       	mov	r24, r28
    10ca:	f2 da       	rcall	.-2588   	; 0x6b0 <TWI_send_command>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <USART_DecodeCommandRxFIFO+0xa6>
    10d0:	6e e2       	ldi	r22, 0x2E	; 46
    10d2:	72 e1       	ldi	r23, 0x12	; 18
    10d4:	80 e4       	ldi	r24, 0x40	; 64
    10d6:	34 db       	rcall	.-2456   	; 0x740 <TWI_send_string>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <USART_DecodeValueFIFO>:
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <USART_DecodeValueFIFO+0xe>
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <USART_DecodeValueFIFO+0x10>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	80 91 0b 01 	lds	r24, 0x010B
    10fc:	90 91 0c 01 	lds	r25, 0x010C
    1100:	e7 d8       	rcall	.-3634   	; 0x2d0 <FifoRead>
    1102:	88 23       	and	r24, r24
    1104:	31 f0       	breq	.+12     	; 0x1112 <USART_DecodeValueFIFO+0x32>
    1106:	65 e5       	ldi	r22, 0x55	; 85
    1108:	72 e1       	ldi	r23, 0x12	; 18
    110a:	80 e4       	ldi	r24, 0x40	; 64
    110c:	19 db       	rcall	.-2510   	; 0x740 <TWI_send_string>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	28 c0       	rjmp	.+80     	; 0x1162 <USART_DecodeValueFIFO+0x82>
    1112:	80 91 00 00 	lds	r24, 0x0000
    1116:	84 30       	cpi	r24, 0x04	; 4
    1118:	09 f5       	brne	.+66     	; 0x115c <USART_DecodeValueFIFO+0x7c>
    111a:	8e 01       	movw	r16, r28
    111c:	0f 5f       	subi	r16, 0xFF	; 255
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	7e 01       	movw	r14, r28
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	e8 0e       	add	r14, r24
    1126:	f1 1c       	adc	r15, r1
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	80 91 0b 01 	lds	r24, 0x010B
    1130:	90 91 0c 01 	lds	r25, 0x010C
    1134:	cd d8       	rcall	.-3686   	; 0x2d0 <FifoRead>
    1136:	81 11       	cpse	r24, r1
    1138:	13 c0       	rjmp	.+38     	; 0x1160 <USART_DecodeValueFIFO+0x80>
    113a:	80 91 00 00 	lds	r24, 0x0000
    113e:	f8 01       	movw	r30, r16
    1140:	81 93       	st	Z+, r24
    1142:	8f 01       	movw	r16, r30
    1144:	ee 15       	cp	r30, r14
    1146:	ff 05       	cpc	r31, r15
    1148:	79 f7       	brne	.-34     	; 0x1128 <USART_DecodeValueFIFO+0x48>
    114a:	49 81       	ldd	r20, Y+1	; 0x01
    114c:	5a 81       	ldd	r21, Y+2	; 0x02
    114e:	6b 81       	ldd	r22, Y+3	; 0x03
    1150:	7c 81       	ldd	r23, Y+4	; 0x04
    1152:	80 91 13 11 	lds	r24, 0x1113
    1156:	78 db       	rcall	.-2320   	; 0x848 <TWI_send_float>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <USART_DecodeValueFIFO+0x82>
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <USART_DecodeValueFIFO+0x82>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	08 95       	ret

00001178 <USART_DecodeReadyFIFO>:
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	80 91 0b 01 	lds	r24, 0x010B
    1180:	90 91 0c 01 	lds	r25, 0x010C
    1184:	a5 d8       	rcall	.-3766   	; 0x2d0 <FifoRead>
    1186:	88 23       	and	r24, r24
    1188:	31 f0       	breq	.+12     	; 0x1196 <USART_DecodeReadyFIFO+0x1e>
    118a:	69 e9       	ldi	r22, 0x99	; 153
    118c:	71 e1       	ldi	r23, 0x11	; 17
    118e:	80 e4       	ldi	r24, 0x40	; 64
    1190:	d7 da       	rcall	.-2642   	; 0x740 <TWI_send_string>
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	08 95       	ret
    1196:	80 91 00 00 	lds	r24, 0x0000
    119a:	81 11       	cpse	r24, r1
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <USART_DecodeReadyFIFO+0x30>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 96 12 	sts	0x1296, r24
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	08 95       	ret
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	08 95       	ret

000011ac <USART_ready>:
    11ac:	80 91 96 12 	lds	r24, 0x1296
    11b0:	88 23       	and	r24, r24
    11b2:	21 f0       	breq	.+8      	; 0x11bc <USART_ready+0x10>
    11b4:	10 92 96 12 	sts	0x1296, r1
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	08 95       	ret
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	08 95       	ret

000011c0 <USART_GyroFlag>:
    11c0:	80 91 95 12 	lds	r24, 0x1295
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	19 f4       	brne	.+6      	; 0x11ce <USART_GyroFlag+0xe>
    11c8:	10 92 95 12 	sts	0x1295, r1
    11cc:	08 95       	ret
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	08 95       	ret

000011d2 <USART_gyro_get_Y>:
    11d2:	50 91 89 12 	lds	r21, 0x1289
    11d6:	40 91 8a 12 	lds	r20, 0x128A
    11da:	30 91 8b 12 	lds	r19, 0x128B
    11de:	20 91 8c 12 	lds	r18, 0x128C
    11e2:	65 2f       	mov	r22, r21
    11e4:	74 2f       	mov	r23, r20
    11e6:	83 2f       	mov	r24, r19
    11e8:	92 2f       	mov	r25, r18
    11ea:	08 95       	ret

000011ec <USART_DecodeRxFIFO>:
    11ec:	22 c0       	rjmp	.+68     	; 0x1232 <USART_DecodeRxFIFO+0x46>
    11ee:	80 91 00 00 	lds	r24, 0x0000
    11f2:	8d 34       	cpi	r24, 0x4D	; 77
    11f4:	59 f0       	breq	.+22     	; 0x120c <USART_DecodeRxFIFO+0x20>
    11f6:	28 f4       	brcc	.+10     	; 0x1202 <USART_DecodeRxFIFO+0x16>
    11f8:	83 34       	cpi	r24, 0x43	; 67
    11fa:	61 f0       	breq	.+24     	; 0x1214 <USART_DecodeRxFIFO+0x28>
    11fc:	87 34       	cpi	r24, 0x47	; 71
    11fe:	c9 f4       	brne	.+50     	; 0x1232 <USART_DecodeRxFIFO+0x46>
    1200:	15 c0       	rjmp	.+42     	; 0x122c <USART_DecodeRxFIFO+0x40>
    1202:	82 35       	cpi	r24, 0x52	; 82
    1204:	79 f0       	breq	.+30     	; 0x1224 <USART_DecodeRxFIFO+0x38>
    1206:	86 35       	cpi	r24, 0x56	; 86
    1208:	a1 f4       	brne	.+40     	; 0x1232 <USART_DecodeRxFIFO+0x46>
    120a:	08 c0       	rjmp	.+16     	; 0x121c <USART_DecodeRxFIFO+0x30>
    120c:	07 de       	rcall	.-1010   	; 0xe1c <USART_DecodeMessageRxFIFO>
    120e:	88 23       	and	r24, r24
    1210:	81 f0       	breq	.+32     	; 0x1232 <USART_DecodeRxFIFO+0x46>
    1212:	08 95       	ret
    1214:	0f df       	rcall	.-482    	; 0x1034 <USART_DecodeCommandRxFIFO>
    1216:	88 23       	and	r24, r24
    1218:	61 f0       	breq	.+24     	; 0x1232 <USART_DecodeRxFIFO+0x46>
    121a:	08 95       	ret
    121c:	61 df       	rcall	.-318    	; 0x10e0 <USART_DecodeValueFIFO>
    121e:	88 23       	and	r24, r24
    1220:	41 f0       	breq	.+16     	; 0x1232 <USART_DecodeRxFIFO+0x46>
    1222:	08 95       	ret
    1224:	a9 df       	rcall	.-174    	; 0x1178 <USART_DecodeReadyFIFO>
    1226:	88 23       	and	r24, r24
    1228:	21 f0       	breq	.+8      	; 0x1232 <USART_DecodeRxFIFO+0x46>
    122a:	08 95       	ret
    122c:	6c de       	rcall	.-808    	; 0xf06 <USART_DecodeGyroFIFO>
    122e:	81 11       	cpse	r24, r1
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <USART_DecodeRxFIFO+0x58>
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	80 91 0b 01 	lds	r24, 0x010B
    123a:	90 91 0c 01 	lds	r25, 0x010C
    123e:	48 d8       	rcall	.-3952   	; 0x2d0 <FifoRead>
    1240:	88 23       	and	r24, r24
    1242:	a9 f2       	breq	.-86     	; 0x11ee <USART_DecodeRxFIFO+0x2>
    1244:	08 95       	ret

00001246 <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	0b b6       	in	r0, 0x3b	; 59
    1252:	0f 92       	push	r0
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ef 93       	push	r30
    1276:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1278:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    127c:	2e 37       	cpi	r18, 0x7E	; 126
    127e:	09 f0       	breq	.+2      	; 0x1282 <__vector_20+0x3c>
    1280:	3f c0       	rjmp	.+126    	; 0x1300 <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1282:	80 91 99 12 	lds	r24, 0x1299
    1286:	90 91 9a 12 	lds	r25, 0x129A
    128a:	84 30       	cpi	r24, 0x04	; 4
    128c:	91 05       	cpc	r25, r1
    128e:	40 f4       	brcc	.+16     	; 0x12a0 <__vector_20+0x5a>
    1290:	20 91 fa 13 	lds	r18, 0x13FA
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	2c 5f       	subi	r18, 0xFC	; 252
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	82 17       	cp	r24, r18
    129c:	93 07       	cpc	r25, r19
    129e:	59 f5       	brne	.+86     	; 0x12f6 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    12a0:	80 91 97 12 	lds	r24, 0x1297
    12a4:	90 91 98 12 	lds	r25, 0x1298
    12a8:	89 2b       	or	r24, r25
    12aa:	21 f0       	breq	.+8      	; 0x12b4 <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    12ac:	10 92 98 12 	sts	0x1298, r1
    12b0:	10 92 97 12 	sts	0x1297, r1
    12b4:	09 ef       	ldi	r16, 0xF9	; 249
    12b6:	13 e1       	ldi	r17, 0x13	; 19
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    12b8:	c0 e0       	ldi	r28, 0x00	; 0
    12ba:	d0 e0       	ldi	r29, 0x00	; 0
    12bc:	0f 2e       	mov	r0, r31
    12be:	fa ef       	ldi	r31, 0xFA	; 250
    12c0:	ef 2e       	mov	r14, r31
    12c2:	f3 e1       	ldi	r31, 0x13	; 19
    12c4:	ff 2e       	mov	r15, r31
    12c6:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    12c8:	f8 01       	movw	r30, r16
    12ca:	61 91       	ld	r22, Z+
    12cc:	8f 01       	movw	r16, r30
    12ce:	80 91 0b 01 	lds	r24, 0x010B
    12d2:	90 91 0c 01 	lds	r25, 0x010C
    12d6:	0e 94 48 01 	call	0x290	; 0x290 <FifoWrite>
    12da:	88 23       	and	r24, r24
    12dc:	21 f0       	breq	.+8      	; 0x12e6 <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    12de:	65 e7       	ldi	r22, 0x75	; 117
    12e0:	72 e1       	ldi	r23, 0x12	; 18
    12e2:	80 e4       	ldi	r24, 0x40	; 64
    12e4:	2d da       	rcall	.-2982   	; 0x740 <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	f7 01       	movw	r30, r14
    12ea:	80 81       	ld	r24, Z
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 96       	adiw	r24, 0x02	; 2
    12f0:	c8 17       	cp	r28, r24
    12f2:	d9 07       	cpc	r29, r25
    12f4:	4c f3       	brlt	.-46     	; 0x12c8 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    12f6:	10 92 9a 12 	sts	0x129A, r1
    12fa:	10 92 99 12 	sts	0x1299, r1
    12fe:	16 c0       	rjmp	.+44     	; 0x132c <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1300:	2d 37       	cpi	r18, 0x7D	; 125
    1302:	39 f4       	brne	.+14     	; 0x1312 <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	90 93 98 12 	sts	0x1298, r25
    130c:	80 93 97 12 	sts	0x1297, r24
    1310:	0d c0       	rjmp	.+26     	; 0x132c <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1312:	80 91 99 12 	lds	r24, 0x1299
    1316:	90 91 9a 12 	lds	r25, 0x129A
    131a:	fc 01       	movw	r30, r24
    131c:	e7 50       	subi	r30, 0x07	; 7
    131e:	fc 4e       	sbci	r31, 0xEC	; 236
    1320:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	90 93 9a 12 	sts	0x129A, r25
    1328:	80 93 99 12 	sts	0x1299, r24
	}
	
	
}
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	0f 90       	pop	r0
    1352:	0b be       	out	0x3b, r0	; 59
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    135e:	80 93 fe 15 	sts	0x15FE, r24
	gTxPayload[1] = rotation;
    1362:	60 93 ff 15 	sts	0x15FF, r22
	gTxPayload[2] = speed;
    1366:	40 93 00 16 	sts	0x1600, r20
	
	
	USART_SendPacket('C', 3);
    136a:	63 e0       	ldi	r22, 0x03	; 3
    136c:	83 e4       	ldi	r24, 0x43	; 67
    136e:	f3 cc       	rjmp	.-1562   	; 0xd56 <USART_SendPacket>

00001370 <__subsf3>:
    1370:	50 58       	subi	r21, 0x80	; 128

00001372 <__addsf3>:
    1372:	bb 27       	eor	r27, r27
    1374:	aa 27       	eor	r26, r26
    1376:	0e d0       	rcall	.+28     	; 0x1394 <__addsf3x>
    1378:	c8 c1       	rjmp	.+912    	; 0x170a <__fp_round>
    137a:	b9 d1       	rcall	.+882    	; 0x16ee <__fp_pscA>
    137c:	30 f0       	brcs	.+12     	; 0x138a <__addsf3+0x18>
    137e:	be d1       	rcall	.+892    	; 0x16fc <__fp_pscB>
    1380:	20 f0       	brcs	.+8      	; 0x138a <__addsf3+0x18>
    1382:	31 f4       	brne	.+12     	; 0x1390 <__addsf3+0x1e>
    1384:	9f 3f       	cpi	r25, 0xFF	; 255
    1386:	11 f4       	brne	.+4      	; 0x138c <__addsf3+0x1a>
    1388:	1e f4       	brtc	.+6      	; 0x1390 <__addsf3+0x1e>
    138a:	ae c1       	rjmp	.+860    	; 0x16e8 <__fp_nan>
    138c:	0e f4       	brtc	.+2      	; 0x1390 <__addsf3+0x1e>
    138e:	e0 95       	com	r30
    1390:	e7 fb       	bst	r30, 7
    1392:	96 c1       	rjmp	.+812    	; 0x16c0 <__fp_inf>

00001394 <__addsf3x>:
    1394:	e9 2f       	mov	r30, r25
    1396:	ca d1       	rcall	.+916    	; 0x172c <__fp_split3>
    1398:	80 f3       	brcs	.-32     	; 0x137a <__addsf3+0x8>
    139a:	ba 17       	cp	r27, r26
    139c:	62 07       	cpc	r22, r18
    139e:	73 07       	cpc	r23, r19
    13a0:	84 07       	cpc	r24, r20
    13a2:	95 07       	cpc	r25, r21
    13a4:	18 f0       	brcs	.+6      	; 0x13ac <__addsf3x+0x18>
    13a6:	71 f4       	brne	.+28     	; 0x13c4 <__addsf3x+0x30>
    13a8:	9e f5       	brtc	.+102    	; 0x1410 <__addsf3x+0x7c>
    13aa:	e2 c1       	rjmp	.+964    	; 0x1770 <__fp_zero>
    13ac:	0e f4       	brtc	.+2      	; 0x13b0 <__addsf3x+0x1c>
    13ae:	e0 95       	com	r30
    13b0:	0b 2e       	mov	r0, r27
    13b2:	ba 2f       	mov	r27, r26
    13b4:	a0 2d       	mov	r26, r0
    13b6:	0b 01       	movw	r0, r22
    13b8:	b9 01       	movw	r22, r18
    13ba:	90 01       	movw	r18, r0
    13bc:	0c 01       	movw	r0, r24
    13be:	ca 01       	movw	r24, r20
    13c0:	a0 01       	movw	r20, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	ff 27       	eor	r31, r31
    13c6:	59 1b       	sub	r21, r25
    13c8:	99 f0       	breq	.+38     	; 0x13f0 <__addsf3x+0x5c>
    13ca:	59 3f       	cpi	r21, 0xF9	; 249
    13cc:	50 f4       	brcc	.+20     	; 0x13e2 <__addsf3x+0x4e>
    13ce:	50 3e       	cpi	r21, 0xE0	; 224
    13d0:	68 f1       	brcs	.+90     	; 0x142c <__addsf3x+0x98>
    13d2:	1a 16       	cp	r1, r26
    13d4:	f0 40       	sbci	r31, 0x00	; 0
    13d6:	a2 2f       	mov	r26, r18
    13d8:	23 2f       	mov	r18, r19
    13da:	34 2f       	mov	r19, r20
    13dc:	44 27       	eor	r20, r20
    13de:	58 5f       	subi	r21, 0xF8	; 248
    13e0:	f3 cf       	rjmp	.-26     	; 0x13c8 <__addsf3x+0x34>
    13e2:	46 95       	lsr	r20
    13e4:	37 95       	ror	r19
    13e6:	27 95       	ror	r18
    13e8:	a7 95       	ror	r26
    13ea:	f0 40       	sbci	r31, 0x00	; 0
    13ec:	53 95       	inc	r21
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__addsf3x+0x4e>
    13f0:	7e f4       	brtc	.+30     	; 0x1410 <__addsf3x+0x7c>
    13f2:	1f 16       	cp	r1, r31
    13f4:	ba 0b       	sbc	r27, r26
    13f6:	62 0b       	sbc	r22, r18
    13f8:	73 0b       	sbc	r23, r19
    13fa:	84 0b       	sbc	r24, r20
    13fc:	ba f0       	brmi	.+46     	; 0x142c <__addsf3x+0x98>
    13fe:	91 50       	subi	r25, 0x01	; 1
    1400:	a1 f0       	breq	.+40     	; 0x142a <__addsf3x+0x96>
    1402:	ff 0f       	add	r31, r31
    1404:	bb 1f       	adc	r27, r27
    1406:	66 1f       	adc	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	c2 f7       	brpl	.-16     	; 0x13fe <__addsf3x+0x6a>
    140e:	0e c0       	rjmp	.+28     	; 0x142c <__addsf3x+0x98>
    1410:	ba 0f       	add	r27, r26
    1412:	62 1f       	adc	r22, r18
    1414:	73 1f       	adc	r23, r19
    1416:	84 1f       	adc	r24, r20
    1418:	48 f4       	brcc	.+18     	; 0x142c <__addsf3x+0x98>
    141a:	87 95       	ror	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	b7 95       	ror	r27
    1422:	f7 95       	ror	r31
    1424:	9e 3f       	cpi	r25, 0xFE	; 254
    1426:	08 f0       	brcs	.+2      	; 0x142a <__addsf3x+0x96>
    1428:	b3 cf       	rjmp	.-154    	; 0x1390 <__addsf3+0x1e>
    142a:	93 95       	inc	r25
    142c:	88 0f       	add	r24, r24
    142e:	08 f0       	brcs	.+2      	; 0x1432 <__addsf3x+0x9e>
    1430:	99 27       	eor	r25, r25
    1432:	ee 0f       	add	r30, r30
    1434:	97 95       	ror	r25
    1436:	87 95       	ror	r24
    1438:	08 95       	ret

0000143a <__divsf3>:
    143a:	0c d0       	rcall	.+24     	; 0x1454 <__divsf3x>
    143c:	66 c1       	rjmp	.+716    	; 0x170a <__fp_round>
    143e:	5e d1       	rcall	.+700    	; 0x16fc <__fp_pscB>
    1440:	40 f0       	brcs	.+16     	; 0x1452 <__divsf3+0x18>
    1442:	55 d1       	rcall	.+682    	; 0x16ee <__fp_pscA>
    1444:	30 f0       	brcs	.+12     	; 0x1452 <__divsf3+0x18>
    1446:	21 f4       	brne	.+8      	; 0x1450 <__divsf3+0x16>
    1448:	5f 3f       	cpi	r21, 0xFF	; 255
    144a:	19 f0       	breq	.+6      	; 0x1452 <__divsf3+0x18>
    144c:	39 c1       	rjmp	.+626    	; 0x16c0 <__fp_inf>
    144e:	51 11       	cpse	r21, r1
    1450:	90 c1       	rjmp	.+800    	; 0x1772 <__fp_szero>
    1452:	4a c1       	rjmp	.+660    	; 0x16e8 <__fp_nan>

00001454 <__divsf3x>:
    1454:	6b d1       	rcall	.+726    	; 0x172c <__fp_split3>
    1456:	98 f3       	brcs	.-26     	; 0x143e <__divsf3+0x4>

00001458 <__divsf3_pse>:
    1458:	99 23       	and	r25, r25
    145a:	c9 f3       	breq	.-14     	; 0x144e <__divsf3+0x14>
    145c:	55 23       	and	r21, r21
    145e:	b1 f3       	breq	.-20     	; 0x144c <__divsf3+0x12>
    1460:	95 1b       	sub	r25, r21
    1462:	55 0b       	sbc	r21, r21
    1464:	bb 27       	eor	r27, r27
    1466:	aa 27       	eor	r26, r26
    1468:	62 17       	cp	r22, r18
    146a:	73 07       	cpc	r23, r19
    146c:	84 07       	cpc	r24, r20
    146e:	38 f0       	brcs	.+14     	; 0x147e <__divsf3_pse+0x26>
    1470:	9f 5f       	subi	r25, 0xFF	; 255
    1472:	5f 4f       	sbci	r21, 0xFF	; 255
    1474:	22 0f       	add	r18, r18
    1476:	33 1f       	adc	r19, r19
    1478:	44 1f       	adc	r20, r20
    147a:	aa 1f       	adc	r26, r26
    147c:	a9 f3       	breq	.-22     	; 0x1468 <__divsf3_pse+0x10>
    147e:	33 d0       	rcall	.+102    	; 0x14e6 <__divsf3_pse+0x8e>
    1480:	0e 2e       	mov	r0, r30
    1482:	3a f0       	brmi	.+14     	; 0x1492 <__divsf3_pse+0x3a>
    1484:	e0 e8       	ldi	r30, 0x80	; 128
    1486:	30 d0       	rcall	.+96     	; 0x14e8 <__divsf3_pse+0x90>
    1488:	91 50       	subi	r25, 0x01	; 1
    148a:	50 40       	sbci	r21, 0x00	; 0
    148c:	e6 95       	lsr	r30
    148e:	00 1c       	adc	r0, r0
    1490:	ca f7       	brpl	.-14     	; 0x1484 <__divsf3_pse+0x2c>
    1492:	29 d0       	rcall	.+82     	; 0x14e6 <__divsf3_pse+0x8e>
    1494:	fe 2f       	mov	r31, r30
    1496:	27 d0       	rcall	.+78     	; 0x14e6 <__divsf3_pse+0x8e>
    1498:	66 0f       	add	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	88 1f       	adc	r24, r24
    149e:	bb 1f       	adc	r27, r27
    14a0:	26 17       	cp	r18, r22
    14a2:	37 07       	cpc	r19, r23
    14a4:	48 07       	cpc	r20, r24
    14a6:	ab 07       	cpc	r26, r27
    14a8:	b0 e8       	ldi	r27, 0x80	; 128
    14aa:	09 f0       	breq	.+2      	; 0x14ae <__divsf3_pse+0x56>
    14ac:	bb 0b       	sbc	r27, r27
    14ae:	80 2d       	mov	r24, r0
    14b0:	bf 01       	movw	r22, r30
    14b2:	ff 27       	eor	r31, r31
    14b4:	93 58       	subi	r25, 0x83	; 131
    14b6:	5f 4f       	sbci	r21, 0xFF	; 255
    14b8:	2a f0       	brmi	.+10     	; 0x14c4 <__divsf3_pse+0x6c>
    14ba:	9e 3f       	cpi	r25, 0xFE	; 254
    14bc:	51 05       	cpc	r21, r1
    14be:	68 f0       	brcs	.+26     	; 0x14da <__divsf3_pse+0x82>
    14c0:	ff c0       	rjmp	.+510    	; 0x16c0 <__fp_inf>
    14c2:	57 c1       	rjmp	.+686    	; 0x1772 <__fp_szero>
    14c4:	5f 3f       	cpi	r21, 0xFF	; 255
    14c6:	ec f3       	brlt	.-6      	; 0x14c2 <__divsf3_pse+0x6a>
    14c8:	98 3e       	cpi	r25, 0xE8	; 232
    14ca:	dc f3       	brlt	.-10     	; 0x14c2 <__divsf3_pse+0x6a>
    14cc:	86 95       	lsr	r24
    14ce:	77 95       	ror	r23
    14d0:	67 95       	ror	r22
    14d2:	b7 95       	ror	r27
    14d4:	f7 95       	ror	r31
    14d6:	9f 5f       	subi	r25, 0xFF	; 255
    14d8:	c9 f7       	brne	.-14     	; 0x14cc <__divsf3_pse+0x74>
    14da:	88 0f       	add	r24, r24
    14dc:	91 1d       	adc	r25, r1
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret
    14e6:	e1 e0       	ldi	r30, 0x01	; 1
    14e8:	66 0f       	add	r22, r22
    14ea:	77 1f       	adc	r23, r23
    14ec:	88 1f       	adc	r24, r24
    14ee:	bb 1f       	adc	r27, r27
    14f0:	62 17       	cp	r22, r18
    14f2:	73 07       	cpc	r23, r19
    14f4:	84 07       	cpc	r24, r20
    14f6:	ba 07       	cpc	r27, r26
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <__divsf3_pse+0xaa>
    14fa:	62 1b       	sub	r22, r18
    14fc:	73 0b       	sbc	r23, r19
    14fe:	84 0b       	sbc	r24, r20
    1500:	ba 0b       	sbc	r27, r26
    1502:	ee 1f       	adc	r30, r30
    1504:	88 f7       	brcc	.-30     	; 0x14e8 <__divsf3_pse+0x90>
    1506:	e0 95       	com	r30
    1508:	08 95       	ret

0000150a <__fixunssfsi>:
    150a:	18 d1       	rcall	.+560    	; 0x173c <__fp_splitA>
    150c:	88 f0       	brcs	.+34     	; 0x1530 <__fixunssfsi+0x26>
    150e:	9f 57       	subi	r25, 0x7F	; 127
    1510:	90 f0       	brcs	.+36     	; 0x1536 <__fixunssfsi+0x2c>
    1512:	b9 2f       	mov	r27, r25
    1514:	99 27       	eor	r25, r25
    1516:	b7 51       	subi	r27, 0x17	; 23
    1518:	a0 f0       	brcs	.+40     	; 0x1542 <__fixunssfsi+0x38>
    151a:	d1 f0       	breq	.+52     	; 0x1550 <__fixunssfsi+0x46>
    151c:	66 0f       	add	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	88 1f       	adc	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	1a f0       	brmi	.+6      	; 0x152c <__fixunssfsi+0x22>
    1526:	ba 95       	dec	r27
    1528:	c9 f7       	brne	.-14     	; 0x151c <__fixunssfsi+0x12>
    152a:	12 c0       	rjmp	.+36     	; 0x1550 <__fixunssfsi+0x46>
    152c:	b1 30       	cpi	r27, 0x01	; 1
    152e:	81 f0       	breq	.+32     	; 0x1550 <__fixunssfsi+0x46>
    1530:	1f d1       	rcall	.+574    	; 0x1770 <__fp_zero>
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	08 95       	ret
    1536:	1c c1       	rjmp	.+568    	; 0x1770 <__fp_zero>
    1538:	67 2f       	mov	r22, r23
    153a:	78 2f       	mov	r23, r24
    153c:	88 27       	eor	r24, r24
    153e:	b8 5f       	subi	r27, 0xF8	; 248
    1540:	39 f0       	breq	.+14     	; 0x1550 <__fixunssfsi+0x46>
    1542:	b9 3f       	cpi	r27, 0xF9	; 249
    1544:	cc f3       	brlt	.-14     	; 0x1538 <__fixunssfsi+0x2e>
    1546:	86 95       	lsr	r24
    1548:	77 95       	ror	r23
    154a:	67 95       	ror	r22
    154c:	b3 95       	inc	r27
    154e:	d9 f7       	brne	.-10     	; 0x1546 <__fixunssfsi+0x3c>
    1550:	3e f4       	brtc	.+14     	; 0x1560 <__fixunssfsi+0x56>
    1552:	90 95       	com	r25
    1554:	80 95       	com	r24
    1556:	70 95       	com	r23
    1558:	61 95       	neg	r22
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	8f 4f       	sbci	r24, 0xFF	; 255
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	08 95       	ret

00001562 <__floatunsisf>:
    1562:	e8 94       	clt
    1564:	09 c0       	rjmp	.+18     	; 0x1578 <__floatsisf+0x12>

00001566 <__floatsisf>:
    1566:	97 fb       	bst	r25, 7
    1568:	3e f4       	brtc	.+14     	; 0x1578 <__floatsisf+0x12>
    156a:	90 95       	com	r25
    156c:	80 95       	com	r24
    156e:	70 95       	com	r23
    1570:	61 95       	neg	r22
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	99 23       	and	r25, r25
    157a:	a9 f0       	breq	.+42     	; 0x15a6 <__floatsisf+0x40>
    157c:	f9 2f       	mov	r31, r25
    157e:	96 e9       	ldi	r25, 0x96	; 150
    1580:	bb 27       	eor	r27, r27
    1582:	93 95       	inc	r25
    1584:	f6 95       	lsr	r31
    1586:	87 95       	ror	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b7 95       	ror	r27
    158e:	f1 11       	cpse	r31, r1
    1590:	f8 cf       	rjmp	.-16     	; 0x1582 <__floatsisf+0x1c>
    1592:	fa f4       	brpl	.+62     	; 0x15d2 <__floatsisf+0x6c>
    1594:	bb 0f       	add	r27, r27
    1596:	11 f4       	brne	.+4      	; 0x159c <__floatsisf+0x36>
    1598:	60 ff       	sbrs	r22, 0
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <__floatsisf+0x6c>
    159c:	6f 5f       	subi	r22, 0xFF	; 255
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	8f 4f       	sbci	r24, 0xFF	; 255
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	16 c0       	rjmp	.+44     	; 0x15d2 <__floatsisf+0x6c>
    15a6:	88 23       	and	r24, r24
    15a8:	11 f0       	breq	.+4      	; 0x15ae <__floatsisf+0x48>
    15aa:	96 e9       	ldi	r25, 0x96	; 150
    15ac:	11 c0       	rjmp	.+34     	; 0x15d0 <__floatsisf+0x6a>
    15ae:	77 23       	and	r23, r23
    15b0:	21 f0       	breq	.+8      	; 0x15ba <__floatsisf+0x54>
    15b2:	9e e8       	ldi	r25, 0x8E	; 142
    15b4:	87 2f       	mov	r24, r23
    15b6:	76 2f       	mov	r23, r22
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <__floatsisf+0x5e>
    15ba:	66 23       	and	r22, r22
    15bc:	71 f0       	breq	.+28     	; 0x15da <__floatsisf+0x74>
    15be:	96 e8       	ldi	r25, 0x86	; 134
    15c0:	86 2f       	mov	r24, r22
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	2a f0       	brmi	.+10     	; 0x15d2 <__floatsisf+0x6c>
    15c8:	9a 95       	dec	r25
    15ca:	66 0f       	add	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	88 1f       	adc	r24, r24
    15d0:	da f7       	brpl	.-10     	; 0x15c8 <__floatsisf+0x62>
    15d2:	88 0f       	add	r24, r24
    15d4:	96 95       	lsr	r25
    15d6:	87 95       	ror	r24
    15d8:	97 f9       	bld	r25, 7
    15da:	08 95       	ret
    15dc:	88 d0       	rcall	.+272    	; 0x16ee <__fp_pscA>
    15de:	18 f0       	brcs	.+6      	; 0x15e6 <__floatsisf+0x80>
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <__floatsisf+0x80>
    15e2:	8c d0       	rcall	.+280    	; 0x16fc <__fp_pscB>
    15e4:	38 f4       	brcc	.+14     	; 0x15f4 <fmod+0xa>
    15e6:	80 c0       	rjmp	.+256    	; 0x16e8 <__fp_nan>
    15e8:	c4 c0       	rjmp	.+392    	; 0x1772 <__fp_szero>

000015ea <fmod>:
    15ea:	e9 2f       	mov	r30, r25
    15ec:	9f d0       	rcall	.+318    	; 0x172c <__fp_split3>
    15ee:	b0 f3       	brcs	.-20     	; 0x15dc <__floatsisf+0x76>
    15f0:	55 23       	and	r21, r21
    15f2:	c9 f3       	breq	.-14     	; 0x15e6 <__floatsisf+0x80>
    15f4:	e7 fb       	bst	r30, 7
    15f6:	62 17       	cp	r22, r18
    15f8:	73 07       	cpc	r23, r19
    15fa:	84 07       	cpc	r24, r20
    15fc:	95 07       	cpc	r25, r21
    15fe:	a8 f1       	brcs	.+106    	; 0x166a <fmod+0x80>
    1600:	99 f3       	breq	.-26     	; 0x15e8 <__floatsisf+0x82>
    1602:	e9 2f       	mov	r30, r25
    1604:	ff 27       	eor	r31, r31
    1606:	88 23       	and	r24, r24
    1608:	2a f0       	brmi	.+10     	; 0x1614 <fmod+0x2a>
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	66 0f       	add	r22, r22
    160e:	77 1f       	adc	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	da f7       	brpl	.-10     	; 0x160a <fmod+0x20>
    1614:	95 2f       	mov	r25, r21
    1616:	55 27       	eor	r21, r21
    1618:	44 23       	and	r20, r20
    161a:	32 f0       	brmi	.+12     	; 0x1628 <fmod+0x3e>
    161c:	91 50       	subi	r25, 0x01	; 1
    161e:	50 40       	sbci	r21, 0x00	; 0
    1620:	22 0f       	add	r18, r18
    1622:	33 1f       	adc	r19, r19
    1624:	44 1f       	adc	r20, r20
    1626:	d2 f7       	brpl	.-12     	; 0x161c <fmod+0x32>
    1628:	bb 27       	eor	r27, r27
    162a:	e9 1b       	sub	r30, r25
    162c:	f5 0b       	sbc	r31, r21
    162e:	62 1b       	sub	r22, r18
    1630:	73 0b       	sbc	r23, r19
    1632:	84 0b       	sbc	r24, r20
    1634:	b1 09       	sbc	r27, r1
    1636:	c1 f2       	breq	.-80     	; 0x15e8 <__floatsisf+0x82>
    1638:	22 f4       	brpl	.+8      	; 0x1642 <fmod+0x58>
    163a:	62 0f       	add	r22, r18
    163c:	73 1f       	adc	r23, r19
    163e:	84 1f       	adc	r24, r20
    1640:	b1 1d       	adc	r27, r1
    1642:	31 97       	sbiw	r30, 0x01	; 1
    1644:	2a f0       	brmi	.+10     	; 0x1650 <fmod+0x66>
    1646:	66 0f       	add	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	bb 1f       	adc	r27, r27
    164e:	ef cf       	rjmp	.-34     	; 0x162e <fmod+0x44>
    1650:	91 50       	subi	r25, 0x01	; 1
    1652:	50 40       	sbci	r21, 0x00	; 0
    1654:	5a f0       	brmi	.+22     	; 0x166c <fmod+0x82>
    1656:	41 f0       	breq	.+16     	; 0x1668 <fmod+0x7e>
    1658:	88 23       	and	r24, r24
    165a:	32 f0       	brmi	.+12     	; 0x1668 <fmod+0x7e>
    165c:	66 0f       	add	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	91 50       	subi	r25, 0x01	; 1
    1664:	50 40       	sbci	r21, 0x00	; 0
    1666:	c1 f7       	brne	.-16     	; 0x1658 <fmod+0x6e>
    1668:	93 95       	inc	r25
    166a:	30 c0       	rjmp	.+96     	; 0x16cc <__fp_mpack>
    166c:	86 95       	lsr	r24
    166e:	77 95       	ror	r23
    1670:	67 95       	ror	r22
    1672:	9f 5f       	subi	r25, 0xFF	; 255
    1674:	d9 f7       	brne	.-10     	; 0x166c <fmod+0x82>
    1676:	f8 cf       	rjmp	.-16     	; 0x1668 <fmod+0x7e>

00001678 <__fp_cmp>:
    1678:	99 0f       	add	r25, r25
    167a:	00 08       	sbc	r0, r0
    167c:	55 0f       	add	r21, r21
    167e:	aa 0b       	sbc	r26, r26
    1680:	e0 e8       	ldi	r30, 0x80	; 128
    1682:	fe ef       	ldi	r31, 0xFE	; 254
    1684:	16 16       	cp	r1, r22
    1686:	17 06       	cpc	r1, r23
    1688:	e8 07       	cpc	r30, r24
    168a:	f9 07       	cpc	r31, r25
    168c:	c0 f0       	brcs	.+48     	; 0x16be <__fp_cmp+0x46>
    168e:	12 16       	cp	r1, r18
    1690:	13 06       	cpc	r1, r19
    1692:	e4 07       	cpc	r30, r20
    1694:	f5 07       	cpc	r31, r21
    1696:	98 f0       	brcs	.+38     	; 0x16be <__fp_cmp+0x46>
    1698:	62 1b       	sub	r22, r18
    169a:	73 0b       	sbc	r23, r19
    169c:	84 0b       	sbc	r24, r20
    169e:	95 0b       	sbc	r25, r21
    16a0:	39 f4       	brne	.+14     	; 0x16b0 <__fp_cmp+0x38>
    16a2:	0a 26       	eor	r0, r26
    16a4:	61 f0       	breq	.+24     	; 0x16be <__fp_cmp+0x46>
    16a6:	23 2b       	or	r18, r19
    16a8:	24 2b       	or	r18, r20
    16aa:	25 2b       	or	r18, r21
    16ac:	21 f4       	brne	.+8      	; 0x16b6 <__fp_cmp+0x3e>
    16ae:	08 95       	ret
    16b0:	0a 26       	eor	r0, r26
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <__fp_cmp+0x3e>
    16b4:	a1 40       	sbci	r26, 0x01	; 1
    16b6:	a6 95       	lsr	r26
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	81 1d       	adc	r24, r1
    16bc:	81 1d       	adc	r24, r1
    16be:	08 95       	ret

000016c0 <__fp_inf>:
    16c0:	97 f9       	bld	r25, 7
    16c2:	9f 67       	ori	r25, 0x7F	; 127
    16c4:	80 e8       	ldi	r24, 0x80	; 128
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	08 95       	ret

000016cc <__fp_mpack>:
    16cc:	9f 3f       	cpi	r25, 0xFF	; 255
    16ce:	31 f0       	breq	.+12     	; 0x16dc <__fp_mpack_finite+0xc>

000016d0 <__fp_mpack_finite>:
    16d0:	91 50       	subi	r25, 0x01	; 1
    16d2:	20 f4       	brcc	.+8      	; 0x16dc <__fp_mpack_finite+0xc>
    16d4:	87 95       	ror	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b7 95       	ror	r27
    16dc:	88 0f       	add	r24, r24
    16de:	91 1d       	adc	r25, r1
    16e0:	96 95       	lsr	r25
    16e2:	87 95       	ror	r24
    16e4:	97 f9       	bld	r25, 7
    16e6:	08 95       	ret

000016e8 <__fp_nan>:
    16e8:	9f ef       	ldi	r25, 0xFF	; 255
    16ea:	80 ec       	ldi	r24, 0xC0	; 192
    16ec:	08 95       	ret

000016ee <__fp_pscA>:
    16ee:	00 24       	eor	r0, r0
    16f0:	0a 94       	dec	r0
    16f2:	16 16       	cp	r1, r22
    16f4:	17 06       	cpc	r1, r23
    16f6:	18 06       	cpc	r1, r24
    16f8:	09 06       	cpc	r0, r25
    16fa:	08 95       	ret

000016fc <__fp_pscB>:
    16fc:	00 24       	eor	r0, r0
    16fe:	0a 94       	dec	r0
    1700:	12 16       	cp	r1, r18
    1702:	13 06       	cpc	r1, r19
    1704:	14 06       	cpc	r1, r20
    1706:	05 06       	cpc	r0, r21
    1708:	08 95       	ret

0000170a <__fp_round>:
    170a:	09 2e       	mov	r0, r25
    170c:	03 94       	inc	r0
    170e:	00 0c       	add	r0, r0
    1710:	11 f4       	brne	.+4      	; 0x1716 <__fp_round+0xc>
    1712:	88 23       	and	r24, r24
    1714:	52 f0       	brmi	.+20     	; 0x172a <__fp_round+0x20>
    1716:	bb 0f       	add	r27, r27
    1718:	40 f4       	brcc	.+16     	; 0x172a <__fp_round+0x20>
    171a:	bf 2b       	or	r27, r31
    171c:	11 f4       	brne	.+4      	; 0x1722 <__fp_round+0x18>
    171e:	60 ff       	sbrs	r22, 0
    1720:	04 c0       	rjmp	.+8      	; 0x172a <__fp_round+0x20>
    1722:	6f 5f       	subi	r22, 0xFF	; 255
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
    1726:	8f 4f       	sbci	r24, 0xFF	; 255
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	08 95       	ret

0000172c <__fp_split3>:
    172c:	57 fd       	sbrc	r21, 7
    172e:	90 58       	subi	r25, 0x80	; 128
    1730:	44 0f       	add	r20, r20
    1732:	55 1f       	adc	r21, r21
    1734:	59 f0       	breq	.+22     	; 0x174c <__fp_splitA+0x10>
    1736:	5f 3f       	cpi	r21, 0xFF	; 255
    1738:	71 f0       	breq	.+28     	; 0x1756 <__fp_splitA+0x1a>
    173a:	47 95       	ror	r20

0000173c <__fp_splitA>:
    173c:	88 0f       	add	r24, r24
    173e:	97 fb       	bst	r25, 7
    1740:	99 1f       	adc	r25, r25
    1742:	61 f0       	breq	.+24     	; 0x175c <__fp_splitA+0x20>
    1744:	9f 3f       	cpi	r25, 0xFF	; 255
    1746:	79 f0       	breq	.+30     	; 0x1766 <__fp_splitA+0x2a>
    1748:	87 95       	ror	r24
    174a:	08 95       	ret
    174c:	12 16       	cp	r1, r18
    174e:	13 06       	cpc	r1, r19
    1750:	14 06       	cpc	r1, r20
    1752:	55 1f       	adc	r21, r21
    1754:	f2 cf       	rjmp	.-28     	; 0x173a <__fp_split3+0xe>
    1756:	46 95       	lsr	r20
    1758:	f1 df       	rcall	.-30     	; 0x173c <__fp_splitA>
    175a:	08 c0       	rjmp	.+16     	; 0x176c <__fp_splitA+0x30>
    175c:	16 16       	cp	r1, r22
    175e:	17 06       	cpc	r1, r23
    1760:	18 06       	cpc	r1, r24
    1762:	99 1f       	adc	r25, r25
    1764:	f1 cf       	rjmp	.-30     	; 0x1748 <__fp_splitA+0xc>
    1766:	86 95       	lsr	r24
    1768:	71 05       	cpc	r23, r1
    176a:	61 05       	cpc	r22, r1
    176c:	08 94       	sec
    176e:	08 95       	ret

00001770 <__fp_zero>:
    1770:	e8 94       	clt

00001772 <__fp_szero>:
    1772:	bb 27       	eor	r27, r27
    1774:	66 27       	eor	r22, r22
    1776:	77 27       	eor	r23, r23
    1778:	cb 01       	movw	r24, r22
    177a:	97 f9       	bld	r25, 7
    177c:	08 95       	ret

0000177e <__gesf2>:
    177e:	7c df       	rcall	.-264    	; 0x1678 <__fp_cmp>
    1780:	08 f4       	brcc	.+2      	; 0x1784 <__gesf2+0x6>
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	08 95       	ret

00001786 <__mulsf3>:
    1786:	0b d0       	rcall	.+22     	; 0x179e <__mulsf3x>
    1788:	c0 cf       	rjmp	.-128    	; 0x170a <__fp_round>
    178a:	b1 df       	rcall	.-158    	; 0x16ee <__fp_pscA>
    178c:	28 f0       	brcs	.+10     	; 0x1798 <__mulsf3+0x12>
    178e:	b6 df       	rcall	.-148    	; 0x16fc <__fp_pscB>
    1790:	18 f0       	brcs	.+6      	; 0x1798 <__mulsf3+0x12>
    1792:	95 23       	and	r25, r21
    1794:	09 f0       	breq	.+2      	; 0x1798 <__mulsf3+0x12>
    1796:	94 cf       	rjmp	.-216    	; 0x16c0 <__fp_inf>
    1798:	a7 cf       	rjmp	.-178    	; 0x16e8 <__fp_nan>
    179a:	11 24       	eor	r1, r1
    179c:	ea cf       	rjmp	.-44     	; 0x1772 <__fp_szero>

0000179e <__mulsf3x>:
    179e:	c6 df       	rcall	.-116    	; 0x172c <__fp_split3>
    17a0:	a0 f3       	brcs	.-24     	; 0x178a <__mulsf3+0x4>

000017a2 <__mulsf3_pse>:
    17a2:	95 9f       	mul	r25, r21
    17a4:	d1 f3       	breq	.-12     	; 0x179a <__mulsf3+0x14>
    17a6:	95 0f       	add	r25, r21
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	55 1f       	adc	r21, r21
    17ac:	62 9f       	mul	r22, r18
    17ae:	f0 01       	movw	r30, r0
    17b0:	72 9f       	mul	r23, r18
    17b2:	bb 27       	eor	r27, r27
    17b4:	f0 0d       	add	r31, r0
    17b6:	b1 1d       	adc	r27, r1
    17b8:	63 9f       	mul	r22, r19
    17ba:	aa 27       	eor	r26, r26
    17bc:	f0 0d       	add	r31, r0
    17be:	b1 1d       	adc	r27, r1
    17c0:	aa 1f       	adc	r26, r26
    17c2:	64 9f       	mul	r22, r20
    17c4:	66 27       	eor	r22, r22
    17c6:	b0 0d       	add	r27, r0
    17c8:	a1 1d       	adc	r26, r1
    17ca:	66 1f       	adc	r22, r22
    17cc:	82 9f       	mul	r24, r18
    17ce:	22 27       	eor	r18, r18
    17d0:	b0 0d       	add	r27, r0
    17d2:	a1 1d       	adc	r26, r1
    17d4:	62 1f       	adc	r22, r18
    17d6:	73 9f       	mul	r23, r19
    17d8:	b0 0d       	add	r27, r0
    17da:	a1 1d       	adc	r26, r1
    17dc:	62 1f       	adc	r22, r18
    17de:	83 9f       	mul	r24, r19
    17e0:	a0 0d       	add	r26, r0
    17e2:	61 1d       	adc	r22, r1
    17e4:	22 1f       	adc	r18, r18
    17e6:	74 9f       	mul	r23, r20
    17e8:	33 27       	eor	r19, r19
    17ea:	a0 0d       	add	r26, r0
    17ec:	61 1d       	adc	r22, r1
    17ee:	23 1f       	adc	r18, r19
    17f0:	84 9f       	mul	r24, r20
    17f2:	60 0d       	add	r22, r0
    17f4:	21 1d       	adc	r18, r1
    17f6:	82 2f       	mov	r24, r18
    17f8:	76 2f       	mov	r23, r22
    17fa:	6a 2f       	mov	r22, r26
    17fc:	11 24       	eor	r1, r1
    17fe:	9f 57       	subi	r25, 0x7F	; 127
    1800:	50 40       	sbci	r21, 0x00	; 0
    1802:	8a f0       	brmi	.+34     	; 0x1826 <__mulsf3_pse+0x84>
    1804:	e1 f0       	breq	.+56     	; 0x183e <__mulsf3_pse+0x9c>
    1806:	88 23       	and	r24, r24
    1808:	4a f0       	brmi	.+18     	; 0x181c <__mulsf3_pse+0x7a>
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	bb 1f       	adc	r27, r27
    1810:	66 1f       	adc	r22, r22
    1812:	77 1f       	adc	r23, r23
    1814:	88 1f       	adc	r24, r24
    1816:	91 50       	subi	r25, 0x01	; 1
    1818:	50 40       	sbci	r21, 0x00	; 0
    181a:	a9 f7       	brne	.-22     	; 0x1806 <__mulsf3_pse+0x64>
    181c:	9e 3f       	cpi	r25, 0xFE	; 254
    181e:	51 05       	cpc	r21, r1
    1820:	70 f0       	brcs	.+28     	; 0x183e <__mulsf3_pse+0x9c>
    1822:	4e cf       	rjmp	.-356    	; 0x16c0 <__fp_inf>
    1824:	a6 cf       	rjmp	.-180    	; 0x1772 <__fp_szero>
    1826:	5f 3f       	cpi	r21, 0xFF	; 255
    1828:	ec f3       	brlt	.-6      	; 0x1824 <__mulsf3_pse+0x82>
    182a:	98 3e       	cpi	r25, 0xE8	; 232
    182c:	dc f3       	brlt	.-10     	; 0x1824 <__mulsf3_pse+0x82>
    182e:	86 95       	lsr	r24
    1830:	77 95       	ror	r23
    1832:	67 95       	ror	r22
    1834:	b7 95       	ror	r27
    1836:	f7 95       	ror	r31
    1838:	e7 95       	ror	r30
    183a:	9f 5f       	subi	r25, 0xFF	; 255
    183c:	c1 f7       	brne	.-16     	; 0x182e <__mulsf3_pse+0x8c>
    183e:	fe 2b       	or	r31, r30
    1840:	88 0f       	add	r24, r24
    1842:	91 1d       	adc	r25, r1
    1844:	96 95       	lsr	r25
    1846:	87 95       	ror	r24
    1848:	97 f9       	bld	r25, 7
    184a:	08 95       	ret

0000184c <_exit>:
    184c:	f8 94       	cli

0000184e <__stop_program>:
    184e:	ff cf       	rjmp	.-2      	; 0x184e <__stop_program>
