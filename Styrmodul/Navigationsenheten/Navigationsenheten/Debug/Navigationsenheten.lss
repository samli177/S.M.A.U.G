
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000012d6  00800100  00002568  000025fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000687  008013d6  008013d6  000038d2  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  000038d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  0000673c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007484  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000448  00000000  00000000  000074b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000041a9  00000000  00000000  000078fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f7c  00000000  00000000  0000baa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000281d  00000000  00000000  0000ca20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ccc  00000000  00000000  0000f240  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e53  00000000  00000000  0000ff0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002690  00000000  00000000  00010d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004a0  00000000  00000000  000133ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	95 c6       	rjmp	.+3370   	; 0xd30 <__vector_1>
       6:	00 00       	nop
       8:	bd c6       	rjmp	.+3450   	; 0xd84 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	86 c7       	rjmp	.+3852   	; 0xf1e <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c7       	rjmp	.+3662   	; 0xe84 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0f c7       	rjmp	.+3614   	; 0xea0 <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e8 e6       	ldi	r30, 0x68	; 104
      ec:	f5 e2       	ldi	r31, 0x25	; 37
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a6 3d       	cpi	r26, 0xD6	; 214
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	2a e1       	ldi	r18, 0x1A	; 26
     100:	a6 ed       	ldi	r26, 0xD6	; 214
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	ad 35       	cpi	r26, 0x5D	; 93
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	64 d6       	rcall	.+3272   	; 0xdd8 <main>
     110:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <autonomouswalk_set_return_status>:
	return gSpeed;
}

void autonomouswalk_set_return_status(uint8_t status)
{
	gStatus = status;
     116:	80 93 d7 13 	sts	0x13D7, r24
     11a:	08 95       	ret

0000011c <autonomouswalk_get_return_status>:
}

uint8_t autonomouswalk_get_return_status()
{
	return gStatus;
}
     11c:	80 91 d7 13 	lds	r24, 0x13D7
     120:	08 95       	ret

00000122 <turn_around>:
	}
}

void turn_around()
{
	if(gStatus)
     122:	80 91 d7 13 	lds	r24, 0x13D7
     126:	88 23       	and	r24, r24
     128:	29 f0       	breq	.+10     	; 0x134 <turn_around+0x12>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     12a:	6d e1       	ldi	r22, 0x1D	; 29
     12c:	71 e1       	ldi	r23, 0x11	; 17
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	0e 94 04 09 	call	0x1208	; 0x1208 <TWI_send_string>
	}
	
	USART_send_turn(180, 0);
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	84 eb       	ldi	r24, 0xB4	; 180
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <USART_send_turn>
	while(USART_turn_done() == 0)
     13e:	08 c0       	rjmp	.+16     	; 0x150 <turn_around+0x2e>
	{
		USART_decode_rx_fifo();
     140:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <USART_decode_rx_fifo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     144:	8f e3       	ldi	r24, 0x3F	; 63
     146:	9c e9       	ldi	r25, 0x9C	; 156
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <turn_around+0x26>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <turn_around+0x2c>
     14e:	00 00       	nop
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
	}
	
	USART_send_turn(180, 0);
	while(USART_turn_done() == 0)
     150:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_turn_done>
     154:	88 23       	and	r24, r24
     156:	a1 f3       	breq	.-24     	; 0x140 <turn_around+0x1e>
	{
		USART_decode_rx_fifo();
		_delay_ms(10);
	}
	
	if(gStatus)
     158:	80 91 d7 13 	lds	r24, 0x13D7
     15c:	88 23       	and	r24, r24
     15e:	29 f0       	breq	.+10     	; 0x16a <turn_around+0x48>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     160:	66 e3       	ldi	r22, 0x36	; 54
     162:	71 e1       	ldi	r23, 0x11	; 17
     164:	80 e8       	ldi	r24, 0x80	; 128
     166:	0c 94 04 09 	jmp	0x1208	; 0x1208 <TWI_send_string>
     16a:	08 95       	ret

0000016c <walk_forward>:
	}
}

void walk_forward()
{
     16c:	8f 92       	push	r8
     16e:	9f 92       	push	r9
     170:	af 92       	push	r10
     172:	bf 92       	push	r11
     174:	cf 92       	push	r12
     176:	df 92       	push	r13
     178:	ef 92       	push	r14
     17a:	ff 92       	push	r15
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
	float angleOffset = navigation_angle_offset();
     180:	dd d4       	rcall	.+2490   	; 0xb3c <navigation_angle_offset>
     182:	6b 01       	movw	r12, r22
     184:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     186:	24 d3       	rcall	.+1608   	; 0x7d0 <navigation_direction_regulation>
     188:	4b 01       	movw	r8, r22
     18a:	5c 01       	movw	r10, r24
	int adjustmentRotation = (50 + 50 * angleOffset * 2.0/PI);
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	48 e4       	ldi	r20, 0x48	; 72
     192:	52 e4       	ldi	r21, 0x42	; 66
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     19c:	9b 01       	movw	r18, r22
     19e:	ac 01       	movw	r20, r24
     1a0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__addsf3>
     1a4:	2b ed       	ldi	r18, 0xDB	; 219
     1a6:	3f e0       	ldi	r19, 0x0F	; 15
     1a8:	49 e4       	ldi	r20, 0x49	; 73
     1aa:	50 e4       	ldi	r21, 0x40	; 64
     1ac:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	48 e4       	ldi	r20, 0x48	; 72
     1b6:	52 e4       	ldi	r21, 0x42	; 66
     1b8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__addsf3>
     1bc:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1c0:	64 36       	cpi	r22, 0x64	; 100
     1c2:	71 05       	cpc	r23, r1
     1c4:	34 f4       	brge	.+12     	; 0x1d2 <walk_forward+0x66>
     1c6:	eb 01       	movw	r28, r22
     1c8:	dd 23       	and	r29, r29
     1ca:	2c f4       	brge	.+10     	; 0x1d6 <walk_forward+0x6a>
     1cc:	c0 e0       	ldi	r28, 0x00	; 0
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1d2:	c4 e6       	ldi	r28, 0x64	; 100
     1d4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	44 eb       	ldi	r20, 0xB4	; 180
     1dc:	52 e4       	ldi	r21, 0x42	; 66
     1de:	c5 01       	movw	r24, r10
     1e0:	b4 01       	movw	r22, r8
     1e2:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     1e6:	2b ed       	ldi	r18, 0xDB	; 219
     1e8:	3f e0       	ldi	r19, 0x0F	; 15
     1ea:	49 ec       	ldi	r20, 0xC9	; 201
     1ec:	50 e4       	ldi	r21, 0x40	; 64
     1ee:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     1f2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__fixsfsi>
     1f6:	26 2f       	mov	r18, r22
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1f8:	40 91 02 01 	lds	r20, 0x0102
     1fc:	6c 2f       	mov	r22, r28
     1fe:	82 2f       	mov	r24, r18
     200:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <USART_send_command_parameters>
	navigation_stepping_delay();
     204:	1c d2       	rcall	.+1080   	; 0x63e <navigation_stepping_delay>
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	df 90       	pop	r13
     210:	cf 90       	pop	r12
     212:	bf 90       	pop	r11
     214:	af 90       	pop	r10
     216:	9f 90       	pop	r9
     218:	8f 90       	pop	r8
     21a:	08 95       	ret

0000021c <turn_right>:
	}
}

void turn_right()
{
	if(gStatus)
     21c:	80 91 d7 13 	lds	r24, 0x13D7
     220:	88 23       	and	r24, r24
     222:	21 f0       	breq	.+8      	; 0x22c <turn_right+0x10>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     224:	6b e5       	ldi	r22, 0x5B	; 91
     226:	71 e1       	ldi	r23, 0x11	; 17
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	ee d7       	rcall	.+4060   	; 0x1208 <TWI_send_string>
	}
	
	USART_send_turn(90, 1);
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	8a e5       	ldi	r24, 0x5A	; 90
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <USART_send_turn>
	while(USART_turn_done() == 0)
     236:	08 c0       	rjmp	.+16     	; 0x248 <turn_right+0x2c>
	{
		USART_decode_rx_fifo();
     238:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <USART_decode_rx_fifo>
     23c:	8f e3       	ldi	r24, 0x3F	; 63
     23e:	9c e9       	ldi	r25, 0x9C	; 156
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <turn_right+0x24>
     244:	00 c0       	rjmp	.+0      	; 0x246 <turn_right+0x2a>
     246:	00 00       	nop
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
	}
	
	USART_send_turn(90, 1);
	while(USART_turn_done() == 0)
     248:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_turn_done>
     24c:	88 23       	and	r24, r24
     24e:	a1 f3       	breq	.-24     	; 0x238 <turn_right+0x1c>
     250:	02 c0       	rjmp	.+4      	; 0x256 <turn_right+0x3a>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     252:	8c df       	rcall	.-232    	; 0x16c <walk_forward>
     254:	03 c0       	rjmp	.+6      	; 0x25c <turn_right+0x40>
	{
		USART_decode_rx_fifo();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
     256:	ed d1       	rcall	.+986    	; 0x632 <navigation_autonomous_walk>
     258:	81 11       	cpse	r24, r1
     25a:	fb cf       	rjmp	.-10     	; 0x252 <turn_right+0x36>
	{
		walk_forward();
	}
	if(gStatus)
     25c:	80 91 d7 13 	lds	r24, 0x13D7
     260:	88 23       	and	r24, r24
     262:	21 f0       	breq	.+8      	; 0x26c <turn_right+0x50>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     264:	63 e7       	ldi	r22, 0x73	; 115
     266:	71 e1       	ldi	r23, 0x11	; 17
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	ce c7       	rjmp	.+3996   	; 0x1208 <TWI_send_string>
     26c:	08 95       	ret

0000026e <turn_left>:
	return gStatus;
}

void turn_left()
{
	if(gStatus)
     26e:	80 91 d7 13 	lds	r24, 0x13D7
     272:	88 23       	and	r24, r24
     274:	21 f0       	breq	.+8      	; 0x27e <turn_left+0x10>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     276:	67 e8       	ldi	r22, 0x87	; 135
     278:	71 e1       	ldi	r23, 0x11	; 17
     27a:	80 e8       	ldi	r24, 0x80	; 128
     27c:	c5 d7       	rcall	.+3978   	; 0x1208 <TWI_send_string>
	}
	
	USART_send_turn(90, 0);
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	8a e5       	ldi	r24, 0x5A	; 90
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <USART_send_turn>
	while(USART_turn_done() == 0)
     288:	08 c0       	rjmp	.+16     	; 0x29a <turn_left+0x2c>
	{
		USART_decode_rx_fifo();
     28a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <USART_decode_rx_fifo>
     28e:	8f e3       	ldi	r24, 0x3F	; 63
     290:	9c e9       	ldi	r25, 0x9C	; 156
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <turn_left+0x24>
     296:	00 c0       	rjmp	.+0      	; 0x298 <turn_left+0x2a>
     298:	00 00       	nop
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
	}
	
	USART_send_turn(90, 0);
	while(USART_turn_done() == 0)
     29a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_turn_done>
     29e:	88 23       	and	r24, r24
     2a0:	a1 f3       	breq	.-24     	; 0x28a <turn_left+0x1c>
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <turn_left+0x3a>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     2a4:	63 df       	rcall	.-314    	; 0x16c <walk_forward>
     2a6:	03 c0       	rjmp	.+6      	; 0x2ae <turn_left+0x40>
	{
		USART_decode_rx_fifo();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
     2a8:	c4 d1       	rcall	.+904    	; 0x632 <navigation_autonomous_walk>
     2aa:	81 11       	cpse	r24, r1
     2ac:	fb cf       	rjmp	.-10     	; 0x2a4 <turn_left+0x36>
	{
		walk_forward();
	}
	if(gStatus)
     2ae:	80 91 d7 13 	lds	r24, 0x13D7
     2b2:	88 23       	and	r24, r24
     2b4:	21 f0       	breq	.+8      	; 0x2be <turn_left+0x50>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2b6:	6e e9       	ldi	r22, 0x9E	; 158
     2b8:	71 e1       	ldi	r23, 0x11	; 17
     2ba:	80 e8       	ldi	r24, 0x80	; 128
     2bc:	a5 c7       	rjmp	.+3914   	; 0x1208 <TWI_send_string>
     2be:	08 95       	ret

000002c0 <climb>:
	navigation_stepping_delay();
}

void climb()
{
	USART_send_climb();	
     2c0:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <USART_send_climb>
     2c4:	08 95       	ret

000002c6 <autonomouswalk_walk>:
}

void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
     2c6:	3b d2       	rcall	.+1142   	; 0x73e <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     2c8:	ae d1       	rcall	.+860    	; 0x626 <navigation_left_algorithm>
     2ca:	88 23       	and	r24, r24
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <autonomouswalk_walk+0xa>
     2ce:	7d c0       	rjmp	.+250    	; 0x3ca <autonomouswalk_walk+0x104>
	{
		if(navigation_check_left_turn() == 2)
     2d0:	6f d2       	rcall	.+1246   	; 0x7b0 <navigation_check_left_turn>
     2d2:	82 30       	cpi	r24, 0x02	; 2
     2d4:	59 f4       	brne	.+22     	; 0x2ec <autonomouswalk_walk+0x26>
		{
			if(may_turn_left)
     2d6:	80 91 01 01 	lds	r24, 0x0101
     2da:	81 11       	cpse	r24, r1
     2dc:	f3 c0       	rjmp	.+486    	; 0x4c4 <autonomouswalk_walk+0x1fe>
				may_turn_left = 0;
				may_turn_right = 1;
			}
			else
			{
				walk_forward();
     2de:	46 df       	rcall	.-372    	; 0x16c <walk_forward>
				may_turn_left = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 01 01 	sts	0x0101, r24
			}
			decisionCounter = 0;
     2e6:	10 92 d6 13 	sts	0x13D6, r1
     2ea:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > 60)
     2ec:	84 e0       	ldi	r24, 0x04	; 4
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	df d1       	rcall	.+958    	; 0x6b0 <navigation_get_sensor>
     2f2:	8d 33       	cpi	r24, 0x3D	; 61
     2f4:	88 f1       	brcs	.+98     	; 0x358 <autonomouswalk_walk+0x92>
		{
			if(navigation_get_sensor(6) < CLIMB_LENGTH_LIMIT)
     2f6:	86 e0       	ldi	r24, 0x06	; 6
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	da d1       	rcall	.+948    	; 0x6b0 <navigation_get_sensor>
     2fc:	83 32       	cpi	r24, 0x23	; 35
     2fe:	18 f5       	brcc	.+70     	; 0x346 <autonomouswalk_walk+0x80>
					uint8_t adjustmentRotation = (50 + 50 * angleOffset * 2.0/PI);
					
					USART_send_command_parameters(0, adjustmentRotation, 0);
				}*/
				
				if(gStatus)
     300:	80 91 d7 13 	lds	r24, 0x13D7
     304:	88 23       	and	r24, r24
     306:	31 f0       	breq	.+12     	; 0x314 <autonomouswalk_walk+0x4e>
				{
					TWI_send_string_fixed_length(C_ADDRESS, "Starting climb", 14);
     308:	4e e0       	ldi	r20, 0x0E	; 14
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	61 eb       	ldi	r22, 0xB1	; 177
     30e:	71 e1       	ldi	r23, 0x11	; 17
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	c0 d7       	rcall	.+3968   	; 0x1294 <TWI_send_string_fixed_length>
				}
				
				climb();
     314:	d5 df       	rcall	.-86     	; 0x2c0 <climb>
				while(USART_climb_done() == 0)
     316:	08 c0       	rjmp	.+16     	; 0x328 <autonomouswalk_walk+0x62>
				{
					USART_decode_rx_fifo();
     318:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <USART_decode_rx_fifo>
     31c:	8f e3       	ldi	r24, 0x3F	; 63
     31e:	9c e9       	ldi	r25, 0x9C	; 156
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <autonomouswalk_walk+0x5a>
     324:	00 c0       	rjmp	.+0      	; 0x326 <autonomouswalk_walk+0x60>
     326:	00 00       	nop
				{
					TWI_send_string_fixed_length(C_ADDRESS, "Starting climb", 14);
				}
				
				climb();
				while(USART_climb_done() == 0)
     328:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <USART_climb_done>
     32c:	88 23       	and	r24, r24
     32e:	a1 f3       	breq	.-24     	; 0x318 <autonomouswalk_walk+0x52>
				{
					USART_decode_rx_fifo();
					_delay_ms(10);
				}
				
				if(gStatus)
     330:	80 91 d7 13 	lds	r24, 0x13D7
     334:	88 23       	and	r24, r24
     336:	69 f0       	breq	.+26     	; 0x352 <autonomouswalk_walk+0x8c>
				{
					TWI_send_string_fixed_length(C_ADDRESS, "Climb done", 10);
     338:	4a e0       	ldi	r20, 0x0A	; 10
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	60 ec       	ldi	r22, 0xC0	; 192
     33e:	71 e1       	ldi	r23, 0x11	; 17
     340:	80 e8       	ldi	r24, 0x80	; 128
     342:	a8 d7       	rcall	.+3920   	; 0x1294 <TWI_send_string_fixed_length>
     344:	06 c0       	rjmp	.+12     	; 0x352 <autonomouswalk_walk+0x8c>
				}
			}
			else
			{
				walk_forward();
     346:	12 df       	rcall	.-476    	; 0x16c <walk_forward>
				may_turn_left = 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	80 93 01 01 	sts	0x0101, r24
				may_turn_right = 1;
     34e:	80 93 00 01 	sts	0x0100, r24
			}
			decisionCounter = 0;
     352:	10 92 d6 13 	sts	0x13D6, r1
     356:	08 95       	ret
		}
		else if(navigation_check_right_turn() == 2)
     358:	1b d2       	rcall	.+1078   	; 0x790 <navigation_check_right_turn>
     35a:	82 30       	cpi	r24, 0x02	; 2
     35c:	91 f4       	brne	.+36     	; 0x382 <autonomouswalk_walk+0xbc>
		{
			if(may_turn_right)
     35e:	80 91 00 01 	lds	r24, 0x0100
     362:	88 23       	and	r24, r24
     364:	39 f0       	breq	.+14     	; 0x374 <autonomouswalk_walk+0xae>
			{
				turn_right();
     366:	5a df       	rcall	.-332    	; 0x21c <turn_right>
				may_turn_right = 0;
     368:	10 92 00 01 	sts	0x0100, r1
				may_turn_left = 1;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 01 01 	sts	0x0101, r24
     372:	04 c0       	rjmp	.+8      	; 0x37c <autonomouswalk_walk+0xb6>
			}
			else
			{
				walk_forward();
     374:	fb de       	rcall	.-522    	; 0x16c <walk_forward>
				may_turn_right = 1;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 00 01 	sts	0x0100, r24
			}
			decisionCounter = 0;
     37c:	10 92 d6 13 	sts	0x13D6, r1
     380:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0 && navigation_get_sensor(4) < 40)
     382:	16 d2       	rcall	.+1068   	; 0x7b0 <navigation_check_left_turn>
     384:	81 11       	cpse	r24, r1
     386:	0c c0       	rjmp	.+24     	; 0x3a0 <autonomouswalk_walk+0xda>
     388:	03 d2       	rcall	.+1030   	; 0x790 <navigation_check_right_turn>
     38a:	81 11       	cpse	r24, r1
     38c:	09 c0       	rjmp	.+18     	; 0x3a0 <autonomouswalk_walk+0xda>
     38e:	84 e0       	ldi	r24, 0x04	; 4
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	8e d1       	rcall	.+796    	; 0x6b0 <navigation_get_sensor>
     394:	88 32       	cpi	r24, 0x28	; 40
     396:	20 f4       	brcc	.+8      	; 0x3a0 <autonomouswalk_walk+0xda>
		{
			turn_around();
     398:	c4 de       	rcall	.-632    	; 0x122 <turn_around>
			decisionCounter = 0;
     39a:	10 92 d6 13 	sts	0x13D6, r1
     39e:	08 95       	ret
		}
		else if(decisionCounter < 10)
     3a0:	80 91 d6 13 	lds	r24, 0x13D6
     3a4:	8a 30       	cpi	r24, 0x0A	; 10
     3a6:	38 f4       	brcc	.+14     	; 0x3b6 <autonomouswalk_walk+0xf0>
		{
			walk_forward();
     3a8:	e1 de       	rcall	.-574    	; 0x16c <walk_forward>
			++decisionCounter;
     3aa:	80 91 d6 13 	lds	r24, 0x13D6
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 d6 13 	sts	0x13D6, r24
     3b4:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     3b6:	10 92 d6 13 	sts	0x13D6, r1
			navigation_set_autonomous_walk(0);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	3d d1       	rcall	.+634    	; 0x638 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     3be:	49 e3       	ldi	r20, 0x39	; 57
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	6b ec       	ldi	r22, 0xCB	; 203
     3c4:	71 e1       	ldi	r23, 0x11	; 17
     3c6:	80 e8       	ldi	r24, 0x80	; 128
     3c8:	65 c7       	rjmp	.+3786   	; 0x1294 <TWI_send_string_fixed_length>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     3ca:	e2 d1       	rcall	.+964    	; 0x790 <navigation_check_right_turn>
     3cc:	82 30       	cpi	r24, 0x02	; 2
     3ce:	59 f4       	brne	.+22     	; 0x3e6 <autonomouswalk_walk+0x120>
		{
			if(may_turn_right)			
     3d0:	80 91 00 01 	lds	r24, 0x0100
     3d4:	81 11       	cpse	r24, r1
     3d6:	7e c0       	rjmp	.+252    	; 0x4d4 <autonomouswalk_walk+0x20e>
				may_turn_right = 0;
				may_turn_left = 1;
			}
			else
			{
				walk_forward();
     3d8:	c9 de       	rcall	.-622    	; 0x16c <walk_forward>
				may_turn_right = 1;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	80 93 00 01 	sts	0x0100, r24
			}
			decisionCounter = 0;
     3e0:	10 92 d6 13 	sts	0x13D6, r1
     3e4:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > 60)
     3e6:	84 e0       	ldi	r24, 0x04	; 4
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	62 d1       	rcall	.+708    	; 0x6b0 <navigation_get_sensor>
     3ec:	8d 33       	cpi	r24, 0x3D	; 61
     3ee:	88 f1       	brcs	.+98     	; 0x452 <autonomouswalk_walk+0x18c>
		{
			if(navigation_get_sensor(6) < CLIMB_LENGTH_LIMIT)
     3f0:	86 e0       	ldi	r24, 0x06	; 6
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	5d d1       	rcall	.+698    	; 0x6b0 <navigation_get_sensor>
     3f6:	83 32       	cpi	r24, 0x23	; 35
     3f8:	18 f5       	brcc	.+70     	; 0x440 <autonomouswalk_walk+0x17a>
			{
				if(gStatus)
     3fa:	80 91 d7 13 	lds	r24, 0x13D7
     3fe:	88 23       	and	r24, r24
     400:	31 f0       	breq	.+12     	; 0x40e <autonomouswalk_walk+0x148>
				{
					TWI_send_string_fixed_length(C_ADDRESS, "Starting climb", 14);
     402:	4e e0       	ldi	r20, 0x0E	; 14
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	61 eb       	ldi	r22, 0xB1	; 177
     408:	71 e1       	ldi	r23, 0x11	; 17
     40a:	80 e8       	ldi	r24, 0x80	; 128
     40c:	43 d7       	rcall	.+3718   	; 0x1294 <TWI_send_string_fixed_length>
				}
				
				climb();
     40e:	58 df       	rcall	.-336    	; 0x2c0 <climb>
				while(USART_climb_done() == 0)
     410:	08 c0       	rjmp	.+16     	; 0x422 <autonomouswalk_walk+0x15c>
				{
					USART_decode_rx_fifo();
     412:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <USART_decode_rx_fifo>
     416:	8f e3       	ldi	r24, 0x3F	; 63
     418:	9c e9       	ldi	r25, 0x9C	; 156
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <autonomouswalk_walk+0x154>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <autonomouswalk_walk+0x15a>
     420:	00 00       	nop
				{
					TWI_send_string_fixed_length(C_ADDRESS, "Starting climb", 14);
				}
				
				climb();
				while(USART_climb_done() == 0)
     422:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <USART_climb_done>
     426:	88 23       	and	r24, r24
     428:	a1 f3       	breq	.-24     	; 0x412 <autonomouswalk_walk+0x14c>
				{
					USART_decode_rx_fifo();
					_delay_ms(10);
				}
				
				if(gStatus)
     42a:	80 91 d7 13 	lds	r24, 0x13D7
     42e:	88 23       	and	r24, r24
     430:	69 f0       	breq	.+26     	; 0x44c <autonomouswalk_walk+0x186>
				{
					TWI_send_string_fixed_length(C_ADDRESS, "Climb done", 10);
     432:	4a e0       	ldi	r20, 0x0A	; 10
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	60 ec       	ldi	r22, 0xC0	; 192
     438:	71 e1       	ldi	r23, 0x11	; 17
     43a:	80 e8       	ldi	r24, 0x80	; 128
     43c:	2b d7       	rcall	.+3670   	; 0x1294 <TWI_send_string_fixed_length>
     43e:	06 c0       	rjmp	.+12     	; 0x44c <autonomouswalk_walk+0x186>
				}
			}
			else
			{
				walk_forward();
     440:	95 de       	rcall	.-726    	; 0x16c <walk_forward>
				may_turn_left = 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 01 01 	sts	0x0101, r24
				may_turn_right = 1;
     448:	80 93 00 01 	sts	0x0100, r24
			}
			decisionCounter = 0;
     44c:	10 92 d6 13 	sts	0x13D6, r1
     450:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 2)
     452:	ae d1       	rcall	.+860    	; 0x7b0 <navigation_check_left_turn>
     454:	82 30       	cpi	r24, 0x02	; 2
     456:	91 f4       	brne	.+36     	; 0x47c <autonomouswalk_walk+0x1b6>
		{
			if(may_turn_left)
     458:	80 91 01 01 	lds	r24, 0x0101
     45c:	88 23       	and	r24, r24
     45e:	39 f0       	breq	.+14     	; 0x46e <autonomouswalk_walk+0x1a8>
			{
				turn_left();
     460:	06 df       	rcall	.-500    	; 0x26e <turn_left>
				may_turn_left = 0;
     462:	10 92 01 01 	sts	0x0101, r1
				may_turn_right = 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 00 01 	sts	0x0100, r24
     46c:	04 c0       	rjmp	.+8      	; 0x476 <autonomouswalk_walk+0x1b0>
			}
			else
			{
				walk_forward();
     46e:	7e de       	rcall	.-772    	; 0x16c <walk_forward>
				may_turn_left = 1;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 01 01 	sts	0x0101, r24
			}
			decisionCounter = 0;
     476:	10 92 d6 13 	sts	0x13D6, r1
     47a:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0  && navigation_get_sensor(4) < 40)
     47c:	99 d1       	rcall	.+818    	; 0x7b0 <navigation_check_left_turn>
     47e:	81 11       	cpse	r24, r1
     480:	0c c0       	rjmp	.+24     	; 0x49a <autonomouswalk_walk+0x1d4>
     482:	86 d1       	rcall	.+780    	; 0x790 <navigation_check_right_turn>
     484:	81 11       	cpse	r24, r1
     486:	09 c0       	rjmp	.+18     	; 0x49a <autonomouswalk_walk+0x1d4>
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	11 d1       	rcall	.+546    	; 0x6b0 <navigation_get_sensor>
     48e:	88 32       	cpi	r24, 0x28	; 40
     490:	20 f4       	brcc	.+8      	; 0x49a <autonomouswalk_walk+0x1d4>
		{
			turn_around();
     492:	47 de       	rcall	.-882    	; 0x122 <turn_around>
			decisionCounter = 0;
     494:	10 92 d6 13 	sts	0x13D6, r1
     498:	08 95       	ret
		}
		else if(decisionCounter < 10)
     49a:	80 91 d6 13 	lds	r24, 0x13D6
     49e:	8a 30       	cpi	r24, 0x0A	; 10
     4a0:	38 f4       	brcc	.+14     	; 0x4b0 <autonomouswalk_walk+0x1ea>
		{
			walk_forward();
     4a2:	64 de       	rcall	.-824    	; 0x16c <walk_forward>
			++decisionCounter;
     4a4:	80 91 d6 13 	lds	r24, 0x13D6
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	80 93 d6 13 	sts	0x13D6, r24
     4ae:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     4b0:	10 92 d6 13 	sts	0x13D6, r1
			navigation_set_autonomous_walk(0);
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	c0 d0       	rcall	.+384    	; 0x638 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     4b8:	49 e3       	ldi	r20, 0x39	; 57
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	6b ec       	ldi	r22, 0xCB	; 203
     4be:	71 e1       	ldi	r23, 0x11	; 17
     4c0:	80 e8       	ldi	r24, 0x80	; 128
     4c2:	e8 c6       	rjmp	.+3536   	; 0x1294 <TWI_send_string_fixed_length>
		{
			if(may_turn_left)
			{
				for(int i = 0;i < TURN_ENTRY_ITTERATIONS_LEFT; ++i)
				{
					walk_forward();
     4c4:	53 de       	rcall	.-858    	; 0x16c <walk_forward>
				}
				turn_left();
     4c6:	d3 de       	rcall	.-602    	; 0x26e <turn_left>
				may_turn_left = 0;
     4c8:	10 92 01 01 	sts	0x0101, r1
				may_turn_right = 1;
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	80 93 00 01 	sts	0x0100, r24
     4d2:	09 cf       	rjmp	.-494    	; 0x2e6 <autonomouswalk_walk+0x20>
		{
			if(may_turn_right)			
			{
				for(int i = 0;i < TURN_ENTRY_ITTERATIONS_RIGHT; ++i)
				{
					walk_forward();
     4d4:	4b de       	rcall	.-874    	; 0x16c <walk_forward>
				}
				turn_right();
     4d6:	a2 de       	rcall	.-700    	; 0x21c <turn_right>
				may_turn_right = 0;
     4d8:	10 92 00 01 	sts	0x0100, r1
				may_turn_left = 1;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 01 01 	sts	0x0101, r24
     4e2:	7e cf       	rjmp	.-260    	; 0x3e0 <autonomouswalk_walk+0x11a>

000004e4 <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     4e4:	bc 01       	movw	r22, r24
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 12 11 	call	0x2224	; 0x2224 <__floatunsisf>
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	4a e7       	ldi	r20, 0x7A	; 122
     4f4:	51 e4       	ldi	r21, 0x41	; 65
     4f6:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     4fa:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fixunssfsi>
	OCR1A = delay;
     4fe:	70 93 89 00 	sts	0x0089, r23
     502:	60 93 88 00 	sts	0x0088, r22
     506:	08 95       	ret

00000508 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     508:	bc 01       	movw	r22, r24
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 12 11 	call	0x2224	; 0x2224 <__floatunsisf>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	4a e7       	ldi	r20, 0x7A	; 122
     518:	51 e4       	ldi	r21, 0x41	; 65
     51a:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     51e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fixunssfsi>
	OCR3A = delay;
     522:	70 93 99 00 	sts	0x0099, r23
     526:	60 93 98 00 	sts	0x0098, r22
     52a:	08 95       	ret

0000052c <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     52c:	e1 e8       	ldi	r30, 0x81	; 129
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	85 60       	ori	r24, 0x05	; 5
     534:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     536:	e1 e9       	ldi	r30, 0x91	; 145
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	85 60       	ori	r24, 0x05	; 5
     53e:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     540:	88 ee       	ldi	r24, 0xE8	; 232
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	cf df       	rcall	.-98     	; 0x4e4 <set_counter_1>
	set_counter_2(1000);
     546:	88 ee       	ldi	r24, 0xE8	; 232
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	de df       	rcall	.-68     	; 0x508 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     54c:	ef e6       	ldi	r30, 0x6F	; 111
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	80 81       	ld	r24, Z
     552:	82 60       	ori	r24, 0x02	; 2
     554:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     556:	e1 e7       	ldi	r30, 0x71	; 113
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	82 60       	ori	r24, 0x02	; 2
     55e:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     560:	10 92 85 00 	sts	0x0085, r1
     564:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     568:	10 92 95 00 	sts	0x0095, r1
     56c:	10 92 94 00 	sts	0x0094, r1
     570:	08 95       	ret

00000572 <FifoDataLength>:
     572:	fc 01       	movw	r30, r24
     574:	90 81       	ld	r25, Z
     576:	91 50       	subi	r25, 0x01	; 1
     578:	84 81       	ldd	r24, Z+4	; 0x04
     57a:	22 81       	ldd	r18, Z+2	; 0x02
     57c:	82 1b       	sub	r24, r18
     57e:	89 23       	and	r24, r25
     580:	08 95       	ret

00000582 <FifoWrite>:
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	ec 01       	movw	r28, r24
     58a:	16 2f       	mov	r17, r22
     58c:	f2 df       	rcall	.-28     	; 0x572 <FifoDataLength>
     58e:	28 81       	ld	r18, Y
     590:	39 81       	ldd	r19, Y+1	; 0x01
     592:	21 50       	subi	r18, 0x01	; 1
     594:	31 09       	sbc	r19, r1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	82 17       	cp	r24, r18
     59a:	93 07       	cpc	r25, r19
     59c:	69 f0       	breq	.+26     	; 0x5b8 <FifoWrite+0x36>
     59e:	8c 81       	ldd	r24, Y+4	; 0x04
     5a0:	9d 81       	ldd	r25, Y+5	; 0x05
     5a2:	fe 01       	movw	r30, r28
     5a4:	e8 0f       	add	r30, r24
     5a6:	f9 1f       	adc	r31, r25
     5a8:	16 83       	std	Z+6, r17	; 0x06
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	28 23       	and	r18, r24
     5ae:	39 23       	and	r19, r25
     5b0:	3d 83       	std	Y+5, r19	; 0x05
     5b2:	2c 83       	std	Y+4, r18	; 0x04
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	01 c0       	rjmp	.+2      	; 0x5ba <FifoWrite+0x38>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	08 95       	ret

000005c2 <FifoRead>:
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	ec 01       	movw	r28, r24
     5cc:	8b 01       	movw	r16, r22
     5ce:	d1 df       	rcall	.-94     	; 0x572 <FifoDataLength>
     5d0:	88 23       	and	r24, r24
     5d2:	a1 f0       	breq	.+40     	; 0x5fc <FifoRead+0x3a>
     5d4:	ea 81       	ldd	r30, Y+2	; 0x02
     5d6:	fb 81       	ldd	r31, Y+3	; 0x03
     5d8:	ec 0f       	add	r30, r28
     5da:	fd 1f       	adc	r31, r29
     5dc:	86 81       	ldd	r24, Z+6	; 0x06
     5de:	f8 01       	movw	r30, r16
     5e0:	80 83       	st	Z, r24
     5e2:	28 81       	ld	r18, Y
     5e4:	39 81       	ldd	r19, Y+1	; 0x01
     5e6:	21 50       	subi	r18, 0x01	; 1
     5e8:	31 09       	sbc	r19, r1
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	9b 81       	ldd	r25, Y+3	; 0x03
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	82 23       	and	r24, r18
     5f2:	93 23       	and	r25, r19
     5f4:	9b 83       	std	Y+3, r25	; 0x03
     5f6:	8a 83       	std	Y+2, r24	; 0x02
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <FifoRead+0x3c>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     608:	68 2f       	mov	r22, r24
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 12 11 	call	0x2224	; 0x2224 <__floatunsisf>
     614:	60 93 04 01 	sts	0x0104, r22
     618:	70 93 05 01 	sts	0x0105, r23
     61c:	80 93 06 01 	sts	0x0106, r24
     620:	90 93 07 01 	sts	0x0107, r25
     624:	08 95       	ret

00000626 <navigation_left_algorithm>:
     626:	80 91 08 01 	lds	r24, 0x0108
     62a:	08 95       	ret

0000062c <navigation_set_algorithm>:
     62c:	80 93 08 01 	sts	0x0108, r24
     630:	08 95       	ret

00000632 <navigation_autonomous_walk>:
     632:	80 91 03 01 	lds	r24, 0x0103
     636:	08 95       	ret

00000638 <navigation_set_autonomous_walk>:
     638:	80 93 03 01 	sts	0x0103, r24
     63c:	08 95       	ret

0000063e <navigation_stepping_delay>:
     63e:	08 c0       	rjmp	.+16     	; 0x650 <navigation_stepping_delay+0x12>
     640:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <USART_decode_rx_fifo>
     644:	8f e3       	ldi	r24, 0x3F	; 63
     646:	9c e9       	ldi	r25, 0x9C	; 156
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <navigation_stepping_delay+0xa>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <navigation_stepping_delay+0x10>
     64e:	00 00       	nop
     650:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <USART_ready>
     654:	88 23       	and	r24, r24
     656:	a1 f3       	breq	.-24     	; 0x640 <navigation_stepping_delay+0x2>
     658:	08 95       	ret

0000065a <navigation_fill_buffer>:
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	c0 e0       	ldi	r28, 0x00	; 0
     664:	d0 e0       	ldi	r29, 0x00	; 0
     666:	00 91 d9 13 	lds	r16, 0x13D9
     66a:	10 e0       	ldi	r17, 0x00	; 0
     66c:	ce 01       	movw	r24, r28
     66e:	9d d6       	rcall	.+3386   	; 0x13aa <TWI_get_sensor>
     670:	fe 01       	movw	r30, r28
     672:	ee 0f       	add	r30, r30
     674:	ff 1f       	adc	r31, r31
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	ec 0f       	add	r30, r28
     67c:	fd 1f       	adc	r31, r29
     67e:	0e 0f       	add	r16, r30
     680:	1f 1f       	adc	r17, r31
     682:	f8 01       	movw	r30, r16
     684:	e3 50       	subi	r30, 0x03	; 3
     686:	fc 4e       	sbci	r31, 0xEC	; 236
     688:	80 83       	st	Z, r24
     68a:	21 96       	adiw	r28, 0x01	; 1
     68c:	c8 30       	cpi	r28, 0x08	; 8
     68e:	d1 05       	cpc	r29, r1
     690:	51 f7       	brne	.-44     	; 0x666 <navigation_fill_buffer+0xc>
     692:	80 91 d9 13 	lds	r24, 0x13D9
     696:	84 30       	cpi	r24, 0x04	; 4
     698:	19 f4       	brne	.+6      	; 0x6a0 <navigation_fill_buffer+0x46>
     69a:	10 92 d9 13 	sts	0x13D9, r1
     69e:	03 c0       	rjmp	.+6      	; 0x6a6 <navigation_fill_buffer+0x4c>
     6a0:	8f 5f       	subi	r24, 0xFF	; 255
     6a2:	80 93 d9 13 	sts	0x13D9, r24
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <navigation_get_sensor>:
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <navigation_get_sensor+0x6>
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <navigation_get_sensor+0x8>
     6b8:	1f 92       	push	r1
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	fc 01       	movw	r30, r24
     6c0:	ee 0f       	add	r30, r30
     6c2:	ff 1f       	adc	r31, r31
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	8e 0f       	add	r24, r30
     6ca:	9f 1f       	adc	r25, r31
     6cc:	fc 01       	movw	r30, r24
     6ce:	e3 50       	subi	r30, 0x03	; 3
     6d0:	fc 4e       	sbci	r31, 0xEC	; 236
     6d2:	80 81       	ld	r24, Z
     6d4:	89 83       	std	Y+1, r24	; 0x01
     6d6:	81 81       	ldd	r24, Z+1	; 0x01
     6d8:	8a 83       	std	Y+2, r24	; 0x02
     6da:	82 81       	ldd	r24, Z+2	; 0x02
     6dc:	8b 83       	std	Y+3, r24	; 0x03
     6de:	83 81       	ldd	r24, Z+3	; 0x03
     6e0:	8c 83       	std	Y+4, r24	; 0x04
     6e2:	84 81       	ldd	r24, Z+4	; 0x04
     6e4:	8d 83       	std	Y+5, r24	; 0x05
     6e6:	24 e0       	ldi	r18, 0x04	; 4
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	0e c0       	rjmp	.+28     	; 0x708 <navigation_get_sensor+0x58>
     6ec:	41 91       	ld	r20, Z+
     6ee:	50 81       	ld	r21, Z
     6f0:	54 17       	cp	r21, r20
     6f2:	20 f4       	brcc	.+8      	; 0x6fc <navigation_get_sensor+0x4c>
     6f4:	df 01       	movw	r26, r30
     6f6:	11 97       	sbiw	r26, 0x01	; 1
     6f8:	5c 93       	st	X, r21
     6fa:	40 83       	st	Z, r20
     6fc:	8e 17       	cp	r24, r30
     6fe:	9f 07       	cpc	r25, r31
     700:	a9 f7       	brne	.-22     	; 0x6ec <navigation_get_sensor+0x3c>
     702:	21 50       	subi	r18, 0x01	; 1
     704:	31 09       	sbc	r19, r1
     706:	49 f0       	breq	.+18     	; 0x71a <navigation_get_sensor+0x6a>
     708:	12 16       	cp	r1, r18
     70a:	13 06       	cpc	r1, r19
     70c:	d4 f7       	brge	.-12     	; 0x702 <navigation_get_sensor+0x52>
     70e:	fe 01       	movw	r30, r28
     710:	31 96       	adiw	r30, 0x01	; 1
     712:	cf 01       	movw	r24, r30
     714:	82 0f       	add	r24, r18
     716:	93 1f       	adc	r25, r19
     718:	e9 cf       	rjmp	.-46     	; 0x6ec <navigation_get_sensor+0x3c>
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(7) < HEIGHT_LIMIT)
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	bf df       	rcall	.-130    	; 0x6b0 <navigation_get_sensor>
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	88 32       	cpi	r24, 0x28	; 40
     736:	08 f0       	brcs	.+2      	; 0x73a <navigation_detect_low_pass_obsticle+0xe>
     738:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     73a:	89 2f       	mov	r24, r25
     73c:	08 95       	ret

0000073e <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     73e:	f6 df       	rcall	.-20     	; 0x72c <navigation_detect_low_pass_obsticle>
     740:	88 23       	and	r24, r24
     742:	01 f1       	breq	.+64     	; 0x784 <navigation_low_pass_obstacle+0x46>
     744:	80 91 d8 13 	lds	r24, 0x13D8
     748:	81 11       	cpse	r24, r1
     74a:	1c c0       	rjmp	.+56     	; 0x784 <navigation_low_pass_obstacle+0x46>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     74c:	4b e1       	ldi	r20, 0x1B	; 27
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	65 e0       	ldi	r22, 0x05	; 5
     752:	72 e1       	ldi	r23, 0x12	; 18
     754:	80 e4       	ldi	r24, 0x40	; 64
     756:	9e d5       	rcall	.+2876   	; 0x1294 <TWI_send_string_fixed_length>
     758:	2f ef       	ldi	r18, 0xFF	; 255
     75a:	86 e7       	ldi	r24, 0x76	; 118
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	21 50       	subi	r18, 0x01	; 1
     760:	80 40       	sbci	r24, 0x00	; 0
     762:	90 40       	sbci	r25, 0x00	; 0
     764:	e1 f7       	brne	.-8      	; 0x75e <navigation_low_pass_obstacle+0x20>
     766:	00 c0       	rjmp	.+0      	; 0x768 <navigation_low_pass_obstacle+0x2a>
     768:	00 00       	nop
		_delay_ms(30);
		if(autonomouswalk_get_return_status())
     76a:	d8 dc       	rcall	.-1616   	; 0x11c <autonomouswalk_get_return_status>
     76c:	89 2b       	or	r24, r25
     76e:	31 f0       	breq	.+12     	; 0x77c <navigation_low_pass_obstacle+0x3e>
		{
			TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);	
     770:	4b e1       	ldi	r20, 0x1B	; 27
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	65 e0       	ldi	r22, 0x05	; 5
     776:	72 e1       	ldi	r23, 0x12	; 18
     778:	80 e8       	ldi	r24, 0x80	; 128
     77a:	8c d5       	rcall	.+2840   	; 0x1294 <TWI_send_string_fixed_length>
		}
		lowPassObstacleFlag = 1;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 d8 13 	sts	0x13D8, r24
     782:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     784:	d3 df       	rcall	.-90     	; 0x72c <navigation_detect_low_pass_obsticle>
     786:	81 11       	cpse	r24, r1
     788:	02 c0       	rjmp	.+4      	; 0x78e <navigation_low_pass_obstacle+0x50>
	{
		lowPassObstacleFlag = 0;
     78a:	10 92 d8 13 	sts	0x13D8, r1
     78e:	08 95       	ret

00000790 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20))
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	8d df       	rcall	.-230    	; 0x6b0 <navigation_get_sensor>
     796:	8c 33       	cpi	r24, 0x3C	; 60
     798:	40 f4       	brcc	.+16     	; 0x7aa <navigation_check_right_turn+0x1a>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 10))
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	88 df       	rcall	.-240    	; 0x6b0 <navigation_get_sensor>
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	82 33       	cpi	r24, 0x32	; 50
     7a4:	18 f4       	brcc	.+6      	; 0x7ac <navigation_check_right_turn+0x1c>
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <navigation_check_right_turn+0x1c>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     7aa:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     7ac:	89 2f       	mov	r24, r25
     7ae:	08 95       	ret

000007b0 <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20))
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	7d df       	rcall	.-262    	; 0x6b0 <navigation_get_sensor>
     7b6:	8c 33       	cpi	r24, 0x3C	; 60
     7b8:	40 f4       	brcc	.+16     	; 0x7ca <navigation_check_left_turn+0x1a>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 10))
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	78 df       	rcall	.-272    	; 0x6b0 <navigation_get_sensor>
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	82 33       	cpi	r24, 0x32	; 50
     7c4:	18 f4       	brcc	.+6      	; 0x7cc <navigation_check_left_turn+0x1c>
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <navigation_check_left_turn+0x1c>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     7ca:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     7cc:	89 2f       	mov	r24, r25
     7ce:	08 95       	ret

000007d0 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	6b 01       	movw	r12, r22
     7de:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     7e0:	80 91 08 01 	lds	r24, 0x0108
     7e4:	88 23       	and	r24, r24
     7e6:	09 f4       	brne	.+2      	; 0x7ea <navigation_direction_regulation+0x1a>
     7e8:	a5 c0       	rjmp	.+330    	; 0x934 <navigation_direction_regulation+0x164>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	60 df       	rcall	.-320    	; 0x6b0 <navigation_get_sensor>
     7f0:	c8 2f       	mov	r28, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	5c df       	rcall	.-328    	; 0x6b0 <navigation_get_sensor>
     7f8:	2c 2f       	mov	r18, r28
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	a9 01       	movw	r20, r18
     7fe:	48 1b       	sub	r20, r24
     800:	51 09       	sbc	r21, r1
     802:	ca 01       	movw	r24, r20
     804:	99 23       	and	r25, r25
     806:	1c f4       	brge	.+6      	; 0x80e <navigation_direction_regulation+0x3e>
     808:	91 95       	neg	r25
     80a:	81 95       	neg	r24
     80c:	91 09       	sbc	r25, r1
     80e:	0a 97       	sbiw	r24, 0x0a	; 10
     810:	0c f0       	brlt	.+2      	; 0x814 <navigation_direction_regulation+0x44>
     812:	3c c0       	rjmp	.+120    	; 0x88c <navigation_direction_regulation+0xbc>
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	4b df       	rcall	.-362    	; 0x6b0 <navigation_get_sensor>
     81a:	82 33       	cpi	r24, 0x32	; 50
     81c:	b8 f5       	brcc	.+110    	; 0x88c <navigation_direction_regulation+0xbc>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE - LEFT_SIDE_OFFSET) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	46 df       	rcall	.-372    	; 0x6b0 <navigation_get_sensor>
     824:	c8 2f       	mov	r28, r24
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	42 df       	rcall	.-380    	; 0x6b0 <navigation_get_sensor>
     82c:	d8 2f       	mov	r29, r24
     82e:	c7 01       	movw	r24, r14
     830:	b6 01       	movw	r22, r12
     832:	0e 94 76 10 	call	0x20ec	; 0x20ec <cos>
     836:	6b 01       	movw	r12, r22
     838:	7c 01       	movw	r14, r24
     83a:	6d 2f       	mov	r22, r29
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	6c 0f       	add	r22, r28
     840:	71 1d       	adc	r23, r1
     842:	88 27       	eor	r24, r24
     844:	77 fd       	sbrc	r23, 7
     846:	80 95       	com	r24
     848:	98 2f       	mov	r25, r24
     84a:	0e 94 14 11 	call	0x2228	; 0x2228 <__floatsisf>
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     85a:	26 e6       	ldi	r18, 0x66	; 102
     85c:	36 e6       	ldi	r19, 0x66	; 102
     85e:	46 ed       	ldi	r20, 0xD6	; 214
     860:	50 e4       	ldi	r21, 0x40	; 64
     862:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__addsf3>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 ea       	ldi	r20, 0xA0	; 160
     86c:	50 e4       	ldi	r21, 0x40	; 64
     86e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__subsf3>
     872:	a7 01       	movw	r20, r14
     874:	96 01       	movw	r18, r12
     876:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e2       	ldi	r20, 0x20	; 32
     880:	52 e4       	ldi	r21, 0x42	; 66
     882:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__subsf3>
     886:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__fixsfsi>
     88a:	f8 c0       	rjmp	.+496    	; 0xa7c <navigation_direction_regulation+0x2ac>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0f df       	rcall	.-482    	; 0x6b0 <navigation_get_sensor>
     892:	c8 2f       	mov	r28, r24
     894:	83 e0       	ldi	r24, 0x03	; 3
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0b df       	rcall	.-490    	; 0x6b0 <navigation_get_sensor>
     89a:	2c 2f       	mov	r18, r28
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	a9 01       	movw	r20, r18
     8a0:	48 1b       	sub	r20, r24
     8a2:	51 09       	sbc	r21, r1
     8a4:	ca 01       	movw	r24, r20
     8a6:	99 23       	and	r25, r25
     8a8:	1c f4       	brge	.+6      	; 0x8b0 <navigation_direction_regulation+0xe0>
     8aa:	91 95       	neg	r25
     8ac:	81 95       	neg	r24
     8ae:	91 09       	sbc	r25, r1
     8b0:	0a 97       	sbiw	r24, 0x0a	; 10
     8b2:	0c f0       	brlt	.+2      	; 0x8b6 <navigation_direction_regulation+0xe6>
     8b4:	34 c1       	rjmp	.+616    	; 0xb1e <navigation_direction_regulation+0x34e>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	fa de       	rcall	.-524    	; 0x6b0 <navigation_get_sensor>
     8bc:	82 33       	cpi	r24, 0x32	; 50
     8be:	08 f0       	brcs	.+2      	; 0x8c2 <navigation_direction_regulation+0xf2>
     8c0:	2e c1       	rjmp	.+604    	; 0xb1e <navigation_direction_regulation+0x34e>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE - RIGHT_SIDE_OFFSET) * cosf(angleOffset);
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	f4 de       	rcall	.-536    	; 0x6b0 <navigation_get_sensor>
     8c8:	c8 2f       	mov	r28, r24
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	f0 de       	rcall	.-544    	; 0x6b0 <navigation_get_sensor>
     8d0:	d8 2f       	mov	r29, r24
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 76 10 	call	0x20ec	; 0x20ec <cos>
     8da:	6b 01       	movw	r12, r22
     8dc:	7c 01       	movw	r14, r24
     8de:	6d 2f       	mov	r22, r29
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	6c 0f       	add	r22, r28
     8e4:	71 1d       	adc	r23, r1
     8e6:	88 27       	eor	r24, r24
     8e8:	77 fd       	sbrc	r23, 7
     8ea:	80 95       	com	r24
     8ec:	98 2f       	mov	r25, r24
     8ee:	0e 94 14 11 	call	0x2228	; 0x2228 <__floatsisf>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	5f e3       	ldi	r21, 0x3F	; 63
     8fa:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     8fe:	26 e6       	ldi	r18, 0x66	; 102
     900:	36 e6       	ldi	r19, 0x66	; 102
     902:	46 ed       	ldi	r20, 0xD6	; 214
     904:	50 e4       	ldi	r21, 0x40	; 64
     906:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__addsf3>
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 ea       	ldi	r20, 0xA0	; 160
     910:	50 e4       	ldi	r21, 0x40	; 64
     912:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__subsf3>
     916:	a7 01       	movw	r20, r14
     918:	96 01       	movw	r18, r12
     91a:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	80 e2       	ldi	r24, 0x20	; 32
     928:	92 e4       	ldi	r25, 0x42	; 66
     92a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__subsf3>
     92e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__fixsfsi>
     932:	a4 c0       	rjmp	.+328    	; 0xa7c <navigation_direction_regulation+0x2ac>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	bb de       	rcall	.-650    	; 0x6b0 <navigation_get_sensor>
     93a:	c8 2f       	mov	r28, r24
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	b7 de       	rcall	.-658    	; 0x6b0 <navigation_get_sensor>
     942:	2c 2f       	mov	r18, r28
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	a9 01       	movw	r20, r18
     948:	48 1b       	sub	r20, r24
     94a:	51 09       	sbc	r21, r1
     94c:	ca 01       	movw	r24, r20
     94e:	99 23       	and	r25, r25
     950:	1c f4       	brge	.+6      	; 0x958 <navigation_direction_regulation+0x188>
     952:	91 95       	neg	r25
     954:	81 95       	neg	r24
     956:	91 09       	sbc	r25, r1
     958:	0a 97       	sbiw	r24, 0x0a	; 10
     95a:	0c f0       	brlt	.+2      	; 0x95e <navigation_direction_regulation+0x18e>
     95c:	3e c0       	rjmp	.+124    	; 0x9da <navigation_direction_regulation+0x20a>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a6 de       	rcall	.-692    	; 0x6b0 <navigation_get_sensor>
     964:	82 33       	cpi	r24, 0x32	; 50
     966:	c8 f5       	brcc	.+114    	; 0x9da <navigation_direction_regulation+0x20a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE - RIGHT_SIDE_OFFSET) * cosf(angleOffset);
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a1 de       	rcall	.-702    	; 0x6b0 <navigation_get_sensor>
     96e:	c8 2f       	mov	r28, r24
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	9d de       	rcall	.-710    	; 0x6b0 <navigation_get_sensor>
     976:	d8 2f       	mov	r29, r24
     978:	c7 01       	movw	r24, r14
     97a:	b6 01       	movw	r22, r12
     97c:	0e 94 76 10 	call	0x20ec	; 0x20ec <cos>
     980:	6b 01       	movw	r12, r22
     982:	7c 01       	movw	r14, r24
     984:	6d 2f       	mov	r22, r29
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	6c 0f       	add	r22, r28
     98a:	71 1d       	adc	r23, r1
     98c:	88 27       	eor	r24, r24
     98e:	77 fd       	sbrc	r23, 7
     990:	80 95       	com	r24
     992:	98 2f       	mov	r25, r24
     994:	0e 94 14 11 	call	0x2228	; 0x2228 <__floatsisf>
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	5f e3       	ldi	r21, 0x3F	; 63
     9a0:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     9a4:	26 e6       	ldi	r18, 0x66	; 102
     9a6:	36 e6       	ldi	r19, 0x66	; 102
     9a8:	46 ed       	ldi	r20, 0xD6	; 214
     9aa:	50 e4       	ldi	r21, 0x40	; 64
     9ac:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__addsf3>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 ea       	ldi	r20, 0xA0	; 160
     9b6:	50 e4       	ldi	r21, 0x40	; 64
     9b8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__subsf3>
     9bc:	a7 01       	movw	r20, r14
     9be:	96 01       	movw	r18, r12
     9c0:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     9c4:	9b 01       	movw	r18, r22
     9c6:	ac 01       	movw	r20, r24
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e2       	ldi	r24, 0x20	; 32
     9ce:	92 e4       	ldi	r25, 0x42	; 66
     9d0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__subsf3>
     9d4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__fixsfsi>
     9d8:	51 c0       	rjmp	.+162    	; 0xa7c <navigation_direction_regulation+0x2ac>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	68 de       	rcall	.-816    	; 0x6b0 <navigation_get_sensor>
     9e0:	c8 2f       	mov	r28, r24
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	64 de       	rcall	.-824    	; 0x6b0 <navigation_get_sensor>
     9e8:	2c 2f       	mov	r18, r28
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	a9 01       	movw	r20, r18
     9ee:	48 1b       	sub	r20, r24
     9f0:	51 09       	sbc	r21, r1
     9f2:	ca 01       	movw	r24, r20
     9f4:	99 23       	and	r25, r25
     9f6:	1c f4       	brge	.+6      	; 0x9fe <navigation_direction_regulation+0x22e>
     9f8:	91 95       	neg	r25
     9fa:	81 95       	neg	r24
     9fc:	91 09       	sbc	r25, r1
     9fe:	0a 97       	sbiw	r24, 0x0a	; 10
     a00:	0c f0       	brlt	.+2      	; 0xa04 <navigation_direction_regulation+0x234>
     a02:	8d c0       	rjmp	.+282    	; 0xb1e <navigation_direction_regulation+0x34e>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	53 de       	rcall	.-858    	; 0x6b0 <navigation_get_sensor>
     a0a:	82 33       	cpi	r24, 0x32	; 50
     a0c:	08 f0       	brcs	.+2      	; 0xa10 <navigation_direction_regulation+0x240>
     a0e:	87 c0       	rjmp	.+270    	; 0xb1e <navigation_direction_regulation+0x34e>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE - LEFT_SIDE_OFFSET) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	4d de       	rcall	.-870    	; 0x6b0 <navigation_get_sensor>
     a16:	c8 2f       	mov	r28, r24
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	49 de       	rcall	.-878    	; 0x6b0 <navigation_get_sensor>
     a1e:	d8 2f       	mov	r29, r24
     a20:	c7 01       	movw	r24, r14
     a22:	b6 01       	movw	r22, r12
     a24:	0e 94 76 10 	call	0x20ec	; 0x20ec <cos>
     a28:	6b 01       	movw	r12, r22
     a2a:	7c 01       	movw	r14, r24
     a2c:	6d 2f       	mov	r22, r29
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	6c 0f       	add	r22, r28
     a32:	71 1d       	adc	r23, r1
     a34:	88 27       	eor	r24, r24
     a36:	77 fd       	sbrc	r23, 7
     a38:	80 95       	com	r24
     a3a:	98 2f       	mov	r25, r24
     a3c:	0e 94 14 11 	call	0x2228	; 0x2228 <__floatsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	5f e3       	ldi	r21, 0x3F	; 63
     a48:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     a4c:	26 e6       	ldi	r18, 0x66	; 102
     a4e:	36 e6       	ldi	r19, 0x66	; 102
     a50:	46 ed       	ldi	r20, 0xD6	; 214
     a52:	50 e4       	ldi	r21, 0x40	; 64
     a54:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__addsf3>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 ea       	ldi	r20, 0xA0	; 160
     a5e:	50 e4       	ldi	r21, 0x40	; 64
     a60:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__subsf3>
     a64:	a7 01       	movw	r20, r14
     a66:	96 01       	movw	r18, r12
     a68:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e2       	ldi	r20, 0x20	; 32
     a72:	52 e4       	ldi	r21, 0x42	; 66
     a74:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__subsf3>
     a78:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     a7c:	cb 01       	movw	r24, r22
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	03 97       	sbiw	r24, 0x03	; 3
     a82:	08 f4       	brcc	.+2      	; 0xa86 <navigation_direction_regulation+0x2b6>
     a84:	47 c0       	rjmp	.+142    	; 0xb14 <navigation_direction_regulation+0x344>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     a86:	88 27       	eor	r24, r24
     a88:	77 fd       	sbrc	r23, 7
     a8a:	80 95       	com	r24
     a8c:	98 2f       	mov	r25, r24
     a8e:	0e 94 14 11 	call	0x2228	; 0x2228 <__floatsisf>
     a92:	20 91 04 01 	lds	r18, 0x0104
     a96:	30 91 05 01 	lds	r19, 0x0105
     a9a:	40 91 06 01 	lds	r20, 0x0106
     a9e:	50 91 07 01 	lds	r21, 0x0107
     aa2:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     aa6:	0e 94 4a 10 	call	0x2094	; 0x2094 <atan>
     aaa:	c6 2e       	mov	r12, r22
     aac:	d7 2e       	mov	r13, r23
     aae:	e8 2e       	mov	r14, r24
     ab0:	f9 2e       	mov	r15, r25
		if(dir < 0)
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	a9 01       	movw	r20, r18
     ab8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__cmpsf2>
     abc:	88 23       	and	r24, r24
     abe:	7c f4       	brge	.+30     	; 0xade <navigation_direction_regulation+0x30e>
		{
			dir += 2*PI;
     ac0:	2b ed       	ldi	r18, 0xDB	; 219
     ac2:	3f e0       	ldi	r19, 0x0F	; 15
     ac4:	49 ec       	ldi	r20, 0xC9	; 201
     ac6:	50 e4       	ldi	r21, 0x40	; 64
     ac8:	6c 2d       	mov	r22, r12
     aca:	7d 2d       	mov	r23, r13
     acc:	8e 2d       	mov	r24, r14
     ace:	9f 2d       	mov	r25, r15
     ad0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__addsf3>
     ad4:	c6 2e       	mov	r12, r22
     ad6:	d7 2e       	mov	r13, r23
     ad8:	e8 2e       	mov	r14, r24
     ada:	f9 2e       	mov	r15, r25
     adc:	24 c0       	rjmp	.+72     	; 0xb26 <navigation_direction_regulation+0x356>
		} else if(dir >= 2*PI)
     ade:	2b ed       	ldi	r18, 0xDB	; 219
     ae0:	3f e0       	ldi	r19, 0x0F	; 15
     ae2:	49 ec       	ldi	r20, 0xC9	; 201
     ae4:	50 e4       	ldi	r21, 0x40	; 64
     ae6:	6c 2d       	mov	r22, r12
     ae8:	7d 2d       	mov	r23, r13
     aea:	8e 2d       	mov	r24, r14
     aec:	9f 2d       	mov	r25, r15
     aee:	0e 94 22 12 	call	0x2444	; 0x2444 <__gesf2>
     af2:	88 23       	and	r24, r24
     af4:	c4 f0       	brlt	.+48     	; 0xb26 <navigation_direction_regulation+0x356>
		{
			dir -= 2*PI;
     af6:	2b ed       	ldi	r18, 0xDB	; 219
     af8:	3f e0       	ldi	r19, 0x0F	; 15
     afa:	49 ec       	ldi	r20, 0xC9	; 201
     afc:	50 e4       	ldi	r21, 0x40	; 64
     afe:	6c 2d       	mov	r22, r12
     b00:	7d 2d       	mov	r23, r13
     b02:	8e 2d       	mov	r24, r14
     b04:	9f 2d       	mov	r25, r15
     b06:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__subsf3>
     b0a:	c6 2e       	mov	r12, r22
     b0c:	d7 2e       	mov	r13, r23
     b0e:	e8 2e       	mov	r14, r24
     b10:	f9 2e       	mov	r15, r25
     b12:	09 c0       	rjmp	.+18     	; 0xb26 <navigation_direction_regulation+0x356>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     b14:	c1 2c       	mov	r12, r1
     b16:	d1 2c       	mov	r13, r1
     b18:	e1 2c       	mov	r14, r1
     b1a:	f1 2c       	mov	r15, r1
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <navigation_direction_regulation+0x356>
     b1e:	c1 2c       	mov	r12, r1
     b20:	d1 2c       	mov	r13, r1
     b22:	e1 2c       	mov	r14, r1
     b24:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     b26:	6c 2d       	mov	r22, r12
     b28:	7d 2d       	mov	r23, r13
     b2a:	8e 2d       	mov	r24, r14
     b2c:	9f 2d       	mov	r25, r15
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	08 95       	ret

00000b3c <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     b44:	80 91 08 01 	lds	r24, 0x0108
     b48:	88 23       	and	r24, r24
     b4a:	09 f4       	brne	.+2      	; 0xb4e <navigation_angle_offset+0x12>
     b4c:	6c c0       	rjmp	.+216    	; 0xc26 <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 20))
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	ae dd       	rcall	.-1188   	; 0x6b0 <navigation_get_sensor>
     b54:	f8 2e       	mov	r15, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	aa dd       	rcall	.-1196   	; 0x6b0 <navigation_get_sensor>
     b5c:	2f 2d       	mov	r18, r15
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	a9 01       	movw	r20, r18
     b62:	48 1b       	sub	r20, r24
     b64:	51 09       	sbc	r21, r1
     b66:	ca 01       	movw	r24, r20
     b68:	99 23       	and	r25, r25
     b6a:	1c f4       	brge	.+6      	; 0xb72 <navigation_angle_offset+0x36>
     b6c:	91 95       	neg	r25
     b6e:	81 95       	neg	r24
     b70:	91 09       	sbc	r25, r1
     b72:	0a 97       	sbiw	r24, 0x0a	; 10
     b74:	0c f5       	brge	.+66     	; 0xbb8 <navigation_angle_offset+0x7c>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	9a dd       	rcall	.-1228   	; 0x6b0 <navigation_get_sensor>
     b7c:	8c 33       	cpi	r24, 0x3C	; 60
     b7e:	e0 f4       	brcc	.+56     	; 0xbb8 <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	95 dd       	rcall	.-1238   	; 0x6b0 <navigation_get_sensor>
     b86:	f8 2e       	mov	r15, r24
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	91 dd       	rcall	.-1246   	; 0x6b0 <navigation_get_sensor>
     b8e:	6f 2d       	mov	r22, r15
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	68 1b       	sub	r22, r24
     b94:	71 09       	sbc	r23, r1
     b96:	88 27       	eor	r24, r24
     b98:	77 fd       	sbrc	r23, 7
     b9a:	80 95       	com	r24
     b9c:	98 2f       	mov	r25, r24
     b9e:	0e 94 14 11 	call	0x2228	; 0x2228 <__floatsisf>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5d e3       	ldi	r21, 0x3D	; 61
     baa:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     bae:	0e 94 4a 10 	call	0x2094	; 0x2094 <atan>
     bb2:	6b 01       	movw	r12, r22
     bb4:	7c 01       	movw	r14, r24
     bb6:	a0 c0       	rjmp	.+320    	; 0xcf8 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 20))
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	79 dd       	rcall	.-1294   	; 0x6b0 <navigation_get_sensor>
     bbe:	f8 2e       	mov	r15, r24
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	75 dd       	rcall	.-1302   	; 0x6b0 <navigation_get_sensor>
     bc6:	2f 2d       	mov	r18, r15
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	a9 01       	movw	r20, r18
     bcc:	48 1b       	sub	r20, r24
     bce:	51 09       	sbc	r21, r1
     bd0:	ca 01       	movw	r24, r20
     bd2:	99 23       	and	r25, r25
     bd4:	1c f4       	brge	.+6      	; 0xbdc <navigation_angle_offset+0xa0>
     bd6:	91 95       	neg	r25
     bd8:	81 95       	neg	r24
     bda:	91 09       	sbc	r25, r1
     bdc:	0a 97       	sbiw	r24, 0x0a	; 10
     bde:	0c f0       	brlt	.+2      	; 0xbe2 <navigation_angle_offset+0xa6>
     be0:	9a c0       	rjmp	.+308    	; 0xd16 <navigation_angle_offset+0x1da>
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	64 dd       	rcall	.-1336   	; 0x6b0 <navigation_get_sensor>
     be8:	8c 33       	cpi	r24, 0x3C	; 60
     bea:	08 f0       	brcs	.+2      	; 0xbee <navigation_angle_offset+0xb2>
     bec:	94 c0       	rjmp	.+296    	; 0xd16 <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	5e dd       	rcall	.-1348   	; 0x6b0 <navigation_get_sensor>
     bf4:	f8 2e       	mov	r15, r24
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	5a dd       	rcall	.-1356   	; 0x6b0 <navigation_get_sensor>
     bfc:	6f 2d       	mov	r22, r15
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	68 1b       	sub	r22, r24
     c02:	71 09       	sbc	r23, r1
     c04:	88 27       	eor	r24, r24
     c06:	77 fd       	sbrc	r23, 7
     c08:	80 95       	com	r24
     c0a:	98 2f       	mov	r25, r24
     c0c:	0e 94 14 11 	call	0x2228	; 0x2228 <__floatsisf>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e8       	ldi	r20, 0x80	; 128
     c16:	5d e3       	ldi	r21, 0x3D	; 61
     c18:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     c1c:	0e 94 4a 10 	call	0x2094	; 0x2094 <atan>
     c20:	6b 01       	movw	r12, r22
     c22:	7c 01       	movw	r14, r24
     c24:	69 c0       	rjmp	.+210    	; 0xcf8 <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 20))
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	42 dd       	rcall	.-1404   	; 0x6b0 <navigation_get_sensor>
     c2c:	f8 2e       	mov	r15, r24
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	3e dd       	rcall	.-1412   	; 0x6b0 <navigation_get_sensor>
     c34:	2f 2d       	mov	r18, r15
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	a9 01       	movw	r20, r18
     c3a:	48 1b       	sub	r20, r24
     c3c:	51 09       	sbc	r21, r1
     c3e:	ca 01       	movw	r24, r20
     c40:	99 23       	and	r25, r25
     c42:	1c f4       	brge	.+6      	; 0xc4a <navigation_angle_offset+0x10e>
     c44:	91 95       	neg	r25
     c46:	81 95       	neg	r24
     c48:	91 09       	sbc	r25, r1
     c4a:	0a 97       	sbiw	r24, 0x0a	; 10
     c4c:	0c f5       	brge	.+66     	; 0xc90 <navigation_angle_offset+0x154>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	2e dd       	rcall	.-1444   	; 0x6b0 <navigation_get_sensor>
     c54:	8c 33       	cpi	r24, 0x3C	; 60
     c56:	e0 f4       	brcc	.+56     	; 0xc90 <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	29 dd       	rcall	.-1454   	; 0x6b0 <navigation_get_sensor>
     c5e:	f8 2e       	mov	r15, r24
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	25 dd       	rcall	.-1462   	; 0x6b0 <navigation_get_sensor>
     c66:	6f 2d       	mov	r22, r15
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	68 1b       	sub	r22, r24
     c6c:	71 09       	sbc	r23, r1
     c6e:	88 27       	eor	r24, r24
     c70:	77 fd       	sbrc	r23, 7
     c72:	80 95       	com	r24
     c74:	98 2f       	mov	r25, r24
     c76:	0e 94 14 11 	call	0x2228	; 0x2228 <__floatsisf>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e8       	ldi	r20, 0x80	; 128
     c80:	5d e3       	ldi	r21, 0x3D	; 61
     c82:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     c86:	0e 94 4a 10 	call	0x2094	; 0x2094 <atan>
     c8a:	6b 01       	movw	r12, r22
     c8c:	7c 01       	movw	r14, r24
     c8e:	34 c0       	rjmp	.+104    	; 0xcf8 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 20))
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0d dd       	rcall	.-1510   	; 0x6b0 <navigation_get_sensor>
     c96:	f8 2e       	mov	r15, r24
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	09 dd       	rcall	.-1518   	; 0x6b0 <navigation_get_sensor>
     c9e:	2f 2d       	mov	r18, r15
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	a9 01       	movw	r20, r18
     ca4:	48 1b       	sub	r20, r24
     ca6:	51 09       	sbc	r21, r1
     ca8:	ca 01       	movw	r24, r20
     caa:	99 23       	and	r25, r25
     cac:	1c f4       	brge	.+6      	; 0xcb4 <navigation_angle_offset+0x178>
     cae:	91 95       	neg	r25
     cb0:	81 95       	neg	r24
     cb2:	91 09       	sbc	r25, r1
     cb4:	0a 97       	sbiw	r24, 0x0a	; 10
     cb6:	7c f5       	brge	.+94     	; 0xd16 <navigation_angle_offset+0x1da>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	f9 dc       	rcall	.-1550   	; 0x6b0 <navigation_get_sensor>
     cbe:	8c 33       	cpi	r24, 0x3C	; 60
     cc0:	50 f5       	brcc	.+84     	; 0xd16 <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	f4 dc       	rcall	.-1560   	; 0x6b0 <navigation_get_sensor>
     cc8:	f8 2e       	mov	r15, r24
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	f0 dc       	rcall	.-1568   	; 0x6b0 <navigation_get_sensor>
     cd0:	6f 2d       	mov	r22, r15
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	68 1b       	sub	r22, r24
     cd6:	71 09       	sbc	r23, r1
     cd8:	88 27       	eor	r24, r24
     cda:	77 fd       	sbrc	r23, 7
     cdc:	80 95       	com	r24
     cde:	98 2f       	mov	r25, r24
     ce0:	0e 94 14 11 	call	0x2228	; 0x2228 <__floatsisf>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e8       	ldi	r20, 0x80	; 128
     cea:	5d e3       	ldi	r21, 0x3D	; 61
     cec:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsf3>
     cf0:	0e 94 4a 10 	call	0x2094	; 0x2094 <atan>
     cf4:	6b 01       	movw	r12, r22
     cf6:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     cf8:	c7 01       	movw	r24, r14
     cfa:	b6 01       	movw	r22, r12
     cfc:	9f 77       	andi	r25, 0x7F	; 127
     cfe:	29 e2       	ldi	r18, 0x29	; 41
     d00:	3c e5       	ldi	r19, 0x5C	; 92
     d02:	4f e8       	ldi	r20, 0x8F	; 143
     d04:	5d e3       	ldi	r21, 0x3D	; 61
     d06:	0e 94 22 12 	call	0x2444	; 0x2444 <__gesf2>
     d0a:	18 16       	cp	r1, r24
     d0c:	3c f0       	brlt	.+14     	; 0xd1c <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     d0e:	c1 2c       	mov	r12, r1
     d10:	d1 2c       	mov	r13, r1
     d12:	76 01       	movw	r14, r12
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <navigation_angle_offset+0x1e0>
     d16:	c1 2c       	mov	r12, r1
     d18:	d1 2c       	mov	r13, r1
     d1a:	76 01       	movw	r14, r12
     d1c:	7c 2d       	mov	r23, r12
	}
}
     d1e:	67 2f       	mov	r22, r23
     d20:	7d 2d       	mov	r23, r13
     d22:	8e 2d       	mov	r24, r14
     d24:	9f 2d       	mov	r25, r15
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	08 95       	ret

00000d30 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     d30:	1f 92       	push	r1
     d32:	0f 92       	push	r0
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	0f 92       	push	r0
     d38:	11 24       	eor	r1, r1
     d3a:	0b b6       	in	r0, 0x3b	; 59
     d3c:	0f 92       	push	r0
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	69 dc       	rcall	.-1838   	; 0x62c <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	6d dc       	rcall	.-1830   	; 0x638 <navigation_set_autonomous_walk>
}
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0b be       	out	0x3b, r0	; 59
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     d84:	1f 92       	push	r1
     d86:	0f 92       	push	r0
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	0f 92       	push	r0
     d8c:	11 24       	eor	r1, r1
     d8e:	0b b6       	in	r0, 0x3b	; 59
     d90:	0f 92       	push	r0
     d92:	2f 93       	push	r18
     d94:	3f 93       	push	r19
     d96:	4f 93       	push	r20
     d98:	5f 93       	push	r21
     d9a:	6f 93       	push	r22
     d9c:	7f 93       	push	r23
     d9e:	8f 93       	push	r24
     da0:	9f 93       	push	r25
     da2:	af 93       	push	r26
     da4:	bf 93       	push	r27
     da6:	ef 93       	push	r30
     da8:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	3f dc       	rcall	.-1922   	; 0x62c <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	43 dc       	rcall	.-1914   	; 0x638 <navigation_set_autonomous_walk>
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0b be       	out	0x3b, r0	; 59
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <main>:
//Flag to know if to send the autonom settings to the computer.
uint8_t autonom_flag = 1;

int main(void)
{
	USART_init();
     dd8:	fd d4       	rcall	.+2554   	; 0x17d4 <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); //<<<????>>> send messages from gang to the display, not the computer
     dda:	80 e8       	ldi	r24, 0x80	; 128
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	06 d5       	rcall	.+2572   	; 0x17ec <USART_set_twi_message_destination>
	sei();
     de0:	78 94       	sei
	TWI_init(ST_ADDRESS);
     de2:	80 e2       	ldi	r24, 0x20	; 32
     de4:	75 d1       	rcall	.+746    	; 0x10d0 <TWI_init>
	init_counters();
     de6:	a2 db       	rcall	.-2236   	; 0x52c <init_counters>
	
	LED_INIT;
     de8:	81 b1       	in	r24, 0x01	; 1
     dea:	83 60       	ori	r24, 0x03	; 3
     dec:	81 b9       	out	0x01, r24	; 1
     dee:	87 b1       	in	r24, 0x07	; 7
     df0:	80 6c       	ori	r24, 0xC0	; 192
     df2:	87 b9       	out	0x07, r24	; 7
	
	//Buttons
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //For emphasize
     df4:	81 b1       	in	r24, 0x01	; 1
     df6:	8f 73       	andi	r24, 0x3F	; 63
     df8:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     dfa:	e8 e6       	ldi	r30, 0x68	; 104
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //mask for porta6 and porta7
     e04:	eb e6       	ldi	r30, 0x6B	; 107
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 6c       	ori	r24, 0xC0	; 192
     e0c:	80 83       	st	Z, r24
     e0e:	2f ef       	ldi	r18, 0xFF	; 255
     e10:	83 e2       	ldi	r24, 0x23	; 35
     e12:	94 ef       	ldi	r25, 0xF4	; 244
     e14:	21 50       	subi	r18, 0x01	; 1
     e16:	80 40       	sbci	r24, 0x00	; 0
     e18:	90 40       	sbci	r25, 0x00	; 0
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <main+0x3c>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <main+0x46>
     e1e:	00 00       	nop
	
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0a dc       	rcall	.-2028   	; 0x638 <navigation_set_autonomous_walk>
	//set_counter_1(100);
	set_counter_2(200);
     e24:	88 ec       	ldi	r24, 0xC8	; 200
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	6f db       	rcall	.-2338   	; 0x508 <set_counter_2>
				USART_send_command();
			}
			
			if(TWI_elevation_flag())
			{
				LED0_TOGGLE;
     e2a:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else
		{
			if(TWI_command_flag())
			{
				LED1_TOGGLE;
     e2c:	c2 e0       	ldi	r28, 0x02	; 2
			LED1_TOGGLE;
			navigation_fill_buffer();
		}*/
		
		
		if(autonom_flag)
     e2e:	80 91 09 01 	lds	r24, 0x0109
     e32:	88 23       	and	r24, r24
     e34:	31 f0       	breq	.+12     	; 0xe42 <main+0x6a>
		{
			TWI_send_autonom_settings(C_ADDRESS, navigation_left_algorithm());
     e36:	f7 db       	rcall	.-2066   	; 0x626 <navigation_left_algorithm>
     e38:	68 2f       	mov	r22, r24
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	6c d1       	rcall	.+728    	; 0x1116 <TWI_send_autonom_settings>
			autonom_flag = 0;
     e3e:	10 92 09 01 	sts	0x0109, r1
		}
		
		if(TWI_status_settings_flag())
     e42:	ee d2       	rcall	.+1500   	; 0x1420 <TWI_status_settings_flag>
     e44:	89 2b       	or	r24, r25
     e46:	11 f0       	breq	.+4      	; 0xe4c <main+0x74>
		{
			autonomouswalk_set_return_status(TWI_get_status_settings());
     e48:	c0 d2       	rcall	.+1408   	; 0x13ca <TWI_get_status_settings>
     e4a:	65 d9       	rcall	.-3382   	; 0x116 <autonomouswalk_set_return_status>
		}
		
		if(navigation_autonomous_walk() == 1)
     e4c:	f2 db       	rcall	.-2076   	; 0x632 <navigation_autonomous_walk>
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	49 f4       	brne	.+18     	; 0xe64 <main+0x8c>
		{
			if(TWI_control_settings_flag())
     e52:	c8 d2       	rcall	.+1424   	; 0x13e4 <TWI_control_settings_flag>
     e54:	88 23       	and	r24, r24
     e56:	21 f0       	breq	.+8      	; 0xe60 <main+0x88>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	ab d2       	rcall	.+1366   	; 0x13b4 <TWI_get_control_setting>
     e5e:	d4 db       	rcall	.-2136   	; 0x608 <navigation_set_Kp>
			}
			autonomouswalk_walk();
     e60:	32 da       	rcall	.-2972   	; 0x2c6 <autonomouswalk_walk>
     e62:	e5 cf       	rjmp	.-54     	; 0xe2e <main+0x56>
		}
		else
		{
			if(TWI_command_flag())
     e64:	b5 d2       	rcall	.+1386   	; 0x13d0 <TWI_command_flag>
     e66:	88 23       	and	r24, r24
     e68:	21 f0       	breq	.+8      	; 0xe72 <main+0x9a>
			{
				LED1_TOGGLE;
     e6a:	82 b1       	in	r24, 0x02	; 2
     e6c:	8c 27       	eor	r24, r28
     e6e:	82 b9       	out	0x02, r24	; 2
				USART_send_command();
     e70:	88 d5       	rcall	.+2832   	; 0x1982 <USART_send_command>
			}
			
			if(TWI_elevation_flag())
     e72:	cc d2       	rcall	.+1432   	; 0x140c <TWI_elevation_flag>
     e74:	88 23       	and	r24, r24
     e76:	21 f0       	breq	.+8      	; 0xe80 <main+0xa8>
			{
				LED0_TOGGLE;
     e78:	82 b1       	in	r24, 0x02	; 2
     e7a:	8d 27       	eor	r24, r29
     e7c:	82 b9       	out	0x02, r24	; 2
				USART_send_elevation();
     e7e:	93 d5       	rcall	.+2854   	; 0x19a6 <USART_send_elevation>
			}
		USART_decode_rx_fifo();
     e80:	d5 d7       	rcall	.+4010   	; 0x1e2c <USART_decode_rx_fifo>
     e82:	d5 cf       	rjmp	.-86     	; 0xe2e <main+0x56>

00000e84 <__vector_13>:
	}
}
//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
	//USART_RequestGyro();
	TCNT1 = 0;
     e8e:	10 92 85 00 	sts	0x0085, r1
     e92:	10 92 84 00 	sts	0x0084, r1
}
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	0b b6       	in	r0, 0x3b	; 59
     eac:	0f 92       	push	r0
     eae:	2f 93       	push	r18
     eb0:	3f 93       	push	r19
     eb2:	4f 93       	push	r20
     eb4:	5f 93       	push	r21
     eb6:	6f 93       	push	r22
     eb8:	7f 93       	push	r23
     eba:	8f 93       	push	r24
     ebc:	9f 93       	push	r25
     ebe:	af 93       	push	r26
     ec0:	bf 93       	push	r27
     ec2:	ef 93       	push	r30
     ec4:	ff 93       	push	r31
	if(TWI_autonom_settings_flag())
     ec6:	98 d2       	rcall	.+1328   	; 0x13f8 <TWI_autonom_settings_flag>
     ec8:	88 23       	and	r24, r24
     eca:	91 f0       	breq	.+36     	; 0xef0 <__vector_32+0x50>
	{
		uint8_t sett = TWI_get_autonom_settings();
     ecc:	78 d2       	rcall	.+1264   	; 0x13be <TWI_get_autonom_settings>
		if(sett == 0)
     ece:	81 11       	cpse	r24, r1
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <__vector_32+0x36>
		{
			navigation_set_autonomous_walk(0);
     ed2:	b2 db       	rcall	.-2204   	; 0x638 <navigation_set_autonomous_walk>
     ed4:	0a c0       	rjmp	.+20     	; 0xeea <__vector_32+0x4a>
		}
		else if(sett == 1)
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	21 f4       	brne	.+8      	; 0xee2 <__vector_32+0x42>
		{
			navigation_set_autonomous_walk(1);
     eda:	ae db       	rcall	.-2212   	; 0x638 <navigation_set_autonomous_walk>
			navigation_set_algorithm(1);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	a6 db       	rcall	.-2228   	; 0x62c <navigation_set_algorithm>
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <__vector_32+0x4a>
		}
		else //sett == 2
		{
			navigation_set_autonomous_walk(1);
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	a9 db       	rcall	.-2222   	; 0x638 <navigation_set_autonomous_walk>
			navigation_set_algorithm(0);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	a1 db       	rcall	.-2238   	; 0x62c <navigation_set_algorithm>
		}
		autonom_flag = 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 93 09 01 	sts	0x0109, r24
	}
	TCNT3 = 0;
     ef0:	10 92 95 00 	sts	0x0095, r1
     ef4:	10 92 94 00 	sts	0x0094, r1
}
     ef8:	ff 91       	pop	r31
     efa:	ef 91       	pop	r30
     efc:	bf 91       	pop	r27
     efe:	af 91       	pop	r26
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	7f 91       	pop	r23
     f06:	6f 91       	pop	r22
     f08:	5f 91       	pop	r21
     f0a:	4f 91       	pop	r20
     f0c:	3f 91       	pop	r19
     f0e:	2f 91       	pop	r18
     f10:	0f 90       	pop	r0
     f12:	0b be       	out	0x3b, r0	; 59
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_4>:

//-------------------Buttons PinChange interrupt---------------------

ISR(PCINT0_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	0b b6       	in	r0, 0x3b	; 59
     f2a:	0f 92       	push	r0
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     f44:	06 9b       	sbis	0x00, 6	; 0
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	76 db       	rcall	.-2324   	; 0x638 <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	6e db       	rcall	.-2340   	; 0x62c <navigation_set_algorithm>
		//test
		LED2_TOGGLE;
     f50:	98 b1       	in	r25, 0x08	; 8
     f52:	80 e4       	ldi	r24, 0x40	; 64
     f54:	89 27       	eor	r24, r25
     f56:	88 b9       	out	0x08, r24	; 8
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <__vector_4+0x4e>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     f5a:	07 9b       	sbis	0x00, 7	; 0
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <__vector_4+0x4e>
	{
		navigation_set_autonomous_walk(1);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	6b db       	rcall	.-2346   	; 0x638 <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	63 db       	rcall	.-2362   	; 0x62c <navigation_set_algorithm>
		//test
		LED3_TOGGLE;
     f66:	88 b1       	in	r24, 0x08	; 8
     f68:	80 58       	subi	r24, 0x80	; 128
     f6a:	88 b9       	out	0x08, r24	; 8
	}
	autonom_flag = 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	80 93 09 01 	sts	0x0109, r24
}
     f72:	ff 91       	pop	r31
     f74:	ef 91       	pop	r30
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0b be       	out	0x3b, r0	; 59
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <set_twi_reciever_enable>:
	
	//Do something with the message here... Send to display for now
	TWI_send_string_fixed_length(S_ADDRESS, msg, length);
	
	return 0;
}
     f98:	85 e4       	ldi	r24, 0x45	; 69
     f9a:	80 93 bc 00 	sts	0x00BC, r24
     f9e:	08 95       	ret

00000fa0 <clear_int>:
     fa0:	81 ec       	ldi	r24, 0xC1	; 193
     fa2:	80 93 bc 00 	sts	0x00BC, r24
     fa6:	08 95       	ret

00000fa8 <start_bus>:
     fa8:	84 ea       	ldi	r24, 0xA4	; 164
     faa:	80 93 bc 00 	sts	0x00BC, r24
     fae:	08 95       	ret

00000fb0 <stop_bus>:
     fb0:	85 ed       	ldi	r24, 0xD5	; 213
     fb2:	80 93 bc 00 	sts	0x00BC, r24
     fb6:	08 95       	ret

00000fb8 <Error>:
     fb8:	80 91 b9 00 	lds	r24, 0x00B9
     fbc:	88 7f       	andi	r24, 0xF8	; 248
     fbe:	88 33       	cpi	r24, 0x38	; 56
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <Error+0xc>
     fc2:	f6 cf       	rjmp	.-20     	; 0xfb0 <stop_bus>
     fc4:	ed cf       	rjmp	.-38     	; 0xfa0 <clear_int>

00000fc6 <get_data>:
     fc6:	80 91 bb 00 	lds	r24, 0x00BB
     fca:	08 95       	ret

00000fcc <wait_for_bus>:
     fcc:	ec eb       	ldi	r30, 0xBC	; 188
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	ec f7       	brge	.-6      	; 0xfd0 <wait_for_bus+0x4>
     fd6:	08 95       	ret

00000fd8 <send_data_and_wait>:
     fd8:	80 93 bb 00 	sts	0x00BB, r24
     fdc:	84 e8       	ldi	r24, 0x84	; 132
     fde:	80 93 bc 00 	sts	0x00BC, r24
     fe2:	f4 cf       	rjmp	.-24     	; 0xfcc <wait_for_bus>

00000fe4 <stop_twi>:
     fe4:	10 92 38 15 	sts	0x1538, r1
     fe8:	10 92 37 15 	sts	0x1537, r1
     fec:	10 92 42 15 	sts	0x1542, r1
     ff0:	10 92 41 15 	sts	0x1541, r1
     ff4:	10 92 2d 15 	sts	0x152D, r1
     ff8:	10 92 2c 15 	sts	0x152C, r1
     ffc:	10 92 32 15 	sts	0x1532, r1
    1000:	10 92 31 15 	sts	0x1531, r1
    1004:	10 92 35 15 	sts	0x1535, r1
    1008:	10 92 34 15 	sts	0x1534, r1
    100c:	08 95       	ret

0000100e <reset_TWI>:
    100e:	ec eb       	ldi	r30, 0xBC	; 188
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	80 6c       	ori	r24, 0xC0	; 192
    1016:	80 83       	st	Z, r24
    1018:	08 95       	ret

0000101a <get_control_settings_from_bus>:
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	c0 91 31 15 	lds	r28, 0x1531
    1022:	d0 91 32 15 	lds	r29, 0x1532
    1026:	cf df       	rcall	.-98     	; 0xfc6 <get_data>
    1028:	c2 5d       	subi	r28, 0xD2	; 210
    102a:	da 4e       	sbci	r29, 0xEA	; 234
    102c:	88 83       	st	Y, r24
    102e:	10 92 32 15 	sts	0x1532, r1
    1032:	10 92 31 15 	sts	0x1531, r1
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <get_autonom_settings_from_bus>:
    103c:	c4 df       	rcall	.-120    	; 0xfc6 <get_data>
    103e:	80 93 2c 14 	sts	0x142C, r24
    1042:	08 95       	ret

00001044 <get_char_from_bus>:
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	c0 91 2c 15 	lds	r28, 0x152C
    104c:	d0 91 2d 15 	lds	r29, 0x152D
    1050:	ba df       	rcall	.-140    	; 0xfc6 <get_data>
    1052:	c3 5d       	subi	r28, 0xD3	; 211
    1054:	db 4e       	sbci	r29, 0xEB	; 235
    1056:	88 83       	st	Y, r24
    1058:	80 91 2c 15 	lds	r24, 0x152C
    105c:	90 91 2d 15 	lds	r25, 0x152D
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	90 93 2d 15 	sts	0x152D, r25
    1066:	80 93 2c 15 	sts	0x152C, r24
    106a:	90 93 3d 15 	sts	0x153D, r25
    106e:	80 93 3c 15 	sts	0x153C, r24
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <get_sensor_from_bus>:
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	c0 91 41 15 	lds	r28, 0x1541
    1080:	d0 91 42 15 	lds	r29, 0x1542
    1084:	c8 30       	cpi	r28, 0x08	; 8
    1086:	d1 05       	cpc	r29, r1
    1088:	99 f4       	brne	.+38     	; 0x10b0 <get_sensor_from_bus+0x38>
    108a:	e3 e4       	ldi	r30, 0x43	; 67
    108c:	f5 e1       	ldi	r31, 0x15	; 21
    108e:	ab e4       	ldi	r26, 0x4B	; 75
    1090:	b5 e1       	ldi	r27, 0x15	; 21
    1092:	8b e4       	ldi	r24, 0x4B	; 75
    1094:	95 e1       	ldi	r25, 0x15	; 21
    1096:	21 91       	ld	r18, Z+
    1098:	2d 93       	st	X+, r18
    109a:	e8 17       	cp	r30, r24
    109c:	f9 07       	cpc	r31, r25
    109e:	d9 f7       	brne	.-10     	; 0x1096 <get_sensor_from_bus+0x1e>
    10a0:	92 df       	rcall	.-220    	; 0xfc6 <get_data>
    10a2:	80 93 3b 15 	sts	0x153B, r24
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 e0 13 	sts	0x13E0, r24
    10ac:	d6 da       	rcall	.-2644   	; 0x65a <navigation_fill_buffer>
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <get_sensor_from_bus+0x52>
    10b0:	8a df       	rcall	.-236    	; 0xfc6 <get_data>
    10b2:	cd 5b       	subi	r28, 0xBD	; 189
    10b4:	da 4e       	sbci	r29, 0xEA	; 234
    10b6:	88 83       	st	Y, r24
    10b8:	80 91 41 15 	lds	r24, 0x1541
    10bc:	90 91 42 15 	lds	r25, 0x1542
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	90 93 42 15 	sts	0x1542, r25
    10c6:	80 93 41 15 	sts	0x1541, r24
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <TWI_init>:
    10d0:	80 93 33 15 	sts	0x1533, r24
    10d4:	80 34       	cpi	r24, 0x40	; 64
    10d6:	79 f0       	breq	.+30     	; 0x10f6 <TWI_init+0x26>
    10d8:	80 38       	cpi	r24, 0x80	; 128
    10da:	19 f0       	breq	.+6      	; 0x10e2 <TWI_init+0x12>
    10dc:	80 32       	cpi	r24, 0x20	; 32
    10de:	d1 f4       	brne	.+52     	; 0x1114 <TWI_init+0x44>
    10e0:	12 c0       	rjmp	.+36     	; 0x1106 <TWI_init+0x36>
    10e2:	83 e0       	ldi	r24, 0x03	; 3
    10e4:	88 b9       	out	0x08, r24	; 8
    10e6:	58 df       	rcall	.-336    	; 0xf98 <set_twi_reciever_enable>
    10e8:	8f e3       	ldi	r24, 0x3F	; 63
    10ea:	80 93 b8 00 	sts	0x00B8, r24
    10ee:	81 e8       	ldi	r24, 0x81	; 129
    10f0:	80 93 ba 00 	sts	0x00BA, r24
    10f4:	08 95       	ret
    10f6:	8f e3       	ldi	r24, 0x3F	; 63
    10f8:	80 93 b8 00 	sts	0x00B8, r24
    10fc:	4d df       	rcall	.-358    	; 0xf98 <set_twi_reciever_enable>
    10fe:	80 e4       	ldi	r24, 0x40	; 64
    1100:	80 93 ba 00 	sts	0x00BA, r24
    1104:	08 95       	ret
    1106:	8f e3       	ldi	r24, 0x3F	; 63
    1108:	80 93 b8 00 	sts	0x00B8, r24
    110c:	45 df       	rcall	.-374    	; 0xf98 <set_twi_reciever_enable>
    110e:	81 e2       	ldi	r24, 0x21	; 33
    1110:	80 93 ba 00 	sts	0x00BA, r24
    1114:	08 95       	ret

00001116 <TWI_send_autonom_settings>:
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	c8 2f       	mov	r28, r24
    111c:	d6 2f       	mov	r29, r22
    111e:	44 df       	rcall	.-376    	; 0xfa8 <start_bus>
    1120:	55 df       	rcall	.-342    	; 0xfcc <wait_for_bus>
    1122:	90 91 b9 00 	lds	r25, 0x00B9
    1126:	98 7f       	andi	r25, 0xF8	; 248
    1128:	98 30       	cpi	r25, 0x08	; 8
    112a:	19 f0       	breq	.+6      	; 0x1132 <TWI_send_autonom_settings+0x1c>
    112c:	45 df       	rcall	.-374    	; 0xfb8 <Error>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	20 c0       	rjmp	.+64     	; 0x1172 <TWI_send_autonom_settings+0x5c>
    1132:	8c 2f       	mov	r24, r28
    1134:	51 df       	rcall	.-350    	; 0xfd8 <send_data_and_wait>
    1136:	80 91 b9 00 	lds	r24, 0x00B9
    113a:	88 7f       	andi	r24, 0xF8	; 248
    113c:	88 31       	cpi	r24, 0x18	; 24
    113e:	19 f0       	breq	.+6      	; 0x1146 <TWI_send_autonom_settings+0x30>
    1140:	3b df       	rcall	.-394    	; 0xfb8 <Error>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	16 c0       	rjmp	.+44     	; 0x1172 <TWI_send_autonom_settings+0x5c>
    1146:	85 e0       	ldi	r24, 0x05	; 5
    1148:	47 df       	rcall	.-370    	; 0xfd8 <send_data_and_wait>
    114a:	80 91 b9 00 	lds	r24, 0x00B9
    114e:	88 7f       	andi	r24, 0xF8	; 248
    1150:	88 32       	cpi	r24, 0x28	; 40
    1152:	19 f0       	breq	.+6      	; 0x115a <TWI_send_autonom_settings+0x44>
    1154:	31 df       	rcall	.-414    	; 0xfb8 <Error>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0c c0       	rjmp	.+24     	; 0x1172 <TWI_send_autonom_settings+0x5c>
    115a:	8d 2f       	mov	r24, r29
    115c:	3d df       	rcall	.-390    	; 0xfd8 <send_data_and_wait>
    115e:	80 91 b9 00 	lds	r24, 0x00B9
    1162:	88 7f       	andi	r24, 0xF8	; 248
    1164:	88 32       	cpi	r24, 0x28	; 40
    1166:	19 f0       	breq	.+6      	; 0x116e <TWI_send_autonom_settings+0x58>
    1168:	27 df       	rcall	.-434    	; 0xfb8 <Error>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <TWI_send_autonom_settings+0x5c>
    116e:	20 df       	rcall	.-448    	; 0xfb0 <stop_bus>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	08 95       	ret

00001178 <TWI_send_command>:
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	c8 2f       	mov	r28, r24
    1180:	d6 2f       	mov	r29, r22
    1182:	14 2f       	mov	r17, r20
    1184:	11 df       	rcall	.-478    	; 0xfa8 <start_bus>
    1186:	22 df       	rcall	.-444    	; 0xfcc <wait_for_bus>
    1188:	90 91 b9 00 	lds	r25, 0x00B9
    118c:	98 7f       	andi	r25, 0xF8	; 248
    118e:	98 30       	cpi	r25, 0x08	; 8
    1190:	19 f0       	breq	.+6      	; 0x1198 <TWI_send_command+0x20>
    1192:	12 df       	rcall	.-476    	; 0xfb8 <Error>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	34 c0       	rjmp	.+104    	; 0x1200 <TWI_send_command+0x88>
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	1e df       	rcall	.-452    	; 0xfd8 <send_data_and_wait>
    119c:	80 91 b9 00 	lds	r24, 0x00B9
    11a0:	88 7f       	andi	r24, 0xF8	; 248
    11a2:	88 31       	cpi	r24, 0x18	; 24
    11a4:	19 f0       	breq	.+6      	; 0x11ac <TWI_send_command+0x34>
    11a6:	08 df       	rcall	.-496    	; 0xfb8 <Error>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	2a c0       	rjmp	.+84     	; 0x1200 <TWI_send_command+0x88>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	14 df       	rcall	.-472    	; 0xfd8 <send_data_and_wait>
    11b0:	80 91 b9 00 	lds	r24, 0x00B9
    11b4:	88 7f       	andi	r24, 0xF8	; 248
    11b6:	88 32       	cpi	r24, 0x28	; 40
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <TWI_send_command+0x48>
    11ba:	fe de       	rcall	.-516    	; 0xfb8 <Error>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	20 c0       	rjmp	.+64     	; 0x1200 <TWI_send_command+0x88>
    11c0:	8c 2f       	mov	r24, r28
    11c2:	0a df       	rcall	.-492    	; 0xfd8 <send_data_and_wait>
    11c4:	80 91 b9 00 	lds	r24, 0x00B9
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	88 32       	cpi	r24, 0x28	; 40
    11cc:	19 f0       	breq	.+6      	; 0x11d4 <TWI_send_command+0x5c>
    11ce:	f4 de       	rcall	.-536    	; 0xfb8 <Error>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	16 c0       	rjmp	.+44     	; 0x1200 <TWI_send_command+0x88>
    11d4:	8d 2f       	mov	r24, r29
    11d6:	00 df       	rcall	.-512    	; 0xfd8 <send_data_and_wait>
    11d8:	80 91 b9 00 	lds	r24, 0x00B9
    11dc:	88 7f       	andi	r24, 0xF8	; 248
    11de:	88 32       	cpi	r24, 0x28	; 40
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <TWI_send_command+0x70>
    11e2:	ea de       	rcall	.-556    	; 0xfb8 <Error>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0c c0       	rjmp	.+24     	; 0x1200 <TWI_send_command+0x88>
    11e8:	81 2f       	mov	r24, r17
    11ea:	f6 de       	rcall	.-532    	; 0xfd8 <send_data_and_wait>
    11ec:	80 91 b9 00 	lds	r24, 0x00B9
    11f0:	88 7f       	andi	r24, 0xF8	; 248
    11f2:	88 32       	cpi	r24, 0x28	; 40
    11f4:	19 f0       	breq	.+6      	; 0x11fc <TWI_send_command+0x84>
    11f6:	e0 de       	rcall	.-576    	; 0xfb8 <Error>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <TWI_send_command+0x88>
    11fc:	d9 de       	rcall	.-590    	; 0xfb0 <stop_bus>
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	08 95       	ret

00001208 <TWI_send_string>:
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	c8 2f       	mov	r28, r24
    1216:	e6 2e       	mov	r14, r22
    1218:	f7 2e       	mov	r15, r23
    121a:	c6 de       	rcall	.-628    	; 0xfa8 <start_bus>
    121c:	d7 de       	rcall	.-594    	; 0xfcc <wait_for_bus>
    121e:	90 91 b9 00 	lds	r25, 0x00B9
    1222:	98 7f       	andi	r25, 0xF8	; 248
    1224:	98 30       	cpi	r25, 0x08	; 8
    1226:	19 f0       	breq	.+6      	; 0x122e <TWI_send_string+0x26>
    1228:	c7 de       	rcall	.-626    	; 0xfb8 <Error>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	2c c0       	rjmp	.+88     	; 0x1286 <TWI_send_string+0x7e>
    122e:	8c 2f       	mov	r24, r28
    1230:	d3 de       	rcall	.-602    	; 0xfd8 <send_data_and_wait>
    1232:	80 91 b9 00 	lds	r24, 0x00B9
    1236:	88 7f       	andi	r24, 0xF8	; 248
    1238:	88 31       	cpi	r24, 0x18	; 24
    123a:	19 f0       	breq	.+6      	; 0x1242 <TWI_send_string+0x3a>
    123c:	bd de       	rcall	.-646    	; 0xfb8 <Error>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	22 c0       	rjmp	.+68     	; 0x1286 <TWI_send_string+0x7e>
    1242:	89 e1       	ldi	r24, 0x19	; 25
    1244:	c9 de       	rcall	.-622    	; 0xfd8 <send_data_and_wait>
    1246:	80 91 b9 00 	lds	r24, 0x00B9
    124a:	88 7f       	andi	r24, 0xF8	; 248
    124c:	88 32       	cpi	r24, 0x28	; 40
    124e:	29 f4       	brne	.+10     	; 0x125a <TWI_send_string+0x52>
    1250:	0e 2d       	mov	r16, r14
    1252:	1f 2d       	mov	r17, r15
    1254:	c0 e0       	ldi	r28, 0x00	; 0
    1256:	d0 e0       	ldi	r29, 0x00	; 0
    1258:	08 c0       	rjmp	.+16     	; 0x126a <TWI_send_string+0x62>
    125a:	ae de       	rcall	.-676    	; 0xfb8 <Error>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	13 c0       	rjmp	.+38     	; 0x1286 <TWI_send_string+0x7e>
    1260:	f8 01       	movw	r30, r16
    1262:	81 91       	ld	r24, Z+
    1264:	8f 01       	movw	r16, r30
    1266:	b8 de       	rcall	.-656    	; 0xfd8 <send_data_and_wait>
    1268:	21 96       	adiw	r28, 0x01	; 1
    126a:	ee 2d       	mov	r30, r14
    126c:	ff 2d       	mov	r31, r15
    126e:	df 01       	movw	r26, r30
    1270:	0d 90       	ld	r0, X+
    1272:	00 20       	and	r0, r0
    1274:	e9 f7       	brne	.-6      	; 0x1270 <TWI_send_string+0x68>
    1276:	11 97       	sbiw	r26, 0x01	; 1
    1278:	ae 1b       	sub	r26, r30
    127a:	bf 0b       	sbc	r27, r31
    127c:	ca 17       	cp	r28, r26
    127e:	db 07       	cpc	r29, r27
    1280:	78 f3       	brcs	.-34     	; 0x1260 <TWI_send_string+0x58>
    1282:	96 de       	rcall	.-724    	; 0xfb0 <stop_bus>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	08 95       	ret

00001294 <TWI_send_string_fixed_length>:
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	c8 2f       	mov	r28, r24
    12a2:	e6 2e       	mov	r14, r22
    12a4:	f7 2e       	mov	r15, r23
    12a6:	8a 01       	movw	r16, r20
    12a8:	7f de       	rcall	.-770    	; 0xfa8 <start_bus>
    12aa:	90 de       	rcall	.-736    	; 0xfcc <wait_for_bus>
    12ac:	90 91 b9 00 	lds	r25, 0x00B9
    12b0:	98 7f       	andi	r25, 0xF8	; 248
    12b2:	98 30       	cpi	r25, 0x08	; 8
    12b4:	19 f0       	breq	.+6      	; 0x12bc <TWI_send_string_fixed_length+0x28>
    12b6:	80 de       	rcall	.-768    	; 0xfb8 <Error>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	23 c0       	rjmp	.+70     	; 0x1302 <TWI_send_string_fixed_length+0x6e>
    12bc:	8c 2f       	mov	r24, r28
    12be:	8c de       	rcall	.-744    	; 0xfd8 <send_data_and_wait>
    12c0:	80 91 b9 00 	lds	r24, 0x00B9
    12c4:	88 7f       	andi	r24, 0xF8	; 248
    12c6:	88 31       	cpi	r24, 0x18	; 24
    12c8:	19 f0       	breq	.+6      	; 0x12d0 <TWI_send_string_fixed_length+0x3c>
    12ca:	76 de       	rcall	.-788    	; 0xfb8 <Error>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	19 c0       	rjmp	.+50     	; 0x1302 <TWI_send_string_fixed_length+0x6e>
    12d0:	89 e1       	ldi	r24, 0x19	; 25
    12d2:	82 de       	rcall	.-764    	; 0xfd8 <send_data_and_wait>
    12d4:	80 91 b9 00 	lds	r24, 0x00B9
    12d8:	88 7f       	andi	r24, 0xF8	; 248
    12da:	88 32       	cpi	r24, 0x28	; 40
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <TWI_send_string_fixed_length+0x52>
    12de:	10 16       	cp	r1, r16
    12e0:	11 06       	cpc	r1, r17
    12e2:	24 f0       	brlt	.+8      	; 0x12ec <TWI_send_string_fixed_length+0x58>
    12e4:	0c c0       	rjmp	.+24     	; 0x12fe <TWI_send_string_fixed_length+0x6a>
    12e6:	68 de       	rcall	.-816    	; 0xfb8 <Error>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0b c0       	rjmp	.+22     	; 0x1302 <TWI_send_string_fixed_length+0x6e>
    12ec:	ce 2d       	mov	r28, r14
    12ee:	df 2d       	mov	r29, r15
    12f0:	0c 0f       	add	r16, r28
    12f2:	1d 1f       	adc	r17, r29
    12f4:	89 91       	ld	r24, Y+
    12f6:	70 de       	rcall	.-800    	; 0xfd8 <send_data_and_wait>
    12f8:	c0 17       	cp	r28, r16
    12fa:	d1 07       	cpc	r29, r17
    12fc:	d9 f7       	brne	.-10     	; 0x12f4 <TWI_send_string_fixed_length+0x60>
    12fe:	58 de       	rcall	.-848    	; 0xfb0 <stop_bus>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	08 95       	ret

00001310 <TWI_send_float>:
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	00 d0       	rcall	.+0      	; 0x131e <TWI_send_float+0xe>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <TWI_send_float+0x10>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	18 2f       	mov	r17, r24
    1326:	49 83       	std	Y+1, r20	; 0x01
    1328:	5a 83       	std	Y+2, r21	; 0x02
    132a:	6b 83       	std	Y+3, r22	; 0x03
    132c:	7c 83       	std	Y+4, r23	; 0x04
    132e:	3c de       	rcall	.-904    	; 0xfa8 <start_bus>
    1330:	4d de       	rcall	.-870    	; 0xfcc <wait_for_bus>
    1332:	90 91 b9 00 	lds	r25, 0x00B9
    1336:	98 7f       	andi	r25, 0xF8	; 248
    1338:	98 30       	cpi	r25, 0x08	; 8
    133a:	19 f0       	breq	.+6      	; 0x1342 <TWI_send_float+0x32>
    133c:	3d de       	rcall	.-902    	; 0xfb8 <Error>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	24 c0       	rjmp	.+72     	; 0x138a <TWI_send_float+0x7a>
    1342:	81 2f       	mov	r24, r17
    1344:	49 de       	rcall	.-878    	; 0xfd8 <send_data_and_wait>
    1346:	80 91 b9 00 	lds	r24, 0x00B9
    134a:	88 7f       	andi	r24, 0xF8	; 248
    134c:	88 31       	cpi	r24, 0x18	; 24
    134e:	19 f0       	breq	.+6      	; 0x1356 <TWI_send_float+0x46>
    1350:	33 de       	rcall	.-922    	; 0xfb8 <Error>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	1a c0       	rjmp	.+52     	; 0x138a <TWI_send_float+0x7a>
    1356:	86 e0       	ldi	r24, 0x06	; 6
    1358:	3f de       	rcall	.-898    	; 0xfd8 <send_data_and_wait>
    135a:	80 91 b9 00 	lds	r24, 0x00B9
    135e:	88 7f       	andi	r24, 0xF8	; 248
    1360:	88 32       	cpi	r24, 0x28	; 40
    1362:	19 f0       	breq	.+6      	; 0x136a <TWI_send_float+0x5a>
    1364:	29 de       	rcall	.-942    	; 0xfb8 <Error>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	10 c0       	rjmp	.+32     	; 0x138a <TWI_send_float+0x7a>
    136a:	8e 01       	movw	r16, r28
    136c:	0f 5f       	subi	r16, 0xFF	; 255
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	7e 01       	movw	r14, r28
    1372:	85 e0       	ldi	r24, 0x05	; 5
    1374:	e8 0e       	add	r14, r24
    1376:	f1 1c       	adc	r15, r1
    1378:	f8 01       	movw	r30, r16
    137a:	81 91       	ld	r24, Z+
    137c:	8f 01       	movw	r16, r30
    137e:	2c de       	rcall	.-936    	; 0xfd8 <send_data_and_wait>
    1380:	0e 15       	cp	r16, r14
    1382:	1f 05       	cpc	r17, r15
    1384:	c9 f7       	brne	.-14     	; 0x1378 <TWI_send_float+0x68>
    1386:	14 de       	rcall	.-984    	; 0xfb0 <stop_bus>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	08 95       	ret

000013a0 <TWI_get_command>:
    13a0:	87 5d       	subi	r24, 0xD7	; 215
    13a2:	9b 4e       	sbci	r25, 0xEB	; 235
    13a4:	fc 01       	movw	r30, r24
    13a6:	80 81       	ld	r24, Z
    13a8:	08 95       	ret

000013aa <TWI_get_sensor>:
    13aa:	85 5b       	subi	r24, 0xB5	; 181
    13ac:	9a 4e       	sbci	r25, 0xEA	; 234
    13ae:	fc 01       	movw	r30, r24
    13b0:	80 81       	ld	r24, Z
    13b2:	08 95       	ret

000013b4 <TWI_get_control_setting>:
    13b4:	82 5d       	subi	r24, 0xD2	; 210
    13b6:	9a 4e       	sbci	r25, 0xEA	; 234
    13b8:	fc 01       	movw	r30, r24
    13ba:	80 81       	ld	r24, Z
    13bc:	08 95       	ret

000013be <TWI_get_autonom_settings>:
    13be:	80 91 2c 14 	lds	r24, 0x142C
    13c2:	08 95       	ret

000013c4 <TWI_get_elevation>:
    13c4:	80 91 39 15 	lds	r24, 0x1539
    13c8:	08 95       	ret

000013ca <TWI_get_status_settings>:
    13ca:	80 91 53 15 	lds	r24, 0x1553
    13ce:	08 95       	ret

000013d0 <TWI_command_flag>:
    13d0:	80 91 df 13 	lds	r24, 0x13DF
    13d4:	88 23       	and	r24, r24
    13d6:	21 f0       	breq	.+8      	; 0x13e0 <TWI_command_flag+0x10>
    13d8:	10 92 df 13 	sts	0x13DF, r1
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	08 95       	ret
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	08 95       	ret

000013e4 <TWI_control_settings_flag>:
    13e4:	80 91 de 13 	lds	r24, 0x13DE
    13e8:	88 23       	and	r24, r24
    13ea:	21 f0       	breq	.+8      	; 0x13f4 <TWI_control_settings_flag+0x10>
    13ec:	10 92 de 13 	sts	0x13DE, r1
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	08 95       	ret
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	08 95       	ret

000013f8 <TWI_autonom_settings_flag>:
    13f8:	80 91 dd 13 	lds	r24, 0x13DD
    13fc:	88 23       	and	r24, r24
    13fe:	21 f0       	breq	.+8      	; 0x1408 <TWI_autonom_settings_flag+0x10>
    1400:	10 92 dd 13 	sts	0x13DD, r1
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	08 95       	ret
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	08 95       	ret

0000140c <TWI_elevation_flag>:
    140c:	80 91 dc 13 	lds	r24, 0x13DC
    1410:	88 23       	and	r24, r24
    1412:	21 f0       	breq	.+8      	; 0x141c <TWI_elevation_flag+0x10>
    1414:	10 92 dc 13 	sts	0x13DC, r1
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	08 95       	ret
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	08 95       	ret

00001420 <TWI_status_settings_flag>:
    1420:	80 91 da 13 	lds	r24, 0x13DA
    1424:	88 23       	and	r24, r24
    1426:	21 f0       	breq	.+8      	; 0x1430 <TWI_status_settings_flag+0x10>
    1428:	10 92 da 13 	sts	0x13DA, r1
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	08 95       	ret
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret

00001434 <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	d8 2f       	mov	r29, r24
    143e:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
    1440:	60 91 3c 15 	lds	r22, 0x153C
    1444:	80 91 0a 01 	lds	r24, 0x010A
    1448:	90 91 0b 01 	lds	r25, 0x010B
    144c:	9a d8       	rcall	.-3788   	; 0x582 <FifoWrite>
    144e:	81 11       	cpse	r24, r1
    1450:	1f c0       	rjmp	.+62     	; 0x1490 <write_to_TwiFIFO+0x5c>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    1452:	20 91 3c 15 	lds	r18, 0x153C
    1456:	30 91 3d 15 	lds	r19, 0x153D
    145a:	12 16       	cp	r1, r18
    145c:	13 06       	cpc	r1, r19
    145e:	d4 f4       	brge	.+52     	; 0x1494 <write_to_TwiFIFO+0x60>
    1460:	0d 2f       	mov	r16, r29
    1462:	1c 2f       	mov	r17, r28
    1464:	c0 e0       	ldi	r28, 0x00	; 0
    1466:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    1468:	f8 01       	movw	r30, r16
    146a:	61 91       	ld	r22, Z+
    146c:	8f 01       	movw	r16, r30
    146e:	80 91 0a 01 	lds	r24, 0x010A
    1472:	90 91 0b 01 	lds	r25, 0x010B
    1476:	85 d8       	rcall	.-3830   	; 0x582 <FifoWrite>
    1478:	81 11       	cpse	r24, r1
    147a:	0e c0       	rjmp	.+28     	; 0x1498 <write_to_TwiFIFO+0x64>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    147c:	21 96       	adiw	r28, 0x01	; 1
    147e:	80 91 3c 15 	lds	r24, 0x153C
    1482:	90 91 3d 15 	lds	r25, 0x153D
    1486:	c8 17       	cp	r28, r24
    1488:	d9 07       	cpc	r29, r25
    148a:	74 f3       	brlt	.-36     	; 0x1468 <write_to_TwiFIFO+0x34>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	05 c0       	rjmp	.+10     	; 0x149a <write_to_TwiFIFO+0x66>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//Can't add length!?
		return 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	03 c0       	rjmp	.+6      	; 0x149a <write_to_TwiFIFO+0x66>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	01 c0       	rjmp	.+2      	; 0x149a <write_to_TwiFIFO+0x66>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//Can't add chars!?
			return 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	08 95       	ret

000014a4 <__vector_26>:

//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	0b b6       	in	r0, 0x3b	; 59
    14b0:	0f 92       	push	r0
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	ef 93       	push	r30
    14cc:	ff 93       	push	r31
	switch(myAdress)
    14ce:	80 91 33 15 	lds	r24, 0x1533
    14d2:	80 34       	cpi	r24, 0x40	; 64
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <__vector_26+0x34>
    14d6:	87 c0       	rjmp	.+270    	; 0x15e6 <__vector_26+0x142>
    14d8:	80 38       	cpi	r24, 0x80	; 128
    14da:	21 f0       	breq	.+8      	; 0x14e4 <__vector_26+0x40>
    14dc:	80 32       	cpi	r24, 0x20	; 32
    14de:	09 f0       	breq	.+2      	; 0x14e2 <__vector_26+0x3e>
    14e0:	64 c1       	rjmp	.+712    	; 0x17aa <__vector_26+0x306>
    14e2:	c9 c0       	rjmp	.+402    	; 0x1676 <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    14e4:	80 91 b9 00 	lds	r24, 0x00B9
    14e8:	88 7f       	andi	r24, 0xF8	; 248
    14ea:	80 36       	cpi	r24, 0x60	; 96
    14ec:	29 f0       	breq	.+10     	; 0x14f8 <__vector_26+0x54>
    14ee:	80 91 b9 00 	lds	r24, 0x00B9
    14f2:	88 7f       	andi	r24, 0xF8	; 248
    14f4:	88 36       	cpi	r24, 0x68	; 104
    14f6:	21 f4       	brne	.+8      	; 0x1500 <__vector_26+0x5c>
			{
				instruction = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	80 93 36 15 	sts	0x1536, r24
    14fe:	71 c0       	rjmp	.+226    	; 0x15e2 <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1500:	80 91 b9 00 	lds	r24, 0x00B9
    1504:	88 7f       	andi	r24, 0xF8	; 248
    1506:	80 37       	cpi	r24, 0x70	; 112
    1508:	29 f0       	breq	.+10     	; 0x1514 <__vector_26+0x70>
    150a:	80 91 b9 00 	lds	r24, 0x00B9
    150e:	88 7f       	andi	r24, 0xF8	; 248
    1510:	88 37       	cpi	r24, 0x78	; 120
    1512:	39 f4       	brne	.+14     	; 0x1522 <__vector_26+0x7e>
			{
				currentInstruction = 255;
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	90 93 40 15 	sts	0x1540, r25
    151c:	80 93 3f 15 	sts	0x153F, r24
    1520:	60 c0       	rjmp	.+192    	; 0x15e2 <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    1522:	80 91 b9 00 	lds	r24, 0x00B9
    1526:	88 7f       	andi	r24, 0xF8	; 248
    1528:	80 38       	cpi	r24, 0x80	; 128
    152a:	b9 f5       	brne	.+110    	; 0x159a <__vector_26+0xf6>
			{
				if(instruction)
    152c:	80 91 36 15 	lds	r24, 0x1536
    1530:	88 23       	and	r24, r24
    1532:	41 f0       	breq	.+16     	; 0x1544 <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    1534:	48 dd       	rcall	.-1392   	; 0xfc6 <get_data>
    1536:	80 93 3f 15 	sts	0x153F, r24
    153a:	10 92 40 15 	sts	0x1540, r1
					instruction = 0;
    153e:	10 92 36 15 	sts	0x1536, r1
    1542:	4f c0       	rjmp	.+158    	; 0x15e2 <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    1544:	80 91 3f 15 	lds	r24, 0x153F
    1548:	90 91 40 15 	lds	r25, 0x1540
    154c:	85 30       	cpi	r24, 0x05	; 5
    154e:	91 05       	cpc	r25, r1
    1550:	71 f0       	breq	.+28     	; 0x156e <__vector_26+0xca>
    1552:	24 f4       	brge	.+8      	; 0x155c <__vector_26+0xb8>
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	09 f0       	breq	.+2      	; 0x155a <__vector_26+0xb6>
    1558:	44 c0       	rjmp	.+136    	; 0x15e2 <__vector_26+0x13e>
    155a:	07 c0       	rjmp	.+14     	; 0x156a <__vector_26+0xc6>
    155c:	86 30       	cpi	r24, 0x06	; 6
    155e:	91 05       	cpc	r25, r1
    1560:	51 f0       	breq	.+20     	; 0x1576 <__vector_26+0xd2>
    1562:	49 97       	sbiw	r24, 0x19	; 25
    1564:	09 f0       	breq	.+2      	; 0x1568 <__vector_26+0xc4>
    1566:	3d c0       	rjmp	.+122    	; 0x15e2 <__vector_26+0x13e>
    1568:	04 c0       	rjmp	.+8      	; 0x1572 <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    156a:	57 dd       	rcall	.-1362   	; 0x101a <get_control_settings_from_bus>
							break;
    156c:	3a c0       	rjmp	.+116    	; 0x15e2 <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    156e:	66 dd       	rcall	.-1332   	; 0x103c <get_autonom_settings_from_bus>
							break;
    1570:	38 c0       	rjmp	.+112    	; 0x15e2 <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    1572:	68 dd       	rcall	.-1328   	; 0x1044 <get_char_from_bus>
							break;
    1574:	36 c0       	rjmp	.+108    	; 0x15e2 <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    1576:	c0 91 34 15 	lds	r28, 0x1534
    157a:	d0 91 35 15 	lds	r29, 0x1535
    157e:	23 dd       	rcall	.-1466   	; 0xfc6 <get_data>
    1580:	cb 5d       	subi	r28, 0xDB	; 219
    1582:	db 4e       	sbci	r29, 0xEB	; 235
    1584:	88 83       	st	Y, r24
	floatCounter += 1;
    1586:	80 91 34 15 	lds	r24, 0x1534
    158a:	90 91 35 15 	lds	r25, 0x1535
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	90 93 35 15 	sts	0x1535, r25
    1594:	80 93 34 15 	sts	0x1534, r24
    1598:	24 c0       	rjmp	.+72     	; 0x15e2 <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    159a:	80 91 b9 00 	lds	r24, 0x00B9
    159e:	88 7f       	andi	r24, 0xF8	; 248
    15a0:	80 39       	cpi	r24, 0x90	; 144
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <__vector_26+0x104>
			{
				get_sensor_from_bus();
    15a4:	69 dd       	rcall	.-1326   	; 0x1078 <get_sensor_from_bus>
    15a6:	1d c0       	rjmp	.+58     	; 0x15e2 <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    15a8:	80 91 b9 00 	lds	r24, 0x00B9
    15ac:	88 7f       	andi	r24, 0xF8	; 248
    15ae:	80 3a       	cpi	r24, 0xA0	; 160
    15b0:	c1 f4       	brne	.+48     	; 0x15e2 <__vector_26+0x13e>
			{
				stop_twi();
    15b2:	18 dd       	rcall	.-1488   	; 0xfe4 <stop_twi>
				switch(currentInstruction)
    15b4:	80 91 3f 15 	lds	r24, 0x153F
    15b8:	90 91 40 15 	lds	r25, 0x1540
    15bc:	85 30       	cpi	r24, 0x05	; 5
    15be:	91 05       	cpc	r25, r1
    15c0:	49 f0       	breq	.+18     	; 0x15d4 <__vector_26+0x130>
    15c2:	89 31       	cpi	r24, 0x19	; 25
    15c4:	91 05       	cpc	r25, r1
    15c6:	51 f0       	breq	.+20     	; 0x15dc <__vector_26+0x138>
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	59 f4       	brne	.+22     	; 0x15e2 <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 de 13 	sts	0x13DE, r24
						break;
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 dd 13 	sts	0x13DD, r24
						break;
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    15dc:	8d e2       	ldi	r24, 0x2D	; 45
    15de:	94 e1       	ldi	r25, 0x14	; 20
    15e0:	29 df       	rcall	.-430    	; 0x1434 <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    15e2:	15 dd       	rcall	.-1494   	; 0x100e <reset_TWI>
			break;
    15e4:	e2 c0       	rjmp	.+452    	; 0x17aa <__vector_26+0x306>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    15e6:	80 91 b9 00 	lds	r24, 0x00B9
    15ea:	88 7f       	andi	r24, 0xF8	; 248
    15ec:	80 36       	cpi	r24, 0x60	; 96
    15ee:	29 f0       	breq	.+10     	; 0x15fa <__vector_26+0x156>
    15f0:	80 91 b9 00 	lds	r24, 0x00B9
    15f4:	88 7f       	andi	r24, 0xF8	; 248
    15f6:	88 36       	cpi	r24, 0x68	; 104
    15f8:	21 f4       	brne	.+8      	; 0x1602 <__vector_26+0x15e>
			{
				instruction = 1;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 93 36 15 	sts	0x1536, r24
    1600:	38 c0       	rjmp	.+112    	; 0x1672 <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    1602:	80 91 b9 00 	lds	r24, 0x00B9
    1606:	88 7f       	andi	r24, 0xF8	; 248
    1608:	80 38       	cpi	r24, 0x80	; 128
    160a:	e1 f4       	brne	.+56     	; 0x1644 <__vector_26+0x1a0>
			{
				if(instruction)
    160c:	80 91 36 15 	lds	r24, 0x1536
    1610:	88 23       	and	r24, r24
    1612:	41 f0       	breq	.+16     	; 0x1624 <__vector_26+0x180>
				{
					currentInstruction = get_data();
    1614:	d8 dc       	rcall	.-1616   	; 0xfc6 <get_data>
    1616:	80 93 3f 15 	sts	0x153F, r24
    161a:	10 92 40 15 	sts	0x1540, r1
					instruction = 0;
    161e:	10 92 36 15 	sts	0x1536, r1
    1622:	27 c0       	rjmp	.+78     	; 0x1672 <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    1624:	80 91 3f 15 	lds	r24, 0x153F
    1628:	90 91 40 15 	lds	r25, 0x1540
    162c:	82 30       	cpi	r24, 0x02	; 2
    162e:	91 05       	cpc	r25, r1
    1630:	19 f0       	breq	.+6      	; 0x1638 <__vector_26+0x194>
    1632:	49 97       	sbiw	r24, 0x19	; 25
    1634:	f1 f4       	brne	.+60     	; 0x1672 <__vector_26+0x1ce>
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    1638:	c6 dc       	rcall	.-1652   	; 0xfc6 <get_data>
    163a:	80 93 3e 15 	sts	0x153E, r24
    163e:	19 c0       	rjmp	.+50     	; 0x1672 <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    1640:	01 dd       	rcall	.-1534   	; 0x1044 <get_char_from_bus>
							break;
    1642:	17 c0       	rjmp	.+46     	; 0x1672 <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    1644:	80 91 b9 00 	lds	r24, 0x00B9
    1648:	88 7f       	andi	r24, 0xF8	; 248
    164a:	80 3a       	cpi	r24, 0xA0	; 160
    164c:	91 f4       	brne	.+36     	; 0x1672 <__vector_26+0x1ce>
			{
				stop_twi();
    164e:	ca dc       	rcall	.-1644   	; 0xfe4 <stop_twi>
				switch(currentInstruction)
    1650:	80 91 3f 15 	lds	r24, 0x153F
    1654:	90 91 40 15 	lds	r25, 0x1540
    1658:	82 30       	cpi	r24, 0x02	; 2
    165a:	91 05       	cpc	r25, r1
    165c:	19 f0       	breq	.+6      	; 0x1664 <__vector_26+0x1c0>
    165e:	49 97       	sbiw	r24, 0x19	; 25
    1660:	41 f4       	brne	.+16     	; 0x1672 <__vector_26+0x1ce>
    1662:	04 c0       	rjmp	.+8      	; 0x166c <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	80 93 db 13 	sts	0x13DB, r24
						break;
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    166c:	8d e2       	ldi	r24, 0x2D	; 45
    166e:	94 e1       	ldi	r25, 0x14	; 20
    1670:	e1 de       	rcall	.-574    	; 0x1434 <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    1672:	cd dc       	rcall	.-1638   	; 0x100e <reset_TWI>
			break;
    1674:	9a c0       	rjmp	.+308    	; 0x17aa <__vector_26+0x306>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1676:	80 91 b9 00 	lds	r24, 0x00B9
    167a:	88 7f       	andi	r24, 0xF8	; 248
    167c:	80 36       	cpi	r24, 0x60	; 96
    167e:	29 f0       	breq	.+10     	; 0x168a <__vector_26+0x1e6>
    1680:	80 91 b9 00 	lds	r24, 0x00B9
    1684:	88 7f       	andi	r24, 0xF8	; 248
    1686:	88 36       	cpi	r24, 0x68	; 104
    1688:	21 f4       	brne	.+8      	; 0x1692 <__vector_26+0x1ee>
			{
				instruction = 1;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 93 36 15 	sts	0x1536, r24
    1690:	8b c0       	rjmp	.+278    	; 0x17a8 <__vector_26+0x304>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1692:	80 91 b9 00 	lds	r24, 0x00B9
    1696:	88 7f       	andi	r24, 0xF8	; 248
    1698:	80 37       	cpi	r24, 0x70	; 112
    169a:	29 f0       	breq	.+10     	; 0x16a6 <__vector_26+0x202>
    169c:	80 91 b9 00 	lds	r24, 0x00B9
    16a0:	88 7f       	andi	r24, 0xF8	; 248
    16a2:	88 37       	cpi	r24, 0x78	; 120
    16a4:	39 f4       	brne	.+14     	; 0x16b4 <__vector_26+0x210>
			{
				currentInstruction = 255;
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	90 93 40 15 	sts	0x1540, r25
    16ae:	80 93 3f 15 	sts	0x153F, r24
    16b2:	7a c0       	rjmp	.+244    	; 0x17a8 <__vector_26+0x304>
			}
			else if(CONTROL == DATA_SLAW)
    16b4:	80 91 b9 00 	lds	r24, 0x00B9
    16b8:	88 7f       	andi	r24, 0xF8	; 248
    16ba:	80 38       	cpi	r24, 0x80	; 128
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <__vector_26+0x21c>
    16be:	41 c0       	rjmp	.+130    	; 0x1742 <__vector_26+0x29e>
			{
				if(instruction)
    16c0:	80 91 36 15 	lds	r24, 0x1536
    16c4:	88 23       	and	r24, r24
    16c6:	41 f0       	breq	.+16     	; 0x16d8 <__vector_26+0x234>
				{
					currentInstruction = get_data();
    16c8:	7e dc       	rcall	.-1796   	; 0xfc6 <get_data>
    16ca:	80 93 3f 15 	sts	0x153F, r24
    16ce:	10 92 40 15 	sts	0x1540, r1
					instruction = 0;
    16d2:	10 92 36 15 	sts	0x1536, r1
    16d6:	68 c0       	rjmp	.+208    	; 0x17a8 <__vector_26+0x304>
				}
				else
				{
					switch(currentInstruction)
    16d8:	80 91 3f 15 	lds	r24, 0x153F
    16dc:	90 91 40 15 	lds	r25, 0x1540
    16e0:	84 30       	cpi	r24, 0x04	; 4
    16e2:	91 05       	cpc	r25, r1
    16e4:	01 f1       	breq	.+64     	; 0x1726 <__vector_26+0x282>
    16e6:	34 f4       	brge	.+12     	; 0x16f4 <__vector_26+0x250>
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	59 f0       	breq	.+22     	; 0x1702 <__vector_26+0x25e>
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <__vector_26+0x24e>
    16f0:	5b c0       	rjmp	.+182    	; 0x17a8 <__vector_26+0x304>
    16f2:	1f c0       	rjmp	.+62     	; 0x1732 <__vector_26+0x28e>
    16f4:	85 30       	cpi	r24, 0x05	; 5
    16f6:	91 05       	cpc	r25, r1
    16f8:	f1 f0       	breq	.+60     	; 0x1736 <__vector_26+0x292>
    16fa:	07 97       	sbiw	r24, 0x07	; 7
    16fc:	09 f0       	breq	.+2      	; 0x1700 <__vector_26+0x25c>
    16fe:	54 c0       	rjmp	.+168    	; 0x17a8 <__vector_26+0x304>
    1700:	1c c0       	rjmp	.+56     	; 0x173a <__vector_26+0x296>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    1702:	c0 91 37 15 	lds	r28, 0x1537
    1706:	d0 91 38 15 	lds	r29, 0x1538
    170a:	5d dc       	rcall	.-1862   	; 0xfc6 <get_data>
    170c:	c7 5d       	subi	r28, 0xD7	; 215
    170e:	db 4e       	sbci	r29, 0xEB	; 235
    1710:	88 83       	st	Y, r24
	currentCommand += 1;
    1712:	80 91 37 15 	lds	r24, 0x1537
    1716:	90 91 38 15 	lds	r25, 0x1538
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	90 93 38 15 	sts	0x1538, r25
    1720:	80 93 37 15 	sts	0x1537, r24
    1724:	41 c0       	rjmp	.+130    	; 0x17a8 <__vector_26+0x304>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation = get_data();
    1726:	4f dc       	rcall	.-1890   	; 0xfc6 <get_data>
    1728:	80 93 39 15 	sts	0x1539, r24
    172c:	10 92 3a 15 	sts	0x153A, r1
    1730:	3b c0       	rjmp	.+118    	; 0x17a8 <__vector_26+0x304>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    1732:	73 dc       	rcall	.-1818   	; 0x101a <get_control_settings_from_bus>
							break;
    1734:	39 c0       	rjmp	.+114    	; 0x17a8 <__vector_26+0x304>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1736:	82 dc       	rcall	.-1788   	; 0x103c <get_autonom_settings_from_bus>
							break;
    1738:	37 c0       	rjmp	.+110    	; 0x17a8 <__vector_26+0x304>
	elevation = get_data();
}

void get_status_settings_from_bus()
{
	statusSettings = get_data();
    173a:	45 dc       	rcall	.-1910   	; 0xfc6 <get_data>
    173c:	80 93 53 15 	sts	0x1553, r24
    1740:	33 c0       	rjmp	.+102    	; 0x17a8 <__vector_26+0x304>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    1742:	80 91 b9 00 	lds	r24, 0x00B9
    1746:	88 7f       	andi	r24, 0xF8	; 248
    1748:	80 39       	cpi	r24, 0x90	; 144
    174a:	11 f4       	brne	.+4      	; 0x1750 <__vector_26+0x2ac>
			{
				get_sensor_from_bus();
    174c:	95 dc       	rcall	.-1750   	; 0x1078 <get_sensor_from_bus>
    174e:	2c c0       	rjmp	.+88     	; 0x17a8 <__vector_26+0x304>
			}
			else if (CONTROL == STOP)
    1750:	80 91 b9 00 	lds	r24, 0x00B9
    1754:	88 7f       	andi	r24, 0xF8	; 248
    1756:	80 3a       	cpi	r24, 0xA0	; 160
    1758:	39 f5       	brne	.+78     	; 0x17a8 <__vector_26+0x304>
			{
				stop_twi();
    175a:	44 dc       	rcall	.-1912   	; 0xfe4 <stop_twi>
				switch(currentInstruction)
    175c:	80 91 3f 15 	lds	r24, 0x153F
    1760:	90 91 40 15 	lds	r25, 0x1540
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	91 05       	cpc	r25, r1
    1768:	81 f0       	breq	.+32     	; 0x178a <__vector_26+0x2e6>
    176a:	2c f4       	brge	.+10     	; 0x1776 <__vector_26+0x2d2>
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	49 f0       	breq	.+18     	; 0x1782 <__vector_26+0x2de>
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	d1 f4       	brne	.+52     	; 0x17a8 <__vector_26+0x304>
    1774:	0e c0       	rjmp	.+28     	; 0x1792 <__vector_26+0x2ee>
    1776:	85 30       	cpi	r24, 0x05	; 5
    1778:	91 05       	cpc	r25, r1
    177a:	79 f0       	breq	.+30     	; 0x179a <__vector_26+0x2f6>
    177c:	07 97       	sbiw	r24, 0x07	; 7
    177e:	a1 f4       	brne	.+40     	; 0x17a8 <__vector_26+0x304>
    1780:	10 c0       	rjmp	.+32     	; 0x17a2 <__vector_26+0x2fe>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	80 93 df 13 	sts	0x13DF, r24
						break;
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <__vector_26+0x304>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	80 93 dc 13 	sts	0x13DC, r24
						break;
    1790:	0b c0       	rjmp	.+22     	; 0x17a8 <__vector_26+0x304>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	80 93 de 13 	sts	0x13DE, r24
						break;
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <__vector_26+0x304>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 93 dd 13 	sts	0x13DD, r24
						break;
    17a0:	03 c0       	rjmp	.+6      	; 0x17a8 <__vector_26+0x304>
					}
					case(I_STATUS_SETTINGS):
					{
						statusSettingsFlag_ = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	80 93 da 13 	sts	0x13DA, r24
						break;
					}
				}
			}
			reset_TWI();
    17a8:	32 dc       	rcall	.-1948   	; 0x100e <reset_TWI>
			break;
		}
	}
    17aa:	ff 91       	pop	r31
    17ac:	ef 91       	pop	r30
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	bf 91       	pop	r27
    17b4:	af 91       	pop	r26
    17b6:	9f 91       	pop	r25
    17b8:	8f 91       	pop	r24
    17ba:	7f 91       	pop	r23
    17bc:	6f 91       	pop	r22
    17be:	5f 91       	pop	r21
    17c0:	4f 91       	pop	r20
    17c2:	3f 91       	pop	r19
    17c4:	2f 91       	pop	r18
    17c6:	0f 90       	pop	r0
    17c8:	0b be       	out	0x3b, r0	; 59
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0f 90       	pop	r0
    17d0:	1f 90       	pop	r1
    17d2:	18 95       	reti

000017d4 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_send_packet(gRxBuffer[0], gRxBuffer[1]);
    17d4:	10 92 c5 00 	sts	0x00C5, r1
    17d8:	87 e0       	ldi	r24, 0x07	; 7
    17da:	80 93 c4 00 	sts	0x00C4, r24
    17de:	88 e9       	ldi	r24, 0x98	; 152
    17e0:	80 93 c1 00 	sts	0x00C1, r24
    17e4:	86 e0       	ldi	r24, 0x06	; 6
    17e6:	80 93 c2 00 	sts	0x00C2, r24
    17ea:	08 95       	ret

000017ec <USART_set_twi_message_destination>:
    17ec:	90 93 1c 11 	sts	0x111C, r25
    17f0:	80 93 1b 11 	sts	0x111B, r24
    17f4:	08 95       	ret

000017f6 <USART_check_tx_ready>:
    17f6:	80 91 c0 00 	lds	r24, 0x00C0
    17fa:	80 72       	andi	r24, 0x20	; 32
    17fc:	08 95       	ret

000017fe <USART_write_byte>:
    17fe:	cf 93       	push	r28
    1800:	c8 2f       	mov	r28, r24
    1802:	f9 df       	rcall	.-14     	; 0x17f6 <USART_check_tx_ready>
    1804:	88 23       	and	r24, r24
    1806:	e9 f3       	breq	.-6      	; 0x1802 <USART_write_byte+0x4>
    1808:	c0 93 c6 00 	sts	0x00C6, r28
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <USART_crc16>:
    1810:	cf 92       	push	r12
    1812:	df 92       	push	r13
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	66 23       	and	r22, r22
    1822:	09 f4       	brne	.+2      	; 0x1826 <USART_crc16+0x16>
    1824:	3e c0       	rjmp	.+124    	; 0x18a2 <USART_crc16+0x92>
    1826:	06 2f       	mov	r16, r22
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	4f ef       	ldi	r20, 0xFF	; 255
    182c:	5f ef       	ldi	r21, 0xFF	; 255
    182e:	ee ef       	ldi	r30, 0xFE	; 254
    1830:	ff ef       	ldi	r31, 0xFF	; 255
    1832:	c6 2e       	mov	r12, r22
    1834:	d1 2c       	mov	r13, r1
    1836:	e8 2e       	mov	r14, r24
    1838:	f1 2c       	mov	r15, r1
    183a:	c8 e0       	ldi	r28, 0x08	; 8
    183c:	d0 e0       	ldi	r29, 0x00	; 0
    183e:	ee 3f       	cpi	r30, 0xFE	; 254
    1840:	6f ef       	ldi	r22, 0xFF	; 255
    1842:	f6 07       	cpc	r31, r22
    1844:	19 f4       	brne	.+6      	; 0x184c <USART_crc16+0x3c>
    1846:	8e 2d       	mov	r24, r14
    1848:	9f 2d       	mov	r25, r15
    184a:	30 c0       	rjmp	.+96     	; 0x18ac <USART_crc16+0x9c>
    184c:	ef 3f       	cpi	r30, 0xFF	; 255
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	f8 07       	cpc	r31, r24
    1852:	19 f4       	brne	.+6      	; 0x185a <USART_crc16+0x4a>
    1854:	8c 2d       	mov	r24, r12
    1856:	9d 2d       	mov	r25, r13
    1858:	29 c0       	rjmp	.+82     	; 0x18ac <USART_crc16+0x9c>
    185a:	df 01       	movw	r26, r30
    185c:	a7 5a       	subi	r26, 0xA7	; 167
    185e:	b8 4e       	sbci	r27, 0xE8	; 232
    1860:	8c 91       	ld	r24, X
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	23 c0       	rjmp	.+70     	; 0x18ac <USART_crc16+0x9c>
    1866:	ba 01       	movw	r22, r20
    1868:	68 27       	eor	r22, r24
    186a:	79 27       	eor	r23, r25
    186c:	60 ff       	sbrs	r22, 0
    186e:	07 c0       	rjmp	.+14     	; 0x187e <USART_crc16+0x6e>
    1870:	56 95       	lsr	r21
    1872:	47 95       	ror	r20
    1874:	68 e0       	ldi	r22, 0x08	; 8
    1876:	46 27       	eor	r20, r22
    1878:	64 e8       	ldi	r22, 0x84	; 132
    187a:	56 27       	eor	r21, r22
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <USART_crc16+0x72>
    187e:	56 95       	lsr	r21
    1880:	47 95       	ror	r20
    1882:	96 95       	lsr	r25
    1884:	87 95       	ror	r24
    1886:	21 50       	subi	r18, 0x01	; 1
    1888:	31 09       	sbc	r19, r1
    188a:	69 f7       	brne	.-38     	; 0x1866 <USART_crc16+0x56>
    188c:	31 96       	adiw	r30, 0x01	; 1
    188e:	e0 17       	cp	r30, r16
    1890:	f1 07       	cpc	r31, r17
    1892:	a9 f6       	brne	.-86     	; 0x183e <USART_crc16+0x2e>
    1894:	9a 01       	movw	r18, r20
    1896:	20 95       	com	r18
    1898:	30 95       	com	r19
    189a:	32 27       	eor	r19, r18
    189c:	23 27       	eor	r18, r19
    189e:	32 27       	eor	r19, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <USART_crc16+0x96>
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	82 2f       	mov	r24, r18
    18a8:	93 2f       	mov	r25, r19
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <USART_crc16+0xa0>
    18ac:	9e 01       	movw	r18, r28
    18ae:	db cf       	rjmp	.-74     	; 0x1866 <USART_crc16+0x56>
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	08 95       	ret

000018c2 <USART_send_packet>:
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	9e e7       	ldi	r25, 0x7E	; 126
    18cc:	90 93 58 18 	sts	0x1858, r25
    18d0:	80 93 59 18 	sts	0x1859, r24
    18d4:	60 93 5a 18 	sts	0x185A, r22
    18d8:	26 2f       	mov	r18, r22
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	12 16       	cp	r1, r18
    18de:	13 06       	cpc	r1, r19
    18e0:	4c f5       	brge	.+82     	; 0x1934 <USART_send_packet+0x72>
    18e2:	e9 e5       	ldi	r30, 0x59	; 89
    18e4:	f7 e1       	ldi	r31, 0x17	; 23
    18e6:	03 e0       	ldi	r16, 0x03	; 3
    18e8:	10 e0       	ldi	r17, 0x00	; 0
    18ea:	c0 e0       	ldi	r28, 0x00	; 0
    18ec:	d0 e0       	ldi	r29, 0x00	; 0
    18ee:	7d e7       	ldi	r23, 0x7D	; 125
    18f0:	50 e2       	ldi	r21, 0x20	; 32
    18f2:	90 81       	ld	r25, Z
    18f4:	49 2f       	mov	r20, r25
    18f6:	4d 57       	subi	r20, 0x7D	; 125
    18f8:	42 30       	cpi	r20, 0x02	; 2
    18fa:	80 f4       	brcc	.+32     	; 0x191c <USART_send_packet+0x5a>
    18fc:	d8 01       	movw	r26, r16
    18fe:	a8 5a       	subi	r26, 0xA8	; 168
    1900:	b7 4e       	sbci	r27, 0xE7	; 231
    1902:	ac 0f       	add	r26, r28
    1904:	bd 1f       	adc	r27, r29
    1906:	7c 93       	st	X, r23
    1908:	0f 5f       	subi	r16, 0xFF	; 255
    190a:	1f 4f       	sbci	r17, 0xFF	; 255
    190c:	d8 01       	movw	r26, r16
    190e:	a8 5a       	subi	r26, 0xA8	; 168
    1910:	b7 4e       	sbci	r27, 0xE7	; 231
    1912:	ac 0f       	add	r26, r28
    1914:	bd 1f       	adc	r27, r29
    1916:	95 27       	eor	r25, r21
    1918:	9c 93       	st	X, r25
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <USART_send_packet+0x66>
    191c:	d8 01       	movw	r26, r16
    191e:	a8 5a       	subi	r26, 0xA8	; 168
    1920:	b7 4e       	sbci	r27, 0xE7	; 231
    1922:	ac 0f       	add	r26, r28
    1924:	bd 1f       	adc	r27, r29
    1926:	9c 93       	st	X, r25
    1928:	21 96       	adiw	r28, 0x01	; 1
    192a:	31 96       	adiw	r30, 0x01	; 1
    192c:	c2 17       	cp	r28, r18
    192e:	d3 07       	cpc	r29, r19
    1930:	01 f7       	brne	.-64     	; 0x18f2 <USART_send_packet+0x30>
    1932:	04 c0       	rjmp	.+8      	; 0x193c <USART_send_packet+0x7a>
    1934:	03 e0       	ldi	r16, 0x03	; 3
    1936:	10 e0       	ldi	r17, 0x00	; 0
    1938:	c0 e0       	ldi	r28, 0x00	; 0
    193a:	d0 e0       	ldi	r29, 0x00	; 0
    193c:	69 df       	rcall	.-302    	; 0x1810 <USART_crc16>
    193e:	f8 01       	movw	r30, r16
    1940:	e8 5a       	subi	r30, 0xA8	; 168
    1942:	f7 4e       	sbci	r31, 0xE7	; 231
    1944:	ec 0f       	add	r30, r28
    1946:	fd 1f       	adc	r31, r29
    1948:	90 83       	st	Z, r25
    194a:	81 83       	std	Z+1, r24	; 0x01
    194c:	22 96       	adiw	r28, 0x02	; 2
    194e:	0c 0f       	add	r16, r28
    1950:	1d 1f       	adc	r17, r29
    1952:	f8 01       	movw	r30, r16
    1954:	e8 5a       	subi	r30, 0xA8	; 168
    1956:	f7 4e       	sbci	r31, 0xE7	; 231
    1958:	8e e7       	ldi	r24, 0x7E	; 126
    195a:	80 83       	st	Z, r24
    195c:	c8 01       	movw	r24, r16
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	18 16       	cp	r1, r24
    1962:	19 06       	cpc	r1, r25
    1964:	4c f4       	brge	.+18     	; 0x1978 <USART_send_packet+0xb6>
    1966:	c8 e5       	ldi	r28, 0x58	; 88
    1968:	d8 e1       	ldi	r29, 0x18	; 24
    196a:	07 5a       	subi	r16, 0xA7	; 167
    196c:	17 4e       	sbci	r17, 0xE7	; 231
    196e:	89 91       	ld	r24, Y+
    1970:	46 df       	rcall	.-372    	; 0x17fe <USART_write_byte>
    1972:	c0 17       	cp	r28, r16
    1974:	d1 07       	cpc	r29, r17
    1976:	d9 f7       	brne	.-10     	; 0x196e <USART_send_packet+0xac>
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	08 95       	ret

00001982 <USART_send_command>:
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0c dd       	rcall	.-1512   	; 0x13a0 <TWI_get_command>
    1988:	80 93 59 17 	sts	0x1759, r24
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	07 dd       	rcall	.-1522   	; 0x13a0 <TWI_get_command>
    1992:	80 93 5a 17 	sts	0x175A, r24
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 dd       	rcall	.-1532   	; 0x13a0 <TWI_get_command>
    199c:	80 93 5b 17 	sts	0x175B, r24
    19a0:	63 e0       	ldi	r22, 0x03	; 3
    19a2:	83 e4       	ldi	r24, 0x43	; 67
    19a4:	8e cf       	rjmp	.-228    	; 0x18c2 <USART_send_packet>

000019a6 <USART_send_elevation>:
    19a6:	0e dd       	rcall	.-1508   	; 0x13c4 <TWI_get_elevation>
    19a8:	80 93 59 17 	sts	0x1759, r24
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	85 e4       	ldi	r24, 0x45	; 69
    19b0:	88 cf       	rjmp	.-240    	; 0x18c2 <USART_send_packet>

000019b2 <USART_send_turn>:
    19b2:	90 93 59 17 	sts	0x1759, r25
    19b6:	80 93 5a 17 	sts	0x175A, r24
    19ba:	60 93 5b 17 	sts	0x175B, r22
    19be:	63 e0       	ldi	r22, 0x03	; 3
    19c0:	84 e5       	ldi	r24, 0x54	; 84
    19c2:	7f cf       	rjmp	.-258    	; 0x18c2 <USART_send_packet>

000019c4 <USART_send_climb>:
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	88 e4       	ldi	r24, 0x48	; 72
    19c8:	7c cf       	rjmp	.-264    	; 0x18c2 <USART_send_packet>

000019ca <USART_decode_message_rx_fifo>:
    19ca:	8f 92       	push	r8
    19cc:	9f 92       	push	r9
    19ce:	af 92       	push	r10
    19d0:	bf 92       	push	r11
    19d2:	cf 92       	push	r12
    19d4:	df 92       	push	r13
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	ad b6       	in	r10, 0x3d	; 61
    19e8:	be b6       	in	r11, 0x3e	; 62
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	80 91 13 01 	lds	r24, 0x0113
    19f2:	90 91 14 01 	lds	r25, 0x0114
    19f6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    19fa:	88 23       	and	r24, r24
    19fc:	31 f0       	breq	.+12     	; 0x1a0a <USART_decode_message_rx_fifo+0x40>
    19fe:	61 e2       	ldi	r22, 0x21	; 33
    1a00:	72 e1       	ldi	r23, 0x12	; 18
    1a02:	80 e4       	ldi	r24, 0x40	; 64
    1a04:	01 dc       	rcall	.-2046   	; 0x1208 <TWI_send_string>
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	45 c0       	rjmp	.+138    	; 0x1a94 <USART_decode_message_rx_fifo+0xca>
    1a0a:	c0 90 00 00 	lds	r12, 0x0000
    1a0e:	d1 2c       	mov	r13, r1
    1a10:	96 01       	movw	r18, r12
    1a12:	21 50       	subi	r18, 0x01	; 1
    1a14:	31 09       	sbc	r19, r1
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	c1 14       	cp	r12, r1
    1a1c:	d1 04       	cpc	r13, r1
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <USART_decode_message_rx_fifo+0x5a>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	82 0f       	add	r24, r18
    1a26:	93 1f       	adc	r25, r19
    1a28:	2d b7       	in	r18, 0x3d	; 61
    1a2a:	3e b7       	in	r19, 0x3e	; 62
    1a2c:	28 1b       	sub	r18, r24
    1a2e:	39 0b       	sbc	r19, r25
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	3e bf       	out	0x3e, r19	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	2d bf       	out	0x3d, r18	; 61
    1a3a:	8d b7       	in	r24, 0x3d	; 61
    1a3c:	9e b7       	in	r25, 0x3e	; 62
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	88 2e       	mov	r8, r24
    1a42:	99 2e       	mov	r9, r25
    1a44:	1c 14       	cp	r1, r12
    1a46:	1d 04       	cpc	r1, r13
    1a48:	f4 f4       	brge	.+60     	; 0x1a86 <USART_decode_message_rx_fifo+0xbc>
    1a4a:	e8 2e       	mov	r14, r24
    1a4c:	f9 2e       	mov	r15, r25
    1a4e:	00 e0       	ldi	r16, 0x00	; 0
    1a50:	10 e0       	ldi	r17, 0x00	; 0
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	80 91 13 01 	lds	r24, 0x0113
    1a5a:	90 91 14 01 	lds	r25, 0x0114
    1a5e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1a62:	88 23       	and	r24, r24
    1a64:	31 f0       	breq	.+12     	; 0x1a72 <USART_decode_message_rx_fifo+0xa8>
    1a66:	63 e4       	ldi	r22, 0x43	; 67
    1a68:	72 e1       	ldi	r23, 0x12	; 18
    1a6a:	80 e4       	ldi	r24, 0x40	; 64
    1a6c:	cd db       	rcall	.-2150   	; 0x1208 <TWI_send_string>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	11 c0       	rjmp	.+34     	; 0x1a94 <USART_decode_message_rx_fifo+0xca>
    1a72:	80 91 00 00 	lds	r24, 0x0000
    1a76:	f7 01       	movw	r30, r14
    1a78:	81 93       	st	Z+, r24
    1a7a:	7f 01       	movw	r14, r30
    1a7c:	0f 5f       	subi	r16, 0xFF	; 255
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	0c 15       	cp	r16, r12
    1a82:	1d 05       	cpc	r17, r13
    1a84:	34 f3       	brlt	.-52     	; 0x1a52 <USART_decode_message_rx_fifo+0x88>
    1a86:	a6 01       	movw	r20, r12
    1a88:	68 2d       	mov	r22, r8
    1a8a:	79 2d       	mov	r23, r9
    1a8c:	80 91 1b 11 	lds	r24, 0x111B
    1a90:	01 dc       	rcall	.-2046   	; 0x1294 <TWI_send_string_fixed_length>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	be be       	out	0x3e, r11	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	ad be       	out	0x3d, r10	; 61
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
    1aaa:	df 90       	pop	r13
    1aac:	cf 90       	pop	r12
    1aae:	bf 90       	pop	r11
    1ab0:	af 90       	pop	r10
    1ab2:	9f 90       	pop	r9
    1ab4:	8f 90       	pop	r8
    1ab6:	08 95       	ret

00001ab8 <USART_decode_gyro_rx_fifo>:
    1ab8:	af 92       	push	r10
    1aba:	bf 92       	push	r11
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <USART_decode_gyro_rx_fifo+0x16>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <USART_decode_gyro_rx_fifo+0x18>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	80 93 ed 13 	sts	0x13ED, r24
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	80 91 13 01 	lds	r24, 0x0113
    1ae2:	90 91 14 01 	lds	r25, 0x0114
    1ae6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1aea:	88 23       	and	r24, r24
    1aec:	31 f0       	breq	.+12     	; 0x1afa <USART_decode_gyro_rx_fifo+0x42>
    1aee:	66 e6       	ldi	r22, 0x66	; 102
    1af0:	72 e1       	ldi	r23, 0x12	; 18
    1af2:	80 e4       	ldi	r24, 0x40	; 64
    1af4:	89 db       	rcall	.-2286   	; 0x1208 <TWI_send_string>
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	73 c0       	rjmp	.+230    	; 0x1be0 <USART_decode_gyro_rx_fifo+0x128>
    1afa:	80 91 00 00 	lds	r24, 0x0000
    1afe:	8c 30       	cpi	r24, 0x0C	; 12
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <USART_decode_gyro_rx_fifo+0x4c>
    1b02:	53 c0       	rjmp	.+166    	; 0x1baa <USART_decode_gyro_rx_fifo+0xf2>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	6c c0       	rjmp	.+216    	; 0x1be0 <USART_decode_gyro_rx_fifo+0x128>
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	80 91 13 01 	lds	r24, 0x0113
    1b10:	90 91 14 01 	lds	r25, 0x0114
    1b14:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1b18:	88 23       	and	r24, r24
    1b1a:	31 f0       	breq	.+12     	; 0x1b28 <USART_decode_gyro_rx_fifo+0x70>
    1b1c:	65 e8       	ldi	r22, 0x85	; 133
    1b1e:	72 e1       	ldi	r23, 0x12	; 18
    1b20:	80 e4       	ldi	r24, 0x40	; 64
    1b22:	72 db       	rcall	.-2332   	; 0x1208 <TWI_send_string>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	5c c0       	rjmp	.+184    	; 0x1be0 <USART_decode_gyro_rx_fifo+0x128>
    1b28:	80 91 00 00 	lds	r24, 0x0000
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	81 93       	st	Z+, r24
    1b30:	6f 01       	movw	r12, r30
    1b32:	e0 17       	cp	r30, r16
    1b34:	f1 07       	cpc	r31, r17
    1b36:	41 f7       	brne	.-48     	; 0x1b08 <USART_decode_gyro_rx_fifo+0x50>
    1b38:	f1 e0       	ldi	r31, 0x01	; 1
    1b3a:	af 16       	cp	r10, r31
    1b3c:	b1 04       	cpc	r11, r1
    1b3e:	99 f0       	breq	.+38     	; 0x1b66 <USART_decode_gyro_rx_fifo+0xae>
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	a8 16       	cp	r10, r24
    1b44:	b1 04       	cpc	r11, r1
    1b46:	e1 f0       	breq	.+56     	; 0x1b80 <USART_decode_gyro_rx_fifo+0xc8>
    1b48:	ab 28       	or	r10, r11
    1b4a:	39 f5       	brne	.+78     	; 0x1b9a <USART_decode_gyro_rx_fifo+0xe2>
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	ab 81       	ldd	r26, Y+3	; 0x03
    1b52:	bc 81       	ldd	r27, Y+4	; 0x04
    1b54:	80 93 e9 13 	sts	0x13E9, r24
    1b58:	90 93 ea 13 	sts	0x13EA, r25
    1b5c:	a0 93 eb 13 	sts	0x13EB, r26
    1b60:	b0 93 ec 13 	sts	0x13EC, r27
    1b64:	1e c0       	rjmp	.+60     	; 0x1ba2 <USART_decode_gyro_rx_fifo+0xea>
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	ab 81       	ldd	r26, Y+3	; 0x03
    1b6c:	bc 81       	ldd	r27, Y+4	; 0x04
    1b6e:	80 93 e5 13 	sts	0x13E5, r24
    1b72:	90 93 e6 13 	sts	0x13E6, r25
    1b76:	a0 93 e7 13 	sts	0x13E7, r26
    1b7a:	b0 93 e8 13 	sts	0x13E8, r27
    1b7e:	11 c0       	rjmp	.+34     	; 0x1ba2 <USART_decode_gyro_rx_fifo+0xea>
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	ab 81       	ldd	r26, Y+3	; 0x03
    1b86:	bc 81       	ldd	r27, Y+4	; 0x04
    1b88:	80 93 e1 13 	sts	0x13E1, r24
    1b8c:	90 93 e2 13 	sts	0x13E2, r25
    1b90:	a0 93 e3 13 	sts	0x13E3, r26
    1b94:	b0 93 e4 13 	sts	0x13E4, r27
    1b98:	18 c0       	rjmp	.+48     	; 0x1bca <USART_decode_gyro_rx_fifo+0x112>
    1b9a:	e3 e0       	ldi	r30, 0x03	; 3
    1b9c:	ee 16       	cp	r14, r30
    1b9e:	f1 04       	cpc	r15, r1
    1ba0:	a4 f4       	brge	.+40     	; 0x1bca <USART_decode_gyro_rx_fifo+0x112>
    1ba2:	ff ef       	ldi	r31, 0xFF	; 255
    1ba4:	ef 1a       	sub	r14, r31
    1ba6:	ff 0a       	sbc	r15, r31
    1ba8:	06 c0       	rjmp	.+12     	; 0x1bb6 <USART_decode_gyro_rx_fifo+0xfe>
    1baa:	ee 24       	eor	r14, r14
    1bac:	e3 94       	inc	r14
    1bae:	f1 2c       	mov	r15, r1
    1bb0:	8e 01       	movw	r16, r28
    1bb2:	0b 5f       	subi	r16, 0xFB	; 251
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	57 01       	movw	r10, r14
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	a8 1a       	sub	r10, r24
    1bbc:	b1 08       	sbc	r11, r1
    1bbe:	cc 24       	eor	r12, r12
    1bc0:	c3 94       	inc	r12
    1bc2:	d1 2c       	mov	r13, r1
    1bc4:	cc 0e       	add	r12, r28
    1bc6:	dd 1e       	adc	r13, r29
    1bc8:	9f cf       	rjmp	.-194    	; 0x1b08 <USART_decode_gyro_rx_fifo+0x50>
    1bca:	40 91 e1 13 	lds	r20, 0x13E1
    1bce:	50 91 e2 13 	lds	r21, 0x13E2
    1bd2:	60 91 e3 13 	lds	r22, 0x13E3
    1bd6:	70 91 e4 13 	lds	r23, 0x13E4
    1bda:	80 e8       	ldi	r24, 0x80	; 128
    1bdc:	99 db       	rcall	.-2254   	; 0x1310 <TWI_send_float>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	08 95       	ret

00001bfe <USART_decode_command_rx_fifo>:
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	80 91 13 01 	lds	r24, 0x0113
    1c0a:	90 91 14 01 	lds	r25, 0x0114
    1c0e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1c12:	88 23       	and	r24, r24
    1c14:	31 f0       	breq	.+12     	; 0x1c22 <USART_decode_command_rx_fifo+0x24>
    1c16:	65 ea       	ldi	r22, 0xA5	; 165
    1c18:	72 e1       	ldi	r23, 0x12	; 18
    1c1a:	80 e4       	ldi	r24, 0x40	; 64
    1c1c:	f5 da       	rcall	.-2582   	; 0x1208 <TWI_send_string>
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	45 c0       	rjmp	.+138    	; 0x1cac <USART_decode_command_rx_fifo+0xae>
    1c22:	80 91 00 00 	lds	r24, 0x0000
    1c26:	83 30       	cpi	r24, 0x03	; 3
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <USART_decode_command_rx_fifo+0x2e>
    1c2a:	3b c0       	rjmp	.+118    	; 0x1ca2 <USART_decode_command_rx_fifo+0xa4>
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	80 91 13 01 	lds	r24, 0x0113
    1c34:	90 91 14 01 	lds	r25, 0x0114
    1c38:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1c3c:	88 23       	and	r24, r24
    1c3e:	31 f0       	breq	.+12     	; 0x1c4c <USART_decode_command_rx_fifo+0x4e>
    1c40:	67 ec       	ldi	r22, 0xC7	; 199
    1c42:	72 e1       	ldi	r23, 0x12	; 18
    1c44:	80 e4       	ldi	r24, 0x40	; 64
    1c46:	e0 da       	rcall	.-2624   	; 0x1208 <TWI_send_string>
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	30 c0       	rjmp	.+96     	; 0x1cac <USART_decode_command_rx_fifo+0xae>
    1c4c:	c0 91 00 00 	lds	r28, 0x0000
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	80 91 13 01 	lds	r24, 0x0113
    1c58:	90 91 14 01 	lds	r25, 0x0114
    1c5c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1c60:	88 23       	and	r24, r24
    1c62:	31 f0       	breq	.+12     	; 0x1c70 <USART_decode_command_rx_fifo+0x72>
    1c64:	6f ee       	ldi	r22, 0xEF	; 239
    1c66:	72 e1       	ldi	r23, 0x12	; 18
    1c68:	80 e4       	ldi	r24, 0x40	; 64
    1c6a:	ce da       	rcall	.-2660   	; 0x1208 <TWI_send_string>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	1e c0       	rjmp	.+60     	; 0x1cac <USART_decode_command_rx_fifo+0xae>
    1c70:	d0 91 00 00 	lds	r29, 0x0000
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	80 91 13 01 	lds	r24, 0x0113
    1c7c:	90 91 14 01 	lds	r25, 0x0114
    1c80:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1c84:	88 23       	and	r24, r24
    1c86:	31 f0       	breq	.+12     	; 0x1c94 <USART_decode_command_rx_fifo+0x96>
    1c88:	66 e1       	ldi	r22, 0x16	; 22
    1c8a:	73 e1       	ldi	r23, 0x13	; 19
    1c8c:	80 e4       	ldi	r24, 0x40	; 64
    1c8e:	bc da       	rcall	.-2696   	; 0x1208 <TWI_send_string>
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	0c c0       	rjmp	.+24     	; 0x1cac <USART_decode_command_rx_fifo+0xae>
    1c94:	40 91 00 00 	lds	r20, 0x0000
    1c98:	6d 2f       	mov	r22, r29
    1c9a:	8c 2f       	mov	r24, r28
    1c9c:	6d da       	rcall	.-2854   	; 0x1178 <TWI_send_command>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	05 c0       	rjmp	.+10     	; 0x1cac <USART_decode_command_rx_fifo+0xae>
    1ca2:	6a e3       	ldi	r22, 0x3A	; 58
    1ca4:	73 e1       	ldi	r23, 0x13	; 19
    1ca6:	80 e4       	ldi	r24, 0x40	; 64
    1ca8:	af da       	rcall	.-2722   	; 0x1208 <TWI_send_string>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <USART_DecodeValueFIFO>:
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <USART_DecodeValueFIFO+0xe>
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <USART_DecodeValueFIFO+0x10>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	80 91 13 01 	lds	r24, 0x0113
    1cce:	90 91 14 01 	lds	r25, 0x0114
    1cd2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1cd6:	88 23       	and	r24, r24
    1cd8:	31 f0       	breq	.+12     	; 0x1ce6 <USART_DecodeValueFIFO+0x34>
    1cda:	61 e6       	ldi	r22, 0x61	; 97
    1cdc:	73 e1       	ldi	r23, 0x13	; 19
    1cde:	80 e4       	ldi	r24, 0x40	; 64
    1ce0:	93 da       	rcall	.-2778   	; 0x1208 <TWI_send_string>
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	29 c0       	rjmp	.+82     	; 0x1d38 <USART_DecodeValueFIFO+0x86>
    1ce6:	80 91 00 00 	lds	r24, 0x0000
    1cea:	84 30       	cpi	r24, 0x04	; 4
    1cec:	11 f5       	brne	.+68     	; 0x1d32 <USART_DecodeValueFIFO+0x80>
    1cee:	8e 01       	movw	r16, r28
    1cf0:	0f 5f       	subi	r16, 0xFF	; 255
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	7e 01       	movw	r14, r28
    1cf6:	85 e0       	ldi	r24, 0x05	; 5
    1cf8:	e8 0e       	add	r14, r24
    1cfa:	f1 1c       	adc	r15, r1
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	80 91 13 01 	lds	r24, 0x0113
    1d04:	90 91 14 01 	lds	r25, 0x0114
    1d08:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	13 c0       	rjmp	.+38     	; 0x1d36 <USART_DecodeValueFIFO+0x84>
    1d10:	80 91 00 00 	lds	r24, 0x0000
    1d14:	f8 01       	movw	r30, r16
    1d16:	81 93       	st	Z+, r24
    1d18:	8f 01       	movw	r16, r30
    1d1a:	ee 15       	cp	r30, r14
    1d1c:	ff 05       	cpc	r31, r15
    1d1e:	71 f7       	brne	.-36     	; 0x1cfc <USART_DecodeValueFIFO+0x4a>
    1d20:	49 81       	ldd	r20, Y+1	; 0x01
    1d22:	5a 81       	ldd	r21, Y+2	; 0x02
    1d24:	6b 81       	ldd	r22, Y+3	; 0x03
    1d26:	7c 81       	ldd	r23, Y+4	; 0x04
    1d28:	80 91 1b 11 	lds	r24, 0x111B
    1d2c:	f1 da       	rcall	.-2590   	; 0x1310 <TWI_send_float>
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	03 c0       	rjmp	.+6      	; 0x1d38 <USART_DecodeValueFIFO+0x86>
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <USART_DecodeValueFIFO+0x86>
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	08 95       	ret

00001d4e <USART_DecodeReadyFIFO>:
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	80 91 13 01 	lds	r24, 0x0113
    1d56:	90 91 14 01 	lds	r25, 0x0114
    1d5a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1d5e:	88 23       	and	r24, r24
    1d60:	31 f0       	breq	.+12     	; 0x1d6e <USART_DecodeReadyFIFO+0x20>
    1d62:	65 ea       	ldi	r22, 0xA5	; 165
    1d64:	72 e1       	ldi	r23, 0x12	; 18
    1d66:	80 e4       	ldi	r24, 0x40	; 64
    1d68:	4f da       	rcall	.-2914   	; 0x1208 <TWI_send_string>
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	08 95       	ret
    1d6e:	80 91 00 00 	lds	r24, 0x0000
    1d72:	81 11       	cpse	r24, r1
    1d74:	05 c0       	rjmp	.+10     	; 0x1d80 <USART_DecodeReadyFIFO+0x32>
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	80 93 f0 13 	sts	0x13F0, r24
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	08 95       	ret
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	08 95       	ret

00001d84 <USART_decode_turn_done_rx_fifo>:
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	80 91 13 01 	lds	r24, 0x0113
    1d8c:	90 91 14 01 	lds	r25, 0x0114
    1d90:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1d94:	88 23       	and	r24, r24
    1d96:	31 f0       	breq	.+12     	; 0x1da4 <USART_decode_turn_done_rx_fifo+0x20>
    1d98:	61 e8       	ldi	r22, 0x81	; 129
    1d9a:	73 e1       	ldi	r23, 0x13	; 19
    1d9c:	80 e4       	ldi	r24, 0x40	; 64
    1d9e:	34 da       	rcall	.-2968   	; 0x1208 <TWI_send_string>
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	08 95       	ret
    1da4:	80 91 00 00 	lds	r24, 0x0000
    1da8:	81 11       	cpse	r24, r1
    1daa:	05 c0       	rjmp	.+10     	; 0x1db6 <USART_decode_turn_done_rx_fifo+0x32>
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	80 93 ef 13 	sts	0x13EF, r24
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	08 95       	ret
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	08 95       	ret

00001dba <USART_decode_climb_done_rx_fifo>:
    1dba:	60 e0       	ldi	r22, 0x00	; 0
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	80 91 13 01 	lds	r24, 0x0113
    1dc2:	90 91 14 01 	lds	r25, 0x0114
    1dc6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1dca:	88 23       	and	r24, r24
    1dcc:	31 f0       	breq	.+12     	; 0x1dda <USART_decode_climb_done_rx_fifo+0x20>
    1dce:	65 ea       	ldi	r22, 0xA5	; 165
    1dd0:	73 e1       	ldi	r23, 0x13	; 19
    1dd2:	80 e4       	ldi	r24, 0x40	; 64
    1dd4:	19 da       	rcall	.-3022   	; 0x1208 <TWI_send_string>
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	08 95       	ret
    1dda:	80 91 00 00 	lds	r24, 0x0000
    1dde:	81 11       	cpse	r24, r1
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <USART_decode_climb_done_rx_fifo+0x32>
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	80 93 ee 13 	sts	0x13EE, r24
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	08 95       	ret
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	08 95       	ret

00001df0 <USART_ready>:
    1df0:	80 91 f0 13 	lds	r24, 0x13F0
    1df4:	88 23       	and	r24, r24
    1df6:	21 f0       	breq	.+8      	; 0x1e00 <USART_ready+0x10>
    1df8:	10 92 f0 13 	sts	0x13F0, r1
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	08 95       	ret
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	08 95       	ret

00001e04 <USART_turn_done>:
    1e04:	80 91 ef 13 	lds	r24, 0x13EF
    1e08:	88 23       	and	r24, r24
    1e0a:	21 f0       	breq	.+8      	; 0x1e14 <USART_turn_done+0x10>
    1e0c:	10 92 ef 13 	sts	0x13EF, r1
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	08 95       	ret
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	08 95       	ret

00001e18 <USART_climb_done>:
    1e18:	80 91 ee 13 	lds	r24, 0x13EE
    1e1c:	88 23       	and	r24, r24
    1e1e:	21 f0       	breq	.+8      	; 0x1e28 <USART_climb_done+0x10>
    1e20:	10 92 ee 13 	sts	0x13EE, r1
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	08 95       	ret
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	08 95       	ret

00001e2c <USART_decode_rx_fifo>:
    1e2c:	2e c0       	rjmp	.+92     	; 0x1e8a <USART_decode_rx_fifo+0x5e>
    1e2e:	80 91 00 00 	lds	r24, 0x0000
    1e32:	8d 34       	cpi	r24, 0x4D	; 77
    1e34:	79 f0       	breq	.+30     	; 0x1e54 <USART_decode_rx_fifo+0x28>
    1e36:	38 f4       	brcc	.+14     	; 0x1e46 <USART_decode_rx_fifo+0x1a>
    1e38:	87 34       	cpi	r24, 0x47	; 71
    1e3a:	e1 f0       	breq	.+56     	; 0x1e74 <USART_decode_rx_fifo+0x48>
    1e3c:	88 34       	cpi	r24, 0x48	; 72
    1e3e:	11 f1       	breq	.+68     	; 0x1e84 <USART_decode_rx_fifo+0x58>
    1e40:	83 34       	cpi	r24, 0x43	; 67
    1e42:	19 f5       	brne	.+70     	; 0x1e8a <USART_decode_rx_fifo+0x5e>
    1e44:	0b c0       	rjmp	.+22     	; 0x1e5c <USART_decode_rx_fifo+0x30>
    1e46:	84 35       	cpi	r24, 0x54	; 84
    1e48:	c9 f0       	breq	.+50     	; 0x1e7c <USART_decode_rx_fifo+0x50>
    1e4a:	86 35       	cpi	r24, 0x56	; 86
    1e4c:	59 f0       	breq	.+22     	; 0x1e64 <USART_decode_rx_fifo+0x38>
    1e4e:	82 35       	cpi	r24, 0x52	; 82
    1e50:	e1 f4       	brne	.+56     	; 0x1e8a <USART_decode_rx_fifo+0x5e>
    1e52:	0c c0       	rjmp	.+24     	; 0x1e6c <USART_decode_rx_fifo+0x40>
    1e54:	ba dd       	rcall	.-1164   	; 0x19ca <USART_decode_message_rx_fifo>
    1e56:	88 23       	and	r24, r24
    1e58:	c1 f0       	breq	.+48     	; 0x1e8a <USART_decode_rx_fifo+0x5e>
    1e5a:	08 95       	ret
    1e5c:	d0 de       	rcall	.-608    	; 0x1bfe <USART_decode_command_rx_fifo>
    1e5e:	88 23       	and	r24, r24
    1e60:	a1 f0       	breq	.+40     	; 0x1e8a <USART_decode_rx_fifo+0x5e>
    1e62:	08 95       	ret
    1e64:	26 df       	rcall	.-436    	; 0x1cb2 <USART_DecodeValueFIFO>
    1e66:	88 23       	and	r24, r24
    1e68:	81 f0       	breq	.+32     	; 0x1e8a <USART_decode_rx_fifo+0x5e>
    1e6a:	08 95       	ret
    1e6c:	70 df       	rcall	.-288    	; 0x1d4e <USART_DecodeReadyFIFO>
    1e6e:	88 23       	and	r24, r24
    1e70:	61 f0       	breq	.+24     	; 0x1e8a <USART_decode_rx_fifo+0x5e>
    1e72:	08 95       	ret
    1e74:	21 de       	rcall	.-958    	; 0x1ab8 <USART_decode_gyro_rx_fifo>
    1e76:	88 23       	and	r24, r24
    1e78:	41 f0       	breq	.+16     	; 0x1e8a <USART_decode_rx_fifo+0x5e>
    1e7a:	08 95       	ret
    1e7c:	83 df       	rcall	.-250    	; 0x1d84 <USART_decode_turn_done_rx_fifo>
    1e7e:	88 23       	and	r24, r24
    1e80:	21 f0       	breq	.+8      	; 0x1e8a <USART_decode_rx_fifo+0x5e>
    1e82:	08 95       	ret
    1e84:	9a df       	rcall	.-204    	; 0x1dba <USART_decode_climb_done_rx_fifo>
    1e86:	81 11       	cpse	r24, r1
    1e88:	0a c0       	rjmp	.+20     	; 0x1e9e <USART_decode_rx_fifo+0x72>
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	80 91 13 01 	lds	r24, 0x0113
    1e92:	90 91 14 01 	lds	r25, 0x0114
    1e96:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FifoRead>
    1e9a:	88 23       	and	r24, r24
    1e9c:	41 f2       	breq	.-112    	; 0x1e2e <USART_decode_rx_fifo+0x2>
    1e9e:	08 95       	ret

00001ea0 <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1ea0:	1f 92       	push	r1
    1ea2:	0f 92       	push	r0
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	0f 92       	push	r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	0b b6       	in	r0, 0x3b	; 59
    1eac:	0f 92       	push	r0
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	2f 93       	push	r18
    1eb8:	3f 93       	push	r19
    1eba:	4f 93       	push	r20
    1ebc:	5f 93       	push	r21
    1ebe:	6f 93       	push	r22
    1ec0:	7f 93       	push	r23
    1ec2:	8f 93       	push	r24
    1ec4:	9f 93       	push	r25
    1ec6:	af 93       	push	r26
    1ec8:	bf 93       	push	r27
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1ed2:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1ed6:	2e 37       	cpi	r18, 0x7E	; 126
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <__vector_20+0x3c>
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1edc:	80 91 f3 13 	lds	r24, 0x13F3
    1ee0:	90 91 f4 13 	lds	r25, 0x13F4
    1ee4:	84 30       	cpi	r24, 0x04	; 4
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	40 f4       	brcc	.+16     	; 0x1efa <__vector_20+0x5a>
    1eea:	20 91 55 15 	lds	r18, 0x1555
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	2c 5f       	subi	r18, 0xFC	; 252
    1ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef4:	82 17       	cp	r24, r18
    1ef6:	93 07       	cpc	r25, r19
    1ef8:	59 f5       	brne	.+86     	; 0x1f50 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1efa:	80 91 f1 13 	lds	r24, 0x13F1
    1efe:	90 91 f2 13 	lds	r25, 0x13F2
    1f02:	89 2b       	or	r24, r25
    1f04:	21 f0       	breq	.+8      	; 0x1f0e <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1f06:	10 92 f2 13 	sts	0x13F2, r1
    1f0a:	10 92 f1 13 	sts	0x13F1, r1
    1f0e:	04 e5       	ldi	r16, 0x54	; 84
    1f10:	15 e1       	ldi	r17, 0x15	; 21
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1f12:	c0 e0       	ldi	r28, 0x00	; 0
    1f14:	d0 e0       	ldi	r29, 0x00	; 0
    1f16:	0f 2e       	mov	r0, r31
    1f18:	f5 e5       	ldi	r31, 0x55	; 85
    1f1a:	ef 2e       	mov	r14, r31
    1f1c:	f5 e1       	ldi	r31, 0x15	; 21
    1f1e:	ff 2e       	mov	r15, r31
    1f20:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1f22:	f8 01       	movw	r30, r16
    1f24:	61 91       	ld	r22, Z+
    1f26:	8f 01       	movw	r16, r30
    1f28:	80 91 13 01 	lds	r24, 0x0113
    1f2c:	90 91 14 01 	lds	r25, 0x0114
    1f30:	0e 94 c1 02 	call	0x582	; 0x582 <FifoWrite>
    1f34:	88 23       	and	r24, r24
    1f36:	21 f0       	breq	.+8      	; 0x1f40 <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1f38:	6a ec       	ldi	r22, 0xCA	; 202
    1f3a:	73 e1       	ldi	r23, 0x13	; 19
    1f3c:	80 e4       	ldi	r24, 0x40	; 64
    1f3e:	64 d9       	rcall	.-3384   	; 0x1208 <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1f40:	21 96       	adiw	r28, 0x01	; 1
    1f42:	f7 01       	movw	r30, r14
    1f44:	80 81       	ld	r24, Z
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	02 96       	adiw	r24, 0x02	; 2
    1f4a:	c8 17       	cp	r28, r24
    1f4c:	d9 07       	cpc	r29, r25
    1f4e:	4c f3       	brlt	.-46     	; 0x1f22 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1f50:	10 92 f4 13 	sts	0x13F4, r1
    1f54:	10 92 f3 13 	sts	0x13F3, r1
    1f58:	16 c0       	rjmp	.+44     	; 0x1f86 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1f5a:	2d 37       	cpi	r18, 0x7D	; 125
    1f5c:	39 f4       	brne	.+14     	; 0x1f6c <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	90 93 f2 13 	sts	0x13F2, r25
    1f66:	80 93 f1 13 	sts	0x13F1, r24
    1f6a:	0d c0       	rjmp	.+26     	; 0x1f86 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1f6c:	80 91 f3 13 	lds	r24, 0x13F3
    1f70:	90 91 f4 13 	lds	r25, 0x13F4
    1f74:	fc 01       	movw	r30, r24
    1f76:	ec 5a       	subi	r30, 0xAC	; 172
    1f78:	fa 4e       	sbci	r31, 0xEA	; 234
    1f7a:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	90 93 f4 13 	sts	0x13F4, r25
    1f82:	80 93 f3 13 	sts	0x13F3, r24
	}
	
	
}
    1f86:	ff 91       	pop	r31
    1f88:	ef 91       	pop	r30
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	bf 91       	pop	r27
    1f90:	af 91       	pop	r26
    1f92:	9f 91       	pop	r25
    1f94:	8f 91       	pop	r24
    1f96:	7f 91       	pop	r23
    1f98:	6f 91       	pop	r22
    1f9a:	5f 91       	pop	r21
    1f9c:	4f 91       	pop	r20
    1f9e:	3f 91       	pop	r19
    1fa0:	2f 91       	pop	r18
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	ff 90       	pop	r15
    1fa8:	ef 90       	pop	r14
    1faa:	0f 90       	pop	r0
    1fac:	0b be       	out	0x3b, r0	; 59
    1fae:	0f 90       	pop	r0
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	0f 90       	pop	r0
    1fb4:	1f 90       	pop	r1
    1fb6:	18 95       	reti

00001fb8 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1fb8:	80 93 59 17 	sts	0x1759, r24
	gTxPayload[1] = rotation;
    1fbc:	60 93 5a 17 	sts	0x175A, r22
	gTxPayload[2] = speed;
    1fc0:	40 93 5b 17 	sts	0x175B, r20
	
	
	USART_send_packet('C', 3);
    1fc4:	63 e0       	ldi	r22, 0x03	; 3
    1fc6:	83 e4       	ldi	r24, 0x43	; 67
    1fc8:	7c cc       	rjmp	.-1800   	; 0x18c2 <USART_send_packet>

00001fca <__subsf3>:
    1fca:	50 58       	subi	r21, 0x80	; 128

00001fcc <__addsf3>:
    1fcc:	bb 27       	eor	r27, r27
    1fce:	aa 27       	eor	r26, r26
    1fd0:	0e d0       	rcall	.+28     	; 0x1fee <__addsf3x>
    1fd2:	ed c1       	rjmp	.+986    	; 0x23ae <__fp_round>
    1fd4:	b6 d1       	rcall	.+876    	; 0x2342 <__fp_pscA>
    1fd6:	30 f0       	brcs	.+12     	; 0x1fe4 <__addsf3+0x18>
    1fd8:	bb d1       	rcall	.+886    	; 0x2350 <__fp_pscB>
    1fda:	20 f0       	brcs	.+8      	; 0x1fe4 <__addsf3+0x18>
    1fdc:	31 f4       	brne	.+12     	; 0x1fea <__addsf3+0x1e>
    1fde:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe0:	11 f4       	brne	.+4      	; 0x1fe6 <__addsf3+0x1a>
    1fe2:	1e f4       	brtc	.+6      	; 0x1fea <__addsf3+0x1e>
    1fe4:	86 c1       	rjmp	.+780    	; 0x22f2 <__fp_nan>
    1fe6:	0e f4       	brtc	.+2      	; 0x1fea <__addsf3+0x1e>
    1fe8:	e0 95       	com	r30
    1fea:	e7 fb       	bst	r30, 7
    1fec:	7c c1       	rjmp	.+760    	; 0x22e6 <__fp_inf>

00001fee <__addsf3x>:
    1fee:	e9 2f       	mov	r30, r25
    1ff0:	00 d2       	rcall	.+1024   	; 0x23f2 <__fp_split3>
    1ff2:	80 f3       	brcs	.-32     	; 0x1fd4 <__addsf3+0x8>
    1ff4:	ba 17       	cp	r27, r26
    1ff6:	62 07       	cpc	r22, r18
    1ff8:	73 07       	cpc	r23, r19
    1ffa:	84 07       	cpc	r24, r20
    1ffc:	95 07       	cpc	r25, r21
    1ffe:	18 f0       	brcs	.+6      	; 0x2006 <__addsf3x+0x18>
    2000:	71 f4       	brne	.+28     	; 0x201e <__addsf3x+0x30>
    2002:	9e f5       	brtc	.+102    	; 0x206a <__addsf3x+0x7c>
    2004:	18 c2       	rjmp	.+1072   	; 0x2436 <__fp_zero>
    2006:	0e f4       	brtc	.+2      	; 0x200a <__addsf3x+0x1c>
    2008:	e0 95       	com	r30
    200a:	0b 2e       	mov	r0, r27
    200c:	ba 2f       	mov	r27, r26
    200e:	a0 2d       	mov	r26, r0
    2010:	0b 01       	movw	r0, r22
    2012:	b9 01       	movw	r22, r18
    2014:	90 01       	movw	r18, r0
    2016:	0c 01       	movw	r0, r24
    2018:	ca 01       	movw	r24, r20
    201a:	a0 01       	movw	r20, r0
    201c:	11 24       	eor	r1, r1
    201e:	ff 27       	eor	r31, r31
    2020:	59 1b       	sub	r21, r25
    2022:	99 f0       	breq	.+38     	; 0x204a <__addsf3x+0x5c>
    2024:	59 3f       	cpi	r21, 0xF9	; 249
    2026:	50 f4       	brcc	.+20     	; 0x203c <__addsf3x+0x4e>
    2028:	50 3e       	cpi	r21, 0xE0	; 224
    202a:	68 f1       	brcs	.+90     	; 0x2086 <__addsf3x+0x98>
    202c:	1a 16       	cp	r1, r26
    202e:	f0 40       	sbci	r31, 0x00	; 0
    2030:	a2 2f       	mov	r26, r18
    2032:	23 2f       	mov	r18, r19
    2034:	34 2f       	mov	r19, r20
    2036:	44 27       	eor	r20, r20
    2038:	58 5f       	subi	r21, 0xF8	; 248
    203a:	f3 cf       	rjmp	.-26     	; 0x2022 <__addsf3x+0x34>
    203c:	46 95       	lsr	r20
    203e:	37 95       	ror	r19
    2040:	27 95       	ror	r18
    2042:	a7 95       	ror	r26
    2044:	f0 40       	sbci	r31, 0x00	; 0
    2046:	53 95       	inc	r21
    2048:	c9 f7       	brne	.-14     	; 0x203c <__addsf3x+0x4e>
    204a:	7e f4       	brtc	.+30     	; 0x206a <__addsf3x+0x7c>
    204c:	1f 16       	cp	r1, r31
    204e:	ba 0b       	sbc	r27, r26
    2050:	62 0b       	sbc	r22, r18
    2052:	73 0b       	sbc	r23, r19
    2054:	84 0b       	sbc	r24, r20
    2056:	ba f0       	brmi	.+46     	; 0x2086 <__addsf3x+0x98>
    2058:	91 50       	subi	r25, 0x01	; 1
    205a:	a1 f0       	breq	.+40     	; 0x2084 <__addsf3x+0x96>
    205c:	ff 0f       	add	r31, r31
    205e:	bb 1f       	adc	r27, r27
    2060:	66 1f       	adc	r22, r22
    2062:	77 1f       	adc	r23, r23
    2064:	88 1f       	adc	r24, r24
    2066:	c2 f7       	brpl	.-16     	; 0x2058 <__addsf3x+0x6a>
    2068:	0e c0       	rjmp	.+28     	; 0x2086 <__addsf3x+0x98>
    206a:	ba 0f       	add	r27, r26
    206c:	62 1f       	adc	r22, r18
    206e:	73 1f       	adc	r23, r19
    2070:	84 1f       	adc	r24, r20
    2072:	48 f4       	brcc	.+18     	; 0x2086 <__addsf3x+0x98>
    2074:	87 95       	ror	r24
    2076:	77 95       	ror	r23
    2078:	67 95       	ror	r22
    207a:	b7 95       	ror	r27
    207c:	f7 95       	ror	r31
    207e:	9e 3f       	cpi	r25, 0xFE	; 254
    2080:	08 f0       	brcs	.+2      	; 0x2084 <__addsf3x+0x96>
    2082:	b3 cf       	rjmp	.-154    	; 0x1fea <__addsf3+0x1e>
    2084:	93 95       	inc	r25
    2086:	88 0f       	add	r24, r24
    2088:	08 f0       	brcs	.+2      	; 0x208c <__addsf3x+0x9e>
    208a:	99 27       	eor	r25, r25
    208c:	ee 0f       	add	r30, r30
    208e:	97 95       	ror	r25
    2090:	87 95       	ror	r24
    2092:	08 95       	ret

00002094 <atan>:
    2094:	df 93       	push	r29
    2096:	dd 27       	eor	r29, r29
    2098:	b9 2f       	mov	r27, r25
    209a:	bf 77       	andi	r27, 0x7F	; 127
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	16 16       	cp	r1, r22
    20a2:	17 06       	cpc	r1, r23
    20a4:	48 07       	cpc	r20, r24
    20a6:	5b 07       	cpc	r21, r27
    20a8:	10 f4       	brcc	.+4      	; 0x20ae <atan+0x1a>
    20aa:	d9 2f       	mov	r29, r25
    20ac:	cf d1       	rcall	.+926    	; 0x244c <inverse>
    20ae:	9f 93       	push	r25
    20b0:	8f 93       	push	r24
    20b2:	7f 93       	push	r23
    20b4:	6f 93       	push	r22
    20b6:	34 d2       	rcall	.+1128   	; 0x2520 <square>
    20b8:	ec e8       	ldi	r30, 0x8C	; 140
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	1d d1       	rcall	.+570    	; 0x22f8 <__fp_powser>
    20be:	77 d1       	rcall	.+750    	; 0x23ae <__fp_round>
    20c0:	2f 91       	pop	r18
    20c2:	3f 91       	pop	r19
    20c4:	4f 91       	pop	r20
    20c6:	5f 91       	pop	r21
    20c8:	d4 d1       	rcall	.+936    	; 0x2472 <__mulsf3x>
    20ca:	dd 23       	and	r29, r29
    20cc:	49 f0       	breq	.+18     	; 0x20e0 <atan+0x4c>
    20ce:	90 58       	subi	r25, 0x80	; 128
    20d0:	a2 ea       	ldi	r26, 0xA2	; 162
    20d2:	2a ed       	ldi	r18, 0xDA	; 218
    20d4:	3f e0       	ldi	r19, 0x0F	; 15
    20d6:	49 ec       	ldi	r20, 0xC9	; 201
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	d0 78       	andi	r29, 0x80	; 128
    20dc:	5d 27       	eor	r21, r29
    20de:	87 df       	rcall	.-242    	; 0x1fee <__addsf3x>
    20e0:	df 91       	pop	r29
    20e2:	65 c1       	rjmp	.+714    	; 0x23ae <__fp_round>

000020e4 <__cmpsf2>:
    20e4:	dc d0       	rcall	.+440    	; 0x229e <__fp_cmp>
    20e6:	08 f4       	brcc	.+2      	; 0x20ea <__cmpsf2+0x6>
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	08 95       	ret

000020ec <cos>:
    20ec:	39 d1       	rcall	.+626    	; 0x2360 <__fp_rempio2>
    20ee:	e3 95       	inc	r30
    20f0:	6f c1       	rjmp	.+734    	; 0x23d0 <__fp_sinus>

000020f2 <__divsf3>:
    20f2:	0c d0       	rcall	.+24     	; 0x210c <__divsf3x>
    20f4:	5c c1       	rjmp	.+696    	; 0x23ae <__fp_round>
    20f6:	2c d1       	rcall	.+600    	; 0x2350 <__fp_pscB>
    20f8:	40 f0       	brcs	.+16     	; 0x210a <__divsf3+0x18>
    20fa:	23 d1       	rcall	.+582    	; 0x2342 <__fp_pscA>
    20fc:	30 f0       	brcs	.+12     	; 0x210a <__divsf3+0x18>
    20fe:	21 f4       	brne	.+8      	; 0x2108 <__divsf3+0x16>
    2100:	5f 3f       	cpi	r21, 0xFF	; 255
    2102:	19 f0       	breq	.+6      	; 0x210a <__divsf3+0x18>
    2104:	f0 c0       	rjmp	.+480    	; 0x22e6 <__fp_inf>
    2106:	51 11       	cpse	r21, r1
    2108:	97 c1       	rjmp	.+814    	; 0x2438 <__fp_szero>
    210a:	f3 c0       	rjmp	.+486    	; 0x22f2 <__fp_nan>

0000210c <__divsf3x>:
    210c:	72 d1       	rcall	.+740    	; 0x23f2 <__fp_split3>
    210e:	98 f3       	brcs	.-26     	; 0x20f6 <__divsf3+0x4>

00002110 <__divsf3_pse>:
    2110:	99 23       	and	r25, r25
    2112:	c9 f3       	breq	.-14     	; 0x2106 <__divsf3+0x14>
    2114:	55 23       	and	r21, r21
    2116:	b1 f3       	breq	.-20     	; 0x2104 <__divsf3+0x12>
    2118:	95 1b       	sub	r25, r21
    211a:	55 0b       	sbc	r21, r21
    211c:	bb 27       	eor	r27, r27
    211e:	aa 27       	eor	r26, r26
    2120:	62 17       	cp	r22, r18
    2122:	73 07       	cpc	r23, r19
    2124:	84 07       	cpc	r24, r20
    2126:	38 f0       	brcs	.+14     	; 0x2136 <__divsf3_pse+0x26>
    2128:	9f 5f       	subi	r25, 0xFF	; 255
    212a:	5f 4f       	sbci	r21, 0xFF	; 255
    212c:	22 0f       	add	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	44 1f       	adc	r20, r20
    2132:	aa 1f       	adc	r26, r26
    2134:	a9 f3       	breq	.-22     	; 0x2120 <__divsf3_pse+0x10>
    2136:	33 d0       	rcall	.+102    	; 0x219e <__divsf3_pse+0x8e>
    2138:	0e 2e       	mov	r0, r30
    213a:	3a f0       	brmi	.+14     	; 0x214a <__divsf3_pse+0x3a>
    213c:	e0 e8       	ldi	r30, 0x80	; 128
    213e:	30 d0       	rcall	.+96     	; 0x21a0 <__divsf3_pse+0x90>
    2140:	91 50       	subi	r25, 0x01	; 1
    2142:	50 40       	sbci	r21, 0x00	; 0
    2144:	e6 95       	lsr	r30
    2146:	00 1c       	adc	r0, r0
    2148:	ca f7       	brpl	.-14     	; 0x213c <__divsf3_pse+0x2c>
    214a:	29 d0       	rcall	.+82     	; 0x219e <__divsf3_pse+0x8e>
    214c:	fe 2f       	mov	r31, r30
    214e:	27 d0       	rcall	.+78     	; 0x219e <__divsf3_pse+0x8e>
    2150:	66 0f       	add	r22, r22
    2152:	77 1f       	adc	r23, r23
    2154:	88 1f       	adc	r24, r24
    2156:	bb 1f       	adc	r27, r27
    2158:	26 17       	cp	r18, r22
    215a:	37 07       	cpc	r19, r23
    215c:	48 07       	cpc	r20, r24
    215e:	ab 07       	cpc	r26, r27
    2160:	b0 e8       	ldi	r27, 0x80	; 128
    2162:	09 f0       	breq	.+2      	; 0x2166 <__divsf3_pse+0x56>
    2164:	bb 0b       	sbc	r27, r27
    2166:	80 2d       	mov	r24, r0
    2168:	bf 01       	movw	r22, r30
    216a:	ff 27       	eor	r31, r31
    216c:	93 58       	subi	r25, 0x83	; 131
    216e:	5f 4f       	sbci	r21, 0xFF	; 255
    2170:	2a f0       	brmi	.+10     	; 0x217c <__divsf3_pse+0x6c>
    2172:	9e 3f       	cpi	r25, 0xFE	; 254
    2174:	51 05       	cpc	r21, r1
    2176:	68 f0       	brcs	.+26     	; 0x2192 <__divsf3_pse+0x82>
    2178:	b6 c0       	rjmp	.+364    	; 0x22e6 <__fp_inf>
    217a:	5e c1       	rjmp	.+700    	; 0x2438 <__fp_szero>
    217c:	5f 3f       	cpi	r21, 0xFF	; 255
    217e:	ec f3       	brlt	.-6      	; 0x217a <__divsf3_pse+0x6a>
    2180:	98 3e       	cpi	r25, 0xE8	; 232
    2182:	dc f3       	brlt	.-10     	; 0x217a <__divsf3_pse+0x6a>
    2184:	86 95       	lsr	r24
    2186:	77 95       	ror	r23
    2188:	67 95       	ror	r22
    218a:	b7 95       	ror	r27
    218c:	f7 95       	ror	r31
    218e:	9f 5f       	subi	r25, 0xFF	; 255
    2190:	c9 f7       	brne	.-14     	; 0x2184 <__divsf3_pse+0x74>
    2192:	88 0f       	add	r24, r24
    2194:	91 1d       	adc	r25, r1
    2196:	96 95       	lsr	r25
    2198:	87 95       	ror	r24
    219a:	97 f9       	bld	r25, 7
    219c:	08 95       	ret
    219e:	e1 e0       	ldi	r30, 0x01	; 1
    21a0:	66 0f       	add	r22, r22
    21a2:	77 1f       	adc	r23, r23
    21a4:	88 1f       	adc	r24, r24
    21a6:	bb 1f       	adc	r27, r27
    21a8:	62 17       	cp	r22, r18
    21aa:	73 07       	cpc	r23, r19
    21ac:	84 07       	cpc	r24, r20
    21ae:	ba 07       	cpc	r27, r26
    21b0:	20 f0       	brcs	.+8      	; 0x21ba <__divsf3_pse+0xaa>
    21b2:	62 1b       	sub	r22, r18
    21b4:	73 0b       	sbc	r23, r19
    21b6:	84 0b       	sbc	r24, r20
    21b8:	ba 0b       	sbc	r27, r26
    21ba:	ee 1f       	adc	r30, r30
    21bc:	88 f7       	brcc	.-30     	; 0x21a0 <__divsf3_pse+0x90>
    21be:	e0 95       	com	r30
    21c0:	08 95       	ret

000021c2 <__fixsfsi>:
    21c2:	04 d0       	rcall	.+8      	; 0x21cc <__fixunssfsi>
    21c4:	68 94       	set
    21c6:	b1 11       	cpse	r27, r1
    21c8:	37 c1       	rjmp	.+622    	; 0x2438 <__fp_szero>
    21ca:	08 95       	ret

000021cc <__fixunssfsi>:
    21cc:	1a d1       	rcall	.+564    	; 0x2402 <__fp_splitA>
    21ce:	88 f0       	brcs	.+34     	; 0x21f2 <__fixunssfsi+0x26>
    21d0:	9f 57       	subi	r25, 0x7F	; 127
    21d2:	90 f0       	brcs	.+36     	; 0x21f8 <__fixunssfsi+0x2c>
    21d4:	b9 2f       	mov	r27, r25
    21d6:	99 27       	eor	r25, r25
    21d8:	b7 51       	subi	r27, 0x17	; 23
    21da:	a0 f0       	brcs	.+40     	; 0x2204 <__fixunssfsi+0x38>
    21dc:	d1 f0       	breq	.+52     	; 0x2212 <__fixunssfsi+0x46>
    21de:	66 0f       	add	r22, r22
    21e0:	77 1f       	adc	r23, r23
    21e2:	88 1f       	adc	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	1a f0       	brmi	.+6      	; 0x21ee <__fixunssfsi+0x22>
    21e8:	ba 95       	dec	r27
    21ea:	c9 f7       	brne	.-14     	; 0x21de <__fixunssfsi+0x12>
    21ec:	12 c0       	rjmp	.+36     	; 0x2212 <__fixunssfsi+0x46>
    21ee:	b1 30       	cpi	r27, 0x01	; 1
    21f0:	81 f0       	breq	.+32     	; 0x2212 <__fixunssfsi+0x46>
    21f2:	21 d1       	rcall	.+578    	; 0x2436 <__fp_zero>
    21f4:	b1 e0       	ldi	r27, 0x01	; 1
    21f6:	08 95       	ret
    21f8:	1e c1       	rjmp	.+572    	; 0x2436 <__fp_zero>
    21fa:	67 2f       	mov	r22, r23
    21fc:	78 2f       	mov	r23, r24
    21fe:	88 27       	eor	r24, r24
    2200:	b8 5f       	subi	r27, 0xF8	; 248
    2202:	39 f0       	breq	.+14     	; 0x2212 <__fixunssfsi+0x46>
    2204:	b9 3f       	cpi	r27, 0xF9	; 249
    2206:	cc f3       	brlt	.-14     	; 0x21fa <__fixunssfsi+0x2e>
    2208:	86 95       	lsr	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	b3 95       	inc	r27
    2210:	d9 f7       	brne	.-10     	; 0x2208 <__fixunssfsi+0x3c>
    2212:	3e f4       	brtc	.+14     	; 0x2222 <__fixunssfsi+0x56>
    2214:	90 95       	com	r25
    2216:	80 95       	com	r24
    2218:	70 95       	com	r23
    221a:	61 95       	neg	r22
    221c:	7f 4f       	sbci	r23, 0xFF	; 255
    221e:	8f 4f       	sbci	r24, 0xFF	; 255
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	08 95       	ret

00002224 <__floatunsisf>:
    2224:	e8 94       	clt
    2226:	09 c0       	rjmp	.+18     	; 0x223a <__floatsisf+0x12>

00002228 <__floatsisf>:
    2228:	97 fb       	bst	r25, 7
    222a:	3e f4       	brtc	.+14     	; 0x223a <__floatsisf+0x12>
    222c:	90 95       	com	r25
    222e:	80 95       	com	r24
    2230:	70 95       	com	r23
    2232:	61 95       	neg	r22
    2234:	7f 4f       	sbci	r23, 0xFF	; 255
    2236:	8f 4f       	sbci	r24, 0xFF	; 255
    2238:	9f 4f       	sbci	r25, 0xFF	; 255
    223a:	99 23       	and	r25, r25
    223c:	a9 f0       	breq	.+42     	; 0x2268 <__floatsisf+0x40>
    223e:	f9 2f       	mov	r31, r25
    2240:	96 e9       	ldi	r25, 0x96	; 150
    2242:	bb 27       	eor	r27, r27
    2244:	93 95       	inc	r25
    2246:	f6 95       	lsr	r31
    2248:	87 95       	ror	r24
    224a:	77 95       	ror	r23
    224c:	67 95       	ror	r22
    224e:	b7 95       	ror	r27
    2250:	f1 11       	cpse	r31, r1
    2252:	f8 cf       	rjmp	.-16     	; 0x2244 <__floatsisf+0x1c>
    2254:	fa f4       	brpl	.+62     	; 0x2294 <__floatsisf+0x6c>
    2256:	bb 0f       	add	r27, r27
    2258:	11 f4       	brne	.+4      	; 0x225e <__floatsisf+0x36>
    225a:	60 ff       	sbrs	r22, 0
    225c:	1b c0       	rjmp	.+54     	; 0x2294 <__floatsisf+0x6c>
    225e:	6f 5f       	subi	r22, 0xFF	; 255
    2260:	7f 4f       	sbci	r23, 0xFF	; 255
    2262:	8f 4f       	sbci	r24, 0xFF	; 255
    2264:	9f 4f       	sbci	r25, 0xFF	; 255
    2266:	16 c0       	rjmp	.+44     	; 0x2294 <__floatsisf+0x6c>
    2268:	88 23       	and	r24, r24
    226a:	11 f0       	breq	.+4      	; 0x2270 <__floatsisf+0x48>
    226c:	96 e9       	ldi	r25, 0x96	; 150
    226e:	11 c0       	rjmp	.+34     	; 0x2292 <__floatsisf+0x6a>
    2270:	77 23       	and	r23, r23
    2272:	21 f0       	breq	.+8      	; 0x227c <__floatsisf+0x54>
    2274:	9e e8       	ldi	r25, 0x8E	; 142
    2276:	87 2f       	mov	r24, r23
    2278:	76 2f       	mov	r23, r22
    227a:	05 c0       	rjmp	.+10     	; 0x2286 <__floatsisf+0x5e>
    227c:	66 23       	and	r22, r22
    227e:	71 f0       	breq	.+28     	; 0x229c <__floatsisf+0x74>
    2280:	96 e8       	ldi	r25, 0x86	; 134
    2282:	86 2f       	mov	r24, r22
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	2a f0       	brmi	.+10     	; 0x2294 <__floatsisf+0x6c>
    228a:	9a 95       	dec	r25
    228c:	66 0f       	add	r22, r22
    228e:	77 1f       	adc	r23, r23
    2290:	88 1f       	adc	r24, r24
    2292:	da f7       	brpl	.-10     	; 0x228a <__floatsisf+0x62>
    2294:	88 0f       	add	r24, r24
    2296:	96 95       	lsr	r25
    2298:	87 95       	ror	r24
    229a:	97 f9       	bld	r25, 7
    229c:	08 95       	ret

0000229e <__fp_cmp>:
    229e:	99 0f       	add	r25, r25
    22a0:	00 08       	sbc	r0, r0
    22a2:	55 0f       	add	r21, r21
    22a4:	aa 0b       	sbc	r26, r26
    22a6:	e0 e8       	ldi	r30, 0x80	; 128
    22a8:	fe ef       	ldi	r31, 0xFE	; 254
    22aa:	16 16       	cp	r1, r22
    22ac:	17 06       	cpc	r1, r23
    22ae:	e8 07       	cpc	r30, r24
    22b0:	f9 07       	cpc	r31, r25
    22b2:	c0 f0       	brcs	.+48     	; 0x22e4 <__fp_cmp+0x46>
    22b4:	12 16       	cp	r1, r18
    22b6:	13 06       	cpc	r1, r19
    22b8:	e4 07       	cpc	r30, r20
    22ba:	f5 07       	cpc	r31, r21
    22bc:	98 f0       	brcs	.+38     	; 0x22e4 <__fp_cmp+0x46>
    22be:	62 1b       	sub	r22, r18
    22c0:	73 0b       	sbc	r23, r19
    22c2:	84 0b       	sbc	r24, r20
    22c4:	95 0b       	sbc	r25, r21
    22c6:	39 f4       	brne	.+14     	; 0x22d6 <__fp_cmp+0x38>
    22c8:	0a 26       	eor	r0, r26
    22ca:	61 f0       	breq	.+24     	; 0x22e4 <__fp_cmp+0x46>
    22cc:	23 2b       	or	r18, r19
    22ce:	24 2b       	or	r18, r20
    22d0:	25 2b       	or	r18, r21
    22d2:	21 f4       	brne	.+8      	; 0x22dc <__fp_cmp+0x3e>
    22d4:	08 95       	ret
    22d6:	0a 26       	eor	r0, r26
    22d8:	09 f4       	brne	.+2      	; 0x22dc <__fp_cmp+0x3e>
    22da:	a1 40       	sbci	r26, 0x01	; 1
    22dc:	a6 95       	lsr	r26
    22de:	8f ef       	ldi	r24, 0xFF	; 255
    22e0:	81 1d       	adc	r24, r1
    22e2:	81 1d       	adc	r24, r1
    22e4:	08 95       	ret

000022e6 <__fp_inf>:
    22e6:	97 f9       	bld	r25, 7
    22e8:	9f 67       	ori	r25, 0x7F	; 127
    22ea:	80 e8       	ldi	r24, 0x80	; 128
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	08 95       	ret

000022f2 <__fp_nan>:
    22f2:	9f ef       	ldi	r25, 0xFF	; 255
    22f4:	80 ec       	ldi	r24, 0xC0	; 192
    22f6:	08 95       	ret

000022f8 <__fp_powser>:
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	1f 93       	push	r17
    22fe:	0f 93       	push	r16
    2300:	ff 92       	push	r15
    2302:	ef 92       	push	r14
    2304:	df 92       	push	r13
    2306:	7b 01       	movw	r14, r22
    2308:	8c 01       	movw	r16, r24
    230a:	68 94       	set
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <__fp_powser+0x20>
    230e:	da 2e       	mov	r13, r26
    2310:	ef 01       	movw	r28, r30
    2312:	af d0       	rcall	.+350    	; 0x2472 <__mulsf3x>
    2314:	fe 01       	movw	r30, r28
    2316:	e8 94       	clt
    2318:	a5 91       	lpm	r26, Z+
    231a:	25 91       	lpm	r18, Z+
    231c:	35 91       	lpm	r19, Z+
    231e:	45 91       	lpm	r20, Z+
    2320:	55 91       	lpm	r21, Z+
    2322:	ae f3       	brts	.-22     	; 0x230e <__fp_powser+0x16>
    2324:	ef 01       	movw	r28, r30
    2326:	63 de       	rcall	.-826    	; 0x1fee <__addsf3x>
    2328:	fe 01       	movw	r30, r28
    232a:	97 01       	movw	r18, r14
    232c:	a8 01       	movw	r20, r16
    232e:	da 94       	dec	r13
    2330:	79 f7       	brne	.-34     	; 0x2310 <__fp_powser+0x18>
    2332:	df 90       	pop	r13
    2334:	ef 90       	pop	r14
    2336:	ff 90       	pop	r15
    2338:	0f 91       	pop	r16
    233a:	1f 91       	pop	r17
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <__fp_pscA>:
    2342:	00 24       	eor	r0, r0
    2344:	0a 94       	dec	r0
    2346:	16 16       	cp	r1, r22
    2348:	17 06       	cpc	r1, r23
    234a:	18 06       	cpc	r1, r24
    234c:	09 06       	cpc	r0, r25
    234e:	08 95       	ret

00002350 <__fp_pscB>:
    2350:	00 24       	eor	r0, r0
    2352:	0a 94       	dec	r0
    2354:	12 16       	cp	r1, r18
    2356:	13 06       	cpc	r1, r19
    2358:	14 06       	cpc	r1, r20
    235a:	05 06       	cpc	r0, r21
    235c:	08 95       	ret
    235e:	c9 cf       	rjmp	.-110    	; 0x22f2 <__fp_nan>

00002360 <__fp_rempio2>:
    2360:	50 d0       	rcall	.+160    	; 0x2402 <__fp_splitA>
    2362:	e8 f3       	brcs	.-6      	; 0x235e <__fp_pscB+0xe>
    2364:	e8 94       	clt
    2366:	e0 e0       	ldi	r30, 0x00	; 0
    2368:	bb 27       	eor	r27, r27
    236a:	9f 57       	subi	r25, 0x7F	; 127
    236c:	f0 f0       	brcs	.+60     	; 0x23aa <__fp_rempio2+0x4a>
    236e:	2a ed       	ldi	r18, 0xDA	; 218
    2370:	3f e0       	ldi	r19, 0x0F	; 15
    2372:	49 ec       	ldi	r20, 0xC9	; 201
    2374:	06 c0       	rjmp	.+12     	; 0x2382 <__fp_rempio2+0x22>
    2376:	ee 0f       	add	r30, r30
    2378:	bb 0f       	add	r27, r27
    237a:	66 1f       	adc	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	28 f0       	brcs	.+10     	; 0x238c <__fp_rempio2+0x2c>
    2382:	b2 3a       	cpi	r27, 0xA2	; 162
    2384:	62 07       	cpc	r22, r18
    2386:	73 07       	cpc	r23, r19
    2388:	84 07       	cpc	r24, r20
    238a:	28 f0       	brcs	.+10     	; 0x2396 <__fp_rempio2+0x36>
    238c:	b2 5a       	subi	r27, 0xA2	; 162
    238e:	62 0b       	sbc	r22, r18
    2390:	73 0b       	sbc	r23, r19
    2392:	84 0b       	sbc	r24, r20
    2394:	e3 95       	inc	r30
    2396:	9a 95       	dec	r25
    2398:	72 f7       	brpl	.-36     	; 0x2376 <__fp_rempio2+0x16>
    239a:	80 38       	cpi	r24, 0x80	; 128
    239c:	30 f4       	brcc	.+12     	; 0x23aa <__fp_rempio2+0x4a>
    239e:	9a 95       	dec	r25
    23a0:	bb 0f       	add	r27, r27
    23a2:	66 1f       	adc	r22, r22
    23a4:	77 1f       	adc	r23, r23
    23a6:	88 1f       	adc	r24, r24
    23a8:	d2 f7       	brpl	.-12     	; 0x239e <__fp_rempio2+0x3e>
    23aa:	90 48       	sbci	r25, 0x80	; 128
    23ac:	be c0       	rjmp	.+380    	; 0x252a <__fp_mpack_finite>

000023ae <__fp_round>:
    23ae:	09 2e       	mov	r0, r25
    23b0:	03 94       	inc	r0
    23b2:	00 0c       	add	r0, r0
    23b4:	11 f4       	brne	.+4      	; 0x23ba <__fp_round+0xc>
    23b6:	88 23       	and	r24, r24
    23b8:	52 f0       	brmi	.+20     	; 0x23ce <__fp_round+0x20>
    23ba:	bb 0f       	add	r27, r27
    23bc:	40 f4       	brcc	.+16     	; 0x23ce <__fp_round+0x20>
    23be:	bf 2b       	or	r27, r31
    23c0:	11 f4       	brne	.+4      	; 0x23c6 <__fp_round+0x18>
    23c2:	60 ff       	sbrs	r22, 0
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <__fp_round+0x20>
    23c6:	6f 5f       	subi	r22, 0xFF	; 255
    23c8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ca:	8f 4f       	sbci	r24, 0xFF	; 255
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	08 95       	ret

000023d0 <__fp_sinus>:
    23d0:	ef 93       	push	r30
    23d2:	e0 ff       	sbrs	r30, 0
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <__fp_sinus+0x12>
    23d6:	a2 ea       	ldi	r26, 0xA2	; 162
    23d8:	2a ed       	ldi	r18, 0xDA	; 218
    23da:	3f e0       	ldi	r19, 0x0F	; 15
    23dc:	49 ec       	ldi	r20, 0xC9	; 201
    23de:	5f eb       	ldi	r21, 0xBF	; 191
    23e0:	06 de       	rcall	.-1012   	; 0x1fee <__addsf3x>
    23e2:	e5 df       	rcall	.-54     	; 0x23ae <__fp_round>
    23e4:	0f 90       	pop	r0
    23e6:	03 94       	inc	r0
    23e8:	01 fc       	sbrc	r0, 1
    23ea:	90 58       	subi	r25, 0x80	; 128
    23ec:	e9 eb       	ldi	r30, 0xB9	; 185
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	a8 c0       	rjmp	.+336    	; 0x2542 <__fp_powsodd>

000023f2 <__fp_split3>:
    23f2:	57 fd       	sbrc	r21, 7
    23f4:	90 58       	subi	r25, 0x80	; 128
    23f6:	44 0f       	add	r20, r20
    23f8:	55 1f       	adc	r21, r21
    23fa:	59 f0       	breq	.+22     	; 0x2412 <__fp_splitA+0x10>
    23fc:	5f 3f       	cpi	r21, 0xFF	; 255
    23fe:	71 f0       	breq	.+28     	; 0x241c <__fp_splitA+0x1a>
    2400:	47 95       	ror	r20

00002402 <__fp_splitA>:
    2402:	88 0f       	add	r24, r24
    2404:	97 fb       	bst	r25, 7
    2406:	99 1f       	adc	r25, r25
    2408:	61 f0       	breq	.+24     	; 0x2422 <__fp_splitA+0x20>
    240a:	9f 3f       	cpi	r25, 0xFF	; 255
    240c:	79 f0       	breq	.+30     	; 0x242c <__fp_splitA+0x2a>
    240e:	87 95       	ror	r24
    2410:	08 95       	ret
    2412:	12 16       	cp	r1, r18
    2414:	13 06       	cpc	r1, r19
    2416:	14 06       	cpc	r1, r20
    2418:	55 1f       	adc	r21, r21
    241a:	f2 cf       	rjmp	.-28     	; 0x2400 <__fp_split3+0xe>
    241c:	46 95       	lsr	r20
    241e:	f1 df       	rcall	.-30     	; 0x2402 <__fp_splitA>
    2420:	08 c0       	rjmp	.+16     	; 0x2432 <__fp_splitA+0x30>
    2422:	16 16       	cp	r1, r22
    2424:	17 06       	cpc	r1, r23
    2426:	18 06       	cpc	r1, r24
    2428:	99 1f       	adc	r25, r25
    242a:	f1 cf       	rjmp	.-30     	; 0x240e <__fp_splitA+0xc>
    242c:	86 95       	lsr	r24
    242e:	71 05       	cpc	r23, r1
    2430:	61 05       	cpc	r22, r1
    2432:	08 94       	sec
    2434:	08 95       	ret

00002436 <__fp_zero>:
    2436:	e8 94       	clt

00002438 <__fp_szero>:
    2438:	bb 27       	eor	r27, r27
    243a:	66 27       	eor	r22, r22
    243c:	77 27       	eor	r23, r23
    243e:	cb 01       	movw	r24, r22
    2440:	97 f9       	bld	r25, 7
    2442:	08 95       	ret

00002444 <__gesf2>:
    2444:	2c df       	rcall	.-424    	; 0x229e <__fp_cmp>
    2446:	08 f4       	brcc	.+2      	; 0x244a <__gesf2+0x6>
    2448:	8f ef       	ldi	r24, 0xFF	; 255
    244a:	08 95       	ret

0000244c <inverse>:
    244c:	9b 01       	movw	r18, r22
    244e:	ac 01       	movw	r20, r24
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	70 e0       	ldi	r23, 0x00	; 0
    2454:	80 e8       	ldi	r24, 0x80	; 128
    2456:	9f e3       	ldi	r25, 0x3F	; 63
    2458:	4c ce       	rjmp	.-872    	; 0x20f2 <__divsf3>

0000245a <__mulsf3>:
    245a:	0b d0       	rcall	.+22     	; 0x2472 <__mulsf3x>
    245c:	a8 cf       	rjmp	.-176    	; 0x23ae <__fp_round>
    245e:	71 df       	rcall	.-286    	; 0x2342 <__fp_pscA>
    2460:	28 f0       	brcs	.+10     	; 0x246c <__mulsf3+0x12>
    2462:	76 df       	rcall	.-276    	; 0x2350 <__fp_pscB>
    2464:	18 f0       	brcs	.+6      	; 0x246c <__mulsf3+0x12>
    2466:	95 23       	and	r25, r21
    2468:	09 f0       	breq	.+2      	; 0x246c <__mulsf3+0x12>
    246a:	3d cf       	rjmp	.-390    	; 0x22e6 <__fp_inf>
    246c:	42 cf       	rjmp	.-380    	; 0x22f2 <__fp_nan>
    246e:	11 24       	eor	r1, r1
    2470:	e3 cf       	rjmp	.-58     	; 0x2438 <__fp_szero>

00002472 <__mulsf3x>:
    2472:	bf df       	rcall	.-130    	; 0x23f2 <__fp_split3>
    2474:	a0 f3       	brcs	.-24     	; 0x245e <__mulsf3+0x4>

00002476 <__mulsf3_pse>:
    2476:	95 9f       	mul	r25, r21
    2478:	d1 f3       	breq	.-12     	; 0x246e <__mulsf3+0x14>
    247a:	95 0f       	add	r25, r21
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	55 1f       	adc	r21, r21
    2480:	62 9f       	mul	r22, r18
    2482:	f0 01       	movw	r30, r0
    2484:	72 9f       	mul	r23, r18
    2486:	bb 27       	eor	r27, r27
    2488:	f0 0d       	add	r31, r0
    248a:	b1 1d       	adc	r27, r1
    248c:	63 9f       	mul	r22, r19
    248e:	aa 27       	eor	r26, r26
    2490:	f0 0d       	add	r31, r0
    2492:	b1 1d       	adc	r27, r1
    2494:	aa 1f       	adc	r26, r26
    2496:	64 9f       	mul	r22, r20
    2498:	66 27       	eor	r22, r22
    249a:	b0 0d       	add	r27, r0
    249c:	a1 1d       	adc	r26, r1
    249e:	66 1f       	adc	r22, r22
    24a0:	82 9f       	mul	r24, r18
    24a2:	22 27       	eor	r18, r18
    24a4:	b0 0d       	add	r27, r0
    24a6:	a1 1d       	adc	r26, r1
    24a8:	62 1f       	adc	r22, r18
    24aa:	73 9f       	mul	r23, r19
    24ac:	b0 0d       	add	r27, r0
    24ae:	a1 1d       	adc	r26, r1
    24b0:	62 1f       	adc	r22, r18
    24b2:	83 9f       	mul	r24, r19
    24b4:	a0 0d       	add	r26, r0
    24b6:	61 1d       	adc	r22, r1
    24b8:	22 1f       	adc	r18, r18
    24ba:	74 9f       	mul	r23, r20
    24bc:	33 27       	eor	r19, r19
    24be:	a0 0d       	add	r26, r0
    24c0:	61 1d       	adc	r22, r1
    24c2:	23 1f       	adc	r18, r19
    24c4:	84 9f       	mul	r24, r20
    24c6:	60 0d       	add	r22, r0
    24c8:	21 1d       	adc	r18, r1
    24ca:	82 2f       	mov	r24, r18
    24cc:	76 2f       	mov	r23, r22
    24ce:	6a 2f       	mov	r22, r26
    24d0:	11 24       	eor	r1, r1
    24d2:	9f 57       	subi	r25, 0x7F	; 127
    24d4:	50 40       	sbci	r21, 0x00	; 0
    24d6:	8a f0       	brmi	.+34     	; 0x24fa <__mulsf3_pse+0x84>
    24d8:	e1 f0       	breq	.+56     	; 0x2512 <__mulsf3_pse+0x9c>
    24da:	88 23       	and	r24, r24
    24dc:	4a f0       	brmi	.+18     	; 0x24f0 <__mulsf3_pse+0x7a>
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	bb 1f       	adc	r27, r27
    24e4:	66 1f       	adc	r22, r22
    24e6:	77 1f       	adc	r23, r23
    24e8:	88 1f       	adc	r24, r24
    24ea:	91 50       	subi	r25, 0x01	; 1
    24ec:	50 40       	sbci	r21, 0x00	; 0
    24ee:	a9 f7       	brne	.-22     	; 0x24da <__mulsf3_pse+0x64>
    24f0:	9e 3f       	cpi	r25, 0xFE	; 254
    24f2:	51 05       	cpc	r21, r1
    24f4:	70 f0       	brcs	.+28     	; 0x2512 <__mulsf3_pse+0x9c>
    24f6:	f7 ce       	rjmp	.-530    	; 0x22e6 <__fp_inf>
    24f8:	9f cf       	rjmp	.-194    	; 0x2438 <__fp_szero>
    24fa:	5f 3f       	cpi	r21, 0xFF	; 255
    24fc:	ec f3       	brlt	.-6      	; 0x24f8 <__mulsf3_pse+0x82>
    24fe:	98 3e       	cpi	r25, 0xE8	; 232
    2500:	dc f3       	brlt	.-10     	; 0x24f8 <__mulsf3_pse+0x82>
    2502:	86 95       	lsr	r24
    2504:	77 95       	ror	r23
    2506:	67 95       	ror	r22
    2508:	b7 95       	ror	r27
    250a:	f7 95       	ror	r31
    250c:	e7 95       	ror	r30
    250e:	9f 5f       	subi	r25, 0xFF	; 255
    2510:	c1 f7       	brne	.-16     	; 0x2502 <__mulsf3_pse+0x8c>
    2512:	fe 2b       	or	r31, r30
    2514:	88 0f       	add	r24, r24
    2516:	91 1d       	adc	r25, r1
    2518:	96 95       	lsr	r25
    251a:	87 95       	ror	r24
    251c:	97 f9       	bld	r25, 7
    251e:	08 95       	ret

00002520 <square>:
    2520:	9b 01       	movw	r18, r22
    2522:	ac 01       	movw	r20, r24
    2524:	9a cf       	rjmp	.-204    	; 0x245a <__mulsf3>

00002526 <__fp_mpack>:
    2526:	9f 3f       	cpi	r25, 0xFF	; 255
    2528:	31 f0       	breq	.+12     	; 0x2536 <__fp_mpack_finite+0xc>

0000252a <__fp_mpack_finite>:
    252a:	91 50       	subi	r25, 0x01	; 1
    252c:	20 f4       	brcc	.+8      	; 0x2536 <__fp_mpack_finite+0xc>
    252e:	87 95       	ror	r24
    2530:	77 95       	ror	r23
    2532:	67 95       	ror	r22
    2534:	b7 95       	ror	r27
    2536:	88 0f       	add	r24, r24
    2538:	91 1d       	adc	r25, r1
    253a:	96 95       	lsr	r25
    253c:	87 95       	ror	r24
    253e:	97 f9       	bld	r25, 7
    2540:	08 95       	ret

00002542 <__fp_powsodd>:
    2542:	9f 93       	push	r25
    2544:	8f 93       	push	r24
    2546:	7f 93       	push	r23
    2548:	6f 93       	push	r22
    254a:	ff 93       	push	r31
    254c:	ef 93       	push	r30
    254e:	9b 01       	movw	r18, r22
    2550:	ac 01       	movw	r20, r24
    2552:	83 df       	rcall	.-250    	; 0x245a <__mulsf3>
    2554:	ef 91       	pop	r30
    2556:	ff 91       	pop	r31
    2558:	cf de       	rcall	.-610    	; 0x22f8 <__fp_powser>
    255a:	2f 91       	pop	r18
    255c:	3f 91       	pop	r19
    255e:	4f 91       	pop	r20
    2560:	5f 91       	pop	r21
    2562:	7b cf       	rjmp	.-266    	; 0x245a <__mulsf3>

00002564 <_exit>:
    2564:	f8 94       	cli

00002566 <__stop_program>:
    2566:	ff cf       	rjmp	.-2      	; 0x2566 <__stop_program>
