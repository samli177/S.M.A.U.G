
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000012bc  00800100  000023ea  0000247e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000684  008013bc  008013bc  0000373a  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  0000373c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  000065a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000072ec  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000438  00000000  00000000  0000731b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ebd  00000000  00000000  00007753  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fc5  00000000  00000000  0000b610  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000026f7  00000000  00000000  0000c5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ccc  00000000  00000000  0000eccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000dd7  00000000  00000000  0000f998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002664  00000000  00000000  0001076f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000490  00000000  00000000  00012dd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	ff c5       	rjmp	.+3070   	; 0xc04 <__vector_1>
       6:	00 00       	nop
       8:	27 c6       	rjmp	.+3150   	; 0xc58 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	eb c6       	rjmp	.+3542   	; 0xde8 <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	8c c6       	rjmp	.+3352   	; 0xd4e <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	74 c6       	rjmp	.+3304   	; 0xd6a <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	ea ee       	ldi	r30, 0xEA	; 234
      ec:	f3 e2       	ldi	r31, 0x23	; 35
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	ac 3b       	cpi	r26, 0xBC	; 188
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	2a e1       	ldi	r18, 0x1A	; 26
     100:	ac eb       	ldi	r26, 0xBC	; 188
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a0 34       	cpi	r26, 0x40	; 64
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	ce d5       	rcall	.+2972   	; 0xcac <main>
     110:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
	}
}

void turn_around()
{
	if(gStatus)
     116:	80 91 00 01 	lds	r24, 0x0100
     11a:	88 23       	and	r24, r24
     11c:	21 f0       	breq	.+8      	; 0x126 <turn_around+0x10>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     11e:	6c e1       	ldi	r22, 0x1C	; 28
     120:	71 e1       	ldi	r23, 0x11	; 17
     122:	80 e8       	ldi	r24, 0x80	; 128
     124:	d6 d7       	rcall	.+4012   	; 0x10d2 <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(180, 0);
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	84 eb       	ldi	r24, 0xB4	; 180
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 24 0c 	call	0x1848	; 0x1848 <USART_SendTurn>
	while(USART_turn_done() == 0)
     130:	08 c0       	rjmp	.+16     	; 0x142 <turn_around+0x2c>
	{
		USART_DecodeRxFIFO();
     132:	0e 94 57 0e 	call	0x1cae	; 0x1cae <USART_DecodeRxFIFO>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     136:	8f e3       	ldi	r24, 0x3F	; 63
     138:	9c e9       	ldi	r25, 0x9C	; 156
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <turn_around+0x24>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <turn_around+0x2a>
     140:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(180, 0);
	while(USART_turn_done() == 0)
     142:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <USART_turn_done>
     146:	88 23       	and	r24, r24
     148:	a1 f3       	breq	.-24     	; 0x132 <turn_around+0x1c>
	{
		USART_DecodeRxFIFO();
		_delay_ms(10);
	}
	
	if(gStatus)
     14a:	80 91 00 01 	lds	r24, 0x0100
     14e:	88 23       	and	r24, r24
     150:	21 f0       	breq	.+8      	; 0x15a <turn_around+0x44>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     152:	65 e3       	ldi	r22, 0x35	; 53
     154:	71 e1       	ldi	r23, 0x11	; 17
     156:	80 e8       	ldi	r24, 0x80	; 128
     158:	bc c7       	rjmp	.+3960   	; 0x10d2 <TWI_send_string>
     15a:	08 95       	ret

0000015c <walk_forward>:
	}
}

void walk_forward()
{
     15c:	8f 92       	push	r8
     15e:	9f 92       	push	r9
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	cf 92       	push	r12
     166:	df 92       	push	r13
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     170:	4f d4       	rcall	.+2206   	; 0xa10 <navigation_angle_offset>
     172:	6b 01       	movw	r12, r22
     174:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     176:	b0 d2       	rcall	.+1376   	; 0x6d8 <navigation_direction_regulation>
     178:	4b 01       	movw	r8, r22
     17a:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	48 e4       	ldi	r20, 0x48	; 72
     182:	52 e4       	ldi	r21, 0x42	; 66
     184:	c7 01       	movw	r24, r14
     186:	b6 01       	movw	r22, r12
     188:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     18c:	9b 01       	movw	r18, r22
     18e:	ac 01       	movw	r20, r24
     190:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
     194:	2b ed       	ldi	r18, 0xDB	; 219
     196:	3f e0       	ldi	r19, 0x0F	; 15
     198:	49 e4       	ldi	r20, 0x49	; 73
     19a:	50 e4       	ldi	r21, 0x40	; 64
     19c:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__divsf3>
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	4c e4       	ldi	r20, 0x4C	; 76
     1a6:	52 e4       	ldi	r21, 0x42	; 66
     1a8:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
     1ac:	0e 94 22 10 	call	0x2044	; 0x2044 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1b0:	64 36       	cpi	r22, 0x64	; 100
     1b2:	71 05       	cpc	r23, r1
     1b4:	34 f4       	brge	.+12     	; 0x1c2 <walk_forward+0x66>
     1b6:	eb 01       	movw	r28, r22
     1b8:	dd 23       	and	r29, r29
     1ba:	2c f4       	brge	.+10     	; 0x1c6 <walk_forward+0x6a>
     1bc:	c0 e0       	ldi	r28, 0x00	; 0
     1be:	d0 e0       	ldi	r29, 0x00	; 0
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1c2:	c4 e6       	ldi	r28, 0x64	; 100
     1c4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	44 eb       	ldi	r20, 0xB4	; 180
     1cc:	52 e4       	ldi	r21, 0x42	; 66
     1ce:	c5 01       	movw	r24, r10
     1d0:	b4 01       	movw	r22, r8
     1d2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     1d6:	2b ed       	ldi	r18, 0xDB	; 219
     1d8:	3f e0       	ldi	r19, 0x0F	; 15
     1da:	49 ec       	ldi	r20, 0xC9	; 201
     1dc:	50 e4       	ldi	r21, 0x40	; 64
     1de:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__divsf3>
     1e2:	0e 94 22 10 	call	0x2044	; 0x2044 <__fixsfsi>
     1e6:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1e8:	40 91 01 01 	lds	r20, 0x0101
     1ec:	6c 2f       	mov	r22, r28
     1ee:	82 2f       	mov	r24, r18
     1f0:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1f4:	98 d1       	rcall	.+816    	; 0x526 <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	bf 90       	pop	r11
     204:	af 90       	pop	r10
     206:	9f 90       	pop	r9
     208:	8f 90       	pop	r8
     20a:	08 95       	ret

0000020c <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
	if(gStatus)
     210:	80 91 00 01 	lds	r24, 0x0100
     214:	88 23       	and	r24, r24
     216:	21 f0       	breq	.+8      	; 0x220 <turn_right+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     218:	6a e5       	ldi	r22, 0x5A	; 90
     21a:	71 e1       	ldi	r23, 0x11	; 17
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	59 d7       	rcall	.+3762   	; 0x10d2 <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 1);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	8a e5       	ldi	r24, 0x5A	; 90
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 24 0c 	call	0x1848	; 0x1848 <USART_SendTurn>
	while(USART_turn_done() == 0)
     22a:	08 c0       	rjmp	.+16     	; 0x23c <turn_right+0x30>
	{
		USART_DecodeRxFIFO();
     22c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <USART_DecodeRxFIFO>
     230:	8f e3       	ldi	r24, 0x3F	; 63
     232:	9c e9       	ldi	r25, 0x9C	; 156
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <turn_right+0x28>
     238:	00 c0       	rjmp	.+0      	; 0x23a <turn_right+0x2e>
     23a:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 1);
	while(USART_turn_done() == 0)
     23c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <USART_turn_done>
     240:	88 23       	and	r24, r24
     242:	a1 f3       	breq	.-24     	; 0x22c <turn_right+0x20>
     244:	cc e0       	ldi	r28, 0x0C	; 12
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	03 c0       	rjmp	.+6      	; 0x250 <turn_right+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     24a:	88 df       	rcall	.-240    	; 0x15c <walk_forward>
     24c:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_DecodeRxFIFO();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
     24e:	19 f0       	breq	.+6      	; 0x256 <turn_right+0x4a>
     250:	64 d1       	rcall	.+712    	; 0x51a <navigation_autonomous_walk>
     252:	81 11       	cpse	r24, r1
     254:	fa cf       	rjmp	.-12     	; 0x24a <turn_right+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     256:	80 91 00 01 	lds	r24, 0x0100
     25a:	88 23       	and	r24, r24
     25c:	21 f0       	breq	.+8      	; 0x266 <turn_right+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     25e:	62 e7       	ldi	r22, 0x72	; 114
     260:	71 e1       	ldi	r23, 0x11	; 17
     262:	80 e8       	ldi	r24, 0x80	; 128
     264:	36 d7       	rcall	.+3692   	; 0x10d2 <TWI_send_string>
	}
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
	if(gStatus)
     270:	80 91 00 01 	lds	r24, 0x0100
     274:	88 23       	and	r24, r24
     276:	21 f0       	breq	.+8      	; 0x280 <turn_left+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     278:	66 e8       	ldi	r22, 0x86	; 134
     27a:	71 e1       	ldi	r23, 0x11	; 17
     27c:	80 e8       	ldi	r24, 0x80	; 128
     27e:	29 d7       	rcall	.+3666   	; 0x10d2 <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 0);
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	8a e5       	ldi	r24, 0x5A	; 90
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 24 0c 	call	0x1848	; 0x1848 <USART_SendTurn>
	while(USART_turn_done() == 0)
     28a:	08 c0       	rjmp	.+16     	; 0x29c <turn_left+0x30>
	{
		USART_DecodeRxFIFO();
     28c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <USART_DecodeRxFIFO>
     290:	8f e3       	ldi	r24, 0x3F	; 63
     292:	9c e9       	ldi	r25, 0x9C	; 156
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <turn_left+0x28>
     298:	00 c0       	rjmp	.+0      	; 0x29a <turn_left+0x2e>
     29a:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 0);
	while(USART_turn_done() == 0)
     29c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <USART_turn_done>
     2a0:	88 23       	and	r24, r24
     2a2:	a1 f3       	breq	.-24     	; 0x28c <turn_left+0x20>
     2a4:	cc e0       	ldi	r28, 0x0C	; 12
     2a6:	d0 e0       	ldi	r29, 0x00	; 0
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <turn_left+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     2aa:	58 df       	rcall	.-336    	; 0x15c <walk_forward>
     2ac:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_DecodeRxFIFO();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
     2ae:	19 f0       	breq	.+6      	; 0x2b6 <turn_left+0x4a>
     2b0:	34 d1       	rcall	.+616    	; 0x51a <navigation_autonomous_walk>
     2b2:	81 11       	cpse	r24, r1
     2b4:	fa cf       	rjmp	.-12     	; 0x2aa <turn_left+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     2b6:	80 91 00 01 	lds	r24, 0x0100
     2ba:	88 23       	and	r24, r24
     2bc:	21 f0       	breq	.+8      	; 0x2c6 <turn_left+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2be:	6d e9       	ldi	r22, 0x9D	; 157
     2c0:	71 e1       	ldi	r23, 0x11	; 17
     2c2:	80 e8       	ldi	r24, 0x80	; 128
     2c4:	06 d7       	rcall	.+3596   	; 0x10d2 <TWI_send_string>
	}
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <climb>:
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void climb()
{
	USART_SendClimb();	
     2cc:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <USART_SendClimb>
     2d0:	08 95       	ret

000002d2 <autonomouswalk_walk>:
}

void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
     2d2:	b2 d1       	rcall	.+868    	; 0x638 <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     2d4:	1c d1       	rcall	.+568    	; 0x50e <navigation_left_algorithm>
     2d6:	88 23       	and	r24, r24
     2d8:	09 f4       	brne	.+2      	; 0x2dc <autonomouswalk_walk+0xa>
     2da:	40 c0       	rjmp	.+128    	; 0x35c <autonomouswalk_walk+0x8a>
	{
		if(navigation_check_left_turn() == 2)
     2dc:	e8 d1       	rcall	.+976    	; 0x6ae <navigation_check_left_turn>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	39 f4       	brne	.+14     	; 0x2f0 <autonomouswalk_walk+0x1e>
		{
			for(int i = 0;i < TURN_ENTRY_ITTERATIONS; ++i)
			{
				walk_forward();
     2e2:	3c df       	rcall	.-392    	; 0x15c <walk_forward>
     2e4:	3b df       	rcall	.-394    	; 0x15c <walk_forward>
     2e6:	3a df       	rcall	.-396    	; 0x15c <walk_forward>
			}
			turn_left();
     2e8:	c1 df       	rcall	.-126    	; 0x26c <turn_left>
			decisionCounter = 0;
     2ea:	10 92 bc 13 	sts	0x13BC, r1
     2ee:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     2f0:	84 e0       	ldi	r24, 0x04	; 4
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	5a d1       	rcall	.+692    	; 0x5aa <navigation_get_sensor>
     2f6:	89 32       	cpi	r24, 0x29	; 41
     2f8:	58 f0       	brcs	.+22     	; 0x310 <autonomouswalk_walk+0x3e>
		{
			if(navigation_get_sensor(6) < CORRIDOR_WIDTH / 2)
     2fa:	86 e0       	ldi	r24, 0x06	; 6
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	55 d1       	rcall	.+682    	; 0x5aa <navigation_get_sensor>
     300:	88 32       	cpi	r24, 0x28	; 40
     302:	10 f4       	brcc	.+4      	; 0x308 <autonomouswalk_walk+0x36>
			{
				climb();
     304:	e3 df       	rcall	.-58     	; 0x2cc <climb>
     306:	01 c0       	rjmp	.+2      	; 0x30a <autonomouswalk_walk+0x38>
			}
			else
			{
				walk_forward();	
     308:	29 df       	rcall	.-430    	; 0x15c <walk_forward>
			}
			decisionCounter = 0;
     30a:	10 92 bc 13 	sts	0x13BC, r1
     30e:	08 95       	ret
		}
		else if(navigation_check_right_turn() == 2)
     310:	b9 d1       	rcall	.+882    	; 0x684 <navigation_check_right_turn>
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	21 f4       	brne	.+8      	; 0x31e <autonomouswalk_walk+0x4c>
		{
			turn_right();
     316:	7a df       	rcall	.-268    	; 0x20c <turn_right>
			decisionCounter = 0;
     318:	10 92 bc 13 	sts	0x13BC, r1
     31c:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     31e:	c7 d1       	rcall	.+910    	; 0x6ae <navigation_check_left_turn>
     320:	81 11       	cpse	r24, r1
     322:	07 c0       	rjmp	.+14     	; 0x332 <autonomouswalk_walk+0x60>
     324:	af d1       	rcall	.+862    	; 0x684 <navigation_check_right_turn>
     326:	81 11       	cpse	r24, r1
     328:	04 c0       	rjmp	.+8      	; 0x332 <autonomouswalk_walk+0x60>
		{
			turn_around();
     32a:	f5 de       	rcall	.-534    	; 0x116 <turn_around>
			decisionCounter = 0;
     32c:	10 92 bc 13 	sts	0x13BC, r1
     330:	08 95       	ret
		}
		else if(decisionCounter < 4)
     332:	80 91 bc 13 	lds	r24, 0x13BC
     336:	84 30       	cpi	r24, 0x04	; 4
     338:	38 f4       	brcc	.+14     	; 0x348 <autonomouswalk_walk+0x76>
		{
			walk_forward();
     33a:	10 df       	rcall	.-480    	; 0x15c <walk_forward>
			++decisionCounter;
     33c:	80 91 bc 13 	lds	r24, 0x13BC
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	80 93 bc 13 	sts	0x13BC, r24
     346:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     348:	10 92 bc 13 	sts	0x13BC, r1
			navigation_set_autonomous_walk(0);
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	e8 d0       	rcall	.+464    	; 0x520 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     350:	49 e3       	ldi	r20, 0x39	; 57
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	60 eb       	ldi	r22, 0xB0	; 176
     356:	71 e1       	ldi	r23, 0x11	; 17
     358:	80 e8       	ldi	r24, 0x80	; 128
     35a:	01 c7       	rjmp	.+3586   	; 0x115e <TWI_send_string_fixed_length>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     35c:	93 d1       	rcall	.+806    	; 0x684 <navigation_check_right_turn>
     35e:	82 30       	cpi	r24, 0x02	; 2
     360:	31 f4       	brne	.+12     	; 0x36e <autonomouswalk_walk+0x9c>
		{
			for(int i = 0;i < TURN_ENTRY_ITTERATIONS - 1; ++i)
			{
				walk_forward();
     362:	fc de       	rcall	.-520    	; 0x15c <walk_forward>
     364:	fb de       	rcall	.-522    	; 0x15c <walk_forward>
			}
			turn_right();
     366:	52 df       	rcall	.-348    	; 0x20c <turn_right>
			decisionCounter = 0;
     368:	10 92 bc 13 	sts	0x13BC, r1
     36c:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     36e:	84 e0       	ldi	r24, 0x04	; 4
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	1b d1       	rcall	.+566    	; 0x5aa <navigation_get_sensor>
     374:	89 32       	cpi	r24, 0x29	; 41
     376:	20 f0       	brcs	.+8      	; 0x380 <autonomouswalk_walk+0xae>
		{
			walk_forward();
     378:	f1 de       	rcall	.-542    	; 0x15c <walk_forward>
			decisionCounter = 0;
     37a:	10 92 bc 13 	sts	0x13BC, r1
     37e:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 2)
     380:	96 d1       	rcall	.+812    	; 0x6ae <navigation_check_left_turn>
     382:	82 30       	cpi	r24, 0x02	; 2
     384:	21 f4       	brne	.+8      	; 0x38e <autonomouswalk_walk+0xbc>
		{
			turn_left();
     386:	72 df       	rcall	.-284    	; 0x26c <turn_left>
			decisionCounter = 0;
     388:	10 92 bc 13 	sts	0x13BC, r1
     38c:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     38e:	8f d1       	rcall	.+798    	; 0x6ae <navigation_check_left_turn>
     390:	81 11       	cpse	r24, r1
     392:	07 c0       	rjmp	.+14     	; 0x3a2 <autonomouswalk_walk+0xd0>
     394:	77 d1       	rcall	.+750    	; 0x684 <navigation_check_right_turn>
     396:	81 11       	cpse	r24, r1
     398:	04 c0       	rjmp	.+8      	; 0x3a2 <autonomouswalk_walk+0xd0>
		{
			turn_around();
     39a:	bd de       	rcall	.-646    	; 0x116 <turn_around>
			decisionCounter = 0;
     39c:	10 92 bc 13 	sts	0x13BC, r1
     3a0:	08 95       	ret
		}
		else if(decisionCounter < 4)
     3a2:	80 91 bc 13 	lds	r24, 0x13BC
     3a6:	84 30       	cpi	r24, 0x04	; 4
     3a8:	38 f4       	brcc	.+14     	; 0x3b8 <autonomouswalk_walk+0xe6>
		{
			walk_forward();
     3aa:	d8 de       	rcall	.-592    	; 0x15c <walk_forward>
			++decisionCounter;
     3ac:	80 91 bc 13 	lds	r24, 0x13BC
     3b0:	8f 5f       	subi	r24, 0xFF	; 255
     3b2:	80 93 bc 13 	sts	0x13BC, r24
     3b6:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     3b8:	10 92 bc 13 	sts	0x13BC, r1
			navigation_set_autonomous_walk(0);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	b0 d0       	rcall	.+352    	; 0x520 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     3c0:	49 e3       	ldi	r20, 0x39	; 57
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 eb       	ldi	r22, 0xB0	; 176
     3c6:	71 e1       	ldi	r23, 0x11	; 17
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	c9 c6       	rjmp	.+3474   	; 0x115e <TWI_send_string_fixed_length>

000003cc <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     3cc:	bc 01       	movw	r22, r24
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__floatunsisf>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	4a e7       	ldi	r20, 0x7A	; 122
     3dc:	51 e4       	ldi	r21, 0x41	; 65
     3de:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     3e2:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
	OCR1A = delay;
     3e6:	70 93 89 00 	sts	0x0089, r23
     3ea:	60 93 88 00 	sts	0x0088, r22
     3ee:	08 95       	ret

000003f0 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     3f0:	bc 01       	movw	r22, r24
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__floatunsisf>
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	4a e7       	ldi	r20, 0x7A	; 122
     400:	51 e4       	ldi	r21, 0x41	; 65
     402:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     406:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
	OCR3A = delay;
     40a:	70 93 99 00 	sts	0x0099, r23
     40e:	60 93 98 00 	sts	0x0098, r22
     412:	08 95       	ret

00000414 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     414:	e1 e8       	ldi	r30, 0x81	; 129
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	85 60       	ori	r24, 0x05	; 5
     41c:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     41e:	e1 e9       	ldi	r30, 0x91	; 145
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	85 60       	ori	r24, 0x05	; 5
     426:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     428:	88 ee       	ldi	r24, 0xE8	; 232
     42a:	93 e0       	ldi	r25, 0x03	; 3
     42c:	cf df       	rcall	.-98     	; 0x3cc <set_counter_1>
	set_counter_2(1000);
     42e:	88 ee       	ldi	r24, 0xE8	; 232
     430:	93 e0       	ldi	r25, 0x03	; 3
     432:	de df       	rcall	.-68     	; 0x3f0 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     434:	ef e6       	ldi	r30, 0x6F	; 111
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	82 60       	ori	r24, 0x02	; 2
     43c:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     43e:	e1 e7       	ldi	r30, 0x71	; 113
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	82 60       	ori	r24, 0x02	; 2
     446:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     448:	10 92 85 00 	sts	0x0085, r1
     44c:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     450:	10 92 95 00 	sts	0x0095, r1
     454:	10 92 94 00 	sts	0x0094, r1
     458:	08 95       	ret

0000045a <FifoDataLength>:
     45a:	fc 01       	movw	r30, r24
     45c:	90 81       	ld	r25, Z
     45e:	91 50       	subi	r25, 0x01	; 1
     460:	84 81       	ldd	r24, Z+4	; 0x04
     462:	22 81       	ldd	r18, Z+2	; 0x02
     464:	82 1b       	sub	r24, r18
     466:	89 23       	and	r24, r25
     468:	08 95       	ret

0000046a <FifoWrite>:
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	ec 01       	movw	r28, r24
     472:	16 2f       	mov	r17, r22
     474:	f2 df       	rcall	.-28     	; 0x45a <FifoDataLength>
     476:	28 81       	ld	r18, Y
     478:	39 81       	ldd	r19, Y+1	; 0x01
     47a:	21 50       	subi	r18, 0x01	; 1
     47c:	31 09       	sbc	r19, r1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	82 17       	cp	r24, r18
     482:	93 07       	cpc	r25, r19
     484:	69 f0       	breq	.+26     	; 0x4a0 <FifoWrite+0x36>
     486:	8c 81       	ldd	r24, Y+4	; 0x04
     488:	9d 81       	ldd	r25, Y+5	; 0x05
     48a:	fe 01       	movw	r30, r28
     48c:	e8 0f       	add	r30, r24
     48e:	f9 1f       	adc	r31, r25
     490:	16 83       	std	Z+6, r17	; 0x06
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	28 23       	and	r18, r24
     496:	39 23       	and	r19, r25
     498:	3d 83       	std	Y+5, r19	; 0x05
     49a:	2c 83       	std	Y+4, r18	; 0x04
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <FifoWrite+0x38>
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	08 95       	ret

000004aa <FifoRead>:
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	8b 01       	movw	r16, r22
     4b6:	d1 df       	rcall	.-94     	; 0x45a <FifoDataLength>
     4b8:	88 23       	and	r24, r24
     4ba:	a1 f0       	breq	.+40     	; 0x4e4 <FifoRead+0x3a>
     4bc:	ea 81       	ldd	r30, Y+2	; 0x02
     4be:	fb 81       	ldd	r31, Y+3	; 0x03
     4c0:	ec 0f       	add	r30, r28
     4c2:	fd 1f       	adc	r31, r29
     4c4:	86 81       	ldd	r24, Z+6	; 0x06
     4c6:	f8 01       	movw	r30, r16
     4c8:	80 83       	st	Z, r24
     4ca:	28 81       	ld	r18, Y
     4cc:	39 81       	ldd	r19, Y+1	; 0x01
     4ce:	21 50       	subi	r18, 0x01	; 1
     4d0:	31 09       	sbc	r19, r1
     4d2:	8a 81       	ldd	r24, Y+2	; 0x02
     4d4:	9b 81       	ldd	r25, Y+3	; 0x03
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	82 23       	and	r24, r18
     4da:	93 23       	and	r25, r19
     4dc:	9b 83       	std	Y+3, r25	; 0x03
     4de:	8a 83       	std	Y+2, r24	; 0x02
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <FifoRead+0x3c>
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	08 95       	ret

000004f0 <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     4f0:	68 2f       	mov	r22, r24
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__floatunsisf>
     4fc:	60 93 03 01 	sts	0x0103, r22
     500:	70 93 04 01 	sts	0x0104, r23
     504:	80 93 05 01 	sts	0x0105, r24
     508:	90 93 06 01 	sts	0x0106, r25
     50c:	08 95       	ret

0000050e <navigation_left_algorithm>:
     50e:	80 91 07 01 	lds	r24, 0x0107
     512:	08 95       	ret

00000514 <navigation_set_algorithm>:
     514:	80 93 07 01 	sts	0x0107, r24
     518:	08 95       	ret

0000051a <navigation_autonomous_walk>:
     51a:	80 91 02 01 	lds	r24, 0x0102
     51e:	08 95       	ret

00000520 <navigation_set_autonomous_walk>:
     520:	80 93 02 01 	sts	0x0102, r24
     524:	08 95       	ret

00000526 <navigation_stepping_delay>:
     526:	cf 93       	push	r28
     528:	c2 e0       	ldi	r28, 0x02	; 2
     52a:	0e c0       	rjmp	.+28     	; 0x548 <navigation_stepping_delay+0x22>
     52c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <USART_DecodeRxFIFO>
     530:	2f ef       	ldi	r18, 0xFF	; 255
     532:	89 ef       	ldi	r24, 0xF9	; 249
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	21 50       	subi	r18, 0x01	; 1
     538:	80 40       	sbci	r24, 0x00	; 0
     53a:	90 40       	sbci	r25, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <navigation_stepping_delay+0x10>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <navigation_stepping_delay+0x1a>
     540:	00 00       	nop
     542:	82 b1       	in	r24, 0x02	; 2
     544:	8c 27       	eor	r24, r28
     546:	82 b9       	out	0x02, r24	; 2
     548:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <USART_ready>
     54c:	88 23       	and	r24, r24
     54e:	71 f3       	breq	.-36     	; 0x52c <navigation_stepping_delay+0x6>
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <navigation_fill_buffer>:
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	c0 e0       	ldi	r28, 0x00	; 0
     55e:	d0 e0       	ldi	r29, 0x00	; 0
     560:	00 91 be 13 	lds	r16, 0x13BE
     564:	10 e0       	ldi	r17, 0x00	; 0
     566:	ce 01       	movw	r24, r28
     568:	85 d6       	rcall	.+3338   	; 0x1274 <TWI_get_sensor>
     56a:	fe 01       	movw	r30, r28
     56c:	ee 0f       	add	r30, r30
     56e:	ff 1f       	adc	r31, r31
     570:	ee 0f       	add	r30, r30
     572:	ff 1f       	adc	r31, r31
     574:	ec 0f       	add	r30, r28
     576:	fd 1f       	adc	r31, r29
     578:	0e 0f       	add	r16, r30
     57a:	1f 1f       	adc	r17, r31
     57c:	f8 01       	movw	r30, r16
     57e:	ef 51       	subi	r30, 0x1F	; 31
     580:	fc 4e       	sbci	r31, 0xEC	; 236
     582:	80 83       	st	Z, r24
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	c8 30       	cpi	r28, 0x08	; 8
     588:	d1 05       	cpc	r29, r1
     58a:	51 f7       	brne	.-44     	; 0x560 <navigation_fill_buffer+0xc>
     58c:	80 91 be 13 	lds	r24, 0x13BE
     590:	84 30       	cpi	r24, 0x04	; 4
     592:	19 f4       	brne	.+6      	; 0x59a <navigation_fill_buffer+0x46>
     594:	10 92 be 13 	sts	0x13BE, r1
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <navigation_fill_buffer+0x4c>
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	80 93 be 13 	sts	0x13BE, r24
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	08 95       	ret

000005aa <navigation_get_sensor>:
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <navigation_get_sensor+0x6>
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <navigation_get_sensor+0x8>
     5b2:	1f 92       	push	r1
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	fc 01       	movw	r30, r24
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	8e 0f       	add	r24, r30
     5c4:	9f 1f       	adc	r25, r31
     5c6:	fc 01       	movw	r30, r24
     5c8:	ef 51       	subi	r30, 0x1F	; 31
     5ca:	fc 4e       	sbci	r31, 0xEC	; 236
     5cc:	80 81       	ld	r24, Z
     5ce:	89 83       	std	Y+1, r24	; 0x01
     5d0:	81 81       	ldd	r24, Z+1	; 0x01
     5d2:	8a 83       	std	Y+2, r24	; 0x02
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	8b 83       	std	Y+3, r24	; 0x03
     5d8:	83 81       	ldd	r24, Z+3	; 0x03
     5da:	8c 83       	std	Y+4, r24	; 0x04
     5dc:	84 81       	ldd	r24, Z+4	; 0x04
     5de:	8d 83       	std	Y+5, r24	; 0x05
     5e0:	24 e0       	ldi	r18, 0x04	; 4
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	0e c0       	rjmp	.+28     	; 0x602 <navigation_get_sensor+0x58>
     5e6:	41 91       	ld	r20, Z+
     5e8:	50 81       	ld	r21, Z
     5ea:	54 17       	cp	r21, r20
     5ec:	20 f4       	brcc	.+8      	; 0x5f6 <navigation_get_sensor+0x4c>
     5ee:	df 01       	movw	r26, r30
     5f0:	11 97       	sbiw	r26, 0x01	; 1
     5f2:	5c 93       	st	X, r21
     5f4:	40 83       	st	Z, r20
     5f6:	8e 17       	cp	r24, r30
     5f8:	9f 07       	cpc	r25, r31
     5fa:	a9 f7       	brne	.-22     	; 0x5e6 <navigation_get_sensor+0x3c>
     5fc:	21 50       	subi	r18, 0x01	; 1
     5fe:	31 09       	sbc	r19, r1
     600:	49 f0       	breq	.+18     	; 0x614 <navigation_get_sensor+0x6a>
     602:	12 16       	cp	r1, r18
     604:	13 06       	cpc	r1, r19
     606:	d4 f7       	brge	.-12     	; 0x5fc <navigation_get_sensor+0x52>
     608:	fe 01       	movw	r30, r28
     60a:	31 96       	adiw	r30, 0x01	; 1
     60c:	cf 01       	movw	r24, r30
     60e:	82 0f       	add	r24, r18
     610:	93 1f       	adc	r25, r19
     612:	e9 cf       	rjmp	.-46     	; 0x5e6 <navigation_get_sensor+0x3c>
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(7) < HEIGHT_LIMIT)
     626:	87 e0       	ldi	r24, 0x07	; 7
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	bf df       	rcall	.-130    	; 0x5aa <navigation_get_sensor>
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	88 32       	cpi	r24, 0x28	; 40
     630:	08 f0       	brcs	.+2      	; 0x634 <navigation_detect_low_pass_obsticle+0xe>
     632:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     634:	89 2f       	mov	r24, r25
     636:	08 95       	ret

00000638 <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     638:	f6 df       	rcall	.-20     	; 0x626 <navigation_detect_low_pass_obsticle>
     63a:	88 23       	and	r24, r24
     63c:	e9 f0       	breq	.+58     	; 0x678 <navigation_low_pass_obstacle+0x40>
     63e:	80 91 bd 13 	lds	r24, 0x13BD
     642:	81 11       	cpse	r24, r1
     644:	19 c0       	rjmp	.+50     	; 0x678 <navigation_low_pass_obstacle+0x40>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     646:	4b e1       	ldi	r20, 0x1B	; 27
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	6a ee       	ldi	r22, 0xEA	; 234
     64c:	71 e1       	ldi	r23, 0x11	; 17
     64e:	80 e4       	ldi	r24, 0x40	; 64
     650:	86 d5       	rcall	.+2828   	; 0x115e <TWI_send_string_fixed_length>
     652:	2f ef       	ldi	r18, 0xFF	; 255
     654:	86 e7       	ldi	r24, 0x76	; 118
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	80 40       	sbci	r24, 0x00	; 0
     65c:	90 40       	sbci	r25, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <navigation_low_pass_obstacle+0x20>
     660:	00 c0       	rjmp	.+0      	; 0x662 <navigation_low_pass_obstacle+0x2a>
     662:	00 00       	nop
		_delay_ms(30);
		TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);
     664:	4b e1       	ldi	r20, 0x1B	; 27
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	6a ee       	ldi	r22, 0xEA	; 234
     66a:	71 e1       	ldi	r23, 0x11	; 17
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	77 d5       	rcall	.+2798   	; 0x115e <TWI_send_string_fixed_length>
		lowPassObstacleFlag = 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 bd 13 	sts	0x13BD, r24
     676:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     678:	d6 df       	rcall	.-84     	; 0x626 <navigation_detect_low_pass_obsticle>
     67a:	81 11       	cpse	r24, r1
     67c:	02 c0       	rjmp	.+4      	; 0x682 <navigation_low_pass_obstacle+0x4a>
	{
		lowPassObstacleFlag = 0;
     67e:	10 92 bd 13 	sts	0x13BD, r1
     682:	08 95       	ret

00000684 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	90 df       	rcall	.-224    	; 0x5aa <navigation_get_sensor>
     68a:	8c 33       	cpi	r24, 0x3C	; 60
     68c:	28 f0       	brcs	.+10     	; 0x698 <navigation_check_right_turn+0x14>
     68e:	83 e0       	ldi	r24, 0x03	; 3
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	8b df       	rcall	.-234    	; 0x5aa <navigation_get_sensor>
     694:	8c 33       	cpi	r24, 0x3C	; 60
     696:	40 f4       	brcc	.+16     	; 0x6a8 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	86 df       	rcall	.-244    	; 0x5aa <navigation_get_sensor>
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	86 34       	cpi	r24, 0x46	; 70
     6a2:	18 f4       	brcc	.+6      	; 0x6aa <navigation_check_right_turn+0x26>
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     6a8:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     6aa:	89 2f       	mov	r24, r25
     6ac:	08 95       	ret

000006ae <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	7b df       	rcall	.-266    	; 0x5aa <navigation_get_sensor>
     6b4:	8c 33       	cpi	r24, 0x3C	; 60
     6b6:	28 f0       	brcs	.+10     	; 0x6c2 <navigation_check_left_turn+0x14>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	76 df       	rcall	.-276    	; 0x5aa <navigation_get_sensor>
     6be:	8c 33       	cpi	r24, 0x3C	; 60
     6c0:	40 f4       	brcc	.+16     	; 0x6d2 <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	71 df       	rcall	.-286    	; 0x5aa <navigation_get_sensor>
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	86 34       	cpi	r24, 0x46	; 70
     6cc:	18 f4       	brcc	.+6      	; 0x6d4 <navigation_check_left_turn+0x26>
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     6d2:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     6d4:	89 2f       	mov	r24, r25
     6d6:	08 95       	ret

000006d8 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	6b 01       	movw	r12, r22
     6e6:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     6e8:	80 91 07 01 	lds	r24, 0x0107
     6ec:	88 23       	and	r24, r24
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <navigation_direction_regulation+0x1a>
     6f0:	98 c0       	rjmp	.+304    	; 0x822 <navigation_direction_regulation+0x14a>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	59 df       	rcall	.-334    	; 0x5aa <navigation_get_sensor>
     6f8:	c8 2f       	mov	r28, r24
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	55 df       	rcall	.-342    	; 0x5aa <navigation_get_sensor>
     700:	2c 2f       	mov	r18, r28
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	a9 01       	movw	r20, r18
     706:	48 1b       	sub	r20, r24
     708:	51 09       	sbc	r21, r1
     70a:	ca 01       	movw	r24, r20
     70c:	99 23       	and	r25, r25
     70e:	1c f4       	brge	.+6      	; 0x716 <navigation_direction_regulation+0x3e>
     710:	91 95       	neg	r25
     712:	81 95       	neg	r24
     714:	91 09       	sbc	r25, r1
     716:	0a 97       	sbiw	r24, 0x0a	; 10
     718:	b4 f5       	brge	.+108    	; 0x786 <navigation_direction_regulation+0xae>
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	45 df       	rcall	.-374    	; 0x5aa <navigation_get_sensor>
     720:	82 33       	cpi	r24, 0x32	; 50
     722:	88 f5       	brcc	.+98     	; 0x786 <navigation_direction_regulation+0xae>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	40 df       	rcall	.-384    	; 0x5aa <navigation_get_sensor>
     72a:	c8 2f       	mov	r28, r24
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	3c df       	rcall	.-392    	; 0x5aa <navigation_get_sensor>
     732:	d8 2f       	mov	r29, r24
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <cos>
     73c:	6b 01       	movw	r12, r22
     73e:	7c 01       	movw	r14, r24
     740:	6d 2f       	mov	r22, r29
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	6c 0f       	add	r22, r28
     746:	71 1d       	adc	r23, r1
     748:	88 27       	eor	r24, r24
     74a:	77 fd       	sbrc	r23, 7
     74c:	80 95       	com	r24
     74e:	98 2f       	mov	r25, r24
     750:	0e 94 55 10 	call	0x20aa	; 0x20aa <__floatsisf>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	5f e3       	ldi	r21, 0x3F	; 63
     75c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     760:	26 e6       	ldi	r18, 0x66	; 102
     762:	36 e6       	ldi	r19, 0x66	; 102
     764:	46 ed       	ldi	r20, 0xD6	; 214
     766:	50 e4       	ldi	r21, 0x40	; 64
     768:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
     76c:	a7 01       	movw	r20, r14
     76e:	96 01       	movw	r18, r12
     770:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e2       	ldi	r20, 0x20	; 32
     77a:	52 e4       	ldi	r21, 0x42	; 66
     77c:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__subsf3>
     780:	0e 94 22 10 	call	0x2044	; 0x2044 <__fixsfsi>
     784:	e5 c0       	rjmp	.+458    	; 0x950 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0f df       	rcall	.-482    	; 0x5aa <navigation_get_sensor>
     78c:	c8 2f       	mov	r28, r24
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0b df       	rcall	.-490    	; 0x5aa <navigation_get_sensor>
     794:	2c 2f       	mov	r18, r28
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	a9 01       	movw	r20, r18
     79a:	48 1b       	sub	r20, r24
     79c:	51 09       	sbc	r21, r1
     79e:	ca 01       	movw	r24, r20
     7a0:	99 23       	and	r25, r25
     7a2:	1c f4       	brge	.+6      	; 0x7aa <navigation_direction_regulation+0xd2>
     7a4:	91 95       	neg	r25
     7a6:	81 95       	neg	r24
     7a8:	91 09       	sbc	r25, r1
     7aa:	0a 97       	sbiw	r24, 0x0a	; 10
     7ac:	0c f0       	brlt	.+2      	; 0x7b0 <navigation_direction_regulation+0xd8>
     7ae:	21 c1       	rjmp	.+578    	; 0x9f2 <navigation_direction_regulation+0x31a>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	fa de       	rcall	.-524    	; 0x5aa <navigation_get_sensor>
     7b6:	82 33       	cpi	r24, 0x32	; 50
     7b8:	08 f0       	brcs	.+2      	; 0x7bc <navigation_direction_regulation+0xe4>
     7ba:	1b c1       	rjmp	.+566    	; 0x9f2 <navigation_direction_regulation+0x31a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	f4 de       	rcall	.-536    	; 0x5aa <navigation_get_sensor>
     7c2:	c8 2f       	mov	r28, r24
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	f0 de       	rcall	.-544    	; 0x5aa <navigation_get_sensor>
     7ca:	d8 2f       	mov	r29, r24
     7cc:	c7 01       	movw	r24, r14
     7ce:	b6 01       	movw	r22, r12
     7d0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <cos>
     7d4:	6b 01       	movw	r12, r22
     7d6:	7c 01       	movw	r14, r24
     7d8:	6d 2f       	mov	r22, r29
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	6c 0f       	add	r22, r28
     7de:	71 1d       	adc	r23, r1
     7e0:	88 27       	eor	r24, r24
     7e2:	77 fd       	sbrc	r23, 7
     7e4:	80 95       	com	r24
     7e6:	98 2f       	mov	r25, r24
     7e8:	0e 94 55 10 	call	0x20aa	; 0x20aa <__floatsisf>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	5f e3       	ldi	r21, 0x3F	; 63
     7f4:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     7f8:	26 e6       	ldi	r18, 0x66	; 102
     7fa:	36 e6       	ldi	r19, 0x66	; 102
     7fc:	46 ed       	ldi	r20, 0xD6	; 214
     7fe:	50 e4       	ldi	r21, 0x40	; 64
     800:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
     804:	a7 01       	movw	r20, r14
     806:	96 01       	movw	r18, r12
     808:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	80 e2       	ldi	r24, 0x20	; 32
     816:	92 e4       	ldi	r25, 0x42	; 66
     818:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__subsf3>
     81c:	0e 94 22 10 	call	0x2044	; 0x2044 <__fixsfsi>
     820:	97 c0       	rjmp	.+302    	; 0x950 <navigation_direction_regulation+0x278>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	c1 de       	rcall	.-638    	; 0x5aa <navigation_get_sensor>
     828:	c8 2f       	mov	r28, r24
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	bd de       	rcall	.-646    	; 0x5aa <navigation_get_sensor>
     830:	2c 2f       	mov	r18, r28
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	a9 01       	movw	r20, r18
     836:	48 1b       	sub	r20, r24
     838:	51 09       	sbc	r21, r1
     83a:	ca 01       	movw	r24, r20
     83c:	99 23       	and	r25, r25
     83e:	1c f4       	brge	.+6      	; 0x846 <navigation_direction_regulation+0x16e>
     840:	91 95       	neg	r25
     842:	81 95       	neg	r24
     844:	91 09       	sbc	r25, r1
     846:	0a 97       	sbiw	r24, 0x0a	; 10
     848:	c4 f5       	brge	.+112    	; 0x8ba <navigation_direction_regulation+0x1e2>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	ad de       	rcall	.-678    	; 0x5aa <navigation_get_sensor>
     850:	82 33       	cpi	r24, 0x32	; 50
     852:	98 f5       	brcc	.+102    	; 0x8ba <navigation_direction_regulation+0x1e2>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a8 de       	rcall	.-688    	; 0x5aa <navigation_get_sensor>
     85a:	c8 2f       	mov	r28, r24
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	a4 de       	rcall	.-696    	; 0x5aa <navigation_get_sensor>
     862:	d8 2f       	mov	r29, r24
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
     868:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <cos>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
     870:	6d 2f       	mov	r22, r29
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	6c 0f       	add	r22, r28
     876:	71 1d       	adc	r23, r1
     878:	88 27       	eor	r24, r24
     87a:	77 fd       	sbrc	r23, 7
     87c:	80 95       	com	r24
     87e:	98 2f       	mov	r25, r24
     880:	0e 94 55 10 	call	0x20aa	; 0x20aa <__floatsisf>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	5f e3       	ldi	r21, 0x3F	; 63
     88c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     890:	26 e6       	ldi	r18, 0x66	; 102
     892:	36 e6       	ldi	r19, 0x66	; 102
     894:	46 ed       	ldi	r20, 0xD6	; 214
     896:	50 e4       	ldi	r21, 0x40	; 64
     898:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
     89c:	a7 01       	movw	r20, r14
     89e:	96 01       	movw	r18, r12
     8a0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     8a4:	9b 01       	movw	r18, r22
     8a6:	ac 01       	movw	r20, r24
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e2       	ldi	r24, 0x20	; 32
     8ae:	92 e4       	ldi	r25, 0x42	; 66
     8b0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__subsf3>
     8b4:	0e 94 22 10 	call	0x2044	; 0x2044 <__fixsfsi>
     8b8:	4b c0       	rjmp	.+150    	; 0x950 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	75 de       	rcall	.-790    	; 0x5aa <navigation_get_sensor>
     8c0:	c8 2f       	mov	r28, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	71 de       	rcall	.-798    	; 0x5aa <navigation_get_sensor>
     8c8:	2c 2f       	mov	r18, r28
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	a9 01       	movw	r20, r18
     8ce:	48 1b       	sub	r20, r24
     8d0:	51 09       	sbc	r21, r1
     8d2:	ca 01       	movw	r24, r20
     8d4:	99 23       	and	r25, r25
     8d6:	1c f4       	brge	.+6      	; 0x8de <navigation_direction_regulation+0x206>
     8d8:	91 95       	neg	r25
     8da:	81 95       	neg	r24
     8dc:	91 09       	sbc	r25, r1
     8de:	0a 97       	sbiw	r24, 0x0a	; 10
     8e0:	0c f0       	brlt	.+2      	; 0x8e4 <navigation_direction_regulation+0x20c>
     8e2:	87 c0       	rjmp	.+270    	; 0x9f2 <navigation_direction_regulation+0x31a>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	60 de       	rcall	.-832    	; 0x5aa <navigation_get_sensor>
     8ea:	82 33       	cpi	r24, 0x32	; 50
     8ec:	08 f0       	brcs	.+2      	; 0x8f0 <navigation_direction_regulation+0x218>
     8ee:	81 c0       	rjmp	.+258    	; 0x9f2 <navigation_direction_regulation+0x31a>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	5a de       	rcall	.-844    	; 0x5aa <navigation_get_sensor>
     8f6:	c8 2f       	mov	r28, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	56 de       	rcall	.-852    	; 0x5aa <navigation_get_sensor>
     8fe:	d8 2f       	mov	r29, r24
     900:	c7 01       	movw	r24, r14
     902:	b6 01       	movw	r22, r12
     904:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <cos>
     908:	6b 01       	movw	r12, r22
     90a:	7c 01       	movw	r14, r24
     90c:	6d 2f       	mov	r22, r29
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	6c 0f       	add	r22, r28
     912:	71 1d       	adc	r23, r1
     914:	88 27       	eor	r24, r24
     916:	77 fd       	sbrc	r23, 7
     918:	80 95       	com	r24
     91a:	98 2f       	mov	r25, r24
     91c:	0e 94 55 10 	call	0x20aa	; 0x20aa <__floatsisf>
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	5f e3       	ldi	r21, 0x3F	; 63
     928:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     92c:	26 e6       	ldi	r18, 0x66	; 102
     92e:	36 e6       	ldi	r19, 0x66	; 102
     930:	46 ed       	ldi	r20, 0xD6	; 214
     932:	50 e4       	ldi	r21, 0x40	; 64
     934:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
     938:	a7 01       	movw	r20, r14
     93a:	96 01       	movw	r18, r12
     93c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e2       	ldi	r20, 0x20	; 32
     946:	52 e4       	ldi	r21, 0x42	; 66
     948:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__subsf3>
     94c:	0e 94 22 10 	call	0x2044	; 0x2044 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     950:	cb 01       	movw	r24, r22
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	03 97       	sbiw	r24, 0x03	; 3
     956:	08 f4       	brcc	.+2      	; 0x95a <navigation_direction_regulation+0x282>
     958:	47 c0       	rjmp	.+142    	; 0x9e8 <navigation_direction_regulation+0x310>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     95a:	88 27       	eor	r24, r24
     95c:	77 fd       	sbrc	r23, 7
     95e:	80 95       	com	r24
     960:	98 2f       	mov	r25, r24
     962:	0e 94 55 10 	call	0x20aa	; 0x20aa <__floatsisf>
     966:	20 91 03 01 	lds	r18, 0x0103
     96a:	30 91 04 01 	lds	r19, 0x0104
     96e:	40 91 05 01 	lds	r20, 0x0105
     972:	50 91 06 01 	lds	r21, 0x0106
     976:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     97a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <atan>
     97e:	c6 2e       	mov	r12, r22
     980:	d7 2e       	mov	r13, r23
     982:	e8 2e       	mov	r14, r24
     984:	f9 2e       	mov	r15, r25
		if(dir < 0)
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	a9 01       	movw	r20, r18
     98c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__cmpsf2>
     990:	88 23       	and	r24, r24
     992:	7c f4       	brge	.+30     	; 0x9b2 <navigation_direction_regulation+0x2da>
		{
			dir += 2*PI;
     994:	2b ed       	ldi	r18, 0xDB	; 219
     996:	3f e0       	ldi	r19, 0x0F	; 15
     998:	49 ec       	ldi	r20, 0xC9	; 201
     99a:	50 e4       	ldi	r21, 0x40	; 64
     99c:	6c 2d       	mov	r22, r12
     99e:	7d 2d       	mov	r23, r13
     9a0:	8e 2d       	mov	r24, r14
     9a2:	9f 2d       	mov	r25, r15
     9a4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3>
     9a8:	c6 2e       	mov	r12, r22
     9aa:	d7 2e       	mov	r13, r23
     9ac:	e8 2e       	mov	r14, r24
     9ae:	f9 2e       	mov	r15, r25
     9b0:	24 c0       	rjmp	.+72     	; 0x9fa <navigation_direction_regulation+0x322>
		} else if(dir >= 2*PI)
     9b2:	2b ed       	ldi	r18, 0xDB	; 219
     9b4:	3f e0       	ldi	r19, 0x0F	; 15
     9b6:	49 ec       	ldi	r20, 0xC9	; 201
     9b8:	50 e4       	ldi	r21, 0x40	; 64
     9ba:	6c 2d       	mov	r22, r12
     9bc:	7d 2d       	mov	r23, r13
     9be:	8e 2d       	mov	r24, r14
     9c0:	9f 2d       	mov	r25, r15
     9c2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__gesf2>
     9c6:	88 23       	and	r24, r24
     9c8:	c4 f0       	brlt	.+48     	; 0x9fa <navigation_direction_regulation+0x322>
		{
			dir -= 2*PI;
     9ca:	2b ed       	ldi	r18, 0xDB	; 219
     9cc:	3f e0       	ldi	r19, 0x0F	; 15
     9ce:	49 ec       	ldi	r20, 0xC9	; 201
     9d0:	50 e4       	ldi	r21, 0x40	; 64
     9d2:	6c 2d       	mov	r22, r12
     9d4:	7d 2d       	mov	r23, r13
     9d6:	8e 2d       	mov	r24, r14
     9d8:	9f 2d       	mov	r25, r15
     9da:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__subsf3>
     9de:	c6 2e       	mov	r12, r22
     9e0:	d7 2e       	mov	r13, r23
     9e2:	e8 2e       	mov	r14, r24
     9e4:	f9 2e       	mov	r15, r25
     9e6:	09 c0       	rjmp	.+18     	; 0x9fa <navigation_direction_regulation+0x322>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     9e8:	c1 2c       	mov	r12, r1
     9ea:	d1 2c       	mov	r13, r1
     9ec:	e1 2c       	mov	r14, r1
     9ee:	f1 2c       	mov	r15, r1
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <navigation_direction_regulation+0x322>
     9f2:	c1 2c       	mov	r12, r1
     9f4:	d1 2c       	mov	r13, r1
     9f6:	e1 2c       	mov	r14, r1
     9f8:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     9fa:	6c 2d       	mov	r22, r12
     9fc:	7d 2d       	mov	r23, r13
     9fe:	8e 2d       	mov	r24, r14
     a00:	9f 2d       	mov	r25, r15
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	df 90       	pop	r13
     a0c:	cf 90       	pop	r12
     a0e:	08 95       	ret

00000a10 <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     a18:	80 91 07 01 	lds	r24, 0x0107
     a1c:	88 23       	and	r24, r24
     a1e:	09 f4       	brne	.+2      	; 0xa22 <navigation_angle_offset+0x12>
     a20:	6c c0       	rjmp	.+216    	; 0xafa <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	c1 dd       	rcall	.-1150   	; 0x5aa <navigation_get_sensor>
     a28:	f8 2e       	mov	r15, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	bd dd       	rcall	.-1158   	; 0x5aa <navigation_get_sensor>
     a30:	2f 2d       	mov	r18, r15
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	a9 01       	movw	r20, r18
     a36:	48 1b       	sub	r20, r24
     a38:	51 09       	sbc	r21, r1
     a3a:	ca 01       	movw	r24, r20
     a3c:	99 23       	and	r25, r25
     a3e:	1c f4       	brge	.+6      	; 0xa46 <navigation_angle_offset+0x36>
     a40:	91 95       	neg	r25
     a42:	81 95       	neg	r24
     a44:	91 09       	sbc	r25, r1
     a46:	0a 97       	sbiw	r24, 0x0a	; 10
     a48:	0c f5       	brge	.+66     	; 0xa8c <navigation_angle_offset+0x7c>
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	ad dd       	rcall	.-1190   	; 0x5aa <navigation_get_sensor>
     a50:	82 33       	cpi	r24, 0x32	; 50
     a52:	e0 f4       	brcc	.+56     	; 0xa8c <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a8 dd       	rcall	.-1200   	; 0x5aa <navigation_get_sensor>
     a5a:	f8 2e       	mov	r15, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	a4 dd       	rcall	.-1208   	; 0x5aa <navigation_get_sensor>
     a62:	6f 2d       	mov	r22, r15
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	68 1b       	sub	r22, r24
     a68:	71 09       	sbc	r23, r1
     a6a:	88 27       	eor	r24, r24
     a6c:	77 fd       	sbrc	r23, 7
     a6e:	80 95       	com	r24
     a70:	98 2f       	mov	r25, r24
     a72:	0e 94 55 10 	call	0x20aa	; 0x20aa <__floatsisf>
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e8       	ldi	r20, 0x80	; 128
     a7c:	5d e3       	ldi	r21, 0x3D	; 61
     a7e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     a82:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <atan>
     a86:	6b 01       	movw	r12, r22
     a88:	7c 01       	movw	r14, r24
     a8a:	a0 c0       	rjmp	.+320    	; 0xbcc <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	8c dd       	rcall	.-1256   	; 0x5aa <navigation_get_sensor>
     a92:	f8 2e       	mov	r15, r24
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	88 dd       	rcall	.-1264   	; 0x5aa <navigation_get_sensor>
     a9a:	2f 2d       	mov	r18, r15
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	a9 01       	movw	r20, r18
     aa0:	48 1b       	sub	r20, r24
     aa2:	51 09       	sbc	r21, r1
     aa4:	ca 01       	movw	r24, r20
     aa6:	99 23       	and	r25, r25
     aa8:	1c f4       	brge	.+6      	; 0xab0 <navigation_angle_offset+0xa0>
     aaa:	91 95       	neg	r25
     aac:	81 95       	neg	r24
     aae:	91 09       	sbc	r25, r1
     ab0:	0a 97       	sbiw	r24, 0x0a	; 10
     ab2:	0c f0       	brlt	.+2      	; 0xab6 <navigation_angle_offset+0xa6>
     ab4:	9a c0       	rjmp	.+308    	; 0xbea <navigation_angle_offset+0x1da>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	77 dd       	rcall	.-1298   	; 0x5aa <navigation_get_sensor>
     abc:	82 33       	cpi	r24, 0x32	; 50
     abe:	08 f0       	brcs	.+2      	; 0xac2 <navigation_angle_offset+0xb2>
     ac0:	94 c0       	rjmp	.+296    	; 0xbea <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	71 dd       	rcall	.-1310   	; 0x5aa <navigation_get_sensor>
     ac8:	f8 2e       	mov	r15, r24
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	6d dd       	rcall	.-1318   	; 0x5aa <navigation_get_sensor>
     ad0:	6f 2d       	mov	r22, r15
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	68 1b       	sub	r22, r24
     ad6:	71 09       	sbc	r23, r1
     ad8:	88 27       	eor	r24, r24
     ada:	77 fd       	sbrc	r23, 7
     adc:	80 95       	com	r24
     ade:	98 2f       	mov	r25, r24
     ae0:	0e 94 55 10 	call	0x20aa	; 0x20aa <__floatsisf>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e8       	ldi	r20, 0x80	; 128
     aea:	5d e3       	ldi	r21, 0x3D	; 61
     aec:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     af0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <atan>
     af4:	6b 01       	movw	r12, r22
     af6:	7c 01       	movw	r14, r24
     af8:	69 c0       	rjmp	.+210    	; 0xbcc <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	55 dd       	rcall	.-1366   	; 0x5aa <navigation_get_sensor>
     b00:	f8 2e       	mov	r15, r24
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	51 dd       	rcall	.-1374   	; 0x5aa <navigation_get_sensor>
     b08:	2f 2d       	mov	r18, r15
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	a9 01       	movw	r20, r18
     b0e:	48 1b       	sub	r20, r24
     b10:	51 09       	sbc	r21, r1
     b12:	ca 01       	movw	r24, r20
     b14:	99 23       	and	r25, r25
     b16:	1c f4       	brge	.+6      	; 0xb1e <navigation_angle_offset+0x10e>
     b18:	91 95       	neg	r25
     b1a:	81 95       	neg	r24
     b1c:	91 09       	sbc	r25, r1
     b1e:	0a 97       	sbiw	r24, 0x0a	; 10
     b20:	0c f5       	brge	.+66     	; 0xb64 <navigation_angle_offset+0x154>
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	41 dd       	rcall	.-1406   	; 0x5aa <navigation_get_sensor>
     b28:	82 33       	cpi	r24, 0x32	; 50
     b2a:	e0 f4       	brcc	.+56     	; 0xb64 <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	3c dd       	rcall	.-1416   	; 0x5aa <navigation_get_sensor>
     b32:	f8 2e       	mov	r15, r24
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	38 dd       	rcall	.-1424   	; 0x5aa <navigation_get_sensor>
     b3a:	6f 2d       	mov	r22, r15
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	68 1b       	sub	r22, r24
     b40:	71 09       	sbc	r23, r1
     b42:	88 27       	eor	r24, r24
     b44:	77 fd       	sbrc	r23, 7
     b46:	80 95       	com	r24
     b48:	98 2f       	mov	r25, r24
     b4a:	0e 94 55 10 	call	0x20aa	; 0x20aa <__floatsisf>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e8       	ldi	r20, 0x80	; 128
     b54:	5d e3       	ldi	r21, 0x3D	; 61
     b56:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     b5a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <atan>
     b5e:	6b 01       	movw	r12, r22
     b60:	7c 01       	movw	r14, r24
     b62:	34 c0       	rjmp	.+104    	; 0xbcc <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	20 dd       	rcall	.-1472   	; 0x5aa <navigation_get_sensor>
     b6a:	f8 2e       	mov	r15, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	1c dd       	rcall	.-1480   	; 0x5aa <navigation_get_sensor>
     b72:	2f 2d       	mov	r18, r15
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	a9 01       	movw	r20, r18
     b78:	48 1b       	sub	r20, r24
     b7a:	51 09       	sbc	r21, r1
     b7c:	ca 01       	movw	r24, r20
     b7e:	99 23       	and	r25, r25
     b80:	1c f4       	brge	.+6      	; 0xb88 <navigation_angle_offset+0x178>
     b82:	91 95       	neg	r25
     b84:	81 95       	neg	r24
     b86:	91 09       	sbc	r25, r1
     b88:	0a 97       	sbiw	r24, 0x0a	; 10
     b8a:	7c f5       	brge	.+94     	; 0xbea <navigation_angle_offset+0x1da>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0c dd       	rcall	.-1512   	; 0x5aa <navigation_get_sensor>
     b92:	82 33       	cpi	r24, 0x32	; 50
     b94:	50 f5       	brcc	.+84     	; 0xbea <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	07 dd       	rcall	.-1522   	; 0x5aa <navigation_get_sensor>
     b9c:	f8 2e       	mov	r15, r24
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	03 dd       	rcall	.-1530   	; 0x5aa <navigation_get_sensor>
     ba4:	6f 2d       	mov	r22, r15
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	68 1b       	sub	r22, r24
     baa:	71 09       	sbc	r23, r1
     bac:	88 27       	eor	r24, r24
     bae:	77 fd       	sbrc	r23, 7
     bb0:	80 95       	com	r24
     bb2:	98 2f       	mov	r25, r24
     bb4:	0e 94 55 10 	call	0x20aa	; 0x20aa <__floatsisf>
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e8       	ldi	r20, 0x80	; 128
     bbe:	5d e3       	ldi	r21, 0x3D	; 61
     bc0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__mulsf3>
     bc4:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <atan>
     bc8:	6b 01       	movw	r12, r22
     bca:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     bcc:	c7 01       	movw	r24, r14
     bce:	b6 01       	movw	r22, r12
     bd0:	9f 77       	andi	r25, 0x7F	; 127
     bd2:	29 e2       	ldi	r18, 0x29	; 41
     bd4:	3c e5       	ldi	r19, 0x5C	; 92
     bd6:	4f e8       	ldi	r20, 0x8F	; 143
     bd8:	5d e3       	ldi	r21, 0x3D	; 61
     bda:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__gesf2>
     bde:	18 16       	cp	r1, r24
     be0:	3c f0       	brlt	.+14     	; 0xbf0 <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     be2:	c1 2c       	mov	r12, r1
     be4:	d1 2c       	mov	r13, r1
     be6:	76 01       	movw	r14, r12
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <navigation_angle_offset+0x1e0>
     bea:	c1 2c       	mov	r12, r1
     bec:	d1 2c       	mov	r13, r1
     bee:	76 01       	movw	r14, r12
     bf0:	7c 2d       	mov	r23, r12
	}
}
     bf2:	67 2f       	mov	r22, r23
     bf4:	7d 2d       	mov	r23, r13
     bf6:	8e 2d       	mov	r24, r14
     bf8:	9f 2d       	mov	r25, r15
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	08 95       	ret

00000c04 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	0b b6       	in	r0, 0x3b	; 59
     c10:	0f 92       	push	r0
     c12:	2f 93       	push	r18
     c14:	3f 93       	push	r19
     c16:	4f 93       	push	r20
     c18:	5f 93       	push	r21
     c1a:	6f 93       	push	r22
     c1c:	7f 93       	push	r23
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
     c22:	af 93       	push	r26
     c24:	bf 93       	push	r27
     c26:	ef 93       	push	r30
     c28:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	73 dc       	rcall	.-1818   	; 0x514 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	77 dc       	rcall	.-1810   	; 0x520 <navigation_set_autonomous_walk>
}
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	0b be       	out	0x3b, r0	; 59
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	1f 90       	pop	r1
     c56:	18 95       	reti

00000c58 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     c58:	1f 92       	push	r1
     c5a:	0f 92       	push	r0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	0f 92       	push	r0
     c60:	11 24       	eor	r1, r1
     c62:	0b b6       	in	r0, 0x3b	; 59
     c64:	0f 92       	push	r0
     c66:	2f 93       	push	r18
     c68:	3f 93       	push	r19
     c6a:	4f 93       	push	r20
     c6c:	5f 93       	push	r21
     c6e:	6f 93       	push	r22
     c70:	7f 93       	push	r23
     c72:	8f 93       	push	r24
     c74:	9f 93       	push	r25
     c76:	af 93       	push	r26
     c78:	bf 93       	push	r27
     c7a:	ef 93       	push	r30
     c7c:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	49 dc       	rcall	.-1902   	; 0x514 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	4d dc       	rcall	.-1894   	; 0x520 <navigation_set_autonomous_walk>
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	0b be       	out	0x3b, r0	; 59
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <main>:
//Flag to know if to send the autonom settings to the computer.
uint8_t autonom_flag = 1;

int main(void)
{
	USART_init();
     cac:	de d4       	rcall	.+2492   	; 0x166a <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); //<<<????>>> send messages from gang to the display, not the computer
     cae:	80 e8       	ldi	r24, 0x80	; 128
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	e7 d4       	rcall	.+2510   	; 0x1682 <USART_set_twi_message_destination>
	sei();
     cb4:	78 94       	sei
	TWI_init(ST_ADDRESS);
     cb6:	80 e2       	ldi	r24, 0x20	; 32
     cb8:	70 d1       	rcall	.+736    	; 0xf9a <TWI_init>
	init_counters();
     cba:	ac db       	rcall	.-2216   	; 0x414 <init_counters>
	
	LED_INIT;
     cbc:	81 b1       	in	r24, 0x01	; 1
     cbe:	83 60       	ori	r24, 0x03	; 3
     cc0:	81 b9       	out	0x01, r24	; 1
     cc2:	87 b1       	in	r24, 0x07	; 7
     cc4:	80 6c       	ori	r24, 0xC0	; 192
     cc6:	87 b9       	out	0x07, r24	; 7
	
	//Buttons
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //For emphasize
     cc8:	81 b1       	in	r24, 0x01	; 1
     cca:	8f 73       	andi	r24, 0x3F	; 63
     ccc:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     cce:	e8 e6       	ldi	r30, 0x68	; 104
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	81 60       	ori	r24, 0x01	; 1
     cd6:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //mask for porta6 and porta7
     cd8:	eb e6       	ldi	r30, 0x6B	; 107
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 6c       	ori	r24, 0xC0	; 192
     ce0:	80 83       	st	Z, r24
     ce2:	2f ef       	ldi	r18, 0xFF	; 255
     ce4:	83 e2       	ldi	r24, 0x23	; 35
     ce6:	94 ef       	ldi	r25, 0xF4	; 244
     ce8:	21 50       	subi	r18, 0x01	; 1
     cea:	80 40       	sbci	r24, 0x00	; 0
     cec:	90 40       	sbci	r25, 0x00	; 0
     cee:	e1 f7       	brne	.-8      	; 0xce8 <main+0x3c>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <main+0x46>
     cf2:	00 00       	nop
	
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	14 dc       	rcall	.-2008   	; 0x520 <navigation_set_autonomous_walk>
	//set_counter_1(100);
	set_counter_2(200);
     cf8:	88 ec       	ldi	r24, 0xC8	; 200
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	79 db       	rcall	.-2318   	; 0x3f0 <set_counter_2>
				USART_SendCommand();
			}
			
			if(TWI_elevation_flag())
			{
				LED0_TOGGLE;
     cfe:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else
		{
			if(TWI_command_flag())
			{
				LED1_TOGGLE;
     d00:	c2 e0       	ldi	r28, 0x02	; 2
			LED1_TOGGLE;
			navigation_fill_buffer();
		}*/
		
		
		if(autonom_flag)
     d02:	80 91 08 01 	lds	r24, 0x0108
     d06:	88 23       	and	r24, r24
     d08:	31 f0       	breq	.+12     	; 0xd16 <main+0x6a>
		{
			TWI_send_autonom_settings(C_ADDRESS, navigation_left_algorithm());
     d0a:	01 dc       	rcall	.-2046   	; 0x50e <navigation_left_algorithm>
     d0c:	68 2f       	mov	r22, r24
     d0e:	80 e8       	ldi	r24, 0x80	; 128
     d10:	67 d1       	rcall	.+718    	; 0xfe0 <TWI_send_autonom_settings>
			autonom_flag = 0;
     d12:	10 92 08 01 	sts	0x0108, r1
		}
		
		if(navigation_autonomous_walk() == 1)
     d16:	01 dc       	rcall	.-2046   	; 0x51a <navigation_autonomous_walk>
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	49 f4       	brne	.+18     	; 0xd2e <main+0x82>
		{
			if(TWI_control_settings_flag())
     d1c:	c5 d2       	rcall	.+1418   	; 0x12a8 <TWI_control_settings_flag>
     d1e:	88 23       	and	r24, r24
     d20:	21 f0       	breq	.+8      	; 0xd2a <main+0x7e>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	ab d2       	rcall	.+1366   	; 0x127e <TWI_get_control_setting>
     d28:	e3 db       	rcall	.-2106   	; 0x4f0 <navigation_set_Kp>
			}
			autonomouswalk_walk();
     d2a:	d3 da       	rcall	.-2650   	; 0x2d2 <autonomouswalk_walk>
     d2c:	ea cf       	rjmp	.-44     	; 0xd02 <main+0x56>
		}
		else
		{
			if(TWI_command_flag())
     d2e:	b2 d2       	rcall	.+1380   	; 0x1294 <TWI_command_flag>
     d30:	88 23       	and	r24, r24
     d32:	21 f0       	breq	.+8      	; 0xd3c <main+0x90>
			{
				LED1_TOGGLE;
     d34:	82 b1       	in	r24, 0x02	; 2
     d36:	8c 27       	eor	r24, r28
     d38:	82 b9       	out	0x02, r24	; 2
				USART_SendCommand();
     d3a:	6e d5       	rcall	.+2780   	; 0x1818 <USART_SendCommand>
			}
			
			if(TWI_elevation_flag())
     d3c:	c9 d2       	rcall	.+1426   	; 0x12d0 <TWI_elevation_flag>
     d3e:	88 23       	and	r24, r24
     d40:	21 f0       	breq	.+8      	; 0xd4a <main+0x9e>
			{
				LED0_TOGGLE;
     d42:	82 b1       	in	r24, 0x02	; 2
     d44:	8d 27       	eor	r24, r29
     d46:	82 b9       	out	0x02, r24	; 2
				USART_SendElevation();
     d48:	79 d5       	rcall	.+2802   	; 0x183c <USART_SendElevation>
			}
		USART_DecodeRxFIFO();
     d4a:	b1 d7       	rcall	.+3938   	; 0x1cae <USART_DecodeRxFIFO>
     d4c:	da cf       	rjmp	.-76     	; 0xd02 <main+0x56>

00000d4e <__vector_13>:
	}
}
//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
	//USART_RequestGyro();
	TCNT1 = 0;
     d58:	10 92 85 00 	sts	0x0085, r1
     d5c:	10 92 84 00 	sts	0x0084, r1
}
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
	if(TWI_autonom_settings_flag())
     d90:	95 d2       	rcall	.+1322   	; 0x12bc <TWI_autonom_settings_flag>
     d92:	88 23       	and	r24, r24
     d94:	91 f0       	breq	.+36     	; 0xdba <__vector_32+0x50>
	{
		uint8_t sett = TWI_get_autonom_settings();
     d96:	78 d2       	rcall	.+1264   	; 0x1288 <TWI_get_autonom_settings>
		if(sett == 0)
     d98:	81 11       	cpse	r24, r1
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <__vector_32+0x36>
		{
			navigation_set_autonomous_walk(0);
     d9c:	c1 db       	rcall	.-2174   	; 0x520 <navigation_set_autonomous_walk>
     d9e:	0a c0       	rjmp	.+20     	; 0xdb4 <__vector_32+0x4a>
		}
		else if(sett == 1)
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	21 f4       	brne	.+8      	; 0xdac <__vector_32+0x42>
		{
			navigation_set_autonomous_walk(1);
     da4:	bd db       	rcall	.-2182   	; 0x520 <navigation_set_autonomous_walk>
			navigation_set_algorithm(1);
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	b5 db       	rcall	.-2198   	; 0x514 <navigation_set_algorithm>
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <__vector_32+0x4a>
		}
		else //sett == 2
		{
			navigation_set_autonomous_walk(1);
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	b8 db       	rcall	.-2192   	; 0x520 <navigation_set_autonomous_walk>
			navigation_set_algorithm(0);
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	b0 db       	rcall	.-2208   	; 0x514 <navigation_set_algorithm>
		}
		autonom_flag = 1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 93 08 01 	sts	0x0108, r24
	}
	TCNT3 = 0;
     dba:	10 92 95 00 	sts	0x0095, r1
     dbe:	10 92 94 00 	sts	0x0094, r1
}
     dc2:	ff 91       	pop	r31
     dc4:	ef 91       	pop	r30
     dc6:	bf 91       	pop	r27
     dc8:	af 91       	pop	r26
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	7f 91       	pop	r23
     dd0:	6f 91       	pop	r22
     dd2:	5f 91       	pop	r21
     dd4:	4f 91       	pop	r20
     dd6:	3f 91       	pop	r19
     dd8:	2f 91       	pop	r18
     dda:	0f 90       	pop	r0
     ddc:	0b be       	out	0x3b, r0	; 59
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <__vector_4>:

//-------------------Buttons PinChange interrupt---------------------

ISR(PCINT0_vect)
{
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	0b b6       	in	r0, 0x3b	; 59
     df4:	0f 92       	push	r0
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	4f 93       	push	r20
     dfc:	5f 93       	push	r21
     dfe:	6f 93       	push	r22
     e00:	7f 93       	push	r23
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	af 93       	push	r26
     e08:	bf 93       	push	r27
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     e0e:	06 9b       	sbis	0x00, 6	; 0
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	85 db       	rcall	.-2294   	; 0x520 <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	7d db       	rcall	.-2310   	; 0x514 <navigation_set_algorithm>
		//test
		LED2_TOGGLE;
     e1a:	98 b1       	in	r25, 0x08	; 8
     e1c:	80 e4       	ldi	r24, 0x40	; 64
     e1e:	89 27       	eor	r24, r25
     e20:	88 b9       	out	0x08, r24	; 8
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <__vector_4+0x4e>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     e24:	07 9b       	sbis	0x00, 7	; 0
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <__vector_4+0x4e>
	{
		navigation_set_autonomous_walk(1);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	7a db       	rcall	.-2316   	; 0x520 <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	72 db       	rcall	.-2332   	; 0x514 <navigation_set_algorithm>
		//test
		LED3_TOGGLE;
     e30:	88 b1       	in	r24, 0x08	; 8
     e32:	80 58       	subi	r24, 0x80	; 128
     e34:	88 b9       	out	0x08, r24	; 8
	}
	autonom_flag = 1;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 08 01 	sts	0x0108, r24
}
     e3c:	ff 91       	pop	r31
     e3e:	ef 91       	pop	r30
     e40:	bf 91       	pop	r27
     e42:	af 91       	pop	r26
     e44:	9f 91       	pop	r25
     e46:	8f 91       	pop	r24
     e48:	7f 91       	pop	r23
     e4a:	6f 91       	pop	r22
     e4c:	5f 91       	pop	r21
     e4e:	4f 91       	pop	r20
     e50:	3f 91       	pop	r19
     e52:	2f 91       	pop	r18
     e54:	0f 90       	pop	r0
     e56:	0b be       	out	0x3b, r0	; 59
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <set_twi_reciever_enable>:
	
	//Do something with the message here... Send to display for now
	TWI_send_string_fixed_length(S_ADDRESS, msg, length);
	
	return 0;
}
     e62:	85 e4       	ldi	r24, 0x45	; 69
     e64:	80 93 bc 00 	sts	0x00BC, r24
     e68:	08 95       	ret

00000e6a <clear_int>:
     e6a:	81 ec       	ldi	r24, 0xC1	; 193
     e6c:	80 93 bc 00 	sts	0x00BC, r24
     e70:	08 95       	ret

00000e72 <start_bus>:
     e72:	84 ea       	ldi	r24, 0xA4	; 164
     e74:	80 93 bc 00 	sts	0x00BC, r24
     e78:	08 95       	ret

00000e7a <stop_bus>:
     e7a:	85 ed       	ldi	r24, 0xD5	; 213
     e7c:	80 93 bc 00 	sts	0x00BC, r24
     e80:	08 95       	ret

00000e82 <Error>:
     e82:	80 91 b9 00 	lds	r24, 0x00B9
     e86:	88 7f       	andi	r24, 0xF8	; 248
     e88:	88 33       	cpi	r24, 0x38	; 56
     e8a:	09 f0       	breq	.+2      	; 0xe8e <Error+0xc>
     e8c:	f6 cf       	rjmp	.-20     	; 0xe7a <stop_bus>
     e8e:	ed cf       	rjmp	.-38     	; 0xe6a <clear_int>

00000e90 <get_data>:
     e90:	80 91 bb 00 	lds	r24, 0x00BB
     e94:	08 95       	ret

00000e96 <wait_for_bus>:
     e96:	ec eb       	ldi	r30, 0xBC	; 188
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 23       	and	r24, r24
     e9e:	ec f7       	brge	.-6      	; 0xe9a <wait_for_bus+0x4>
     ea0:	08 95       	ret

00000ea2 <send_data_and_wait>:
     ea2:	80 93 bb 00 	sts	0x00BB, r24
     ea6:	84 e8       	ldi	r24, 0x84	; 132
     ea8:	80 93 bc 00 	sts	0x00BC, r24
     eac:	f4 cf       	rjmp	.-24     	; 0xe96 <wait_for_bus>

00000eae <stop_twi>:
     eae:	10 92 1c 15 	sts	0x151C, r1
     eb2:	10 92 1b 15 	sts	0x151B, r1
     eb6:	10 92 26 15 	sts	0x1526, r1
     eba:	10 92 25 15 	sts	0x1525, r1
     ebe:	10 92 11 15 	sts	0x1511, r1
     ec2:	10 92 10 15 	sts	0x1510, r1
     ec6:	10 92 16 15 	sts	0x1516, r1
     eca:	10 92 15 15 	sts	0x1515, r1
     ece:	10 92 19 15 	sts	0x1519, r1
     ed2:	10 92 18 15 	sts	0x1518, r1
     ed6:	08 95       	ret

00000ed8 <reset_TWI>:
     ed8:	ec eb       	ldi	r30, 0xBC	; 188
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 6c       	ori	r24, 0xC0	; 192
     ee0:	80 83       	st	Z, r24
     ee2:	08 95       	ret

00000ee4 <get_control_settings_from_bus>:
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	c0 91 15 15 	lds	r28, 0x1515
     eec:	d0 91 16 15 	lds	r29, 0x1516
     ef0:	cf df       	rcall	.-98     	; 0xe90 <get_data>
     ef2:	ce 5e       	subi	r28, 0xEE	; 238
     ef4:	da 4e       	sbci	r29, 0xEA	; 234
     ef6:	88 83       	st	Y, r24
     ef8:	10 92 16 15 	sts	0x1516, r1
     efc:	10 92 15 15 	sts	0x1515, r1
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <get_autonom_settings_from_bus>:
     f06:	c4 df       	rcall	.-120    	; 0xe90 <get_data>
     f08:	80 93 10 14 	sts	0x1410, r24
     f0c:	08 95       	ret

00000f0e <get_char_from_bus>:
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	c0 91 10 15 	lds	r28, 0x1510
     f16:	d0 91 11 15 	lds	r29, 0x1511
     f1a:	ba df       	rcall	.-140    	; 0xe90 <get_data>
     f1c:	cf 5e       	subi	r28, 0xEF	; 239
     f1e:	db 4e       	sbci	r29, 0xEB	; 235
     f20:	88 83       	st	Y, r24
     f22:	80 91 10 15 	lds	r24, 0x1510
     f26:	90 91 11 15 	lds	r25, 0x1511
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	90 93 11 15 	sts	0x1511, r25
     f30:	80 93 10 15 	sts	0x1510, r24
     f34:	90 93 21 15 	sts	0x1521, r25
     f38:	80 93 20 15 	sts	0x1520, r24
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <get_sensor_from_bus>:
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	c0 91 25 15 	lds	r28, 0x1525
     f4a:	d0 91 26 15 	lds	r29, 0x1526
     f4e:	c8 30       	cpi	r28, 0x08	; 8
     f50:	d1 05       	cpc	r29, r1
     f52:	99 f4       	brne	.+38     	; 0xf7a <get_sensor_from_bus+0x38>
     f54:	e7 e2       	ldi	r30, 0x27	; 39
     f56:	f5 e1       	ldi	r31, 0x15	; 21
     f58:	af e2       	ldi	r26, 0x2F	; 47
     f5a:	b5 e1       	ldi	r27, 0x15	; 21
     f5c:	8f e2       	ldi	r24, 0x2F	; 47
     f5e:	95 e1       	ldi	r25, 0x15	; 21
     f60:	21 91       	ld	r18, Z+
     f62:	2d 93       	st	X+, r18
     f64:	e8 17       	cp	r30, r24
     f66:	f9 07       	cpc	r31, r25
     f68:	d9 f7       	brne	.-10     	; 0xf60 <get_sensor_from_bus+0x1e>
     f6a:	92 df       	rcall	.-220    	; 0xe90 <get_data>
     f6c:	80 93 1f 15 	sts	0x151F, r24
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 c4 13 	sts	0x13C4, r24
     f76:	ee da       	rcall	.-2596   	; 0x554 <navigation_fill_buffer>
     f78:	0d c0       	rjmp	.+26     	; 0xf94 <get_sensor_from_bus+0x52>
     f7a:	8a df       	rcall	.-236    	; 0xe90 <get_data>
     f7c:	c9 5d       	subi	r28, 0xD9	; 217
     f7e:	da 4e       	sbci	r29, 0xEA	; 234
     f80:	88 83       	st	Y, r24
     f82:	80 91 25 15 	lds	r24, 0x1525
     f86:	90 91 26 15 	lds	r25, 0x1526
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	90 93 26 15 	sts	0x1526, r25
     f90:	80 93 25 15 	sts	0x1525, r24
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <TWI_init>:
     f9a:	80 93 17 15 	sts	0x1517, r24
     f9e:	80 34       	cpi	r24, 0x40	; 64
     fa0:	79 f0       	breq	.+30     	; 0xfc0 <TWI_init+0x26>
     fa2:	80 38       	cpi	r24, 0x80	; 128
     fa4:	19 f0       	breq	.+6      	; 0xfac <TWI_init+0x12>
     fa6:	80 32       	cpi	r24, 0x20	; 32
     fa8:	d1 f4       	brne	.+52     	; 0xfde <TWI_init+0x44>
     faa:	12 c0       	rjmp	.+36     	; 0xfd0 <TWI_init+0x36>
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	88 b9       	out	0x08, r24	; 8
     fb0:	58 df       	rcall	.-336    	; 0xe62 <set_twi_reciever_enable>
     fb2:	8f e3       	ldi	r24, 0x3F	; 63
     fb4:	80 93 b8 00 	sts	0x00B8, r24
     fb8:	81 e8       	ldi	r24, 0x81	; 129
     fba:	80 93 ba 00 	sts	0x00BA, r24
     fbe:	08 95       	ret
     fc0:	8f e3       	ldi	r24, 0x3F	; 63
     fc2:	80 93 b8 00 	sts	0x00B8, r24
     fc6:	4d df       	rcall	.-358    	; 0xe62 <set_twi_reciever_enable>
     fc8:	80 e4       	ldi	r24, 0x40	; 64
     fca:	80 93 ba 00 	sts	0x00BA, r24
     fce:	08 95       	ret
     fd0:	8f e3       	ldi	r24, 0x3F	; 63
     fd2:	80 93 b8 00 	sts	0x00B8, r24
     fd6:	45 df       	rcall	.-374    	; 0xe62 <set_twi_reciever_enable>
     fd8:	81 e2       	ldi	r24, 0x21	; 33
     fda:	80 93 ba 00 	sts	0x00BA, r24
     fde:	08 95       	ret

00000fe0 <TWI_send_autonom_settings>:
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	c8 2f       	mov	r28, r24
     fe6:	d6 2f       	mov	r29, r22
     fe8:	44 df       	rcall	.-376    	; 0xe72 <start_bus>
     fea:	55 df       	rcall	.-342    	; 0xe96 <wait_for_bus>
     fec:	90 91 b9 00 	lds	r25, 0x00B9
     ff0:	98 7f       	andi	r25, 0xF8	; 248
     ff2:	98 30       	cpi	r25, 0x08	; 8
     ff4:	19 f0       	breq	.+6      	; 0xffc <TWI_send_autonom_settings+0x1c>
     ff6:	45 df       	rcall	.-374    	; 0xe82 <Error>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	20 c0       	rjmp	.+64     	; 0x103c <TWI_send_autonom_settings+0x5c>
     ffc:	8c 2f       	mov	r24, r28
     ffe:	51 df       	rcall	.-350    	; 0xea2 <send_data_and_wait>
    1000:	80 91 b9 00 	lds	r24, 0x00B9
    1004:	88 7f       	andi	r24, 0xF8	; 248
    1006:	88 31       	cpi	r24, 0x18	; 24
    1008:	19 f0       	breq	.+6      	; 0x1010 <TWI_send_autonom_settings+0x30>
    100a:	3b df       	rcall	.-394    	; 0xe82 <Error>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	16 c0       	rjmp	.+44     	; 0x103c <TWI_send_autonom_settings+0x5c>
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	47 df       	rcall	.-370    	; 0xea2 <send_data_and_wait>
    1014:	80 91 b9 00 	lds	r24, 0x00B9
    1018:	88 7f       	andi	r24, 0xF8	; 248
    101a:	88 32       	cpi	r24, 0x28	; 40
    101c:	19 f0       	breq	.+6      	; 0x1024 <TWI_send_autonom_settings+0x44>
    101e:	31 df       	rcall	.-414    	; 0xe82 <Error>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	0c c0       	rjmp	.+24     	; 0x103c <TWI_send_autonom_settings+0x5c>
    1024:	8d 2f       	mov	r24, r29
    1026:	3d df       	rcall	.-390    	; 0xea2 <send_data_and_wait>
    1028:	80 91 b9 00 	lds	r24, 0x00B9
    102c:	88 7f       	andi	r24, 0xF8	; 248
    102e:	88 32       	cpi	r24, 0x28	; 40
    1030:	19 f0       	breq	.+6      	; 0x1038 <TWI_send_autonom_settings+0x58>
    1032:	27 df       	rcall	.-434    	; 0xe82 <Error>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	02 c0       	rjmp	.+4      	; 0x103c <TWI_send_autonom_settings+0x5c>
    1038:	20 df       	rcall	.-448    	; 0xe7a <stop_bus>
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <TWI_send_command>:
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	c8 2f       	mov	r28, r24
    104a:	d6 2f       	mov	r29, r22
    104c:	14 2f       	mov	r17, r20
    104e:	11 df       	rcall	.-478    	; 0xe72 <start_bus>
    1050:	22 df       	rcall	.-444    	; 0xe96 <wait_for_bus>
    1052:	90 91 b9 00 	lds	r25, 0x00B9
    1056:	98 7f       	andi	r25, 0xF8	; 248
    1058:	98 30       	cpi	r25, 0x08	; 8
    105a:	19 f0       	breq	.+6      	; 0x1062 <TWI_send_command+0x20>
    105c:	12 df       	rcall	.-476    	; 0xe82 <Error>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	34 c0       	rjmp	.+104    	; 0x10ca <TWI_send_command+0x88>
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	1e df       	rcall	.-452    	; 0xea2 <send_data_and_wait>
    1066:	80 91 b9 00 	lds	r24, 0x00B9
    106a:	88 7f       	andi	r24, 0xF8	; 248
    106c:	88 31       	cpi	r24, 0x18	; 24
    106e:	19 f0       	breq	.+6      	; 0x1076 <TWI_send_command+0x34>
    1070:	08 df       	rcall	.-496    	; 0xe82 <Error>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	2a c0       	rjmp	.+84     	; 0x10ca <TWI_send_command+0x88>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	14 df       	rcall	.-472    	; 0xea2 <send_data_and_wait>
    107a:	80 91 b9 00 	lds	r24, 0x00B9
    107e:	88 7f       	andi	r24, 0xF8	; 248
    1080:	88 32       	cpi	r24, 0x28	; 40
    1082:	19 f0       	breq	.+6      	; 0x108a <TWI_send_command+0x48>
    1084:	fe de       	rcall	.-516    	; 0xe82 <Error>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	20 c0       	rjmp	.+64     	; 0x10ca <TWI_send_command+0x88>
    108a:	8c 2f       	mov	r24, r28
    108c:	0a df       	rcall	.-492    	; 0xea2 <send_data_and_wait>
    108e:	80 91 b9 00 	lds	r24, 0x00B9
    1092:	88 7f       	andi	r24, 0xF8	; 248
    1094:	88 32       	cpi	r24, 0x28	; 40
    1096:	19 f0       	breq	.+6      	; 0x109e <TWI_send_command+0x5c>
    1098:	f4 de       	rcall	.-536    	; 0xe82 <Error>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	16 c0       	rjmp	.+44     	; 0x10ca <TWI_send_command+0x88>
    109e:	8d 2f       	mov	r24, r29
    10a0:	00 df       	rcall	.-512    	; 0xea2 <send_data_and_wait>
    10a2:	80 91 b9 00 	lds	r24, 0x00B9
    10a6:	88 7f       	andi	r24, 0xF8	; 248
    10a8:	88 32       	cpi	r24, 0x28	; 40
    10aa:	19 f0       	breq	.+6      	; 0x10b2 <TWI_send_command+0x70>
    10ac:	ea de       	rcall	.-556    	; 0xe82 <Error>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0c c0       	rjmp	.+24     	; 0x10ca <TWI_send_command+0x88>
    10b2:	81 2f       	mov	r24, r17
    10b4:	f6 de       	rcall	.-532    	; 0xea2 <send_data_and_wait>
    10b6:	80 91 b9 00 	lds	r24, 0x00B9
    10ba:	88 7f       	andi	r24, 0xF8	; 248
    10bc:	88 32       	cpi	r24, 0x28	; 40
    10be:	19 f0       	breq	.+6      	; 0x10c6 <TWI_send_command+0x84>
    10c0:	e0 de       	rcall	.-576    	; 0xe82 <Error>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <TWI_send_command+0x88>
    10c6:	d9 de       	rcall	.-590    	; 0xe7a <stop_bus>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	08 95       	ret

000010d2 <TWI_send_string>:
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	c8 2f       	mov	r28, r24
    10e0:	e6 2e       	mov	r14, r22
    10e2:	f7 2e       	mov	r15, r23
    10e4:	c6 de       	rcall	.-628    	; 0xe72 <start_bus>
    10e6:	d7 de       	rcall	.-594    	; 0xe96 <wait_for_bus>
    10e8:	90 91 b9 00 	lds	r25, 0x00B9
    10ec:	98 7f       	andi	r25, 0xF8	; 248
    10ee:	98 30       	cpi	r25, 0x08	; 8
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <TWI_send_string+0x26>
    10f2:	c7 de       	rcall	.-626    	; 0xe82 <Error>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	2c c0       	rjmp	.+88     	; 0x1150 <TWI_send_string+0x7e>
    10f8:	8c 2f       	mov	r24, r28
    10fa:	d3 de       	rcall	.-602    	; 0xea2 <send_data_and_wait>
    10fc:	80 91 b9 00 	lds	r24, 0x00B9
    1100:	88 7f       	andi	r24, 0xF8	; 248
    1102:	88 31       	cpi	r24, 0x18	; 24
    1104:	19 f0       	breq	.+6      	; 0x110c <TWI_send_string+0x3a>
    1106:	bd de       	rcall	.-646    	; 0xe82 <Error>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	22 c0       	rjmp	.+68     	; 0x1150 <TWI_send_string+0x7e>
    110c:	89 e1       	ldi	r24, 0x19	; 25
    110e:	c9 de       	rcall	.-622    	; 0xea2 <send_data_and_wait>
    1110:	80 91 b9 00 	lds	r24, 0x00B9
    1114:	88 7f       	andi	r24, 0xF8	; 248
    1116:	88 32       	cpi	r24, 0x28	; 40
    1118:	29 f4       	brne	.+10     	; 0x1124 <TWI_send_string+0x52>
    111a:	0e 2d       	mov	r16, r14
    111c:	1f 2d       	mov	r17, r15
    111e:	c0 e0       	ldi	r28, 0x00	; 0
    1120:	d0 e0       	ldi	r29, 0x00	; 0
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <TWI_send_string+0x62>
    1124:	ae de       	rcall	.-676    	; 0xe82 <Error>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	13 c0       	rjmp	.+38     	; 0x1150 <TWI_send_string+0x7e>
    112a:	f8 01       	movw	r30, r16
    112c:	81 91       	ld	r24, Z+
    112e:	8f 01       	movw	r16, r30
    1130:	b8 de       	rcall	.-656    	; 0xea2 <send_data_and_wait>
    1132:	21 96       	adiw	r28, 0x01	; 1
    1134:	ee 2d       	mov	r30, r14
    1136:	ff 2d       	mov	r31, r15
    1138:	df 01       	movw	r26, r30
    113a:	0d 90       	ld	r0, X+
    113c:	00 20       	and	r0, r0
    113e:	e9 f7       	brne	.-6      	; 0x113a <TWI_send_string+0x68>
    1140:	11 97       	sbiw	r26, 0x01	; 1
    1142:	ae 1b       	sub	r26, r30
    1144:	bf 0b       	sbc	r27, r31
    1146:	ca 17       	cp	r28, r26
    1148:	db 07       	cpc	r29, r27
    114a:	78 f3       	brcs	.-34     	; 0x112a <TWI_send_string+0x58>
    114c:	96 de       	rcall	.-724    	; 0xe7a <stop_bus>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	08 95       	ret

0000115e <TWI_send_string_fixed_length>:
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	c8 2f       	mov	r28, r24
    116c:	e6 2e       	mov	r14, r22
    116e:	f7 2e       	mov	r15, r23
    1170:	8a 01       	movw	r16, r20
    1172:	7f de       	rcall	.-770    	; 0xe72 <start_bus>
    1174:	90 de       	rcall	.-736    	; 0xe96 <wait_for_bus>
    1176:	90 91 b9 00 	lds	r25, 0x00B9
    117a:	98 7f       	andi	r25, 0xF8	; 248
    117c:	98 30       	cpi	r25, 0x08	; 8
    117e:	19 f0       	breq	.+6      	; 0x1186 <TWI_send_string_fixed_length+0x28>
    1180:	80 de       	rcall	.-768    	; 0xe82 <Error>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	23 c0       	rjmp	.+70     	; 0x11cc <TWI_send_string_fixed_length+0x6e>
    1186:	8c 2f       	mov	r24, r28
    1188:	8c de       	rcall	.-744    	; 0xea2 <send_data_and_wait>
    118a:	80 91 b9 00 	lds	r24, 0x00B9
    118e:	88 7f       	andi	r24, 0xF8	; 248
    1190:	88 31       	cpi	r24, 0x18	; 24
    1192:	19 f0       	breq	.+6      	; 0x119a <TWI_send_string_fixed_length+0x3c>
    1194:	76 de       	rcall	.-788    	; 0xe82 <Error>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	19 c0       	rjmp	.+50     	; 0x11cc <TWI_send_string_fixed_length+0x6e>
    119a:	89 e1       	ldi	r24, 0x19	; 25
    119c:	82 de       	rcall	.-764    	; 0xea2 <send_data_and_wait>
    119e:	80 91 b9 00 	lds	r24, 0x00B9
    11a2:	88 7f       	andi	r24, 0xF8	; 248
    11a4:	88 32       	cpi	r24, 0x28	; 40
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <TWI_send_string_fixed_length+0x52>
    11a8:	10 16       	cp	r1, r16
    11aa:	11 06       	cpc	r1, r17
    11ac:	24 f0       	brlt	.+8      	; 0x11b6 <TWI_send_string_fixed_length+0x58>
    11ae:	0c c0       	rjmp	.+24     	; 0x11c8 <TWI_send_string_fixed_length+0x6a>
    11b0:	68 de       	rcall	.-816    	; 0xe82 <Error>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	0b c0       	rjmp	.+22     	; 0x11cc <TWI_send_string_fixed_length+0x6e>
    11b6:	ce 2d       	mov	r28, r14
    11b8:	df 2d       	mov	r29, r15
    11ba:	0c 0f       	add	r16, r28
    11bc:	1d 1f       	adc	r17, r29
    11be:	89 91       	ld	r24, Y+
    11c0:	70 de       	rcall	.-800    	; 0xea2 <send_data_and_wait>
    11c2:	c0 17       	cp	r28, r16
    11c4:	d1 07       	cpc	r29, r17
    11c6:	d9 f7       	brne	.-10     	; 0x11be <TWI_send_string_fixed_length+0x60>
    11c8:	58 de       	rcall	.-848    	; 0xe7a <stop_bus>
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	08 95       	ret

000011da <TWI_send_float>:
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <TWI_send_float+0xe>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <TWI_send_float+0x10>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	18 2f       	mov	r17, r24
    11f0:	49 83       	std	Y+1, r20	; 0x01
    11f2:	5a 83       	std	Y+2, r21	; 0x02
    11f4:	6b 83       	std	Y+3, r22	; 0x03
    11f6:	7c 83       	std	Y+4, r23	; 0x04
    11f8:	3c de       	rcall	.-904    	; 0xe72 <start_bus>
    11fa:	4d de       	rcall	.-870    	; 0xe96 <wait_for_bus>
    11fc:	90 91 b9 00 	lds	r25, 0x00B9
    1200:	98 7f       	andi	r25, 0xF8	; 248
    1202:	98 30       	cpi	r25, 0x08	; 8
    1204:	19 f0       	breq	.+6      	; 0x120c <TWI_send_float+0x32>
    1206:	3d de       	rcall	.-902    	; 0xe82 <Error>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	24 c0       	rjmp	.+72     	; 0x1254 <TWI_send_float+0x7a>
    120c:	81 2f       	mov	r24, r17
    120e:	49 de       	rcall	.-878    	; 0xea2 <send_data_and_wait>
    1210:	80 91 b9 00 	lds	r24, 0x00B9
    1214:	88 7f       	andi	r24, 0xF8	; 248
    1216:	88 31       	cpi	r24, 0x18	; 24
    1218:	19 f0       	breq	.+6      	; 0x1220 <TWI_send_float+0x46>
    121a:	33 de       	rcall	.-922    	; 0xe82 <Error>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	1a c0       	rjmp	.+52     	; 0x1254 <TWI_send_float+0x7a>
    1220:	86 e0       	ldi	r24, 0x06	; 6
    1222:	3f de       	rcall	.-898    	; 0xea2 <send_data_and_wait>
    1224:	80 91 b9 00 	lds	r24, 0x00B9
    1228:	88 7f       	andi	r24, 0xF8	; 248
    122a:	88 32       	cpi	r24, 0x28	; 40
    122c:	19 f0       	breq	.+6      	; 0x1234 <TWI_send_float+0x5a>
    122e:	29 de       	rcall	.-942    	; 0xe82 <Error>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	10 c0       	rjmp	.+32     	; 0x1254 <TWI_send_float+0x7a>
    1234:	8e 01       	movw	r16, r28
    1236:	0f 5f       	subi	r16, 0xFF	; 255
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	7e 01       	movw	r14, r28
    123c:	85 e0       	ldi	r24, 0x05	; 5
    123e:	e8 0e       	add	r14, r24
    1240:	f1 1c       	adc	r15, r1
    1242:	f8 01       	movw	r30, r16
    1244:	81 91       	ld	r24, Z+
    1246:	8f 01       	movw	r16, r30
    1248:	2c de       	rcall	.-936    	; 0xea2 <send_data_and_wait>
    124a:	0e 15       	cp	r16, r14
    124c:	1f 05       	cpc	r17, r15
    124e:	c9 f7       	brne	.-14     	; 0x1242 <TWI_send_float+0x68>
    1250:	14 de       	rcall	.-984    	; 0xe7a <stop_bus>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	08 95       	ret

0000126a <TWI_get_command>:
    126a:	83 5f       	subi	r24, 0xF3	; 243
    126c:	9b 4e       	sbci	r25, 0xEB	; 235
    126e:	fc 01       	movw	r30, r24
    1270:	80 81       	ld	r24, Z
    1272:	08 95       	ret

00001274 <TWI_get_sensor>:
    1274:	81 5d       	subi	r24, 0xD1	; 209
    1276:	9a 4e       	sbci	r25, 0xEA	; 234
    1278:	fc 01       	movw	r30, r24
    127a:	80 81       	ld	r24, Z
    127c:	08 95       	ret

0000127e <TWI_get_control_setting>:
    127e:	8e 5e       	subi	r24, 0xEE	; 238
    1280:	9a 4e       	sbci	r25, 0xEA	; 234
    1282:	fc 01       	movw	r30, r24
    1284:	80 81       	ld	r24, Z
    1286:	08 95       	ret

00001288 <TWI_get_autonom_settings>:
    1288:	80 91 10 14 	lds	r24, 0x1410
    128c:	08 95       	ret

0000128e <TWI_get_elevation>:
    128e:	80 91 1d 15 	lds	r24, 0x151D
    1292:	08 95       	ret

00001294 <TWI_command_flag>:
    1294:	80 91 c3 13 	lds	r24, 0x13C3
    1298:	88 23       	and	r24, r24
    129a:	21 f0       	breq	.+8      	; 0x12a4 <TWI_command_flag+0x10>
    129c:	10 92 c3 13 	sts	0x13C3, r1
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	08 95       	ret
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	08 95       	ret

000012a8 <TWI_control_settings_flag>:
    12a8:	80 91 c2 13 	lds	r24, 0x13C2
    12ac:	88 23       	and	r24, r24
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <TWI_control_settings_flag+0x10>
    12b0:	10 92 c2 13 	sts	0x13C2, r1
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	08 95       	ret
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	08 95       	ret

000012bc <TWI_autonom_settings_flag>:
    12bc:	80 91 c1 13 	lds	r24, 0x13C1
    12c0:	88 23       	and	r24, r24
    12c2:	21 f0       	breq	.+8      	; 0x12cc <TWI_autonom_settings_flag+0x10>
    12c4:	10 92 c1 13 	sts	0x13C1, r1
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	08 95       	ret
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	08 95       	ret

000012d0 <TWI_elevation_flag>:
    12d0:	80 91 c0 13 	lds	r24, 0x13C0
    12d4:	88 23       	and	r24, r24
    12d6:	21 f0       	breq	.+8      	; 0x12e0 <TWI_elevation_flag+0x10>
    12d8:	10 92 c0 13 	sts	0x13C0, r1
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	08 95       	ret
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	08 95       	ret

000012e4 <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	d8 2f       	mov	r29, r24
    12ee:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
    12f0:	60 91 20 15 	lds	r22, 0x1520
    12f4:	80 91 09 01 	lds	r24, 0x0109
    12f8:	90 91 0a 01 	lds	r25, 0x010A
    12fc:	b6 d8       	rcall	.-3732   	; 0x46a <FifoWrite>
    12fe:	81 11       	cpse	r24, r1
    1300:	1f c0       	rjmp	.+62     	; 0x1340 <write_to_TwiFIFO+0x5c>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    1302:	20 91 20 15 	lds	r18, 0x1520
    1306:	30 91 21 15 	lds	r19, 0x1521
    130a:	12 16       	cp	r1, r18
    130c:	13 06       	cpc	r1, r19
    130e:	d4 f4       	brge	.+52     	; 0x1344 <write_to_TwiFIFO+0x60>
    1310:	0d 2f       	mov	r16, r29
    1312:	1c 2f       	mov	r17, r28
    1314:	c0 e0       	ldi	r28, 0x00	; 0
    1316:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    1318:	f8 01       	movw	r30, r16
    131a:	61 91       	ld	r22, Z+
    131c:	8f 01       	movw	r16, r30
    131e:	80 91 09 01 	lds	r24, 0x0109
    1322:	90 91 0a 01 	lds	r25, 0x010A
    1326:	a1 d8       	rcall	.-3774   	; 0x46a <FifoWrite>
    1328:	81 11       	cpse	r24, r1
    132a:	0e c0       	rjmp	.+28     	; 0x1348 <write_to_TwiFIFO+0x64>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    132c:	21 96       	adiw	r28, 0x01	; 1
    132e:	80 91 20 15 	lds	r24, 0x1520
    1332:	90 91 21 15 	lds	r25, 0x1521
    1336:	c8 17       	cp	r28, r24
    1338:	d9 07       	cpc	r29, r25
    133a:	74 f3       	brlt	.-36     	; 0x1318 <write_to_TwiFIFO+0x34>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	05 c0       	rjmp	.+10     	; 0x134a <write_to_TwiFIFO+0x66>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//Can't add length!?
		return 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	03 c0       	rjmp	.+6      	; 0x134a <write_to_TwiFIFO+0x66>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	01 c0       	rjmp	.+2      	; 0x134a <write_to_TwiFIFO+0x66>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//Can't add chars!?
			return 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <__vector_26>:

//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	0f 92       	push	r0
    135c:	11 24       	eor	r1, r1
    135e:	0b b6       	in	r0, 0x3b	; 59
    1360:	0f 92       	push	r0
    1362:	2f 93       	push	r18
    1364:	3f 93       	push	r19
    1366:	4f 93       	push	r20
    1368:	5f 93       	push	r21
    136a:	6f 93       	push	r22
    136c:	7f 93       	push	r23
    136e:	8f 93       	push	r24
    1370:	9f 93       	push	r25
    1372:	af 93       	push	r26
    1374:	bf 93       	push	r27
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
	switch(myAdress)
    137e:	80 91 17 15 	lds	r24, 0x1517
    1382:	80 34       	cpi	r24, 0x40	; 64
    1384:	09 f4       	brne	.+2      	; 0x1388 <__vector_26+0x34>
    1386:	87 c0       	rjmp	.+270    	; 0x1496 <__vector_26+0x142>
    1388:	80 38       	cpi	r24, 0x80	; 128
    138a:	21 f0       	breq	.+8      	; 0x1394 <__vector_26+0x40>
    138c:	80 32       	cpi	r24, 0x20	; 32
    138e:	09 f0       	breq	.+2      	; 0x1392 <__vector_26+0x3e>
    1390:	57 c1       	rjmp	.+686    	; 0x1640 <__vector_26+0x2ec>
    1392:	c9 c0       	rjmp	.+402    	; 0x1526 <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1394:	80 91 b9 00 	lds	r24, 0x00B9
    1398:	88 7f       	andi	r24, 0xF8	; 248
    139a:	80 36       	cpi	r24, 0x60	; 96
    139c:	29 f0       	breq	.+10     	; 0x13a8 <__vector_26+0x54>
    139e:	80 91 b9 00 	lds	r24, 0x00B9
    13a2:	88 7f       	andi	r24, 0xF8	; 248
    13a4:	88 36       	cpi	r24, 0x68	; 104
    13a6:	21 f4       	brne	.+8      	; 0x13b0 <__vector_26+0x5c>
			{
				instruction = 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 1a 15 	sts	0x151A, r24
    13ae:	71 c0       	rjmp	.+226    	; 0x1492 <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    13b0:	80 91 b9 00 	lds	r24, 0x00B9
    13b4:	88 7f       	andi	r24, 0xF8	; 248
    13b6:	80 37       	cpi	r24, 0x70	; 112
    13b8:	29 f0       	breq	.+10     	; 0x13c4 <__vector_26+0x70>
    13ba:	80 91 b9 00 	lds	r24, 0x00B9
    13be:	88 7f       	andi	r24, 0xF8	; 248
    13c0:	88 37       	cpi	r24, 0x78	; 120
    13c2:	39 f4       	brne	.+14     	; 0x13d2 <__vector_26+0x7e>
			{
				currentInstruction = 255;
    13c4:	8f ef       	ldi	r24, 0xFF	; 255
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	90 93 24 15 	sts	0x1524, r25
    13cc:	80 93 23 15 	sts	0x1523, r24
    13d0:	60 c0       	rjmp	.+192    	; 0x1492 <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    13d2:	80 91 b9 00 	lds	r24, 0x00B9
    13d6:	88 7f       	andi	r24, 0xF8	; 248
    13d8:	80 38       	cpi	r24, 0x80	; 128
    13da:	b9 f5       	brne	.+110    	; 0x144a <__vector_26+0xf6>
			{
				if(instruction)
    13dc:	80 91 1a 15 	lds	r24, 0x151A
    13e0:	88 23       	and	r24, r24
    13e2:	41 f0       	breq	.+16     	; 0x13f4 <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    13e4:	55 dd       	rcall	.-1366   	; 0xe90 <get_data>
    13e6:	80 93 23 15 	sts	0x1523, r24
    13ea:	10 92 24 15 	sts	0x1524, r1
					instruction = 0;
    13ee:	10 92 1a 15 	sts	0x151A, r1
    13f2:	4f c0       	rjmp	.+158    	; 0x1492 <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    13f4:	80 91 23 15 	lds	r24, 0x1523
    13f8:	90 91 24 15 	lds	r25, 0x1524
    13fc:	85 30       	cpi	r24, 0x05	; 5
    13fe:	91 05       	cpc	r25, r1
    1400:	71 f0       	breq	.+28     	; 0x141e <__vector_26+0xca>
    1402:	24 f4       	brge	.+8      	; 0x140c <__vector_26+0xb8>
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	09 f0       	breq	.+2      	; 0x140a <__vector_26+0xb6>
    1408:	44 c0       	rjmp	.+136    	; 0x1492 <__vector_26+0x13e>
    140a:	07 c0       	rjmp	.+14     	; 0x141a <__vector_26+0xc6>
    140c:	86 30       	cpi	r24, 0x06	; 6
    140e:	91 05       	cpc	r25, r1
    1410:	51 f0       	breq	.+20     	; 0x1426 <__vector_26+0xd2>
    1412:	49 97       	sbiw	r24, 0x19	; 25
    1414:	09 f0       	breq	.+2      	; 0x1418 <__vector_26+0xc4>
    1416:	3d c0       	rjmp	.+122    	; 0x1492 <__vector_26+0x13e>
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    141a:	64 dd       	rcall	.-1336   	; 0xee4 <get_control_settings_from_bus>
							break;
    141c:	3a c0       	rjmp	.+116    	; 0x1492 <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    141e:	73 dd       	rcall	.-1306   	; 0xf06 <get_autonom_settings_from_bus>
							break;
    1420:	38 c0       	rjmp	.+112    	; 0x1492 <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    1422:	75 dd       	rcall	.-1302   	; 0xf0e <get_char_from_bus>
							break;
    1424:	36 c0       	rjmp	.+108    	; 0x1492 <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    1426:	c0 91 18 15 	lds	r28, 0x1518
    142a:	d0 91 19 15 	lds	r29, 0x1519
    142e:	30 dd       	rcall	.-1440   	; 0xe90 <get_data>
    1430:	c7 5f       	subi	r28, 0xF7	; 247
    1432:	db 4e       	sbci	r29, 0xEB	; 235
    1434:	88 83       	st	Y, r24
	floatCounter += 1;
    1436:	80 91 18 15 	lds	r24, 0x1518
    143a:	90 91 19 15 	lds	r25, 0x1519
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	90 93 19 15 	sts	0x1519, r25
    1444:	80 93 18 15 	sts	0x1518, r24
    1448:	24 c0       	rjmp	.+72     	; 0x1492 <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    144a:	80 91 b9 00 	lds	r24, 0x00B9
    144e:	88 7f       	andi	r24, 0xF8	; 248
    1450:	80 39       	cpi	r24, 0x90	; 144
    1452:	11 f4       	brne	.+4      	; 0x1458 <__vector_26+0x104>
			{
				get_sensor_from_bus();
    1454:	76 dd       	rcall	.-1300   	; 0xf42 <get_sensor_from_bus>
    1456:	1d c0       	rjmp	.+58     	; 0x1492 <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    1458:	80 91 b9 00 	lds	r24, 0x00B9
    145c:	88 7f       	andi	r24, 0xF8	; 248
    145e:	80 3a       	cpi	r24, 0xA0	; 160
    1460:	c1 f4       	brne	.+48     	; 0x1492 <__vector_26+0x13e>
			{
				stop_twi();
    1462:	25 dd       	rcall	.-1462   	; 0xeae <stop_twi>
				switch(currentInstruction)
    1464:	80 91 23 15 	lds	r24, 0x1523
    1468:	90 91 24 15 	lds	r25, 0x1524
    146c:	85 30       	cpi	r24, 0x05	; 5
    146e:	91 05       	cpc	r25, r1
    1470:	49 f0       	breq	.+18     	; 0x1484 <__vector_26+0x130>
    1472:	89 31       	cpi	r24, 0x19	; 25
    1474:	91 05       	cpc	r25, r1
    1476:	51 f0       	breq	.+20     	; 0x148c <__vector_26+0x138>
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	59 f4       	brne	.+22     	; 0x1492 <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 93 c2 13 	sts	0x13C2, r24
						break;
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	80 93 c1 13 	sts	0x13C1, r24
						break;
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    148c:	81 e1       	ldi	r24, 0x11	; 17
    148e:	94 e1       	ldi	r25, 0x14	; 20
    1490:	29 df       	rcall	.-430    	; 0x12e4 <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    1492:	22 dd       	rcall	.-1468   	; 0xed8 <reset_TWI>
			break;
    1494:	d5 c0       	rjmp	.+426    	; 0x1640 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1496:	80 91 b9 00 	lds	r24, 0x00B9
    149a:	88 7f       	andi	r24, 0xF8	; 248
    149c:	80 36       	cpi	r24, 0x60	; 96
    149e:	29 f0       	breq	.+10     	; 0x14aa <__vector_26+0x156>
    14a0:	80 91 b9 00 	lds	r24, 0x00B9
    14a4:	88 7f       	andi	r24, 0xF8	; 248
    14a6:	88 36       	cpi	r24, 0x68	; 104
    14a8:	21 f4       	brne	.+8      	; 0x14b2 <__vector_26+0x15e>
			{
				instruction = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	80 93 1a 15 	sts	0x151A, r24
    14b0:	38 c0       	rjmp	.+112    	; 0x1522 <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    14b2:	80 91 b9 00 	lds	r24, 0x00B9
    14b6:	88 7f       	andi	r24, 0xF8	; 248
    14b8:	80 38       	cpi	r24, 0x80	; 128
    14ba:	e1 f4       	brne	.+56     	; 0x14f4 <__vector_26+0x1a0>
			{
				if(instruction)
    14bc:	80 91 1a 15 	lds	r24, 0x151A
    14c0:	88 23       	and	r24, r24
    14c2:	41 f0       	breq	.+16     	; 0x14d4 <__vector_26+0x180>
				{
					currentInstruction = get_data();
    14c4:	e5 dc       	rcall	.-1590   	; 0xe90 <get_data>
    14c6:	80 93 23 15 	sts	0x1523, r24
    14ca:	10 92 24 15 	sts	0x1524, r1
					instruction = 0;
    14ce:	10 92 1a 15 	sts	0x151A, r1
    14d2:	27 c0       	rjmp	.+78     	; 0x1522 <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    14d4:	80 91 23 15 	lds	r24, 0x1523
    14d8:	90 91 24 15 	lds	r25, 0x1524
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	91 05       	cpc	r25, r1
    14e0:	19 f0       	breq	.+6      	; 0x14e8 <__vector_26+0x194>
    14e2:	49 97       	sbiw	r24, 0x19	; 25
    14e4:	f1 f4       	brne	.+60     	; 0x1522 <__vector_26+0x1ce>
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    14e8:	d3 dc       	rcall	.-1626   	; 0xe90 <get_data>
    14ea:	80 93 22 15 	sts	0x1522, r24
    14ee:	19 c0       	rjmp	.+50     	; 0x1522 <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    14f0:	0e dd       	rcall	.-1508   	; 0xf0e <get_char_from_bus>
							break;
    14f2:	17 c0       	rjmp	.+46     	; 0x1522 <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    14f4:	80 91 b9 00 	lds	r24, 0x00B9
    14f8:	88 7f       	andi	r24, 0xF8	; 248
    14fa:	80 3a       	cpi	r24, 0xA0	; 160
    14fc:	91 f4       	brne	.+36     	; 0x1522 <__vector_26+0x1ce>
			{
				stop_twi();
    14fe:	d7 dc       	rcall	.-1618   	; 0xeae <stop_twi>
				switch(currentInstruction)
    1500:	80 91 23 15 	lds	r24, 0x1523
    1504:	90 91 24 15 	lds	r25, 0x1524
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	91 05       	cpc	r25, r1
    150c:	19 f0       	breq	.+6      	; 0x1514 <__vector_26+0x1c0>
    150e:	49 97       	sbiw	r24, 0x19	; 25
    1510:	41 f4       	brne	.+16     	; 0x1522 <__vector_26+0x1ce>
    1512:	04 c0       	rjmp	.+8      	; 0x151c <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	80 93 bf 13 	sts	0x13BF, r24
						break;
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    151c:	81 e1       	ldi	r24, 0x11	; 17
    151e:	94 e1       	ldi	r25, 0x14	; 20
    1520:	e1 de       	rcall	.-574    	; 0x12e4 <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    1522:	da dc       	rcall	.-1612   	; 0xed8 <reset_TWI>
			break;
    1524:	8d c0       	rjmp	.+282    	; 0x1640 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1526:	80 91 b9 00 	lds	r24, 0x00B9
    152a:	88 7f       	andi	r24, 0xF8	; 248
    152c:	80 36       	cpi	r24, 0x60	; 96
    152e:	29 f0       	breq	.+10     	; 0x153a <__vector_26+0x1e6>
    1530:	80 91 b9 00 	lds	r24, 0x00B9
    1534:	88 7f       	andi	r24, 0xF8	; 248
    1536:	88 36       	cpi	r24, 0x68	; 104
    1538:	21 f4       	brne	.+8      	; 0x1542 <__vector_26+0x1ee>
			{
				instruction = 1;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	80 93 1a 15 	sts	0x151A, r24
    1540:	7e c0       	rjmp	.+252    	; 0x163e <__vector_26+0x2ea>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1542:	80 91 b9 00 	lds	r24, 0x00B9
    1546:	88 7f       	andi	r24, 0xF8	; 248
    1548:	80 37       	cpi	r24, 0x70	; 112
    154a:	29 f0       	breq	.+10     	; 0x1556 <__vector_26+0x202>
    154c:	80 91 b9 00 	lds	r24, 0x00B9
    1550:	88 7f       	andi	r24, 0xF8	; 248
    1552:	88 37       	cpi	r24, 0x78	; 120
    1554:	39 f4       	brne	.+14     	; 0x1564 <__vector_26+0x210>
			{
				currentInstruction = 255;
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	90 93 24 15 	sts	0x1524, r25
    155e:	80 93 23 15 	sts	0x1523, r24
    1562:	6d c0       	rjmp	.+218    	; 0x163e <__vector_26+0x2ea>
			}
			else if(CONTROL == DATA_SLAW)
    1564:	80 91 b9 00 	lds	r24, 0x00B9
    1568:	88 7f       	andi	r24, 0xF8	; 248
    156a:	80 38       	cpi	r24, 0x80	; 128
    156c:	09 f0       	breq	.+2      	; 0x1570 <__vector_26+0x21c>
    156e:	3a c0       	rjmp	.+116    	; 0x15e4 <__vector_26+0x290>
			{
				if(instruction)
    1570:	80 91 1a 15 	lds	r24, 0x151A
    1574:	88 23       	and	r24, r24
    1576:	41 f0       	breq	.+16     	; 0x1588 <__vector_26+0x234>
				{
					currentInstruction = get_data();
    1578:	8b dc       	rcall	.-1770   	; 0xe90 <get_data>
    157a:	80 93 23 15 	sts	0x1523, r24
    157e:	10 92 24 15 	sts	0x1524, r1
					instruction = 0;
    1582:	10 92 1a 15 	sts	0x151A, r1
    1586:	5b c0       	rjmp	.+182    	; 0x163e <__vector_26+0x2ea>
				}
				else
				{
					switch(currentInstruction)
    1588:	80 91 23 15 	lds	r24, 0x1523
    158c:	90 91 24 15 	lds	r25, 0x1524
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	19 f1       	breq	.+70     	; 0x15dc <__vector_26+0x288>
    1596:	1c f4       	brge	.+6      	; 0x159e <__vector_26+0x24a>
    1598:	89 2b       	or	r24, r25
    159a:	41 f0       	breq	.+16     	; 0x15ac <__vector_26+0x258>
    159c:	50 c0       	rjmp	.+160    	; 0x163e <__vector_26+0x2ea>
    159e:	84 30       	cpi	r24, 0x04	; 4
    15a0:	91 05       	cpc	r25, r1
    15a2:	b1 f0       	breq	.+44     	; 0x15d0 <__vector_26+0x27c>
    15a4:	05 97       	sbiw	r24, 0x05	; 5
    15a6:	09 f0       	breq	.+2      	; 0x15aa <__vector_26+0x256>
    15a8:	4a c0       	rjmp	.+148    	; 0x163e <__vector_26+0x2ea>
    15aa:	1a c0       	rjmp	.+52     	; 0x15e0 <__vector_26+0x28c>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    15ac:	c0 91 1b 15 	lds	r28, 0x151B
    15b0:	d0 91 1c 15 	lds	r29, 0x151C
    15b4:	6d dc       	rcall	.-1830   	; 0xe90 <get_data>
    15b6:	c3 5f       	subi	r28, 0xF3	; 243
    15b8:	db 4e       	sbci	r29, 0xEB	; 235
    15ba:	88 83       	st	Y, r24
	currentCommand += 1;
    15bc:	80 91 1b 15 	lds	r24, 0x151B
    15c0:	90 91 1c 15 	lds	r25, 0x151C
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	90 93 1c 15 	sts	0x151C, r25
    15ca:	80 93 1b 15 	sts	0x151B, r24
    15ce:	37 c0       	rjmp	.+110    	; 0x163e <__vector_26+0x2ea>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation = get_data();
    15d0:	5f dc       	rcall	.-1858   	; 0xe90 <get_data>
    15d2:	80 93 1d 15 	sts	0x151D, r24
    15d6:	10 92 1e 15 	sts	0x151E, r1
    15da:	31 c0       	rjmp	.+98     	; 0x163e <__vector_26+0x2ea>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    15dc:	83 dc       	rcall	.-1786   	; 0xee4 <get_control_settings_from_bus>
							break;
    15de:	2f c0       	rjmp	.+94     	; 0x163e <__vector_26+0x2ea>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    15e0:	92 dc       	rcall	.-1756   	; 0xf06 <get_autonom_settings_from_bus>
							break;
    15e2:	2d c0       	rjmp	.+90     	; 0x163e <__vector_26+0x2ea>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    15e4:	80 91 b9 00 	lds	r24, 0x00B9
    15e8:	88 7f       	andi	r24, 0xF8	; 248
    15ea:	80 39       	cpi	r24, 0x90	; 144
    15ec:	11 f4       	brne	.+4      	; 0x15f2 <__vector_26+0x29e>
			{
				get_sensor_from_bus();
    15ee:	a9 dc       	rcall	.-1710   	; 0xf42 <get_sensor_from_bus>
    15f0:	26 c0       	rjmp	.+76     	; 0x163e <__vector_26+0x2ea>
			}
			else if (CONTROL == STOP)
    15f2:	80 91 b9 00 	lds	r24, 0x00B9
    15f6:	88 7f       	andi	r24, 0xF8	; 248
    15f8:	80 3a       	cpi	r24, 0xA0	; 160
    15fa:	09 f5       	brne	.+66     	; 0x163e <__vector_26+0x2ea>
			{
				stop_twi();
    15fc:	58 dc       	rcall	.-1872   	; 0xeae <stop_twi>
				switch(currentInstruction)
    15fe:	80 91 23 15 	lds	r24, 0x1523
    1602:	90 91 24 15 	lds	r25, 0x1524
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	91 05       	cpc	r25, r1
    160a:	91 f0       	breq	.+36     	; 0x1630 <__vector_26+0x2dc>
    160c:	1c f4       	brge	.+6      	; 0x1614 <__vector_26+0x2c0>
    160e:	89 2b       	or	r24, r25
    1610:	39 f0       	breq	.+14     	; 0x1620 <__vector_26+0x2cc>
    1612:	15 c0       	rjmp	.+42     	; 0x163e <__vector_26+0x2ea>
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	91 05       	cpc	r25, r1
    1618:	39 f0       	breq	.+14     	; 0x1628 <__vector_26+0x2d4>
    161a:	05 97       	sbiw	r24, 0x05	; 5
    161c:	81 f4       	brne	.+32     	; 0x163e <__vector_26+0x2ea>
    161e:	0c c0       	rjmp	.+24     	; 0x1638 <__vector_26+0x2e4>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 c3 13 	sts	0x13C3, r24
						break;
    1626:	0b c0       	rjmp	.+22     	; 0x163e <__vector_26+0x2ea>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	80 93 c0 13 	sts	0x13C0, r24
						break;
    162e:	07 c0       	rjmp	.+14     	; 0x163e <__vector_26+0x2ea>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 c2 13 	sts	0x13C2, r24
						break;
    1636:	03 c0       	rjmp	.+6      	; 0x163e <__vector_26+0x2ea>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	80 93 c1 13 	sts	0x13C1, r24
						break;
					}
				}
			}
			reset_TWI();
    163e:	4c dc       	rcall	.-1896   	; 0xed8 <reset_TWI>
			break;
		}
	}
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	bf 91       	pop	r27
    164a:	af 91       	pop	r26
    164c:	9f 91       	pop	r25
    164e:	8f 91       	pop	r24
    1650:	7f 91       	pop	r23
    1652:	6f 91       	pop	r22
    1654:	5f 91       	pop	r21
    1656:	4f 91       	pop	r20
    1658:	3f 91       	pop	r19
    165a:	2f 91       	pop	r18
    165c:	0f 90       	pop	r0
    165e:	0b be       	out	0x3b, r0	; 59
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	0f 90       	pop	r0
    1666:	1f 90       	pop	r1
    1668:	18 95       	reti

0000166a <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
    166a:	10 92 c5 00 	sts	0x00C5, r1
    166e:	87 e0       	ldi	r24, 0x07	; 7
    1670:	80 93 c4 00 	sts	0x00C4, r24
    1674:	88 e9       	ldi	r24, 0x98	; 152
    1676:	80 93 c1 00 	sts	0x00C1, r24
    167a:	86 e0       	ldi	r24, 0x06	; 6
    167c:	80 93 c2 00 	sts	0x00C2, r24
    1680:	08 95       	ret

00001682 <USART_set_twi_message_destination>:
    1682:	90 93 1b 11 	sts	0x111B, r25
    1686:	80 93 1a 11 	sts	0x111A, r24
    168a:	08 95       	ret

0000168c <USART_CheckTxReady>:
    168c:	80 91 c0 00 	lds	r24, 0x00C0
    1690:	80 72       	andi	r24, 0x20	; 32
    1692:	08 95       	ret

00001694 <USART_WriteByte>:
    1694:	cf 93       	push	r28
    1696:	c8 2f       	mov	r28, r24
    1698:	f9 df       	rcall	.-14     	; 0x168c <USART_CheckTxReady>
    169a:	88 23       	and	r24, r24
    169c:	e9 f3       	breq	.-6      	; 0x1698 <USART_WriteByte+0x4>
    169e:	c0 93 c6 00 	sts	0x00C6, r28
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <USART_crc16>:
    16a6:	cf 92       	push	r12
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	66 23       	and	r22, r22
    16b8:	09 f4       	brne	.+2      	; 0x16bc <USART_crc16+0x16>
    16ba:	3e c0       	rjmp	.+124    	; 0x1738 <USART_crc16+0x92>
    16bc:	06 2f       	mov	r16, r22
    16be:	10 e0       	ldi	r17, 0x00	; 0
    16c0:	4f ef       	ldi	r20, 0xFF	; 255
    16c2:	5f ef       	ldi	r21, 0xFF	; 255
    16c4:	ee ef       	ldi	r30, 0xFE	; 254
    16c6:	ff ef       	ldi	r31, 0xFF	; 255
    16c8:	c6 2e       	mov	r12, r22
    16ca:	d1 2c       	mov	r13, r1
    16cc:	e8 2e       	mov	r14, r24
    16ce:	f1 2c       	mov	r15, r1
    16d0:	c8 e0       	ldi	r28, 0x08	; 8
    16d2:	d0 e0       	ldi	r29, 0x00	; 0
    16d4:	ee 3f       	cpi	r30, 0xFE	; 254
    16d6:	6f ef       	ldi	r22, 0xFF	; 255
    16d8:	f6 07       	cpc	r31, r22
    16da:	19 f4       	brne	.+6      	; 0x16e2 <USART_crc16+0x3c>
    16dc:	8e 2d       	mov	r24, r14
    16de:	9f 2d       	mov	r25, r15
    16e0:	30 c0       	rjmp	.+96     	; 0x1742 <USART_crc16+0x9c>
    16e2:	ef 3f       	cpi	r30, 0xFF	; 255
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
    16e6:	f8 07       	cpc	r31, r24
    16e8:	19 f4       	brne	.+6      	; 0x16f0 <USART_crc16+0x4a>
    16ea:	8c 2d       	mov	r24, r12
    16ec:	9d 2d       	mov	r25, r13
    16ee:	29 c0       	rjmp	.+82     	; 0x1742 <USART_crc16+0x9c>
    16f0:	df 01       	movw	r26, r30
    16f2:	a4 5c       	subi	r26, 0xC4	; 196
    16f4:	b8 4e       	sbci	r27, 0xE8	; 232
    16f6:	8c 91       	ld	r24, X
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	23 c0       	rjmp	.+70     	; 0x1742 <USART_crc16+0x9c>
    16fc:	ba 01       	movw	r22, r20
    16fe:	68 27       	eor	r22, r24
    1700:	79 27       	eor	r23, r25
    1702:	60 ff       	sbrs	r22, 0
    1704:	07 c0       	rjmp	.+14     	; 0x1714 <USART_crc16+0x6e>
    1706:	56 95       	lsr	r21
    1708:	47 95       	ror	r20
    170a:	68 e0       	ldi	r22, 0x08	; 8
    170c:	46 27       	eor	r20, r22
    170e:	64 e8       	ldi	r22, 0x84	; 132
    1710:	56 27       	eor	r21, r22
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <USART_crc16+0x72>
    1714:	56 95       	lsr	r21
    1716:	47 95       	ror	r20
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	21 50       	subi	r18, 0x01	; 1
    171e:	31 09       	sbc	r19, r1
    1720:	69 f7       	brne	.-38     	; 0x16fc <USART_crc16+0x56>
    1722:	31 96       	adiw	r30, 0x01	; 1
    1724:	e0 17       	cp	r30, r16
    1726:	f1 07       	cpc	r31, r17
    1728:	a9 f6       	brne	.-86     	; 0x16d4 <USART_crc16+0x2e>
    172a:	9a 01       	movw	r18, r20
    172c:	20 95       	com	r18
    172e:	30 95       	com	r19
    1730:	32 27       	eor	r19, r18
    1732:	23 27       	eor	r18, r19
    1734:	32 27       	eor	r19, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <USART_crc16+0x96>
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	82 2f       	mov	r24, r18
    173e:	93 2f       	mov	r25, r19
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <USART_crc16+0xa0>
    1742:	9e 01       	movw	r18, r28
    1744:	db cf       	rjmp	.-74     	; 0x16fc <USART_crc16+0x56>
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	cf 90       	pop	r12
    1756:	08 95       	ret

00001758 <USART_SendPacket>:
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	9e e7       	ldi	r25, 0x7E	; 126
    1762:	90 93 3b 18 	sts	0x183B, r25
    1766:	80 93 3c 18 	sts	0x183C, r24
    176a:	60 93 3d 18 	sts	0x183D, r22
    176e:	26 2f       	mov	r18, r22
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	12 16       	cp	r1, r18
    1774:	13 06       	cpc	r1, r19
    1776:	4c f5       	brge	.+82     	; 0x17ca <USART_SendPacket+0x72>
    1778:	ec e3       	ldi	r30, 0x3C	; 60
    177a:	f7 e1       	ldi	r31, 0x17	; 23
    177c:	03 e0       	ldi	r16, 0x03	; 3
    177e:	10 e0       	ldi	r17, 0x00	; 0
    1780:	c0 e0       	ldi	r28, 0x00	; 0
    1782:	d0 e0       	ldi	r29, 0x00	; 0
    1784:	7d e7       	ldi	r23, 0x7D	; 125
    1786:	50 e2       	ldi	r21, 0x20	; 32
    1788:	90 81       	ld	r25, Z
    178a:	49 2f       	mov	r20, r25
    178c:	4d 57       	subi	r20, 0x7D	; 125
    178e:	42 30       	cpi	r20, 0x02	; 2
    1790:	80 f4       	brcc	.+32     	; 0x17b2 <USART_SendPacket+0x5a>
    1792:	d8 01       	movw	r26, r16
    1794:	a5 5c       	subi	r26, 0xC5	; 197
    1796:	b7 4e       	sbci	r27, 0xE7	; 231
    1798:	ac 0f       	add	r26, r28
    179a:	bd 1f       	adc	r27, r29
    179c:	7c 93       	st	X, r23
    179e:	0f 5f       	subi	r16, 0xFF	; 255
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	d8 01       	movw	r26, r16
    17a4:	a5 5c       	subi	r26, 0xC5	; 197
    17a6:	b7 4e       	sbci	r27, 0xE7	; 231
    17a8:	ac 0f       	add	r26, r28
    17aa:	bd 1f       	adc	r27, r29
    17ac:	95 27       	eor	r25, r21
    17ae:	9c 93       	st	X, r25
    17b0:	06 c0       	rjmp	.+12     	; 0x17be <USART_SendPacket+0x66>
    17b2:	d8 01       	movw	r26, r16
    17b4:	a5 5c       	subi	r26, 0xC5	; 197
    17b6:	b7 4e       	sbci	r27, 0xE7	; 231
    17b8:	ac 0f       	add	r26, r28
    17ba:	bd 1f       	adc	r27, r29
    17bc:	9c 93       	st	X, r25
    17be:	21 96       	adiw	r28, 0x01	; 1
    17c0:	31 96       	adiw	r30, 0x01	; 1
    17c2:	c2 17       	cp	r28, r18
    17c4:	d3 07       	cpc	r29, r19
    17c6:	01 f7       	brne	.-64     	; 0x1788 <USART_SendPacket+0x30>
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <USART_SendPacket+0x7a>
    17ca:	03 e0       	ldi	r16, 0x03	; 3
    17cc:	10 e0       	ldi	r17, 0x00	; 0
    17ce:	c0 e0       	ldi	r28, 0x00	; 0
    17d0:	d0 e0       	ldi	r29, 0x00	; 0
    17d2:	69 df       	rcall	.-302    	; 0x16a6 <USART_crc16>
    17d4:	f8 01       	movw	r30, r16
    17d6:	e5 5c       	subi	r30, 0xC5	; 197
    17d8:	f7 4e       	sbci	r31, 0xE7	; 231
    17da:	ec 0f       	add	r30, r28
    17dc:	fd 1f       	adc	r31, r29
    17de:	90 83       	st	Z, r25
    17e0:	81 83       	std	Z+1, r24	; 0x01
    17e2:	22 96       	adiw	r28, 0x02	; 2
    17e4:	0c 0f       	add	r16, r28
    17e6:	1d 1f       	adc	r17, r29
    17e8:	f8 01       	movw	r30, r16
    17ea:	e5 5c       	subi	r30, 0xC5	; 197
    17ec:	f7 4e       	sbci	r31, 0xE7	; 231
    17ee:	8e e7       	ldi	r24, 0x7E	; 126
    17f0:	80 83       	st	Z, r24
    17f2:	c8 01       	movw	r24, r16
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	18 16       	cp	r1, r24
    17f8:	19 06       	cpc	r1, r25
    17fa:	4c f4       	brge	.+18     	; 0x180e <USART_SendPacket+0xb6>
    17fc:	cb e3       	ldi	r28, 0x3B	; 59
    17fe:	d8 e1       	ldi	r29, 0x18	; 24
    1800:	04 5c       	subi	r16, 0xC4	; 196
    1802:	17 4e       	sbci	r17, 0xE7	; 231
    1804:	89 91       	ld	r24, Y+
    1806:	46 df       	rcall	.-372    	; 0x1694 <USART_WriteByte>
    1808:	c0 17       	cp	r28, r16
    180a:	d1 07       	cpc	r29, r17
    180c:	d9 f7       	brne	.-10     	; 0x1804 <USART_SendPacket+0xac>
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	08 95       	ret

00001818 <USART_SendCommand>:
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	26 dd       	rcall	.-1460   	; 0x126a <TWI_get_command>
    181e:	80 93 3c 17 	sts	0x173C, r24
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	21 dd       	rcall	.-1470   	; 0x126a <TWI_get_command>
    1828:	80 93 3d 17 	sts	0x173D, r24
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	1c dd       	rcall	.-1480   	; 0x126a <TWI_get_command>
    1832:	80 93 3e 17 	sts	0x173E, r24
    1836:	63 e0       	ldi	r22, 0x03	; 3
    1838:	83 e4       	ldi	r24, 0x43	; 67
    183a:	8e cf       	rjmp	.-228    	; 0x1758 <USART_SendPacket>

0000183c <USART_SendElevation>:
    183c:	28 dd       	rcall	.-1456   	; 0x128e <TWI_get_elevation>
    183e:	80 93 3c 17 	sts	0x173C, r24
    1842:	61 e0       	ldi	r22, 0x01	; 1
    1844:	85 e4       	ldi	r24, 0x45	; 69
    1846:	88 cf       	rjmp	.-240    	; 0x1758 <USART_SendPacket>

00001848 <USART_SendTurn>:
    1848:	90 93 3c 17 	sts	0x173C, r25
    184c:	80 93 3d 17 	sts	0x173D, r24
    1850:	60 93 3e 17 	sts	0x173E, r22
    1854:	63 e0       	ldi	r22, 0x03	; 3
    1856:	84 e5       	ldi	r24, 0x54	; 84
    1858:	7f cf       	rjmp	.-258    	; 0x1758 <USART_SendPacket>

0000185a <USART_SendClimb>:
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	88 e4       	ldi	r24, 0x48	; 72
    185e:	7c cf       	rjmp	.-264    	; 0x1758 <USART_SendPacket>

00001860 <USART_DecodeMessageRxFIFO>:
    1860:	8f 92       	push	r8
    1862:	9f 92       	push	r9
    1864:	af 92       	push	r10
    1866:	bf 92       	push	r11
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	ad b6       	in	r10, 0x3d	; 61
    187e:	be b6       	in	r11, 0x3e	; 62
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	80 91 12 01 	lds	r24, 0x0112
    1888:	90 91 13 01 	lds	r25, 0x0113
    188c:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1890:	88 23       	and	r24, r24
    1892:	31 f0       	breq	.+12     	; 0x18a0 <USART_DecodeMessageRxFIFO+0x40>
    1894:	66 e0       	ldi	r22, 0x06	; 6
    1896:	72 e1       	ldi	r23, 0x12	; 18
    1898:	80 e4       	ldi	r24, 0x40	; 64
    189a:	1b dc       	rcall	.-1994   	; 0x10d2 <TWI_send_string>
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	45 c0       	rjmp	.+138    	; 0x192a <USART_DecodeMessageRxFIFO+0xca>
    18a0:	c0 90 00 00 	lds	r12, 0x0000
    18a4:	d1 2c       	mov	r13, r1
    18a6:	96 01       	movw	r18, r12
    18a8:	21 50       	subi	r18, 0x01	; 1
    18aa:	31 09       	sbc	r19, r1
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	c1 14       	cp	r12, r1
    18b2:	d1 04       	cpc	r13, r1
    18b4:	11 f0       	breq	.+4      	; 0x18ba <USART_DecodeMessageRxFIFO+0x5a>
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	82 0f       	add	r24, r18
    18bc:	93 1f       	adc	r25, r19
    18be:	2d b7       	in	r18, 0x3d	; 61
    18c0:	3e b7       	in	r19, 0x3e	; 62
    18c2:	28 1b       	sub	r18, r24
    18c4:	39 0b       	sbc	r19, r25
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	3e bf       	out	0x3e, r19	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	2d bf       	out	0x3d, r18	; 61
    18d0:	8d b7       	in	r24, 0x3d	; 61
    18d2:	9e b7       	in	r25, 0x3e	; 62
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	88 2e       	mov	r8, r24
    18d8:	99 2e       	mov	r9, r25
    18da:	1c 14       	cp	r1, r12
    18dc:	1d 04       	cpc	r1, r13
    18de:	f4 f4       	brge	.+60     	; 0x191c <USART_DecodeMessageRxFIFO+0xbc>
    18e0:	e8 2e       	mov	r14, r24
    18e2:	f9 2e       	mov	r15, r25
    18e4:	00 e0       	ldi	r16, 0x00	; 0
    18e6:	10 e0       	ldi	r17, 0x00	; 0
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	80 91 12 01 	lds	r24, 0x0112
    18f0:	90 91 13 01 	lds	r25, 0x0113
    18f4:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    18f8:	88 23       	and	r24, r24
    18fa:	31 f0       	breq	.+12     	; 0x1908 <USART_DecodeMessageRxFIFO+0xa8>
    18fc:	68 e2       	ldi	r22, 0x28	; 40
    18fe:	72 e1       	ldi	r23, 0x12	; 18
    1900:	80 e4       	ldi	r24, 0x40	; 64
    1902:	e7 db       	rcall	.-2098   	; 0x10d2 <TWI_send_string>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	11 c0       	rjmp	.+34     	; 0x192a <USART_DecodeMessageRxFIFO+0xca>
    1908:	80 91 00 00 	lds	r24, 0x0000
    190c:	f7 01       	movw	r30, r14
    190e:	81 93       	st	Z+, r24
    1910:	7f 01       	movw	r14, r30
    1912:	0f 5f       	subi	r16, 0xFF	; 255
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	0c 15       	cp	r16, r12
    1918:	1d 05       	cpc	r17, r13
    191a:	34 f3       	brlt	.-52     	; 0x18e8 <USART_DecodeMessageRxFIFO+0x88>
    191c:	a6 01       	movw	r20, r12
    191e:	68 2d       	mov	r22, r8
    1920:	79 2d       	mov	r23, r9
    1922:	80 91 1a 11 	lds	r24, 0x111A
    1926:	1b dc       	rcall	.-1994   	; 0x115e <TWI_send_string_fixed_length>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	be be       	out	0x3e, r11	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	ad be       	out	0x3d, r10	; 61
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	bf 90       	pop	r11
    1946:	af 90       	pop	r10
    1948:	9f 90       	pop	r9
    194a:	8f 90       	pop	r8
    194c:	08 95       	ret

0000194e <USART_DecodeGyroFIFO>:
    194e:	af 92       	push	r10
    1950:	bf 92       	push	r11
    1952:	cf 92       	push	r12
    1954:	df 92       	push	r13
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	00 d0       	rcall	.+0      	; 0x1964 <USART_DecodeGyroFIFO+0x16>
    1964:	00 d0       	rcall	.+0      	; 0x1966 <USART_DecodeGyroFIFO+0x18>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	80 93 d1 13 	sts	0x13D1, r24
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	80 91 12 01 	lds	r24, 0x0112
    1978:	90 91 13 01 	lds	r25, 0x0113
    197c:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1980:	88 23       	and	r24, r24
    1982:	31 f0       	breq	.+12     	; 0x1990 <USART_DecodeGyroFIFO+0x42>
    1984:	6b e4       	ldi	r22, 0x4B	; 75
    1986:	72 e1       	ldi	r23, 0x12	; 18
    1988:	80 e4       	ldi	r24, 0x40	; 64
    198a:	a3 db       	rcall	.-2234   	; 0x10d2 <TWI_send_string>
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	73 c0       	rjmp	.+230    	; 0x1a76 <USART_DecodeGyroFIFO+0x128>
    1990:	80 91 00 00 	lds	r24, 0x0000
    1994:	8c 30       	cpi	r24, 0x0C	; 12
    1996:	09 f4       	brne	.+2      	; 0x199a <USART_DecodeGyroFIFO+0x4c>
    1998:	53 c0       	rjmp	.+166    	; 0x1a40 <USART_DecodeGyroFIFO+0xf2>
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	6c c0       	rjmp	.+216    	; 0x1a76 <USART_DecodeGyroFIFO+0x128>
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	80 91 12 01 	lds	r24, 0x0112
    19a6:	90 91 13 01 	lds	r25, 0x0113
    19aa:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    19ae:	88 23       	and	r24, r24
    19b0:	31 f0       	breq	.+12     	; 0x19be <USART_DecodeGyroFIFO+0x70>
    19b2:	6a e6       	ldi	r22, 0x6A	; 106
    19b4:	72 e1       	ldi	r23, 0x12	; 18
    19b6:	80 e4       	ldi	r24, 0x40	; 64
    19b8:	8c db       	rcall	.-2280   	; 0x10d2 <TWI_send_string>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	5c c0       	rjmp	.+184    	; 0x1a76 <USART_DecodeGyroFIFO+0x128>
    19be:	80 91 00 00 	lds	r24, 0x0000
    19c2:	f6 01       	movw	r30, r12
    19c4:	81 93       	st	Z+, r24
    19c6:	6f 01       	movw	r12, r30
    19c8:	e0 17       	cp	r30, r16
    19ca:	f1 07       	cpc	r31, r17
    19cc:	41 f7       	brne	.-48     	; 0x199e <USART_DecodeGyroFIFO+0x50>
    19ce:	f1 e0       	ldi	r31, 0x01	; 1
    19d0:	af 16       	cp	r10, r31
    19d2:	b1 04       	cpc	r11, r1
    19d4:	99 f0       	breq	.+38     	; 0x19fc <USART_DecodeGyroFIFO+0xae>
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	a8 16       	cp	r10, r24
    19da:	b1 04       	cpc	r11, r1
    19dc:	e1 f0       	breq	.+56     	; 0x1a16 <USART_DecodeGyroFIFO+0xc8>
    19de:	ab 28       	or	r10, r11
    19e0:	39 f5       	brne	.+78     	; 0x1a30 <USART_DecodeGyroFIFO+0xe2>
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	ab 81       	ldd	r26, Y+3	; 0x03
    19e8:	bc 81       	ldd	r27, Y+4	; 0x04
    19ea:	80 93 cd 13 	sts	0x13CD, r24
    19ee:	90 93 ce 13 	sts	0x13CE, r25
    19f2:	a0 93 cf 13 	sts	0x13CF, r26
    19f6:	b0 93 d0 13 	sts	0x13D0, r27
    19fa:	1e c0       	rjmp	.+60     	; 0x1a38 <USART_DecodeGyroFIFO+0xea>
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	ab 81       	ldd	r26, Y+3	; 0x03
    1a02:	bc 81       	ldd	r27, Y+4	; 0x04
    1a04:	80 93 c9 13 	sts	0x13C9, r24
    1a08:	90 93 ca 13 	sts	0x13CA, r25
    1a0c:	a0 93 cb 13 	sts	0x13CB, r26
    1a10:	b0 93 cc 13 	sts	0x13CC, r27
    1a14:	11 c0       	rjmp	.+34     	; 0x1a38 <USART_DecodeGyroFIFO+0xea>
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	ab 81       	ldd	r26, Y+3	; 0x03
    1a1c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a1e:	80 93 c5 13 	sts	0x13C5, r24
    1a22:	90 93 c6 13 	sts	0x13C6, r25
    1a26:	a0 93 c7 13 	sts	0x13C7, r26
    1a2a:	b0 93 c8 13 	sts	0x13C8, r27
    1a2e:	18 c0       	rjmp	.+48     	; 0x1a60 <USART_DecodeGyroFIFO+0x112>
    1a30:	e3 e0       	ldi	r30, 0x03	; 3
    1a32:	ee 16       	cp	r14, r30
    1a34:	f1 04       	cpc	r15, r1
    1a36:	a4 f4       	brge	.+40     	; 0x1a60 <USART_DecodeGyroFIFO+0x112>
    1a38:	ff ef       	ldi	r31, 0xFF	; 255
    1a3a:	ef 1a       	sub	r14, r31
    1a3c:	ff 0a       	sbc	r15, r31
    1a3e:	06 c0       	rjmp	.+12     	; 0x1a4c <USART_DecodeGyroFIFO+0xfe>
    1a40:	ee 24       	eor	r14, r14
    1a42:	e3 94       	inc	r14
    1a44:	f1 2c       	mov	r15, r1
    1a46:	8e 01       	movw	r16, r28
    1a48:	0b 5f       	subi	r16, 0xFB	; 251
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	57 01       	movw	r10, r14
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	a8 1a       	sub	r10, r24
    1a52:	b1 08       	sbc	r11, r1
    1a54:	cc 24       	eor	r12, r12
    1a56:	c3 94       	inc	r12
    1a58:	d1 2c       	mov	r13, r1
    1a5a:	cc 0e       	add	r12, r28
    1a5c:	dd 1e       	adc	r13, r29
    1a5e:	9f cf       	rjmp	.-194    	; 0x199e <USART_DecodeGyroFIFO+0x50>
    1a60:	40 91 c5 13 	lds	r20, 0x13C5
    1a64:	50 91 c6 13 	lds	r21, 0x13C6
    1a68:	60 91 c7 13 	lds	r22, 0x13C7
    1a6c:	70 91 c8 13 	lds	r23, 0x13C8
    1a70:	80 e8       	ldi	r24, 0x80	; 128
    1a72:	b3 db       	rcall	.-2202   	; 0x11da <TWI_send_float>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	df 90       	pop	r13
    1a8c:	cf 90       	pop	r12
    1a8e:	bf 90       	pop	r11
    1a90:	af 90       	pop	r10
    1a92:	08 95       	ret

00001a94 <USART_DecodeCommandRxFIFO>:
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	80 91 12 01 	lds	r24, 0x0112
    1aa0:	90 91 13 01 	lds	r25, 0x0113
    1aa4:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1aa8:	88 23       	and	r24, r24
    1aaa:	31 f0       	breq	.+12     	; 0x1ab8 <USART_DecodeCommandRxFIFO+0x24>
    1aac:	6a e8       	ldi	r22, 0x8A	; 138
    1aae:	72 e1       	ldi	r23, 0x12	; 18
    1ab0:	80 e4       	ldi	r24, 0x40	; 64
    1ab2:	0f db       	rcall	.-2530   	; 0x10d2 <TWI_send_string>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	45 c0       	rjmp	.+138    	; 0x1b42 <USART_DecodeCommandRxFIFO+0xae>
    1ab8:	80 91 00 00 	lds	r24, 0x0000
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <USART_DecodeCommandRxFIFO+0x2e>
    1ac0:	3b c0       	rjmp	.+118    	; 0x1b38 <USART_DecodeCommandRxFIFO+0xa4>
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	80 91 12 01 	lds	r24, 0x0112
    1aca:	90 91 13 01 	lds	r25, 0x0113
    1ace:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1ad2:	88 23       	and	r24, r24
    1ad4:	31 f0       	breq	.+12     	; 0x1ae2 <USART_DecodeCommandRxFIFO+0x4e>
    1ad6:	6c ea       	ldi	r22, 0xAC	; 172
    1ad8:	72 e1       	ldi	r23, 0x12	; 18
    1ada:	80 e4       	ldi	r24, 0x40	; 64
    1adc:	fa da       	rcall	.-2572   	; 0x10d2 <TWI_send_string>
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	30 c0       	rjmp	.+96     	; 0x1b42 <USART_DecodeCommandRxFIFO+0xae>
    1ae2:	c0 91 00 00 	lds	r28, 0x0000
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	80 91 12 01 	lds	r24, 0x0112
    1aee:	90 91 13 01 	lds	r25, 0x0113
    1af2:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1af6:	88 23       	and	r24, r24
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <USART_DecodeCommandRxFIFO+0x72>
    1afa:	64 ed       	ldi	r22, 0xD4	; 212
    1afc:	72 e1       	ldi	r23, 0x12	; 18
    1afe:	80 e4       	ldi	r24, 0x40	; 64
    1b00:	e8 da       	rcall	.-2608   	; 0x10d2 <TWI_send_string>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	1e c0       	rjmp	.+60     	; 0x1b42 <USART_DecodeCommandRxFIFO+0xae>
    1b06:	d0 91 00 00 	lds	r29, 0x0000
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	80 91 12 01 	lds	r24, 0x0112
    1b12:	90 91 13 01 	lds	r25, 0x0113
    1b16:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1b1a:	88 23       	and	r24, r24
    1b1c:	31 f0       	breq	.+12     	; 0x1b2a <USART_DecodeCommandRxFIFO+0x96>
    1b1e:	6b ef       	ldi	r22, 0xFB	; 251
    1b20:	72 e1       	ldi	r23, 0x12	; 18
    1b22:	80 e4       	ldi	r24, 0x40	; 64
    1b24:	d6 da       	rcall	.-2644   	; 0x10d2 <TWI_send_string>
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	0c c0       	rjmp	.+24     	; 0x1b42 <USART_DecodeCommandRxFIFO+0xae>
    1b2a:	40 91 00 00 	lds	r20, 0x0000
    1b2e:	6d 2f       	mov	r22, r29
    1b30:	8c 2f       	mov	r24, r28
    1b32:	87 da       	rcall	.-2802   	; 0x1042 <TWI_send_command>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <USART_DecodeCommandRxFIFO+0xae>
    1b38:	6f e1       	ldi	r22, 0x1F	; 31
    1b3a:	73 e1       	ldi	r23, 0x13	; 19
    1b3c:	80 e4       	ldi	r24, 0x40	; 64
    1b3e:	c9 da       	rcall	.-2670   	; 0x10d2 <TWI_send_string>
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <USART_DecodeValueFIFO>:
    1b48:	ef 92       	push	r14
    1b4a:	ff 92       	push	r15
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <USART_DecodeValueFIFO+0xe>
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <USART_DecodeValueFIFO+0x10>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	80 91 12 01 	lds	r24, 0x0112
    1b64:	90 91 13 01 	lds	r25, 0x0113
    1b68:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1b6c:	88 23       	and	r24, r24
    1b6e:	31 f0       	breq	.+12     	; 0x1b7c <USART_DecodeValueFIFO+0x34>
    1b70:	66 e4       	ldi	r22, 0x46	; 70
    1b72:	73 e1       	ldi	r23, 0x13	; 19
    1b74:	80 e4       	ldi	r24, 0x40	; 64
    1b76:	ad da       	rcall	.-2726   	; 0x10d2 <TWI_send_string>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	29 c0       	rjmp	.+82     	; 0x1bce <USART_DecodeValueFIFO+0x86>
    1b7c:	80 91 00 00 	lds	r24, 0x0000
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	11 f5       	brne	.+68     	; 0x1bc8 <USART_DecodeValueFIFO+0x80>
    1b84:	8e 01       	movw	r16, r28
    1b86:	0f 5f       	subi	r16, 0xFF	; 255
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8a:	7e 01       	movw	r14, r28
    1b8c:	85 e0       	ldi	r24, 0x05	; 5
    1b8e:	e8 0e       	add	r14, r24
    1b90:	f1 1c       	adc	r15, r1
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	80 91 12 01 	lds	r24, 0x0112
    1b9a:	90 91 13 01 	lds	r25, 0x0113
    1b9e:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	13 c0       	rjmp	.+38     	; 0x1bcc <USART_DecodeValueFIFO+0x84>
    1ba6:	80 91 00 00 	lds	r24, 0x0000
    1baa:	f8 01       	movw	r30, r16
    1bac:	81 93       	st	Z+, r24
    1bae:	8f 01       	movw	r16, r30
    1bb0:	ee 15       	cp	r30, r14
    1bb2:	ff 05       	cpc	r31, r15
    1bb4:	71 f7       	brne	.-36     	; 0x1b92 <USART_DecodeValueFIFO+0x4a>
    1bb6:	49 81       	ldd	r20, Y+1	; 0x01
    1bb8:	5a 81       	ldd	r21, Y+2	; 0x02
    1bba:	6b 81       	ldd	r22, Y+3	; 0x03
    1bbc:	7c 81       	ldd	r23, Y+4	; 0x04
    1bbe:	80 91 1a 11 	lds	r24, 0x111A
    1bc2:	0b db       	rcall	.-2538   	; 0x11da <TWI_send_float>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <USART_DecodeValueFIFO+0x86>
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <USART_DecodeValueFIFO+0x86>
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	08 95       	ret

00001be4 <USART_DecodeReadyFIFO>:
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	80 91 12 01 	lds	r24, 0x0112
    1bec:	90 91 13 01 	lds	r25, 0x0113
    1bf0:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1bf4:	88 23       	and	r24, r24
    1bf6:	31 f0       	breq	.+12     	; 0x1c04 <USART_DecodeReadyFIFO+0x20>
    1bf8:	6a e8       	ldi	r22, 0x8A	; 138
    1bfa:	72 e1       	ldi	r23, 0x12	; 18
    1bfc:	80 e4       	ldi	r24, 0x40	; 64
    1bfe:	69 da       	rcall	.-2862   	; 0x10d2 <TWI_send_string>
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	08 95       	ret
    1c04:	80 91 00 00 	lds	r24, 0x0000
    1c08:	81 11       	cpse	r24, r1
    1c0a:	05 c0       	rjmp	.+10     	; 0x1c16 <USART_DecodeReadyFIFO+0x32>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	80 93 d4 13 	sts	0x13D4, r24
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	08 95       	ret
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	08 95       	ret

00001c1a <USART_DecodeTurnDoneRxFIFO>:
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	80 91 12 01 	lds	r24, 0x0112
    1c22:	90 91 13 01 	lds	r25, 0x0113
    1c26:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1c2a:	88 23       	and	r24, r24
    1c2c:	31 f0       	breq	.+12     	; 0x1c3a <USART_DecodeTurnDoneRxFIFO+0x20>
    1c2e:	66 e6       	ldi	r22, 0x66	; 102
    1c30:	73 e1       	ldi	r23, 0x13	; 19
    1c32:	80 e4       	ldi	r24, 0x40	; 64
    1c34:	4e da       	rcall	.-2916   	; 0x10d2 <TWI_send_string>
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	08 95       	ret
    1c3a:	80 91 00 00 	lds	r24, 0x0000
    1c3e:	81 11       	cpse	r24, r1
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <USART_DecodeTurnDoneRxFIFO+0x32>
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	80 93 d3 13 	sts	0x13D3, r24
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	08 95       	ret
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	08 95       	ret

00001c50 <USART_DecodeClimbDoneRxFIFO>:
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	80 91 12 01 	lds	r24, 0x0112
    1c58:	90 91 13 01 	lds	r25, 0x0113
    1c5c:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1c60:	88 23       	and	r24, r24
    1c62:	31 f0       	breq	.+12     	; 0x1c70 <USART_DecodeClimbDoneRxFIFO+0x20>
    1c64:	6a e8       	ldi	r22, 0x8A	; 138
    1c66:	73 e1       	ldi	r23, 0x13	; 19
    1c68:	80 e4       	ldi	r24, 0x40	; 64
    1c6a:	33 da       	rcall	.-2970   	; 0x10d2 <TWI_send_string>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	08 95       	ret
    1c70:	80 91 00 00 	lds	r24, 0x0000
    1c74:	81 11       	cpse	r24, r1
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <USART_DecodeClimbDoneRxFIFO+0x32>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	80 93 d2 13 	sts	0x13D2, r24
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	08 95       	ret
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	08 95       	ret

00001c86 <USART_ready>:
    1c86:	80 91 d4 13 	lds	r24, 0x13D4
    1c8a:	88 23       	and	r24, r24
    1c8c:	21 f0       	breq	.+8      	; 0x1c96 <USART_ready+0x10>
    1c8e:	10 92 d4 13 	sts	0x13D4, r1
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	08 95       	ret
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	08 95       	ret

00001c9a <USART_turn_done>:
    1c9a:	80 91 d3 13 	lds	r24, 0x13D3
    1c9e:	88 23       	and	r24, r24
    1ca0:	21 f0       	breq	.+8      	; 0x1caa <USART_turn_done+0x10>
    1ca2:	10 92 d3 13 	sts	0x13D3, r1
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	08 95       	ret
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	08 95       	ret

00001cae <USART_DecodeRxFIFO>:
    1cae:	2e c0       	rjmp	.+92     	; 0x1d0c <USART_DecodeRxFIFO+0x5e>
    1cb0:	80 91 00 00 	lds	r24, 0x0000
    1cb4:	8d 34       	cpi	r24, 0x4D	; 77
    1cb6:	79 f0       	breq	.+30     	; 0x1cd6 <USART_DecodeRxFIFO+0x28>
    1cb8:	38 f4       	brcc	.+14     	; 0x1cc8 <USART_DecodeRxFIFO+0x1a>
    1cba:	87 34       	cpi	r24, 0x47	; 71
    1cbc:	e1 f0       	breq	.+56     	; 0x1cf6 <USART_DecodeRxFIFO+0x48>
    1cbe:	88 34       	cpi	r24, 0x48	; 72
    1cc0:	11 f1       	breq	.+68     	; 0x1d06 <USART_DecodeRxFIFO+0x58>
    1cc2:	83 34       	cpi	r24, 0x43	; 67
    1cc4:	19 f5       	brne	.+70     	; 0x1d0c <USART_DecodeRxFIFO+0x5e>
    1cc6:	0b c0       	rjmp	.+22     	; 0x1cde <USART_DecodeRxFIFO+0x30>
    1cc8:	84 35       	cpi	r24, 0x54	; 84
    1cca:	c9 f0       	breq	.+50     	; 0x1cfe <USART_DecodeRxFIFO+0x50>
    1ccc:	86 35       	cpi	r24, 0x56	; 86
    1cce:	59 f0       	breq	.+22     	; 0x1ce6 <USART_DecodeRxFIFO+0x38>
    1cd0:	82 35       	cpi	r24, 0x52	; 82
    1cd2:	e1 f4       	brne	.+56     	; 0x1d0c <USART_DecodeRxFIFO+0x5e>
    1cd4:	0c c0       	rjmp	.+24     	; 0x1cee <USART_DecodeRxFIFO+0x40>
    1cd6:	c4 dd       	rcall	.-1144   	; 0x1860 <USART_DecodeMessageRxFIFO>
    1cd8:	88 23       	and	r24, r24
    1cda:	c1 f0       	breq	.+48     	; 0x1d0c <USART_DecodeRxFIFO+0x5e>
    1cdc:	08 95       	ret
    1cde:	da de       	rcall	.-588    	; 0x1a94 <USART_DecodeCommandRxFIFO>
    1ce0:	88 23       	and	r24, r24
    1ce2:	a1 f0       	breq	.+40     	; 0x1d0c <USART_DecodeRxFIFO+0x5e>
    1ce4:	08 95       	ret
    1ce6:	30 df       	rcall	.-416    	; 0x1b48 <USART_DecodeValueFIFO>
    1ce8:	88 23       	and	r24, r24
    1cea:	81 f0       	breq	.+32     	; 0x1d0c <USART_DecodeRxFIFO+0x5e>
    1cec:	08 95       	ret
    1cee:	7a df       	rcall	.-268    	; 0x1be4 <USART_DecodeReadyFIFO>
    1cf0:	88 23       	and	r24, r24
    1cf2:	61 f0       	breq	.+24     	; 0x1d0c <USART_DecodeRxFIFO+0x5e>
    1cf4:	08 95       	ret
    1cf6:	2b de       	rcall	.-938    	; 0x194e <USART_DecodeGyroFIFO>
    1cf8:	88 23       	and	r24, r24
    1cfa:	41 f0       	breq	.+16     	; 0x1d0c <USART_DecodeRxFIFO+0x5e>
    1cfc:	08 95       	ret
    1cfe:	8d df       	rcall	.-230    	; 0x1c1a <USART_DecodeTurnDoneRxFIFO>
    1d00:	88 23       	and	r24, r24
    1d02:	21 f0       	breq	.+8      	; 0x1d0c <USART_DecodeRxFIFO+0x5e>
    1d04:	08 95       	ret
    1d06:	a4 df       	rcall	.-184    	; 0x1c50 <USART_DecodeClimbDoneRxFIFO>
    1d08:	81 11       	cpse	r24, r1
    1d0a:	0a c0       	rjmp	.+20     	; 0x1d20 <USART_DecodeRxFIFO+0x72>
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	80 91 12 01 	lds	r24, 0x0112
    1d14:	90 91 13 01 	lds	r25, 0x0113
    1d18:	0e 94 55 02 	call	0x4aa	; 0x4aa <FifoRead>
    1d1c:	88 23       	and	r24, r24
    1d1e:	41 f2       	breq	.-112    	; 0x1cb0 <USART_DecodeRxFIFO+0x2>
    1d20:	08 95       	ret

00001d22 <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1d22:	1f 92       	push	r1
    1d24:	0f 92       	push	r0
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	0f 92       	push	r0
    1d2a:	11 24       	eor	r1, r1
    1d2c:	0b b6       	in	r0, 0x3b	; 59
    1d2e:	0f 92       	push	r0
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	2f 93       	push	r18
    1d3a:	3f 93       	push	r19
    1d3c:	4f 93       	push	r20
    1d3e:	5f 93       	push	r21
    1d40:	6f 93       	push	r22
    1d42:	7f 93       	push	r23
    1d44:	8f 93       	push	r24
    1d46:	9f 93       	push	r25
    1d48:	af 93       	push	r26
    1d4a:	bf 93       	push	r27
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	ef 93       	push	r30
    1d52:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1d54:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1d58:	2e 37       	cpi	r18, 0x7E	; 126
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <__vector_20+0x3c>
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1d5e:	80 91 d7 13 	lds	r24, 0x13D7
    1d62:	90 91 d8 13 	lds	r25, 0x13D8
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	91 05       	cpc	r25, r1
    1d6a:	40 f4       	brcc	.+16     	; 0x1d7c <__vector_20+0x5a>
    1d6c:	20 91 38 15 	lds	r18, 0x1538
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	2c 5f       	subi	r18, 0xFC	; 252
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	82 17       	cp	r24, r18
    1d78:	93 07       	cpc	r25, r19
    1d7a:	59 f5       	brne	.+86     	; 0x1dd2 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1d7c:	80 91 d5 13 	lds	r24, 0x13D5
    1d80:	90 91 d6 13 	lds	r25, 0x13D6
    1d84:	89 2b       	or	r24, r25
    1d86:	21 f0       	breq	.+8      	; 0x1d90 <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1d88:	10 92 d6 13 	sts	0x13D6, r1
    1d8c:	10 92 d5 13 	sts	0x13D5, r1
    1d90:	07 e3       	ldi	r16, 0x37	; 55
    1d92:	15 e1       	ldi	r17, 0x15	; 21
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1d94:	c0 e0       	ldi	r28, 0x00	; 0
    1d96:	d0 e0       	ldi	r29, 0x00	; 0
    1d98:	0f 2e       	mov	r0, r31
    1d9a:	f8 e3       	ldi	r31, 0x38	; 56
    1d9c:	ef 2e       	mov	r14, r31
    1d9e:	f5 e1       	ldi	r31, 0x15	; 21
    1da0:	ff 2e       	mov	r15, r31
    1da2:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1da4:	f8 01       	movw	r30, r16
    1da6:	61 91       	ld	r22, Z+
    1da8:	8f 01       	movw	r16, r30
    1daa:	80 91 12 01 	lds	r24, 0x0112
    1dae:	90 91 13 01 	lds	r25, 0x0113
    1db2:	0e 94 35 02 	call	0x46a	; 0x46a <FifoWrite>
    1db6:	88 23       	and	r24, r24
    1db8:	21 f0       	breq	.+8      	; 0x1dc2 <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1dba:	6f ea       	ldi	r22, 0xAF	; 175
    1dbc:	73 e1       	ldi	r23, 0x13	; 19
    1dbe:	80 e4       	ldi	r24, 0x40	; 64
    1dc0:	88 d9       	rcall	.-3312   	; 0x10d2 <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1dc2:	21 96       	adiw	r28, 0x01	; 1
    1dc4:	f7 01       	movw	r30, r14
    1dc6:	80 81       	ld	r24, Z
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 96       	adiw	r24, 0x02	; 2
    1dcc:	c8 17       	cp	r28, r24
    1dce:	d9 07       	cpc	r29, r25
    1dd0:	4c f3       	brlt	.-46     	; 0x1da4 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1dd2:	10 92 d8 13 	sts	0x13D8, r1
    1dd6:	10 92 d7 13 	sts	0x13D7, r1
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1ddc:	2d 37       	cpi	r18, 0x7D	; 125
    1dde:	39 f4       	brne	.+14     	; 0x1dee <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	90 93 d6 13 	sts	0x13D6, r25
    1de8:	80 93 d5 13 	sts	0x13D5, r24
    1dec:	0d c0       	rjmp	.+26     	; 0x1e08 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1dee:	80 91 d7 13 	lds	r24, 0x13D7
    1df2:	90 91 d8 13 	lds	r25, 0x13D8
    1df6:	fc 01       	movw	r30, r24
    1df8:	e9 5c       	subi	r30, 0xC9	; 201
    1dfa:	fa 4e       	sbci	r31, 0xEA	; 234
    1dfc:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	90 93 d8 13 	sts	0x13D8, r25
    1e04:	80 93 d7 13 	sts	0x13D7, r24
	}
	
	
}
    1e08:	ff 91       	pop	r31
    1e0a:	ef 91       	pop	r30
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	bf 91       	pop	r27
    1e12:	af 91       	pop	r26
    1e14:	9f 91       	pop	r25
    1e16:	8f 91       	pop	r24
    1e18:	7f 91       	pop	r23
    1e1a:	6f 91       	pop	r22
    1e1c:	5f 91       	pop	r21
    1e1e:	4f 91       	pop	r20
    1e20:	3f 91       	pop	r19
    1e22:	2f 91       	pop	r18
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	0f 90       	pop	r0
    1e2e:	0b be       	out	0x3b, r0	; 59
    1e30:	0f 90       	pop	r0
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	0f 90       	pop	r0
    1e36:	1f 90       	pop	r1
    1e38:	18 95       	reti

00001e3a <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1e3a:	80 93 3c 17 	sts	0x173C, r24
	gTxPayload[1] = rotation;
    1e3e:	60 93 3d 17 	sts	0x173D, r22
	gTxPayload[2] = speed;
    1e42:	40 93 3e 17 	sts	0x173E, r20
	
	
	USART_SendPacket('C', 3);
    1e46:	63 e0       	ldi	r22, 0x03	; 3
    1e48:	83 e4       	ldi	r24, 0x43	; 67
    1e4a:	86 cc       	rjmp	.-1780   	; 0x1758 <USART_SendPacket>

00001e4c <__subsf3>:
    1e4c:	50 58       	subi	r21, 0x80	; 128

00001e4e <__addsf3>:
    1e4e:	bb 27       	eor	r27, r27
    1e50:	aa 27       	eor	r26, r26
    1e52:	0e d0       	rcall	.+28     	; 0x1e70 <__addsf3x>
    1e54:	ed c1       	rjmp	.+986    	; 0x2230 <__fp_round>
    1e56:	b6 d1       	rcall	.+876    	; 0x21c4 <__fp_pscA>
    1e58:	30 f0       	brcs	.+12     	; 0x1e66 <__addsf3+0x18>
    1e5a:	bb d1       	rcall	.+886    	; 0x21d2 <__fp_pscB>
    1e5c:	20 f0       	brcs	.+8      	; 0x1e66 <__addsf3+0x18>
    1e5e:	31 f4       	brne	.+12     	; 0x1e6c <__addsf3+0x1e>
    1e60:	9f 3f       	cpi	r25, 0xFF	; 255
    1e62:	11 f4       	brne	.+4      	; 0x1e68 <__addsf3+0x1a>
    1e64:	1e f4       	brtc	.+6      	; 0x1e6c <__addsf3+0x1e>
    1e66:	86 c1       	rjmp	.+780    	; 0x2174 <__fp_nan>
    1e68:	0e f4       	brtc	.+2      	; 0x1e6c <__addsf3+0x1e>
    1e6a:	e0 95       	com	r30
    1e6c:	e7 fb       	bst	r30, 7
    1e6e:	7c c1       	rjmp	.+760    	; 0x2168 <__fp_inf>

00001e70 <__addsf3x>:
    1e70:	e9 2f       	mov	r30, r25
    1e72:	00 d2       	rcall	.+1024   	; 0x2274 <__fp_split3>
    1e74:	80 f3       	brcs	.-32     	; 0x1e56 <__addsf3+0x8>
    1e76:	ba 17       	cp	r27, r26
    1e78:	62 07       	cpc	r22, r18
    1e7a:	73 07       	cpc	r23, r19
    1e7c:	84 07       	cpc	r24, r20
    1e7e:	95 07       	cpc	r25, r21
    1e80:	18 f0       	brcs	.+6      	; 0x1e88 <__addsf3x+0x18>
    1e82:	71 f4       	brne	.+28     	; 0x1ea0 <__addsf3x+0x30>
    1e84:	9e f5       	brtc	.+102    	; 0x1eec <__addsf3x+0x7c>
    1e86:	18 c2       	rjmp	.+1072   	; 0x22b8 <__fp_zero>
    1e88:	0e f4       	brtc	.+2      	; 0x1e8c <__addsf3x+0x1c>
    1e8a:	e0 95       	com	r30
    1e8c:	0b 2e       	mov	r0, r27
    1e8e:	ba 2f       	mov	r27, r26
    1e90:	a0 2d       	mov	r26, r0
    1e92:	0b 01       	movw	r0, r22
    1e94:	b9 01       	movw	r22, r18
    1e96:	90 01       	movw	r18, r0
    1e98:	0c 01       	movw	r0, r24
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	a0 01       	movw	r20, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	ff 27       	eor	r31, r31
    1ea2:	59 1b       	sub	r21, r25
    1ea4:	99 f0       	breq	.+38     	; 0x1ecc <__addsf3x+0x5c>
    1ea6:	59 3f       	cpi	r21, 0xF9	; 249
    1ea8:	50 f4       	brcc	.+20     	; 0x1ebe <__addsf3x+0x4e>
    1eaa:	50 3e       	cpi	r21, 0xE0	; 224
    1eac:	68 f1       	brcs	.+90     	; 0x1f08 <__addsf3x+0x98>
    1eae:	1a 16       	cp	r1, r26
    1eb0:	f0 40       	sbci	r31, 0x00	; 0
    1eb2:	a2 2f       	mov	r26, r18
    1eb4:	23 2f       	mov	r18, r19
    1eb6:	34 2f       	mov	r19, r20
    1eb8:	44 27       	eor	r20, r20
    1eba:	58 5f       	subi	r21, 0xF8	; 248
    1ebc:	f3 cf       	rjmp	.-26     	; 0x1ea4 <__addsf3x+0x34>
    1ebe:	46 95       	lsr	r20
    1ec0:	37 95       	ror	r19
    1ec2:	27 95       	ror	r18
    1ec4:	a7 95       	ror	r26
    1ec6:	f0 40       	sbci	r31, 0x00	; 0
    1ec8:	53 95       	inc	r21
    1eca:	c9 f7       	brne	.-14     	; 0x1ebe <__addsf3x+0x4e>
    1ecc:	7e f4       	brtc	.+30     	; 0x1eec <__addsf3x+0x7c>
    1ece:	1f 16       	cp	r1, r31
    1ed0:	ba 0b       	sbc	r27, r26
    1ed2:	62 0b       	sbc	r22, r18
    1ed4:	73 0b       	sbc	r23, r19
    1ed6:	84 0b       	sbc	r24, r20
    1ed8:	ba f0       	brmi	.+46     	; 0x1f08 <__addsf3x+0x98>
    1eda:	91 50       	subi	r25, 0x01	; 1
    1edc:	a1 f0       	breq	.+40     	; 0x1f06 <__addsf3x+0x96>
    1ede:	ff 0f       	add	r31, r31
    1ee0:	bb 1f       	adc	r27, r27
    1ee2:	66 1f       	adc	r22, r22
    1ee4:	77 1f       	adc	r23, r23
    1ee6:	88 1f       	adc	r24, r24
    1ee8:	c2 f7       	brpl	.-16     	; 0x1eda <__addsf3x+0x6a>
    1eea:	0e c0       	rjmp	.+28     	; 0x1f08 <__addsf3x+0x98>
    1eec:	ba 0f       	add	r27, r26
    1eee:	62 1f       	adc	r22, r18
    1ef0:	73 1f       	adc	r23, r19
    1ef2:	84 1f       	adc	r24, r20
    1ef4:	48 f4       	brcc	.+18     	; 0x1f08 <__addsf3x+0x98>
    1ef6:	87 95       	ror	r24
    1ef8:	77 95       	ror	r23
    1efa:	67 95       	ror	r22
    1efc:	b7 95       	ror	r27
    1efe:	f7 95       	ror	r31
    1f00:	9e 3f       	cpi	r25, 0xFE	; 254
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <__addsf3x+0x96>
    1f04:	b3 cf       	rjmp	.-154    	; 0x1e6c <__addsf3+0x1e>
    1f06:	93 95       	inc	r25
    1f08:	88 0f       	add	r24, r24
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <__addsf3x+0x9e>
    1f0c:	99 27       	eor	r25, r25
    1f0e:	ee 0f       	add	r30, r30
    1f10:	97 95       	ror	r25
    1f12:	87 95       	ror	r24
    1f14:	08 95       	ret

00001f16 <atan>:
    1f16:	df 93       	push	r29
    1f18:	dd 27       	eor	r29, r29
    1f1a:	b9 2f       	mov	r27, r25
    1f1c:	bf 77       	andi	r27, 0x7F	; 127
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	16 16       	cp	r1, r22
    1f24:	17 06       	cpc	r1, r23
    1f26:	48 07       	cpc	r20, r24
    1f28:	5b 07       	cpc	r21, r27
    1f2a:	10 f4       	brcc	.+4      	; 0x1f30 <atan+0x1a>
    1f2c:	d9 2f       	mov	r29, r25
    1f2e:	cf d1       	rcall	.+926    	; 0x22ce <inverse>
    1f30:	9f 93       	push	r25
    1f32:	8f 93       	push	r24
    1f34:	7f 93       	push	r23
    1f36:	6f 93       	push	r22
    1f38:	34 d2       	rcall	.+1128   	; 0x23a2 <square>
    1f3a:	ec e8       	ldi	r30, 0x8C	; 140
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	1d d1       	rcall	.+570    	; 0x217a <__fp_powser>
    1f40:	77 d1       	rcall	.+750    	; 0x2230 <__fp_round>
    1f42:	2f 91       	pop	r18
    1f44:	3f 91       	pop	r19
    1f46:	4f 91       	pop	r20
    1f48:	5f 91       	pop	r21
    1f4a:	d4 d1       	rcall	.+936    	; 0x22f4 <__mulsf3x>
    1f4c:	dd 23       	and	r29, r29
    1f4e:	49 f0       	breq	.+18     	; 0x1f62 <atan+0x4c>
    1f50:	90 58       	subi	r25, 0x80	; 128
    1f52:	a2 ea       	ldi	r26, 0xA2	; 162
    1f54:	2a ed       	ldi	r18, 0xDA	; 218
    1f56:	3f e0       	ldi	r19, 0x0F	; 15
    1f58:	49 ec       	ldi	r20, 0xC9	; 201
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	d0 78       	andi	r29, 0x80	; 128
    1f5e:	5d 27       	eor	r21, r29
    1f60:	87 df       	rcall	.-242    	; 0x1e70 <__addsf3x>
    1f62:	df 91       	pop	r29
    1f64:	65 c1       	rjmp	.+714    	; 0x2230 <__fp_round>

00001f66 <__cmpsf2>:
    1f66:	dc d0       	rcall	.+440    	; 0x2120 <__fp_cmp>
    1f68:	08 f4       	brcc	.+2      	; 0x1f6c <__cmpsf2+0x6>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	08 95       	ret

00001f6e <cos>:
    1f6e:	39 d1       	rcall	.+626    	; 0x21e2 <__fp_rempio2>
    1f70:	e3 95       	inc	r30
    1f72:	6f c1       	rjmp	.+734    	; 0x2252 <__fp_sinus>

00001f74 <__divsf3>:
    1f74:	0c d0       	rcall	.+24     	; 0x1f8e <__divsf3x>
    1f76:	5c c1       	rjmp	.+696    	; 0x2230 <__fp_round>
    1f78:	2c d1       	rcall	.+600    	; 0x21d2 <__fp_pscB>
    1f7a:	40 f0       	brcs	.+16     	; 0x1f8c <__divsf3+0x18>
    1f7c:	23 d1       	rcall	.+582    	; 0x21c4 <__fp_pscA>
    1f7e:	30 f0       	brcs	.+12     	; 0x1f8c <__divsf3+0x18>
    1f80:	21 f4       	brne	.+8      	; 0x1f8a <__divsf3+0x16>
    1f82:	5f 3f       	cpi	r21, 0xFF	; 255
    1f84:	19 f0       	breq	.+6      	; 0x1f8c <__divsf3+0x18>
    1f86:	f0 c0       	rjmp	.+480    	; 0x2168 <__fp_inf>
    1f88:	51 11       	cpse	r21, r1
    1f8a:	97 c1       	rjmp	.+814    	; 0x22ba <__fp_szero>
    1f8c:	f3 c0       	rjmp	.+486    	; 0x2174 <__fp_nan>

00001f8e <__divsf3x>:
    1f8e:	72 d1       	rcall	.+740    	; 0x2274 <__fp_split3>
    1f90:	98 f3       	brcs	.-26     	; 0x1f78 <__divsf3+0x4>

00001f92 <__divsf3_pse>:
    1f92:	99 23       	and	r25, r25
    1f94:	c9 f3       	breq	.-14     	; 0x1f88 <__divsf3+0x14>
    1f96:	55 23       	and	r21, r21
    1f98:	b1 f3       	breq	.-20     	; 0x1f86 <__divsf3+0x12>
    1f9a:	95 1b       	sub	r25, r21
    1f9c:	55 0b       	sbc	r21, r21
    1f9e:	bb 27       	eor	r27, r27
    1fa0:	aa 27       	eor	r26, r26
    1fa2:	62 17       	cp	r22, r18
    1fa4:	73 07       	cpc	r23, r19
    1fa6:	84 07       	cpc	r24, r20
    1fa8:	38 f0       	brcs	.+14     	; 0x1fb8 <__divsf3_pse+0x26>
    1faa:	9f 5f       	subi	r25, 0xFF	; 255
    1fac:	5f 4f       	sbci	r21, 0xFF	; 255
    1fae:	22 0f       	add	r18, r18
    1fb0:	33 1f       	adc	r19, r19
    1fb2:	44 1f       	adc	r20, r20
    1fb4:	aa 1f       	adc	r26, r26
    1fb6:	a9 f3       	breq	.-22     	; 0x1fa2 <__divsf3_pse+0x10>
    1fb8:	33 d0       	rcall	.+102    	; 0x2020 <__divsf3_pse+0x8e>
    1fba:	0e 2e       	mov	r0, r30
    1fbc:	3a f0       	brmi	.+14     	; 0x1fcc <__divsf3_pse+0x3a>
    1fbe:	e0 e8       	ldi	r30, 0x80	; 128
    1fc0:	30 d0       	rcall	.+96     	; 0x2022 <__divsf3_pse+0x90>
    1fc2:	91 50       	subi	r25, 0x01	; 1
    1fc4:	50 40       	sbci	r21, 0x00	; 0
    1fc6:	e6 95       	lsr	r30
    1fc8:	00 1c       	adc	r0, r0
    1fca:	ca f7       	brpl	.-14     	; 0x1fbe <__divsf3_pse+0x2c>
    1fcc:	29 d0       	rcall	.+82     	; 0x2020 <__divsf3_pse+0x8e>
    1fce:	fe 2f       	mov	r31, r30
    1fd0:	27 d0       	rcall	.+78     	; 0x2020 <__divsf3_pse+0x8e>
    1fd2:	66 0f       	add	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	bb 1f       	adc	r27, r27
    1fda:	26 17       	cp	r18, r22
    1fdc:	37 07       	cpc	r19, r23
    1fde:	48 07       	cpc	r20, r24
    1fe0:	ab 07       	cpc	r26, r27
    1fe2:	b0 e8       	ldi	r27, 0x80	; 128
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <__divsf3_pse+0x56>
    1fe6:	bb 0b       	sbc	r27, r27
    1fe8:	80 2d       	mov	r24, r0
    1fea:	bf 01       	movw	r22, r30
    1fec:	ff 27       	eor	r31, r31
    1fee:	93 58       	subi	r25, 0x83	; 131
    1ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff2:	2a f0       	brmi	.+10     	; 0x1ffe <__divsf3_pse+0x6c>
    1ff4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ff6:	51 05       	cpc	r21, r1
    1ff8:	68 f0       	brcs	.+26     	; 0x2014 <__divsf3_pse+0x82>
    1ffa:	b6 c0       	rjmp	.+364    	; 0x2168 <__fp_inf>
    1ffc:	5e c1       	rjmp	.+700    	; 0x22ba <__fp_szero>
    1ffe:	5f 3f       	cpi	r21, 0xFF	; 255
    2000:	ec f3       	brlt	.-6      	; 0x1ffc <__divsf3_pse+0x6a>
    2002:	98 3e       	cpi	r25, 0xE8	; 232
    2004:	dc f3       	brlt	.-10     	; 0x1ffc <__divsf3_pse+0x6a>
    2006:	86 95       	lsr	r24
    2008:	77 95       	ror	r23
    200a:	67 95       	ror	r22
    200c:	b7 95       	ror	r27
    200e:	f7 95       	ror	r31
    2010:	9f 5f       	subi	r25, 0xFF	; 255
    2012:	c9 f7       	brne	.-14     	; 0x2006 <__divsf3_pse+0x74>
    2014:	88 0f       	add	r24, r24
    2016:	91 1d       	adc	r25, r1
    2018:	96 95       	lsr	r25
    201a:	87 95       	ror	r24
    201c:	97 f9       	bld	r25, 7
    201e:	08 95       	ret
    2020:	e1 e0       	ldi	r30, 0x01	; 1
    2022:	66 0f       	add	r22, r22
    2024:	77 1f       	adc	r23, r23
    2026:	88 1f       	adc	r24, r24
    2028:	bb 1f       	adc	r27, r27
    202a:	62 17       	cp	r22, r18
    202c:	73 07       	cpc	r23, r19
    202e:	84 07       	cpc	r24, r20
    2030:	ba 07       	cpc	r27, r26
    2032:	20 f0       	brcs	.+8      	; 0x203c <__divsf3_pse+0xaa>
    2034:	62 1b       	sub	r22, r18
    2036:	73 0b       	sbc	r23, r19
    2038:	84 0b       	sbc	r24, r20
    203a:	ba 0b       	sbc	r27, r26
    203c:	ee 1f       	adc	r30, r30
    203e:	88 f7       	brcc	.-30     	; 0x2022 <__divsf3_pse+0x90>
    2040:	e0 95       	com	r30
    2042:	08 95       	ret

00002044 <__fixsfsi>:
    2044:	04 d0       	rcall	.+8      	; 0x204e <__fixunssfsi>
    2046:	68 94       	set
    2048:	b1 11       	cpse	r27, r1
    204a:	37 c1       	rjmp	.+622    	; 0x22ba <__fp_szero>
    204c:	08 95       	ret

0000204e <__fixunssfsi>:
    204e:	1a d1       	rcall	.+564    	; 0x2284 <__fp_splitA>
    2050:	88 f0       	brcs	.+34     	; 0x2074 <__fixunssfsi+0x26>
    2052:	9f 57       	subi	r25, 0x7F	; 127
    2054:	90 f0       	brcs	.+36     	; 0x207a <__fixunssfsi+0x2c>
    2056:	b9 2f       	mov	r27, r25
    2058:	99 27       	eor	r25, r25
    205a:	b7 51       	subi	r27, 0x17	; 23
    205c:	a0 f0       	brcs	.+40     	; 0x2086 <__fixunssfsi+0x38>
    205e:	d1 f0       	breq	.+52     	; 0x2094 <__fixunssfsi+0x46>
    2060:	66 0f       	add	r22, r22
    2062:	77 1f       	adc	r23, r23
    2064:	88 1f       	adc	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	1a f0       	brmi	.+6      	; 0x2070 <__fixunssfsi+0x22>
    206a:	ba 95       	dec	r27
    206c:	c9 f7       	brne	.-14     	; 0x2060 <__fixunssfsi+0x12>
    206e:	12 c0       	rjmp	.+36     	; 0x2094 <__fixunssfsi+0x46>
    2070:	b1 30       	cpi	r27, 0x01	; 1
    2072:	81 f0       	breq	.+32     	; 0x2094 <__fixunssfsi+0x46>
    2074:	21 d1       	rcall	.+578    	; 0x22b8 <__fp_zero>
    2076:	b1 e0       	ldi	r27, 0x01	; 1
    2078:	08 95       	ret
    207a:	1e c1       	rjmp	.+572    	; 0x22b8 <__fp_zero>
    207c:	67 2f       	mov	r22, r23
    207e:	78 2f       	mov	r23, r24
    2080:	88 27       	eor	r24, r24
    2082:	b8 5f       	subi	r27, 0xF8	; 248
    2084:	39 f0       	breq	.+14     	; 0x2094 <__fixunssfsi+0x46>
    2086:	b9 3f       	cpi	r27, 0xF9	; 249
    2088:	cc f3       	brlt	.-14     	; 0x207c <__fixunssfsi+0x2e>
    208a:	86 95       	lsr	r24
    208c:	77 95       	ror	r23
    208e:	67 95       	ror	r22
    2090:	b3 95       	inc	r27
    2092:	d9 f7       	brne	.-10     	; 0x208a <__fixunssfsi+0x3c>
    2094:	3e f4       	brtc	.+14     	; 0x20a4 <__fixunssfsi+0x56>
    2096:	90 95       	com	r25
    2098:	80 95       	com	r24
    209a:	70 95       	com	r23
    209c:	61 95       	neg	r22
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	8f 4f       	sbci	r24, 0xFF	; 255
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	08 95       	ret

000020a6 <__floatunsisf>:
    20a6:	e8 94       	clt
    20a8:	09 c0       	rjmp	.+18     	; 0x20bc <__floatsisf+0x12>

000020aa <__floatsisf>:
    20aa:	97 fb       	bst	r25, 7
    20ac:	3e f4       	brtc	.+14     	; 0x20bc <__floatsisf+0x12>
    20ae:	90 95       	com	r25
    20b0:	80 95       	com	r24
    20b2:	70 95       	com	r23
    20b4:	61 95       	neg	r22
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	8f 4f       	sbci	r24, 0xFF	; 255
    20ba:	9f 4f       	sbci	r25, 0xFF	; 255
    20bc:	99 23       	and	r25, r25
    20be:	a9 f0       	breq	.+42     	; 0x20ea <__floatsisf+0x40>
    20c0:	f9 2f       	mov	r31, r25
    20c2:	96 e9       	ldi	r25, 0x96	; 150
    20c4:	bb 27       	eor	r27, r27
    20c6:	93 95       	inc	r25
    20c8:	f6 95       	lsr	r31
    20ca:	87 95       	ror	r24
    20cc:	77 95       	ror	r23
    20ce:	67 95       	ror	r22
    20d0:	b7 95       	ror	r27
    20d2:	f1 11       	cpse	r31, r1
    20d4:	f8 cf       	rjmp	.-16     	; 0x20c6 <__floatsisf+0x1c>
    20d6:	fa f4       	brpl	.+62     	; 0x2116 <__floatsisf+0x6c>
    20d8:	bb 0f       	add	r27, r27
    20da:	11 f4       	brne	.+4      	; 0x20e0 <__floatsisf+0x36>
    20dc:	60 ff       	sbrs	r22, 0
    20de:	1b c0       	rjmp	.+54     	; 0x2116 <__floatsisf+0x6c>
    20e0:	6f 5f       	subi	r22, 0xFF	; 255
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	8f 4f       	sbci	r24, 0xFF	; 255
    20e6:	9f 4f       	sbci	r25, 0xFF	; 255
    20e8:	16 c0       	rjmp	.+44     	; 0x2116 <__floatsisf+0x6c>
    20ea:	88 23       	and	r24, r24
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <__floatsisf+0x48>
    20ee:	96 e9       	ldi	r25, 0x96	; 150
    20f0:	11 c0       	rjmp	.+34     	; 0x2114 <__floatsisf+0x6a>
    20f2:	77 23       	and	r23, r23
    20f4:	21 f0       	breq	.+8      	; 0x20fe <__floatsisf+0x54>
    20f6:	9e e8       	ldi	r25, 0x8E	; 142
    20f8:	87 2f       	mov	r24, r23
    20fa:	76 2f       	mov	r23, r22
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <__floatsisf+0x5e>
    20fe:	66 23       	and	r22, r22
    2100:	71 f0       	breq	.+28     	; 0x211e <__floatsisf+0x74>
    2102:	96 e8       	ldi	r25, 0x86	; 134
    2104:	86 2f       	mov	r24, r22
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	2a f0       	brmi	.+10     	; 0x2116 <__floatsisf+0x6c>
    210c:	9a 95       	dec	r25
    210e:	66 0f       	add	r22, r22
    2110:	77 1f       	adc	r23, r23
    2112:	88 1f       	adc	r24, r24
    2114:	da f7       	brpl	.-10     	; 0x210c <__floatsisf+0x62>
    2116:	88 0f       	add	r24, r24
    2118:	96 95       	lsr	r25
    211a:	87 95       	ror	r24
    211c:	97 f9       	bld	r25, 7
    211e:	08 95       	ret

00002120 <__fp_cmp>:
    2120:	99 0f       	add	r25, r25
    2122:	00 08       	sbc	r0, r0
    2124:	55 0f       	add	r21, r21
    2126:	aa 0b       	sbc	r26, r26
    2128:	e0 e8       	ldi	r30, 0x80	; 128
    212a:	fe ef       	ldi	r31, 0xFE	; 254
    212c:	16 16       	cp	r1, r22
    212e:	17 06       	cpc	r1, r23
    2130:	e8 07       	cpc	r30, r24
    2132:	f9 07       	cpc	r31, r25
    2134:	c0 f0       	brcs	.+48     	; 0x2166 <__fp_cmp+0x46>
    2136:	12 16       	cp	r1, r18
    2138:	13 06       	cpc	r1, r19
    213a:	e4 07       	cpc	r30, r20
    213c:	f5 07       	cpc	r31, r21
    213e:	98 f0       	brcs	.+38     	; 0x2166 <__fp_cmp+0x46>
    2140:	62 1b       	sub	r22, r18
    2142:	73 0b       	sbc	r23, r19
    2144:	84 0b       	sbc	r24, r20
    2146:	95 0b       	sbc	r25, r21
    2148:	39 f4       	brne	.+14     	; 0x2158 <__fp_cmp+0x38>
    214a:	0a 26       	eor	r0, r26
    214c:	61 f0       	breq	.+24     	; 0x2166 <__fp_cmp+0x46>
    214e:	23 2b       	or	r18, r19
    2150:	24 2b       	or	r18, r20
    2152:	25 2b       	or	r18, r21
    2154:	21 f4       	brne	.+8      	; 0x215e <__fp_cmp+0x3e>
    2156:	08 95       	ret
    2158:	0a 26       	eor	r0, r26
    215a:	09 f4       	brne	.+2      	; 0x215e <__fp_cmp+0x3e>
    215c:	a1 40       	sbci	r26, 0x01	; 1
    215e:	a6 95       	lsr	r26
    2160:	8f ef       	ldi	r24, 0xFF	; 255
    2162:	81 1d       	adc	r24, r1
    2164:	81 1d       	adc	r24, r1
    2166:	08 95       	ret

00002168 <__fp_inf>:
    2168:	97 f9       	bld	r25, 7
    216a:	9f 67       	ori	r25, 0x7F	; 127
    216c:	80 e8       	ldi	r24, 0x80	; 128
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	08 95       	ret

00002174 <__fp_nan>:
    2174:	9f ef       	ldi	r25, 0xFF	; 255
    2176:	80 ec       	ldi	r24, 0xC0	; 192
    2178:	08 95       	ret

0000217a <__fp_powser>:
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	1f 93       	push	r17
    2180:	0f 93       	push	r16
    2182:	ff 92       	push	r15
    2184:	ef 92       	push	r14
    2186:	df 92       	push	r13
    2188:	7b 01       	movw	r14, r22
    218a:	8c 01       	movw	r16, r24
    218c:	68 94       	set
    218e:	05 c0       	rjmp	.+10     	; 0x219a <__fp_powser+0x20>
    2190:	da 2e       	mov	r13, r26
    2192:	ef 01       	movw	r28, r30
    2194:	af d0       	rcall	.+350    	; 0x22f4 <__mulsf3x>
    2196:	fe 01       	movw	r30, r28
    2198:	e8 94       	clt
    219a:	a5 91       	lpm	r26, Z+
    219c:	25 91       	lpm	r18, Z+
    219e:	35 91       	lpm	r19, Z+
    21a0:	45 91       	lpm	r20, Z+
    21a2:	55 91       	lpm	r21, Z+
    21a4:	ae f3       	brts	.-22     	; 0x2190 <__fp_powser+0x16>
    21a6:	ef 01       	movw	r28, r30
    21a8:	63 de       	rcall	.-826    	; 0x1e70 <__addsf3x>
    21aa:	fe 01       	movw	r30, r28
    21ac:	97 01       	movw	r18, r14
    21ae:	a8 01       	movw	r20, r16
    21b0:	da 94       	dec	r13
    21b2:	79 f7       	brne	.-34     	; 0x2192 <__fp_powser+0x18>
    21b4:	df 90       	pop	r13
    21b6:	ef 90       	pop	r14
    21b8:	ff 90       	pop	r15
    21ba:	0f 91       	pop	r16
    21bc:	1f 91       	pop	r17
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <__fp_pscA>:
    21c4:	00 24       	eor	r0, r0
    21c6:	0a 94       	dec	r0
    21c8:	16 16       	cp	r1, r22
    21ca:	17 06       	cpc	r1, r23
    21cc:	18 06       	cpc	r1, r24
    21ce:	09 06       	cpc	r0, r25
    21d0:	08 95       	ret

000021d2 <__fp_pscB>:
    21d2:	00 24       	eor	r0, r0
    21d4:	0a 94       	dec	r0
    21d6:	12 16       	cp	r1, r18
    21d8:	13 06       	cpc	r1, r19
    21da:	14 06       	cpc	r1, r20
    21dc:	05 06       	cpc	r0, r21
    21de:	08 95       	ret
    21e0:	c9 cf       	rjmp	.-110    	; 0x2174 <__fp_nan>

000021e2 <__fp_rempio2>:
    21e2:	50 d0       	rcall	.+160    	; 0x2284 <__fp_splitA>
    21e4:	e8 f3       	brcs	.-6      	; 0x21e0 <__fp_pscB+0xe>
    21e6:	e8 94       	clt
    21e8:	e0 e0       	ldi	r30, 0x00	; 0
    21ea:	bb 27       	eor	r27, r27
    21ec:	9f 57       	subi	r25, 0x7F	; 127
    21ee:	f0 f0       	brcs	.+60     	; 0x222c <__fp_rempio2+0x4a>
    21f0:	2a ed       	ldi	r18, 0xDA	; 218
    21f2:	3f e0       	ldi	r19, 0x0F	; 15
    21f4:	49 ec       	ldi	r20, 0xC9	; 201
    21f6:	06 c0       	rjmp	.+12     	; 0x2204 <__fp_rempio2+0x22>
    21f8:	ee 0f       	add	r30, r30
    21fa:	bb 0f       	add	r27, r27
    21fc:	66 1f       	adc	r22, r22
    21fe:	77 1f       	adc	r23, r23
    2200:	88 1f       	adc	r24, r24
    2202:	28 f0       	brcs	.+10     	; 0x220e <__fp_rempio2+0x2c>
    2204:	b2 3a       	cpi	r27, 0xA2	; 162
    2206:	62 07       	cpc	r22, r18
    2208:	73 07       	cpc	r23, r19
    220a:	84 07       	cpc	r24, r20
    220c:	28 f0       	brcs	.+10     	; 0x2218 <__fp_rempio2+0x36>
    220e:	b2 5a       	subi	r27, 0xA2	; 162
    2210:	62 0b       	sbc	r22, r18
    2212:	73 0b       	sbc	r23, r19
    2214:	84 0b       	sbc	r24, r20
    2216:	e3 95       	inc	r30
    2218:	9a 95       	dec	r25
    221a:	72 f7       	brpl	.-36     	; 0x21f8 <__fp_rempio2+0x16>
    221c:	80 38       	cpi	r24, 0x80	; 128
    221e:	30 f4       	brcc	.+12     	; 0x222c <__fp_rempio2+0x4a>
    2220:	9a 95       	dec	r25
    2222:	bb 0f       	add	r27, r27
    2224:	66 1f       	adc	r22, r22
    2226:	77 1f       	adc	r23, r23
    2228:	88 1f       	adc	r24, r24
    222a:	d2 f7       	brpl	.-12     	; 0x2220 <__fp_rempio2+0x3e>
    222c:	90 48       	sbci	r25, 0x80	; 128
    222e:	be c0       	rjmp	.+380    	; 0x23ac <__fp_mpack_finite>

00002230 <__fp_round>:
    2230:	09 2e       	mov	r0, r25
    2232:	03 94       	inc	r0
    2234:	00 0c       	add	r0, r0
    2236:	11 f4       	brne	.+4      	; 0x223c <__fp_round+0xc>
    2238:	88 23       	and	r24, r24
    223a:	52 f0       	brmi	.+20     	; 0x2250 <__fp_round+0x20>
    223c:	bb 0f       	add	r27, r27
    223e:	40 f4       	brcc	.+16     	; 0x2250 <__fp_round+0x20>
    2240:	bf 2b       	or	r27, r31
    2242:	11 f4       	brne	.+4      	; 0x2248 <__fp_round+0x18>
    2244:	60 ff       	sbrs	r22, 0
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <__fp_round+0x20>
    2248:	6f 5f       	subi	r22, 0xFF	; 255
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	8f 4f       	sbci	r24, 0xFF	; 255
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	08 95       	ret

00002252 <__fp_sinus>:
    2252:	ef 93       	push	r30
    2254:	e0 ff       	sbrs	r30, 0
    2256:	06 c0       	rjmp	.+12     	; 0x2264 <__fp_sinus+0x12>
    2258:	a2 ea       	ldi	r26, 0xA2	; 162
    225a:	2a ed       	ldi	r18, 0xDA	; 218
    225c:	3f e0       	ldi	r19, 0x0F	; 15
    225e:	49 ec       	ldi	r20, 0xC9	; 201
    2260:	5f eb       	ldi	r21, 0xBF	; 191
    2262:	06 de       	rcall	.-1012   	; 0x1e70 <__addsf3x>
    2264:	e5 df       	rcall	.-54     	; 0x2230 <__fp_round>
    2266:	0f 90       	pop	r0
    2268:	03 94       	inc	r0
    226a:	01 fc       	sbrc	r0, 1
    226c:	90 58       	subi	r25, 0x80	; 128
    226e:	e9 eb       	ldi	r30, 0xB9	; 185
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	a8 c0       	rjmp	.+336    	; 0x23c4 <__fp_powsodd>

00002274 <__fp_split3>:
    2274:	57 fd       	sbrc	r21, 7
    2276:	90 58       	subi	r25, 0x80	; 128
    2278:	44 0f       	add	r20, r20
    227a:	55 1f       	adc	r21, r21
    227c:	59 f0       	breq	.+22     	; 0x2294 <__fp_splitA+0x10>
    227e:	5f 3f       	cpi	r21, 0xFF	; 255
    2280:	71 f0       	breq	.+28     	; 0x229e <__fp_splitA+0x1a>
    2282:	47 95       	ror	r20

00002284 <__fp_splitA>:
    2284:	88 0f       	add	r24, r24
    2286:	97 fb       	bst	r25, 7
    2288:	99 1f       	adc	r25, r25
    228a:	61 f0       	breq	.+24     	; 0x22a4 <__fp_splitA+0x20>
    228c:	9f 3f       	cpi	r25, 0xFF	; 255
    228e:	79 f0       	breq	.+30     	; 0x22ae <__fp_splitA+0x2a>
    2290:	87 95       	ror	r24
    2292:	08 95       	ret
    2294:	12 16       	cp	r1, r18
    2296:	13 06       	cpc	r1, r19
    2298:	14 06       	cpc	r1, r20
    229a:	55 1f       	adc	r21, r21
    229c:	f2 cf       	rjmp	.-28     	; 0x2282 <__fp_split3+0xe>
    229e:	46 95       	lsr	r20
    22a0:	f1 df       	rcall	.-30     	; 0x2284 <__fp_splitA>
    22a2:	08 c0       	rjmp	.+16     	; 0x22b4 <__fp_splitA+0x30>
    22a4:	16 16       	cp	r1, r22
    22a6:	17 06       	cpc	r1, r23
    22a8:	18 06       	cpc	r1, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	f1 cf       	rjmp	.-30     	; 0x2290 <__fp_splitA+0xc>
    22ae:	86 95       	lsr	r24
    22b0:	71 05       	cpc	r23, r1
    22b2:	61 05       	cpc	r22, r1
    22b4:	08 94       	sec
    22b6:	08 95       	ret

000022b8 <__fp_zero>:
    22b8:	e8 94       	clt

000022ba <__fp_szero>:
    22ba:	bb 27       	eor	r27, r27
    22bc:	66 27       	eor	r22, r22
    22be:	77 27       	eor	r23, r23
    22c0:	cb 01       	movw	r24, r22
    22c2:	97 f9       	bld	r25, 7
    22c4:	08 95       	ret

000022c6 <__gesf2>:
    22c6:	2c df       	rcall	.-424    	; 0x2120 <__fp_cmp>
    22c8:	08 f4       	brcc	.+2      	; 0x22cc <__gesf2+0x6>
    22ca:	8f ef       	ldi	r24, 0xFF	; 255
    22cc:	08 95       	ret

000022ce <inverse>:
    22ce:	9b 01       	movw	r18, r22
    22d0:	ac 01       	movw	r20, r24
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	80 e8       	ldi	r24, 0x80	; 128
    22d8:	9f e3       	ldi	r25, 0x3F	; 63
    22da:	4c ce       	rjmp	.-872    	; 0x1f74 <__divsf3>

000022dc <__mulsf3>:
    22dc:	0b d0       	rcall	.+22     	; 0x22f4 <__mulsf3x>
    22de:	a8 cf       	rjmp	.-176    	; 0x2230 <__fp_round>
    22e0:	71 df       	rcall	.-286    	; 0x21c4 <__fp_pscA>
    22e2:	28 f0       	brcs	.+10     	; 0x22ee <__mulsf3+0x12>
    22e4:	76 df       	rcall	.-276    	; 0x21d2 <__fp_pscB>
    22e6:	18 f0       	brcs	.+6      	; 0x22ee <__mulsf3+0x12>
    22e8:	95 23       	and	r25, r21
    22ea:	09 f0       	breq	.+2      	; 0x22ee <__mulsf3+0x12>
    22ec:	3d cf       	rjmp	.-390    	; 0x2168 <__fp_inf>
    22ee:	42 cf       	rjmp	.-380    	; 0x2174 <__fp_nan>
    22f0:	11 24       	eor	r1, r1
    22f2:	e3 cf       	rjmp	.-58     	; 0x22ba <__fp_szero>

000022f4 <__mulsf3x>:
    22f4:	bf df       	rcall	.-130    	; 0x2274 <__fp_split3>
    22f6:	a0 f3       	brcs	.-24     	; 0x22e0 <__mulsf3+0x4>

000022f8 <__mulsf3_pse>:
    22f8:	95 9f       	mul	r25, r21
    22fa:	d1 f3       	breq	.-12     	; 0x22f0 <__mulsf3+0x14>
    22fc:	95 0f       	add	r25, r21
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	55 1f       	adc	r21, r21
    2302:	62 9f       	mul	r22, r18
    2304:	f0 01       	movw	r30, r0
    2306:	72 9f       	mul	r23, r18
    2308:	bb 27       	eor	r27, r27
    230a:	f0 0d       	add	r31, r0
    230c:	b1 1d       	adc	r27, r1
    230e:	63 9f       	mul	r22, r19
    2310:	aa 27       	eor	r26, r26
    2312:	f0 0d       	add	r31, r0
    2314:	b1 1d       	adc	r27, r1
    2316:	aa 1f       	adc	r26, r26
    2318:	64 9f       	mul	r22, r20
    231a:	66 27       	eor	r22, r22
    231c:	b0 0d       	add	r27, r0
    231e:	a1 1d       	adc	r26, r1
    2320:	66 1f       	adc	r22, r22
    2322:	82 9f       	mul	r24, r18
    2324:	22 27       	eor	r18, r18
    2326:	b0 0d       	add	r27, r0
    2328:	a1 1d       	adc	r26, r1
    232a:	62 1f       	adc	r22, r18
    232c:	73 9f       	mul	r23, r19
    232e:	b0 0d       	add	r27, r0
    2330:	a1 1d       	adc	r26, r1
    2332:	62 1f       	adc	r22, r18
    2334:	83 9f       	mul	r24, r19
    2336:	a0 0d       	add	r26, r0
    2338:	61 1d       	adc	r22, r1
    233a:	22 1f       	adc	r18, r18
    233c:	74 9f       	mul	r23, r20
    233e:	33 27       	eor	r19, r19
    2340:	a0 0d       	add	r26, r0
    2342:	61 1d       	adc	r22, r1
    2344:	23 1f       	adc	r18, r19
    2346:	84 9f       	mul	r24, r20
    2348:	60 0d       	add	r22, r0
    234a:	21 1d       	adc	r18, r1
    234c:	82 2f       	mov	r24, r18
    234e:	76 2f       	mov	r23, r22
    2350:	6a 2f       	mov	r22, r26
    2352:	11 24       	eor	r1, r1
    2354:	9f 57       	subi	r25, 0x7F	; 127
    2356:	50 40       	sbci	r21, 0x00	; 0
    2358:	8a f0       	brmi	.+34     	; 0x237c <__mulsf3_pse+0x84>
    235a:	e1 f0       	breq	.+56     	; 0x2394 <__mulsf3_pse+0x9c>
    235c:	88 23       	and	r24, r24
    235e:	4a f0       	brmi	.+18     	; 0x2372 <__mulsf3_pse+0x7a>
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	bb 1f       	adc	r27, r27
    2366:	66 1f       	adc	r22, r22
    2368:	77 1f       	adc	r23, r23
    236a:	88 1f       	adc	r24, r24
    236c:	91 50       	subi	r25, 0x01	; 1
    236e:	50 40       	sbci	r21, 0x00	; 0
    2370:	a9 f7       	brne	.-22     	; 0x235c <__mulsf3_pse+0x64>
    2372:	9e 3f       	cpi	r25, 0xFE	; 254
    2374:	51 05       	cpc	r21, r1
    2376:	70 f0       	brcs	.+28     	; 0x2394 <__mulsf3_pse+0x9c>
    2378:	f7 ce       	rjmp	.-530    	; 0x2168 <__fp_inf>
    237a:	9f cf       	rjmp	.-194    	; 0x22ba <__fp_szero>
    237c:	5f 3f       	cpi	r21, 0xFF	; 255
    237e:	ec f3       	brlt	.-6      	; 0x237a <__mulsf3_pse+0x82>
    2380:	98 3e       	cpi	r25, 0xE8	; 232
    2382:	dc f3       	brlt	.-10     	; 0x237a <__mulsf3_pse+0x82>
    2384:	86 95       	lsr	r24
    2386:	77 95       	ror	r23
    2388:	67 95       	ror	r22
    238a:	b7 95       	ror	r27
    238c:	f7 95       	ror	r31
    238e:	e7 95       	ror	r30
    2390:	9f 5f       	subi	r25, 0xFF	; 255
    2392:	c1 f7       	brne	.-16     	; 0x2384 <__mulsf3_pse+0x8c>
    2394:	fe 2b       	or	r31, r30
    2396:	88 0f       	add	r24, r24
    2398:	91 1d       	adc	r25, r1
    239a:	96 95       	lsr	r25
    239c:	87 95       	ror	r24
    239e:	97 f9       	bld	r25, 7
    23a0:	08 95       	ret

000023a2 <square>:
    23a2:	9b 01       	movw	r18, r22
    23a4:	ac 01       	movw	r20, r24
    23a6:	9a cf       	rjmp	.-204    	; 0x22dc <__mulsf3>

000023a8 <__fp_mpack>:
    23a8:	9f 3f       	cpi	r25, 0xFF	; 255
    23aa:	31 f0       	breq	.+12     	; 0x23b8 <__fp_mpack_finite+0xc>

000023ac <__fp_mpack_finite>:
    23ac:	91 50       	subi	r25, 0x01	; 1
    23ae:	20 f4       	brcc	.+8      	; 0x23b8 <__fp_mpack_finite+0xc>
    23b0:	87 95       	ror	r24
    23b2:	77 95       	ror	r23
    23b4:	67 95       	ror	r22
    23b6:	b7 95       	ror	r27
    23b8:	88 0f       	add	r24, r24
    23ba:	91 1d       	adc	r25, r1
    23bc:	96 95       	lsr	r25
    23be:	87 95       	ror	r24
    23c0:	97 f9       	bld	r25, 7
    23c2:	08 95       	ret

000023c4 <__fp_powsodd>:
    23c4:	9f 93       	push	r25
    23c6:	8f 93       	push	r24
    23c8:	7f 93       	push	r23
    23ca:	6f 93       	push	r22
    23cc:	ff 93       	push	r31
    23ce:	ef 93       	push	r30
    23d0:	9b 01       	movw	r18, r22
    23d2:	ac 01       	movw	r20, r24
    23d4:	83 df       	rcall	.-250    	; 0x22dc <__mulsf3>
    23d6:	ef 91       	pop	r30
    23d8:	ff 91       	pop	r31
    23da:	cf de       	rcall	.-610    	; 0x217a <__fp_powser>
    23dc:	2f 91       	pop	r18
    23de:	3f 91       	pop	r19
    23e0:	4f 91       	pop	r20
    23e2:	5f 91       	pop	r21
    23e4:	7b cf       	rjmp	.-266    	; 0x22dc <__mulsf3>

000023e6 <_exit>:
    23e6:	f8 94       	cli

000023e8 <__stop_program>:
    23e8:	ff cf       	rjmp	.-2      	; 0x23e8 <__stop_program>
