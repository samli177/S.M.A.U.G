
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001232  00800100  00002108  0000219c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002108  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000675  00801332  00801332  000033ce  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  000033d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  00006238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006f80  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003d0  00000000  00000000  00006faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000038ef  00000000  00000000  0000737f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f8e  00000000  00000000  0000ac6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000239d  00000000  00000000  0000bbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ba0  00000000  00000000  0000df9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d17  00000000  00000000  0000eb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002325  00000000  00000000  0000f853  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000408  00000000  00000000  00011b78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	e6 c5       	rjmp	.+3020   	; 0xbd2 <__vector_1>
       6:	00 00       	nop
       8:	0e c6       	rjmp	.+3100   	; 0xc26 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	a6 c6       	rjmp	.+3404   	; 0xd5e <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c6       	rjmp	.+3312   	; 0xd26 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	60 c6       	rjmp	.+3264   	; 0xd42 <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e8 e0       	ldi	r30, 0x08	; 8
      ec:	f1 e2       	ldi	r31, 0x21	; 33
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a2 33       	cpi	r26, 0x32	; 50
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	29 e1       	ldi	r18, 0x19	; 25
     100:	a2 e3       	ldi	r26, 0x32	; 50
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a7 3a       	cpi	r26, 0xA7	; 167
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	b5 d5       	rcall	.+2922   	; 0xc7a <main>
     110:	0c 94 82 10 	jmp	0x2104	; 0x2104 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
	if(gStatus)
     11a:	80 91 00 01 	lds	r24, 0x0100
     11e:	88 23       	and	r24, r24
     120:	d1 f0       	breq	.+52     	; 0x156 <turn_around+0x40>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     122:	6b e1       	ldi	r22, 0x1B	; 27
     124:	71 e1       	ldi	r23, 0x11	; 17
     126:	80 e8       	ldi	r24, 0x80	; 128
     128:	5b d7       	rcall	.+3766   	; 0xfe0 <TWI_send_string>
     12a:	15 c0       	rjmp	.+42     	; 0x156 <turn_around+0x40>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	6e e1       	ldi	r22, 0x1E	; 30
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <USART_send_command_parameters>
		navigation_stepping_delay();
     136:	de d1       	rcall	.+956    	; 0x4f4 <navigation_stepping_delay>
     138:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
	}
	for(int i = 0; (i < 40 && TWI_get_autonom_settings() != 0); ++i)
     13a:	21 f0       	breq	.+8      	; 0x144 <turn_around+0x2e>
     13c:	0e 94 cb 08 	call	0x1196	; 0x1196 <TWI_get_autonom_settings>
     140:	81 11       	cpse	r24, r1
     142:	f4 cf       	rjmp	.-24     	; 0x12c <turn_around+0x16>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	if(gStatus)
     144:	80 91 00 01 	lds	r24, 0x0100
     148:	88 23       	and	r24, r24
     14a:	41 f0       	breq	.+16     	; 0x15c <turn_around+0x46>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     14c:	64 e3       	ldi	r22, 0x34	; 52
     14e:	71 e1       	ldi	r23, 0x11	; 17
     150:	80 e8       	ldi	r24, 0x80	; 128
     152:	46 d7       	rcall	.+3724   	; 0xfe0 <TWI_send_string>
     154:	03 c0       	rjmp	.+6      	; 0x15c <turn_around+0x46>
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     156:	c8 e2       	ldi	r28, 0x28	; 40
     158:	d0 e0       	ldi	r29, 0x00	; 0
     15a:	f0 cf       	rjmp	.-32     	; 0x13c <turn_around+0x26>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
	}
}
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <walk_forward>:

void walk_forward()
{
     162:	8f 92       	push	r8
     164:	9f 92       	push	r9
     166:	af 92       	push	r10
     168:	bf 92       	push	r11
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     176:	33 d4       	rcall	.+2150   	; 0x9de <navigation_angle_offset>
     178:	6b 01       	movw	r12, r22
     17a:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     17c:	94 d2       	rcall	.+1320   	; 0x6a6 <navigation_direction_regulation>
     17e:	4b 01       	movw	r8, r22
     180:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	48 e4       	ldi	r20, 0x48	; 72
     188:	52 e4       	ldi	r21, 0x42	; 66
     18a:	c7 01       	movw	r24, r14
     18c:	b6 01       	movw	r22, r12
     18e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     192:	9b 01       	movw	r18, r22
     194:	ac 01       	movw	r20, r24
     196:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3>
     19a:	2b ed       	ldi	r18, 0xDB	; 219
     19c:	3f e0       	ldi	r19, 0x0F	; 15
     19e:	49 e4       	ldi	r20, 0x49	; 73
     1a0:	50 e4       	ldi	r21, 0x40	; 64
     1a2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__divsf3>
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	4c e4       	ldi	r20, 0x4C	; 76
     1ac:	52 e4       	ldi	r21, 0x42	; 66
     1ae:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3>
     1b2:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1b6:	64 36       	cpi	r22, 0x64	; 100
     1b8:	71 05       	cpc	r23, r1
     1ba:	34 f4       	brge	.+12     	; 0x1c8 <walk_forward+0x66>
     1bc:	eb 01       	movw	r28, r22
     1be:	dd 23       	and	r29, r29
     1c0:	2c f4       	brge	.+10     	; 0x1cc <walk_forward+0x6a>
     1c2:	c0 e0       	ldi	r28, 0x00	; 0
     1c4:	d0 e0       	ldi	r29, 0x00	; 0
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1c8:	c4 e6       	ldi	r28, 0x64	; 100
     1ca:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	44 eb       	ldi	r20, 0xB4	; 180
     1d2:	52 e4       	ldi	r21, 0x42	; 66
     1d4:	c5 01       	movw	r24, r10
     1d6:	b4 01       	movw	r22, r8
     1d8:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     1dc:	2b ed       	ldi	r18, 0xDB	; 219
     1de:	3f e0       	ldi	r19, 0x0F	; 15
     1e0:	49 ec       	ldi	r20, 0xC9	; 201
     1e2:	50 e4       	ldi	r21, 0x40	; 64
     1e4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__divsf3>
     1e8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fixsfsi>
     1ec:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1ee:	40 91 01 01 	lds	r20, 0x0101
     1f2:	6c 2f       	mov	r22, r28
     1f4:	82 2f       	mov	r24, r18
     1f6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1fa:	7c d1       	rcall	.+760    	; 0x4f4 <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	ff 90       	pop	r15
     202:	ef 90       	pop	r14
     204:	df 90       	pop	r13
     206:	cf 90       	pop	r12
     208:	bf 90       	pop	r11
     20a:	af 90       	pop	r10
     20c:	9f 90       	pop	r9
     20e:	8f 90       	pop	r8
     210:	08 95       	ret

00000212 <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
	if(gStatus)
     216:	80 91 00 01 	lds	r24, 0x0100
     21a:	88 23       	and	r24, r24
     21c:	01 f1       	breq	.+64     	; 0x25e <turn_right+0x4c>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     21e:	69 e5       	ldi	r22, 0x59	; 89
     220:	71 e1       	ldi	r23, 0x11	; 17
     222:	80 e8       	ldi	r24, 0x80	; 128
     224:	dd d6       	rcall	.+3514   	; 0xfe0 <TWI_send_string>
     226:	1b c0       	rjmp	.+54     	; 0x25e <turn_right+0x4c>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	66 e4       	ldi	r22, 0x46	; 70
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <USART_send_command_parameters>
		navigation_stepping_delay();
     232:	60 d1       	rcall	.+704    	; 0x4f4 <navigation_stepping_delay>
     234:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     236:	b1 f0       	breq	.+44     	; 0x264 <turn_right+0x52>
     238:	ae d7       	rcall	.+3932   	; 0x1196 <TWI_get_autonom_settings>
     23a:	81 11       	cpse	r24, r1
     23c:	f5 cf       	rjmp	.-22     	; 0x228 <turn_right+0x16>
     23e:	12 c0       	rjmp	.+36     	; 0x264 <turn_right+0x52>
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     240:	90 df       	rcall	.-224    	; 0x162 <walk_forward>
     242:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     244:	19 f0       	breq	.+6      	; 0x24c <turn_right+0x3a>
     246:	a7 d7       	rcall	.+3918   	; 0x1196 <TWI_get_autonom_settings>
     248:	81 11       	cpse	r24, r1
     24a:	fa cf       	rjmp	.-12     	; 0x240 <turn_right+0x2e>
	{
		walk_forward();
	}
	if(gStatus)
     24c:	80 91 00 01 	lds	r24, 0x0100
     250:	88 23       	and	r24, r24
     252:	59 f0       	breq	.+22     	; 0x26a <turn_right+0x58>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     254:	61 e7       	ldi	r22, 0x71	; 113
     256:	71 e1       	ldi	r23, 0x11	; 17
     258:	80 e8       	ldi	r24, 0x80	; 128
     25a:	c2 d6       	rcall	.+3460   	; 0xfe0 <TWI_send_string>
     25c:	06 c0       	rjmp	.+12     	; 0x26a <turn_right+0x58>
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     25e:	c4 e1       	ldi	r28, 0x14	; 20
     260:	d0 e0       	ldi	r29, 0x00	; 0
     262:	ea cf       	rjmp	.-44     	; 0x238 <turn_right+0x26>
     264:	cc e0       	ldi	r28, 0x0C	; 12
     266:	d0 e0       	ldi	r29, 0x00	; 0
     268:	ee cf       	rjmp	.-36     	; 0x246 <turn_right+0x34>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
	if(gStatus)
     274:	80 91 00 01 	lds	r24, 0x0100
     278:	88 23       	and	r24, r24
     27a:	01 f1       	breq	.+64     	; 0x2bc <turn_left+0x4c>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     27c:	65 e8       	ldi	r22, 0x85	; 133
     27e:	71 e1       	ldi	r23, 0x11	; 17
     280:	80 e8       	ldi	r24, 0x80	; 128
     282:	ae d6       	rcall	.+3420   	; 0xfe0 <TWI_send_string>
     284:	1b c0       	rjmp	.+54     	; 0x2bc <turn_left+0x4c>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	6e e1       	ldi	r22, 0x1E	; 30
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <USART_send_command_parameters>
		navigation_stepping_delay();
     290:	31 d1       	rcall	.+610    	; 0x4f4 <navigation_stepping_delay>
     292:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     294:	b1 f0       	breq	.+44     	; 0x2c2 <turn_left+0x52>
     296:	7f d7       	rcall	.+3838   	; 0x1196 <TWI_get_autonom_settings>
     298:	81 11       	cpse	r24, r1
     29a:	f5 cf       	rjmp	.-22     	; 0x286 <turn_left+0x16>
     29c:	12 c0       	rjmp	.+36     	; 0x2c2 <turn_left+0x52>
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     29e:	61 df       	rcall	.-318    	; 0x162 <walk_forward>
     2a0:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     2a2:	19 f0       	breq	.+6      	; 0x2aa <turn_left+0x3a>
     2a4:	78 d7       	rcall	.+3824   	; 0x1196 <TWI_get_autonom_settings>
     2a6:	81 11       	cpse	r24, r1
     2a8:	fa cf       	rjmp	.-12     	; 0x29e <turn_left+0x2e>
	{
		walk_forward();
	}
	if(gStatus)
     2aa:	80 91 00 01 	lds	r24, 0x0100
     2ae:	88 23       	and	r24, r24
     2b0:	59 f0       	breq	.+22     	; 0x2c8 <turn_left+0x58>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2b2:	6c e9       	ldi	r22, 0x9C	; 156
     2b4:	71 e1       	ldi	r23, 0x11	; 17
     2b6:	80 e8       	ldi	r24, 0x80	; 128
     2b8:	93 d6       	rcall	.+3366   	; 0xfe0 <TWI_send_string>
     2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <turn_left+0x58>
{
	return gStatus;
}

void turn_left()
{
     2bc:	c4 e1       	ldi	r28, 0x14	; 20
     2be:	d0 e0       	ldi	r29, 0x00	; 0
     2c0:	ea cf       	rjmp	.-44     	; 0x296 <turn_left+0x26>
     2c2:	cc e0       	ldi	r28, 0x0C	; 12
     2c4:	d0 e0       	ldi	r29, 0x00	; 0
     2c6:	ee cf       	rjmp	.-36     	; 0x2a4 <turn_left+0x34>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <autonomouswalk_walk>:
	navigation_stepping_delay();
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void autonomouswalk_walk()
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
	navigation_low_pass_obstacle();
     2d2:	99 d1       	rcall	.+818    	; 0x606 <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     2d4:	03 d1       	rcall	.+518    	; 0x4dc <navigation_left_algorithm>
     2d6:	88 23       	and	r24, r24
     2d8:	29 f1       	breq	.+74     	; 0x324 <autonomouswalk_walk+0x56>
	{
		if(navigation_check_left_turn() == 2)
     2da:	d0 d1       	rcall	.+928    	; 0x67c <navigation_check_left_turn>
     2dc:	82 30       	cpi	r24, 0x02	; 2
     2de:	61 f4       	brne	.+24     	; 0x2f8 <autonomouswalk_walk+0x2a>
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <autonomouswalk_walk+0x1c>
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     2e2:	3f df       	rcall	.-386    	; 0x162 <walk_forward>
     2e4:	21 97       	sbiw	r28, 0x01	; 1
	navigation_low_pass_obstacle();
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     2e6:	19 f4       	brne	.+6      	; 0x2ee <autonomouswalk_walk+0x20>
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <autonomouswalk_walk+0x26>
void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
     2ea:	c4 e0       	ldi	r28, 0x04	; 4
     2ec:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     2ee:	53 d7       	rcall	.+3750   	; 0x1196 <TWI_get_autonom_settings>
     2f0:	81 11       	cpse	r24, r1
     2f2:	f7 cf       	rjmp	.-18     	; 0x2e2 <autonomouswalk_walk+0x14>
			{
				walk_forward();
			}
			turn_left();
     2f4:	bd df       	rcall	.-134    	; 0x270 <turn_left>
     2f6:	4e c0       	rjmp	.+156    	; 0x394 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	3d d1       	rcall	.+634    	; 0x578 <navigation_get_sensor>
     2fe:	89 32       	cpi	r24, 0x29	; 41
     300:	10 f0       	brcs	.+4      	; 0x306 <autonomouswalk_walk+0x38>
		{
			walk_forward();
     302:	2f df       	rcall	.-418    	; 0x162 <walk_forward>
     304:	47 c0       	rjmp	.+142    	; 0x394 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_check_right_turn() == 2)
     306:	a5 d1       	rcall	.+842    	; 0x652 <navigation_check_right_turn>
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	11 f4       	brne	.+4      	; 0x310 <autonomouswalk_walk+0x42>
		{
			turn_right();
     30c:	82 df       	rcall	.-252    	; 0x212 <turn_right>
     30e:	42 c0       	rjmp	.+132    	; 0x394 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     310:	b5 d1       	rcall	.+874    	; 0x67c <navigation_check_left_turn>
     312:	81 11       	cpse	r24, r1
     314:	05 c0       	rjmp	.+10     	; 0x320 <autonomouswalk_walk+0x52>
     316:	9d d1       	rcall	.+826    	; 0x652 <navigation_check_right_turn>
     318:	81 11       	cpse	r24, r1
     31a:	02 c0       	rjmp	.+4      	; 0x320 <autonomouswalk_walk+0x52>
		{
			turn_around();
     31c:	fc de       	rcall	.-520    	; 0x116 <turn_around>
     31e:	3a c0       	rjmp	.+116    	; 0x394 <autonomouswalk_walk+0xc6>
		}
		else
		{
			walk_forward();
     320:	20 df       	rcall	.-448    	; 0x162 <walk_forward>
     322:	38 c0       	rjmp	.+112    	; 0x394 <autonomouswalk_walk+0xc6>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     324:	96 d1       	rcall	.+812    	; 0x652 <navigation_check_right_turn>
     326:	82 30       	cpi	r24, 0x02	; 2
     328:	61 f4       	brne	.+24     	; 0x342 <autonomouswalk_walk+0x74>
     32a:	04 c0       	rjmp	.+8      	; 0x334 <autonomouswalk_walk+0x66>
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     32c:	1a df       	rcall	.-460    	; 0x162 <walk_forward>
     32e:	21 97       	sbiw	r28, 0x01	; 1
	}
	else
	{
		if(navigation_check_right_turn() == 2)
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     330:	19 f4       	brne	.+6      	; 0x338 <autonomouswalk_walk+0x6a>
     332:	05 c0       	rjmp	.+10     	; 0x33e <autonomouswalk_walk+0x70>
			walk_forward();
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     334:	c4 e0       	ldi	r28, 0x04	; 4
     336:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     338:	2e d7       	rcall	.+3676   	; 0x1196 <TWI_get_autonom_settings>
     33a:	81 11       	cpse	r24, r1
     33c:	f7 cf       	rjmp	.-18     	; 0x32c <autonomouswalk_walk+0x5e>
			{
				walk_forward();
			}
			turn_right();
     33e:	69 df       	rcall	.-302    	; 0x212 <turn_right>
     340:	29 c0       	rjmp	.+82     	; 0x394 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     342:	84 e0       	ldi	r24, 0x04	; 4
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	18 d1       	rcall	.+560    	; 0x578 <navigation_get_sensor>
     348:	89 32       	cpi	r24, 0x29	; 41
     34a:	10 f0       	brcs	.+4      	; 0x350 <autonomouswalk_walk+0x82>
		{
			walk_forward();
     34c:	0a df       	rcall	.-492    	; 0x162 <walk_forward>
     34e:	22 c0       	rjmp	.+68     	; 0x394 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_check_left_turn() == 2)
     350:	95 d1       	rcall	.+810    	; 0x67c <navigation_check_left_turn>
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	11 f4       	brne	.+4      	; 0x35a <autonomouswalk_walk+0x8c>
		{
			turn_left();
     356:	8c df       	rcall	.-232    	; 0x270 <turn_left>
     358:	1d c0       	rjmp	.+58     	; 0x394 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     35a:	90 d1       	rcall	.+800    	; 0x67c <navigation_check_left_turn>
     35c:	81 11       	cpse	r24, r1
     35e:	05 c0       	rjmp	.+10     	; 0x36a <autonomouswalk_walk+0x9c>
     360:	78 d1       	rcall	.+752    	; 0x652 <navigation_check_right_turn>
     362:	81 11       	cpse	r24, r1
     364:	02 c0       	rjmp	.+4      	; 0x36a <autonomouswalk_walk+0x9c>
		{
			turn_around();
     366:	d7 de       	rcall	.-594    	; 0x116 <turn_around>
     368:	15 c0       	rjmp	.+42     	; 0x394 <autonomouswalk_walk+0xc6>
		}
		else if(decisionCounter < 4)
     36a:	80 91 32 13 	lds	r24, 0x1332
     36e:	84 30       	cpi	r24, 0x04	; 4
     370:	38 f4       	brcc	.+14     	; 0x380 <autonomouswalk_walk+0xb2>
		{
			walk_forward();
     372:	f7 de       	rcall	.-530    	; 0x162 <walk_forward>
			++decisionCounter;
     374:	80 91 32 13 	lds	r24, 0x1332
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	80 93 32 13 	sts	0x1332, r24
     37e:	0a c0       	rjmp	.+20     	; 0x394 <autonomouswalk_walk+0xc6>
		}
		else
		{
			decisionCounter = 0;
     380:	10 92 32 13 	sts	0x1332, r1
			navigation_set_autonomous_walk(0);
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	b3 d0       	rcall	.+358    	; 0x4ee <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     388:	49 e3       	ldi	r20, 0x39	; 57
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	6f ea       	ldi	r22, 0xAF	; 175
     38e:	71 e1       	ldi	r23, 0x11	; 17
     390:	80 e8       	ldi	r24, 0x80	; 128
     392:	6c d6       	rcall	.+3288   	; 0x106c <TWI_send_string_fixed_length>
		}
	}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     39a:	bc 01       	movw	r22, r24
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__floatunsisf>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	4a e7       	ldi	r20, 0x7A	; 122
     3aa:	51 e4       	ldi	r21, 0x41	; 65
     3ac:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     3b0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fixunssfsi>
	OCR1A = delay;
     3b4:	70 93 89 00 	sts	0x0089, r23
     3b8:	60 93 88 00 	sts	0x0088, r22
     3bc:	08 95       	ret

000003be <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     3be:	bc 01       	movw	r22, r24
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__floatunsisf>
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	4a e7       	ldi	r20, 0x7A	; 122
     3ce:	51 e4       	ldi	r21, 0x41	; 65
     3d0:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     3d4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fixunssfsi>
	OCR3A = delay;
     3d8:	70 93 99 00 	sts	0x0099, r23
     3dc:	60 93 98 00 	sts	0x0098, r22
     3e0:	08 95       	ret

000003e2 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     3e2:	e1 e8       	ldi	r30, 0x81	; 129
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	85 60       	ori	r24, 0x05	; 5
     3ea:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     3ec:	e1 e9       	ldi	r30, 0x91	; 145
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	85 60       	ori	r24, 0x05	; 5
     3f4:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     3f6:	88 ee       	ldi	r24, 0xE8	; 232
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	cf df       	rcall	.-98     	; 0x39a <set_counter_1>
	set_counter_2(1000);
     3fc:	88 ee       	ldi	r24, 0xE8	; 232
     3fe:	93 e0       	ldi	r25, 0x03	; 3
     400:	de df       	rcall	.-68     	; 0x3be <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     402:	ef e6       	ldi	r30, 0x6F	; 111
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	82 60       	ori	r24, 0x02	; 2
     40a:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     40c:	e1 e7       	ldi	r30, 0x71	; 113
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	82 60       	ori	r24, 0x02	; 2
     414:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     416:	10 92 85 00 	sts	0x0085, r1
     41a:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     41e:	10 92 95 00 	sts	0x0095, r1
     422:	10 92 94 00 	sts	0x0094, r1
     426:	08 95       	ret

00000428 <FifoDataLength>:
     428:	fc 01       	movw	r30, r24
     42a:	90 81       	ld	r25, Z
     42c:	91 50       	subi	r25, 0x01	; 1
     42e:	84 81       	ldd	r24, Z+4	; 0x04
     430:	22 81       	ldd	r18, Z+2	; 0x02
     432:	82 1b       	sub	r24, r18
     434:	89 23       	and	r24, r25
     436:	08 95       	ret

00000438 <FifoWrite>:
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
     440:	16 2f       	mov	r17, r22
     442:	f2 df       	rcall	.-28     	; 0x428 <FifoDataLength>
     444:	28 81       	ld	r18, Y
     446:	39 81       	ldd	r19, Y+1	; 0x01
     448:	21 50       	subi	r18, 0x01	; 1
     44a:	31 09       	sbc	r19, r1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	82 17       	cp	r24, r18
     450:	93 07       	cpc	r25, r19
     452:	69 f0       	breq	.+26     	; 0x46e <FifoWrite+0x36>
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	9d 81       	ldd	r25, Y+5	; 0x05
     458:	fe 01       	movw	r30, r28
     45a:	e8 0f       	add	r30, r24
     45c:	f9 1f       	adc	r31, r25
     45e:	16 83       	std	Z+6, r17	; 0x06
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	28 23       	and	r18, r24
     464:	39 23       	and	r19, r25
     466:	3d 83       	std	Y+5, r19	; 0x05
     468:	2c 83       	std	Y+4, r18	; 0x04
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	01 c0       	rjmp	.+2      	; 0x470 <FifoWrite+0x38>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	08 95       	ret

00000478 <FifoRead>:
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
     482:	8b 01       	movw	r16, r22
     484:	d1 df       	rcall	.-94     	; 0x428 <FifoDataLength>
     486:	88 23       	and	r24, r24
     488:	a1 f0       	breq	.+40     	; 0x4b2 <FifoRead+0x3a>
     48a:	ea 81       	ldd	r30, Y+2	; 0x02
     48c:	fb 81       	ldd	r31, Y+3	; 0x03
     48e:	ec 0f       	add	r30, r28
     490:	fd 1f       	adc	r31, r29
     492:	86 81       	ldd	r24, Z+6	; 0x06
     494:	f8 01       	movw	r30, r16
     496:	80 83       	st	Z, r24
     498:	28 81       	ld	r18, Y
     49a:	39 81       	ldd	r19, Y+1	; 0x01
     49c:	21 50       	subi	r18, 0x01	; 1
     49e:	31 09       	sbc	r19, r1
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	9b 81       	ldd	r25, Y+3	; 0x03
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	82 23       	and	r24, r18
     4a8:	93 23       	and	r25, r19
     4aa:	9b 83       	std	Y+3, r25	; 0x03
     4ac:	8a 83       	std	Y+2, r24	; 0x02
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <FifoRead+0x3c>
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	08 95       	ret

000004be <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     4be:	68 2f       	mov	r22, r24
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__floatunsisf>
     4ca:	60 93 03 01 	sts	0x0103, r22
     4ce:	70 93 04 01 	sts	0x0104, r23
     4d2:	80 93 05 01 	sts	0x0105, r24
     4d6:	90 93 06 01 	sts	0x0106, r25
     4da:	08 95       	ret

000004dc <navigation_left_algorithm>:
     4dc:	80 91 07 01 	lds	r24, 0x0107
     4e0:	08 95       	ret

000004e2 <navigation_set_algorithm>:
     4e2:	80 93 07 01 	sts	0x0107, r24
     4e6:	08 95       	ret

000004e8 <navigation_autonomous_walk>:
     4e8:	80 91 02 01 	lds	r24, 0x0102
     4ec:	08 95       	ret

000004ee <navigation_set_autonomous_walk>:
     4ee:	80 93 02 01 	sts	0x0102, r24
     4f2:	08 95       	ret

000004f4 <navigation_stepping_delay>:
     4f4:	cf 93       	push	r28
     4f6:	c2 e0       	ldi	r28, 0x02	; 2
     4f8:	0e c0       	rjmp	.+28     	; 0x516 <navigation_stepping_delay+0x22>
     4fa:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <USART_DecodeRxFIFO>
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	89 ef       	ldi	r24, 0xF9	; 249
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	21 50       	subi	r18, 0x01	; 1
     506:	80 40       	sbci	r24, 0x00	; 0
     508:	90 40       	sbci	r25, 0x00	; 0
     50a:	e1 f7       	brne	.-8      	; 0x504 <navigation_stepping_delay+0x10>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <navigation_stepping_delay+0x1a>
     50e:	00 00       	nop
     510:	82 b1       	in	r24, 0x02	; 2
     512:	8c 27       	eor	r24, r28
     514:	82 b9       	out	0x02, r24	; 2
     516:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <USART_ready>
     51a:	88 23       	and	r24, r24
     51c:	71 f3       	breq	.-36     	; 0x4fa <navigation_stepping_delay+0x6>
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <navigation_fill_buffer>:
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	c0 e0       	ldi	r28, 0x00	; 0
     52c:	d0 e0       	ldi	r29, 0x00	; 0
     52e:	00 91 34 13 	lds	r16, 0x1334
     532:	10 e0       	ldi	r17, 0x00	; 0
     534:	ce 01       	movw	r24, r28
     536:	25 d6       	rcall	.+3146   	; 0x1182 <TWI_get_sensor>
     538:	fe 01       	movw	r30, r28
     53a:	ee 0f       	add	r30, r30
     53c:	ff 1f       	adc	r31, r31
     53e:	ee 0f       	add	r30, r30
     540:	ff 1f       	adc	r31, r31
     542:	ec 0f       	add	r30, r28
     544:	fd 1f       	adc	r31, r29
     546:	0e 0f       	add	r16, r30
     548:	1f 1f       	adc	r17, r31
     54a:	f8 01       	movw	r30, r16
     54c:	e8 5b       	subi	r30, 0xB8	; 184
     54e:	fc 4e       	sbci	r31, 0xEC	; 236
     550:	80 83       	st	Z, r24
     552:	21 96       	adiw	r28, 0x01	; 1
     554:	c8 30       	cpi	r28, 0x08	; 8
     556:	d1 05       	cpc	r29, r1
     558:	51 f7       	brne	.-44     	; 0x52e <navigation_fill_buffer+0xc>
     55a:	80 91 34 13 	lds	r24, 0x1334
     55e:	84 30       	cpi	r24, 0x04	; 4
     560:	19 f4       	brne	.+6      	; 0x568 <navigation_fill_buffer+0x46>
     562:	10 92 34 13 	sts	0x1334, r1
     566:	03 c0       	rjmp	.+6      	; 0x56e <navigation_fill_buffer+0x4c>
     568:	8f 5f       	subi	r24, 0xFF	; 255
     56a:	80 93 34 13 	sts	0x1334, r24
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	08 95       	ret

00000578 <navigation_get_sensor>:
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	00 d0       	rcall	.+0      	; 0x57e <navigation_get_sensor+0x6>
     57e:	00 d0       	rcall	.+0      	; 0x580 <navigation_get_sensor+0x8>
     580:	1f 92       	push	r1
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	fc 01       	movw	r30, r24
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	8e 0f       	add	r24, r30
     592:	9f 1f       	adc	r25, r31
     594:	fc 01       	movw	r30, r24
     596:	e8 5b       	subi	r30, 0xB8	; 184
     598:	fc 4e       	sbci	r31, 0xEC	; 236
     59a:	80 81       	ld	r24, Z
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	81 81       	ldd	r24, Z+1	; 0x01
     5a0:	8a 83       	std	Y+2, r24	; 0x02
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	8b 83       	std	Y+3, r24	; 0x03
     5a6:	83 81       	ldd	r24, Z+3	; 0x03
     5a8:	8c 83       	std	Y+4, r24	; 0x04
     5aa:	84 81       	ldd	r24, Z+4	; 0x04
     5ac:	8d 83       	std	Y+5, r24	; 0x05
     5ae:	24 e0       	ldi	r18, 0x04	; 4
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	0e c0       	rjmp	.+28     	; 0x5d0 <navigation_get_sensor+0x58>
     5b4:	41 91       	ld	r20, Z+
     5b6:	50 81       	ld	r21, Z
     5b8:	54 17       	cp	r21, r20
     5ba:	20 f4       	brcc	.+8      	; 0x5c4 <navigation_get_sensor+0x4c>
     5bc:	df 01       	movw	r26, r30
     5be:	11 97       	sbiw	r26, 0x01	; 1
     5c0:	5c 93       	st	X, r21
     5c2:	40 83       	st	Z, r20
     5c4:	8e 17       	cp	r24, r30
     5c6:	9f 07       	cpc	r25, r31
     5c8:	a9 f7       	brne	.-22     	; 0x5b4 <navigation_get_sensor+0x3c>
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	31 09       	sbc	r19, r1
     5ce:	49 f0       	breq	.+18     	; 0x5e2 <navigation_get_sensor+0x6a>
     5d0:	12 16       	cp	r1, r18
     5d2:	13 06       	cpc	r1, r19
     5d4:	d4 f7       	brge	.-12     	; 0x5ca <navigation_get_sensor+0x52>
     5d6:	fe 01       	movw	r30, r28
     5d8:	31 96       	adiw	r30, 0x01	; 1
     5da:	cf 01       	movw	r24, r30
     5dc:	82 0f       	add	r24, r18
     5de:	93 1f       	adc	r25, r19
     5e0:	e9 cf       	rjmp	.-46     	; 0x5b4 <navigation_get_sensor+0x3c>
     5e2:	8b 81       	ldd	r24, Y+3	; 0x03
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(sensorBufferSize) < HEIGHT_LIMIT)
     5f4:	85 e0       	ldi	r24, 0x05	; 5
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	bf df       	rcall	.-130    	; 0x578 <navigation_get_sensor>
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	84 36       	cpi	r24, 0x64	; 100
     5fe:	08 f0       	brcs	.+2      	; 0x602 <navigation_detect_low_pass_obsticle+0xe>
     600:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     602:	89 2f       	mov	r24, r25
     604:	08 95       	ret

00000606 <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     606:	f6 df       	rcall	.-20     	; 0x5f4 <navigation_detect_low_pass_obsticle>
     608:	88 23       	and	r24, r24
     60a:	e9 f0       	breq	.+58     	; 0x646 <navigation_low_pass_obstacle+0x40>
     60c:	80 91 33 13 	lds	r24, 0x1333
     610:	81 11       	cpse	r24, r1
     612:	19 c0       	rjmp	.+50     	; 0x646 <navigation_low_pass_obstacle+0x40>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     614:	4b e1       	ldi	r20, 0x1B	; 27
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	69 ee       	ldi	r22, 0xE9	; 233
     61a:	71 e1       	ldi	r23, 0x11	; 17
     61c:	80 e4       	ldi	r24, 0x40	; 64
     61e:	26 d5       	rcall	.+2636   	; 0x106c <TWI_send_string_fixed_length>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     620:	2f ef       	ldi	r18, 0xFF	; 255
     622:	86 e7       	ldi	r24, 0x76	; 118
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	21 50       	subi	r18, 0x01	; 1
     628:	80 40       	sbci	r24, 0x00	; 0
     62a:	90 40       	sbci	r25, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <navigation_low_pass_obstacle+0x20>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <navigation_low_pass_obstacle+0x2a>
     630:	00 00       	nop
		_delay_ms(30);
		TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);
     632:	4b e1       	ldi	r20, 0x1B	; 27
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	69 ee       	ldi	r22, 0xE9	; 233
     638:	71 e1       	ldi	r23, 0x11	; 17
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	17 d5       	rcall	.+2606   	; 0x106c <TWI_send_string_fixed_length>
		lowPassObstacleFlag = 1;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 33 13 	sts	0x1333, r24
     644:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     646:	d6 df       	rcall	.-84     	; 0x5f4 <navigation_detect_low_pass_obsticle>
     648:	81 11       	cpse	r24, r1
     64a:	02 c0       	rjmp	.+4      	; 0x650 <navigation_low_pass_obstacle+0x4a>
	{
		lowPassObstacleFlag = 0;
     64c:	10 92 33 13 	sts	0x1333, r1
     650:	08 95       	ret

00000652 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	90 df       	rcall	.-224    	; 0x578 <navigation_get_sensor>
     658:	8c 33       	cpi	r24, 0x3C	; 60
     65a:	28 f0       	brcs	.+10     	; 0x666 <navigation_check_right_turn+0x14>
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	8b df       	rcall	.-234    	; 0x578 <navigation_get_sensor>
     662:	8c 33       	cpi	r24, 0x3C	; 60
     664:	40 f4       	brcc	.+16     	; 0x676 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	86 df       	rcall	.-244    	; 0x578 <navigation_get_sensor>
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	86 34       	cpi	r24, 0x46	; 70
     670:	18 f4       	brcc	.+6      	; 0x678 <navigation_check_right_turn+0x26>
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	01 c0       	rjmp	.+2      	; 0x678 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     676:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     678:	89 2f       	mov	r24, r25
     67a:	08 95       	ret

0000067c <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	7b df       	rcall	.-266    	; 0x578 <navigation_get_sensor>
     682:	8c 33       	cpi	r24, 0x3C	; 60
     684:	28 f0       	brcs	.+10     	; 0x690 <navigation_check_left_turn+0x14>
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	76 df       	rcall	.-276    	; 0x578 <navigation_get_sensor>
     68c:	8c 33       	cpi	r24, 0x3C	; 60
     68e:	40 f4       	brcc	.+16     	; 0x6a0 <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	71 df       	rcall	.-286    	; 0x578 <navigation_get_sensor>
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	86 34       	cpi	r24, 0x46	; 70
     69a:	18 f4       	brcc	.+6      	; 0x6a2 <navigation_check_left_turn+0x26>
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     6a0:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     6a2:	89 2f       	mov	r24, r25
     6a4:	08 95       	ret

000006a6 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	6b 01       	movw	r12, r22
     6b4:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     6b6:	80 91 07 01 	lds	r24, 0x0107
     6ba:	88 23       	and	r24, r24
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <navigation_direction_regulation+0x1a>
     6be:	98 c0       	rjmp	.+304    	; 0x7f0 <navigation_direction_regulation+0x14a>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	59 df       	rcall	.-334    	; 0x578 <navigation_get_sensor>
     6c6:	c8 2f       	mov	r28, r24
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	55 df       	rcall	.-342    	; 0x578 <navigation_get_sensor>
     6ce:	2c 2f       	mov	r18, r28
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	a9 01       	movw	r20, r18
     6d4:	48 1b       	sub	r20, r24
     6d6:	51 09       	sbc	r21, r1
     6d8:	ca 01       	movw	r24, r20
     6da:	99 23       	and	r25, r25
     6dc:	1c f4       	brge	.+6      	; 0x6e4 <navigation_direction_regulation+0x3e>
     6de:	91 95       	neg	r25
     6e0:	81 95       	neg	r24
     6e2:	91 09       	sbc	r25, r1
     6e4:	0a 97       	sbiw	r24, 0x0a	; 10
     6e6:	b4 f5       	brge	.+108    	; 0x754 <navigation_direction_regulation+0xae>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	45 df       	rcall	.-374    	; 0x578 <navigation_get_sensor>
     6ee:	82 33       	cpi	r24, 0x32	; 50
     6f0:	88 f5       	brcc	.+98     	; 0x754 <navigation_direction_regulation+0xae>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	40 df       	rcall	.-384    	; 0x578 <navigation_get_sensor>
     6f8:	c8 2f       	mov	r28, r24
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	3c df       	rcall	.-392    	; 0x578 <navigation_get_sensor>
     700:	d8 2f       	mov	r29, r24
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <cos>
     70a:	6b 01       	movw	r12, r22
     70c:	7c 01       	movw	r14, r24
     70e:	6d 2f       	mov	r22, r29
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	6c 0f       	add	r22, r28
     714:	71 1d       	adc	r23, r1
     716:	88 27       	eor	r24, r24
     718:	77 fd       	sbrc	r23, 7
     71a:	80 95       	com	r24
     71c:	98 2f       	mov	r25, r24
     71e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__floatsisf>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	5f e3       	ldi	r21, 0x3F	; 63
     72a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 ef       	ldi	r20, 0xF0	; 240
     734:	50 e4       	ldi	r21, 0x40	; 64
     736:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3>
     73a:	a7 01       	movw	r20, r14
     73c:	96 01       	movw	r18, r12
     73e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e2       	ldi	r20, 0x20	; 32
     748:	52 e4       	ldi	r21, 0x42	; 66
     74a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__subsf3>
     74e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fixsfsi>
     752:	e5 c0       	rjmp	.+458    	; 0x91e <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0f df       	rcall	.-482    	; 0x578 <navigation_get_sensor>
     75a:	c8 2f       	mov	r28, r24
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0b df       	rcall	.-490    	; 0x578 <navigation_get_sensor>
     762:	2c 2f       	mov	r18, r28
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	a9 01       	movw	r20, r18
     768:	48 1b       	sub	r20, r24
     76a:	51 09       	sbc	r21, r1
     76c:	ca 01       	movw	r24, r20
     76e:	99 23       	and	r25, r25
     770:	1c f4       	brge	.+6      	; 0x778 <navigation_direction_regulation+0xd2>
     772:	91 95       	neg	r25
     774:	81 95       	neg	r24
     776:	91 09       	sbc	r25, r1
     778:	0a 97       	sbiw	r24, 0x0a	; 10
     77a:	0c f0       	brlt	.+2      	; 0x77e <navigation_direction_regulation+0xd8>
     77c:	21 c1       	rjmp	.+578    	; 0x9c0 <navigation_direction_regulation+0x31a>
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	fa de       	rcall	.-524    	; 0x578 <navigation_get_sensor>
     784:	82 33       	cpi	r24, 0x32	; 50
     786:	08 f0       	brcs	.+2      	; 0x78a <navigation_direction_regulation+0xe4>
     788:	1b c1       	rjmp	.+566    	; 0x9c0 <navigation_direction_regulation+0x31a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	f4 de       	rcall	.-536    	; 0x578 <navigation_get_sensor>
     790:	c8 2f       	mov	r28, r24
     792:	83 e0       	ldi	r24, 0x03	; 3
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	f0 de       	rcall	.-544    	; 0x578 <navigation_get_sensor>
     798:	d8 2f       	mov	r29, r24
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <cos>
     7a2:	6b 01       	movw	r12, r22
     7a4:	7c 01       	movw	r14, r24
     7a6:	6d 2f       	mov	r22, r29
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	6c 0f       	add	r22, r28
     7ac:	71 1d       	adc	r23, r1
     7ae:	88 27       	eor	r24, r24
     7b0:	77 fd       	sbrc	r23, 7
     7b2:	80 95       	com	r24
     7b4:	98 2f       	mov	r25, r24
     7b6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__floatsisf>
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	5f e3       	ldi	r21, 0x3F	; 63
     7c2:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 ef       	ldi	r20, 0xF0	; 240
     7cc:	50 e4       	ldi	r21, 0x40	; 64
     7ce:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3>
     7d2:	a7 01       	movw	r20, r14
     7d4:	96 01       	movw	r18, r12
     7d6:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     7da:	9b 01       	movw	r18, r22
     7dc:	ac 01       	movw	r20, r24
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	80 e2       	ldi	r24, 0x20	; 32
     7e4:	92 e4       	ldi	r25, 0x42	; 66
     7e6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__subsf3>
     7ea:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fixsfsi>
     7ee:	97 c0       	rjmp	.+302    	; 0x91e <navigation_direction_regulation+0x278>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	c1 de       	rcall	.-638    	; 0x578 <navigation_get_sensor>
     7f6:	c8 2f       	mov	r28, r24
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	bd de       	rcall	.-646    	; 0x578 <navigation_get_sensor>
     7fe:	2c 2f       	mov	r18, r28
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	a9 01       	movw	r20, r18
     804:	48 1b       	sub	r20, r24
     806:	51 09       	sbc	r21, r1
     808:	ca 01       	movw	r24, r20
     80a:	99 23       	and	r25, r25
     80c:	1c f4       	brge	.+6      	; 0x814 <navigation_direction_regulation+0x16e>
     80e:	91 95       	neg	r25
     810:	81 95       	neg	r24
     812:	91 09       	sbc	r25, r1
     814:	0a 97       	sbiw	r24, 0x0a	; 10
     816:	c4 f5       	brge	.+112    	; 0x888 <navigation_direction_regulation+0x1e2>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	ad de       	rcall	.-678    	; 0x578 <navigation_get_sensor>
     81e:	82 33       	cpi	r24, 0x32	; 50
     820:	98 f5       	brcc	.+102    	; 0x888 <navigation_direction_regulation+0x1e2>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a8 de       	rcall	.-688    	; 0x578 <navigation_get_sensor>
     828:	c8 2f       	mov	r28, r24
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	a4 de       	rcall	.-696    	; 0x578 <navigation_get_sensor>
     830:	d8 2f       	mov	r29, r24
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <cos>
     83a:	6b 01       	movw	r12, r22
     83c:	7c 01       	movw	r14, r24
     83e:	6d 2f       	mov	r22, r29
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	6c 0f       	add	r22, r28
     844:	71 1d       	adc	r23, r1
     846:	88 27       	eor	r24, r24
     848:	77 fd       	sbrc	r23, 7
     84a:	80 95       	com	r24
     84c:	98 2f       	mov	r25, r24
     84e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__floatsisf>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	5f e3       	ldi	r21, 0x3F	; 63
     85a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 ef       	ldi	r20, 0xF0	; 240
     864:	50 e4       	ldi	r21, 0x40	; 64
     866:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3>
     86a:	a7 01       	movw	r20, r14
     86c:	96 01       	movw	r18, r12
     86e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     872:	9b 01       	movw	r18, r22
     874:	ac 01       	movw	r20, r24
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	80 e2       	ldi	r24, 0x20	; 32
     87c:	92 e4       	ldi	r25, 0x42	; 66
     87e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__subsf3>
     882:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fixsfsi>
     886:	4b c0       	rjmp	.+150    	; 0x91e <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	75 de       	rcall	.-790    	; 0x578 <navigation_get_sensor>
     88e:	c8 2f       	mov	r28, r24
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	71 de       	rcall	.-798    	; 0x578 <navigation_get_sensor>
     896:	2c 2f       	mov	r18, r28
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	a9 01       	movw	r20, r18
     89c:	48 1b       	sub	r20, r24
     89e:	51 09       	sbc	r21, r1
     8a0:	ca 01       	movw	r24, r20
     8a2:	99 23       	and	r25, r25
     8a4:	1c f4       	brge	.+6      	; 0x8ac <navigation_direction_regulation+0x206>
     8a6:	91 95       	neg	r25
     8a8:	81 95       	neg	r24
     8aa:	91 09       	sbc	r25, r1
     8ac:	0a 97       	sbiw	r24, 0x0a	; 10
     8ae:	0c f0       	brlt	.+2      	; 0x8b2 <navigation_direction_regulation+0x20c>
     8b0:	87 c0       	rjmp	.+270    	; 0x9c0 <navigation_direction_regulation+0x31a>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	60 de       	rcall	.-832    	; 0x578 <navigation_get_sensor>
     8b8:	82 33       	cpi	r24, 0x32	; 50
     8ba:	08 f0       	brcs	.+2      	; 0x8be <navigation_direction_regulation+0x218>
     8bc:	81 c0       	rjmp	.+258    	; 0x9c0 <navigation_direction_regulation+0x31a>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	5a de       	rcall	.-844    	; 0x578 <navigation_get_sensor>
     8c4:	c8 2f       	mov	r28, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	56 de       	rcall	.-852    	; 0x578 <navigation_get_sensor>
     8cc:	d8 2f       	mov	r29, r24
     8ce:	c7 01       	movw	r24, r14
     8d0:	b6 01       	movw	r22, r12
     8d2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <cos>
     8d6:	6b 01       	movw	r12, r22
     8d8:	7c 01       	movw	r14, r24
     8da:	6d 2f       	mov	r22, r29
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	6c 0f       	add	r22, r28
     8e0:	71 1d       	adc	r23, r1
     8e2:	88 27       	eor	r24, r24
     8e4:	77 fd       	sbrc	r23, 7
     8e6:	80 95       	com	r24
     8e8:	98 2f       	mov	r25, r24
     8ea:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__floatsisf>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	5f e3       	ldi	r21, 0x3F	; 63
     8f6:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 ef       	ldi	r20, 0xF0	; 240
     900:	50 e4       	ldi	r21, 0x40	; 64
     902:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3>
     906:	a7 01       	movw	r20, r14
     908:	96 01       	movw	r18, r12
     90a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e2       	ldi	r20, 0x20	; 32
     914:	52 e4       	ldi	r21, 0x42	; 66
     916:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__subsf3>
     91a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     91e:	cb 01       	movw	r24, r22
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	03 97       	sbiw	r24, 0x03	; 3
     924:	08 f4       	brcc	.+2      	; 0x928 <navigation_direction_regulation+0x282>
     926:	47 c0       	rjmp	.+142    	; 0x9b6 <navigation_direction_regulation+0x310>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     928:	88 27       	eor	r24, r24
     92a:	77 fd       	sbrc	r23, 7
     92c:	80 95       	com	r24
     92e:	98 2f       	mov	r25, r24
     930:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__floatsisf>
     934:	20 91 03 01 	lds	r18, 0x0103
     938:	30 91 04 01 	lds	r19, 0x0104
     93c:	40 91 05 01 	lds	r20, 0x0105
     940:	50 91 06 01 	lds	r21, 0x0106
     944:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     948:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <atan>
     94c:	c6 2e       	mov	r12, r22
     94e:	d7 2e       	mov	r13, r23
     950:	e8 2e       	mov	r14, r24
     952:	f9 2e       	mov	r15, r25
		if(dir < 0)
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	a9 01       	movw	r20, r18
     95a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__cmpsf2>
     95e:	88 23       	and	r24, r24
     960:	7c f4       	brge	.+30     	; 0x980 <navigation_direction_regulation+0x2da>
		{
			dir += 2*PI;
     962:	2b ed       	ldi	r18, 0xDB	; 219
     964:	3f e0       	ldi	r19, 0x0F	; 15
     966:	49 ec       	ldi	r20, 0xC9	; 201
     968:	50 e4       	ldi	r21, 0x40	; 64
     96a:	6c 2d       	mov	r22, r12
     96c:	7d 2d       	mov	r23, r13
     96e:	8e 2d       	mov	r24, r14
     970:	9f 2d       	mov	r25, r15
     972:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3>
     976:	c6 2e       	mov	r12, r22
     978:	d7 2e       	mov	r13, r23
     97a:	e8 2e       	mov	r14, r24
     97c:	f9 2e       	mov	r15, r25
     97e:	24 c0       	rjmp	.+72     	; 0x9c8 <navigation_direction_regulation+0x322>
		} else if(dir >= 2*PI)
     980:	2b ed       	ldi	r18, 0xDB	; 219
     982:	3f e0       	ldi	r19, 0x0F	; 15
     984:	49 ec       	ldi	r20, 0xC9	; 201
     986:	50 e4       	ldi	r21, 0x40	; 64
     988:	6c 2d       	mov	r22, r12
     98a:	7d 2d       	mov	r23, r13
     98c:	8e 2d       	mov	r24, r14
     98e:	9f 2d       	mov	r25, r15
     990:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__gesf2>
     994:	88 23       	and	r24, r24
     996:	c4 f0       	brlt	.+48     	; 0x9c8 <navigation_direction_regulation+0x322>
		{
			dir -= 2*PI;
     998:	2b ed       	ldi	r18, 0xDB	; 219
     99a:	3f e0       	ldi	r19, 0x0F	; 15
     99c:	49 ec       	ldi	r20, 0xC9	; 201
     99e:	50 e4       	ldi	r21, 0x40	; 64
     9a0:	6c 2d       	mov	r22, r12
     9a2:	7d 2d       	mov	r23, r13
     9a4:	8e 2d       	mov	r24, r14
     9a6:	9f 2d       	mov	r25, r15
     9a8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__subsf3>
     9ac:	c6 2e       	mov	r12, r22
     9ae:	d7 2e       	mov	r13, r23
     9b0:	e8 2e       	mov	r14, r24
     9b2:	f9 2e       	mov	r15, r25
     9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <navigation_direction_regulation+0x322>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     9b6:	c1 2c       	mov	r12, r1
     9b8:	d1 2c       	mov	r13, r1
     9ba:	e1 2c       	mov	r14, r1
     9bc:	f1 2c       	mov	r15, r1
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <navigation_direction_regulation+0x322>
     9c0:	c1 2c       	mov	r12, r1
     9c2:	d1 2c       	mov	r13, r1
     9c4:	e1 2c       	mov	r14, r1
     9c6:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     9c8:	6c 2d       	mov	r22, r12
     9ca:	7d 2d       	mov	r23, r13
     9cc:	8e 2d       	mov	r24, r14
     9ce:	9f 2d       	mov	r25, r15
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	08 95       	ret

000009de <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     9de:	cf 92       	push	r12
     9e0:	df 92       	push	r13
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     9e6:	80 91 07 01 	lds	r24, 0x0107
     9ea:	88 23       	and	r24, r24
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <navigation_angle_offset+0x12>
     9ee:	6c c0       	rjmp	.+216    	; 0xac8 <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	c1 dd       	rcall	.-1150   	; 0x578 <navigation_get_sensor>
     9f6:	f8 2e       	mov	r15, r24
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	bd dd       	rcall	.-1158   	; 0x578 <navigation_get_sensor>
     9fe:	2f 2d       	mov	r18, r15
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	a9 01       	movw	r20, r18
     a04:	48 1b       	sub	r20, r24
     a06:	51 09       	sbc	r21, r1
     a08:	ca 01       	movw	r24, r20
     a0a:	99 23       	and	r25, r25
     a0c:	1c f4       	brge	.+6      	; 0xa14 <navigation_angle_offset+0x36>
     a0e:	91 95       	neg	r25
     a10:	81 95       	neg	r24
     a12:	91 09       	sbc	r25, r1
     a14:	0a 97       	sbiw	r24, 0x0a	; 10
     a16:	0c f5       	brge	.+66     	; 0xa5a <navigation_angle_offset+0x7c>
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	ad dd       	rcall	.-1190   	; 0x578 <navigation_get_sensor>
     a1e:	82 33       	cpi	r24, 0x32	; 50
     a20:	e0 f4       	brcc	.+56     	; 0xa5a <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	a8 dd       	rcall	.-1200   	; 0x578 <navigation_get_sensor>
     a28:	f8 2e       	mov	r15, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a4 dd       	rcall	.-1208   	; 0x578 <navigation_get_sensor>
     a30:	6f 2d       	mov	r22, r15
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	68 1b       	sub	r22, r24
     a36:	71 09       	sbc	r23, r1
     a38:	88 27       	eor	r24, r24
     a3a:	77 fd       	sbrc	r23, 7
     a3c:	80 95       	com	r24
     a3e:	98 2f       	mov	r25, r24
     a40:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__floatsisf>
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	48 e6       	ldi	r20, 0x68	; 104
     a4a:	51 e4       	ldi	r21, 0x41	; 65
     a4c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__divsf3>
     a50:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <atan>
     a54:	6b 01       	movw	r12, r22
     a56:	7c 01       	movw	r14, r24
     a58:	a0 c0       	rjmp	.+320    	; 0xb9a <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	8c dd       	rcall	.-1256   	; 0x578 <navigation_get_sensor>
     a60:	f8 2e       	mov	r15, r24
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	88 dd       	rcall	.-1264   	; 0x578 <navigation_get_sensor>
     a68:	2f 2d       	mov	r18, r15
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	a9 01       	movw	r20, r18
     a6e:	48 1b       	sub	r20, r24
     a70:	51 09       	sbc	r21, r1
     a72:	ca 01       	movw	r24, r20
     a74:	99 23       	and	r25, r25
     a76:	1c f4       	brge	.+6      	; 0xa7e <navigation_angle_offset+0xa0>
     a78:	91 95       	neg	r25
     a7a:	81 95       	neg	r24
     a7c:	91 09       	sbc	r25, r1
     a7e:	0a 97       	sbiw	r24, 0x0a	; 10
     a80:	0c f0       	brlt	.+2      	; 0xa84 <navigation_angle_offset+0xa6>
     a82:	9a c0       	rjmp	.+308    	; 0xbb8 <navigation_angle_offset+0x1da>
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	77 dd       	rcall	.-1298   	; 0x578 <navigation_get_sensor>
     a8a:	82 33       	cpi	r24, 0x32	; 50
     a8c:	08 f0       	brcs	.+2      	; 0xa90 <navigation_angle_offset+0xb2>
     a8e:	94 c0       	rjmp	.+296    	; 0xbb8 <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	71 dd       	rcall	.-1310   	; 0x578 <navigation_get_sensor>
     a96:	f8 2e       	mov	r15, r24
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	6d dd       	rcall	.-1318   	; 0x578 <navigation_get_sensor>
     a9e:	6f 2d       	mov	r22, r15
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	68 1b       	sub	r22, r24
     aa4:	71 09       	sbc	r23, r1
     aa6:	88 27       	eor	r24, r24
     aa8:	77 fd       	sbrc	r23, 7
     aaa:	80 95       	com	r24
     aac:	98 2f       	mov	r25, r24
     aae:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__floatsisf>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	48 e6       	ldi	r20, 0x68	; 104
     ab8:	51 e4       	ldi	r21, 0x41	; 65
     aba:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__divsf3>
     abe:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <atan>
     ac2:	6b 01       	movw	r12, r22
     ac4:	7c 01       	movw	r14, r24
     ac6:	69 c0       	rjmp	.+210    	; 0xb9a <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	55 dd       	rcall	.-1366   	; 0x578 <navigation_get_sensor>
     ace:	f8 2e       	mov	r15, r24
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	51 dd       	rcall	.-1374   	; 0x578 <navigation_get_sensor>
     ad6:	2f 2d       	mov	r18, r15
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	a9 01       	movw	r20, r18
     adc:	48 1b       	sub	r20, r24
     ade:	51 09       	sbc	r21, r1
     ae0:	ca 01       	movw	r24, r20
     ae2:	99 23       	and	r25, r25
     ae4:	1c f4       	brge	.+6      	; 0xaec <navigation_angle_offset+0x10e>
     ae6:	91 95       	neg	r25
     ae8:	81 95       	neg	r24
     aea:	91 09       	sbc	r25, r1
     aec:	0a 97       	sbiw	r24, 0x0a	; 10
     aee:	0c f5       	brge	.+66     	; 0xb32 <navigation_angle_offset+0x154>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	41 dd       	rcall	.-1406   	; 0x578 <navigation_get_sensor>
     af6:	82 33       	cpi	r24, 0x32	; 50
     af8:	e0 f4       	brcc	.+56     	; 0xb32 <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	3c dd       	rcall	.-1416   	; 0x578 <navigation_get_sensor>
     b00:	f8 2e       	mov	r15, r24
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	38 dd       	rcall	.-1424   	; 0x578 <navigation_get_sensor>
     b08:	6f 2d       	mov	r22, r15
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	68 1b       	sub	r22, r24
     b0e:	71 09       	sbc	r23, r1
     b10:	88 27       	eor	r24, r24
     b12:	77 fd       	sbrc	r23, 7
     b14:	80 95       	com	r24
     b16:	98 2f       	mov	r25, r24
     b18:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__floatsisf>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	48 e6       	ldi	r20, 0x68	; 104
     b22:	51 e4       	ldi	r21, 0x41	; 65
     b24:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__divsf3>
     b28:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <atan>
     b2c:	6b 01       	movw	r12, r22
     b2e:	7c 01       	movw	r14, r24
     b30:	34 c0       	rjmp	.+104    	; 0xb9a <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	20 dd       	rcall	.-1472   	; 0x578 <navigation_get_sensor>
     b38:	f8 2e       	mov	r15, r24
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	1c dd       	rcall	.-1480   	; 0x578 <navigation_get_sensor>
     b40:	2f 2d       	mov	r18, r15
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	a9 01       	movw	r20, r18
     b46:	48 1b       	sub	r20, r24
     b48:	51 09       	sbc	r21, r1
     b4a:	ca 01       	movw	r24, r20
     b4c:	99 23       	and	r25, r25
     b4e:	1c f4       	brge	.+6      	; 0xb56 <navigation_angle_offset+0x178>
     b50:	91 95       	neg	r25
     b52:	81 95       	neg	r24
     b54:	91 09       	sbc	r25, r1
     b56:	0a 97       	sbiw	r24, 0x0a	; 10
     b58:	7c f5       	brge	.+94     	; 0xbb8 <navigation_angle_offset+0x1da>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0c dd       	rcall	.-1512   	; 0x578 <navigation_get_sensor>
     b60:	82 33       	cpi	r24, 0x32	; 50
     b62:	50 f5       	brcc	.+84     	; 0xbb8 <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	07 dd       	rcall	.-1522   	; 0x578 <navigation_get_sensor>
     b6a:	f8 2e       	mov	r15, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	03 dd       	rcall	.-1530   	; 0x578 <navigation_get_sensor>
     b72:	6f 2d       	mov	r22, r15
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	68 1b       	sub	r22, r24
     b78:	71 09       	sbc	r23, r1
     b7a:	88 27       	eor	r24, r24
     b7c:	77 fd       	sbrc	r23, 7
     b7e:	80 95       	com	r24
     b80:	98 2f       	mov	r25, r24
     b82:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__floatsisf>
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	48 e6       	ldi	r20, 0x68	; 104
     b8c:	51 e4       	ldi	r21, 0x41	; 65
     b8e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__divsf3>
     b92:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <atan>
     b96:	6b 01       	movw	r12, r22
     b98:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	9f 77       	andi	r25, 0x7F	; 127
     ba0:	29 e2       	ldi	r18, 0x29	; 41
     ba2:	3c e5       	ldi	r19, 0x5C	; 92
     ba4:	4f e8       	ldi	r20, 0x8F	; 143
     ba6:	5d e3       	ldi	r21, 0x3D	; 61
     ba8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__gesf2>
     bac:	18 16       	cp	r1, r24
     bae:	3c f0       	brlt	.+14     	; 0xbbe <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     bb0:	c1 2c       	mov	r12, r1
     bb2:	d1 2c       	mov	r13, r1
     bb4:	76 01       	movw	r14, r12
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <navigation_angle_offset+0x1e0>
     bb8:	c1 2c       	mov	r12, r1
     bba:	d1 2c       	mov	r13, r1
     bbc:	76 01       	movw	r14, r12
     bbe:	7c 2d       	mov	r23, r12
	}
}
     bc0:	67 2f       	mov	r22, r23
     bc2:	7d 2d       	mov	r23, r13
     bc4:	8e 2d       	mov	r24, r14
     bc6:	9f 2d       	mov	r25, r15
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	08 95       	ret

00000bd2 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	0b b6       	in	r0, 0x3b	; 59
     bde:	0f 92       	push	r0
     be0:	2f 93       	push	r18
     be2:	3f 93       	push	r19
     be4:	4f 93       	push	r20
     be6:	5f 93       	push	r21
     be8:	6f 93       	push	r22
     bea:	7f 93       	push	r23
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25
     bf0:	af 93       	push	r26
     bf2:	bf 93       	push	r27
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	73 dc       	rcall	.-1818   	; 0x4e2 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	77 dc       	rcall	.-1810   	; 0x4ee <navigation_set_autonomous_walk>
}
     c00:	ff 91       	pop	r31
     c02:	ef 91       	pop	r30
     c04:	bf 91       	pop	r27
     c06:	af 91       	pop	r26
     c08:	9f 91       	pop	r25
     c0a:	8f 91       	pop	r24
     c0c:	7f 91       	pop	r23
     c0e:	6f 91       	pop	r22
     c10:	5f 91       	pop	r21
     c12:	4f 91       	pop	r20
     c14:	3f 91       	pop	r19
     c16:	2f 91       	pop	r18
     c18:	0f 90       	pop	r0
     c1a:	0b be       	out	0x3b, r0	; 59
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1
     c30:	0b b6       	in	r0, 0x3b	; 59
     c32:	0f 92       	push	r0
     c34:	2f 93       	push	r18
     c36:	3f 93       	push	r19
     c38:	4f 93       	push	r20
     c3a:	5f 93       	push	r21
     c3c:	6f 93       	push	r22
     c3e:	7f 93       	push	r23
     c40:	8f 93       	push	r24
     c42:	9f 93       	push	r25
     c44:	af 93       	push	r26
     c46:	bf 93       	push	r27
     c48:	ef 93       	push	r30
     c4a:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	49 dc       	rcall	.-1902   	; 0x4e2 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	4d dc       	rcall	.-1894   	; 0x4ee <navigation_set_autonomous_walk>
     c54:	ff 91       	pop	r31
     c56:	ef 91       	pop	r30
     c58:	bf 91       	pop	r27
     c5a:	af 91       	pop	r26
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	7f 91       	pop	r23
     c62:	6f 91       	pop	r22
     c64:	5f 91       	pop	r21
     c66:	4f 91       	pop	r20
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	0f 90       	pop	r0
     c6e:	0b be       	out	0x3b, r0	; 59
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti

00000c7a <main>:
#include "Navigation.h"
#include "autonomouswalk.h"

int main(void)
{
	USART_init();
     c7a:	7e d4       	rcall	.+2300   	; 0x1578 <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); // send messages from gang to the display, not the computer
     c7c:	80 e8       	ldi	r24, 0x80	; 128
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	87 d4       	rcall	.+2318   	; 0x1590 <USART_set_twi_message_destination>
	sei();
     c82:	78 94       	sei
	TWI_init(ST_ADDRESS);
     c84:	80 e2       	ldi	r24, 0x20	; 32
     c86:	41 d1       	rcall	.+642    	; 0xf0a <TWI_init>
	init_counters();
     c88:	ac db       	rcall	.-2216   	; 0x3e2 <init_counters>
	
	//LED
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
     c8a:	81 b1       	in	r24, 0x01	; 1
     c8c:	83 60       	ori	r24, 0x03	; 3
     c8e:	81 b9       	out	0x01, r24	; 1
	DDRC |= (1<<PORTC6 | 1<<PORTC7);
     c90:	87 b1       	in	r24, 0x07	; 7
     c92:	80 6c       	ori	r24, 0xC0	; 192
     c94:	87 b9       	out	0x07, r24	; 7
	
	//Buttons
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //For emphasize
     c96:	81 b1       	in	r24, 0x01	; 1
     c98:	8f 73       	andi	r24, 0x3F	; 63
     c9a:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     c9c:	e8 e6       	ldi	r30, 0x68	; 104
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //mask for porta6 and porta7
     ca6:	eb e6       	ldi	r30, 0x6B	; 107
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	80 6c       	ori	r24, 0xC0	; 192
     cae:	80 83       	st	Z, r24
     cb0:	2f ef       	ldi	r18, 0xFF	; 255
     cb2:	83 e2       	ldi	r24, 0x23	; 35
     cb4:	94 ef       	ldi	r25, 0xF4	; 244
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	80 40       	sbci	r24, 0x00	; 0
     cba:	90 40       	sbci	r25, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <main+0x3c>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <main+0x46>
     cc0:	00 00       	nop
	
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	14 dc       	rcall	.-2008   	; 0x4ee <navigation_set_autonomous_walk>
		}
		else
		{
			if(TWI_command_flag())
			{
				PORTA ^= (1<<PORTA1);
     cc6:	c2 e0       	ldi	r28, 0x02	; 2
		/*if(TWI_sensor_flag())
		{
			PORTA ^= (1<<PORTA1);
			navigation_fill_buffer();
		}*/
		if(TWI_autonom_settings_flag())
     cc8:	80 d2       	rcall	.+1280   	; 0x11ca <TWI_autonom_settings_flag>
     cca:	88 23       	and	r24, r24
     ccc:	79 f0       	breq	.+30     	; 0xcec <main+0x72>
		{
			uint8_t sett = TWI_get_autonom_settings();
     cce:	63 d2       	rcall	.+1222   	; 0x1196 <TWI_get_autonom_settings>
			if(sett == 0)
     cd0:	81 11       	cpse	r24, r1
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <main+0x5e>
			{
				navigation_set_autonomous_walk(0);
     cd4:	0c dc       	rcall	.-2024   	; 0x4ee <navigation_set_autonomous_walk>
     cd6:	0a c0       	rjmp	.+20     	; 0xcec <main+0x72>
			}
			else if(sett == 1)
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	21 f4       	brne	.+8      	; 0xce4 <main+0x6a>
			{
				navigation_set_autonomous_walk(1);
     cdc:	08 dc       	rcall	.-2032   	; 0x4ee <navigation_set_autonomous_walk>
				navigation_set_algorithm(1);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	00 dc       	rcall	.-2048   	; 0x4e2 <navigation_set_algorithm>
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <main+0x72>
			}
			else //sett == 2
			{
				navigation_set_autonomous_walk(1);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	03 dc       	rcall	.-2042   	; 0x4ee <navigation_set_autonomous_walk>
				navigation_set_algorithm(0);
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	fb db       	rcall	.-2058   	; 0x4e2 <navigation_set_algorithm>
			}
		}
		
		if(navigation_autonomous_walk() == 1)
     cec:	fd db       	rcall	.-2054   	; 0x4e8 <navigation_autonomous_walk>
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	49 f4       	brne	.+18     	; 0xd04 <main+0x8a>
		{
			if(TWI_control_settings_flag())
     cf2:	61 d2       	rcall	.+1218   	; 0x11b6 <TWI_control_settings_flag>
     cf4:	88 23       	and	r24, r24
     cf6:	21 f0       	breq	.+8      	; 0xd00 <main+0x86>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	47 d2       	rcall	.+1166   	; 0x118c <TWI_get_control_setting>
     cfe:	df db       	rcall	.-2114   	; 0x4be <navigation_set_Kp>
			}
			autonomouswalk_walk();
     d00:	e6 da       	rcall	.-2612   	; 0x2ce <autonomouswalk_walk>
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <main+0x98>
		}
		else
		{
			if(TWI_command_flag())
     d04:	4e d2       	rcall	.+1180   	; 0x11a2 <TWI_command_flag>
     d06:	88 23       	and	r24, r24
     d08:	21 f0       	breq	.+8      	; 0xd12 <main+0x98>
			{
				PORTA ^= (1<<PORTA1);
     d0a:	82 b1       	in	r24, 0x02	; 2
     d0c:	8c 27       	eor	r24, r28
     d0e:	82 b9       	out	0x02, r24	; 2
				USART_SendCommand();
     d10:	0a d5       	rcall	.+2580   	; 0x1726 <USART_SendCommand>
			}
		}
		
		if(TWI_elevation_flag())
     d12:	65 d2       	rcall	.+1226   	; 0x11de <TWI_elevation_flag>
     d14:	88 23       	and	r24, r24
     d16:	29 f0       	breq	.+10     	; 0xd22 <main+0xa8>
		{
			PORTA ^= (1<<PORTA0); 
     d18:	92 b1       	in	r25, 0x02	; 2
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	89 27       	eor	r24, r25
     d1e:	82 b9       	out	0x02, r24	; 2
			USART_SendElevation();
     d20:	14 d5       	rcall	.+2600   	; 0x174a <USART_SendElevation>
		}
		USART_DecodeRxFIFO();
     d22:	66 d6       	rcall	.+3276   	; 0x19f0 <USART_DecodeRxFIFO>
    }
     d24:	d1 cf       	rjmp	.-94     	; 0xcc8 <main+0x4e>

00000d26 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     d26:	1f 92       	push	r1
     d28:	0f 92       	push	r0
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	0f 92       	push	r0
     d2e:	11 24       	eor	r1, r1
	TCNT1 = 0;
     d30:	10 92 85 00 	sts	0x0085, r1
     d34:	10 92 84 00 	sts	0x0084, r1
}
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
	//TWI_send_float(C_ADDRESS, (float)navigation_get_sensor(0));
	TCNT3 = 0;
     d4c:	10 92 95 00 	sts	0x0095, r1
     d50:	10 92 94 00 	sts	0x0094, r1
}
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_4>:

//-------------------Buttons PinChange interrupt---------------------

ISR(PCINT0_vect)
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	0b b6       	in	r0, 0x3b	; 59
     d6a:	0f 92       	push	r0
     d6c:	2f 93       	push	r18
     d6e:	3f 93       	push	r19
     d70:	4f 93       	push	r20
     d72:	5f 93       	push	r21
     d74:	6f 93       	push	r22
     d76:	7f 93       	push	r23
     d78:	8f 93       	push	r24
     d7a:	9f 93       	push	r25
     d7c:	af 93       	push	r26
     d7e:	bf 93       	push	r27
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     d84:	06 9b       	sbis	0x00, 6	; 0
     d86:	09 c0       	rjmp	.+18     	; 0xd9a <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	b1 db       	rcall	.-2206   	; 0x4ee <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	a9 db       	rcall	.-2222   	; 0x4e2 <navigation_set_algorithm>
		//test
		PORTC ^= (1<<PORTC6);
     d90:	98 b1       	in	r25, 0x08	; 8
     d92:	80 e4       	ldi	r24, 0x40	; 64
     d94:	89 27       	eor	r24, r25
     d96:	88 b9       	out	0x08, r24	; 8
     d98:	09 c0       	rjmp	.+18     	; 0xdac <__vector_4+0x4e>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     d9a:	07 9b       	sbis	0x00, 7	; 0
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <__vector_4+0x4e>
	{
		navigation_set_autonomous_walk(1);
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	a6 db       	rcall	.-2228   	; 0x4ee <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	9e db       	rcall	.-2244   	; 0x4e2 <navigation_set_algorithm>
		//test
		PORTC ^= (1<<PORTC7);
     da6:	88 b1       	in	r24, 0x08	; 8
     da8:	80 58       	subi	r24, 0x80	; 128
     daa:	88 b9       	out	0x08, r24	; 8
	}	
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <set_twi_reciever_enable>:
     dd2:	85 e4       	ldi	r24, 0x45	; 69
     dd4:	80 93 bc 00 	sts	0x00BC, r24
     dd8:	08 95       	ret

00000dda <clear_int>:
     dda:	81 ec       	ldi	r24, 0xC1	; 193
     ddc:	80 93 bc 00 	sts	0x00BC, r24
     de0:	08 95       	ret

00000de2 <start_bus>:
     de2:	84 ea       	ldi	r24, 0xA4	; 164
     de4:	80 93 bc 00 	sts	0x00BC, r24
     de8:	08 95       	ret

00000dea <stop_bus>:
     dea:	85 ed       	ldi	r24, 0xD5	; 213
     dec:	80 93 bc 00 	sts	0x00BC, r24
     df0:	08 95       	ret

00000df2 <Error>:
     df2:	80 91 b9 00 	lds	r24, 0x00B9
     df6:	88 7f       	andi	r24, 0xF8	; 248
     df8:	88 33       	cpi	r24, 0x38	; 56
     dfa:	09 f0       	breq	.+2      	; 0xdfe <Error+0xc>
     dfc:	f6 cf       	rjmp	.-20     	; 0xdea <stop_bus>
     dfe:	ed cf       	rjmp	.-38     	; 0xdda <clear_int>

00000e00 <get_data>:
     e00:	80 91 bb 00 	lds	r24, 0x00BB
     e04:	08 95       	ret

00000e06 <wait_for_bus>:
     e06:	ec eb       	ldi	r30, 0xBC	; 188
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	88 23       	and	r24, r24
     e0e:	ec f7       	brge	.-6      	; 0xe0a <wait_for_bus+0x4>
     e10:	08 95       	ret

00000e12 <send_data_and_wait>:
     e12:	80 93 bb 00 	sts	0x00BB, r24
     e16:	84 e8       	ldi	r24, 0x84	; 132
     e18:	80 93 bc 00 	sts	0x00BC, r24
     e1c:	f4 cf       	rjmp	.-24     	; 0xe06 <wait_for_bus>

00000e1e <stop_twi>:
     e1e:	10 92 83 14 	sts	0x1483, r1
     e22:	10 92 82 14 	sts	0x1482, r1
     e26:	10 92 8d 14 	sts	0x148D, r1
     e2a:	10 92 8c 14 	sts	0x148C, r1
     e2e:	10 92 78 14 	sts	0x1478, r1
     e32:	10 92 77 14 	sts	0x1477, r1
     e36:	10 92 7d 14 	sts	0x147D, r1
     e3a:	10 92 7c 14 	sts	0x147C, r1
     e3e:	10 92 80 14 	sts	0x1480, r1
     e42:	10 92 7f 14 	sts	0x147F, r1
     e46:	08 95       	ret

00000e48 <reset_TWI>:
     e48:	ec eb       	ldi	r30, 0xBC	; 188
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 6c       	ori	r24, 0xC0	; 192
     e50:	80 83       	st	Z, r24
     e52:	08 95       	ret

00000e54 <get_control_settings_from_bus>:
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	c0 91 7c 14 	lds	r28, 0x147C
     e5c:	d0 91 7d 14 	lds	r29, 0x147D
     e60:	cf df       	rcall	.-98     	; 0xe00 <get_data>
     e62:	c7 58       	subi	r28, 0x87	; 135
     e64:	db 4e       	sbci	r29, 0xEB	; 235
     e66:	88 83       	st	Y, r24
     e68:	10 92 7d 14 	sts	0x147D, r1
     e6c:	10 92 7c 14 	sts	0x147C, r1
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <get_autonom_settings_from_bus>:
     e76:	c4 df       	rcall	.-120    	; 0xe00 <get_data>
     e78:	80 93 77 13 	sts	0x1377, r24
     e7c:	08 95       	ret

00000e7e <get_char_from_bus>:
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	c0 91 77 14 	lds	r28, 0x1477
     e86:	d0 91 78 14 	lds	r29, 0x1478
     e8a:	ba df       	rcall	.-140    	; 0xe00 <get_data>
     e8c:	c8 58       	subi	r28, 0x88	; 136
     e8e:	dc 4e       	sbci	r29, 0xEC	; 236
     e90:	88 83       	st	Y, r24
     e92:	80 91 77 14 	lds	r24, 0x1477
     e96:	90 91 78 14 	lds	r25, 0x1478
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	90 93 78 14 	sts	0x1478, r25
     ea0:	80 93 77 14 	sts	0x1477, r24
     ea4:	90 93 88 14 	sts	0x1488, r25
     ea8:	80 93 87 14 	sts	0x1487, r24
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <get_sensor_from_bus>:
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	c0 91 8c 14 	lds	r28, 0x148C
     eba:	d0 91 8d 14 	lds	r29, 0x148D
     ebe:	c8 30       	cpi	r28, 0x08	; 8
     ec0:	d1 05       	cpc	r29, r1
     ec2:	99 f4       	brne	.+38     	; 0xeea <get_sensor_from_bus+0x38>
     ec4:	ee e8       	ldi	r30, 0x8E	; 142
     ec6:	f4 e1       	ldi	r31, 0x14	; 20
     ec8:	a6 e9       	ldi	r26, 0x96	; 150
     eca:	b4 e1       	ldi	r27, 0x14	; 20
     ecc:	86 e9       	ldi	r24, 0x96	; 150
     ece:	94 e1       	ldi	r25, 0x14	; 20
     ed0:	21 91       	ld	r18, Z+
     ed2:	2d 93       	st	X+, r18
     ed4:	e8 17       	cp	r30, r24
     ed6:	f9 07       	cpc	r31, r25
     ed8:	d9 f7       	brne	.-10     	; 0xed0 <get_sensor_from_bus+0x1e>
     eda:	92 df       	rcall	.-220    	; 0xe00 <get_data>
     edc:	80 93 86 14 	sts	0x1486, r24
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	80 93 3a 13 	sts	0x133A, r24
     ee6:	1d db       	rcall	.-2502   	; 0x522 <navigation_fill_buffer>
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <get_sensor_from_bus+0x52>
     eea:	8a df       	rcall	.-236    	; 0xe00 <get_data>
     eec:	c2 57       	subi	r28, 0x72	; 114
     eee:	db 4e       	sbci	r29, 0xEB	; 235
     ef0:	88 83       	st	Y, r24
     ef2:	80 91 8c 14 	lds	r24, 0x148C
     ef6:	90 91 8d 14 	lds	r25, 0x148D
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	90 93 8d 14 	sts	0x148D, r25
     f00:	80 93 8c 14 	sts	0x148C, r24
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	08 95       	ret

00000f0a <TWI_init>:
     f0a:	80 93 7e 14 	sts	0x147E, r24
     f0e:	80 34       	cpi	r24, 0x40	; 64
     f10:	79 f0       	breq	.+30     	; 0xf30 <TWI_init+0x26>
     f12:	80 38       	cpi	r24, 0x80	; 128
     f14:	19 f0       	breq	.+6      	; 0xf1c <TWI_init+0x12>
     f16:	80 32       	cpi	r24, 0x20	; 32
     f18:	d1 f4       	brne	.+52     	; 0xf4e <TWI_init+0x44>
     f1a:	12 c0       	rjmp	.+36     	; 0xf40 <TWI_init+0x36>
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	88 b9       	out	0x08, r24	; 8
     f20:	58 df       	rcall	.-336    	; 0xdd2 <set_twi_reciever_enable>
     f22:	8f e3       	ldi	r24, 0x3F	; 63
     f24:	80 93 b8 00 	sts	0x00B8, r24
     f28:	81 e8       	ldi	r24, 0x81	; 129
     f2a:	80 93 ba 00 	sts	0x00BA, r24
     f2e:	08 95       	ret
     f30:	8f e3       	ldi	r24, 0x3F	; 63
     f32:	80 93 b8 00 	sts	0x00B8, r24
     f36:	4d df       	rcall	.-358    	; 0xdd2 <set_twi_reciever_enable>
     f38:	80 e4       	ldi	r24, 0x40	; 64
     f3a:	80 93 ba 00 	sts	0x00BA, r24
     f3e:	08 95       	ret
     f40:	8f e3       	ldi	r24, 0x3F	; 63
     f42:	80 93 b8 00 	sts	0x00B8, r24
     f46:	45 df       	rcall	.-374    	; 0xdd2 <set_twi_reciever_enable>
     f48:	81 e2       	ldi	r24, 0x21	; 33
     f4a:	80 93 ba 00 	sts	0x00BA, r24
     f4e:	08 95       	ret

00000f50 <TWI_send_command>:
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	c8 2f       	mov	r28, r24
     f58:	d6 2f       	mov	r29, r22
     f5a:	14 2f       	mov	r17, r20
     f5c:	42 df       	rcall	.-380    	; 0xde2 <start_bus>
     f5e:	53 df       	rcall	.-346    	; 0xe06 <wait_for_bus>
     f60:	90 91 b9 00 	lds	r25, 0x00B9
     f64:	98 7f       	andi	r25, 0xF8	; 248
     f66:	98 30       	cpi	r25, 0x08	; 8
     f68:	19 f0       	breq	.+6      	; 0xf70 <TWI_send_command+0x20>
     f6a:	43 df       	rcall	.-378    	; 0xdf2 <Error>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	34 c0       	rjmp	.+104    	; 0xfd8 <TWI_send_command+0x88>
     f70:	80 e2       	ldi	r24, 0x20	; 32
     f72:	4f df       	rcall	.-354    	; 0xe12 <send_data_and_wait>
     f74:	80 91 b9 00 	lds	r24, 0x00B9
     f78:	88 7f       	andi	r24, 0xF8	; 248
     f7a:	88 31       	cpi	r24, 0x18	; 24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <TWI_send_command+0x34>
     f7e:	39 df       	rcall	.-398    	; 0xdf2 <Error>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	2a c0       	rjmp	.+84     	; 0xfd8 <TWI_send_command+0x88>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	45 df       	rcall	.-374    	; 0xe12 <send_data_and_wait>
     f88:	80 91 b9 00 	lds	r24, 0x00B9
     f8c:	88 7f       	andi	r24, 0xF8	; 248
     f8e:	88 32       	cpi	r24, 0x28	; 40
     f90:	19 f0       	breq	.+6      	; 0xf98 <TWI_send_command+0x48>
     f92:	2f df       	rcall	.-418    	; 0xdf2 <Error>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	20 c0       	rjmp	.+64     	; 0xfd8 <TWI_send_command+0x88>
     f98:	8c 2f       	mov	r24, r28
     f9a:	3b df       	rcall	.-394    	; 0xe12 <send_data_and_wait>
     f9c:	80 91 b9 00 	lds	r24, 0x00B9
     fa0:	88 7f       	andi	r24, 0xF8	; 248
     fa2:	88 32       	cpi	r24, 0x28	; 40
     fa4:	19 f0       	breq	.+6      	; 0xfac <TWI_send_command+0x5c>
     fa6:	25 df       	rcall	.-438    	; 0xdf2 <Error>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	16 c0       	rjmp	.+44     	; 0xfd8 <TWI_send_command+0x88>
     fac:	8d 2f       	mov	r24, r29
     fae:	31 df       	rcall	.-414    	; 0xe12 <send_data_and_wait>
     fb0:	80 91 b9 00 	lds	r24, 0x00B9
     fb4:	88 7f       	andi	r24, 0xF8	; 248
     fb6:	88 32       	cpi	r24, 0x28	; 40
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <TWI_send_command+0x70>
     fba:	1b df       	rcall	.-458    	; 0xdf2 <Error>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0c c0       	rjmp	.+24     	; 0xfd8 <TWI_send_command+0x88>
     fc0:	81 2f       	mov	r24, r17
     fc2:	27 df       	rcall	.-434    	; 0xe12 <send_data_and_wait>
     fc4:	80 91 b9 00 	lds	r24, 0x00B9
     fc8:	88 7f       	andi	r24, 0xF8	; 248
     fca:	88 32       	cpi	r24, 0x28	; 40
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <TWI_send_command+0x84>
     fce:	11 df       	rcall	.-478    	; 0xdf2 <Error>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <TWI_send_command+0x88>
     fd4:	0a df       	rcall	.-492    	; 0xdea <stop_bus>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	08 95       	ret

00000fe0 <TWI_send_string>:
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	c8 2f       	mov	r28, r24
     fee:	e6 2e       	mov	r14, r22
     ff0:	f7 2e       	mov	r15, r23
     ff2:	f7 de       	rcall	.-530    	; 0xde2 <start_bus>
     ff4:	08 df       	rcall	.-496    	; 0xe06 <wait_for_bus>
     ff6:	90 91 b9 00 	lds	r25, 0x00B9
     ffa:	98 7f       	andi	r25, 0xF8	; 248
     ffc:	98 30       	cpi	r25, 0x08	; 8
     ffe:	19 f0       	breq	.+6      	; 0x1006 <TWI_send_string+0x26>
    1000:	f8 de       	rcall	.-528    	; 0xdf2 <Error>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	2c c0       	rjmp	.+88     	; 0x105e <TWI_send_string+0x7e>
    1006:	8c 2f       	mov	r24, r28
    1008:	04 df       	rcall	.-504    	; 0xe12 <send_data_and_wait>
    100a:	80 91 b9 00 	lds	r24, 0x00B9
    100e:	88 7f       	andi	r24, 0xF8	; 248
    1010:	88 31       	cpi	r24, 0x18	; 24
    1012:	19 f0       	breq	.+6      	; 0x101a <TWI_send_string+0x3a>
    1014:	ee de       	rcall	.-548    	; 0xdf2 <Error>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	22 c0       	rjmp	.+68     	; 0x105e <TWI_send_string+0x7e>
    101a:	89 e1       	ldi	r24, 0x19	; 25
    101c:	fa de       	rcall	.-524    	; 0xe12 <send_data_and_wait>
    101e:	80 91 b9 00 	lds	r24, 0x00B9
    1022:	88 7f       	andi	r24, 0xF8	; 248
    1024:	88 32       	cpi	r24, 0x28	; 40
    1026:	29 f4       	brne	.+10     	; 0x1032 <TWI_send_string+0x52>
    1028:	0e 2d       	mov	r16, r14
    102a:	1f 2d       	mov	r17, r15
    102c:	c0 e0       	ldi	r28, 0x00	; 0
    102e:	d0 e0       	ldi	r29, 0x00	; 0
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <TWI_send_string+0x62>
    1032:	df de       	rcall	.-578    	; 0xdf2 <Error>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	13 c0       	rjmp	.+38     	; 0x105e <TWI_send_string+0x7e>
    1038:	f8 01       	movw	r30, r16
    103a:	81 91       	ld	r24, Z+
    103c:	8f 01       	movw	r16, r30
    103e:	e9 de       	rcall	.-558    	; 0xe12 <send_data_and_wait>
    1040:	21 96       	adiw	r28, 0x01	; 1
    1042:	ee 2d       	mov	r30, r14
    1044:	ff 2d       	mov	r31, r15
    1046:	df 01       	movw	r26, r30
    1048:	0d 90       	ld	r0, X+
    104a:	00 20       	and	r0, r0
    104c:	e9 f7       	brne	.-6      	; 0x1048 <TWI_send_string+0x68>
    104e:	11 97       	sbiw	r26, 0x01	; 1
    1050:	ae 1b       	sub	r26, r30
    1052:	bf 0b       	sbc	r27, r31
    1054:	ca 17       	cp	r28, r26
    1056:	db 07       	cpc	r29, r27
    1058:	78 f3       	brcs	.-34     	; 0x1038 <TWI_send_string+0x58>
    105a:	c7 de       	rcall	.-626    	; 0xdea <stop_bus>
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	08 95       	ret

0000106c <TWI_send_string_fixed_length>:
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	c8 2f       	mov	r28, r24
    107a:	e6 2e       	mov	r14, r22
    107c:	f7 2e       	mov	r15, r23
    107e:	8a 01       	movw	r16, r20
    1080:	b0 de       	rcall	.-672    	; 0xde2 <start_bus>
    1082:	c1 de       	rcall	.-638    	; 0xe06 <wait_for_bus>
    1084:	90 91 b9 00 	lds	r25, 0x00B9
    1088:	98 7f       	andi	r25, 0xF8	; 248
    108a:	98 30       	cpi	r25, 0x08	; 8
    108c:	19 f0       	breq	.+6      	; 0x1094 <TWI_send_string_fixed_length+0x28>
    108e:	b1 de       	rcall	.-670    	; 0xdf2 <Error>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	23 c0       	rjmp	.+70     	; 0x10da <TWI_send_string_fixed_length+0x6e>
    1094:	8c 2f       	mov	r24, r28
    1096:	bd de       	rcall	.-646    	; 0xe12 <send_data_and_wait>
    1098:	80 91 b9 00 	lds	r24, 0x00B9
    109c:	88 7f       	andi	r24, 0xF8	; 248
    109e:	88 31       	cpi	r24, 0x18	; 24
    10a0:	19 f0       	breq	.+6      	; 0x10a8 <TWI_send_string_fixed_length+0x3c>
    10a2:	a7 de       	rcall	.-690    	; 0xdf2 <Error>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	19 c0       	rjmp	.+50     	; 0x10da <TWI_send_string_fixed_length+0x6e>
    10a8:	89 e1       	ldi	r24, 0x19	; 25
    10aa:	b3 de       	rcall	.-666    	; 0xe12 <send_data_and_wait>
    10ac:	80 91 b9 00 	lds	r24, 0x00B9
    10b0:	88 7f       	andi	r24, 0xF8	; 248
    10b2:	88 32       	cpi	r24, 0x28	; 40
    10b4:	21 f4       	brne	.+8      	; 0x10be <TWI_send_string_fixed_length+0x52>
    10b6:	10 16       	cp	r1, r16
    10b8:	11 06       	cpc	r1, r17
    10ba:	24 f0       	brlt	.+8      	; 0x10c4 <TWI_send_string_fixed_length+0x58>
    10bc:	0c c0       	rjmp	.+24     	; 0x10d6 <TWI_send_string_fixed_length+0x6a>
    10be:	99 de       	rcall	.-718    	; 0xdf2 <Error>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <TWI_send_string_fixed_length+0x6e>
    10c4:	ce 2d       	mov	r28, r14
    10c6:	df 2d       	mov	r29, r15
    10c8:	0c 0f       	add	r16, r28
    10ca:	1d 1f       	adc	r17, r29
    10cc:	89 91       	ld	r24, Y+
    10ce:	a1 de       	rcall	.-702    	; 0xe12 <send_data_and_wait>
    10d0:	c0 17       	cp	r28, r16
    10d2:	d1 07       	cpc	r29, r17
    10d4:	d9 f7       	brne	.-10     	; 0x10cc <TWI_send_string_fixed_length+0x60>
    10d6:	89 de       	rcall	.-750    	; 0xdea <stop_bus>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	08 95       	ret

000010e8 <TWI_send_float>:
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <TWI_send_float+0xe>
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <TWI_send_float+0x10>
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	18 2f       	mov	r17, r24
    10fe:	49 83       	std	Y+1, r20	; 0x01
    1100:	5a 83       	std	Y+2, r21	; 0x02
    1102:	6b 83       	std	Y+3, r22	; 0x03
    1104:	7c 83       	std	Y+4, r23	; 0x04
    1106:	6d de       	rcall	.-806    	; 0xde2 <start_bus>
    1108:	7e de       	rcall	.-772    	; 0xe06 <wait_for_bus>
    110a:	90 91 b9 00 	lds	r25, 0x00B9
    110e:	98 7f       	andi	r25, 0xF8	; 248
    1110:	98 30       	cpi	r25, 0x08	; 8
    1112:	19 f0       	breq	.+6      	; 0x111a <TWI_send_float+0x32>
    1114:	6e de       	rcall	.-804    	; 0xdf2 <Error>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	24 c0       	rjmp	.+72     	; 0x1162 <TWI_send_float+0x7a>
    111a:	81 2f       	mov	r24, r17
    111c:	7a de       	rcall	.-780    	; 0xe12 <send_data_and_wait>
    111e:	80 91 b9 00 	lds	r24, 0x00B9
    1122:	88 7f       	andi	r24, 0xF8	; 248
    1124:	88 31       	cpi	r24, 0x18	; 24
    1126:	19 f0       	breq	.+6      	; 0x112e <TWI_send_float+0x46>
    1128:	64 de       	rcall	.-824    	; 0xdf2 <Error>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	1a c0       	rjmp	.+52     	; 0x1162 <TWI_send_float+0x7a>
    112e:	86 e0       	ldi	r24, 0x06	; 6
    1130:	70 de       	rcall	.-800    	; 0xe12 <send_data_and_wait>
    1132:	80 91 b9 00 	lds	r24, 0x00B9
    1136:	88 7f       	andi	r24, 0xF8	; 248
    1138:	88 32       	cpi	r24, 0x28	; 40
    113a:	19 f0       	breq	.+6      	; 0x1142 <TWI_send_float+0x5a>
    113c:	5a de       	rcall	.-844    	; 0xdf2 <Error>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	10 c0       	rjmp	.+32     	; 0x1162 <TWI_send_float+0x7a>
    1142:	8e 01       	movw	r16, r28
    1144:	0f 5f       	subi	r16, 0xFF	; 255
    1146:	1f 4f       	sbci	r17, 0xFF	; 255
    1148:	7e 01       	movw	r14, r28
    114a:	85 e0       	ldi	r24, 0x05	; 5
    114c:	e8 0e       	add	r14, r24
    114e:	f1 1c       	adc	r15, r1
    1150:	f8 01       	movw	r30, r16
    1152:	81 91       	ld	r24, Z+
    1154:	8f 01       	movw	r16, r30
    1156:	5d de       	rcall	.-838    	; 0xe12 <send_data_and_wait>
    1158:	0e 15       	cp	r16, r14
    115a:	1f 05       	cpc	r17, r15
    115c:	c9 f7       	brne	.-14     	; 0x1150 <TWI_send_float+0x68>
    115e:	45 de       	rcall	.-886    	; 0xdea <stop_bus>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	08 95       	ret

00001178 <TWI_get_command>:
    1178:	8c 58       	subi	r24, 0x8C	; 140
    117a:	9c 4e       	sbci	r25, 0xEC	; 236
    117c:	fc 01       	movw	r30, r24
    117e:	80 81       	ld	r24, Z
    1180:	08 95       	ret

00001182 <TWI_get_sensor>:
    1182:	8a 56       	subi	r24, 0x6A	; 106
    1184:	9b 4e       	sbci	r25, 0xEB	; 235
    1186:	fc 01       	movw	r30, r24
    1188:	80 81       	ld	r24, Z
    118a:	08 95       	ret

0000118c <TWI_get_control_setting>:
    118c:	87 58       	subi	r24, 0x87	; 135
    118e:	9b 4e       	sbci	r25, 0xEB	; 235
    1190:	fc 01       	movw	r30, r24
    1192:	80 81       	ld	r24, Z
    1194:	08 95       	ret

00001196 <TWI_get_autonom_settings>:
    1196:	80 91 77 13 	lds	r24, 0x1377
    119a:	08 95       	ret

0000119c <TWI_get_elevation>:
    119c:	80 91 84 14 	lds	r24, 0x1484
    11a0:	08 95       	ret

000011a2 <TWI_command_flag>:
    11a2:	80 91 39 13 	lds	r24, 0x1339
    11a6:	88 23       	and	r24, r24
    11a8:	21 f0       	breq	.+8      	; 0x11b2 <TWI_command_flag+0x10>
    11aa:	10 92 39 13 	sts	0x1339, r1
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	08 95       	ret
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	08 95       	ret

000011b6 <TWI_control_settings_flag>:
    11b6:	80 91 38 13 	lds	r24, 0x1338
    11ba:	88 23       	and	r24, r24
    11bc:	21 f0       	breq	.+8      	; 0x11c6 <TWI_control_settings_flag+0x10>
    11be:	10 92 38 13 	sts	0x1338, r1
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	08 95       	ret
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 95       	ret

000011ca <TWI_autonom_settings_flag>:
    11ca:	80 91 37 13 	lds	r24, 0x1337
    11ce:	88 23       	and	r24, r24
    11d0:	21 f0       	breq	.+8      	; 0x11da <TWI_autonom_settings_flag+0x10>
    11d2:	10 92 37 13 	sts	0x1337, r1
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	08 95       	ret
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	08 95       	ret

000011de <TWI_elevation_flag>:
    11de:	80 91 36 13 	lds	r24, 0x1336
    11e2:	88 23       	and	r24, r24
    11e4:	21 f0       	breq	.+8      	; 0x11ee <TWI_elevation_flag+0x10>
    11e6:	10 92 36 13 	sts	0x1336, r1
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	08 95       	ret
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	08 95       	ret

000011f2 <write_to_TwiFIFO>:
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	d8 2f       	mov	r29, r24
    11fc:	c9 2f       	mov	r28, r25
    11fe:	60 91 87 14 	lds	r22, 0x1487
    1202:	80 91 08 01 	lds	r24, 0x0108
    1206:	90 91 09 01 	lds	r25, 0x0109
    120a:	16 d9       	rcall	.-3540   	; 0x438 <FifoWrite>
    120c:	81 11       	cpse	r24, r1
    120e:	1f c0       	rjmp	.+62     	; 0x124e <write_to_TwiFIFO+0x5c>
    1210:	20 91 87 14 	lds	r18, 0x1487
    1214:	30 91 88 14 	lds	r19, 0x1488
    1218:	12 16       	cp	r1, r18
    121a:	13 06       	cpc	r1, r19
    121c:	d4 f4       	brge	.+52     	; 0x1252 <write_to_TwiFIFO+0x60>
    121e:	0d 2f       	mov	r16, r29
    1220:	1c 2f       	mov	r17, r28
    1222:	c0 e0       	ldi	r28, 0x00	; 0
    1224:	d0 e0       	ldi	r29, 0x00	; 0
    1226:	f8 01       	movw	r30, r16
    1228:	61 91       	ld	r22, Z+
    122a:	8f 01       	movw	r16, r30
    122c:	80 91 08 01 	lds	r24, 0x0108
    1230:	90 91 09 01 	lds	r25, 0x0109
    1234:	01 d9       	rcall	.-3582   	; 0x438 <FifoWrite>
    1236:	81 11       	cpse	r24, r1
    1238:	0e c0       	rjmp	.+28     	; 0x1256 <write_to_TwiFIFO+0x64>
    123a:	21 96       	adiw	r28, 0x01	; 1
    123c:	80 91 87 14 	lds	r24, 0x1487
    1240:	90 91 88 14 	lds	r25, 0x1488
    1244:	c8 17       	cp	r28, r24
    1246:	d9 07       	cpc	r29, r25
    1248:	74 f3       	brlt	.-36     	; 0x1226 <write_to_TwiFIFO+0x34>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <write_to_TwiFIFO+0x66>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <write_to_TwiFIFO+0x66>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <write_to_TwiFIFO+0x66>
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	08 95       	ret

00001262 <__vector_26>:
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	0b b6       	in	r0, 0x3b	; 59
    126e:	0f 92       	push	r0
    1270:	2f 93       	push	r18
    1272:	3f 93       	push	r19
    1274:	4f 93       	push	r20
    1276:	5f 93       	push	r21
    1278:	6f 93       	push	r22
    127a:	7f 93       	push	r23
    127c:	8f 93       	push	r24
    127e:	9f 93       	push	r25
    1280:	af 93       	push	r26
    1282:	bf 93       	push	r27
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ef 93       	push	r30
    128a:	ff 93       	push	r31
    128c:	80 91 7e 14 	lds	r24, 0x147E
    1290:	80 34       	cpi	r24, 0x40	; 64
    1292:	09 f4       	brne	.+2      	; 0x1296 <__vector_26+0x34>
    1294:	87 c0       	rjmp	.+270    	; 0x13a4 <__vector_26+0x142>
    1296:	80 38       	cpi	r24, 0x80	; 128
    1298:	21 f0       	breq	.+8      	; 0x12a2 <__vector_26+0x40>
    129a:	80 32       	cpi	r24, 0x20	; 32
    129c:	09 f0       	breq	.+2      	; 0x12a0 <__vector_26+0x3e>
    129e:	57 c1       	rjmp	.+686    	; 0x154e <__vector_26+0x2ec>
    12a0:	c9 c0       	rjmp	.+402    	; 0x1434 <__vector_26+0x1d2>
    12a2:	80 91 b9 00 	lds	r24, 0x00B9
    12a6:	88 7f       	andi	r24, 0xF8	; 248
    12a8:	80 36       	cpi	r24, 0x60	; 96
    12aa:	29 f0       	breq	.+10     	; 0x12b6 <__vector_26+0x54>
    12ac:	80 91 b9 00 	lds	r24, 0x00B9
    12b0:	88 7f       	andi	r24, 0xF8	; 248
    12b2:	88 36       	cpi	r24, 0x68	; 104
    12b4:	21 f4       	brne	.+8      	; 0x12be <__vector_26+0x5c>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 81 14 	sts	0x1481, r24
    12bc:	71 c0       	rjmp	.+226    	; 0x13a0 <__vector_26+0x13e>
    12be:	80 91 b9 00 	lds	r24, 0x00B9
    12c2:	88 7f       	andi	r24, 0xF8	; 248
    12c4:	80 37       	cpi	r24, 0x70	; 112
    12c6:	29 f0       	breq	.+10     	; 0x12d2 <__vector_26+0x70>
    12c8:	80 91 b9 00 	lds	r24, 0x00B9
    12cc:	88 7f       	andi	r24, 0xF8	; 248
    12ce:	88 37       	cpi	r24, 0x78	; 120
    12d0:	39 f4       	brne	.+14     	; 0x12e0 <__vector_26+0x7e>
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	90 93 8b 14 	sts	0x148B, r25
    12da:	80 93 8a 14 	sts	0x148A, r24
    12de:	60 c0       	rjmp	.+192    	; 0x13a0 <__vector_26+0x13e>
    12e0:	80 91 b9 00 	lds	r24, 0x00B9
    12e4:	88 7f       	andi	r24, 0xF8	; 248
    12e6:	80 38       	cpi	r24, 0x80	; 128
    12e8:	b9 f5       	brne	.+110    	; 0x1358 <__vector_26+0xf6>
    12ea:	80 91 81 14 	lds	r24, 0x1481
    12ee:	88 23       	and	r24, r24
    12f0:	41 f0       	breq	.+16     	; 0x1302 <__vector_26+0xa0>
    12f2:	86 dd       	rcall	.-1268   	; 0xe00 <get_data>
    12f4:	80 93 8a 14 	sts	0x148A, r24
    12f8:	10 92 8b 14 	sts	0x148B, r1
    12fc:	10 92 81 14 	sts	0x1481, r1
    1300:	4f c0       	rjmp	.+158    	; 0x13a0 <__vector_26+0x13e>
    1302:	80 91 8a 14 	lds	r24, 0x148A
    1306:	90 91 8b 14 	lds	r25, 0x148B
    130a:	85 30       	cpi	r24, 0x05	; 5
    130c:	91 05       	cpc	r25, r1
    130e:	71 f0       	breq	.+28     	; 0x132c <__vector_26+0xca>
    1310:	24 f4       	brge	.+8      	; 0x131a <__vector_26+0xb8>
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	09 f0       	breq	.+2      	; 0x1318 <__vector_26+0xb6>
    1316:	44 c0       	rjmp	.+136    	; 0x13a0 <__vector_26+0x13e>
    1318:	07 c0       	rjmp	.+14     	; 0x1328 <__vector_26+0xc6>
    131a:	86 30       	cpi	r24, 0x06	; 6
    131c:	91 05       	cpc	r25, r1
    131e:	51 f0       	breq	.+20     	; 0x1334 <__vector_26+0xd2>
    1320:	49 97       	sbiw	r24, 0x19	; 25
    1322:	09 f0       	breq	.+2      	; 0x1326 <__vector_26+0xc4>
    1324:	3d c0       	rjmp	.+122    	; 0x13a0 <__vector_26+0x13e>
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <__vector_26+0xce>
    1328:	95 dd       	rcall	.-1238   	; 0xe54 <get_control_settings_from_bus>
    132a:	3a c0       	rjmp	.+116    	; 0x13a0 <__vector_26+0x13e>
    132c:	a4 dd       	rcall	.-1208   	; 0xe76 <get_autonom_settings_from_bus>
    132e:	38 c0       	rjmp	.+112    	; 0x13a0 <__vector_26+0x13e>
    1330:	a6 dd       	rcall	.-1204   	; 0xe7e <get_char_from_bus>
    1332:	36 c0       	rjmp	.+108    	; 0x13a0 <__vector_26+0x13e>
    1334:	c0 91 7f 14 	lds	r28, 0x147F
    1338:	d0 91 80 14 	lds	r29, 0x1480
    133c:	61 dd       	rcall	.-1342   	; 0xe00 <get_data>
    133e:	c0 59       	subi	r28, 0x90	; 144
    1340:	dc 4e       	sbci	r29, 0xEC	; 236
    1342:	88 83       	st	Y, r24
    1344:	80 91 7f 14 	lds	r24, 0x147F
    1348:	90 91 80 14 	lds	r25, 0x1480
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	90 93 80 14 	sts	0x1480, r25
    1352:	80 93 7f 14 	sts	0x147F, r24
    1356:	24 c0       	rjmp	.+72     	; 0x13a0 <__vector_26+0x13e>
    1358:	80 91 b9 00 	lds	r24, 0x00B9
    135c:	88 7f       	andi	r24, 0xF8	; 248
    135e:	80 39       	cpi	r24, 0x90	; 144
    1360:	11 f4       	brne	.+4      	; 0x1366 <__vector_26+0x104>
    1362:	a7 dd       	rcall	.-1202   	; 0xeb2 <get_sensor_from_bus>
    1364:	1d c0       	rjmp	.+58     	; 0x13a0 <__vector_26+0x13e>
    1366:	80 91 b9 00 	lds	r24, 0x00B9
    136a:	88 7f       	andi	r24, 0xF8	; 248
    136c:	80 3a       	cpi	r24, 0xA0	; 160
    136e:	c1 f4       	brne	.+48     	; 0x13a0 <__vector_26+0x13e>
    1370:	56 dd       	rcall	.-1364   	; 0xe1e <stop_twi>
    1372:	80 91 8a 14 	lds	r24, 0x148A
    1376:	90 91 8b 14 	lds	r25, 0x148B
    137a:	85 30       	cpi	r24, 0x05	; 5
    137c:	91 05       	cpc	r25, r1
    137e:	49 f0       	breq	.+18     	; 0x1392 <__vector_26+0x130>
    1380:	89 31       	cpi	r24, 0x19	; 25
    1382:	91 05       	cpc	r25, r1
    1384:	51 f0       	breq	.+20     	; 0x139a <__vector_26+0x138>
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	59 f4       	brne	.+22     	; 0x13a0 <__vector_26+0x13e>
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 38 13 	sts	0x1338, r24
    1390:	07 c0       	rjmp	.+14     	; 0x13a0 <__vector_26+0x13e>
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	80 93 37 13 	sts	0x1337, r24
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <__vector_26+0x13e>
    139a:	88 e7       	ldi	r24, 0x78	; 120
    139c:	93 e1       	ldi	r25, 0x13	; 19
    139e:	29 df       	rcall	.-430    	; 0x11f2 <write_to_TwiFIFO>
    13a0:	53 dd       	rcall	.-1370   	; 0xe48 <reset_TWI>
    13a2:	d5 c0       	rjmp	.+426    	; 0x154e <__vector_26+0x2ec>
    13a4:	80 91 b9 00 	lds	r24, 0x00B9
    13a8:	88 7f       	andi	r24, 0xF8	; 248
    13aa:	80 36       	cpi	r24, 0x60	; 96
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <__vector_26+0x156>
    13ae:	80 91 b9 00 	lds	r24, 0x00B9
    13b2:	88 7f       	andi	r24, 0xF8	; 248
    13b4:	88 36       	cpi	r24, 0x68	; 104
    13b6:	21 f4       	brne	.+8      	; 0x13c0 <__vector_26+0x15e>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 93 81 14 	sts	0x1481, r24
    13be:	38 c0       	rjmp	.+112    	; 0x1430 <__vector_26+0x1ce>
    13c0:	80 91 b9 00 	lds	r24, 0x00B9
    13c4:	88 7f       	andi	r24, 0xF8	; 248
    13c6:	80 38       	cpi	r24, 0x80	; 128
    13c8:	e1 f4       	brne	.+56     	; 0x1402 <__vector_26+0x1a0>
    13ca:	80 91 81 14 	lds	r24, 0x1481
    13ce:	88 23       	and	r24, r24
    13d0:	41 f0       	breq	.+16     	; 0x13e2 <__vector_26+0x180>
    13d2:	16 dd       	rcall	.-1492   	; 0xe00 <get_data>
    13d4:	80 93 8a 14 	sts	0x148A, r24
    13d8:	10 92 8b 14 	sts	0x148B, r1
    13dc:	10 92 81 14 	sts	0x1481, r1
    13e0:	27 c0       	rjmp	.+78     	; 0x1430 <__vector_26+0x1ce>
    13e2:	80 91 8a 14 	lds	r24, 0x148A
    13e6:	90 91 8b 14 	lds	r25, 0x148B
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	91 05       	cpc	r25, r1
    13ee:	19 f0       	breq	.+6      	; 0x13f6 <__vector_26+0x194>
    13f0:	49 97       	sbiw	r24, 0x19	; 25
    13f2:	f1 f4       	brne	.+60     	; 0x1430 <__vector_26+0x1ce>
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <__vector_26+0x19c>
    13f6:	04 dd       	rcall	.-1528   	; 0xe00 <get_data>
    13f8:	80 93 89 14 	sts	0x1489, r24
    13fc:	19 c0       	rjmp	.+50     	; 0x1430 <__vector_26+0x1ce>
    13fe:	3f dd       	rcall	.-1410   	; 0xe7e <get_char_from_bus>
    1400:	17 c0       	rjmp	.+46     	; 0x1430 <__vector_26+0x1ce>
    1402:	80 91 b9 00 	lds	r24, 0x00B9
    1406:	88 7f       	andi	r24, 0xF8	; 248
    1408:	80 3a       	cpi	r24, 0xA0	; 160
    140a:	91 f4       	brne	.+36     	; 0x1430 <__vector_26+0x1ce>
    140c:	08 dd       	rcall	.-1520   	; 0xe1e <stop_twi>
    140e:	80 91 8a 14 	lds	r24, 0x148A
    1412:	90 91 8b 14 	lds	r25, 0x148B
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	91 05       	cpc	r25, r1
    141a:	19 f0       	breq	.+6      	; 0x1422 <__vector_26+0x1c0>
    141c:	49 97       	sbiw	r24, 0x19	; 25
    141e:	41 f4       	brne	.+16     	; 0x1430 <__vector_26+0x1ce>
    1420:	04 c0       	rjmp	.+8      	; 0x142a <__vector_26+0x1c8>
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	80 93 35 13 	sts	0x1335, r24
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <__vector_26+0x1ce>
    142a:	88 e7       	ldi	r24, 0x78	; 120
    142c:	93 e1       	ldi	r25, 0x13	; 19
    142e:	e1 de       	rcall	.-574    	; 0x11f2 <write_to_TwiFIFO>
    1430:	0b dd       	rcall	.-1514   	; 0xe48 <reset_TWI>
    1432:	8d c0       	rjmp	.+282    	; 0x154e <__vector_26+0x2ec>
    1434:	80 91 b9 00 	lds	r24, 0x00B9
    1438:	88 7f       	andi	r24, 0xF8	; 248
    143a:	80 36       	cpi	r24, 0x60	; 96
    143c:	29 f0       	breq	.+10     	; 0x1448 <__vector_26+0x1e6>
    143e:	80 91 b9 00 	lds	r24, 0x00B9
    1442:	88 7f       	andi	r24, 0xF8	; 248
    1444:	88 36       	cpi	r24, 0x68	; 104
    1446:	21 f4       	brne	.+8      	; 0x1450 <__vector_26+0x1ee>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	80 93 81 14 	sts	0x1481, r24
    144e:	7e c0       	rjmp	.+252    	; 0x154c <__vector_26+0x2ea>
    1450:	80 91 b9 00 	lds	r24, 0x00B9
    1454:	88 7f       	andi	r24, 0xF8	; 248
    1456:	80 37       	cpi	r24, 0x70	; 112
    1458:	29 f0       	breq	.+10     	; 0x1464 <__vector_26+0x202>
    145a:	80 91 b9 00 	lds	r24, 0x00B9
    145e:	88 7f       	andi	r24, 0xF8	; 248
    1460:	88 37       	cpi	r24, 0x78	; 120
    1462:	39 f4       	brne	.+14     	; 0x1472 <__vector_26+0x210>
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	90 93 8b 14 	sts	0x148B, r25
    146c:	80 93 8a 14 	sts	0x148A, r24
    1470:	6d c0       	rjmp	.+218    	; 0x154c <__vector_26+0x2ea>
    1472:	80 91 b9 00 	lds	r24, 0x00B9
    1476:	88 7f       	andi	r24, 0xF8	; 248
    1478:	80 38       	cpi	r24, 0x80	; 128
    147a:	09 f0       	breq	.+2      	; 0x147e <__vector_26+0x21c>
    147c:	3a c0       	rjmp	.+116    	; 0x14f2 <__vector_26+0x290>
    147e:	80 91 81 14 	lds	r24, 0x1481
    1482:	88 23       	and	r24, r24
    1484:	41 f0       	breq	.+16     	; 0x1496 <__vector_26+0x234>
    1486:	bc dc       	rcall	.-1672   	; 0xe00 <get_data>
    1488:	80 93 8a 14 	sts	0x148A, r24
    148c:	10 92 8b 14 	sts	0x148B, r1
    1490:	10 92 81 14 	sts	0x1481, r1
    1494:	5b c0       	rjmp	.+182    	; 0x154c <__vector_26+0x2ea>
    1496:	80 91 8a 14 	lds	r24, 0x148A
    149a:	90 91 8b 14 	lds	r25, 0x148B
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	19 f1       	breq	.+70     	; 0x14ea <__vector_26+0x288>
    14a4:	1c f4       	brge	.+6      	; 0x14ac <__vector_26+0x24a>
    14a6:	89 2b       	or	r24, r25
    14a8:	41 f0       	breq	.+16     	; 0x14ba <__vector_26+0x258>
    14aa:	50 c0       	rjmp	.+160    	; 0x154c <__vector_26+0x2ea>
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	91 05       	cpc	r25, r1
    14b0:	b1 f0       	breq	.+44     	; 0x14de <__vector_26+0x27c>
    14b2:	05 97       	sbiw	r24, 0x05	; 5
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <__vector_26+0x256>
    14b6:	4a c0       	rjmp	.+148    	; 0x154c <__vector_26+0x2ea>
    14b8:	1a c0       	rjmp	.+52     	; 0x14ee <__vector_26+0x28c>
    14ba:	c0 91 82 14 	lds	r28, 0x1482
    14be:	d0 91 83 14 	lds	r29, 0x1483
    14c2:	9e dc       	rcall	.-1732   	; 0xe00 <get_data>
    14c4:	cc 58       	subi	r28, 0x8C	; 140
    14c6:	dc 4e       	sbci	r29, 0xEC	; 236
    14c8:	88 83       	st	Y, r24
    14ca:	80 91 82 14 	lds	r24, 0x1482
    14ce:	90 91 83 14 	lds	r25, 0x1483
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	90 93 83 14 	sts	0x1483, r25
    14d8:	80 93 82 14 	sts	0x1482, r24
    14dc:	37 c0       	rjmp	.+110    	; 0x154c <__vector_26+0x2ea>
    14de:	90 dc       	rcall	.-1760   	; 0xe00 <get_data>
    14e0:	80 93 84 14 	sts	0x1484, r24
    14e4:	10 92 85 14 	sts	0x1485, r1
    14e8:	31 c0       	rjmp	.+98     	; 0x154c <__vector_26+0x2ea>
    14ea:	b4 dc       	rcall	.-1688   	; 0xe54 <get_control_settings_from_bus>
    14ec:	2f c0       	rjmp	.+94     	; 0x154c <__vector_26+0x2ea>
    14ee:	c3 dc       	rcall	.-1658   	; 0xe76 <get_autonom_settings_from_bus>
    14f0:	2d c0       	rjmp	.+90     	; 0x154c <__vector_26+0x2ea>
    14f2:	80 91 b9 00 	lds	r24, 0x00B9
    14f6:	88 7f       	andi	r24, 0xF8	; 248
    14f8:	80 39       	cpi	r24, 0x90	; 144
    14fa:	11 f4       	brne	.+4      	; 0x1500 <__vector_26+0x29e>
    14fc:	da dc       	rcall	.-1612   	; 0xeb2 <get_sensor_from_bus>
    14fe:	26 c0       	rjmp	.+76     	; 0x154c <__vector_26+0x2ea>
    1500:	80 91 b9 00 	lds	r24, 0x00B9
    1504:	88 7f       	andi	r24, 0xF8	; 248
    1506:	80 3a       	cpi	r24, 0xA0	; 160
    1508:	09 f5       	brne	.+66     	; 0x154c <__vector_26+0x2ea>
    150a:	89 dc       	rcall	.-1774   	; 0xe1e <stop_twi>
    150c:	80 91 8a 14 	lds	r24, 0x148A
    1510:	90 91 8b 14 	lds	r25, 0x148B
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	91 f0       	breq	.+36     	; 0x153e <__vector_26+0x2dc>
    151a:	1c f4       	brge	.+6      	; 0x1522 <__vector_26+0x2c0>
    151c:	89 2b       	or	r24, r25
    151e:	39 f0       	breq	.+14     	; 0x152e <__vector_26+0x2cc>
    1520:	15 c0       	rjmp	.+42     	; 0x154c <__vector_26+0x2ea>
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	91 05       	cpc	r25, r1
    1526:	39 f0       	breq	.+14     	; 0x1536 <__vector_26+0x2d4>
    1528:	05 97       	sbiw	r24, 0x05	; 5
    152a:	81 f4       	brne	.+32     	; 0x154c <__vector_26+0x2ea>
    152c:	0c c0       	rjmp	.+24     	; 0x1546 <__vector_26+0x2e4>
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 93 39 13 	sts	0x1339, r24
    1534:	0b c0       	rjmp	.+22     	; 0x154c <__vector_26+0x2ea>
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 93 36 13 	sts	0x1336, r24
    153c:	07 c0       	rjmp	.+14     	; 0x154c <__vector_26+0x2ea>
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	80 93 38 13 	sts	0x1338, r24
    1544:	03 c0       	rjmp	.+6      	; 0x154c <__vector_26+0x2ea>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 37 13 	sts	0x1337, r24
    154c:	7d dc       	rcall	.-1798   	; 0xe48 <reset_TWI>
    154e:	ff 91       	pop	r31
    1550:	ef 91       	pop	r30
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	bf 91       	pop	r27
    1558:	af 91       	pop	r26
    155a:	9f 91       	pop	r25
    155c:	8f 91       	pop	r24
    155e:	7f 91       	pop	r23
    1560:	6f 91       	pop	r22
    1562:	5f 91       	pop	r21
    1564:	4f 91       	pop	r20
    1566:	3f 91       	pop	r19
    1568:	2f 91       	pop	r18
    156a:	0f 90       	pop	r0
    156c:	0b be       	out	0x3b, r0	; 59
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
    1578:	10 92 c5 00 	sts	0x00C5, r1
    157c:	87 e0       	ldi	r24, 0x07	; 7
    157e:	80 93 c4 00 	sts	0x00C4, r24
    1582:	88 e9       	ldi	r24, 0x98	; 152
    1584:	80 93 c1 00 	sts	0x00C1, r24
    1588:	86 e0       	ldi	r24, 0x06	; 6
    158a:	80 93 c2 00 	sts	0x00C2, r24
    158e:	08 95       	ret

00001590 <USART_set_twi_message_destination>:
    1590:	90 93 1a 11 	sts	0x111A, r25
    1594:	80 93 19 11 	sts	0x1119, r24
    1598:	08 95       	ret

0000159a <USART_CheckTxReady>:
    159a:	80 91 c0 00 	lds	r24, 0x00C0
    159e:	80 72       	andi	r24, 0x20	; 32
    15a0:	08 95       	ret

000015a2 <USART_WriteByte>:
    15a2:	cf 93       	push	r28
    15a4:	c8 2f       	mov	r28, r24
    15a6:	f9 df       	rcall	.-14     	; 0x159a <USART_CheckTxReady>
    15a8:	88 23       	and	r24, r24
    15aa:	e9 f3       	breq	.-6      	; 0x15a6 <USART_WriteByte+0x4>
    15ac:	c0 93 c6 00 	sts	0x00C6, r28
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <USART_crc16>:
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	66 23       	and	r22, r22
    15c6:	09 f4       	brne	.+2      	; 0x15ca <USART_crc16+0x16>
    15c8:	3e c0       	rjmp	.+124    	; 0x1646 <USART_crc16+0x92>
    15ca:	06 2f       	mov	r16, r22
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	4f ef       	ldi	r20, 0xFF	; 255
    15d0:	5f ef       	ldi	r21, 0xFF	; 255
    15d2:	ee ef       	ldi	r30, 0xFE	; 254
    15d4:	ff ef       	ldi	r31, 0xFF	; 255
    15d6:	c6 2e       	mov	r12, r22
    15d8:	d1 2c       	mov	r13, r1
    15da:	e8 2e       	mov	r14, r24
    15dc:	f1 2c       	mov	r15, r1
    15de:	c8 e0       	ldi	r28, 0x08	; 8
    15e0:	d0 e0       	ldi	r29, 0x00	; 0
    15e2:	ee 3f       	cpi	r30, 0xFE	; 254
    15e4:	6f ef       	ldi	r22, 0xFF	; 255
    15e6:	f6 07       	cpc	r31, r22
    15e8:	19 f4       	brne	.+6      	; 0x15f0 <USART_crc16+0x3c>
    15ea:	8e 2d       	mov	r24, r14
    15ec:	9f 2d       	mov	r25, r15
    15ee:	30 c0       	rjmp	.+96     	; 0x1650 <USART_crc16+0x9c>
    15f0:	ef 3f       	cpi	r30, 0xFF	; 255
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	f8 07       	cpc	r31, r24
    15f6:	19 f4       	brne	.+6      	; 0x15fe <USART_crc16+0x4a>
    15f8:	8c 2d       	mov	r24, r12
    15fa:	9d 2d       	mov	r25, r13
    15fc:	29 c0       	rjmp	.+82     	; 0x1650 <USART_crc16+0x9c>
    15fe:	df 01       	movw	r26, r30
    1600:	ad 55       	subi	r26, 0x5D	; 93
    1602:	b9 4e       	sbci	r27, 0xE9	; 233
    1604:	8c 91       	ld	r24, X
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	23 c0       	rjmp	.+70     	; 0x1650 <USART_crc16+0x9c>
    160a:	ba 01       	movw	r22, r20
    160c:	68 27       	eor	r22, r24
    160e:	79 27       	eor	r23, r25
    1610:	60 ff       	sbrs	r22, 0
    1612:	07 c0       	rjmp	.+14     	; 0x1622 <USART_crc16+0x6e>
    1614:	56 95       	lsr	r21
    1616:	47 95       	ror	r20
    1618:	68 e0       	ldi	r22, 0x08	; 8
    161a:	46 27       	eor	r20, r22
    161c:	64 e8       	ldi	r22, 0x84	; 132
    161e:	56 27       	eor	r21, r22
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <USART_crc16+0x72>
    1622:	56 95       	lsr	r21
    1624:	47 95       	ror	r20
    1626:	96 95       	lsr	r25
    1628:	87 95       	ror	r24
    162a:	21 50       	subi	r18, 0x01	; 1
    162c:	31 09       	sbc	r19, r1
    162e:	69 f7       	brne	.-38     	; 0x160a <USART_crc16+0x56>
    1630:	31 96       	adiw	r30, 0x01	; 1
    1632:	e0 17       	cp	r30, r16
    1634:	f1 07       	cpc	r31, r17
    1636:	a9 f6       	brne	.-86     	; 0x15e2 <USART_crc16+0x2e>
    1638:	9a 01       	movw	r18, r20
    163a:	20 95       	com	r18
    163c:	30 95       	com	r19
    163e:	32 27       	eor	r19, r18
    1640:	23 27       	eor	r18, r19
    1642:	32 27       	eor	r19, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <USART_crc16+0x96>
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	82 2f       	mov	r24, r18
    164c:	93 2f       	mov	r25, r19
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <USART_crc16+0xa0>
    1650:	9e 01       	movw	r18, r28
    1652:	db cf       	rjmp	.-74     	; 0x160a <USART_crc16+0x56>
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	ff 90       	pop	r15
    165e:	ef 90       	pop	r14
    1660:	df 90       	pop	r13
    1662:	cf 90       	pop	r12
    1664:	08 95       	ret

00001666 <USART_SendPacket>:
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	9e e7       	ldi	r25, 0x7E	; 126
    1670:	90 93 a2 17 	sts	0x17A2, r25
    1674:	80 93 a3 17 	sts	0x17A3, r24
    1678:	60 93 a4 17 	sts	0x17A4, r22
    167c:	26 2f       	mov	r18, r22
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	12 16       	cp	r1, r18
    1682:	13 06       	cpc	r1, r19
    1684:	4c f5       	brge	.+82     	; 0x16d8 <USART_SendPacket+0x72>
    1686:	e3 ea       	ldi	r30, 0xA3	; 163
    1688:	f6 e1       	ldi	r31, 0x16	; 22
    168a:	03 e0       	ldi	r16, 0x03	; 3
    168c:	10 e0       	ldi	r17, 0x00	; 0
    168e:	c0 e0       	ldi	r28, 0x00	; 0
    1690:	d0 e0       	ldi	r29, 0x00	; 0
    1692:	7d e7       	ldi	r23, 0x7D	; 125
    1694:	50 e2       	ldi	r21, 0x20	; 32
    1696:	90 81       	ld	r25, Z
    1698:	49 2f       	mov	r20, r25
    169a:	4d 57       	subi	r20, 0x7D	; 125
    169c:	42 30       	cpi	r20, 0x02	; 2
    169e:	80 f4       	brcc	.+32     	; 0x16c0 <USART_SendPacket+0x5a>
    16a0:	d8 01       	movw	r26, r16
    16a2:	ae 55       	subi	r26, 0x5E	; 94
    16a4:	b8 4e       	sbci	r27, 0xE8	; 232
    16a6:	ac 0f       	add	r26, r28
    16a8:	bd 1f       	adc	r27, r29
    16aa:	7c 93       	st	X, r23
    16ac:	0f 5f       	subi	r16, 0xFF	; 255
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	d8 01       	movw	r26, r16
    16b2:	ae 55       	subi	r26, 0x5E	; 94
    16b4:	b8 4e       	sbci	r27, 0xE8	; 232
    16b6:	ac 0f       	add	r26, r28
    16b8:	bd 1f       	adc	r27, r29
    16ba:	95 27       	eor	r25, r21
    16bc:	9c 93       	st	X, r25
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <USART_SendPacket+0x66>
    16c0:	d8 01       	movw	r26, r16
    16c2:	ae 55       	subi	r26, 0x5E	; 94
    16c4:	b8 4e       	sbci	r27, 0xE8	; 232
    16c6:	ac 0f       	add	r26, r28
    16c8:	bd 1f       	adc	r27, r29
    16ca:	9c 93       	st	X, r25
    16cc:	21 96       	adiw	r28, 0x01	; 1
    16ce:	31 96       	adiw	r30, 0x01	; 1
    16d0:	c2 17       	cp	r28, r18
    16d2:	d3 07       	cpc	r29, r19
    16d4:	01 f7       	brne	.-64     	; 0x1696 <USART_SendPacket+0x30>
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <USART_SendPacket+0x7a>
    16d8:	03 e0       	ldi	r16, 0x03	; 3
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	c0 e0       	ldi	r28, 0x00	; 0
    16de:	d0 e0       	ldi	r29, 0x00	; 0
    16e0:	69 df       	rcall	.-302    	; 0x15b4 <USART_crc16>
    16e2:	f8 01       	movw	r30, r16
    16e4:	ee 55       	subi	r30, 0x5E	; 94
    16e6:	f8 4e       	sbci	r31, 0xE8	; 232
    16e8:	ec 0f       	add	r30, r28
    16ea:	fd 1f       	adc	r31, r29
    16ec:	90 83       	st	Z, r25
    16ee:	81 83       	std	Z+1, r24	; 0x01
    16f0:	22 96       	adiw	r28, 0x02	; 2
    16f2:	0c 0f       	add	r16, r28
    16f4:	1d 1f       	adc	r17, r29
    16f6:	f8 01       	movw	r30, r16
    16f8:	ee 55       	subi	r30, 0x5E	; 94
    16fa:	f8 4e       	sbci	r31, 0xE8	; 232
    16fc:	8e e7       	ldi	r24, 0x7E	; 126
    16fe:	80 83       	st	Z, r24
    1700:	c8 01       	movw	r24, r16
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	18 16       	cp	r1, r24
    1706:	19 06       	cpc	r1, r25
    1708:	4c f4       	brge	.+18     	; 0x171c <USART_SendPacket+0xb6>
    170a:	c2 ea       	ldi	r28, 0xA2	; 162
    170c:	d7 e1       	ldi	r29, 0x17	; 23
    170e:	0d 55       	subi	r16, 0x5D	; 93
    1710:	18 4e       	sbci	r17, 0xE8	; 232
    1712:	89 91       	ld	r24, Y+
    1714:	46 df       	rcall	.-372    	; 0x15a2 <USART_WriteByte>
    1716:	c0 17       	cp	r28, r16
    1718:	d1 07       	cpc	r29, r17
    171a:	d9 f7       	brne	.-10     	; 0x1712 <USART_SendPacket+0xac>
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret

00001726 <USART_SendCommand>:
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	26 dd       	rcall	.-1460   	; 0x1178 <TWI_get_command>
    172c:	80 93 a3 16 	sts	0x16A3, r24
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	21 dd       	rcall	.-1470   	; 0x1178 <TWI_get_command>
    1736:	80 93 a4 16 	sts	0x16A4, r24
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	1c dd       	rcall	.-1480   	; 0x1178 <TWI_get_command>
    1740:	80 93 a5 16 	sts	0x16A5, r24
    1744:	63 e0       	ldi	r22, 0x03	; 3
    1746:	83 e4       	ldi	r24, 0x43	; 67
    1748:	8e cf       	rjmp	.-228    	; 0x1666 <USART_SendPacket>

0000174a <USART_SendElevation>:
    174a:	28 dd       	rcall	.-1456   	; 0x119c <TWI_get_elevation>
    174c:	80 93 a3 16 	sts	0x16A3, r24
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	85 e4       	ldi	r24, 0x45	; 69
    1754:	88 cf       	rjmp	.-240    	; 0x1666 <USART_SendPacket>

00001756 <USART_DecodeMessageRxFIFO>:
    1756:	8f 92       	push	r8
    1758:	9f 92       	push	r9
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	ad b6       	in	r10, 0x3d	; 61
    1774:	be b6       	in	r11, 0x3e	; 62
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	80 91 11 01 	lds	r24, 0x0111
    177e:	90 91 12 01 	lds	r25, 0x0112
    1782:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    1786:	88 23       	and	r24, r24
    1788:	31 f0       	breq	.+12     	; 0x1796 <USART_DecodeMessageRxFIFO+0x40>
    178a:	65 e0       	ldi	r22, 0x05	; 5
    178c:	72 e1       	ldi	r23, 0x12	; 18
    178e:	80 e4       	ldi	r24, 0x40	; 64
    1790:	27 dc       	rcall	.-1970   	; 0xfe0 <TWI_send_string>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	45 c0       	rjmp	.+138    	; 0x1820 <USART_DecodeMessageRxFIFO+0xca>
    1796:	c0 90 00 00 	lds	r12, 0x0000
    179a:	d1 2c       	mov	r13, r1
    179c:	96 01       	movw	r18, r12
    179e:	21 50       	subi	r18, 0x01	; 1
    17a0:	31 09       	sbc	r19, r1
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	c1 14       	cp	r12, r1
    17a8:	d1 04       	cpc	r13, r1
    17aa:	11 f0       	breq	.+4      	; 0x17b0 <USART_DecodeMessageRxFIFO+0x5a>
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	82 0f       	add	r24, r18
    17b2:	93 1f       	adc	r25, r19
    17b4:	2d b7       	in	r18, 0x3d	; 61
    17b6:	3e b7       	in	r19, 0x3e	; 62
    17b8:	28 1b       	sub	r18, r24
    17ba:	39 0b       	sbc	r19, r25
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	3e bf       	out	0x3e, r19	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	2d bf       	out	0x3d, r18	; 61
    17c6:	8d b7       	in	r24, 0x3d	; 61
    17c8:	9e b7       	in	r25, 0x3e	; 62
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	88 2e       	mov	r8, r24
    17ce:	99 2e       	mov	r9, r25
    17d0:	1c 14       	cp	r1, r12
    17d2:	1d 04       	cpc	r1, r13
    17d4:	f4 f4       	brge	.+60     	; 0x1812 <USART_DecodeMessageRxFIFO+0xbc>
    17d6:	e8 2e       	mov	r14, r24
    17d8:	f9 2e       	mov	r15, r25
    17da:	00 e0       	ldi	r16, 0x00	; 0
    17dc:	10 e0       	ldi	r17, 0x00	; 0
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	80 91 11 01 	lds	r24, 0x0111
    17e6:	90 91 12 01 	lds	r25, 0x0112
    17ea:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    17ee:	88 23       	and	r24, r24
    17f0:	31 f0       	breq	.+12     	; 0x17fe <USART_DecodeMessageRxFIFO+0xa8>
    17f2:	67 e2       	ldi	r22, 0x27	; 39
    17f4:	72 e1       	ldi	r23, 0x12	; 18
    17f6:	80 e4       	ldi	r24, 0x40	; 64
    17f8:	f3 db       	rcall	.-2074   	; 0xfe0 <TWI_send_string>
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	11 c0       	rjmp	.+34     	; 0x1820 <USART_DecodeMessageRxFIFO+0xca>
    17fe:	80 91 00 00 	lds	r24, 0x0000
    1802:	f7 01       	movw	r30, r14
    1804:	81 93       	st	Z+, r24
    1806:	7f 01       	movw	r14, r30
    1808:	0f 5f       	subi	r16, 0xFF	; 255
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	0c 15       	cp	r16, r12
    180e:	1d 05       	cpc	r17, r13
    1810:	34 f3       	brlt	.-52     	; 0x17de <USART_DecodeMessageRxFIFO+0x88>
    1812:	a6 01       	movw	r20, r12
    1814:	68 2d       	mov	r22, r8
    1816:	79 2d       	mov	r23, r9
    1818:	80 91 19 11 	lds	r24, 0x1119
    181c:	27 dc       	rcall	.-1970   	; 0x106c <TWI_send_string_fixed_length>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	be be       	out	0x3e, r11	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	ad be       	out	0x3d, r10	; 61
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	af 90       	pop	r10
    183e:	9f 90       	pop	r9
    1840:	8f 90       	pop	r8
    1842:	08 95       	ret

00001844 <USART_DecodeCommandRxFIFO>:
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	80 91 11 01 	lds	r24, 0x0111
    1850:	90 91 12 01 	lds	r25, 0x0112
    1854:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    1858:	88 23       	and	r24, r24
    185a:	31 f0       	breq	.+12     	; 0x1868 <USART_DecodeCommandRxFIFO+0x24>
    185c:	6a e4       	ldi	r22, 0x4A	; 74
    185e:	72 e1       	ldi	r23, 0x12	; 18
    1860:	80 e4       	ldi	r24, 0x40	; 64
    1862:	be db       	rcall	.-2180   	; 0xfe0 <TWI_send_string>
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	45 c0       	rjmp	.+138    	; 0x18f2 <USART_DecodeCommandRxFIFO+0xae>
    1868:	80 91 00 00 	lds	r24, 0x0000
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	09 f0       	breq	.+2      	; 0x1872 <USART_DecodeCommandRxFIFO+0x2e>
    1870:	3b c0       	rjmp	.+118    	; 0x18e8 <USART_DecodeCommandRxFIFO+0xa4>
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	80 91 11 01 	lds	r24, 0x0111
    187a:	90 91 12 01 	lds	r25, 0x0112
    187e:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    1882:	88 23       	and	r24, r24
    1884:	31 f0       	breq	.+12     	; 0x1892 <USART_DecodeCommandRxFIFO+0x4e>
    1886:	6c e6       	ldi	r22, 0x6C	; 108
    1888:	72 e1       	ldi	r23, 0x12	; 18
    188a:	80 e4       	ldi	r24, 0x40	; 64
    188c:	a9 db       	rcall	.-2222   	; 0xfe0 <TWI_send_string>
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	30 c0       	rjmp	.+96     	; 0x18f2 <USART_DecodeCommandRxFIFO+0xae>
    1892:	c0 91 00 00 	lds	r28, 0x0000
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 91 11 01 	lds	r24, 0x0111
    189e:	90 91 12 01 	lds	r25, 0x0112
    18a2:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    18a6:	88 23       	and	r24, r24
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <USART_DecodeCommandRxFIFO+0x72>
    18aa:	64 e9       	ldi	r22, 0x94	; 148
    18ac:	72 e1       	ldi	r23, 0x12	; 18
    18ae:	80 e4       	ldi	r24, 0x40	; 64
    18b0:	97 db       	rcall	.-2258   	; 0xfe0 <TWI_send_string>
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	1e c0       	rjmp	.+60     	; 0x18f2 <USART_DecodeCommandRxFIFO+0xae>
    18b6:	d0 91 00 00 	lds	r29, 0x0000
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	80 91 11 01 	lds	r24, 0x0111
    18c2:	90 91 12 01 	lds	r25, 0x0112
    18c6:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    18ca:	88 23       	and	r24, r24
    18cc:	31 f0       	breq	.+12     	; 0x18da <USART_DecodeCommandRxFIFO+0x96>
    18ce:	6b eb       	ldi	r22, 0xBB	; 187
    18d0:	72 e1       	ldi	r23, 0x12	; 18
    18d2:	80 e4       	ldi	r24, 0x40	; 64
    18d4:	85 db       	rcall	.-2294   	; 0xfe0 <TWI_send_string>
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	0c c0       	rjmp	.+24     	; 0x18f2 <USART_DecodeCommandRxFIFO+0xae>
    18da:	40 91 00 00 	lds	r20, 0x0000
    18de:	6d 2f       	mov	r22, r29
    18e0:	8c 2f       	mov	r24, r28
    18e2:	36 db       	rcall	.-2452   	; 0xf50 <TWI_send_command>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <USART_DecodeCommandRxFIFO+0xae>
    18e8:	6f ed       	ldi	r22, 0xDF	; 223
    18ea:	72 e1       	ldi	r23, 0x12	; 18
    18ec:	80 e4       	ldi	r24, 0x40	; 64
    18ee:	78 db       	rcall	.-2320   	; 0xfe0 <TWI_send_string>
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <USART_DecodeValueFIFO>:
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	00 d0       	rcall	.+0      	; 0x1906 <USART_DecodeValueFIFO+0xe>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <USART_DecodeValueFIFO+0x10>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	80 91 11 01 	lds	r24, 0x0111
    1914:	90 91 12 01 	lds	r25, 0x0112
    1918:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    191c:	88 23       	and	r24, r24
    191e:	31 f0       	breq	.+12     	; 0x192c <USART_DecodeValueFIFO+0x34>
    1920:	66 e0       	ldi	r22, 0x06	; 6
    1922:	73 e1       	ldi	r23, 0x13	; 19
    1924:	80 e4       	ldi	r24, 0x40	; 64
    1926:	5c db       	rcall	.-2376   	; 0xfe0 <TWI_send_string>
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	32 c0       	rjmp	.+100    	; 0x1990 <USART_DecodeValueFIFO+0x98>
    192c:	80 91 00 00 	lds	r24, 0x0000
    1930:	84 30       	cpi	r24, 0x04	; 4
    1932:	59 f5       	brne	.+86     	; 0x198a <USART_DecodeValueFIFO+0x92>
    1934:	8e 01       	movw	r16, r28
    1936:	0f 5f       	subi	r16, 0xFF	; 255
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	7e 01       	movw	r14, r28
    193c:	85 e0       	ldi	r24, 0x05	; 5
    193e:	e8 0e       	add	r14, r24
    1940:	f1 1c       	adc	r15, r1
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	80 91 11 01 	lds	r24, 0x0111
    194a:	90 91 12 01 	lds	r25, 0x0112
    194e:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    1952:	81 11       	cpse	r24, r1
    1954:	1c c0       	rjmp	.+56     	; 0x198e <USART_DecodeValueFIFO+0x96>
    1956:	e0 e0       	ldi	r30, 0x00	; 0
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	d8 01       	movw	r26, r16
    195e:	8d 93       	st	X+, r24
    1960:	8d 01       	movw	r16, r26
    1962:	60 81       	ld	r22, Z
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	2c d2       	rcall	.+1112   	; 0x1dc4 <__floatunsisf>
    196c:	ab 01       	movw	r20, r22
    196e:	bc 01       	movw	r22, r24
    1970:	80 e8       	ldi	r24, 0x80	; 128
    1972:	ba db       	rcall	.-2188   	; 0x10e8 <TWI_send_float>
    1974:	0e 15       	cp	r16, r14
    1976:	1f 05       	cpc	r17, r15
    1978:	21 f7       	brne	.-56     	; 0x1942 <USART_DecodeValueFIFO+0x4a>
    197a:	49 81       	ldd	r20, Y+1	; 0x01
    197c:	5a 81       	ldd	r21, Y+2	; 0x02
    197e:	6b 81       	ldd	r22, Y+3	; 0x03
    1980:	7c 81       	ldd	r23, Y+4	; 0x04
    1982:	80 e8       	ldi	r24, 0x80	; 128
    1984:	b1 db       	rcall	.-2206   	; 0x10e8 <TWI_send_float>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <USART_DecodeValueFIFO+0x98>
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <USART_DecodeValueFIFO+0x98>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	ff 90       	pop	r15
    19a2:	ef 90       	pop	r14
    19a4:	08 95       	ret

000019a6 <USART_DecodeReadyFIFO>:
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	80 91 11 01 	lds	r24, 0x0111
    19ae:	90 91 12 01 	lds	r25, 0x0112
    19b2:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    19b6:	88 23       	and	r24, r24
    19b8:	31 f0       	breq	.+12     	; 0x19c6 <USART_DecodeReadyFIFO+0x20>
    19ba:	6a e4       	ldi	r22, 0x4A	; 74
    19bc:	72 e1       	ldi	r23, 0x12	; 18
    19be:	80 e4       	ldi	r24, 0x40	; 64
    19c0:	0f db       	rcall	.-2530   	; 0xfe0 <TWI_send_string>
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	08 95       	ret
    19c6:	80 91 00 00 	lds	r24, 0x0000
    19ca:	81 11       	cpse	r24, r1
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <USART_DecodeReadyFIFO+0x32>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	80 93 3b 13 	sts	0x133B, r24
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	08 95       	ret
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	08 95       	ret

000019dc <USART_ready>:
    19dc:	80 91 3b 13 	lds	r24, 0x133B
    19e0:	88 23       	and	r24, r24
    19e2:	21 f0       	breq	.+8      	; 0x19ec <USART_ready+0x10>
    19e4:	10 92 3b 13 	sts	0x133B, r1
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	08 95       	ret
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	08 95       	ret

000019f0 <USART_DecodeRxFIFO>:
    19f0:	1c c0       	rjmp	.+56     	; 0x1a2a <USART_DecodeRxFIFO+0x3a>
    19f2:	80 91 00 00 	lds	r24, 0x0000
    19f6:	8d 34       	cpi	r24, 0x4D	; 77
    19f8:	49 f0       	breq	.+18     	; 0x1a0c <USART_DecodeRxFIFO+0x1c>
    19fa:	18 f4       	brcc	.+6      	; 0x1a02 <USART_DecodeRxFIFO+0x12>
    19fc:	83 34       	cpi	r24, 0x43	; 67
    19fe:	a9 f4       	brne	.+42     	; 0x1a2a <USART_DecodeRxFIFO+0x3a>
    1a00:	09 c0       	rjmp	.+18     	; 0x1a14 <USART_DecodeRxFIFO+0x24>
    1a02:	82 35       	cpi	r24, 0x52	; 82
    1a04:	79 f0       	breq	.+30     	; 0x1a24 <USART_DecodeRxFIFO+0x34>
    1a06:	86 35       	cpi	r24, 0x56	; 86
    1a08:	81 f4       	brne	.+32     	; 0x1a2a <USART_DecodeRxFIFO+0x3a>
    1a0a:	08 c0       	rjmp	.+16     	; 0x1a1c <USART_DecodeRxFIFO+0x2c>
    1a0c:	a4 de       	rcall	.-696    	; 0x1756 <USART_DecodeMessageRxFIFO>
    1a0e:	88 23       	and	r24, r24
    1a10:	61 f0       	breq	.+24     	; 0x1a2a <USART_DecodeRxFIFO+0x3a>
    1a12:	08 95       	ret
    1a14:	17 df       	rcall	.-466    	; 0x1844 <USART_DecodeCommandRxFIFO>
    1a16:	88 23       	and	r24, r24
    1a18:	41 f0       	breq	.+16     	; 0x1a2a <USART_DecodeRxFIFO+0x3a>
    1a1a:	08 95       	ret
    1a1c:	6d df       	rcall	.-294    	; 0x18f8 <USART_DecodeValueFIFO>
    1a1e:	88 23       	and	r24, r24
    1a20:	21 f0       	breq	.+8      	; 0x1a2a <USART_DecodeRxFIFO+0x3a>
    1a22:	08 95       	ret
    1a24:	c0 df       	rcall	.-128    	; 0x19a6 <USART_DecodeReadyFIFO>
    1a26:	81 11       	cpse	r24, r1
    1a28:	0a c0       	rjmp	.+20     	; 0x1a3e <USART_DecodeRxFIFO+0x4e>
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	80 91 11 01 	lds	r24, 0x0111
    1a32:	90 91 12 01 	lds	r25, 0x0112
    1a36:	0e 94 3c 02 	call	0x478	; 0x478 <FifoRead>
    1a3a:	88 23       	and	r24, r24
    1a3c:	d1 f2       	breq	.-76     	; 0x19f2 <USART_DecodeRxFIFO+0x2>
    1a3e:	08 95       	ret

00001a40 <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1a40:	1f 92       	push	r1
    1a42:	0f 92       	push	r0
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	0f 92       	push	r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	0b b6       	in	r0, 0x3b	; 59
    1a4c:	0f 92       	push	r0
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	2f 93       	push	r18
    1a58:	3f 93       	push	r19
    1a5a:	4f 93       	push	r20
    1a5c:	5f 93       	push	r21
    1a5e:	6f 93       	push	r22
    1a60:	7f 93       	push	r23
    1a62:	8f 93       	push	r24
    1a64:	9f 93       	push	r25
    1a66:	af 93       	push	r26
    1a68:	bf 93       	push	r27
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	ef 93       	push	r30
    1a70:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1a72:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1a76:	2e 37       	cpi	r18, 0x7E	; 126
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <__vector_20+0x3c>
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1a7c:	80 91 3e 13 	lds	r24, 0x133E
    1a80:	90 91 3f 13 	lds	r25, 0x133F
    1a84:	84 30       	cpi	r24, 0x04	; 4
    1a86:	91 05       	cpc	r25, r1
    1a88:	40 f4       	brcc	.+16     	; 0x1a9a <__vector_20+0x5a>
    1a8a:	20 91 9f 14 	lds	r18, 0x149F
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	2c 5f       	subi	r18, 0xFC	; 252
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	82 17       	cp	r24, r18
    1a96:	93 07       	cpc	r25, r19
    1a98:	59 f5       	brne	.+86     	; 0x1af0 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1a9a:	80 91 3c 13 	lds	r24, 0x133C
    1a9e:	90 91 3d 13 	lds	r25, 0x133D
    1aa2:	89 2b       	or	r24, r25
    1aa4:	21 f0       	breq	.+8      	; 0x1aae <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1aa6:	10 92 3d 13 	sts	0x133D, r1
    1aaa:	10 92 3c 13 	sts	0x133C, r1
    1aae:	0e e9       	ldi	r16, 0x9E	; 158
    1ab0:	14 e1       	ldi	r17, 0x14	; 20
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1ab2:	c0 e0       	ldi	r28, 0x00	; 0
    1ab4:	d0 e0       	ldi	r29, 0x00	; 0
    1ab6:	0f 2e       	mov	r0, r31
    1ab8:	ff e9       	ldi	r31, 0x9F	; 159
    1aba:	ef 2e       	mov	r14, r31
    1abc:	f4 e1       	ldi	r31, 0x14	; 20
    1abe:	ff 2e       	mov	r15, r31
    1ac0:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	61 91       	ld	r22, Z+
    1ac6:	8f 01       	movw	r16, r30
    1ac8:	80 91 11 01 	lds	r24, 0x0111
    1acc:	90 91 12 01 	lds	r25, 0x0112
    1ad0:	0e 94 1c 02 	call	0x438	; 0x438 <FifoWrite>
    1ad4:	88 23       	and	r24, r24
    1ad6:	21 f0       	breq	.+8      	; 0x1ae0 <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1ad8:	66 e2       	ldi	r22, 0x26	; 38
    1ada:	73 e1       	ldi	r23, 0x13	; 19
    1adc:	80 e4       	ldi	r24, 0x40	; 64
    1ade:	80 da       	rcall	.-2816   	; 0xfe0 <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1ae0:	21 96       	adiw	r28, 0x01	; 1
    1ae2:	f7 01       	movw	r30, r14
    1ae4:	80 81       	ld	r24, Z
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 96       	adiw	r24, 0x02	; 2
    1aea:	c8 17       	cp	r28, r24
    1aec:	d9 07       	cpc	r29, r25
    1aee:	4c f3       	brlt	.-46     	; 0x1ac2 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1af0:	10 92 3f 13 	sts	0x133F, r1
    1af4:	10 92 3e 13 	sts	0x133E, r1
    1af8:	16 c0       	rjmp	.+44     	; 0x1b26 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1afa:	2d 37       	cpi	r18, 0x7D	; 125
    1afc:	39 f4       	brne	.+14     	; 0x1b0c <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	90 93 3d 13 	sts	0x133D, r25
    1b06:	80 93 3c 13 	sts	0x133C, r24
    1b0a:	0d c0       	rjmp	.+26     	; 0x1b26 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1b0c:	80 91 3e 13 	lds	r24, 0x133E
    1b10:	90 91 3f 13 	lds	r25, 0x133F
    1b14:	fc 01       	movw	r30, r24
    1b16:	e2 56       	subi	r30, 0x62	; 98
    1b18:	fb 4e       	sbci	r31, 0xEB	; 235
    1b1a:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	90 93 3f 13 	sts	0x133F, r25
    1b22:	80 93 3e 13 	sts	0x133E, r24
	}
	
	
}
    1b26:	ff 91       	pop	r31
    1b28:	ef 91       	pop	r30
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	0f 90       	pop	r0
    1b4c:	0b be       	out	0x3b, r0	; 59
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1b58:	80 93 a3 16 	sts	0x16A3, r24
	gTxPayload[1] = rotation;
    1b5c:	60 93 a4 16 	sts	0x16A4, r22
	gTxPayload[2] = speed;
    1b60:	40 93 a5 16 	sts	0x16A5, r20
	
	
	USART_SendPacket('C', 3);
    1b64:	63 e0       	ldi	r22, 0x03	; 3
    1b66:	83 e4       	ldi	r24, 0x43	; 67
    1b68:	7e cd       	rjmp	.-1284   	; 0x1666 <USART_SendPacket>

00001b6a <__subsf3>:
    1b6a:	50 58       	subi	r21, 0x80	; 128

00001b6c <__addsf3>:
    1b6c:	bb 27       	eor	r27, r27
    1b6e:	aa 27       	eor	r26, r26
    1b70:	0e d0       	rcall	.+28     	; 0x1b8e <__addsf3x>
    1b72:	ed c1       	rjmp	.+986    	; 0x1f4e <__fp_round>
    1b74:	b6 d1       	rcall	.+876    	; 0x1ee2 <__fp_pscA>
    1b76:	30 f0       	brcs	.+12     	; 0x1b84 <__addsf3+0x18>
    1b78:	bb d1       	rcall	.+886    	; 0x1ef0 <__fp_pscB>
    1b7a:	20 f0       	brcs	.+8      	; 0x1b84 <__addsf3+0x18>
    1b7c:	31 f4       	brne	.+12     	; 0x1b8a <__addsf3+0x1e>
    1b7e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b80:	11 f4       	brne	.+4      	; 0x1b86 <__addsf3+0x1a>
    1b82:	1e f4       	brtc	.+6      	; 0x1b8a <__addsf3+0x1e>
    1b84:	86 c1       	rjmp	.+780    	; 0x1e92 <__fp_nan>
    1b86:	0e f4       	brtc	.+2      	; 0x1b8a <__addsf3+0x1e>
    1b88:	e0 95       	com	r30
    1b8a:	e7 fb       	bst	r30, 7
    1b8c:	7c c1       	rjmp	.+760    	; 0x1e86 <__fp_inf>

00001b8e <__addsf3x>:
    1b8e:	e9 2f       	mov	r30, r25
    1b90:	00 d2       	rcall	.+1024   	; 0x1f92 <__fp_split3>
    1b92:	80 f3       	brcs	.-32     	; 0x1b74 <__addsf3+0x8>
    1b94:	ba 17       	cp	r27, r26
    1b96:	62 07       	cpc	r22, r18
    1b98:	73 07       	cpc	r23, r19
    1b9a:	84 07       	cpc	r24, r20
    1b9c:	95 07       	cpc	r25, r21
    1b9e:	18 f0       	brcs	.+6      	; 0x1ba6 <__addsf3x+0x18>
    1ba0:	71 f4       	brne	.+28     	; 0x1bbe <__addsf3x+0x30>
    1ba2:	9e f5       	brtc	.+102    	; 0x1c0a <__addsf3x+0x7c>
    1ba4:	18 c2       	rjmp	.+1072   	; 0x1fd6 <__fp_zero>
    1ba6:	0e f4       	brtc	.+2      	; 0x1baa <__addsf3x+0x1c>
    1ba8:	e0 95       	com	r30
    1baa:	0b 2e       	mov	r0, r27
    1bac:	ba 2f       	mov	r27, r26
    1bae:	a0 2d       	mov	r26, r0
    1bb0:	0b 01       	movw	r0, r22
    1bb2:	b9 01       	movw	r22, r18
    1bb4:	90 01       	movw	r18, r0
    1bb6:	0c 01       	movw	r0, r24
    1bb8:	ca 01       	movw	r24, r20
    1bba:	a0 01       	movw	r20, r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	ff 27       	eor	r31, r31
    1bc0:	59 1b       	sub	r21, r25
    1bc2:	99 f0       	breq	.+38     	; 0x1bea <__addsf3x+0x5c>
    1bc4:	59 3f       	cpi	r21, 0xF9	; 249
    1bc6:	50 f4       	brcc	.+20     	; 0x1bdc <__addsf3x+0x4e>
    1bc8:	50 3e       	cpi	r21, 0xE0	; 224
    1bca:	68 f1       	brcs	.+90     	; 0x1c26 <__addsf3x+0x98>
    1bcc:	1a 16       	cp	r1, r26
    1bce:	f0 40       	sbci	r31, 0x00	; 0
    1bd0:	a2 2f       	mov	r26, r18
    1bd2:	23 2f       	mov	r18, r19
    1bd4:	34 2f       	mov	r19, r20
    1bd6:	44 27       	eor	r20, r20
    1bd8:	58 5f       	subi	r21, 0xF8	; 248
    1bda:	f3 cf       	rjmp	.-26     	; 0x1bc2 <__addsf3x+0x34>
    1bdc:	46 95       	lsr	r20
    1bde:	37 95       	ror	r19
    1be0:	27 95       	ror	r18
    1be2:	a7 95       	ror	r26
    1be4:	f0 40       	sbci	r31, 0x00	; 0
    1be6:	53 95       	inc	r21
    1be8:	c9 f7       	brne	.-14     	; 0x1bdc <__addsf3x+0x4e>
    1bea:	7e f4       	brtc	.+30     	; 0x1c0a <__addsf3x+0x7c>
    1bec:	1f 16       	cp	r1, r31
    1bee:	ba 0b       	sbc	r27, r26
    1bf0:	62 0b       	sbc	r22, r18
    1bf2:	73 0b       	sbc	r23, r19
    1bf4:	84 0b       	sbc	r24, r20
    1bf6:	ba f0       	brmi	.+46     	; 0x1c26 <__addsf3x+0x98>
    1bf8:	91 50       	subi	r25, 0x01	; 1
    1bfa:	a1 f0       	breq	.+40     	; 0x1c24 <__addsf3x+0x96>
    1bfc:	ff 0f       	add	r31, r31
    1bfe:	bb 1f       	adc	r27, r27
    1c00:	66 1f       	adc	r22, r22
    1c02:	77 1f       	adc	r23, r23
    1c04:	88 1f       	adc	r24, r24
    1c06:	c2 f7       	brpl	.-16     	; 0x1bf8 <__addsf3x+0x6a>
    1c08:	0e c0       	rjmp	.+28     	; 0x1c26 <__addsf3x+0x98>
    1c0a:	ba 0f       	add	r27, r26
    1c0c:	62 1f       	adc	r22, r18
    1c0e:	73 1f       	adc	r23, r19
    1c10:	84 1f       	adc	r24, r20
    1c12:	48 f4       	brcc	.+18     	; 0x1c26 <__addsf3x+0x98>
    1c14:	87 95       	ror	r24
    1c16:	77 95       	ror	r23
    1c18:	67 95       	ror	r22
    1c1a:	b7 95       	ror	r27
    1c1c:	f7 95       	ror	r31
    1c1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <__addsf3x+0x96>
    1c22:	b3 cf       	rjmp	.-154    	; 0x1b8a <__addsf3+0x1e>
    1c24:	93 95       	inc	r25
    1c26:	88 0f       	add	r24, r24
    1c28:	08 f0       	brcs	.+2      	; 0x1c2c <__addsf3x+0x9e>
    1c2a:	99 27       	eor	r25, r25
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	97 95       	ror	r25
    1c30:	87 95       	ror	r24
    1c32:	08 95       	ret

00001c34 <atan>:
    1c34:	df 93       	push	r29
    1c36:	dd 27       	eor	r29, r29
    1c38:	b9 2f       	mov	r27, r25
    1c3a:	bf 77       	andi	r27, 0x7F	; 127
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	16 16       	cp	r1, r22
    1c42:	17 06       	cpc	r1, r23
    1c44:	48 07       	cpc	r20, r24
    1c46:	5b 07       	cpc	r21, r27
    1c48:	10 f4       	brcc	.+4      	; 0x1c4e <atan+0x1a>
    1c4a:	d9 2f       	mov	r29, r25
    1c4c:	cf d1       	rcall	.+926    	; 0x1fec <inverse>
    1c4e:	9f 93       	push	r25
    1c50:	8f 93       	push	r24
    1c52:	7f 93       	push	r23
    1c54:	6f 93       	push	r22
    1c56:	34 d2       	rcall	.+1128   	; 0x20c0 <square>
    1c58:	ec e8       	ldi	r30, 0x8C	; 140
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	1d d1       	rcall	.+570    	; 0x1e98 <__fp_powser>
    1c5e:	77 d1       	rcall	.+750    	; 0x1f4e <__fp_round>
    1c60:	2f 91       	pop	r18
    1c62:	3f 91       	pop	r19
    1c64:	4f 91       	pop	r20
    1c66:	5f 91       	pop	r21
    1c68:	d4 d1       	rcall	.+936    	; 0x2012 <__mulsf3x>
    1c6a:	dd 23       	and	r29, r29
    1c6c:	49 f0       	breq	.+18     	; 0x1c80 <atan+0x4c>
    1c6e:	90 58       	subi	r25, 0x80	; 128
    1c70:	a2 ea       	ldi	r26, 0xA2	; 162
    1c72:	2a ed       	ldi	r18, 0xDA	; 218
    1c74:	3f e0       	ldi	r19, 0x0F	; 15
    1c76:	49 ec       	ldi	r20, 0xC9	; 201
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	d0 78       	andi	r29, 0x80	; 128
    1c7c:	5d 27       	eor	r21, r29
    1c7e:	87 df       	rcall	.-242    	; 0x1b8e <__addsf3x>
    1c80:	df 91       	pop	r29
    1c82:	65 c1       	rjmp	.+714    	; 0x1f4e <__fp_round>

00001c84 <__cmpsf2>:
    1c84:	dc d0       	rcall	.+440    	; 0x1e3e <__fp_cmp>
    1c86:	08 f4       	brcc	.+2      	; 0x1c8a <__cmpsf2+0x6>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	08 95       	ret

00001c8c <cos>:
    1c8c:	39 d1       	rcall	.+626    	; 0x1f00 <__fp_rempio2>
    1c8e:	e3 95       	inc	r30
    1c90:	6f c1       	rjmp	.+734    	; 0x1f70 <__fp_sinus>

00001c92 <__divsf3>:
    1c92:	0c d0       	rcall	.+24     	; 0x1cac <__divsf3x>
    1c94:	5c c1       	rjmp	.+696    	; 0x1f4e <__fp_round>
    1c96:	2c d1       	rcall	.+600    	; 0x1ef0 <__fp_pscB>
    1c98:	40 f0       	brcs	.+16     	; 0x1caa <__divsf3+0x18>
    1c9a:	23 d1       	rcall	.+582    	; 0x1ee2 <__fp_pscA>
    1c9c:	30 f0       	brcs	.+12     	; 0x1caa <__divsf3+0x18>
    1c9e:	21 f4       	brne	.+8      	; 0x1ca8 <__divsf3+0x16>
    1ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca2:	19 f0       	breq	.+6      	; 0x1caa <__divsf3+0x18>
    1ca4:	f0 c0       	rjmp	.+480    	; 0x1e86 <__fp_inf>
    1ca6:	51 11       	cpse	r21, r1
    1ca8:	97 c1       	rjmp	.+814    	; 0x1fd8 <__fp_szero>
    1caa:	f3 c0       	rjmp	.+486    	; 0x1e92 <__fp_nan>

00001cac <__divsf3x>:
    1cac:	72 d1       	rcall	.+740    	; 0x1f92 <__fp_split3>
    1cae:	98 f3       	brcs	.-26     	; 0x1c96 <__divsf3+0x4>

00001cb0 <__divsf3_pse>:
    1cb0:	99 23       	and	r25, r25
    1cb2:	c9 f3       	breq	.-14     	; 0x1ca6 <__divsf3+0x14>
    1cb4:	55 23       	and	r21, r21
    1cb6:	b1 f3       	breq	.-20     	; 0x1ca4 <__divsf3+0x12>
    1cb8:	95 1b       	sub	r25, r21
    1cba:	55 0b       	sbc	r21, r21
    1cbc:	bb 27       	eor	r27, r27
    1cbe:	aa 27       	eor	r26, r26
    1cc0:	62 17       	cp	r22, r18
    1cc2:	73 07       	cpc	r23, r19
    1cc4:	84 07       	cpc	r24, r20
    1cc6:	38 f0       	brcs	.+14     	; 0x1cd6 <__divsf3_pse+0x26>
    1cc8:	9f 5f       	subi	r25, 0xFF	; 255
    1cca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ccc:	22 0f       	add	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	44 1f       	adc	r20, r20
    1cd2:	aa 1f       	adc	r26, r26
    1cd4:	a9 f3       	breq	.-22     	; 0x1cc0 <__divsf3_pse+0x10>
    1cd6:	33 d0       	rcall	.+102    	; 0x1d3e <__divsf3_pse+0x8e>
    1cd8:	0e 2e       	mov	r0, r30
    1cda:	3a f0       	brmi	.+14     	; 0x1cea <__divsf3_pse+0x3a>
    1cdc:	e0 e8       	ldi	r30, 0x80	; 128
    1cde:	30 d0       	rcall	.+96     	; 0x1d40 <__divsf3_pse+0x90>
    1ce0:	91 50       	subi	r25, 0x01	; 1
    1ce2:	50 40       	sbci	r21, 0x00	; 0
    1ce4:	e6 95       	lsr	r30
    1ce6:	00 1c       	adc	r0, r0
    1ce8:	ca f7       	brpl	.-14     	; 0x1cdc <__divsf3_pse+0x2c>
    1cea:	29 d0       	rcall	.+82     	; 0x1d3e <__divsf3_pse+0x8e>
    1cec:	fe 2f       	mov	r31, r30
    1cee:	27 d0       	rcall	.+78     	; 0x1d3e <__divsf3_pse+0x8e>
    1cf0:	66 0f       	add	r22, r22
    1cf2:	77 1f       	adc	r23, r23
    1cf4:	88 1f       	adc	r24, r24
    1cf6:	bb 1f       	adc	r27, r27
    1cf8:	26 17       	cp	r18, r22
    1cfa:	37 07       	cpc	r19, r23
    1cfc:	48 07       	cpc	r20, r24
    1cfe:	ab 07       	cpc	r26, r27
    1d00:	b0 e8       	ldi	r27, 0x80	; 128
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <__divsf3_pse+0x56>
    1d04:	bb 0b       	sbc	r27, r27
    1d06:	80 2d       	mov	r24, r0
    1d08:	bf 01       	movw	r22, r30
    1d0a:	ff 27       	eor	r31, r31
    1d0c:	93 58       	subi	r25, 0x83	; 131
    1d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d10:	2a f0       	brmi	.+10     	; 0x1d1c <__divsf3_pse+0x6c>
    1d12:	9e 3f       	cpi	r25, 0xFE	; 254
    1d14:	51 05       	cpc	r21, r1
    1d16:	68 f0       	brcs	.+26     	; 0x1d32 <__divsf3_pse+0x82>
    1d18:	b6 c0       	rjmp	.+364    	; 0x1e86 <__fp_inf>
    1d1a:	5e c1       	rjmp	.+700    	; 0x1fd8 <__fp_szero>
    1d1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d1e:	ec f3       	brlt	.-6      	; 0x1d1a <__divsf3_pse+0x6a>
    1d20:	98 3e       	cpi	r25, 0xE8	; 232
    1d22:	dc f3       	brlt	.-10     	; 0x1d1a <__divsf3_pse+0x6a>
    1d24:	86 95       	lsr	r24
    1d26:	77 95       	ror	r23
    1d28:	67 95       	ror	r22
    1d2a:	b7 95       	ror	r27
    1d2c:	f7 95       	ror	r31
    1d2e:	9f 5f       	subi	r25, 0xFF	; 255
    1d30:	c9 f7       	brne	.-14     	; 0x1d24 <__divsf3_pse+0x74>
    1d32:	88 0f       	add	r24, r24
    1d34:	91 1d       	adc	r25, r1
    1d36:	96 95       	lsr	r25
    1d38:	87 95       	ror	r24
    1d3a:	97 f9       	bld	r25, 7
    1d3c:	08 95       	ret
    1d3e:	e1 e0       	ldi	r30, 0x01	; 1
    1d40:	66 0f       	add	r22, r22
    1d42:	77 1f       	adc	r23, r23
    1d44:	88 1f       	adc	r24, r24
    1d46:	bb 1f       	adc	r27, r27
    1d48:	62 17       	cp	r22, r18
    1d4a:	73 07       	cpc	r23, r19
    1d4c:	84 07       	cpc	r24, r20
    1d4e:	ba 07       	cpc	r27, r26
    1d50:	20 f0       	brcs	.+8      	; 0x1d5a <__divsf3_pse+0xaa>
    1d52:	62 1b       	sub	r22, r18
    1d54:	73 0b       	sbc	r23, r19
    1d56:	84 0b       	sbc	r24, r20
    1d58:	ba 0b       	sbc	r27, r26
    1d5a:	ee 1f       	adc	r30, r30
    1d5c:	88 f7       	brcc	.-30     	; 0x1d40 <__divsf3_pse+0x90>
    1d5e:	e0 95       	com	r30
    1d60:	08 95       	ret

00001d62 <__fixsfsi>:
    1d62:	04 d0       	rcall	.+8      	; 0x1d6c <__fixunssfsi>
    1d64:	68 94       	set
    1d66:	b1 11       	cpse	r27, r1
    1d68:	37 c1       	rjmp	.+622    	; 0x1fd8 <__fp_szero>
    1d6a:	08 95       	ret

00001d6c <__fixunssfsi>:
    1d6c:	1a d1       	rcall	.+564    	; 0x1fa2 <__fp_splitA>
    1d6e:	88 f0       	brcs	.+34     	; 0x1d92 <__fixunssfsi+0x26>
    1d70:	9f 57       	subi	r25, 0x7F	; 127
    1d72:	90 f0       	brcs	.+36     	; 0x1d98 <__fixunssfsi+0x2c>
    1d74:	b9 2f       	mov	r27, r25
    1d76:	99 27       	eor	r25, r25
    1d78:	b7 51       	subi	r27, 0x17	; 23
    1d7a:	a0 f0       	brcs	.+40     	; 0x1da4 <__fixunssfsi+0x38>
    1d7c:	d1 f0       	breq	.+52     	; 0x1db2 <__fixunssfsi+0x46>
    1d7e:	66 0f       	add	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	88 1f       	adc	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	1a f0       	brmi	.+6      	; 0x1d8e <__fixunssfsi+0x22>
    1d88:	ba 95       	dec	r27
    1d8a:	c9 f7       	brne	.-14     	; 0x1d7e <__fixunssfsi+0x12>
    1d8c:	12 c0       	rjmp	.+36     	; 0x1db2 <__fixunssfsi+0x46>
    1d8e:	b1 30       	cpi	r27, 0x01	; 1
    1d90:	81 f0       	breq	.+32     	; 0x1db2 <__fixunssfsi+0x46>
    1d92:	21 d1       	rcall	.+578    	; 0x1fd6 <__fp_zero>
    1d94:	b1 e0       	ldi	r27, 0x01	; 1
    1d96:	08 95       	ret
    1d98:	1e c1       	rjmp	.+572    	; 0x1fd6 <__fp_zero>
    1d9a:	67 2f       	mov	r22, r23
    1d9c:	78 2f       	mov	r23, r24
    1d9e:	88 27       	eor	r24, r24
    1da0:	b8 5f       	subi	r27, 0xF8	; 248
    1da2:	39 f0       	breq	.+14     	; 0x1db2 <__fixunssfsi+0x46>
    1da4:	b9 3f       	cpi	r27, 0xF9	; 249
    1da6:	cc f3       	brlt	.-14     	; 0x1d9a <__fixunssfsi+0x2e>
    1da8:	86 95       	lsr	r24
    1daa:	77 95       	ror	r23
    1dac:	67 95       	ror	r22
    1dae:	b3 95       	inc	r27
    1db0:	d9 f7       	brne	.-10     	; 0x1da8 <__fixunssfsi+0x3c>
    1db2:	3e f4       	brtc	.+14     	; 0x1dc2 <__fixunssfsi+0x56>
    1db4:	90 95       	com	r25
    1db6:	80 95       	com	r24
    1db8:	70 95       	com	r23
    1dba:	61 95       	neg	r22
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	08 95       	ret

00001dc4 <__floatunsisf>:
    1dc4:	e8 94       	clt
    1dc6:	09 c0       	rjmp	.+18     	; 0x1dda <__floatsisf+0x12>

00001dc8 <__floatsisf>:
    1dc8:	97 fb       	bst	r25, 7
    1dca:	3e f4       	brtc	.+14     	; 0x1dda <__floatsisf+0x12>
    1dcc:	90 95       	com	r25
    1dce:	80 95       	com	r24
    1dd0:	70 95       	com	r23
    1dd2:	61 95       	neg	r22
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	99 23       	and	r25, r25
    1ddc:	a9 f0       	breq	.+42     	; 0x1e08 <__floatsisf+0x40>
    1dde:	f9 2f       	mov	r31, r25
    1de0:	96 e9       	ldi	r25, 0x96	; 150
    1de2:	bb 27       	eor	r27, r27
    1de4:	93 95       	inc	r25
    1de6:	f6 95       	lsr	r31
    1de8:	87 95       	ror	r24
    1dea:	77 95       	ror	r23
    1dec:	67 95       	ror	r22
    1dee:	b7 95       	ror	r27
    1df0:	f1 11       	cpse	r31, r1
    1df2:	f8 cf       	rjmp	.-16     	; 0x1de4 <__floatsisf+0x1c>
    1df4:	fa f4       	brpl	.+62     	; 0x1e34 <__floatsisf+0x6c>
    1df6:	bb 0f       	add	r27, r27
    1df8:	11 f4       	brne	.+4      	; 0x1dfe <__floatsisf+0x36>
    1dfa:	60 ff       	sbrs	r22, 0
    1dfc:	1b c0       	rjmp	.+54     	; 0x1e34 <__floatsisf+0x6c>
    1dfe:	6f 5f       	subi	r22, 0xFF	; 255
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	8f 4f       	sbci	r24, 0xFF	; 255
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	16 c0       	rjmp	.+44     	; 0x1e34 <__floatsisf+0x6c>
    1e08:	88 23       	and	r24, r24
    1e0a:	11 f0       	breq	.+4      	; 0x1e10 <__floatsisf+0x48>
    1e0c:	96 e9       	ldi	r25, 0x96	; 150
    1e0e:	11 c0       	rjmp	.+34     	; 0x1e32 <__floatsisf+0x6a>
    1e10:	77 23       	and	r23, r23
    1e12:	21 f0       	breq	.+8      	; 0x1e1c <__floatsisf+0x54>
    1e14:	9e e8       	ldi	r25, 0x8E	; 142
    1e16:	87 2f       	mov	r24, r23
    1e18:	76 2f       	mov	r23, r22
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <__floatsisf+0x5e>
    1e1c:	66 23       	and	r22, r22
    1e1e:	71 f0       	breq	.+28     	; 0x1e3c <__floatsisf+0x74>
    1e20:	96 e8       	ldi	r25, 0x86	; 134
    1e22:	86 2f       	mov	r24, r22
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	2a f0       	brmi	.+10     	; 0x1e34 <__floatsisf+0x6c>
    1e2a:	9a 95       	dec	r25
    1e2c:	66 0f       	add	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	88 1f       	adc	r24, r24
    1e32:	da f7       	brpl	.-10     	; 0x1e2a <__floatsisf+0x62>
    1e34:	88 0f       	add	r24, r24
    1e36:	96 95       	lsr	r25
    1e38:	87 95       	ror	r24
    1e3a:	97 f9       	bld	r25, 7
    1e3c:	08 95       	ret

00001e3e <__fp_cmp>:
    1e3e:	99 0f       	add	r25, r25
    1e40:	00 08       	sbc	r0, r0
    1e42:	55 0f       	add	r21, r21
    1e44:	aa 0b       	sbc	r26, r26
    1e46:	e0 e8       	ldi	r30, 0x80	; 128
    1e48:	fe ef       	ldi	r31, 0xFE	; 254
    1e4a:	16 16       	cp	r1, r22
    1e4c:	17 06       	cpc	r1, r23
    1e4e:	e8 07       	cpc	r30, r24
    1e50:	f9 07       	cpc	r31, r25
    1e52:	c0 f0       	brcs	.+48     	; 0x1e84 <__fp_cmp+0x46>
    1e54:	12 16       	cp	r1, r18
    1e56:	13 06       	cpc	r1, r19
    1e58:	e4 07       	cpc	r30, r20
    1e5a:	f5 07       	cpc	r31, r21
    1e5c:	98 f0       	brcs	.+38     	; 0x1e84 <__fp_cmp+0x46>
    1e5e:	62 1b       	sub	r22, r18
    1e60:	73 0b       	sbc	r23, r19
    1e62:	84 0b       	sbc	r24, r20
    1e64:	95 0b       	sbc	r25, r21
    1e66:	39 f4       	brne	.+14     	; 0x1e76 <__fp_cmp+0x38>
    1e68:	0a 26       	eor	r0, r26
    1e6a:	61 f0       	breq	.+24     	; 0x1e84 <__fp_cmp+0x46>
    1e6c:	23 2b       	or	r18, r19
    1e6e:	24 2b       	or	r18, r20
    1e70:	25 2b       	or	r18, r21
    1e72:	21 f4       	brne	.+8      	; 0x1e7c <__fp_cmp+0x3e>
    1e74:	08 95       	ret
    1e76:	0a 26       	eor	r0, r26
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <__fp_cmp+0x3e>
    1e7a:	a1 40       	sbci	r26, 0x01	; 1
    1e7c:	a6 95       	lsr	r26
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	81 1d       	adc	r24, r1
    1e82:	81 1d       	adc	r24, r1
    1e84:	08 95       	ret

00001e86 <__fp_inf>:
    1e86:	97 f9       	bld	r25, 7
    1e88:	9f 67       	ori	r25, 0x7F	; 127
    1e8a:	80 e8       	ldi	r24, 0x80	; 128
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	08 95       	ret

00001e92 <__fp_nan>:
    1e92:	9f ef       	ldi	r25, 0xFF	; 255
    1e94:	80 ec       	ldi	r24, 0xC0	; 192
    1e96:	08 95       	ret

00001e98 <__fp_powser>:
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	1f 93       	push	r17
    1e9e:	0f 93       	push	r16
    1ea0:	ff 92       	push	r15
    1ea2:	ef 92       	push	r14
    1ea4:	df 92       	push	r13
    1ea6:	7b 01       	movw	r14, r22
    1ea8:	8c 01       	movw	r16, r24
    1eaa:	68 94       	set
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <__fp_powser+0x20>
    1eae:	da 2e       	mov	r13, r26
    1eb0:	ef 01       	movw	r28, r30
    1eb2:	af d0       	rcall	.+350    	; 0x2012 <__mulsf3x>
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e8 94       	clt
    1eb8:	a5 91       	lpm	r26, Z+
    1eba:	25 91       	lpm	r18, Z+
    1ebc:	35 91       	lpm	r19, Z+
    1ebe:	45 91       	lpm	r20, Z+
    1ec0:	55 91       	lpm	r21, Z+
    1ec2:	ae f3       	brts	.-22     	; 0x1eae <__fp_powser+0x16>
    1ec4:	ef 01       	movw	r28, r30
    1ec6:	63 de       	rcall	.-826    	; 0x1b8e <__addsf3x>
    1ec8:	fe 01       	movw	r30, r28
    1eca:	97 01       	movw	r18, r14
    1ecc:	a8 01       	movw	r20, r16
    1ece:	da 94       	dec	r13
    1ed0:	79 f7       	brne	.-34     	; 0x1eb0 <__fp_powser+0x18>
    1ed2:	df 90       	pop	r13
    1ed4:	ef 90       	pop	r14
    1ed6:	ff 90       	pop	r15
    1ed8:	0f 91       	pop	r16
    1eda:	1f 91       	pop	r17
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <__fp_pscA>:
    1ee2:	00 24       	eor	r0, r0
    1ee4:	0a 94       	dec	r0
    1ee6:	16 16       	cp	r1, r22
    1ee8:	17 06       	cpc	r1, r23
    1eea:	18 06       	cpc	r1, r24
    1eec:	09 06       	cpc	r0, r25
    1eee:	08 95       	ret

00001ef0 <__fp_pscB>:
    1ef0:	00 24       	eor	r0, r0
    1ef2:	0a 94       	dec	r0
    1ef4:	12 16       	cp	r1, r18
    1ef6:	13 06       	cpc	r1, r19
    1ef8:	14 06       	cpc	r1, r20
    1efa:	05 06       	cpc	r0, r21
    1efc:	08 95       	ret
    1efe:	c9 cf       	rjmp	.-110    	; 0x1e92 <__fp_nan>

00001f00 <__fp_rempio2>:
    1f00:	50 d0       	rcall	.+160    	; 0x1fa2 <__fp_splitA>
    1f02:	e8 f3       	brcs	.-6      	; 0x1efe <__fp_pscB+0xe>
    1f04:	e8 94       	clt
    1f06:	e0 e0       	ldi	r30, 0x00	; 0
    1f08:	bb 27       	eor	r27, r27
    1f0a:	9f 57       	subi	r25, 0x7F	; 127
    1f0c:	f0 f0       	brcs	.+60     	; 0x1f4a <__fp_rempio2+0x4a>
    1f0e:	2a ed       	ldi	r18, 0xDA	; 218
    1f10:	3f e0       	ldi	r19, 0x0F	; 15
    1f12:	49 ec       	ldi	r20, 0xC9	; 201
    1f14:	06 c0       	rjmp	.+12     	; 0x1f22 <__fp_rempio2+0x22>
    1f16:	ee 0f       	add	r30, r30
    1f18:	bb 0f       	add	r27, r27
    1f1a:	66 1f       	adc	r22, r22
    1f1c:	77 1f       	adc	r23, r23
    1f1e:	88 1f       	adc	r24, r24
    1f20:	28 f0       	brcs	.+10     	; 0x1f2c <__fp_rempio2+0x2c>
    1f22:	b2 3a       	cpi	r27, 0xA2	; 162
    1f24:	62 07       	cpc	r22, r18
    1f26:	73 07       	cpc	r23, r19
    1f28:	84 07       	cpc	r24, r20
    1f2a:	28 f0       	brcs	.+10     	; 0x1f36 <__fp_rempio2+0x36>
    1f2c:	b2 5a       	subi	r27, 0xA2	; 162
    1f2e:	62 0b       	sbc	r22, r18
    1f30:	73 0b       	sbc	r23, r19
    1f32:	84 0b       	sbc	r24, r20
    1f34:	e3 95       	inc	r30
    1f36:	9a 95       	dec	r25
    1f38:	72 f7       	brpl	.-36     	; 0x1f16 <__fp_rempio2+0x16>
    1f3a:	80 38       	cpi	r24, 0x80	; 128
    1f3c:	30 f4       	brcc	.+12     	; 0x1f4a <__fp_rempio2+0x4a>
    1f3e:	9a 95       	dec	r25
    1f40:	bb 0f       	add	r27, r27
    1f42:	66 1f       	adc	r22, r22
    1f44:	77 1f       	adc	r23, r23
    1f46:	88 1f       	adc	r24, r24
    1f48:	d2 f7       	brpl	.-12     	; 0x1f3e <__fp_rempio2+0x3e>
    1f4a:	90 48       	sbci	r25, 0x80	; 128
    1f4c:	be c0       	rjmp	.+380    	; 0x20ca <__fp_mpack_finite>

00001f4e <__fp_round>:
    1f4e:	09 2e       	mov	r0, r25
    1f50:	03 94       	inc	r0
    1f52:	00 0c       	add	r0, r0
    1f54:	11 f4       	brne	.+4      	; 0x1f5a <__fp_round+0xc>
    1f56:	88 23       	and	r24, r24
    1f58:	52 f0       	brmi	.+20     	; 0x1f6e <__fp_round+0x20>
    1f5a:	bb 0f       	add	r27, r27
    1f5c:	40 f4       	brcc	.+16     	; 0x1f6e <__fp_round+0x20>
    1f5e:	bf 2b       	or	r27, r31
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <__fp_round+0x18>
    1f62:	60 ff       	sbrs	r22, 0
    1f64:	04 c0       	rjmp	.+8      	; 0x1f6e <__fp_round+0x20>
    1f66:	6f 5f       	subi	r22, 0xFF	; 255
    1f68:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6e:	08 95       	ret

00001f70 <__fp_sinus>:
    1f70:	ef 93       	push	r30
    1f72:	e0 ff       	sbrs	r30, 0
    1f74:	06 c0       	rjmp	.+12     	; 0x1f82 <__fp_sinus+0x12>
    1f76:	a2 ea       	ldi	r26, 0xA2	; 162
    1f78:	2a ed       	ldi	r18, 0xDA	; 218
    1f7a:	3f e0       	ldi	r19, 0x0F	; 15
    1f7c:	49 ec       	ldi	r20, 0xC9	; 201
    1f7e:	5f eb       	ldi	r21, 0xBF	; 191
    1f80:	06 de       	rcall	.-1012   	; 0x1b8e <__addsf3x>
    1f82:	e5 df       	rcall	.-54     	; 0x1f4e <__fp_round>
    1f84:	0f 90       	pop	r0
    1f86:	03 94       	inc	r0
    1f88:	01 fc       	sbrc	r0, 1
    1f8a:	90 58       	subi	r25, 0x80	; 128
    1f8c:	e9 eb       	ldi	r30, 0xB9	; 185
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	a8 c0       	rjmp	.+336    	; 0x20e2 <__fp_powsodd>

00001f92 <__fp_split3>:
    1f92:	57 fd       	sbrc	r21, 7
    1f94:	90 58       	subi	r25, 0x80	; 128
    1f96:	44 0f       	add	r20, r20
    1f98:	55 1f       	adc	r21, r21
    1f9a:	59 f0       	breq	.+22     	; 0x1fb2 <__fp_splitA+0x10>
    1f9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f9e:	71 f0       	breq	.+28     	; 0x1fbc <__fp_splitA+0x1a>
    1fa0:	47 95       	ror	r20

00001fa2 <__fp_splitA>:
    1fa2:	88 0f       	add	r24, r24
    1fa4:	97 fb       	bst	r25, 7
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	61 f0       	breq	.+24     	; 0x1fc2 <__fp_splitA+0x20>
    1faa:	9f 3f       	cpi	r25, 0xFF	; 255
    1fac:	79 f0       	breq	.+30     	; 0x1fcc <__fp_splitA+0x2a>
    1fae:	87 95       	ror	r24
    1fb0:	08 95       	ret
    1fb2:	12 16       	cp	r1, r18
    1fb4:	13 06       	cpc	r1, r19
    1fb6:	14 06       	cpc	r1, r20
    1fb8:	55 1f       	adc	r21, r21
    1fba:	f2 cf       	rjmp	.-28     	; 0x1fa0 <__fp_split3+0xe>
    1fbc:	46 95       	lsr	r20
    1fbe:	f1 df       	rcall	.-30     	; 0x1fa2 <__fp_splitA>
    1fc0:	08 c0       	rjmp	.+16     	; 0x1fd2 <__fp_splitA+0x30>
    1fc2:	16 16       	cp	r1, r22
    1fc4:	17 06       	cpc	r1, r23
    1fc6:	18 06       	cpc	r1, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	f1 cf       	rjmp	.-30     	; 0x1fae <__fp_splitA+0xc>
    1fcc:	86 95       	lsr	r24
    1fce:	71 05       	cpc	r23, r1
    1fd0:	61 05       	cpc	r22, r1
    1fd2:	08 94       	sec
    1fd4:	08 95       	ret

00001fd6 <__fp_zero>:
    1fd6:	e8 94       	clt

00001fd8 <__fp_szero>:
    1fd8:	bb 27       	eor	r27, r27
    1fda:	66 27       	eor	r22, r22
    1fdc:	77 27       	eor	r23, r23
    1fde:	cb 01       	movw	r24, r22
    1fe0:	97 f9       	bld	r25, 7
    1fe2:	08 95       	ret

00001fe4 <__gesf2>:
    1fe4:	2c df       	rcall	.-424    	; 0x1e3e <__fp_cmp>
    1fe6:	08 f4       	brcc	.+2      	; 0x1fea <__gesf2+0x6>
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	08 95       	ret

00001fec <inverse>:
    1fec:	9b 01       	movw	r18, r22
    1fee:	ac 01       	movw	r20, r24
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	80 e8       	ldi	r24, 0x80	; 128
    1ff6:	9f e3       	ldi	r25, 0x3F	; 63
    1ff8:	4c ce       	rjmp	.-872    	; 0x1c92 <__divsf3>

00001ffa <__mulsf3>:
    1ffa:	0b d0       	rcall	.+22     	; 0x2012 <__mulsf3x>
    1ffc:	a8 cf       	rjmp	.-176    	; 0x1f4e <__fp_round>
    1ffe:	71 df       	rcall	.-286    	; 0x1ee2 <__fp_pscA>
    2000:	28 f0       	brcs	.+10     	; 0x200c <__mulsf3+0x12>
    2002:	76 df       	rcall	.-276    	; 0x1ef0 <__fp_pscB>
    2004:	18 f0       	brcs	.+6      	; 0x200c <__mulsf3+0x12>
    2006:	95 23       	and	r25, r21
    2008:	09 f0       	breq	.+2      	; 0x200c <__mulsf3+0x12>
    200a:	3d cf       	rjmp	.-390    	; 0x1e86 <__fp_inf>
    200c:	42 cf       	rjmp	.-380    	; 0x1e92 <__fp_nan>
    200e:	11 24       	eor	r1, r1
    2010:	e3 cf       	rjmp	.-58     	; 0x1fd8 <__fp_szero>

00002012 <__mulsf3x>:
    2012:	bf df       	rcall	.-130    	; 0x1f92 <__fp_split3>
    2014:	a0 f3       	brcs	.-24     	; 0x1ffe <__mulsf3+0x4>

00002016 <__mulsf3_pse>:
    2016:	95 9f       	mul	r25, r21
    2018:	d1 f3       	breq	.-12     	; 0x200e <__mulsf3+0x14>
    201a:	95 0f       	add	r25, r21
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	55 1f       	adc	r21, r21
    2020:	62 9f       	mul	r22, r18
    2022:	f0 01       	movw	r30, r0
    2024:	72 9f       	mul	r23, r18
    2026:	bb 27       	eor	r27, r27
    2028:	f0 0d       	add	r31, r0
    202a:	b1 1d       	adc	r27, r1
    202c:	63 9f       	mul	r22, r19
    202e:	aa 27       	eor	r26, r26
    2030:	f0 0d       	add	r31, r0
    2032:	b1 1d       	adc	r27, r1
    2034:	aa 1f       	adc	r26, r26
    2036:	64 9f       	mul	r22, r20
    2038:	66 27       	eor	r22, r22
    203a:	b0 0d       	add	r27, r0
    203c:	a1 1d       	adc	r26, r1
    203e:	66 1f       	adc	r22, r22
    2040:	82 9f       	mul	r24, r18
    2042:	22 27       	eor	r18, r18
    2044:	b0 0d       	add	r27, r0
    2046:	a1 1d       	adc	r26, r1
    2048:	62 1f       	adc	r22, r18
    204a:	73 9f       	mul	r23, r19
    204c:	b0 0d       	add	r27, r0
    204e:	a1 1d       	adc	r26, r1
    2050:	62 1f       	adc	r22, r18
    2052:	83 9f       	mul	r24, r19
    2054:	a0 0d       	add	r26, r0
    2056:	61 1d       	adc	r22, r1
    2058:	22 1f       	adc	r18, r18
    205a:	74 9f       	mul	r23, r20
    205c:	33 27       	eor	r19, r19
    205e:	a0 0d       	add	r26, r0
    2060:	61 1d       	adc	r22, r1
    2062:	23 1f       	adc	r18, r19
    2064:	84 9f       	mul	r24, r20
    2066:	60 0d       	add	r22, r0
    2068:	21 1d       	adc	r18, r1
    206a:	82 2f       	mov	r24, r18
    206c:	76 2f       	mov	r23, r22
    206e:	6a 2f       	mov	r22, r26
    2070:	11 24       	eor	r1, r1
    2072:	9f 57       	subi	r25, 0x7F	; 127
    2074:	50 40       	sbci	r21, 0x00	; 0
    2076:	8a f0       	brmi	.+34     	; 0x209a <__mulsf3_pse+0x84>
    2078:	e1 f0       	breq	.+56     	; 0x20b2 <__mulsf3_pse+0x9c>
    207a:	88 23       	and	r24, r24
    207c:	4a f0       	brmi	.+18     	; 0x2090 <__mulsf3_pse+0x7a>
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	bb 1f       	adc	r27, r27
    2084:	66 1f       	adc	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	88 1f       	adc	r24, r24
    208a:	91 50       	subi	r25, 0x01	; 1
    208c:	50 40       	sbci	r21, 0x00	; 0
    208e:	a9 f7       	brne	.-22     	; 0x207a <__mulsf3_pse+0x64>
    2090:	9e 3f       	cpi	r25, 0xFE	; 254
    2092:	51 05       	cpc	r21, r1
    2094:	70 f0       	brcs	.+28     	; 0x20b2 <__mulsf3_pse+0x9c>
    2096:	f7 ce       	rjmp	.-530    	; 0x1e86 <__fp_inf>
    2098:	9f cf       	rjmp	.-194    	; 0x1fd8 <__fp_szero>
    209a:	5f 3f       	cpi	r21, 0xFF	; 255
    209c:	ec f3       	brlt	.-6      	; 0x2098 <__mulsf3_pse+0x82>
    209e:	98 3e       	cpi	r25, 0xE8	; 232
    20a0:	dc f3       	brlt	.-10     	; 0x2098 <__mulsf3_pse+0x82>
    20a2:	86 95       	lsr	r24
    20a4:	77 95       	ror	r23
    20a6:	67 95       	ror	r22
    20a8:	b7 95       	ror	r27
    20aa:	f7 95       	ror	r31
    20ac:	e7 95       	ror	r30
    20ae:	9f 5f       	subi	r25, 0xFF	; 255
    20b0:	c1 f7       	brne	.-16     	; 0x20a2 <__mulsf3_pse+0x8c>
    20b2:	fe 2b       	or	r31, r30
    20b4:	88 0f       	add	r24, r24
    20b6:	91 1d       	adc	r25, r1
    20b8:	96 95       	lsr	r25
    20ba:	87 95       	ror	r24
    20bc:	97 f9       	bld	r25, 7
    20be:	08 95       	ret

000020c0 <square>:
    20c0:	9b 01       	movw	r18, r22
    20c2:	ac 01       	movw	r20, r24
    20c4:	9a cf       	rjmp	.-204    	; 0x1ffa <__mulsf3>

000020c6 <__fp_mpack>:
    20c6:	9f 3f       	cpi	r25, 0xFF	; 255
    20c8:	31 f0       	breq	.+12     	; 0x20d6 <__fp_mpack_finite+0xc>

000020ca <__fp_mpack_finite>:
    20ca:	91 50       	subi	r25, 0x01	; 1
    20cc:	20 f4       	brcc	.+8      	; 0x20d6 <__fp_mpack_finite+0xc>
    20ce:	87 95       	ror	r24
    20d0:	77 95       	ror	r23
    20d2:	67 95       	ror	r22
    20d4:	b7 95       	ror	r27
    20d6:	88 0f       	add	r24, r24
    20d8:	91 1d       	adc	r25, r1
    20da:	96 95       	lsr	r25
    20dc:	87 95       	ror	r24
    20de:	97 f9       	bld	r25, 7
    20e0:	08 95       	ret

000020e2 <__fp_powsodd>:
    20e2:	9f 93       	push	r25
    20e4:	8f 93       	push	r24
    20e6:	7f 93       	push	r23
    20e8:	6f 93       	push	r22
    20ea:	ff 93       	push	r31
    20ec:	ef 93       	push	r30
    20ee:	9b 01       	movw	r18, r22
    20f0:	ac 01       	movw	r20, r24
    20f2:	83 df       	rcall	.-250    	; 0x1ffa <__mulsf3>
    20f4:	ef 91       	pop	r30
    20f6:	ff 91       	pop	r31
    20f8:	cf de       	rcall	.-610    	; 0x1e98 <__fp_powser>
    20fa:	2f 91       	pop	r18
    20fc:	3f 91       	pop	r19
    20fe:	4f 91       	pop	r20
    2100:	5f 91       	pop	r21
    2102:	7b cf       	rjmp	.-266    	; 0x1ffa <__mulsf3>

00002104 <_exit>:
    2104:	f8 94       	cli

00002106 <__stop_program>:
    2106:	ff cf       	rjmp	.-2      	; 0x2106 <__stop_program>
