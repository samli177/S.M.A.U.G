
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001232  00800100  000022c6  0000235a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000676  00801332  00801332  0000358c  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  0000358c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  000063f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000713c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003e0  00000000  00000000  0000716b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a60  00000000  00000000  0000754b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000faf  00000000  00000000  0000afab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024e1  00000000  00000000  0000bf5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c14  00000000  00000000  0000e43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d97  00000000  00000000  0000f050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000024f3  00000000  00000000  0000fde7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000418  00000000  00000000  000122da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	ce c6       	rjmp	.+3484   	; 0xda2 <__vector_1>
       6:	00 00       	nop
       8:	f6 c6       	rjmp	.+3564   	; 0xdf6 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	8e c7       	rjmp	.+3868   	; 0xf2e <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	60 c7       	rjmp	.+3776   	; 0xef6 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c7       	rjmp	.+3728   	; 0xf12 <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e6 ec       	ldi	r30, 0xC6	; 198
      ec:	f2 e2       	ldi	r31, 0x22	; 34
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a2 33       	cpi	r26, 0x32	; 50
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	29 e1       	ldi	r18, 0x19	; 25
     100:	a2 e3       	ldi	r26, 0x32	; 50
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a8 3a       	cpi	r26, 0xA8	; 168
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	9d d6       	rcall	.+3386   	; 0xe4a <main>
     110:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
	if(gStatus)
     11a:	80 91 00 01 	lds	r24, 0x0100
     11e:	88 23       	and	r24, r24
     120:	e1 f0       	breq	.+56     	; 0x15a <turn_around+0x44>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     122:	6b e1       	ldi	r22, 0x1B	; 27
     124:	71 e1       	ldi	r23, 0x11	; 17
     126:	80 e8       	ldi	r24, 0x80	; 128
     128:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <TWI_send_string>
     12c:	16 c0       	rjmp	.+44     	; 0x15a <turn_around+0x44>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	6e e1       	ldi	r22, 0x1E	; 30
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <USART_send_command_parameters>
		navigation_stepping_delay();
     138:	c5 d2       	rcall	.+1418   	; 0x6c4 <navigation_stepping_delay>
     13a:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
	}
	for(int i = 0; (i < 40 && TWI_get_autonom_settings() != 0); ++i)
     13c:	21 f0       	breq	.+8      	; 0x146 <turn_around+0x30>
     13e:	0e 94 b3 09 	call	0x1366	; 0x1366 <TWI_get_autonom_settings>
     142:	81 11       	cpse	r24, r1
     144:	f4 cf       	rjmp	.-24     	; 0x12e <turn_around+0x18>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	if(gStatus)
     146:	80 91 00 01 	lds	r24, 0x0100
     14a:	88 23       	and	r24, r24
     14c:	49 f0       	breq	.+18     	; 0x160 <turn_around+0x4a>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     14e:	64 e3       	ldi	r22, 0x34	; 52
     150:	71 e1       	ldi	r23, 0x11	; 17
     152:	80 e8       	ldi	r24, 0x80	; 128
     154:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <TWI_send_string>
     158:	03 c0       	rjmp	.+6      	; 0x160 <turn_around+0x4a>
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     15a:	c8 e2       	ldi	r28, 0x28	; 40
     15c:	d0 e0       	ldi	r29, 0x00	; 0
     15e:	ef cf       	rjmp	.-34     	; 0x13e <turn_around+0x28>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
	}
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <walk_forward>:

void walk_forward()
{
     166:	8f 92       	push	r8
     168:	9f 92       	push	r9
     16a:	af 92       	push	r10
     16c:	bf 92       	push	r11
     16e:	cf 92       	push	r12
     170:	df 92       	push	r13
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     17a:	19 d5       	rcall	.+2610   	; 0xbae <navigation_angle_offset>
     17c:	6b 01       	movw	r12, r22
     17e:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     180:	7a d3       	rcall	.+1780   	; 0x876 <navigation_direction_regulation>
     182:	4b 01       	movw	r8, r22
     184:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	48 e4       	ldi	r20, 0x48	; 72
     18c:	52 e4       	ldi	r21, 0x42	; 66
     18e:	c7 01       	movw	r24, r14
     190:	b6 01       	movw	r22, r12
     192:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     196:	9b 01       	movw	r18, r22
     198:	ac 01       	movw	r20, r24
     19a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__addsf3>
     19e:	2b ed       	ldi	r18, 0xDB	; 219
     1a0:	3f e0       	ldi	r19, 0x0F	; 15
     1a2:	49 e4       	ldi	r20, 0x49	; 73
     1a4:	50 e4       	ldi	r21, 0x40	; 64
     1a6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divsf3>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	4c e4       	ldi	r20, 0x4C	; 76
     1b0:	52 e4       	ldi	r21, 0x42	; 66
     1b2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__addsf3>
     1b6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1ba:	64 36       	cpi	r22, 0x64	; 100
     1bc:	71 05       	cpc	r23, r1
     1be:	34 f4       	brge	.+12     	; 0x1cc <walk_forward+0x66>
     1c0:	eb 01       	movw	r28, r22
     1c2:	dd 23       	and	r29, r29
     1c4:	2c f4       	brge	.+10     	; 0x1d0 <walk_forward+0x6a>
     1c6:	c0 e0       	ldi	r28, 0x00	; 0
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1cc:	c4 e6       	ldi	r28, 0x64	; 100
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	44 eb       	ldi	r20, 0xB4	; 180
     1d6:	52 e4       	ldi	r21, 0x42	; 66
     1d8:	c5 01       	movw	r24, r10
     1da:	b4 01       	movw	r22, r8
     1dc:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     1e0:	2b ed       	ldi	r18, 0xDB	; 219
     1e2:	3f e0       	ldi	r19, 0x0F	; 15
     1e4:	49 ec       	ldi	r20, 0xC9	; 201
     1e6:	50 e4       	ldi	r21, 0x40	; 64
     1e8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divsf3>
     1ec:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fixsfsi>
     1f0:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1f2:	40 91 01 01 	lds	r20, 0x0101
     1f6:	6c 2f       	mov	r22, r28
     1f8:	82 2f       	mov	r24, r18
     1fa:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1fe:	62 d2       	rcall	.+1220   	; 0x6c4 <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	9f 90       	pop	r9
     212:	8f 90       	pop	r8
     214:	08 95       	ret

00000216 <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
	if(gStatus)
     21a:	80 91 00 01 	lds	r24, 0x0100
     21e:	88 23       	and	r24, r24
     220:	11 f1       	breq	.+68     	; 0x266 <turn_right+0x50>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     222:	69 e5       	ldi	r22, 0x59	; 89
     224:	71 e1       	ldi	r23, 0x11	; 17
     226:	80 e8       	ldi	r24, 0x80	; 128
     228:	c3 d7       	rcall	.+3974   	; 0x11b0 <TWI_send_string>
     22a:	1d c0       	rjmp	.+58     	; 0x266 <turn_right+0x50>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
     22c:	40 e0       	ldi	r20, 0x00	; 0
     22e:	66 e4       	ldi	r22, 0x46	; 70
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <USART_send_command_parameters>
		navigation_stepping_delay();
     236:	46 d2       	rcall	.+1164   	; 0x6c4 <navigation_stepping_delay>
     238:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     23a:	c1 f0       	breq	.+48     	; 0x26c <turn_right+0x56>
     23c:	0e 94 b3 09 	call	0x1366	; 0x1366 <TWI_get_autonom_settings>
     240:	81 11       	cpse	r24, r1
     242:	f4 cf       	rjmp	.-24     	; 0x22c <turn_right+0x16>
     244:	13 c0       	rjmp	.+38     	; 0x26c <turn_right+0x56>
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     246:	8f df       	rcall	.-226    	; 0x166 <walk_forward>
     248:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     24a:	21 f0       	breq	.+8      	; 0x254 <turn_right+0x3e>
     24c:	0e 94 b3 09 	call	0x1366	; 0x1366 <TWI_get_autonom_settings>
     250:	81 11       	cpse	r24, r1
     252:	f9 cf       	rjmp	.-14     	; 0x246 <turn_right+0x30>
	{
		walk_forward();
	}
	if(gStatus)
     254:	80 91 00 01 	lds	r24, 0x0100
     258:	88 23       	and	r24, r24
     25a:	59 f0       	breq	.+22     	; 0x272 <turn_right+0x5c>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     25c:	61 e7       	ldi	r22, 0x71	; 113
     25e:	71 e1       	ldi	r23, 0x11	; 17
     260:	80 e8       	ldi	r24, 0x80	; 128
     262:	a6 d7       	rcall	.+3916   	; 0x11b0 <TWI_send_string>
     264:	06 c0       	rjmp	.+12     	; 0x272 <turn_right+0x5c>
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     266:	c4 e1       	ldi	r28, 0x14	; 20
     268:	d0 e0       	ldi	r29, 0x00	; 0
     26a:	e8 cf       	rjmp	.-48     	; 0x23c <turn_right+0x26>
     26c:	cc e0       	ldi	r28, 0x0C	; 12
     26e:	d0 e0       	ldi	r29, 0x00	; 0
     270:	ed cf       	rjmp	.-38     	; 0x24c <turn_right+0x36>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
	if(gStatus)
     27c:	80 91 00 01 	lds	r24, 0x0100
     280:	88 23       	and	r24, r24
     282:	11 f1       	breq	.+68     	; 0x2c8 <turn_left+0x50>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     284:	65 e8       	ldi	r22, 0x85	; 133
     286:	71 e1       	ldi	r23, 0x11	; 17
     288:	80 e8       	ldi	r24, 0x80	; 128
     28a:	92 d7       	rcall	.+3876   	; 0x11b0 <TWI_send_string>
     28c:	1d c0       	rjmp	.+58     	; 0x2c8 <turn_left+0x50>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	6e e1       	ldi	r22, 0x1E	; 30
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <USART_send_command_parameters>
		navigation_stepping_delay();
     298:	15 d2       	rcall	.+1066   	; 0x6c4 <navigation_stepping_delay>
     29a:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     29c:	c1 f0       	breq	.+48     	; 0x2ce <turn_left+0x56>
     29e:	0e 94 b3 09 	call	0x1366	; 0x1366 <TWI_get_autonom_settings>
     2a2:	81 11       	cpse	r24, r1
     2a4:	f4 cf       	rjmp	.-24     	; 0x28e <turn_left+0x16>
     2a6:	13 c0       	rjmp	.+38     	; 0x2ce <turn_left+0x56>
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     2a8:	5e df       	rcall	.-324    	; 0x166 <walk_forward>
     2aa:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     2ac:	21 f0       	breq	.+8      	; 0x2b6 <turn_left+0x3e>
     2ae:	0e 94 b3 09 	call	0x1366	; 0x1366 <TWI_get_autonom_settings>
     2b2:	81 11       	cpse	r24, r1
     2b4:	f9 cf       	rjmp	.-14     	; 0x2a8 <turn_left+0x30>
	{
		walk_forward();
	}
	if(gStatus)
     2b6:	80 91 00 01 	lds	r24, 0x0100
     2ba:	88 23       	and	r24, r24
     2bc:	59 f0       	breq	.+22     	; 0x2d4 <turn_left+0x5c>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2be:	6c e9       	ldi	r22, 0x9C	; 156
     2c0:	71 e1       	ldi	r23, 0x11	; 17
     2c2:	80 e8       	ldi	r24, 0x80	; 128
     2c4:	75 d7       	rcall	.+3818   	; 0x11b0 <TWI_send_string>
     2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <turn_left+0x5c>
{
	return gStatus;
}

void turn_left()
{
     2c8:	c4 e1       	ldi	r28, 0x14	; 20
     2ca:	d0 e0       	ldi	r29, 0x00	; 0
     2cc:	e8 cf       	rjmp	.-48     	; 0x29e <turn_left+0x26>
     2ce:	cc e0       	ldi	r28, 0x0C	; 12
     2d0:	d0 e0       	ldi	r29, 0x00	; 0
     2d2:	ed cf       	rjmp	.-38     	; 0x2ae <turn_left+0x36>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <walk_bakwards>:
	navigation_stepping_delay();
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void walk_bakwards()
{
     2da:	8f 92       	push	r8
     2dc:	9f 92       	push	r9
     2de:	af 92       	push	r10
     2e0:	bf 92       	push	r11
     2e2:	cf 92       	push	r12
     2e4:	df 92       	push	r13
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     2ee:	5f d4       	rcall	.+2238   	; 0xbae <navigation_angle_offset>
	angleOffset = -angleOffset;
     2f0:	6b 01       	movw	r12, r22
     2f2:	7c 01       	movw	r14, r24
     2f4:	f7 fa       	bst	r15, 7
     2f6:	f0 94       	com	r15
     2f8:	f7 f8       	bld	r15, 7
     2fa:	f0 94       	com	r15
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     2fc:	c7 01       	movw	r24, r14
     2fe:	b6 01       	movw	r22, r12
     300:	ba d2       	rcall	.+1396   	; 0x876 <navigation_direction_regulation>
     302:	4b 01       	movw	r8, r22
     304:	5c 01       	movw	r10, r24
	
	if(directionCompensationAngle>PI)
     306:	2b ed       	ldi	r18, 0xDB	; 219
     308:	3f e0       	ldi	r19, 0x0F	; 15
     30a:	49 e4       	ldi	r20, 0x49	; 73
     30c:	50 e4       	ldi	r21, 0x40	; 64
     30e:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__gesf2>
     312:	18 16       	cp	r1, r24
     314:	bc f4       	brge	.+46     	; 0x344 <walk_bakwards+0x6a>
	{
		directionCompensationAngle = PI - (directionCompensationAngle - 2*PI);
     316:	2b ed       	ldi	r18, 0xDB	; 219
     318:	3f e0       	ldi	r19, 0x0F	; 15
     31a:	49 ec       	ldi	r20, 0xC9	; 201
     31c:	50 e4       	ldi	r21, 0x40	; 64
     31e:	c5 01       	movw	r24, r10
     320:	b4 01       	movw	r22, r8
     322:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__subsf3>
     326:	26 2f       	mov	r18, r22
     328:	37 2f       	mov	r19, r23
     32a:	48 2f       	mov	r20, r24
     32c:	59 2f       	mov	r21, r25
     32e:	6b ed       	ldi	r22, 0xDB	; 219
     330:	7f e0       	ldi	r23, 0x0F	; 15
     332:	89 e4       	ldi	r24, 0x49	; 73
     334:	90 e4       	ldi	r25, 0x40	; 64
     336:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__subsf3>
     33a:	86 2e       	mov	r8, r22
     33c:	97 2e       	mov	r9, r23
     33e:	a8 2e       	mov	r10, r24
     340:	b9 2e       	mov	r11, r25
     342:	0c c0       	rjmp	.+24     	; 0x35c <walk_bakwards+0x82>
	}
	else
	{
		directionCompensationAngle = PI - directionCompensationAngle;
     344:	a5 01       	movw	r20, r10
     346:	94 01       	movw	r18, r8
     348:	6b ed       	ldi	r22, 0xDB	; 219
     34a:	7f e0       	ldi	r23, 0x0F	; 15
     34c:	89 e4       	ldi	r24, 0x49	; 73
     34e:	90 e4       	ldi	r25, 0x40	; 64
     350:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__subsf3>
     354:	86 2e       	mov	r8, r22
     356:	97 2e       	mov	r9, r23
     358:	a8 2e       	mov	r10, r24
     35a:	b9 2e       	mov	r11, r25
	
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found 6t666regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	48 e4       	ldi	r20, 0x48	; 72
     362:	52 e4       	ldi	r21, 0x42	; 66
     364:	c7 01       	movw	r24, r14
     366:	b6 01       	movw	r22, r12
     368:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     36c:	9b 01       	movw	r18, r22
     36e:	ac 01       	movw	r20, r24
     370:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__addsf3>
     374:	2b ed       	ldi	r18, 0xDB	; 219
     376:	3f e0       	ldi	r19, 0x0F	; 15
     378:	49 e4       	ldi	r20, 0x49	; 73
     37a:	50 e4       	ldi	r21, 0x40	; 64
     37c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divsf3>
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	4c e4       	ldi	r20, 0x4C	; 76
     386:	52 e4       	ldi	r21, 0x42	; 66
     388:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__addsf3>
     38c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fixsfsi>
	if (adjustmentRotation >= 100)
     390:	64 36       	cpi	r22, 0x64	; 100
     392:	71 05       	cpc	r23, r1
     394:	34 f4       	brge	.+12     	; 0x3a2 <walk_bakwards+0xc8>
     396:	eb 01       	movw	r28, r22
     398:	dd 23       	and	r29, r29
     39a:	2c f4       	brge	.+10     	; 0x3a6 <walk_bakwards+0xcc>
     39c:	c0 e0       	ldi	r28, 0x00	; 0
     39e:	d0 e0       	ldi	r29, 0x00	; 0
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <walk_bakwards+0xcc>
	{
		adjustmentRotation = 100;
     3a2:	c4 e6       	ldi	r28, 0x64	; 100
     3a4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	44 eb       	ldi	r20, 0xB4	; 180
     3ac:	52 e4       	ldi	r21, 0x42	; 66
     3ae:	68 2d       	mov	r22, r8
     3b0:	79 2d       	mov	r23, r9
     3b2:	8a 2d       	mov	r24, r10
     3b4:	9b 2d       	mov	r25, r11
     3b6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     3ba:	2b ed       	ldi	r18, 0xDB	; 219
     3bc:	3f e0       	ldi	r19, 0x0F	; 15
     3be:	49 ec       	ldi	r20, 0xC9	; 201
     3c0:	50 e4       	ldi	r21, 0x40	; 64
     3c2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divsf3>
     3c6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fixsfsi>
     3ca:	26 2f       	mov	r18, r22
	
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     3cc:	40 91 01 01 	lds	r20, 0x0101
     3d0:	6c 2f       	mov	r22, r28
     3d2:	82 2f       	mov	r24, r18
     3d4:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     3d8:	75 d1       	rcall	.+746    	; 0x6c4 <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	df 90       	pop	r13
     3e4:	cf 90       	pop	r12
     3e6:	bf 90       	pop	r11
     3e8:	af 90       	pop	r10
     3ea:	9f 90       	pop	r9
     3ec:	8f 90       	pop	r8
     3ee:	08 95       	ret

000003f0 <dead_end>:

void dead_end()
{
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
	while(deadEndFlag = 1 && TWI_get_autonom_settings() != 0)
     3fc:	ee 24       	eor	r14, r14
     3fe:	e3 94       	inc	r14
     400:	f1 2c       	mov	r15, r1
			deadEndFlag = 0;
			turn_around();
		}
		else if(navigation_check_left_turn())
		{
			deadEndFlag = 0;
     402:	04 e0       	ldi	r16, 0x04	; 4
     404:	10 e0       	ldi	r17, 0x00	; 0
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void dead_end()
{
	while(deadEndFlag = 1 && TWI_get_autonom_settings() != 0)
     406:	33 c0       	rjmp	.+102    	; 0x46e <dead_end+0x7e>
	{
		if(navigation_left_algorithm() && navigation_check_right_turn())
     408:	51 d1       	rcall	.+674    	; 0x6ac <navigation_left_algorithm>
     40a:	88 23       	and	r24, r24
     40c:	79 f0       	breq	.+30     	; 0x42c <dead_end+0x3c>
     40e:	09 d2       	rcall	.+1042   	; 0x822 <navigation_check_right_turn>
     410:	88 23       	and	r24, r24
     412:	61 f0       	breq	.+24     	; 0x42c <dead_end+0x3c>
		{
			deadEndFlag = 0;
     414:	f0 92 32 13 	sts	0x1332, r15
     418:	e8 01       	movw	r28, r16
     41a:	03 c0       	rjmp	.+6      	; 0x422 <dead_end+0x32>
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_bakwards();
     41c:	5e df       	rcall	.-324    	; 0x2da <walk_bakwards>
     41e:	21 97       	sbiw	r28, 0x01	; 1
	while(deadEndFlag = 1 && TWI_get_autonom_settings() != 0)
	{
		if(navigation_left_algorithm() && navigation_check_right_turn())
		{
			deadEndFlag = 0;
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     420:	19 f0       	breq	.+6      	; 0x428 <dead_end+0x38>
     422:	a1 d7       	rcall	.+3906   	; 0x1366 <TWI_get_autonom_settings>
     424:	81 11       	cpse	r24, r1
     426:	fa cf       	rjmp	.-12     	; 0x41c <dead_end+0x2c>
			{
				walk_bakwards();
			}
			turn_right();
     428:	f6 de       	rcall	.-532    	; 0x216 <turn_right>
     42a:	21 c0       	rjmp	.+66     	; 0x46e <dead_end+0x7e>
		}
		else if(navigation_left_algorithm() && navigation_check_left_turn())
     42c:	3f d1       	rcall	.+638    	; 0x6ac <navigation_left_algorithm>
     42e:	88 23       	and	r24, r24
     430:	39 f0       	breq	.+14     	; 0x440 <dead_end+0x50>
     432:	0c d2       	rcall	.+1048   	; 0x84c <navigation_check_left_turn>
     434:	88 23       	and	r24, r24
     436:	21 f0       	breq	.+8      	; 0x440 <dead_end+0x50>
		{
			deadEndFlag = 0;
     438:	f0 92 32 13 	sts	0x1332, r15
			turn_around();
     43c:	6c de       	rcall	.-808    	; 0x116 <turn_around>
     43e:	17 c0       	rjmp	.+46     	; 0x46e <dead_end+0x7e>
		}
		else if(navigation_check_left_turn())
     440:	05 d2       	rcall	.+1034   	; 0x84c <navigation_check_left_turn>
     442:	88 23       	and	r24, r24
     444:	61 f0       	breq	.+24     	; 0x45e <dead_end+0x6e>
		{
			deadEndFlag = 0;
     446:	f0 92 32 13 	sts	0x1332, r15
     44a:	e8 01       	movw	r28, r16
     44c:	03 c0       	rjmp	.+6      	; 0x454 <dead_end+0x64>
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_bakwards();
     44e:	45 df       	rcall	.-374    	; 0x2da <walk_bakwards>
     450:	21 97       	sbiw	r28, 0x01	; 1
			turn_around();
		}
		else if(navigation_check_left_turn())
		{
			deadEndFlag = 0;
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     452:	19 f0       	breq	.+6      	; 0x45a <dead_end+0x6a>
     454:	88 d7       	rcall	.+3856   	; 0x1366 <TWI_get_autonom_settings>
     456:	81 11       	cpse	r24, r1
     458:	fa cf       	rjmp	.-12     	; 0x44e <dead_end+0x5e>
			{
				walk_bakwards();
			}
			turn_left();
     45a:	0e df       	rcall	.-484    	; 0x278 <turn_left>
     45c:	08 c0       	rjmp	.+16     	; 0x46e <dead_end+0x7e>
		}
		else if(navigation_check_right_turn())
     45e:	e1 d1       	rcall	.+962    	; 0x822 <navigation_check_right_turn>
     460:	88 23       	and	r24, r24
     462:	21 f0       	breq	.+8      	; 0x46c <dead_end+0x7c>
		{
			deadEndFlag = 0;
     464:	f0 92 32 13 	sts	0x1332, r15
			turn_around();
     468:	56 de       	rcall	.-852    	; 0x116 <turn_around>
     46a:	01 c0       	rjmp	.+2      	; 0x46e <dead_end+0x7e>
		}
		else
		{
			walk_bakwards();
     46c:	36 df       	rcall	.-404    	; 0x2da <walk_bakwards>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void dead_end()
{
	while(deadEndFlag = 1 && TWI_get_autonom_settings() != 0)
     46e:	7b d7       	rcall	.+3830   	; 0x1366 <TWI_get_autonom_settings>
     470:	9e 2d       	mov	r25, r14
     472:	81 11       	cpse	r24, r1
     474:	01 c0       	rjmp	.+2      	; 0x478 <dead_end+0x88>
     476:	9f 2d       	mov	r25, r15
     478:	90 93 32 13 	sts	0x1332, r25
     47c:	91 11       	cpse	r25, r1
     47e:	c4 cf       	rjmp	.-120    	; 0x408 <dead_end+0x18>
		else
		{
			walk_bakwards();
		}
	}
	deadEndFlag = 0;
     480:	10 92 32 13 	sts	0x1332, r1
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	08 95       	ret

00000492 <autonomouswalk_walk>:

void autonomouswalk_walk()
{
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
	navigation_low_pass_obstacle();
     496:	9f d1       	rcall	.+830    	; 0x7d6 <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     498:	09 d1       	rcall	.+530    	; 0x6ac <navigation_left_algorithm>
     49a:	88 23       	and	r24, r24
     49c:	41 f1       	breq	.+80     	; 0x4ee <autonomouswalk_walk+0x5c>
	{
		if(navigation_check_left_turn() == 2)
     49e:	d6 d1       	rcall	.+940    	; 0x84c <navigation_check_left_turn>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	61 f4       	brne	.+24     	; 0x4bc <autonomouswalk_walk+0x2a>
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <autonomouswalk_walk+0x1c>
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     4a6:	5f de       	rcall	.-834    	; 0x166 <walk_forward>
     4a8:	21 97       	sbiw	r28, 0x01	; 1
	navigation_low_pass_obstacle();
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     4aa:	19 f4       	brne	.+6      	; 0x4b2 <autonomouswalk_walk+0x20>
     4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <autonomouswalk_walk+0x26>
void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
     4ae:	c4 e0       	ldi	r28, 0x04	; 4
     4b0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     4b2:	59 d7       	rcall	.+3762   	; 0x1366 <TWI_get_autonom_settings>
     4b4:	81 11       	cpse	r24, r1
     4b6:	f7 cf       	rjmp	.-18     	; 0x4a6 <autonomouswalk_walk+0x14>
			{
				walk_forward();
			}
			turn_left();
     4b8:	df de       	rcall	.-578    	; 0x278 <turn_left>
     4ba:	54 c0       	rjmp	.+168    	; 0x564 <autonomouswalk_walk+0xd2>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     4bc:	84 e0       	ldi	r24, 0x04	; 4
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	43 d1       	rcall	.+646    	; 0x748 <navigation_get_sensor>
     4c2:	89 32       	cpi	r24, 0x29	; 41
     4c4:	10 f0       	brcs	.+4      	; 0x4ca <autonomouswalk_walk+0x38>
		{
			walk_forward();
     4c6:	4f de       	rcall	.-866    	; 0x166 <walk_forward>
     4c8:	4d c0       	rjmp	.+154    	; 0x564 <autonomouswalk_walk+0xd2>
		}
		else if(navigation_check_right_turn() == 2)
     4ca:	ab d1       	rcall	.+854    	; 0x822 <navigation_check_right_turn>
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <autonomouswalk_walk+0x42>
		{
			turn_right();
     4d0:	a2 de       	rcall	.-700    	; 0x216 <turn_right>
     4d2:	48 c0       	rjmp	.+144    	; 0x564 <autonomouswalk_walk+0xd2>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     4d4:	bb d1       	rcall	.+886    	; 0x84c <navigation_check_left_turn>
     4d6:	81 11       	cpse	r24, r1
     4d8:	08 c0       	rjmp	.+16     	; 0x4ea <autonomouswalk_walk+0x58>
     4da:	a3 d1       	rcall	.+838    	; 0x822 <navigation_check_right_turn>
     4dc:	81 11       	cpse	r24, r1
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <autonomouswalk_walk+0x58>
		{
			deadEndFlag = 1;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 32 13 	sts	0x1332, r24
			dead_end();
     4e6:	84 df       	rcall	.-248    	; 0x3f0 <dead_end>
     4e8:	3d c0       	rjmp	.+122    	; 0x564 <autonomouswalk_walk+0xd2>
		}
		else
		{
			walk_forward();
     4ea:	3d de       	rcall	.-902    	; 0x166 <walk_forward>
     4ec:	3b c0       	rjmp	.+118    	; 0x564 <autonomouswalk_walk+0xd2>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     4ee:	99 d1       	rcall	.+818    	; 0x822 <navigation_check_right_turn>
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	61 f4       	brne	.+24     	; 0x50c <autonomouswalk_walk+0x7a>
     4f4:	04 c0       	rjmp	.+8      	; 0x4fe <autonomouswalk_walk+0x6c>
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     4f6:	37 de       	rcall	.-914    	; 0x166 <walk_forward>
     4f8:	21 97       	sbiw	r28, 0x01	; 1
	}
	else
	{
		if(navigation_check_right_turn() == 2)
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     4fa:	19 f4       	brne	.+6      	; 0x502 <autonomouswalk_walk+0x70>
     4fc:	05 c0       	rjmp	.+10     	; 0x508 <autonomouswalk_walk+0x76>
			walk_forward();
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     4fe:	c4 e0       	ldi	r28, 0x04	; 4
     500:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     502:	31 d7       	rcall	.+3682   	; 0x1366 <TWI_get_autonom_settings>
     504:	81 11       	cpse	r24, r1
     506:	f7 cf       	rjmp	.-18     	; 0x4f6 <autonomouswalk_walk+0x64>
			{
				walk_forward();
			}
			turn_right();
     508:	86 de       	rcall	.-756    	; 0x216 <turn_right>
     50a:	2c c0       	rjmp	.+88     	; 0x564 <autonomouswalk_walk+0xd2>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     50c:	84 e0       	ldi	r24, 0x04	; 4
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	1b d1       	rcall	.+566    	; 0x748 <navigation_get_sensor>
     512:	89 32       	cpi	r24, 0x29	; 41
     514:	10 f0       	brcs	.+4      	; 0x51a <autonomouswalk_walk+0x88>
		{
			walk_forward();
     516:	27 de       	rcall	.-946    	; 0x166 <walk_forward>
     518:	25 c0       	rjmp	.+74     	; 0x564 <autonomouswalk_walk+0xd2>
		}
		else if(navigation_check_left_turn() == 2)
     51a:	98 d1       	rcall	.+816    	; 0x84c <navigation_check_left_turn>
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	11 f4       	brne	.+4      	; 0x524 <autonomouswalk_walk+0x92>
		{
			turn_left();
     520:	ab de       	rcall	.-682    	; 0x278 <turn_left>
     522:	20 c0       	rjmp	.+64     	; 0x564 <autonomouswalk_walk+0xd2>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     524:	93 d1       	rcall	.+806    	; 0x84c <navigation_check_left_turn>
     526:	81 11       	cpse	r24, r1
     528:	08 c0       	rjmp	.+16     	; 0x53a <autonomouswalk_walk+0xa8>
     52a:	7b d1       	rcall	.+758    	; 0x822 <navigation_check_right_turn>
     52c:	81 11       	cpse	r24, r1
     52e:	05 c0       	rjmp	.+10     	; 0x53a <autonomouswalk_walk+0xa8>
		{
			deadEndFlag = 1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 32 13 	sts	0x1332, r24
			dead_end();
     536:	5c df       	rcall	.-328    	; 0x3f0 <dead_end>
     538:	15 c0       	rjmp	.+42     	; 0x564 <autonomouswalk_walk+0xd2>
		}
		else if(decisionCounter < 4)
     53a:	80 91 33 13 	lds	r24, 0x1333
     53e:	84 30       	cpi	r24, 0x04	; 4
     540:	38 f4       	brcc	.+14     	; 0x550 <autonomouswalk_walk+0xbe>
		{
			walk_forward();
     542:	11 de       	rcall	.-990    	; 0x166 <walk_forward>
			++decisionCounter;
     544:	80 91 33 13 	lds	r24, 0x1333
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	80 93 33 13 	sts	0x1333, r24
     54e:	0a c0       	rjmp	.+20     	; 0x564 <autonomouswalk_walk+0xd2>
		}
		else
		{
			decisionCounter = 0;
     550:	10 92 33 13 	sts	0x1333, r1
			navigation_set_autonomous_walk(0);
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	b3 d0       	rcall	.+358    	; 0x6be <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     558:	49 e3       	ldi	r20, 0x39	; 57
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	6f ea       	ldi	r22, 0xAF	; 175
     55e:	71 e1       	ldi	r23, 0x11	; 17
     560:	80 e8       	ldi	r24, 0x80	; 128
     562:	6c d6       	rcall	.+3288   	; 0x123c <TWI_send_string_fixed_length>
		}
	}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <set_counter_1>:
     56a:	bc 01       	movw	r22, r24
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__floatunsisf>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	4a e7       	ldi	r20, 0x7A	; 122
     57a:	51 e4       	ldi	r21, 0x41	; 65
     57c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     580:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixunssfsi>
     584:	70 93 89 00 	sts	0x0089, r23
     588:	60 93 88 00 	sts	0x0088, r22
     58c:	08 95       	ret

0000058e <set_counter_2>:
     58e:	bc 01       	movw	r22, r24
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__floatunsisf>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	4a e7       	ldi	r20, 0x7A	; 122
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     5a4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixunssfsi>
     5a8:	70 93 99 00 	sts	0x0099, r23
     5ac:	60 93 98 00 	sts	0x0098, r22
     5b0:	08 95       	ret

000005b2 <init_counters>:
     5b2:	e1 e8       	ldi	r30, 0x81	; 129
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	85 60       	ori	r24, 0x05	; 5
     5ba:	80 83       	st	Z, r24
     5bc:	e1 e9       	ldi	r30, 0x91	; 145
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	85 60       	ori	r24, 0x05	; 5
     5c4:	80 83       	st	Z, r24
     5c6:	88 ee       	ldi	r24, 0xE8	; 232
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	cf df       	rcall	.-98     	; 0x56a <set_counter_1>
     5cc:	88 ee       	ldi	r24, 0xE8	; 232
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	de df       	rcall	.-68     	; 0x58e <set_counter_2>
     5d2:	ef e6       	ldi	r30, 0x6F	; 111
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	82 60       	ori	r24, 0x02	; 2
     5da:	80 83       	st	Z, r24
     5dc:	e1 e7       	ldi	r30, 0x71	; 113
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	82 60       	ori	r24, 0x02	; 2
     5e4:	80 83       	st	Z, r24
     5e6:	10 92 85 00 	sts	0x0085, r1
     5ea:	10 92 84 00 	sts	0x0084, r1
     5ee:	10 92 95 00 	sts	0x0095, r1
     5f2:	10 92 94 00 	sts	0x0094, r1
     5f6:	08 95       	ret

000005f8 <FifoDataLength>:
     5f8:	fc 01       	movw	r30, r24
     5fa:	90 81       	ld	r25, Z
     5fc:	91 50       	subi	r25, 0x01	; 1
     5fe:	84 81       	ldd	r24, Z+4	; 0x04
     600:	22 81       	ldd	r18, Z+2	; 0x02
     602:	82 1b       	sub	r24, r18
     604:	89 23       	and	r24, r25
     606:	08 95       	ret

00000608 <FifoWrite>:
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	ec 01       	movw	r28, r24
     610:	16 2f       	mov	r17, r22
     612:	f2 df       	rcall	.-28     	; 0x5f8 <FifoDataLength>
     614:	28 81       	ld	r18, Y
     616:	39 81       	ldd	r19, Y+1	; 0x01
     618:	21 50       	subi	r18, 0x01	; 1
     61a:	31 09       	sbc	r19, r1
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	82 17       	cp	r24, r18
     620:	93 07       	cpc	r25, r19
     622:	69 f0       	breq	.+26     	; 0x63e <FifoWrite+0x36>
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	9d 81       	ldd	r25, Y+5	; 0x05
     628:	fe 01       	movw	r30, r28
     62a:	e8 0f       	add	r30, r24
     62c:	f9 1f       	adc	r31, r25
     62e:	16 83       	std	Z+6, r17	; 0x06
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	28 23       	and	r18, r24
     634:	39 23       	and	r19, r25
     636:	3d 83       	std	Y+5, r19	; 0x05
     638:	2c 83       	std	Y+4, r18	; 0x04
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	01 c0       	rjmp	.+2      	; 0x640 <FifoWrite+0x38>
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	08 95       	ret

00000648 <FifoRead>:
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24
     652:	8b 01       	movw	r16, r22
     654:	d1 df       	rcall	.-94     	; 0x5f8 <FifoDataLength>
     656:	88 23       	and	r24, r24
     658:	a1 f0       	breq	.+40     	; 0x682 <FifoRead+0x3a>
     65a:	ea 81       	ldd	r30, Y+2	; 0x02
     65c:	fb 81       	ldd	r31, Y+3	; 0x03
     65e:	ec 0f       	add	r30, r28
     660:	fd 1f       	adc	r31, r29
     662:	86 81       	ldd	r24, Z+6	; 0x06
     664:	f8 01       	movw	r30, r16
     666:	80 83       	st	Z, r24
     668:	28 81       	ld	r18, Y
     66a:	39 81       	ldd	r19, Y+1	; 0x01
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	31 09       	sbc	r19, r1
     670:	8a 81       	ldd	r24, Y+2	; 0x02
     672:	9b 81       	ldd	r25, Y+3	; 0x03
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	82 23       	and	r24, r18
     678:	93 23       	and	r25, r19
     67a:	9b 83       	std	Y+3, r25	; 0x03
     67c:	8a 83       	std	Y+2, r24	; 0x02
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	01 c0       	rjmp	.+2      	; 0x684 <FifoRead+0x3c>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     68e:	68 2f       	mov	r22, r24
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__floatunsisf>
     69a:	60 93 03 01 	sts	0x0103, r22
     69e:	70 93 04 01 	sts	0x0104, r23
     6a2:	80 93 05 01 	sts	0x0105, r24
     6a6:	90 93 06 01 	sts	0x0106, r25
     6aa:	08 95       	ret

000006ac <navigation_left_algorithm>:
     6ac:	80 91 07 01 	lds	r24, 0x0107
     6b0:	08 95       	ret

000006b2 <navigation_set_algorithm>:
     6b2:	80 93 07 01 	sts	0x0107, r24
     6b6:	08 95       	ret

000006b8 <navigation_autonomous_walk>:
     6b8:	80 91 02 01 	lds	r24, 0x0102
     6bc:	08 95       	ret

000006be <navigation_set_autonomous_walk>:
     6be:	80 93 02 01 	sts	0x0102, r24
     6c2:	08 95       	ret

000006c4 <navigation_stepping_delay>:
     6c4:	cf 93       	push	r28
     6c6:	c2 e0       	ldi	r28, 0x02	; 2
     6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <navigation_stepping_delay+0x22>
     6ca:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <USART_DecodeRxFIFO>
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	89 ef       	ldi	r24, 0xF9	; 249
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	21 50       	subi	r18, 0x01	; 1
     6d6:	80 40       	sbci	r24, 0x00	; 0
     6d8:	90 40       	sbci	r25, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <navigation_stepping_delay+0x10>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <navigation_stepping_delay+0x1a>
     6de:	00 00       	nop
     6e0:	82 b1       	in	r24, 0x02	; 2
     6e2:	8c 27       	eor	r24, r28
     6e4:	82 b9       	out	0x02, r24	; 2
     6e6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <USART_ready>
     6ea:	88 23       	and	r24, r24
     6ec:	71 f3       	breq	.-36     	; 0x6ca <navigation_stepping_delay+0x6>
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <navigation_fill_buffer>:
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	c0 e0       	ldi	r28, 0x00	; 0
     6fc:	d0 e0       	ldi	r29, 0x00	; 0
     6fe:	00 91 35 13 	lds	r16, 0x1335
     702:	10 e0       	ldi	r17, 0x00	; 0
     704:	ce 01       	movw	r24, r28
     706:	25 d6       	rcall	.+3146   	; 0x1352 <TWI_get_sensor>
     708:	fe 01       	movw	r30, r28
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	ec 0f       	add	r30, r28
     714:	fd 1f       	adc	r31, r29
     716:	0e 0f       	add	r16, r30
     718:	1f 1f       	adc	r17, r31
     71a:	f8 01       	movw	r30, r16
     71c:	e7 5b       	subi	r30, 0xB7	; 183
     71e:	fc 4e       	sbci	r31, 0xEC	; 236
     720:	80 83       	st	Z, r24
     722:	21 96       	adiw	r28, 0x01	; 1
     724:	c8 30       	cpi	r28, 0x08	; 8
     726:	d1 05       	cpc	r29, r1
     728:	51 f7       	brne	.-44     	; 0x6fe <navigation_fill_buffer+0xc>
     72a:	80 91 35 13 	lds	r24, 0x1335
     72e:	84 30       	cpi	r24, 0x04	; 4
     730:	19 f4       	brne	.+6      	; 0x738 <navigation_fill_buffer+0x46>
     732:	10 92 35 13 	sts	0x1335, r1
     736:	03 c0       	rjmp	.+6      	; 0x73e <navigation_fill_buffer+0x4c>
     738:	8f 5f       	subi	r24, 0xFF	; 255
     73a:	80 93 35 13 	sts	0x1335, r24
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	08 95       	ret

00000748 <navigation_get_sensor>:
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	00 d0       	rcall	.+0      	; 0x74e <navigation_get_sensor+0x6>
     74e:	00 d0       	rcall	.+0      	; 0x750 <navigation_get_sensor+0x8>
     750:	1f 92       	push	r1
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	fc 01       	movw	r30, r24
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	ee 0f       	add	r30, r30
     75e:	ff 1f       	adc	r31, r31
     760:	8e 0f       	add	r24, r30
     762:	9f 1f       	adc	r25, r31
     764:	fc 01       	movw	r30, r24
     766:	e7 5b       	subi	r30, 0xB7	; 183
     768:	fc 4e       	sbci	r31, 0xEC	; 236
     76a:	80 81       	ld	r24, Z
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	81 81       	ldd	r24, Z+1	; 0x01
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	8b 83       	std	Y+3, r24	; 0x03
     776:	83 81       	ldd	r24, Z+3	; 0x03
     778:	8c 83       	std	Y+4, r24	; 0x04
     77a:	84 81       	ldd	r24, Z+4	; 0x04
     77c:	8d 83       	std	Y+5, r24	; 0x05
     77e:	24 e0       	ldi	r18, 0x04	; 4
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	0e c0       	rjmp	.+28     	; 0x7a0 <navigation_get_sensor+0x58>
     784:	41 91       	ld	r20, Z+
     786:	50 81       	ld	r21, Z
     788:	54 17       	cp	r21, r20
     78a:	20 f4       	brcc	.+8      	; 0x794 <navigation_get_sensor+0x4c>
     78c:	df 01       	movw	r26, r30
     78e:	11 97       	sbiw	r26, 0x01	; 1
     790:	5c 93       	st	X, r21
     792:	40 83       	st	Z, r20
     794:	8e 17       	cp	r24, r30
     796:	9f 07       	cpc	r25, r31
     798:	a9 f7       	brne	.-22     	; 0x784 <navigation_get_sensor+0x3c>
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	31 09       	sbc	r19, r1
     79e:	49 f0       	breq	.+18     	; 0x7b2 <navigation_get_sensor+0x6a>
     7a0:	12 16       	cp	r1, r18
     7a2:	13 06       	cpc	r1, r19
     7a4:	d4 f7       	brge	.-12     	; 0x79a <navigation_get_sensor+0x52>
     7a6:	fe 01       	movw	r30, r28
     7a8:	31 96       	adiw	r30, 0x01	; 1
     7aa:	cf 01       	movw	r24, r30
     7ac:	82 0f       	add	r24, r18
     7ae:	93 1f       	adc	r25, r19
     7b0:	e9 cf       	rjmp	.-46     	; 0x784 <navigation_get_sensor+0x3c>
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(sensorBufferSize) < HEIGHT_LIMIT)
     7c4:	85 e0       	ldi	r24, 0x05	; 5
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	bf df       	rcall	.-130    	; 0x748 <navigation_get_sensor>
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	84 36       	cpi	r24, 0x64	; 100
     7ce:	08 f0       	brcs	.+2      	; 0x7d2 <navigation_detect_low_pass_obsticle+0xe>
     7d0:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     7d2:	89 2f       	mov	r24, r25
     7d4:	08 95       	ret

000007d6 <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     7d6:	f6 df       	rcall	.-20     	; 0x7c4 <navigation_detect_low_pass_obsticle>
     7d8:	88 23       	and	r24, r24
     7da:	e9 f0       	breq	.+58     	; 0x816 <navigation_low_pass_obstacle+0x40>
     7dc:	80 91 34 13 	lds	r24, 0x1334
     7e0:	81 11       	cpse	r24, r1
     7e2:	19 c0       	rjmp	.+50     	; 0x816 <navigation_low_pass_obstacle+0x40>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     7e4:	4b e1       	ldi	r20, 0x1B	; 27
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	69 ee       	ldi	r22, 0xE9	; 233
     7ea:	71 e1       	ldi	r23, 0x11	; 17
     7ec:	80 e4       	ldi	r24, 0x40	; 64
     7ee:	26 d5       	rcall	.+2636   	; 0x123c <TWI_send_string_fixed_length>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	86 e7       	ldi	r24, 0x76	; 118
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	21 50       	subi	r18, 0x01	; 1
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <navigation_low_pass_obstacle+0x20>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <navigation_low_pass_obstacle+0x2a>
     800:	00 00       	nop
		_delay_ms(30);
		TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);
     802:	4b e1       	ldi	r20, 0x1B	; 27
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	69 ee       	ldi	r22, 0xE9	; 233
     808:	71 e1       	ldi	r23, 0x11	; 17
     80a:	80 e8       	ldi	r24, 0x80	; 128
     80c:	17 d5       	rcall	.+2606   	; 0x123c <TWI_send_string_fixed_length>
		lowPassObstacleFlag = 1;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 34 13 	sts	0x1334, r24
     814:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     816:	d6 df       	rcall	.-84     	; 0x7c4 <navigation_detect_low_pass_obsticle>
     818:	81 11       	cpse	r24, r1
     81a:	02 c0       	rjmp	.+4      	; 0x820 <navigation_low_pass_obstacle+0x4a>
	{
		lowPassObstacleFlag = 0;
     81c:	10 92 34 13 	sts	0x1334, r1
     820:	08 95       	ret

00000822 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	90 df       	rcall	.-224    	; 0x748 <navigation_get_sensor>
     828:	8c 33       	cpi	r24, 0x3C	; 60
     82a:	28 f0       	brcs	.+10     	; 0x836 <navigation_check_right_turn+0x14>
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	8b df       	rcall	.-234    	; 0x748 <navigation_get_sensor>
     832:	8c 33       	cpi	r24, 0x3C	; 60
     834:	40 f4       	brcc	.+16     	; 0x846 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	86 df       	rcall	.-244    	; 0x748 <navigation_get_sensor>
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	86 34       	cpi	r24, 0x46	; 70
     840:	18 f4       	brcc	.+6      	; 0x848 <navigation_check_right_turn+0x26>
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	01 c0       	rjmp	.+2      	; 0x848 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     846:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     848:	89 2f       	mov	r24, r25
     84a:	08 95       	ret

0000084c <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	7b df       	rcall	.-266    	; 0x748 <navigation_get_sensor>
     852:	8c 33       	cpi	r24, 0x3C	; 60
     854:	28 f0       	brcs	.+10     	; 0x860 <navigation_check_left_turn+0x14>
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	76 df       	rcall	.-276    	; 0x748 <navigation_get_sensor>
     85c:	8c 33       	cpi	r24, 0x3C	; 60
     85e:	40 f4       	brcc	.+16     	; 0x870 <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	71 df       	rcall	.-286    	; 0x748 <navigation_get_sensor>
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	86 34       	cpi	r24, 0x46	; 70
     86a:	18 f4       	brcc	.+6      	; 0x872 <navigation_check_left_turn+0x26>
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	01 c0       	rjmp	.+2      	; 0x872 <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     870:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     872:	89 2f       	mov	r24, r25
     874:	08 95       	ret

00000876 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	6b 01       	movw	r12, r22
     884:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     886:	80 91 07 01 	lds	r24, 0x0107
     88a:	88 23       	and	r24, r24
     88c:	09 f4       	brne	.+2      	; 0x890 <navigation_direction_regulation+0x1a>
     88e:	98 c0       	rjmp	.+304    	; 0x9c0 <navigation_direction_regulation+0x14a>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	59 df       	rcall	.-334    	; 0x748 <navigation_get_sensor>
     896:	c8 2f       	mov	r28, r24
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	55 df       	rcall	.-342    	; 0x748 <navigation_get_sensor>
     89e:	2c 2f       	mov	r18, r28
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	a9 01       	movw	r20, r18
     8a4:	48 1b       	sub	r20, r24
     8a6:	51 09       	sbc	r21, r1
     8a8:	ca 01       	movw	r24, r20
     8aa:	99 23       	and	r25, r25
     8ac:	1c f4       	brge	.+6      	; 0x8b4 <navigation_direction_regulation+0x3e>
     8ae:	91 95       	neg	r25
     8b0:	81 95       	neg	r24
     8b2:	91 09       	sbc	r25, r1
     8b4:	0a 97       	sbiw	r24, 0x0a	; 10
     8b6:	b4 f5       	brge	.+108    	; 0x924 <navigation_direction_regulation+0xae>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	45 df       	rcall	.-374    	; 0x748 <navigation_get_sensor>
     8be:	82 33       	cpi	r24, 0x32	; 50
     8c0:	88 f5       	brcc	.+98     	; 0x924 <navigation_direction_regulation+0xae>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	40 df       	rcall	.-384    	; 0x748 <navigation_get_sensor>
     8c8:	c8 2f       	mov	r28, r24
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	3c df       	rcall	.-392    	; 0x748 <navigation_get_sensor>
     8d0:	d8 2f       	mov	r29, r24
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <cos>
     8da:	6b 01       	movw	r12, r22
     8dc:	7c 01       	movw	r14, r24
     8de:	6d 2f       	mov	r22, r29
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	6c 0f       	add	r22, r28
     8e4:	71 1d       	adc	r23, r1
     8e6:	88 27       	eor	r24, r24
     8e8:	77 fd       	sbrc	r23, 7
     8ea:	80 95       	com	r24
     8ec:	98 2f       	mov	r25, r24
     8ee:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__floatsisf>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	5f e3       	ldi	r21, 0x3F	; 63
     8fa:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 ef       	ldi	r20, 0xF0	; 240
     904:	50 e4       	ldi	r21, 0x40	; 64
     906:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__addsf3>
     90a:	a7 01       	movw	r20, r14
     90c:	96 01       	movw	r18, r12
     90e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e2       	ldi	r20, 0x20	; 32
     918:	52 e4       	ldi	r21, 0x42	; 66
     91a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__subsf3>
     91e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fixsfsi>
     922:	e5 c0       	rjmp	.+458    	; 0xaee <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0f df       	rcall	.-482    	; 0x748 <navigation_get_sensor>
     92a:	c8 2f       	mov	r28, r24
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0b df       	rcall	.-490    	; 0x748 <navigation_get_sensor>
     932:	2c 2f       	mov	r18, r28
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	a9 01       	movw	r20, r18
     938:	48 1b       	sub	r20, r24
     93a:	51 09       	sbc	r21, r1
     93c:	ca 01       	movw	r24, r20
     93e:	99 23       	and	r25, r25
     940:	1c f4       	brge	.+6      	; 0x948 <navigation_direction_regulation+0xd2>
     942:	91 95       	neg	r25
     944:	81 95       	neg	r24
     946:	91 09       	sbc	r25, r1
     948:	0a 97       	sbiw	r24, 0x0a	; 10
     94a:	0c f0       	brlt	.+2      	; 0x94e <navigation_direction_regulation+0xd8>
     94c:	21 c1       	rjmp	.+578    	; 0xb90 <navigation_direction_regulation+0x31a>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	fa de       	rcall	.-524    	; 0x748 <navigation_get_sensor>
     954:	82 33       	cpi	r24, 0x32	; 50
     956:	08 f0       	brcs	.+2      	; 0x95a <navigation_direction_regulation+0xe4>
     958:	1b c1       	rjmp	.+566    	; 0xb90 <navigation_direction_regulation+0x31a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	f4 de       	rcall	.-536    	; 0x748 <navigation_get_sensor>
     960:	c8 2f       	mov	r28, r24
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	f0 de       	rcall	.-544    	; 0x748 <navigation_get_sensor>
     968:	d8 2f       	mov	r29, r24
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <cos>
     972:	6b 01       	movw	r12, r22
     974:	7c 01       	movw	r14, r24
     976:	6d 2f       	mov	r22, r29
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	6c 0f       	add	r22, r28
     97c:	71 1d       	adc	r23, r1
     97e:	88 27       	eor	r24, r24
     980:	77 fd       	sbrc	r23, 7
     982:	80 95       	com	r24
     984:	98 2f       	mov	r25, r24
     986:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__floatsisf>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	5f e3       	ldi	r21, 0x3F	; 63
     992:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 ef       	ldi	r20, 0xF0	; 240
     99c:	50 e4       	ldi	r21, 0x40	; 64
     99e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__addsf3>
     9a2:	a7 01       	movw	r20, r14
     9a4:	96 01       	movw	r18, r12
     9a6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     9aa:	9b 01       	movw	r18, r22
     9ac:	ac 01       	movw	r20, r24
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	80 e2       	ldi	r24, 0x20	; 32
     9b4:	92 e4       	ldi	r25, 0x42	; 66
     9b6:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__subsf3>
     9ba:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fixsfsi>
     9be:	97 c0       	rjmp	.+302    	; 0xaee <navigation_direction_regulation+0x278>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	c1 de       	rcall	.-638    	; 0x748 <navigation_get_sensor>
     9c6:	c8 2f       	mov	r28, r24
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	bd de       	rcall	.-646    	; 0x748 <navigation_get_sensor>
     9ce:	2c 2f       	mov	r18, r28
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	a9 01       	movw	r20, r18
     9d4:	48 1b       	sub	r20, r24
     9d6:	51 09       	sbc	r21, r1
     9d8:	ca 01       	movw	r24, r20
     9da:	99 23       	and	r25, r25
     9dc:	1c f4       	brge	.+6      	; 0x9e4 <navigation_direction_regulation+0x16e>
     9de:	91 95       	neg	r25
     9e0:	81 95       	neg	r24
     9e2:	91 09       	sbc	r25, r1
     9e4:	0a 97       	sbiw	r24, 0x0a	; 10
     9e6:	c4 f5       	brge	.+112    	; 0xa58 <navigation_direction_regulation+0x1e2>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	ad de       	rcall	.-678    	; 0x748 <navigation_get_sensor>
     9ee:	82 33       	cpi	r24, 0x32	; 50
     9f0:	98 f5       	brcc	.+102    	; 0xa58 <navigation_direction_regulation+0x1e2>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	a8 de       	rcall	.-688    	; 0x748 <navigation_get_sensor>
     9f8:	c8 2f       	mov	r28, r24
     9fa:	83 e0       	ldi	r24, 0x03	; 3
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a4 de       	rcall	.-696    	; 0x748 <navigation_get_sensor>
     a00:	d8 2f       	mov	r29, r24
     a02:	c7 01       	movw	r24, r14
     a04:	b6 01       	movw	r22, r12
     a06:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <cos>
     a0a:	6b 01       	movw	r12, r22
     a0c:	7c 01       	movw	r14, r24
     a0e:	6d 2f       	mov	r22, r29
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	6c 0f       	add	r22, r28
     a14:	71 1d       	adc	r23, r1
     a16:	88 27       	eor	r24, r24
     a18:	77 fd       	sbrc	r23, 7
     a1a:	80 95       	com	r24
     a1c:	98 2f       	mov	r25, r24
     a1e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__floatsisf>
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	5f e3       	ldi	r21, 0x3F	; 63
     a2a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 ef       	ldi	r20, 0xF0	; 240
     a34:	50 e4       	ldi	r21, 0x40	; 64
     a36:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__addsf3>
     a3a:	a7 01       	movw	r20, r14
     a3c:	96 01       	movw	r18, r12
     a3e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	80 e2       	ldi	r24, 0x20	; 32
     a4c:	92 e4       	ldi	r25, 0x42	; 66
     a4e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__subsf3>
     a52:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fixsfsi>
     a56:	4b c0       	rjmp	.+150    	; 0xaee <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	75 de       	rcall	.-790    	; 0x748 <navigation_get_sensor>
     a5e:	c8 2f       	mov	r28, r24
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	71 de       	rcall	.-798    	; 0x748 <navigation_get_sensor>
     a66:	2c 2f       	mov	r18, r28
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	a9 01       	movw	r20, r18
     a6c:	48 1b       	sub	r20, r24
     a6e:	51 09       	sbc	r21, r1
     a70:	ca 01       	movw	r24, r20
     a72:	99 23       	and	r25, r25
     a74:	1c f4       	brge	.+6      	; 0xa7c <navigation_direction_regulation+0x206>
     a76:	91 95       	neg	r25
     a78:	81 95       	neg	r24
     a7a:	91 09       	sbc	r25, r1
     a7c:	0a 97       	sbiw	r24, 0x0a	; 10
     a7e:	0c f0       	brlt	.+2      	; 0xa82 <navigation_direction_regulation+0x20c>
     a80:	87 c0       	rjmp	.+270    	; 0xb90 <navigation_direction_regulation+0x31a>
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	60 de       	rcall	.-832    	; 0x748 <navigation_get_sensor>
     a88:	82 33       	cpi	r24, 0x32	; 50
     a8a:	08 f0       	brcs	.+2      	; 0xa8e <navigation_direction_regulation+0x218>
     a8c:	81 c0       	rjmp	.+258    	; 0xb90 <navigation_direction_regulation+0x31a>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	5a de       	rcall	.-844    	; 0x748 <navigation_get_sensor>
     a94:	c8 2f       	mov	r28, r24
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	56 de       	rcall	.-852    	; 0x748 <navigation_get_sensor>
     a9c:	d8 2f       	mov	r29, r24
     a9e:	c7 01       	movw	r24, r14
     aa0:	b6 01       	movw	r22, r12
     aa2:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <cos>
     aa6:	6b 01       	movw	r12, r22
     aa8:	7c 01       	movw	r14, r24
     aaa:	6d 2f       	mov	r22, r29
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	6c 0f       	add	r22, r28
     ab0:	71 1d       	adc	r23, r1
     ab2:	88 27       	eor	r24, r24
     ab4:	77 fd       	sbrc	r23, 7
     ab6:	80 95       	com	r24
     ab8:	98 2f       	mov	r25, r24
     aba:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__floatsisf>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	5f e3       	ldi	r21, 0x3F	; 63
     ac6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 ef       	ldi	r20, 0xF0	; 240
     ad0:	50 e4       	ldi	r21, 0x40	; 64
     ad2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__addsf3>
     ad6:	a7 01       	movw	r20, r14
     ad8:	96 01       	movw	r18, r12
     ada:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e2       	ldi	r20, 0x20	; 32
     ae4:	52 e4       	ldi	r21, 0x42	; 66
     ae6:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__subsf3>
     aea:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     aee:	cb 01       	movw	r24, r22
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	03 97       	sbiw	r24, 0x03	; 3
     af4:	08 f4       	brcc	.+2      	; 0xaf8 <navigation_direction_regulation+0x282>
     af6:	47 c0       	rjmp	.+142    	; 0xb86 <navigation_direction_regulation+0x310>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     af8:	88 27       	eor	r24, r24
     afa:	77 fd       	sbrc	r23, 7
     afc:	80 95       	com	r24
     afe:	98 2f       	mov	r25, r24
     b00:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__floatsisf>
     b04:	20 91 03 01 	lds	r18, 0x0103
     b08:	30 91 04 01 	lds	r19, 0x0104
     b0c:	40 91 05 01 	lds	r20, 0x0105
     b10:	50 91 06 01 	lds	r21, 0x0106
     b14:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__mulsf3>
     b18:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <atan>
     b1c:	c6 2e       	mov	r12, r22
     b1e:	d7 2e       	mov	r13, r23
     b20:	e8 2e       	mov	r14, r24
     b22:	f9 2e       	mov	r15, r25
		if(dir < 0)
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	a9 01       	movw	r20, r18
     b2a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__cmpsf2>
     b2e:	88 23       	and	r24, r24
     b30:	7c f4       	brge	.+30     	; 0xb50 <navigation_direction_regulation+0x2da>
		{
			dir += 2*PI;
     b32:	2b ed       	ldi	r18, 0xDB	; 219
     b34:	3f e0       	ldi	r19, 0x0F	; 15
     b36:	49 ec       	ldi	r20, 0xC9	; 201
     b38:	50 e4       	ldi	r21, 0x40	; 64
     b3a:	6c 2d       	mov	r22, r12
     b3c:	7d 2d       	mov	r23, r13
     b3e:	8e 2d       	mov	r24, r14
     b40:	9f 2d       	mov	r25, r15
     b42:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__addsf3>
     b46:	c6 2e       	mov	r12, r22
     b48:	d7 2e       	mov	r13, r23
     b4a:	e8 2e       	mov	r14, r24
     b4c:	f9 2e       	mov	r15, r25
     b4e:	24 c0       	rjmp	.+72     	; 0xb98 <navigation_direction_regulation+0x322>
		} else if(dir >= 2*PI)
     b50:	2b ed       	ldi	r18, 0xDB	; 219
     b52:	3f e0       	ldi	r19, 0x0F	; 15
     b54:	49 ec       	ldi	r20, 0xC9	; 201
     b56:	50 e4       	ldi	r21, 0x40	; 64
     b58:	6c 2d       	mov	r22, r12
     b5a:	7d 2d       	mov	r23, r13
     b5c:	8e 2d       	mov	r24, r14
     b5e:	9f 2d       	mov	r25, r15
     b60:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__gesf2>
     b64:	88 23       	and	r24, r24
     b66:	c4 f0       	brlt	.+48     	; 0xb98 <navigation_direction_regulation+0x322>
		{
			dir -= 2*PI;
     b68:	2b ed       	ldi	r18, 0xDB	; 219
     b6a:	3f e0       	ldi	r19, 0x0F	; 15
     b6c:	49 ec       	ldi	r20, 0xC9	; 201
     b6e:	50 e4       	ldi	r21, 0x40	; 64
     b70:	6c 2d       	mov	r22, r12
     b72:	7d 2d       	mov	r23, r13
     b74:	8e 2d       	mov	r24, r14
     b76:	9f 2d       	mov	r25, r15
     b78:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__subsf3>
     b7c:	c6 2e       	mov	r12, r22
     b7e:	d7 2e       	mov	r13, r23
     b80:	e8 2e       	mov	r14, r24
     b82:	f9 2e       	mov	r15, r25
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <navigation_direction_regulation+0x322>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     b86:	c1 2c       	mov	r12, r1
     b88:	d1 2c       	mov	r13, r1
     b8a:	e1 2c       	mov	r14, r1
     b8c:	f1 2c       	mov	r15, r1
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <navigation_direction_regulation+0x322>
     b90:	c1 2c       	mov	r12, r1
     b92:	d1 2c       	mov	r13, r1
     b94:	e1 2c       	mov	r14, r1
     b96:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     b98:	6c 2d       	mov	r22, r12
     b9a:	7d 2d       	mov	r23, r13
     b9c:	8e 2d       	mov	r24, r14
     b9e:	9f 2d       	mov	r25, r15
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	08 95       	ret

00000bae <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     bb6:	80 91 07 01 	lds	r24, 0x0107
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <navigation_angle_offset+0x12>
     bbe:	6c c0       	rjmp	.+216    	; 0xc98 <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	c1 dd       	rcall	.-1150   	; 0x748 <navigation_get_sensor>
     bc6:	f8 2e       	mov	r15, r24
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	bd dd       	rcall	.-1158   	; 0x748 <navigation_get_sensor>
     bce:	2f 2d       	mov	r18, r15
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	a9 01       	movw	r20, r18
     bd4:	48 1b       	sub	r20, r24
     bd6:	51 09       	sbc	r21, r1
     bd8:	ca 01       	movw	r24, r20
     bda:	99 23       	and	r25, r25
     bdc:	1c f4       	brge	.+6      	; 0xbe4 <navigation_angle_offset+0x36>
     bde:	91 95       	neg	r25
     be0:	81 95       	neg	r24
     be2:	91 09       	sbc	r25, r1
     be4:	0a 97       	sbiw	r24, 0x0a	; 10
     be6:	0c f5       	brge	.+66     	; 0xc2a <navigation_angle_offset+0x7c>
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	ad dd       	rcall	.-1190   	; 0x748 <navigation_get_sensor>
     bee:	82 33       	cpi	r24, 0x32	; 50
     bf0:	e0 f4       	brcc	.+56     	; 0xc2a <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	a8 dd       	rcall	.-1200   	; 0x748 <navigation_get_sensor>
     bf8:	f8 2e       	mov	r15, r24
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	a4 dd       	rcall	.-1208   	; 0x748 <navigation_get_sensor>
     c00:	6f 2d       	mov	r22, r15
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	68 1b       	sub	r22, r24
     c06:	71 09       	sbc	r23, r1
     c08:	88 27       	eor	r24, r24
     c0a:	77 fd       	sbrc	r23, 7
     c0c:	80 95       	com	r24
     c0e:	98 2f       	mov	r25, r24
     c10:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__floatsisf>
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	48 e6       	ldi	r20, 0x68	; 104
     c1a:	51 e4       	ldi	r21, 0x41	; 65
     c1c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divsf3>
     c20:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <atan>
     c24:	6b 01       	movw	r12, r22
     c26:	7c 01       	movw	r14, r24
     c28:	a0 c0       	rjmp	.+320    	; 0xd6a <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	8c dd       	rcall	.-1256   	; 0x748 <navigation_get_sensor>
     c30:	f8 2e       	mov	r15, r24
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	88 dd       	rcall	.-1264   	; 0x748 <navigation_get_sensor>
     c38:	2f 2d       	mov	r18, r15
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	a9 01       	movw	r20, r18
     c3e:	48 1b       	sub	r20, r24
     c40:	51 09       	sbc	r21, r1
     c42:	ca 01       	movw	r24, r20
     c44:	99 23       	and	r25, r25
     c46:	1c f4       	brge	.+6      	; 0xc4e <navigation_angle_offset+0xa0>
     c48:	91 95       	neg	r25
     c4a:	81 95       	neg	r24
     c4c:	91 09       	sbc	r25, r1
     c4e:	0a 97       	sbiw	r24, 0x0a	; 10
     c50:	0c f0       	brlt	.+2      	; 0xc54 <navigation_angle_offset+0xa6>
     c52:	9a c0       	rjmp	.+308    	; 0xd88 <navigation_angle_offset+0x1da>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	77 dd       	rcall	.-1298   	; 0x748 <navigation_get_sensor>
     c5a:	82 33       	cpi	r24, 0x32	; 50
     c5c:	08 f0       	brcs	.+2      	; 0xc60 <navigation_angle_offset+0xb2>
     c5e:	94 c0       	rjmp	.+296    	; 0xd88 <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	71 dd       	rcall	.-1310   	; 0x748 <navigation_get_sensor>
     c66:	f8 2e       	mov	r15, r24
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	6d dd       	rcall	.-1318   	; 0x748 <navigation_get_sensor>
     c6e:	6f 2d       	mov	r22, r15
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	68 1b       	sub	r22, r24
     c74:	71 09       	sbc	r23, r1
     c76:	88 27       	eor	r24, r24
     c78:	77 fd       	sbrc	r23, 7
     c7a:	80 95       	com	r24
     c7c:	98 2f       	mov	r25, r24
     c7e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__floatsisf>
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	48 e6       	ldi	r20, 0x68	; 104
     c88:	51 e4       	ldi	r21, 0x41	; 65
     c8a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divsf3>
     c8e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <atan>
     c92:	6b 01       	movw	r12, r22
     c94:	7c 01       	movw	r14, r24
     c96:	69 c0       	rjmp	.+210    	; 0xd6a <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	55 dd       	rcall	.-1366   	; 0x748 <navigation_get_sensor>
     c9e:	f8 2e       	mov	r15, r24
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	51 dd       	rcall	.-1374   	; 0x748 <navigation_get_sensor>
     ca6:	2f 2d       	mov	r18, r15
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	a9 01       	movw	r20, r18
     cac:	48 1b       	sub	r20, r24
     cae:	51 09       	sbc	r21, r1
     cb0:	ca 01       	movw	r24, r20
     cb2:	99 23       	and	r25, r25
     cb4:	1c f4       	brge	.+6      	; 0xcbc <navigation_angle_offset+0x10e>
     cb6:	91 95       	neg	r25
     cb8:	81 95       	neg	r24
     cba:	91 09       	sbc	r25, r1
     cbc:	0a 97       	sbiw	r24, 0x0a	; 10
     cbe:	0c f5       	brge	.+66     	; 0xd02 <navigation_angle_offset+0x154>
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	41 dd       	rcall	.-1406   	; 0x748 <navigation_get_sensor>
     cc6:	82 33       	cpi	r24, 0x32	; 50
     cc8:	e0 f4       	brcc	.+56     	; 0xd02 <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	3c dd       	rcall	.-1416   	; 0x748 <navigation_get_sensor>
     cd0:	f8 2e       	mov	r15, r24
     cd2:	83 e0       	ldi	r24, 0x03	; 3
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	38 dd       	rcall	.-1424   	; 0x748 <navigation_get_sensor>
     cd8:	6f 2d       	mov	r22, r15
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	68 1b       	sub	r22, r24
     cde:	71 09       	sbc	r23, r1
     ce0:	88 27       	eor	r24, r24
     ce2:	77 fd       	sbrc	r23, 7
     ce4:	80 95       	com	r24
     ce6:	98 2f       	mov	r25, r24
     ce8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__floatsisf>
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	48 e6       	ldi	r20, 0x68	; 104
     cf2:	51 e4       	ldi	r21, 0x41	; 65
     cf4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divsf3>
     cf8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <atan>
     cfc:	6b 01       	movw	r12, r22
     cfe:	7c 01       	movw	r14, r24
     d00:	34 c0       	rjmp	.+104    	; 0xd6a <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	20 dd       	rcall	.-1472   	; 0x748 <navigation_get_sensor>
     d08:	f8 2e       	mov	r15, r24
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	1c dd       	rcall	.-1480   	; 0x748 <navigation_get_sensor>
     d10:	2f 2d       	mov	r18, r15
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	a9 01       	movw	r20, r18
     d16:	48 1b       	sub	r20, r24
     d18:	51 09       	sbc	r21, r1
     d1a:	ca 01       	movw	r24, r20
     d1c:	99 23       	and	r25, r25
     d1e:	1c f4       	brge	.+6      	; 0xd26 <navigation_angle_offset+0x178>
     d20:	91 95       	neg	r25
     d22:	81 95       	neg	r24
     d24:	91 09       	sbc	r25, r1
     d26:	0a 97       	sbiw	r24, 0x0a	; 10
     d28:	7c f5       	brge	.+94     	; 0xd88 <navigation_angle_offset+0x1da>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0c dd       	rcall	.-1512   	; 0x748 <navigation_get_sensor>
     d30:	82 33       	cpi	r24, 0x32	; 50
     d32:	50 f5       	brcc	.+84     	; 0xd88 <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	07 dd       	rcall	.-1522   	; 0x748 <navigation_get_sensor>
     d3a:	f8 2e       	mov	r15, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	03 dd       	rcall	.-1530   	; 0x748 <navigation_get_sensor>
     d42:	6f 2d       	mov	r22, r15
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	68 1b       	sub	r22, r24
     d48:	71 09       	sbc	r23, r1
     d4a:	88 27       	eor	r24, r24
     d4c:	77 fd       	sbrc	r23, 7
     d4e:	80 95       	com	r24
     d50:	98 2f       	mov	r25, r24
     d52:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__floatsisf>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	48 e6       	ldi	r20, 0x68	; 104
     d5c:	51 e4       	ldi	r21, 0x41	; 65
     d5e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divsf3>
     d62:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <atan>
     d66:	6b 01       	movw	r12, r22
     d68:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     d6a:	c7 01       	movw	r24, r14
     d6c:	b6 01       	movw	r22, r12
     d6e:	9f 77       	andi	r25, 0x7F	; 127
     d70:	29 e2       	ldi	r18, 0x29	; 41
     d72:	3c e5       	ldi	r19, 0x5C	; 92
     d74:	4f e8       	ldi	r20, 0x8F	; 143
     d76:	5d e3       	ldi	r21, 0x3D	; 61
     d78:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__gesf2>
     d7c:	18 16       	cp	r1, r24
     d7e:	3c f0       	brlt	.+14     	; 0xd8e <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     d80:	c1 2c       	mov	r12, r1
     d82:	d1 2c       	mov	r13, r1
     d84:	76 01       	movw	r14, r12
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <navigation_angle_offset+0x1e0>
     d88:	c1 2c       	mov	r12, r1
     d8a:	d1 2c       	mov	r13, r1
     d8c:	76 01       	movw	r14, r12
     d8e:	7c 2d       	mov	r23, r12
	}
}
     d90:	67 2f       	mov	r22, r23
     d92:	7d 2d       	mov	r23, r13
     d94:	8e 2d       	mov	r24, r14
     d96:	9f 2d       	mov	r25, r15
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	08 95       	ret

00000da2 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	0b b6       	in	r0, 0x3b	; 59
     dae:	0f 92       	push	r0
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	73 dc       	rcall	.-1818   	; 0x6b2 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	77 dc       	rcall	.-1810   	; 0x6be <navigation_set_autonomous_walk>
}
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	0f 90       	pop	r0
     dea:	0b be       	out	0x3b, r0	; 59
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	0b b6       	in	r0, 0x3b	; 59
     e02:	0f 92       	push	r0
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	49 dc       	rcall	.-1902   	; 0x6b2 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	4d dc       	rcall	.-1894   	; 0x6be <navigation_set_autonomous_walk>
     e24:	ff 91       	pop	r31
     e26:	ef 91       	pop	r30
     e28:	bf 91       	pop	r27
     e2a:	af 91       	pop	r26
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	7f 91       	pop	r23
     e32:	6f 91       	pop	r22
     e34:	5f 91       	pop	r21
     e36:	4f 91       	pop	r20
     e38:	3f 91       	pop	r19
     e3a:	2f 91       	pop	r18
     e3c:	0f 90       	pop	r0
     e3e:	0b be       	out	0x3b, r0	; 59
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <main>:
     e4a:	7e d4       	rcall	.+2300   	; 0x1748 <USART_init>
     e4c:	80 e8       	ldi	r24, 0x80	; 128
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	87 d4       	rcall	.+2318   	; 0x1760 <USART_set_twi_message_destination>
     e52:	78 94       	sei
     e54:	80 e2       	ldi	r24, 0x20	; 32
     e56:	41 d1       	rcall	.+642    	; 0x10da <TWI_init>
     e58:	ac db       	rcall	.-2216   	; 0x5b2 <init_counters>
     e5a:	81 b1       	in	r24, 0x01	; 1
     e5c:	83 60       	ori	r24, 0x03	; 3
     e5e:	81 b9       	out	0x01, r24	; 1
     e60:	87 b1       	in	r24, 0x07	; 7
     e62:	80 6c       	ori	r24, 0xC0	; 192
     e64:	87 b9       	out	0x07, r24	; 7
     e66:	81 b1       	in	r24, 0x01	; 1
     e68:	8f 73       	andi	r24, 0x3F	; 63
     e6a:	81 b9       	out	0x01, r24	; 1
     e6c:	e8 e6       	ldi	r30, 0x68	; 104
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	81 60       	ori	r24, 0x01	; 1
     e74:	80 83       	st	Z, r24
     e76:	eb e6       	ldi	r30, 0x6B	; 107
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 6c       	ori	r24, 0xC0	; 192
     e7e:	80 83       	st	Z, r24
     e80:	2f ef       	ldi	r18, 0xFF	; 255
     e82:	83 e2       	ldi	r24, 0x23	; 35
     e84:	94 ef       	ldi	r25, 0xF4	; 244
     e86:	21 50       	subi	r18, 0x01	; 1
     e88:	80 40       	sbci	r24, 0x00	; 0
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <main+0x3c>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <main+0x46>
     e90:	00 00       	nop
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	14 dc       	rcall	.-2008   	; 0x6be <navigation_set_autonomous_walk>
     e96:	c2 e0       	ldi	r28, 0x02	; 2
     e98:	80 d2       	rcall	.+1280   	; 0x139a <TWI_autonom_settings_flag>
     e9a:	88 23       	and	r24, r24
     e9c:	79 f0       	breq	.+30     	; 0xebc <main+0x72>
     e9e:	63 d2       	rcall	.+1222   	; 0x1366 <TWI_get_autonom_settings>
     ea0:	81 11       	cpse	r24, r1
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <main+0x5e>
     ea4:	0c dc       	rcall	.-2024   	; 0x6be <navigation_set_autonomous_walk>
     ea6:	0a c0       	rjmp	.+20     	; 0xebc <main+0x72>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	21 f4       	brne	.+8      	; 0xeb4 <main+0x6a>
     eac:	08 dc       	rcall	.-2032   	; 0x6be <navigation_set_autonomous_walk>
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	00 dc       	rcall	.-2048   	; 0x6b2 <navigation_set_algorithm>
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <main+0x72>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	03 dc       	rcall	.-2042   	; 0x6be <navigation_set_autonomous_walk>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	fb db       	rcall	.-2058   	; 0x6b2 <navigation_set_algorithm>
     ebc:	fd db       	rcall	.-2054   	; 0x6b8 <navigation_autonomous_walk>
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	49 f4       	brne	.+18     	; 0xed4 <main+0x8a>
     ec2:	61 d2       	rcall	.+1218   	; 0x1386 <TWI_control_settings_flag>
     ec4:	88 23       	and	r24, r24
     ec6:	21 f0       	breq	.+8      	; 0xed0 <main+0x86>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	47 d2       	rcall	.+1166   	; 0x135c <TWI_get_control_setting>
     ece:	df db       	rcall	.-2114   	; 0x68e <navigation_set_Kp>
     ed0:	e0 da       	rcall	.-2624   	; 0x492 <autonomouswalk_walk>
     ed2:	07 c0       	rjmp	.+14     	; 0xee2 <main+0x98>
     ed4:	4e d2       	rcall	.+1180   	; 0x1372 <TWI_command_flag>
     ed6:	88 23       	and	r24, r24
     ed8:	21 f0       	breq	.+8      	; 0xee2 <main+0x98>
     eda:	82 b1       	in	r24, 0x02	; 2
     edc:	8c 27       	eor	r24, r28
     ede:	82 b9       	out	0x02, r24	; 2
     ee0:	0a d5       	rcall	.+2580   	; 0x18f6 <USART_SendCommand>
     ee2:	65 d2       	rcall	.+1226   	; 0x13ae <TWI_elevation_flag>
     ee4:	88 23       	and	r24, r24
     ee6:	29 f0       	breq	.+10     	; 0xef2 <main+0xa8>
     ee8:	92 b1       	in	r25, 0x02	; 2
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	89 27       	eor	r24, r25
     eee:	82 b9       	out	0x02, r24	; 2
     ef0:	14 d5       	rcall	.+2600   	; 0x191a <USART_SendElevation>
     ef2:	5d d6       	rcall	.+3258   	; 0x1bae <USART_DecodeRxFIFO>
     ef4:	d1 cf       	rjmp	.-94     	; 0xe98 <main+0x4e>

00000ef6 <__vector_13>:
     ef6:	1f 92       	push	r1
     ef8:	0f 92       	push	r0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	0f 92       	push	r0
     efe:	11 24       	eor	r1, r1
     f00:	10 92 85 00 	sts	0x0085, r1
     f04:	10 92 84 00 	sts	0x0084, r1
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <__vector_32>:
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	10 92 95 00 	sts	0x0095, r1
     f20:	10 92 94 00 	sts	0x0094, r1
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_4>:
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	0b b6       	in	r0, 0x3b	; 59
     f3a:	0f 92       	push	r0
     f3c:	2f 93       	push	r18
     f3e:	3f 93       	push	r19
     f40:	4f 93       	push	r20
     f42:	5f 93       	push	r21
     f44:	6f 93       	push	r22
     f46:	7f 93       	push	r23
     f48:	8f 93       	push	r24
     f4a:	9f 93       	push	r25
     f4c:	af 93       	push	r26
     f4e:	bf 93       	push	r27
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
     f54:	06 9b       	sbis	0x00, 6	; 0
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <__vector_4+0x3c>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	b1 db       	rcall	.-2206   	; 0x6be <navigation_set_autonomous_walk>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	a9 db       	rcall	.-2222   	; 0x6b2 <navigation_set_algorithm>
     f60:	98 b1       	in	r25, 0x08	; 8
     f62:	80 e4       	ldi	r24, 0x40	; 64
     f64:	89 27       	eor	r24, r25
     f66:	88 b9       	out	0x08, r24	; 8
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <__vector_4+0x4e>
     f6a:	07 9b       	sbis	0x00, 7	; 0
     f6c:	07 c0       	rjmp	.+14     	; 0xf7c <__vector_4+0x4e>
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	a6 db       	rcall	.-2228   	; 0x6be <navigation_set_autonomous_walk>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	9e db       	rcall	.-2244   	; 0x6b2 <navigation_set_algorithm>
     f76:	88 b1       	in	r24, 0x08	; 8
     f78:	80 58       	subi	r24, 0x80	; 128
     f7a:	88 b9       	out	0x08, r24	; 8
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0b be       	out	0x3b, r0	; 59
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <set_twi_reciever_enable>:
	
	//Do something with the message here... Send to display for now
	TWI_send_string_fixed_length(S_ADDRESS, msg, length);
	
	return 0;
}
     fa2:	85 e4       	ldi	r24, 0x45	; 69
     fa4:	80 93 bc 00 	sts	0x00BC, r24
     fa8:	08 95       	ret

00000faa <clear_int>:
     faa:	81 ec       	ldi	r24, 0xC1	; 193
     fac:	80 93 bc 00 	sts	0x00BC, r24
     fb0:	08 95       	ret

00000fb2 <start_bus>:
     fb2:	84 ea       	ldi	r24, 0xA4	; 164
     fb4:	80 93 bc 00 	sts	0x00BC, r24
     fb8:	08 95       	ret

00000fba <stop_bus>:
     fba:	85 ed       	ldi	r24, 0xD5	; 213
     fbc:	80 93 bc 00 	sts	0x00BC, r24
     fc0:	08 95       	ret

00000fc2 <Error>:
     fc2:	80 91 b9 00 	lds	r24, 0x00B9
     fc6:	88 7f       	andi	r24, 0xF8	; 248
     fc8:	88 33       	cpi	r24, 0x38	; 56
     fca:	09 f0       	breq	.+2      	; 0xfce <Error+0xc>
     fcc:	f6 cf       	rjmp	.-20     	; 0xfba <stop_bus>
     fce:	ed cf       	rjmp	.-38     	; 0xfaa <clear_int>

00000fd0 <get_data>:
     fd0:	80 91 bb 00 	lds	r24, 0x00BB
     fd4:	08 95       	ret

00000fd6 <wait_for_bus>:
     fd6:	ec eb       	ldi	r30, 0xBC	; 188
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 23       	and	r24, r24
     fde:	ec f7       	brge	.-6      	; 0xfda <wait_for_bus+0x4>
     fe0:	08 95       	ret

00000fe2 <send_data_and_wait>:
     fe2:	80 93 bb 00 	sts	0x00BB, r24
     fe6:	84 e8       	ldi	r24, 0x84	; 132
     fe8:	80 93 bc 00 	sts	0x00BC, r24
     fec:	f4 cf       	rjmp	.-24     	; 0xfd6 <wait_for_bus>

00000fee <stop_twi>:
     fee:	10 92 84 14 	sts	0x1484, r1
     ff2:	10 92 83 14 	sts	0x1483, r1
     ff6:	10 92 8e 14 	sts	0x148E, r1
     ffa:	10 92 8d 14 	sts	0x148D, r1
     ffe:	10 92 79 14 	sts	0x1479, r1
    1002:	10 92 78 14 	sts	0x1478, r1
    1006:	10 92 7e 14 	sts	0x147E, r1
    100a:	10 92 7d 14 	sts	0x147D, r1
    100e:	10 92 81 14 	sts	0x1481, r1
    1012:	10 92 80 14 	sts	0x1480, r1
    1016:	08 95       	ret

00001018 <reset_TWI>:
    1018:	ec eb       	ldi	r30, 0xBC	; 188
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 6c       	ori	r24, 0xC0	; 192
    1020:	80 83       	st	Z, r24
    1022:	08 95       	ret

00001024 <get_control_settings_from_bus>:
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	c0 91 7d 14 	lds	r28, 0x147D
    102c:	d0 91 7e 14 	lds	r29, 0x147E
    1030:	cf df       	rcall	.-98     	; 0xfd0 <get_data>
    1032:	c6 58       	subi	r28, 0x86	; 134
    1034:	db 4e       	sbci	r29, 0xEB	; 235
    1036:	88 83       	st	Y, r24
    1038:	10 92 7e 14 	sts	0x147E, r1
    103c:	10 92 7d 14 	sts	0x147D, r1
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <get_autonom_settings_from_bus>:
    1046:	c4 df       	rcall	.-120    	; 0xfd0 <get_data>
    1048:	80 93 78 13 	sts	0x1378, r24
    104c:	08 95       	ret

0000104e <get_char_from_bus>:
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	c0 91 78 14 	lds	r28, 0x1478
    1056:	d0 91 79 14 	lds	r29, 0x1479
    105a:	ba df       	rcall	.-140    	; 0xfd0 <get_data>
    105c:	c7 58       	subi	r28, 0x87	; 135
    105e:	dc 4e       	sbci	r29, 0xEC	; 236
    1060:	88 83       	st	Y, r24
    1062:	80 91 78 14 	lds	r24, 0x1478
    1066:	90 91 79 14 	lds	r25, 0x1479
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	90 93 79 14 	sts	0x1479, r25
    1070:	80 93 78 14 	sts	0x1478, r24
    1074:	90 93 89 14 	sts	0x1489, r25
    1078:	80 93 88 14 	sts	0x1488, r24
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <get_sensor_from_bus>:
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	c0 91 8d 14 	lds	r28, 0x148D
    108a:	d0 91 8e 14 	lds	r29, 0x148E
    108e:	c8 30       	cpi	r28, 0x08	; 8
    1090:	d1 05       	cpc	r29, r1
    1092:	99 f4       	brne	.+38     	; 0x10ba <get_sensor_from_bus+0x38>
    1094:	ef e8       	ldi	r30, 0x8F	; 143
    1096:	f4 e1       	ldi	r31, 0x14	; 20
    1098:	a7 e9       	ldi	r26, 0x97	; 151
    109a:	b4 e1       	ldi	r27, 0x14	; 20
    109c:	87 e9       	ldi	r24, 0x97	; 151
    109e:	94 e1       	ldi	r25, 0x14	; 20
    10a0:	21 91       	ld	r18, Z+
    10a2:	2d 93       	st	X+, r18
    10a4:	e8 17       	cp	r30, r24
    10a6:	f9 07       	cpc	r31, r25
    10a8:	d9 f7       	brne	.-10     	; 0x10a0 <get_sensor_from_bus+0x1e>
    10aa:	92 df       	rcall	.-220    	; 0xfd0 <get_data>
    10ac:	80 93 87 14 	sts	0x1487, r24
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 3b 13 	sts	0x133B, r24
    10b6:	1d db       	rcall	.-2502   	; 0x6f2 <navigation_fill_buffer>
    10b8:	0d c0       	rjmp	.+26     	; 0x10d4 <get_sensor_from_bus+0x52>
    10ba:	8a df       	rcall	.-236    	; 0xfd0 <get_data>
    10bc:	c1 57       	subi	r28, 0x71	; 113
    10be:	db 4e       	sbci	r29, 0xEB	; 235
    10c0:	88 83       	st	Y, r24
    10c2:	80 91 8d 14 	lds	r24, 0x148D
    10c6:	90 91 8e 14 	lds	r25, 0x148E
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	90 93 8e 14 	sts	0x148E, r25
    10d0:	80 93 8d 14 	sts	0x148D, r24
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <TWI_init>:
    10da:	80 93 7f 14 	sts	0x147F, r24
    10de:	80 34       	cpi	r24, 0x40	; 64
    10e0:	79 f0       	breq	.+30     	; 0x1100 <TWI_init+0x26>
    10e2:	80 38       	cpi	r24, 0x80	; 128
    10e4:	19 f0       	breq	.+6      	; 0x10ec <TWI_init+0x12>
    10e6:	80 32       	cpi	r24, 0x20	; 32
    10e8:	d1 f4       	brne	.+52     	; 0x111e <TWI_init+0x44>
    10ea:	12 c0       	rjmp	.+36     	; 0x1110 <TWI_init+0x36>
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	88 b9       	out	0x08, r24	; 8
    10f0:	58 df       	rcall	.-336    	; 0xfa2 <set_twi_reciever_enable>
    10f2:	8f e3       	ldi	r24, 0x3F	; 63
    10f4:	80 93 b8 00 	sts	0x00B8, r24
    10f8:	81 e8       	ldi	r24, 0x81	; 129
    10fa:	80 93 ba 00 	sts	0x00BA, r24
    10fe:	08 95       	ret
    1100:	8f e3       	ldi	r24, 0x3F	; 63
    1102:	80 93 b8 00 	sts	0x00B8, r24
    1106:	4d df       	rcall	.-358    	; 0xfa2 <set_twi_reciever_enable>
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	80 93 ba 00 	sts	0x00BA, r24
    110e:	08 95       	ret
    1110:	8f e3       	ldi	r24, 0x3F	; 63
    1112:	80 93 b8 00 	sts	0x00B8, r24
    1116:	45 df       	rcall	.-374    	; 0xfa2 <set_twi_reciever_enable>
    1118:	81 e2       	ldi	r24, 0x21	; 33
    111a:	80 93 ba 00 	sts	0x00BA, r24
    111e:	08 95       	ret

00001120 <TWI_send_command>:
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	c8 2f       	mov	r28, r24
    1128:	d6 2f       	mov	r29, r22
    112a:	14 2f       	mov	r17, r20
    112c:	42 df       	rcall	.-380    	; 0xfb2 <start_bus>
    112e:	53 df       	rcall	.-346    	; 0xfd6 <wait_for_bus>
    1130:	90 91 b9 00 	lds	r25, 0x00B9
    1134:	98 7f       	andi	r25, 0xF8	; 248
    1136:	98 30       	cpi	r25, 0x08	; 8
    1138:	19 f0       	breq	.+6      	; 0x1140 <TWI_send_command+0x20>
    113a:	43 df       	rcall	.-378    	; 0xfc2 <Error>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	34 c0       	rjmp	.+104    	; 0x11a8 <TWI_send_command+0x88>
    1140:	80 e2       	ldi	r24, 0x20	; 32
    1142:	4f df       	rcall	.-354    	; 0xfe2 <send_data_and_wait>
    1144:	80 91 b9 00 	lds	r24, 0x00B9
    1148:	88 7f       	andi	r24, 0xF8	; 248
    114a:	88 31       	cpi	r24, 0x18	; 24
    114c:	19 f0       	breq	.+6      	; 0x1154 <TWI_send_command+0x34>
    114e:	39 df       	rcall	.-398    	; 0xfc2 <Error>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	2a c0       	rjmp	.+84     	; 0x11a8 <TWI_send_command+0x88>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	45 df       	rcall	.-374    	; 0xfe2 <send_data_and_wait>
    1158:	80 91 b9 00 	lds	r24, 0x00B9
    115c:	88 7f       	andi	r24, 0xF8	; 248
    115e:	88 32       	cpi	r24, 0x28	; 40
    1160:	19 f0       	breq	.+6      	; 0x1168 <TWI_send_command+0x48>
    1162:	2f df       	rcall	.-418    	; 0xfc2 <Error>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	20 c0       	rjmp	.+64     	; 0x11a8 <TWI_send_command+0x88>
    1168:	8c 2f       	mov	r24, r28
    116a:	3b df       	rcall	.-394    	; 0xfe2 <send_data_and_wait>
    116c:	80 91 b9 00 	lds	r24, 0x00B9
    1170:	88 7f       	andi	r24, 0xF8	; 248
    1172:	88 32       	cpi	r24, 0x28	; 40
    1174:	19 f0       	breq	.+6      	; 0x117c <TWI_send_command+0x5c>
    1176:	25 df       	rcall	.-438    	; 0xfc2 <Error>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <TWI_send_command+0x88>
    117c:	8d 2f       	mov	r24, r29
    117e:	31 df       	rcall	.-414    	; 0xfe2 <send_data_and_wait>
    1180:	80 91 b9 00 	lds	r24, 0x00B9
    1184:	88 7f       	andi	r24, 0xF8	; 248
    1186:	88 32       	cpi	r24, 0x28	; 40
    1188:	19 f0       	breq	.+6      	; 0x1190 <TWI_send_command+0x70>
    118a:	1b df       	rcall	.-458    	; 0xfc2 <Error>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	0c c0       	rjmp	.+24     	; 0x11a8 <TWI_send_command+0x88>
    1190:	81 2f       	mov	r24, r17
    1192:	27 df       	rcall	.-434    	; 0xfe2 <send_data_and_wait>
    1194:	80 91 b9 00 	lds	r24, 0x00B9
    1198:	88 7f       	andi	r24, 0xF8	; 248
    119a:	88 32       	cpi	r24, 0x28	; 40
    119c:	19 f0       	breq	.+6      	; 0x11a4 <TWI_send_command+0x84>
    119e:	11 df       	rcall	.-478    	; 0xfc2 <Error>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <TWI_send_command+0x88>
    11a4:	0a df       	rcall	.-492    	; 0xfba <stop_bus>
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	08 95       	ret

000011b0 <TWI_send_string>:
    11b0:	ef 92       	push	r14
    11b2:	ff 92       	push	r15
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	c8 2f       	mov	r28, r24
    11be:	e6 2e       	mov	r14, r22
    11c0:	f7 2e       	mov	r15, r23
    11c2:	f7 de       	rcall	.-530    	; 0xfb2 <start_bus>
    11c4:	08 df       	rcall	.-496    	; 0xfd6 <wait_for_bus>
    11c6:	90 91 b9 00 	lds	r25, 0x00B9
    11ca:	98 7f       	andi	r25, 0xF8	; 248
    11cc:	98 30       	cpi	r25, 0x08	; 8
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <TWI_send_string+0x26>
    11d0:	f8 de       	rcall	.-528    	; 0xfc2 <Error>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	2c c0       	rjmp	.+88     	; 0x122e <TWI_send_string+0x7e>
    11d6:	8c 2f       	mov	r24, r28
    11d8:	04 df       	rcall	.-504    	; 0xfe2 <send_data_and_wait>
    11da:	80 91 b9 00 	lds	r24, 0x00B9
    11de:	88 7f       	andi	r24, 0xF8	; 248
    11e0:	88 31       	cpi	r24, 0x18	; 24
    11e2:	19 f0       	breq	.+6      	; 0x11ea <TWI_send_string+0x3a>
    11e4:	ee de       	rcall	.-548    	; 0xfc2 <Error>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	22 c0       	rjmp	.+68     	; 0x122e <TWI_send_string+0x7e>
    11ea:	89 e1       	ldi	r24, 0x19	; 25
    11ec:	fa de       	rcall	.-524    	; 0xfe2 <send_data_and_wait>
    11ee:	80 91 b9 00 	lds	r24, 0x00B9
    11f2:	88 7f       	andi	r24, 0xF8	; 248
    11f4:	88 32       	cpi	r24, 0x28	; 40
    11f6:	29 f4       	brne	.+10     	; 0x1202 <TWI_send_string+0x52>
    11f8:	0e 2d       	mov	r16, r14
    11fa:	1f 2d       	mov	r17, r15
    11fc:	c0 e0       	ldi	r28, 0x00	; 0
    11fe:	d0 e0       	ldi	r29, 0x00	; 0
    1200:	08 c0       	rjmp	.+16     	; 0x1212 <TWI_send_string+0x62>
    1202:	df de       	rcall	.-578    	; 0xfc2 <Error>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	13 c0       	rjmp	.+38     	; 0x122e <TWI_send_string+0x7e>
    1208:	f8 01       	movw	r30, r16
    120a:	81 91       	ld	r24, Z+
    120c:	8f 01       	movw	r16, r30
    120e:	e9 de       	rcall	.-558    	; 0xfe2 <send_data_and_wait>
    1210:	21 96       	adiw	r28, 0x01	; 1
    1212:	ee 2d       	mov	r30, r14
    1214:	ff 2d       	mov	r31, r15
    1216:	df 01       	movw	r26, r30
    1218:	0d 90       	ld	r0, X+
    121a:	00 20       	and	r0, r0
    121c:	e9 f7       	brne	.-6      	; 0x1218 <TWI_send_string+0x68>
    121e:	11 97       	sbiw	r26, 0x01	; 1
    1220:	ae 1b       	sub	r26, r30
    1222:	bf 0b       	sbc	r27, r31
    1224:	ca 17       	cp	r28, r26
    1226:	db 07       	cpc	r29, r27
    1228:	78 f3       	brcs	.-34     	; 0x1208 <TWI_send_string+0x58>
    122a:	c7 de       	rcall	.-626    	; 0xfba <stop_bus>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	08 95       	ret

0000123c <TWI_send_string_fixed_length>:
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	c8 2f       	mov	r28, r24
    124a:	e6 2e       	mov	r14, r22
    124c:	f7 2e       	mov	r15, r23
    124e:	8a 01       	movw	r16, r20
    1250:	b0 de       	rcall	.-672    	; 0xfb2 <start_bus>
    1252:	c1 de       	rcall	.-638    	; 0xfd6 <wait_for_bus>
    1254:	90 91 b9 00 	lds	r25, 0x00B9
    1258:	98 7f       	andi	r25, 0xF8	; 248
    125a:	98 30       	cpi	r25, 0x08	; 8
    125c:	19 f0       	breq	.+6      	; 0x1264 <TWI_send_string_fixed_length+0x28>
    125e:	b1 de       	rcall	.-670    	; 0xfc2 <Error>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	23 c0       	rjmp	.+70     	; 0x12aa <TWI_send_string_fixed_length+0x6e>
    1264:	8c 2f       	mov	r24, r28
    1266:	bd de       	rcall	.-646    	; 0xfe2 <send_data_and_wait>
    1268:	80 91 b9 00 	lds	r24, 0x00B9
    126c:	88 7f       	andi	r24, 0xF8	; 248
    126e:	88 31       	cpi	r24, 0x18	; 24
    1270:	19 f0       	breq	.+6      	; 0x1278 <TWI_send_string_fixed_length+0x3c>
    1272:	a7 de       	rcall	.-690    	; 0xfc2 <Error>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	19 c0       	rjmp	.+50     	; 0x12aa <TWI_send_string_fixed_length+0x6e>
    1278:	89 e1       	ldi	r24, 0x19	; 25
    127a:	b3 de       	rcall	.-666    	; 0xfe2 <send_data_and_wait>
    127c:	80 91 b9 00 	lds	r24, 0x00B9
    1280:	88 7f       	andi	r24, 0xF8	; 248
    1282:	88 32       	cpi	r24, 0x28	; 40
    1284:	21 f4       	brne	.+8      	; 0x128e <TWI_send_string_fixed_length+0x52>
    1286:	10 16       	cp	r1, r16
    1288:	11 06       	cpc	r1, r17
    128a:	24 f0       	brlt	.+8      	; 0x1294 <TWI_send_string_fixed_length+0x58>
    128c:	0c c0       	rjmp	.+24     	; 0x12a6 <TWI_send_string_fixed_length+0x6a>
    128e:	99 de       	rcall	.-718    	; 0xfc2 <Error>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <TWI_send_string_fixed_length+0x6e>
    1294:	ce 2d       	mov	r28, r14
    1296:	df 2d       	mov	r29, r15
    1298:	0c 0f       	add	r16, r28
    129a:	1d 1f       	adc	r17, r29
    129c:	89 91       	ld	r24, Y+
    129e:	a1 de       	rcall	.-702    	; 0xfe2 <send_data_and_wait>
    12a0:	c0 17       	cp	r28, r16
    12a2:	d1 07       	cpc	r29, r17
    12a4:	d9 f7       	brne	.-10     	; 0x129c <TWI_send_string_fixed_length+0x60>
    12a6:	89 de       	rcall	.-750    	; 0xfba <stop_bus>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	08 95       	ret

000012b8 <TWI_send_float>:
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <TWI_send_float+0xe>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <TWI_send_float+0x10>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	18 2f       	mov	r17, r24
    12ce:	49 83       	std	Y+1, r20	; 0x01
    12d0:	5a 83       	std	Y+2, r21	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03
    12d4:	7c 83       	std	Y+4, r23	; 0x04
    12d6:	6d de       	rcall	.-806    	; 0xfb2 <start_bus>
    12d8:	7e de       	rcall	.-772    	; 0xfd6 <wait_for_bus>
    12da:	90 91 b9 00 	lds	r25, 0x00B9
    12de:	98 7f       	andi	r25, 0xF8	; 248
    12e0:	98 30       	cpi	r25, 0x08	; 8
    12e2:	19 f0       	breq	.+6      	; 0x12ea <TWI_send_float+0x32>
    12e4:	6e de       	rcall	.-804    	; 0xfc2 <Error>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	24 c0       	rjmp	.+72     	; 0x1332 <TWI_send_float+0x7a>
    12ea:	81 2f       	mov	r24, r17
    12ec:	7a de       	rcall	.-780    	; 0xfe2 <send_data_and_wait>
    12ee:	80 91 b9 00 	lds	r24, 0x00B9
    12f2:	88 7f       	andi	r24, 0xF8	; 248
    12f4:	88 31       	cpi	r24, 0x18	; 24
    12f6:	19 f0       	breq	.+6      	; 0x12fe <TWI_send_float+0x46>
    12f8:	64 de       	rcall	.-824    	; 0xfc2 <Error>
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	1a c0       	rjmp	.+52     	; 0x1332 <TWI_send_float+0x7a>
    12fe:	86 e0       	ldi	r24, 0x06	; 6
    1300:	70 de       	rcall	.-800    	; 0xfe2 <send_data_and_wait>
    1302:	80 91 b9 00 	lds	r24, 0x00B9
    1306:	88 7f       	andi	r24, 0xF8	; 248
    1308:	88 32       	cpi	r24, 0x28	; 40
    130a:	19 f0       	breq	.+6      	; 0x1312 <TWI_send_float+0x5a>
    130c:	5a de       	rcall	.-844    	; 0xfc2 <Error>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	10 c0       	rjmp	.+32     	; 0x1332 <TWI_send_float+0x7a>
    1312:	8e 01       	movw	r16, r28
    1314:	0f 5f       	subi	r16, 0xFF	; 255
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	7e 01       	movw	r14, r28
    131a:	85 e0       	ldi	r24, 0x05	; 5
    131c:	e8 0e       	add	r14, r24
    131e:	f1 1c       	adc	r15, r1
    1320:	f8 01       	movw	r30, r16
    1322:	81 91       	ld	r24, Z+
    1324:	8f 01       	movw	r16, r30
    1326:	5d de       	rcall	.-838    	; 0xfe2 <send_data_and_wait>
    1328:	0e 15       	cp	r16, r14
    132a:	1f 05       	cpc	r17, r15
    132c:	c9 f7       	brne	.-14     	; 0x1320 <TWI_send_float+0x68>
    132e:	45 de       	rcall	.-886    	; 0xfba <stop_bus>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	08 95       	ret

00001348 <TWI_get_command>:
    1348:	8b 58       	subi	r24, 0x8B	; 139
    134a:	9c 4e       	sbci	r25, 0xEC	; 236
    134c:	fc 01       	movw	r30, r24
    134e:	80 81       	ld	r24, Z
    1350:	08 95       	ret

00001352 <TWI_get_sensor>:
    1352:	89 56       	subi	r24, 0x69	; 105
    1354:	9b 4e       	sbci	r25, 0xEB	; 235
    1356:	fc 01       	movw	r30, r24
    1358:	80 81       	ld	r24, Z
    135a:	08 95       	ret

0000135c <TWI_get_control_setting>:
    135c:	86 58       	subi	r24, 0x86	; 134
    135e:	9b 4e       	sbci	r25, 0xEB	; 235
    1360:	fc 01       	movw	r30, r24
    1362:	80 81       	ld	r24, Z
    1364:	08 95       	ret

00001366 <TWI_get_autonom_settings>:
    1366:	80 91 78 13 	lds	r24, 0x1378
    136a:	08 95       	ret

0000136c <TWI_get_elevation>:
    136c:	80 91 85 14 	lds	r24, 0x1485
    1370:	08 95       	ret

00001372 <TWI_command_flag>:
    1372:	80 91 3a 13 	lds	r24, 0x133A
    1376:	88 23       	and	r24, r24
    1378:	21 f0       	breq	.+8      	; 0x1382 <TWI_command_flag+0x10>
    137a:	10 92 3a 13 	sts	0x133A, r1
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	08 95       	ret
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	08 95       	ret

00001386 <TWI_control_settings_flag>:
    1386:	80 91 39 13 	lds	r24, 0x1339
    138a:	88 23       	and	r24, r24
    138c:	21 f0       	breq	.+8      	; 0x1396 <TWI_control_settings_flag+0x10>
    138e:	10 92 39 13 	sts	0x1339, r1
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	08 95       	ret
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	08 95       	ret

0000139a <TWI_autonom_settings_flag>:
    139a:	80 91 38 13 	lds	r24, 0x1338
    139e:	88 23       	and	r24, r24
    13a0:	21 f0       	breq	.+8      	; 0x13aa <TWI_autonom_settings_flag+0x10>
    13a2:	10 92 38 13 	sts	0x1338, r1
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	08 95       	ret
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 95       	ret

000013ae <TWI_elevation_flag>:
    13ae:	80 91 37 13 	lds	r24, 0x1337
    13b2:	88 23       	and	r24, r24
    13b4:	21 f0       	breq	.+8      	; 0x13be <TWI_elevation_flag+0x10>
    13b6:	10 92 37 13 	sts	0x1337, r1
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	08 95       	ret
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	08 95       	ret

000013c2 <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	d8 2f       	mov	r29, r24
    13cc:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
    13ce:	60 91 88 14 	lds	r22, 0x1488
    13d2:	80 91 08 01 	lds	r24, 0x0108
    13d6:	90 91 09 01 	lds	r25, 0x0109
    13da:	16 d9       	rcall	.-3540   	; 0x608 <FifoWrite>
    13dc:	81 11       	cpse	r24, r1
    13de:	1f c0       	rjmp	.+62     	; 0x141e <write_to_TwiFIFO+0x5c>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    13e0:	20 91 88 14 	lds	r18, 0x1488
    13e4:	30 91 89 14 	lds	r19, 0x1489
    13e8:	12 16       	cp	r1, r18
    13ea:	13 06       	cpc	r1, r19
    13ec:	d4 f4       	brge	.+52     	; 0x1422 <write_to_TwiFIFO+0x60>
    13ee:	0d 2f       	mov	r16, r29
    13f0:	1c 2f       	mov	r17, r28
    13f2:	c0 e0       	ldi	r28, 0x00	; 0
    13f4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    13f6:	f8 01       	movw	r30, r16
    13f8:	61 91       	ld	r22, Z+
    13fa:	8f 01       	movw	r16, r30
    13fc:	80 91 08 01 	lds	r24, 0x0108
    1400:	90 91 09 01 	lds	r25, 0x0109
    1404:	01 d9       	rcall	.-3582   	; 0x608 <FifoWrite>
    1406:	81 11       	cpse	r24, r1
    1408:	0e c0       	rjmp	.+28     	; 0x1426 <write_to_TwiFIFO+0x64>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    140a:	21 96       	adiw	r28, 0x01	; 1
    140c:	80 91 88 14 	lds	r24, 0x1488
    1410:	90 91 89 14 	lds	r25, 0x1489
    1414:	c8 17       	cp	r28, r24
    1416:	d9 07       	cpc	r29, r25
    1418:	74 f3       	brlt	.-36     	; 0x13f6 <write_to_TwiFIFO+0x34>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <write_to_TwiFIFO+0x66>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//Can't add length!?
		return 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <write_to_TwiFIFO+0x66>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <write_to_TwiFIFO+0x66>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//Can't add chars!?
			return 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <__vector_26>:

//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    1432:	1f 92       	push	r1
    1434:	0f 92       	push	r0
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
    143c:	0b b6       	in	r0, 0x3b	; 59
    143e:	0f 92       	push	r0
    1440:	2f 93       	push	r18
    1442:	3f 93       	push	r19
    1444:	4f 93       	push	r20
    1446:	5f 93       	push	r21
    1448:	6f 93       	push	r22
    144a:	7f 93       	push	r23
    144c:	8f 93       	push	r24
    144e:	9f 93       	push	r25
    1450:	af 93       	push	r26
    1452:	bf 93       	push	r27
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	ef 93       	push	r30
    145a:	ff 93       	push	r31
	switch(myAdress)
    145c:	80 91 7f 14 	lds	r24, 0x147F
    1460:	80 34       	cpi	r24, 0x40	; 64
    1462:	09 f4       	brne	.+2      	; 0x1466 <__vector_26+0x34>
    1464:	87 c0       	rjmp	.+270    	; 0x1574 <__vector_26+0x142>
    1466:	80 38       	cpi	r24, 0x80	; 128
    1468:	21 f0       	breq	.+8      	; 0x1472 <__vector_26+0x40>
    146a:	80 32       	cpi	r24, 0x20	; 32
    146c:	09 f0       	breq	.+2      	; 0x1470 <__vector_26+0x3e>
    146e:	57 c1       	rjmp	.+686    	; 0x171e <__vector_26+0x2ec>
    1470:	c9 c0       	rjmp	.+402    	; 0x1604 <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1472:	80 91 b9 00 	lds	r24, 0x00B9
    1476:	88 7f       	andi	r24, 0xF8	; 248
    1478:	80 36       	cpi	r24, 0x60	; 96
    147a:	29 f0       	breq	.+10     	; 0x1486 <__vector_26+0x54>
    147c:	80 91 b9 00 	lds	r24, 0x00B9
    1480:	88 7f       	andi	r24, 0xF8	; 248
    1482:	88 36       	cpi	r24, 0x68	; 104
    1484:	21 f4       	brne	.+8      	; 0x148e <__vector_26+0x5c>
			{
				instruction = 1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 82 14 	sts	0x1482, r24
    148c:	71 c0       	rjmp	.+226    	; 0x1570 <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    148e:	80 91 b9 00 	lds	r24, 0x00B9
    1492:	88 7f       	andi	r24, 0xF8	; 248
    1494:	80 37       	cpi	r24, 0x70	; 112
    1496:	29 f0       	breq	.+10     	; 0x14a2 <__vector_26+0x70>
    1498:	80 91 b9 00 	lds	r24, 0x00B9
    149c:	88 7f       	andi	r24, 0xF8	; 248
    149e:	88 37       	cpi	r24, 0x78	; 120
    14a0:	39 f4       	brne	.+14     	; 0x14b0 <__vector_26+0x7e>
			{
				currentInstruction = 255;
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	90 93 8c 14 	sts	0x148C, r25
    14aa:	80 93 8b 14 	sts	0x148B, r24
    14ae:	60 c0       	rjmp	.+192    	; 0x1570 <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    14b0:	80 91 b9 00 	lds	r24, 0x00B9
    14b4:	88 7f       	andi	r24, 0xF8	; 248
    14b6:	80 38       	cpi	r24, 0x80	; 128
    14b8:	b9 f5       	brne	.+110    	; 0x1528 <__vector_26+0xf6>
			{
				if(instruction)
    14ba:	80 91 82 14 	lds	r24, 0x1482
    14be:	88 23       	and	r24, r24
    14c0:	41 f0       	breq	.+16     	; 0x14d2 <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    14c2:	86 dd       	rcall	.-1268   	; 0xfd0 <get_data>
    14c4:	80 93 8b 14 	sts	0x148B, r24
    14c8:	10 92 8c 14 	sts	0x148C, r1
					instruction = 0;
    14cc:	10 92 82 14 	sts	0x1482, r1
    14d0:	4f c0       	rjmp	.+158    	; 0x1570 <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    14d2:	80 91 8b 14 	lds	r24, 0x148B
    14d6:	90 91 8c 14 	lds	r25, 0x148C
    14da:	85 30       	cpi	r24, 0x05	; 5
    14dc:	91 05       	cpc	r25, r1
    14de:	71 f0       	breq	.+28     	; 0x14fc <__vector_26+0xca>
    14e0:	24 f4       	brge	.+8      	; 0x14ea <__vector_26+0xb8>
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <__vector_26+0xb6>
    14e6:	44 c0       	rjmp	.+136    	; 0x1570 <__vector_26+0x13e>
    14e8:	07 c0       	rjmp	.+14     	; 0x14f8 <__vector_26+0xc6>
    14ea:	86 30       	cpi	r24, 0x06	; 6
    14ec:	91 05       	cpc	r25, r1
    14ee:	51 f0       	breq	.+20     	; 0x1504 <__vector_26+0xd2>
    14f0:	49 97       	sbiw	r24, 0x19	; 25
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <__vector_26+0xc4>
    14f4:	3d c0       	rjmp	.+122    	; 0x1570 <__vector_26+0x13e>
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    14f8:	95 dd       	rcall	.-1238   	; 0x1024 <get_control_settings_from_bus>
							break;
    14fa:	3a c0       	rjmp	.+116    	; 0x1570 <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    14fc:	a4 dd       	rcall	.-1208   	; 0x1046 <get_autonom_settings_from_bus>
							break;
    14fe:	38 c0       	rjmp	.+112    	; 0x1570 <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    1500:	a6 dd       	rcall	.-1204   	; 0x104e <get_char_from_bus>
							break;
    1502:	36 c0       	rjmp	.+108    	; 0x1570 <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    1504:	c0 91 80 14 	lds	r28, 0x1480
    1508:	d0 91 81 14 	lds	r29, 0x1481
    150c:	61 dd       	rcall	.-1342   	; 0xfd0 <get_data>
    150e:	cf 58       	subi	r28, 0x8F	; 143
    1510:	dc 4e       	sbci	r29, 0xEC	; 236
    1512:	88 83       	st	Y, r24
	floatCounter += 1;
    1514:	80 91 80 14 	lds	r24, 0x1480
    1518:	90 91 81 14 	lds	r25, 0x1481
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	90 93 81 14 	sts	0x1481, r25
    1522:	80 93 80 14 	sts	0x1480, r24
    1526:	24 c0       	rjmp	.+72     	; 0x1570 <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    1528:	80 91 b9 00 	lds	r24, 0x00B9
    152c:	88 7f       	andi	r24, 0xF8	; 248
    152e:	80 39       	cpi	r24, 0x90	; 144
    1530:	11 f4       	brne	.+4      	; 0x1536 <__vector_26+0x104>
			{
				get_sensor_from_bus();
    1532:	a7 dd       	rcall	.-1202   	; 0x1082 <get_sensor_from_bus>
    1534:	1d c0       	rjmp	.+58     	; 0x1570 <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    1536:	80 91 b9 00 	lds	r24, 0x00B9
    153a:	88 7f       	andi	r24, 0xF8	; 248
    153c:	80 3a       	cpi	r24, 0xA0	; 160
    153e:	c1 f4       	brne	.+48     	; 0x1570 <__vector_26+0x13e>
			{
				stop_twi();
    1540:	56 dd       	rcall	.-1364   	; 0xfee <stop_twi>
				switch(currentInstruction)
    1542:	80 91 8b 14 	lds	r24, 0x148B
    1546:	90 91 8c 14 	lds	r25, 0x148C
    154a:	85 30       	cpi	r24, 0x05	; 5
    154c:	91 05       	cpc	r25, r1
    154e:	49 f0       	breq	.+18     	; 0x1562 <__vector_26+0x130>
    1550:	89 31       	cpi	r24, 0x19	; 25
    1552:	91 05       	cpc	r25, r1
    1554:	51 f0       	breq	.+20     	; 0x156a <__vector_26+0x138>
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	59 f4       	brne	.+22     	; 0x1570 <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 39 13 	sts	0x1339, r24
						break;
    1560:	07 c0       	rjmp	.+14     	; 0x1570 <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	80 93 38 13 	sts	0x1338, r24
						break;
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    156a:	89 e7       	ldi	r24, 0x79	; 121
    156c:	93 e1       	ldi	r25, 0x13	; 19
    156e:	29 df       	rcall	.-430    	; 0x13c2 <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    1570:	53 dd       	rcall	.-1370   	; 0x1018 <reset_TWI>
			break;
    1572:	d5 c0       	rjmp	.+426    	; 0x171e <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1574:	80 91 b9 00 	lds	r24, 0x00B9
    1578:	88 7f       	andi	r24, 0xF8	; 248
    157a:	80 36       	cpi	r24, 0x60	; 96
    157c:	29 f0       	breq	.+10     	; 0x1588 <__vector_26+0x156>
    157e:	80 91 b9 00 	lds	r24, 0x00B9
    1582:	88 7f       	andi	r24, 0xF8	; 248
    1584:	88 36       	cpi	r24, 0x68	; 104
    1586:	21 f4       	brne	.+8      	; 0x1590 <__vector_26+0x15e>
			{
				instruction = 1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	80 93 82 14 	sts	0x1482, r24
    158e:	38 c0       	rjmp	.+112    	; 0x1600 <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    1590:	80 91 b9 00 	lds	r24, 0x00B9
    1594:	88 7f       	andi	r24, 0xF8	; 248
    1596:	80 38       	cpi	r24, 0x80	; 128
    1598:	e1 f4       	brne	.+56     	; 0x15d2 <__vector_26+0x1a0>
			{
				if(instruction)
    159a:	80 91 82 14 	lds	r24, 0x1482
    159e:	88 23       	and	r24, r24
    15a0:	41 f0       	breq	.+16     	; 0x15b2 <__vector_26+0x180>
				{
					currentInstruction = get_data();
    15a2:	16 dd       	rcall	.-1492   	; 0xfd0 <get_data>
    15a4:	80 93 8b 14 	sts	0x148B, r24
    15a8:	10 92 8c 14 	sts	0x148C, r1
					instruction = 0;
    15ac:	10 92 82 14 	sts	0x1482, r1
    15b0:	27 c0       	rjmp	.+78     	; 0x1600 <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    15b2:	80 91 8b 14 	lds	r24, 0x148B
    15b6:	90 91 8c 14 	lds	r25, 0x148C
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	91 05       	cpc	r25, r1
    15be:	19 f0       	breq	.+6      	; 0x15c6 <__vector_26+0x194>
    15c0:	49 97       	sbiw	r24, 0x19	; 25
    15c2:	f1 f4       	brne	.+60     	; 0x1600 <__vector_26+0x1ce>
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    15c6:	04 dd       	rcall	.-1528   	; 0xfd0 <get_data>
    15c8:	80 93 8a 14 	sts	0x148A, r24
    15cc:	19 c0       	rjmp	.+50     	; 0x1600 <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    15ce:	3f dd       	rcall	.-1410   	; 0x104e <get_char_from_bus>
							break;
    15d0:	17 c0       	rjmp	.+46     	; 0x1600 <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    15d2:	80 91 b9 00 	lds	r24, 0x00B9
    15d6:	88 7f       	andi	r24, 0xF8	; 248
    15d8:	80 3a       	cpi	r24, 0xA0	; 160
    15da:	91 f4       	brne	.+36     	; 0x1600 <__vector_26+0x1ce>
			{
				stop_twi();
    15dc:	08 dd       	rcall	.-1520   	; 0xfee <stop_twi>
				switch(currentInstruction)
    15de:	80 91 8b 14 	lds	r24, 0x148B
    15e2:	90 91 8c 14 	lds	r25, 0x148C
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	91 05       	cpc	r25, r1
    15ea:	19 f0       	breq	.+6      	; 0x15f2 <__vector_26+0x1c0>
    15ec:	49 97       	sbiw	r24, 0x19	; 25
    15ee:	41 f4       	brne	.+16     	; 0x1600 <__vector_26+0x1ce>
    15f0:	04 c0       	rjmp	.+8      	; 0x15fa <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 93 36 13 	sts	0x1336, r24
						break;
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    15fa:	89 e7       	ldi	r24, 0x79	; 121
    15fc:	93 e1       	ldi	r25, 0x13	; 19
    15fe:	e1 de       	rcall	.-574    	; 0x13c2 <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    1600:	0b dd       	rcall	.-1514   	; 0x1018 <reset_TWI>
			break;
    1602:	8d c0       	rjmp	.+282    	; 0x171e <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1604:	80 91 b9 00 	lds	r24, 0x00B9
    1608:	88 7f       	andi	r24, 0xF8	; 248
    160a:	80 36       	cpi	r24, 0x60	; 96
    160c:	29 f0       	breq	.+10     	; 0x1618 <__vector_26+0x1e6>
    160e:	80 91 b9 00 	lds	r24, 0x00B9
    1612:	88 7f       	andi	r24, 0xF8	; 248
    1614:	88 36       	cpi	r24, 0x68	; 104
    1616:	21 f4       	brne	.+8      	; 0x1620 <__vector_26+0x1ee>
			{
				instruction = 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 93 82 14 	sts	0x1482, r24
    161e:	7e c0       	rjmp	.+252    	; 0x171c <__vector_26+0x2ea>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1620:	80 91 b9 00 	lds	r24, 0x00B9
    1624:	88 7f       	andi	r24, 0xF8	; 248
    1626:	80 37       	cpi	r24, 0x70	; 112
    1628:	29 f0       	breq	.+10     	; 0x1634 <__vector_26+0x202>
    162a:	80 91 b9 00 	lds	r24, 0x00B9
    162e:	88 7f       	andi	r24, 0xF8	; 248
    1630:	88 37       	cpi	r24, 0x78	; 120
    1632:	39 f4       	brne	.+14     	; 0x1642 <__vector_26+0x210>
			{
				currentInstruction = 255;
    1634:	8f ef       	ldi	r24, 0xFF	; 255
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	90 93 8c 14 	sts	0x148C, r25
    163c:	80 93 8b 14 	sts	0x148B, r24
    1640:	6d c0       	rjmp	.+218    	; 0x171c <__vector_26+0x2ea>
			}
			else if(CONTROL == DATA_SLAW)
    1642:	80 91 b9 00 	lds	r24, 0x00B9
    1646:	88 7f       	andi	r24, 0xF8	; 248
    1648:	80 38       	cpi	r24, 0x80	; 128
    164a:	09 f0       	breq	.+2      	; 0x164e <__vector_26+0x21c>
    164c:	3a c0       	rjmp	.+116    	; 0x16c2 <__vector_26+0x290>
			{
				if(instruction)
    164e:	80 91 82 14 	lds	r24, 0x1482
    1652:	88 23       	and	r24, r24
    1654:	41 f0       	breq	.+16     	; 0x1666 <__vector_26+0x234>
				{
					currentInstruction = get_data();
    1656:	bc dc       	rcall	.-1672   	; 0xfd0 <get_data>
    1658:	80 93 8b 14 	sts	0x148B, r24
    165c:	10 92 8c 14 	sts	0x148C, r1
					instruction = 0;
    1660:	10 92 82 14 	sts	0x1482, r1
    1664:	5b c0       	rjmp	.+182    	; 0x171c <__vector_26+0x2ea>
				}
				else
				{
					switch(currentInstruction)
    1666:	80 91 8b 14 	lds	r24, 0x148B
    166a:	90 91 8c 14 	lds	r25, 0x148C
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	19 f1       	breq	.+70     	; 0x16ba <__vector_26+0x288>
    1674:	1c f4       	brge	.+6      	; 0x167c <__vector_26+0x24a>
    1676:	89 2b       	or	r24, r25
    1678:	41 f0       	breq	.+16     	; 0x168a <__vector_26+0x258>
    167a:	50 c0       	rjmp	.+160    	; 0x171c <__vector_26+0x2ea>
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	91 05       	cpc	r25, r1
    1680:	b1 f0       	breq	.+44     	; 0x16ae <__vector_26+0x27c>
    1682:	05 97       	sbiw	r24, 0x05	; 5
    1684:	09 f0       	breq	.+2      	; 0x1688 <__vector_26+0x256>
    1686:	4a c0       	rjmp	.+148    	; 0x171c <__vector_26+0x2ea>
    1688:	1a c0       	rjmp	.+52     	; 0x16be <__vector_26+0x28c>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    168a:	c0 91 83 14 	lds	r28, 0x1483
    168e:	d0 91 84 14 	lds	r29, 0x1484
    1692:	9e dc       	rcall	.-1732   	; 0xfd0 <get_data>
    1694:	cb 58       	subi	r28, 0x8B	; 139
    1696:	dc 4e       	sbci	r29, 0xEC	; 236
    1698:	88 83       	st	Y, r24
	currentCommand += 1;
    169a:	80 91 83 14 	lds	r24, 0x1483
    169e:	90 91 84 14 	lds	r25, 0x1484
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	90 93 84 14 	sts	0x1484, r25
    16a8:	80 93 83 14 	sts	0x1483, r24
    16ac:	37 c0       	rjmp	.+110    	; 0x171c <__vector_26+0x2ea>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation = get_data();
    16ae:	90 dc       	rcall	.-1760   	; 0xfd0 <get_data>
    16b0:	80 93 85 14 	sts	0x1485, r24
    16b4:	10 92 86 14 	sts	0x1486, r1
    16b8:	31 c0       	rjmp	.+98     	; 0x171c <__vector_26+0x2ea>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    16ba:	b4 dc       	rcall	.-1688   	; 0x1024 <get_control_settings_from_bus>
							break;
    16bc:	2f c0       	rjmp	.+94     	; 0x171c <__vector_26+0x2ea>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    16be:	c3 dc       	rcall	.-1658   	; 0x1046 <get_autonom_settings_from_bus>
							break;
    16c0:	2d c0       	rjmp	.+90     	; 0x171c <__vector_26+0x2ea>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    16c2:	80 91 b9 00 	lds	r24, 0x00B9
    16c6:	88 7f       	andi	r24, 0xF8	; 248
    16c8:	80 39       	cpi	r24, 0x90	; 144
    16ca:	11 f4       	brne	.+4      	; 0x16d0 <__vector_26+0x29e>
			{
				get_sensor_from_bus();
    16cc:	da dc       	rcall	.-1612   	; 0x1082 <get_sensor_from_bus>
    16ce:	26 c0       	rjmp	.+76     	; 0x171c <__vector_26+0x2ea>
			}
			else if (CONTROL == STOP)
    16d0:	80 91 b9 00 	lds	r24, 0x00B9
    16d4:	88 7f       	andi	r24, 0xF8	; 248
    16d6:	80 3a       	cpi	r24, 0xA0	; 160
    16d8:	09 f5       	brne	.+66     	; 0x171c <__vector_26+0x2ea>
			{
				stop_twi();
    16da:	89 dc       	rcall	.-1774   	; 0xfee <stop_twi>
				switch(currentInstruction)
    16dc:	80 91 8b 14 	lds	r24, 0x148B
    16e0:	90 91 8c 14 	lds	r25, 0x148C
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 05       	cpc	r25, r1
    16e8:	91 f0       	breq	.+36     	; 0x170e <__vector_26+0x2dc>
    16ea:	1c f4       	brge	.+6      	; 0x16f2 <__vector_26+0x2c0>
    16ec:	89 2b       	or	r24, r25
    16ee:	39 f0       	breq	.+14     	; 0x16fe <__vector_26+0x2cc>
    16f0:	15 c0       	rjmp	.+42     	; 0x171c <__vector_26+0x2ea>
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	91 05       	cpc	r25, r1
    16f6:	39 f0       	breq	.+14     	; 0x1706 <__vector_26+0x2d4>
    16f8:	05 97       	sbiw	r24, 0x05	; 5
    16fa:	81 f4       	brne	.+32     	; 0x171c <__vector_26+0x2ea>
    16fc:	0c c0       	rjmp	.+24     	; 0x1716 <__vector_26+0x2e4>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 93 3a 13 	sts	0x133A, r24
						break;
    1704:	0b c0       	rjmp	.+22     	; 0x171c <__vector_26+0x2ea>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	80 93 37 13 	sts	0x1337, r24
						break;
    170c:	07 c0       	rjmp	.+14     	; 0x171c <__vector_26+0x2ea>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	80 93 39 13 	sts	0x1339, r24
						break;
    1714:	03 c0       	rjmp	.+6      	; 0x171c <__vector_26+0x2ea>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	80 93 38 13 	sts	0x1338, r24
						break;
					}
				}
			}
			reset_TWI();
    171c:	7d dc       	rcall	.-1798   	; 0x1018 <reset_TWI>
			break;
		}
	}
    171e:	ff 91       	pop	r31
    1720:	ef 91       	pop	r30
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	bf 91       	pop	r27
    1728:	af 91       	pop	r26
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0b be       	out	0x3b, r0	; 59
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
    1748:	10 92 c5 00 	sts	0x00C5, r1
    174c:	87 e0       	ldi	r24, 0x07	; 7
    174e:	80 93 c4 00 	sts	0x00C4, r24
    1752:	88 e9       	ldi	r24, 0x98	; 152
    1754:	80 93 c1 00 	sts	0x00C1, r24
    1758:	86 e0       	ldi	r24, 0x06	; 6
    175a:	80 93 c2 00 	sts	0x00C2, r24
    175e:	08 95       	ret

00001760 <USART_set_twi_message_destination>:
    1760:	90 93 1a 11 	sts	0x111A, r25
    1764:	80 93 19 11 	sts	0x1119, r24
    1768:	08 95       	ret

0000176a <USART_CheckTxReady>:
    176a:	80 91 c0 00 	lds	r24, 0x00C0
    176e:	80 72       	andi	r24, 0x20	; 32
    1770:	08 95       	ret

00001772 <USART_WriteByte>:
    1772:	cf 93       	push	r28
    1774:	c8 2f       	mov	r28, r24
    1776:	f9 df       	rcall	.-14     	; 0x176a <USART_CheckTxReady>
    1778:	88 23       	and	r24, r24
    177a:	e9 f3       	breq	.-6      	; 0x1776 <USART_WriteByte+0x4>
    177c:	c0 93 c6 00 	sts	0x00C6, r28
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <USART_crc16>:
    1784:	cf 92       	push	r12
    1786:	df 92       	push	r13
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	66 23       	and	r22, r22
    1796:	09 f4       	brne	.+2      	; 0x179a <USART_crc16+0x16>
    1798:	3e c0       	rjmp	.+124    	; 0x1816 <USART_crc16+0x92>
    179a:	06 2f       	mov	r16, r22
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	4f ef       	ldi	r20, 0xFF	; 255
    17a0:	5f ef       	ldi	r21, 0xFF	; 255
    17a2:	ee ef       	ldi	r30, 0xFE	; 254
    17a4:	ff ef       	ldi	r31, 0xFF	; 255
    17a6:	c6 2e       	mov	r12, r22
    17a8:	d1 2c       	mov	r13, r1
    17aa:	e8 2e       	mov	r14, r24
    17ac:	f1 2c       	mov	r15, r1
    17ae:	c8 e0       	ldi	r28, 0x08	; 8
    17b0:	d0 e0       	ldi	r29, 0x00	; 0
    17b2:	ee 3f       	cpi	r30, 0xFE	; 254
    17b4:	6f ef       	ldi	r22, 0xFF	; 255
    17b6:	f6 07       	cpc	r31, r22
    17b8:	19 f4       	brne	.+6      	; 0x17c0 <USART_crc16+0x3c>
    17ba:	8e 2d       	mov	r24, r14
    17bc:	9f 2d       	mov	r25, r15
    17be:	30 c0       	rjmp	.+96     	; 0x1820 <USART_crc16+0x9c>
    17c0:	ef 3f       	cpi	r30, 0xFF	; 255
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	f8 07       	cpc	r31, r24
    17c6:	19 f4       	brne	.+6      	; 0x17ce <USART_crc16+0x4a>
    17c8:	8c 2d       	mov	r24, r12
    17ca:	9d 2d       	mov	r25, r13
    17cc:	29 c0       	rjmp	.+82     	; 0x1820 <USART_crc16+0x9c>
    17ce:	df 01       	movw	r26, r30
    17d0:	ac 55       	subi	r26, 0x5C	; 92
    17d2:	b9 4e       	sbci	r27, 0xE9	; 233
    17d4:	8c 91       	ld	r24, X
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	23 c0       	rjmp	.+70     	; 0x1820 <USART_crc16+0x9c>
    17da:	ba 01       	movw	r22, r20
    17dc:	68 27       	eor	r22, r24
    17de:	79 27       	eor	r23, r25
    17e0:	60 ff       	sbrs	r22, 0
    17e2:	07 c0       	rjmp	.+14     	; 0x17f2 <USART_crc16+0x6e>
    17e4:	56 95       	lsr	r21
    17e6:	47 95       	ror	r20
    17e8:	68 e0       	ldi	r22, 0x08	; 8
    17ea:	46 27       	eor	r20, r22
    17ec:	64 e8       	ldi	r22, 0x84	; 132
    17ee:	56 27       	eor	r21, r22
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <USART_crc16+0x72>
    17f2:	56 95       	lsr	r21
    17f4:	47 95       	ror	r20
    17f6:	96 95       	lsr	r25
    17f8:	87 95       	ror	r24
    17fa:	21 50       	subi	r18, 0x01	; 1
    17fc:	31 09       	sbc	r19, r1
    17fe:	69 f7       	brne	.-38     	; 0x17da <USART_crc16+0x56>
    1800:	31 96       	adiw	r30, 0x01	; 1
    1802:	e0 17       	cp	r30, r16
    1804:	f1 07       	cpc	r31, r17
    1806:	a9 f6       	brne	.-86     	; 0x17b2 <USART_crc16+0x2e>
    1808:	9a 01       	movw	r18, r20
    180a:	20 95       	com	r18
    180c:	30 95       	com	r19
    180e:	32 27       	eor	r19, r18
    1810:	23 27       	eor	r18, r19
    1812:	32 27       	eor	r19, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <USART_crc16+0x96>
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	82 2f       	mov	r24, r18
    181c:	93 2f       	mov	r25, r19
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <USART_crc16+0xa0>
    1820:	9e 01       	movw	r18, r28
    1822:	db cf       	rjmp	.-74     	; 0x17da <USART_crc16+0x56>
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	08 95       	ret

00001836 <USART_SendPacket>:
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	9e e7       	ldi	r25, 0x7E	; 126
    1840:	90 93 a3 17 	sts	0x17A3, r25
    1844:	80 93 a4 17 	sts	0x17A4, r24
    1848:	60 93 a5 17 	sts	0x17A5, r22
    184c:	26 2f       	mov	r18, r22
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	12 16       	cp	r1, r18
    1852:	13 06       	cpc	r1, r19
    1854:	4c f5       	brge	.+82     	; 0x18a8 <USART_SendPacket+0x72>
    1856:	e4 ea       	ldi	r30, 0xA4	; 164
    1858:	f6 e1       	ldi	r31, 0x16	; 22
    185a:	03 e0       	ldi	r16, 0x03	; 3
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	c0 e0       	ldi	r28, 0x00	; 0
    1860:	d0 e0       	ldi	r29, 0x00	; 0
    1862:	7d e7       	ldi	r23, 0x7D	; 125
    1864:	50 e2       	ldi	r21, 0x20	; 32
    1866:	90 81       	ld	r25, Z
    1868:	49 2f       	mov	r20, r25
    186a:	4d 57       	subi	r20, 0x7D	; 125
    186c:	42 30       	cpi	r20, 0x02	; 2
    186e:	80 f4       	brcc	.+32     	; 0x1890 <USART_SendPacket+0x5a>
    1870:	d8 01       	movw	r26, r16
    1872:	ad 55       	subi	r26, 0x5D	; 93
    1874:	b8 4e       	sbci	r27, 0xE8	; 232
    1876:	ac 0f       	add	r26, r28
    1878:	bd 1f       	adc	r27, r29
    187a:	7c 93       	st	X, r23
    187c:	0f 5f       	subi	r16, 0xFF	; 255
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	d8 01       	movw	r26, r16
    1882:	ad 55       	subi	r26, 0x5D	; 93
    1884:	b8 4e       	sbci	r27, 0xE8	; 232
    1886:	ac 0f       	add	r26, r28
    1888:	bd 1f       	adc	r27, r29
    188a:	95 27       	eor	r25, r21
    188c:	9c 93       	st	X, r25
    188e:	06 c0       	rjmp	.+12     	; 0x189c <USART_SendPacket+0x66>
    1890:	d8 01       	movw	r26, r16
    1892:	ad 55       	subi	r26, 0x5D	; 93
    1894:	b8 4e       	sbci	r27, 0xE8	; 232
    1896:	ac 0f       	add	r26, r28
    1898:	bd 1f       	adc	r27, r29
    189a:	9c 93       	st	X, r25
    189c:	21 96       	adiw	r28, 0x01	; 1
    189e:	31 96       	adiw	r30, 0x01	; 1
    18a0:	c2 17       	cp	r28, r18
    18a2:	d3 07       	cpc	r29, r19
    18a4:	01 f7       	brne	.-64     	; 0x1866 <USART_SendPacket+0x30>
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <USART_SendPacket+0x7a>
    18a8:	03 e0       	ldi	r16, 0x03	; 3
    18aa:	10 e0       	ldi	r17, 0x00	; 0
    18ac:	c0 e0       	ldi	r28, 0x00	; 0
    18ae:	d0 e0       	ldi	r29, 0x00	; 0
    18b0:	69 df       	rcall	.-302    	; 0x1784 <USART_crc16>
    18b2:	f8 01       	movw	r30, r16
    18b4:	ed 55       	subi	r30, 0x5D	; 93
    18b6:	f8 4e       	sbci	r31, 0xE8	; 232
    18b8:	ec 0f       	add	r30, r28
    18ba:	fd 1f       	adc	r31, r29
    18bc:	90 83       	st	Z, r25
    18be:	81 83       	std	Z+1, r24	; 0x01
    18c0:	22 96       	adiw	r28, 0x02	; 2
    18c2:	0c 0f       	add	r16, r28
    18c4:	1d 1f       	adc	r17, r29
    18c6:	f8 01       	movw	r30, r16
    18c8:	ed 55       	subi	r30, 0x5D	; 93
    18ca:	f8 4e       	sbci	r31, 0xE8	; 232
    18cc:	8e e7       	ldi	r24, 0x7E	; 126
    18ce:	80 83       	st	Z, r24
    18d0:	c8 01       	movw	r24, r16
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	18 16       	cp	r1, r24
    18d6:	19 06       	cpc	r1, r25
    18d8:	4c f4       	brge	.+18     	; 0x18ec <USART_SendPacket+0xb6>
    18da:	c3 ea       	ldi	r28, 0xA3	; 163
    18dc:	d7 e1       	ldi	r29, 0x17	; 23
    18de:	0c 55       	subi	r16, 0x5C	; 92
    18e0:	18 4e       	sbci	r17, 0xE8	; 232
    18e2:	89 91       	ld	r24, Y+
    18e4:	46 df       	rcall	.-372    	; 0x1772 <USART_WriteByte>
    18e6:	c0 17       	cp	r28, r16
    18e8:	d1 07       	cpc	r29, r17
    18ea:	d9 f7       	brne	.-10     	; 0x18e2 <USART_SendPacket+0xac>
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

000018f6 <USART_SendCommand>:
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	26 dd       	rcall	.-1460   	; 0x1348 <TWI_get_command>
    18fc:	80 93 a4 16 	sts	0x16A4, r24
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	21 dd       	rcall	.-1470   	; 0x1348 <TWI_get_command>
    1906:	80 93 a5 16 	sts	0x16A5, r24
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	1c dd       	rcall	.-1480   	; 0x1348 <TWI_get_command>
    1910:	80 93 a6 16 	sts	0x16A6, r24
    1914:	63 e0       	ldi	r22, 0x03	; 3
    1916:	83 e4       	ldi	r24, 0x43	; 67
    1918:	8e cf       	rjmp	.-228    	; 0x1836 <USART_SendPacket>

0000191a <USART_SendElevation>:
    191a:	28 dd       	rcall	.-1456   	; 0x136c <TWI_get_elevation>
    191c:	80 93 a4 16 	sts	0x16A4, r24
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	85 e4       	ldi	r24, 0x45	; 69
    1924:	88 cf       	rjmp	.-240    	; 0x1836 <USART_SendPacket>

00001926 <USART_DecodeMessageRxFIFO>:
    1926:	8f 92       	push	r8
    1928:	9f 92       	push	r9
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	ad b6       	in	r10, 0x3d	; 61
    1944:	be b6       	in	r11, 0x3e	; 62
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	80 91 11 01 	lds	r24, 0x0111
    194e:	90 91 12 01 	lds	r25, 0x0112
    1952:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    1956:	88 23       	and	r24, r24
    1958:	31 f0       	breq	.+12     	; 0x1966 <USART_DecodeMessageRxFIFO+0x40>
    195a:	65 e0       	ldi	r22, 0x05	; 5
    195c:	72 e1       	ldi	r23, 0x12	; 18
    195e:	80 e4       	ldi	r24, 0x40	; 64
    1960:	27 dc       	rcall	.-1970   	; 0x11b0 <TWI_send_string>
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	45 c0       	rjmp	.+138    	; 0x19f0 <USART_DecodeMessageRxFIFO+0xca>
    1966:	c0 90 00 00 	lds	r12, 0x0000
    196a:	d1 2c       	mov	r13, r1
    196c:	96 01       	movw	r18, r12
    196e:	21 50       	subi	r18, 0x01	; 1
    1970:	31 09       	sbc	r19, r1
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	c1 14       	cp	r12, r1
    1978:	d1 04       	cpc	r13, r1
    197a:	11 f0       	breq	.+4      	; 0x1980 <USART_DecodeMessageRxFIFO+0x5a>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	82 0f       	add	r24, r18
    1982:	93 1f       	adc	r25, r19
    1984:	2d b7       	in	r18, 0x3d	; 61
    1986:	3e b7       	in	r19, 0x3e	; 62
    1988:	28 1b       	sub	r18, r24
    198a:	39 0b       	sbc	r19, r25
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	3e bf       	out	0x3e, r19	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	2d bf       	out	0x3d, r18	; 61
    1996:	8d b7       	in	r24, 0x3d	; 61
    1998:	9e b7       	in	r25, 0x3e	; 62
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	88 2e       	mov	r8, r24
    199e:	99 2e       	mov	r9, r25
    19a0:	1c 14       	cp	r1, r12
    19a2:	1d 04       	cpc	r1, r13
    19a4:	f4 f4       	brge	.+60     	; 0x19e2 <USART_DecodeMessageRxFIFO+0xbc>
    19a6:	e8 2e       	mov	r14, r24
    19a8:	f9 2e       	mov	r15, r25
    19aa:	00 e0       	ldi	r16, 0x00	; 0
    19ac:	10 e0       	ldi	r17, 0x00	; 0
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	80 91 11 01 	lds	r24, 0x0111
    19b6:	90 91 12 01 	lds	r25, 0x0112
    19ba:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    19be:	88 23       	and	r24, r24
    19c0:	31 f0       	breq	.+12     	; 0x19ce <USART_DecodeMessageRxFIFO+0xa8>
    19c2:	67 e2       	ldi	r22, 0x27	; 39
    19c4:	72 e1       	ldi	r23, 0x12	; 18
    19c6:	80 e4       	ldi	r24, 0x40	; 64
    19c8:	f3 db       	rcall	.-2074   	; 0x11b0 <TWI_send_string>
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	11 c0       	rjmp	.+34     	; 0x19f0 <USART_DecodeMessageRxFIFO+0xca>
    19ce:	80 91 00 00 	lds	r24, 0x0000
    19d2:	f7 01       	movw	r30, r14
    19d4:	81 93       	st	Z+, r24
    19d6:	7f 01       	movw	r14, r30
    19d8:	0f 5f       	subi	r16, 0xFF	; 255
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	0c 15       	cp	r16, r12
    19de:	1d 05       	cpc	r17, r13
    19e0:	34 f3       	brlt	.-52     	; 0x19ae <USART_DecodeMessageRxFIFO+0x88>
    19e2:	a6 01       	movw	r20, r12
    19e4:	68 2d       	mov	r22, r8
    19e6:	79 2d       	mov	r23, r9
    19e8:	80 91 19 11 	lds	r24, 0x1119
    19ec:	27 dc       	rcall	.-1970   	; 0x123c <TWI_send_string_fixed_length>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	be be       	out	0x3e, r11	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	ad be       	out	0x3d, r10	; 61
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	ef 90       	pop	r14
    1a06:	df 90       	pop	r13
    1a08:	cf 90       	pop	r12
    1a0a:	bf 90       	pop	r11
    1a0c:	af 90       	pop	r10
    1a0e:	9f 90       	pop	r9
    1a10:	8f 90       	pop	r8
    1a12:	08 95       	ret

00001a14 <USART_DecodeCommandRxFIFO>:
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	80 91 11 01 	lds	r24, 0x0111
    1a20:	90 91 12 01 	lds	r25, 0x0112
    1a24:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    1a28:	88 23       	and	r24, r24
    1a2a:	31 f0       	breq	.+12     	; 0x1a38 <USART_DecodeCommandRxFIFO+0x24>
    1a2c:	6a e4       	ldi	r22, 0x4A	; 74
    1a2e:	72 e1       	ldi	r23, 0x12	; 18
    1a30:	80 e4       	ldi	r24, 0x40	; 64
    1a32:	be db       	rcall	.-2180   	; 0x11b0 <TWI_send_string>
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	45 c0       	rjmp	.+138    	; 0x1ac2 <USART_DecodeCommandRxFIFO+0xae>
    1a38:	80 91 00 00 	lds	r24, 0x0000
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <USART_DecodeCommandRxFIFO+0x2e>
    1a40:	3b c0       	rjmp	.+118    	; 0x1ab8 <USART_DecodeCommandRxFIFO+0xa4>
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	80 91 11 01 	lds	r24, 0x0111
    1a4a:	90 91 12 01 	lds	r25, 0x0112
    1a4e:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    1a52:	88 23       	and	r24, r24
    1a54:	31 f0       	breq	.+12     	; 0x1a62 <USART_DecodeCommandRxFIFO+0x4e>
    1a56:	6c e6       	ldi	r22, 0x6C	; 108
    1a58:	72 e1       	ldi	r23, 0x12	; 18
    1a5a:	80 e4       	ldi	r24, 0x40	; 64
    1a5c:	a9 db       	rcall	.-2222   	; 0x11b0 <TWI_send_string>
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	30 c0       	rjmp	.+96     	; 0x1ac2 <USART_DecodeCommandRxFIFO+0xae>
    1a62:	c0 91 00 00 	lds	r28, 0x0000
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	80 91 11 01 	lds	r24, 0x0111
    1a6e:	90 91 12 01 	lds	r25, 0x0112
    1a72:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    1a76:	88 23       	and	r24, r24
    1a78:	31 f0       	breq	.+12     	; 0x1a86 <USART_DecodeCommandRxFIFO+0x72>
    1a7a:	64 e9       	ldi	r22, 0x94	; 148
    1a7c:	72 e1       	ldi	r23, 0x12	; 18
    1a7e:	80 e4       	ldi	r24, 0x40	; 64
    1a80:	97 db       	rcall	.-2258   	; 0x11b0 <TWI_send_string>
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	1e c0       	rjmp	.+60     	; 0x1ac2 <USART_DecodeCommandRxFIFO+0xae>
    1a86:	d0 91 00 00 	lds	r29, 0x0000
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	80 91 11 01 	lds	r24, 0x0111
    1a92:	90 91 12 01 	lds	r25, 0x0112
    1a96:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    1a9a:	88 23       	and	r24, r24
    1a9c:	31 f0       	breq	.+12     	; 0x1aaa <USART_DecodeCommandRxFIFO+0x96>
    1a9e:	6b eb       	ldi	r22, 0xBB	; 187
    1aa0:	72 e1       	ldi	r23, 0x12	; 18
    1aa2:	80 e4       	ldi	r24, 0x40	; 64
    1aa4:	85 db       	rcall	.-2294   	; 0x11b0 <TWI_send_string>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	0c c0       	rjmp	.+24     	; 0x1ac2 <USART_DecodeCommandRxFIFO+0xae>
    1aaa:	40 91 00 00 	lds	r20, 0x0000
    1aae:	6d 2f       	mov	r22, r29
    1ab0:	8c 2f       	mov	r24, r28
    1ab2:	36 db       	rcall	.-2452   	; 0x1120 <TWI_send_command>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <USART_DecodeCommandRxFIFO+0xae>
    1ab8:	6f ed       	ldi	r22, 0xDF	; 223
    1aba:	72 e1       	ldi	r23, 0x12	; 18
    1abc:	80 e4       	ldi	r24, 0x40	; 64
    1abe:	78 db       	rcall	.-2320   	; 0x11b0 <TWI_send_string>
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <USART_DecodeValueFIFO>:
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <USART_DecodeValueFIFO+0xe>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <USART_DecodeValueFIFO+0x10>
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	80 91 11 01 	lds	r24, 0x0111
    1ae4:	90 91 12 01 	lds	r25, 0x0112
    1ae8:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    1aec:	88 23       	and	r24, r24
    1aee:	31 f0       	breq	.+12     	; 0x1afc <USART_DecodeValueFIFO+0x34>
    1af0:	66 e0       	ldi	r22, 0x06	; 6
    1af2:	73 e1       	ldi	r23, 0x13	; 19
    1af4:	80 e4       	ldi	r24, 0x40	; 64
    1af6:	5c db       	rcall	.-2376   	; 0x11b0 <TWI_send_string>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	29 c0       	rjmp	.+82     	; 0x1b4e <USART_DecodeValueFIFO+0x86>
    1afc:	80 91 00 00 	lds	r24, 0x0000
    1b00:	84 30       	cpi	r24, 0x04	; 4
    1b02:	11 f5       	brne	.+68     	; 0x1b48 <USART_DecodeValueFIFO+0x80>
    1b04:	8e 01       	movw	r16, r28
    1b06:	0f 5f       	subi	r16, 0xFF	; 255
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	7e 01       	movw	r14, r28
    1b0c:	85 e0       	ldi	r24, 0x05	; 5
    1b0e:	e8 0e       	add	r14, r24
    1b10:	f1 1c       	adc	r15, r1
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	80 91 11 01 	lds	r24, 0x0111
    1b1a:	90 91 12 01 	lds	r25, 0x0112
    1b1e:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    1b22:	81 11       	cpse	r24, r1
    1b24:	13 c0       	rjmp	.+38     	; 0x1b4c <USART_DecodeValueFIFO+0x84>
    1b26:	80 91 00 00 	lds	r24, 0x0000
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	81 93       	st	Z+, r24
    1b2e:	8f 01       	movw	r16, r30
    1b30:	ee 15       	cp	r30, r14
    1b32:	ff 05       	cpc	r31, r15
    1b34:	71 f7       	brne	.-36     	; 0x1b12 <USART_DecodeValueFIFO+0x4a>
    1b36:	49 81       	ldd	r20, Y+1	; 0x01
    1b38:	5a 81       	ldd	r21, Y+2	; 0x02
    1b3a:	6b 81       	ldd	r22, Y+3	; 0x03
    1b3c:	7c 81       	ldd	r23, Y+4	; 0x04
    1b3e:	80 91 19 11 	lds	r24, 0x1119
    1b42:	ba db       	rcall	.-2188   	; 0x12b8 <TWI_send_float>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	03 c0       	rjmp	.+6      	; 0x1b4e <USART_DecodeValueFIFO+0x86>
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <USART_DecodeValueFIFO+0x86>
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	ff 90       	pop	r15
    1b60:	ef 90       	pop	r14
    1b62:	08 95       	ret

00001b64 <USART_DecodeReadyFIFO>:
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	80 91 11 01 	lds	r24, 0x0111
    1b6c:	90 91 12 01 	lds	r25, 0x0112
    1b70:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    1b74:	88 23       	and	r24, r24
    1b76:	31 f0       	breq	.+12     	; 0x1b84 <USART_DecodeReadyFIFO+0x20>
    1b78:	6a e4       	ldi	r22, 0x4A	; 74
    1b7a:	72 e1       	ldi	r23, 0x12	; 18
    1b7c:	80 e4       	ldi	r24, 0x40	; 64
    1b7e:	18 db       	rcall	.-2512   	; 0x11b0 <TWI_send_string>
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	08 95       	ret
    1b84:	80 91 00 00 	lds	r24, 0x0000
    1b88:	81 11       	cpse	r24, r1
    1b8a:	05 c0       	rjmp	.+10     	; 0x1b96 <USART_DecodeReadyFIFO+0x32>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	80 93 3c 13 	sts	0x133C, r24
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	08 95       	ret
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	08 95       	ret

00001b9a <USART_ready>:
    1b9a:	80 91 3c 13 	lds	r24, 0x133C
    1b9e:	88 23       	and	r24, r24
    1ba0:	21 f0       	breq	.+8      	; 0x1baa <USART_ready+0x10>
    1ba2:	10 92 3c 13 	sts	0x133C, r1
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	08 95       	ret
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	08 95       	ret

00001bae <USART_DecodeRxFIFO>:
    1bae:	1c c0       	rjmp	.+56     	; 0x1be8 <USART_DecodeRxFIFO+0x3a>
    1bb0:	80 91 00 00 	lds	r24, 0x0000
    1bb4:	8d 34       	cpi	r24, 0x4D	; 77
    1bb6:	49 f0       	breq	.+18     	; 0x1bca <USART_DecodeRxFIFO+0x1c>
    1bb8:	18 f4       	brcc	.+6      	; 0x1bc0 <USART_DecodeRxFIFO+0x12>
    1bba:	83 34       	cpi	r24, 0x43	; 67
    1bbc:	a9 f4       	brne	.+42     	; 0x1be8 <USART_DecodeRxFIFO+0x3a>
    1bbe:	09 c0       	rjmp	.+18     	; 0x1bd2 <USART_DecodeRxFIFO+0x24>
    1bc0:	82 35       	cpi	r24, 0x52	; 82
    1bc2:	79 f0       	breq	.+30     	; 0x1be2 <USART_DecodeRxFIFO+0x34>
    1bc4:	86 35       	cpi	r24, 0x56	; 86
    1bc6:	81 f4       	brne	.+32     	; 0x1be8 <USART_DecodeRxFIFO+0x3a>
    1bc8:	08 c0       	rjmp	.+16     	; 0x1bda <USART_DecodeRxFIFO+0x2c>
    1bca:	ad de       	rcall	.-678    	; 0x1926 <USART_DecodeMessageRxFIFO>
    1bcc:	88 23       	and	r24, r24
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <USART_DecodeRxFIFO+0x3a>
    1bd0:	08 95       	ret
    1bd2:	20 df       	rcall	.-448    	; 0x1a14 <USART_DecodeCommandRxFIFO>
    1bd4:	88 23       	and	r24, r24
    1bd6:	41 f0       	breq	.+16     	; 0x1be8 <USART_DecodeRxFIFO+0x3a>
    1bd8:	08 95       	ret
    1bda:	76 df       	rcall	.-276    	; 0x1ac8 <USART_DecodeValueFIFO>
    1bdc:	88 23       	and	r24, r24
    1bde:	21 f0       	breq	.+8      	; 0x1be8 <USART_DecodeRxFIFO+0x3a>
    1be0:	08 95       	ret
    1be2:	c0 df       	rcall	.-128    	; 0x1b64 <USART_DecodeReadyFIFO>
    1be4:	81 11       	cpse	r24, r1
    1be6:	0a c0       	rjmp	.+20     	; 0x1bfc <USART_DecodeRxFIFO+0x4e>
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	80 91 11 01 	lds	r24, 0x0111
    1bf0:	90 91 12 01 	lds	r25, 0x0112
    1bf4:	0e 94 24 03 	call	0x648	; 0x648 <FifoRead>
    1bf8:	88 23       	and	r24, r24
    1bfa:	d1 f2       	breq	.-76     	; 0x1bb0 <USART_DecodeRxFIFO+0x2>
    1bfc:	08 95       	ret

00001bfe <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	0b b6       	in	r0, 0x3b	; 59
    1c0a:	0f 92       	push	r0
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	2f 93       	push	r18
    1c16:	3f 93       	push	r19
    1c18:	4f 93       	push	r20
    1c1a:	5f 93       	push	r21
    1c1c:	6f 93       	push	r22
    1c1e:	7f 93       	push	r23
    1c20:	8f 93       	push	r24
    1c22:	9f 93       	push	r25
    1c24:	af 93       	push	r26
    1c26:	bf 93       	push	r27
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	ef 93       	push	r30
    1c2e:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1c30:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1c34:	2e 37       	cpi	r18, 0x7E	; 126
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <__vector_20+0x3c>
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1c3a:	80 91 3f 13 	lds	r24, 0x133F
    1c3e:	90 91 40 13 	lds	r25, 0x1340
    1c42:	84 30       	cpi	r24, 0x04	; 4
    1c44:	91 05       	cpc	r25, r1
    1c46:	40 f4       	brcc	.+16     	; 0x1c58 <__vector_20+0x5a>
    1c48:	20 91 a0 14 	lds	r18, 0x14A0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	2c 5f       	subi	r18, 0xFC	; 252
    1c50:	3f 4f       	sbci	r19, 0xFF	; 255
    1c52:	82 17       	cp	r24, r18
    1c54:	93 07       	cpc	r25, r19
    1c56:	59 f5       	brne	.+86     	; 0x1cae <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1c58:	80 91 3d 13 	lds	r24, 0x133D
    1c5c:	90 91 3e 13 	lds	r25, 0x133E
    1c60:	89 2b       	or	r24, r25
    1c62:	21 f0       	breq	.+8      	; 0x1c6c <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1c64:	10 92 3e 13 	sts	0x133E, r1
    1c68:	10 92 3d 13 	sts	0x133D, r1
    1c6c:	0f e9       	ldi	r16, 0x9F	; 159
    1c6e:	14 e1       	ldi	r17, 0x14	; 20
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1c70:	c0 e0       	ldi	r28, 0x00	; 0
    1c72:	d0 e0       	ldi	r29, 0x00	; 0
    1c74:	0f 2e       	mov	r0, r31
    1c76:	f0 ea       	ldi	r31, 0xA0	; 160
    1c78:	ef 2e       	mov	r14, r31
    1c7a:	f4 e1       	ldi	r31, 0x14	; 20
    1c7c:	ff 2e       	mov	r15, r31
    1c7e:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1c80:	f8 01       	movw	r30, r16
    1c82:	61 91       	ld	r22, Z+
    1c84:	8f 01       	movw	r16, r30
    1c86:	80 91 11 01 	lds	r24, 0x0111
    1c8a:	90 91 12 01 	lds	r25, 0x0112
    1c8e:	0e 94 04 03 	call	0x608	; 0x608 <FifoWrite>
    1c92:	88 23       	and	r24, r24
    1c94:	21 f0       	breq	.+8      	; 0x1c9e <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1c96:	66 e2       	ldi	r22, 0x26	; 38
    1c98:	73 e1       	ldi	r23, 0x13	; 19
    1c9a:	80 e4       	ldi	r24, 0x40	; 64
    1c9c:	89 da       	rcall	.-2798   	; 0x11b0 <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1c9e:	21 96       	adiw	r28, 0x01	; 1
    1ca0:	f7 01       	movw	r30, r14
    1ca2:	80 81       	ld	r24, Z
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	02 96       	adiw	r24, 0x02	; 2
    1ca8:	c8 17       	cp	r28, r24
    1caa:	d9 07       	cpc	r29, r25
    1cac:	4c f3       	brlt	.-46     	; 0x1c80 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1cae:	10 92 40 13 	sts	0x1340, r1
    1cb2:	10 92 3f 13 	sts	0x133F, r1
    1cb6:	16 c0       	rjmp	.+44     	; 0x1ce4 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1cb8:	2d 37       	cpi	r18, 0x7D	; 125
    1cba:	39 f4       	brne	.+14     	; 0x1cca <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	90 93 3e 13 	sts	0x133E, r25
    1cc4:	80 93 3d 13 	sts	0x133D, r24
    1cc8:	0d c0       	rjmp	.+26     	; 0x1ce4 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1cca:	80 91 3f 13 	lds	r24, 0x133F
    1cce:	90 91 40 13 	lds	r25, 0x1340
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	e1 56       	subi	r30, 0x61	; 97
    1cd6:	fb 4e       	sbci	r31, 0xEB	; 235
    1cd8:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	90 93 40 13 	sts	0x1340, r25
    1ce0:	80 93 3f 13 	sts	0x133F, r24
	}
	
	
}
    1ce4:	ff 91       	pop	r31
    1ce6:	ef 91       	pop	r30
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	bf 91       	pop	r27
    1cee:	af 91       	pop	r26
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	7f 91       	pop	r23
    1cf6:	6f 91       	pop	r22
    1cf8:	5f 91       	pop	r21
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	0f 90       	pop	r0
    1d0a:	0b be       	out	0x3b, r0	; 59
    1d0c:	0f 90       	pop	r0
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	0f 90       	pop	r0
    1d12:	1f 90       	pop	r1
    1d14:	18 95       	reti

00001d16 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1d16:	80 93 a4 16 	sts	0x16A4, r24
	gTxPayload[1] = rotation;
    1d1a:	60 93 a5 16 	sts	0x16A5, r22
	gTxPayload[2] = speed;
    1d1e:	40 93 a6 16 	sts	0x16A6, r20
	
	
	USART_SendPacket('C', 3);
    1d22:	63 e0       	ldi	r22, 0x03	; 3
    1d24:	83 e4       	ldi	r24, 0x43	; 67
    1d26:	87 cd       	rjmp	.-1266   	; 0x1836 <USART_SendPacket>

00001d28 <__subsf3>:
    1d28:	50 58       	subi	r21, 0x80	; 128

00001d2a <__addsf3>:
    1d2a:	bb 27       	eor	r27, r27
    1d2c:	aa 27       	eor	r26, r26
    1d2e:	0e d0       	rcall	.+28     	; 0x1d4c <__addsf3x>
    1d30:	ed c1       	rjmp	.+986    	; 0x210c <__fp_round>
    1d32:	b6 d1       	rcall	.+876    	; 0x20a0 <__fp_pscA>
    1d34:	30 f0       	brcs	.+12     	; 0x1d42 <__addsf3+0x18>
    1d36:	bb d1       	rcall	.+886    	; 0x20ae <__fp_pscB>
    1d38:	20 f0       	brcs	.+8      	; 0x1d42 <__addsf3+0x18>
    1d3a:	31 f4       	brne	.+12     	; 0x1d48 <__addsf3+0x1e>
    1d3c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d3e:	11 f4       	brne	.+4      	; 0x1d44 <__addsf3+0x1a>
    1d40:	1e f4       	brtc	.+6      	; 0x1d48 <__addsf3+0x1e>
    1d42:	86 c1       	rjmp	.+780    	; 0x2050 <__fp_nan>
    1d44:	0e f4       	brtc	.+2      	; 0x1d48 <__addsf3+0x1e>
    1d46:	e0 95       	com	r30
    1d48:	e7 fb       	bst	r30, 7
    1d4a:	7c c1       	rjmp	.+760    	; 0x2044 <__fp_inf>

00001d4c <__addsf3x>:
    1d4c:	e9 2f       	mov	r30, r25
    1d4e:	00 d2       	rcall	.+1024   	; 0x2150 <__fp_split3>
    1d50:	80 f3       	brcs	.-32     	; 0x1d32 <__addsf3+0x8>
    1d52:	ba 17       	cp	r27, r26
    1d54:	62 07       	cpc	r22, r18
    1d56:	73 07       	cpc	r23, r19
    1d58:	84 07       	cpc	r24, r20
    1d5a:	95 07       	cpc	r25, r21
    1d5c:	18 f0       	brcs	.+6      	; 0x1d64 <__addsf3x+0x18>
    1d5e:	71 f4       	brne	.+28     	; 0x1d7c <__addsf3x+0x30>
    1d60:	9e f5       	brtc	.+102    	; 0x1dc8 <__addsf3x+0x7c>
    1d62:	18 c2       	rjmp	.+1072   	; 0x2194 <__fp_zero>
    1d64:	0e f4       	brtc	.+2      	; 0x1d68 <__addsf3x+0x1c>
    1d66:	e0 95       	com	r30
    1d68:	0b 2e       	mov	r0, r27
    1d6a:	ba 2f       	mov	r27, r26
    1d6c:	a0 2d       	mov	r26, r0
    1d6e:	0b 01       	movw	r0, r22
    1d70:	b9 01       	movw	r22, r18
    1d72:	90 01       	movw	r18, r0
    1d74:	0c 01       	movw	r0, r24
    1d76:	ca 01       	movw	r24, r20
    1d78:	a0 01       	movw	r20, r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	ff 27       	eor	r31, r31
    1d7e:	59 1b       	sub	r21, r25
    1d80:	99 f0       	breq	.+38     	; 0x1da8 <__addsf3x+0x5c>
    1d82:	59 3f       	cpi	r21, 0xF9	; 249
    1d84:	50 f4       	brcc	.+20     	; 0x1d9a <__addsf3x+0x4e>
    1d86:	50 3e       	cpi	r21, 0xE0	; 224
    1d88:	68 f1       	brcs	.+90     	; 0x1de4 <__addsf3x+0x98>
    1d8a:	1a 16       	cp	r1, r26
    1d8c:	f0 40       	sbci	r31, 0x00	; 0
    1d8e:	a2 2f       	mov	r26, r18
    1d90:	23 2f       	mov	r18, r19
    1d92:	34 2f       	mov	r19, r20
    1d94:	44 27       	eor	r20, r20
    1d96:	58 5f       	subi	r21, 0xF8	; 248
    1d98:	f3 cf       	rjmp	.-26     	; 0x1d80 <__addsf3x+0x34>
    1d9a:	46 95       	lsr	r20
    1d9c:	37 95       	ror	r19
    1d9e:	27 95       	ror	r18
    1da0:	a7 95       	ror	r26
    1da2:	f0 40       	sbci	r31, 0x00	; 0
    1da4:	53 95       	inc	r21
    1da6:	c9 f7       	brne	.-14     	; 0x1d9a <__addsf3x+0x4e>
    1da8:	7e f4       	brtc	.+30     	; 0x1dc8 <__addsf3x+0x7c>
    1daa:	1f 16       	cp	r1, r31
    1dac:	ba 0b       	sbc	r27, r26
    1dae:	62 0b       	sbc	r22, r18
    1db0:	73 0b       	sbc	r23, r19
    1db2:	84 0b       	sbc	r24, r20
    1db4:	ba f0       	brmi	.+46     	; 0x1de4 <__addsf3x+0x98>
    1db6:	91 50       	subi	r25, 0x01	; 1
    1db8:	a1 f0       	breq	.+40     	; 0x1de2 <__addsf3x+0x96>
    1dba:	ff 0f       	add	r31, r31
    1dbc:	bb 1f       	adc	r27, r27
    1dbe:	66 1f       	adc	r22, r22
    1dc0:	77 1f       	adc	r23, r23
    1dc2:	88 1f       	adc	r24, r24
    1dc4:	c2 f7       	brpl	.-16     	; 0x1db6 <__addsf3x+0x6a>
    1dc6:	0e c0       	rjmp	.+28     	; 0x1de4 <__addsf3x+0x98>
    1dc8:	ba 0f       	add	r27, r26
    1dca:	62 1f       	adc	r22, r18
    1dcc:	73 1f       	adc	r23, r19
    1dce:	84 1f       	adc	r24, r20
    1dd0:	48 f4       	brcc	.+18     	; 0x1de4 <__addsf3x+0x98>
    1dd2:	87 95       	ror	r24
    1dd4:	77 95       	ror	r23
    1dd6:	67 95       	ror	r22
    1dd8:	b7 95       	ror	r27
    1dda:	f7 95       	ror	r31
    1ddc:	9e 3f       	cpi	r25, 0xFE	; 254
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <__addsf3x+0x96>
    1de0:	b3 cf       	rjmp	.-154    	; 0x1d48 <__addsf3+0x1e>
    1de2:	93 95       	inc	r25
    1de4:	88 0f       	add	r24, r24
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <__addsf3x+0x9e>
    1de8:	99 27       	eor	r25, r25
    1dea:	ee 0f       	add	r30, r30
    1dec:	97 95       	ror	r25
    1dee:	87 95       	ror	r24
    1df0:	08 95       	ret

00001df2 <atan>:
    1df2:	df 93       	push	r29
    1df4:	dd 27       	eor	r29, r29
    1df6:	b9 2f       	mov	r27, r25
    1df8:	bf 77       	andi	r27, 0x7F	; 127
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	16 16       	cp	r1, r22
    1e00:	17 06       	cpc	r1, r23
    1e02:	48 07       	cpc	r20, r24
    1e04:	5b 07       	cpc	r21, r27
    1e06:	10 f4       	brcc	.+4      	; 0x1e0c <atan+0x1a>
    1e08:	d9 2f       	mov	r29, r25
    1e0a:	cf d1       	rcall	.+926    	; 0x21aa <inverse>
    1e0c:	9f 93       	push	r25
    1e0e:	8f 93       	push	r24
    1e10:	7f 93       	push	r23
    1e12:	6f 93       	push	r22
    1e14:	34 d2       	rcall	.+1128   	; 0x227e <square>
    1e16:	ec e8       	ldi	r30, 0x8C	; 140
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	1d d1       	rcall	.+570    	; 0x2056 <__fp_powser>
    1e1c:	77 d1       	rcall	.+750    	; 0x210c <__fp_round>
    1e1e:	2f 91       	pop	r18
    1e20:	3f 91       	pop	r19
    1e22:	4f 91       	pop	r20
    1e24:	5f 91       	pop	r21
    1e26:	d4 d1       	rcall	.+936    	; 0x21d0 <__mulsf3x>
    1e28:	dd 23       	and	r29, r29
    1e2a:	49 f0       	breq	.+18     	; 0x1e3e <atan+0x4c>
    1e2c:	90 58       	subi	r25, 0x80	; 128
    1e2e:	a2 ea       	ldi	r26, 0xA2	; 162
    1e30:	2a ed       	ldi	r18, 0xDA	; 218
    1e32:	3f e0       	ldi	r19, 0x0F	; 15
    1e34:	49 ec       	ldi	r20, 0xC9	; 201
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	d0 78       	andi	r29, 0x80	; 128
    1e3a:	5d 27       	eor	r21, r29
    1e3c:	87 df       	rcall	.-242    	; 0x1d4c <__addsf3x>
    1e3e:	df 91       	pop	r29
    1e40:	65 c1       	rjmp	.+714    	; 0x210c <__fp_round>

00001e42 <__cmpsf2>:
    1e42:	dc d0       	rcall	.+440    	; 0x1ffc <__fp_cmp>
    1e44:	08 f4       	brcc	.+2      	; 0x1e48 <__cmpsf2+0x6>
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	08 95       	ret

00001e4a <cos>:
    1e4a:	39 d1       	rcall	.+626    	; 0x20be <__fp_rempio2>
    1e4c:	e3 95       	inc	r30
    1e4e:	6f c1       	rjmp	.+734    	; 0x212e <__fp_sinus>

00001e50 <__divsf3>:
    1e50:	0c d0       	rcall	.+24     	; 0x1e6a <__divsf3x>
    1e52:	5c c1       	rjmp	.+696    	; 0x210c <__fp_round>
    1e54:	2c d1       	rcall	.+600    	; 0x20ae <__fp_pscB>
    1e56:	40 f0       	brcs	.+16     	; 0x1e68 <__divsf3+0x18>
    1e58:	23 d1       	rcall	.+582    	; 0x20a0 <__fp_pscA>
    1e5a:	30 f0       	brcs	.+12     	; 0x1e68 <__divsf3+0x18>
    1e5c:	21 f4       	brne	.+8      	; 0x1e66 <__divsf3+0x16>
    1e5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e60:	19 f0       	breq	.+6      	; 0x1e68 <__divsf3+0x18>
    1e62:	f0 c0       	rjmp	.+480    	; 0x2044 <__fp_inf>
    1e64:	51 11       	cpse	r21, r1
    1e66:	97 c1       	rjmp	.+814    	; 0x2196 <__fp_szero>
    1e68:	f3 c0       	rjmp	.+486    	; 0x2050 <__fp_nan>

00001e6a <__divsf3x>:
    1e6a:	72 d1       	rcall	.+740    	; 0x2150 <__fp_split3>
    1e6c:	98 f3       	brcs	.-26     	; 0x1e54 <__divsf3+0x4>

00001e6e <__divsf3_pse>:
    1e6e:	99 23       	and	r25, r25
    1e70:	c9 f3       	breq	.-14     	; 0x1e64 <__divsf3+0x14>
    1e72:	55 23       	and	r21, r21
    1e74:	b1 f3       	breq	.-20     	; 0x1e62 <__divsf3+0x12>
    1e76:	95 1b       	sub	r25, r21
    1e78:	55 0b       	sbc	r21, r21
    1e7a:	bb 27       	eor	r27, r27
    1e7c:	aa 27       	eor	r26, r26
    1e7e:	62 17       	cp	r22, r18
    1e80:	73 07       	cpc	r23, r19
    1e82:	84 07       	cpc	r24, r20
    1e84:	38 f0       	brcs	.+14     	; 0x1e94 <__divsf3_pse+0x26>
    1e86:	9f 5f       	subi	r25, 0xFF	; 255
    1e88:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8a:	22 0f       	add	r18, r18
    1e8c:	33 1f       	adc	r19, r19
    1e8e:	44 1f       	adc	r20, r20
    1e90:	aa 1f       	adc	r26, r26
    1e92:	a9 f3       	breq	.-22     	; 0x1e7e <__divsf3_pse+0x10>
    1e94:	33 d0       	rcall	.+102    	; 0x1efc <__divsf3_pse+0x8e>
    1e96:	0e 2e       	mov	r0, r30
    1e98:	3a f0       	brmi	.+14     	; 0x1ea8 <__divsf3_pse+0x3a>
    1e9a:	e0 e8       	ldi	r30, 0x80	; 128
    1e9c:	30 d0       	rcall	.+96     	; 0x1efe <__divsf3_pse+0x90>
    1e9e:	91 50       	subi	r25, 0x01	; 1
    1ea0:	50 40       	sbci	r21, 0x00	; 0
    1ea2:	e6 95       	lsr	r30
    1ea4:	00 1c       	adc	r0, r0
    1ea6:	ca f7       	brpl	.-14     	; 0x1e9a <__divsf3_pse+0x2c>
    1ea8:	29 d0       	rcall	.+82     	; 0x1efc <__divsf3_pse+0x8e>
    1eaa:	fe 2f       	mov	r31, r30
    1eac:	27 d0       	rcall	.+78     	; 0x1efc <__divsf3_pse+0x8e>
    1eae:	66 0f       	add	r22, r22
    1eb0:	77 1f       	adc	r23, r23
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	bb 1f       	adc	r27, r27
    1eb6:	26 17       	cp	r18, r22
    1eb8:	37 07       	cpc	r19, r23
    1eba:	48 07       	cpc	r20, r24
    1ebc:	ab 07       	cpc	r26, r27
    1ebe:	b0 e8       	ldi	r27, 0x80	; 128
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <__divsf3_pse+0x56>
    1ec2:	bb 0b       	sbc	r27, r27
    1ec4:	80 2d       	mov	r24, r0
    1ec6:	bf 01       	movw	r22, r30
    1ec8:	ff 27       	eor	r31, r31
    1eca:	93 58       	subi	r25, 0x83	; 131
    1ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ece:	2a f0       	brmi	.+10     	; 0x1eda <__divsf3_pse+0x6c>
    1ed0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed2:	51 05       	cpc	r21, r1
    1ed4:	68 f0       	brcs	.+26     	; 0x1ef0 <__divsf3_pse+0x82>
    1ed6:	b6 c0       	rjmp	.+364    	; 0x2044 <__fp_inf>
    1ed8:	5e c1       	rjmp	.+700    	; 0x2196 <__fp_szero>
    1eda:	5f 3f       	cpi	r21, 0xFF	; 255
    1edc:	ec f3       	brlt	.-6      	; 0x1ed8 <__divsf3_pse+0x6a>
    1ede:	98 3e       	cpi	r25, 0xE8	; 232
    1ee0:	dc f3       	brlt	.-10     	; 0x1ed8 <__divsf3_pse+0x6a>
    1ee2:	86 95       	lsr	r24
    1ee4:	77 95       	ror	r23
    1ee6:	67 95       	ror	r22
    1ee8:	b7 95       	ror	r27
    1eea:	f7 95       	ror	r31
    1eec:	9f 5f       	subi	r25, 0xFF	; 255
    1eee:	c9 f7       	brne	.-14     	; 0x1ee2 <__divsf3_pse+0x74>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	91 1d       	adc	r25, r1
    1ef4:	96 95       	lsr	r25
    1ef6:	87 95       	ror	r24
    1ef8:	97 f9       	bld	r25, 7
    1efa:	08 95       	ret
    1efc:	e1 e0       	ldi	r30, 0x01	; 1
    1efe:	66 0f       	add	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	88 1f       	adc	r24, r24
    1f04:	bb 1f       	adc	r27, r27
    1f06:	62 17       	cp	r22, r18
    1f08:	73 07       	cpc	r23, r19
    1f0a:	84 07       	cpc	r24, r20
    1f0c:	ba 07       	cpc	r27, r26
    1f0e:	20 f0       	brcs	.+8      	; 0x1f18 <__divsf3_pse+0xaa>
    1f10:	62 1b       	sub	r22, r18
    1f12:	73 0b       	sbc	r23, r19
    1f14:	84 0b       	sbc	r24, r20
    1f16:	ba 0b       	sbc	r27, r26
    1f18:	ee 1f       	adc	r30, r30
    1f1a:	88 f7       	brcc	.-30     	; 0x1efe <__divsf3_pse+0x90>
    1f1c:	e0 95       	com	r30
    1f1e:	08 95       	ret

00001f20 <__fixsfsi>:
    1f20:	04 d0       	rcall	.+8      	; 0x1f2a <__fixunssfsi>
    1f22:	68 94       	set
    1f24:	b1 11       	cpse	r27, r1
    1f26:	37 c1       	rjmp	.+622    	; 0x2196 <__fp_szero>
    1f28:	08 95       	ret

00001f2a <__fixunssfsi>:
    1f2a:	1a d1       	rcall	.+564    	; 0x2160 <__fp_splitA>
    1f2c:	88 f0       	brcs	.+34     	; 0x1f50 <__fixunssfsi+0x26>
    1f2e:	9f 57       	subi	r25, 0x7F	; 127
    1f30:	90 f0       	brcs	.+36     	; 0x1f56 <__fixunssfsi+0x2c>
    1f32:	b9 2f       	mov	r27, r25
    1f34:	99 27       	eor	r25, r25
    1f36:	b7 51       	subi	r27, 0x17	; 23
    1f38:	a0 f0       	brcs	.+40     	; 0x1f62 <__fixunssfsi+0x38>
    1f3a:	d1 f0       	breq	.+52     	; 0x1f70 <__fixunssfsi+0x46>
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	1a f0       	brmi	.+6      	; 0x1f4c <__fixunssfsi+0x22>
    1f46:	ba 95       	dec	r27
    1f48:	c9 f7       	brne	.-14     	; 0x1f3c <__fixunssfsi+0x12>
    1f4a:	12 c0       	rjmp	.+36     	; 0x1f70 <__fixunssfsi+0x46>
    1f4c:	b1 30       	cpi	r27, 0x01	; 1
    1f4e:	81 f0       	breq	.+32     	; 0x1f70 <__fixunssfsi+0x46>
    1f50:	21 d1       	rcall	.+578    	; 0x2194 <__fp_zero>
    1f52:	b1 e0       	ldi	r27, 0x01	; 1
    1f54:	08 95       	ret
    1f56:	1e c1       	rjmp	.+572    	; 0x2194 <__fp_zero>
    1f58:	67 2f       	mov	r22, r23
    1f5a:	78 2f       	mov	r23, r24
    1f5c:	88 27       	eor	r24, r24
    1f5e:	b8 5f       	subi	r27, 0xF8	; 248
    1f60:	39 f0       	breq	.+14     	; 0x1f70 <__fixunssfsi+0x46>
    1f62:	b9 3f       	cpi	r27, 0xF9	; 249
    1f64:	cc f3       	brlt	.-14     	; 0x1f58 <__fixunssfsi+0x2e>
    1f66:	86 95       	lsr	r24
    1f68:	77 95       	ror	r23
    1f6a:	67 95       	ror	r22
    1f6c:	b3 95       	inc	r27
    1f6e:	d9 f7       	brne	.-10     	; 0x1f66 <__fixunssfsi+0x3c>
    1f70:	3e f4       	brtc	.+14     	; 0x1f80 <__fixunssfsi+0x56>
    1f72:	90 95       	com	r25
    1f74:	80 95       	com	r24
    1f76:	70 95       	com	r23
    1f78:	61 95       	neg	r22
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	08 95       	ret

00001f82 <__floatunsisf>:
    1f82:	e8 94       	clt
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <__floatsisf+0x12>

00001f86 <__floatsisf>:
    1f86:	97 fb       	bst	r25, 7
    1f88:	3e f4       	brtc	.+14     	; 0x1f98 <__floatsisf+0x12>
    1f8a:	90 95       	com	r25
    1f8c:	80 95       	com	r24
    1f8e:	70 95       	com	r23
    1f90:	61 95       	neg	r22
    1f92:	7f 4f       	sbci	r23, 0xFF	; 255
    1f94:	8f 4f       	sbci	r24, 0xFF	; 255
    1f96:	9f 4f       	sbci	r25, 0xFF	; 255
    1f98:	99 23       	and	r25, r25
    1f9a:	a9 f0       	breq	.+42     	; 0x1fc6 <__floatsisf+0x40>
    1f9c:	f9 2f       	mov	r31, r25
    1f9e:	96 e9       	ldi	r25, 0x96	; 150
    1fa0:	bb 27       	eor	r27, r27
    1fa2:	93 95       	inc	r25
    1fa4:	f6 95       	lsr	r31
    1fa6:	87 95       	ror	r24
    1fa8:	77 95       	ror	r23
    1faa:	67 95       	ror	r22
    1fac:	b7 95       	ror	r27
    1fae:	f1 11       	cpse	r31, r1
    1fb0:	f8 cf       	rjmp	.-16     	; 0x1fa2 <__floatsisf+0x1c>
    1fb2:	fa f4       	brpl	.+62     	; 0x1ff2 <__floatsisf+0x6c>
    1fb4:	bb 0f       	add	r27, r27
    1fb6:	11 f4       	brne	.+4      	; 0x1fbc <__floatsisf+0x36>
    1fb8:	60 ff       	sbrs	r22, 0
    1fba:	1b c0       	rjmp	.+54     	; 0x1ff2 <__floatsisf+0x6c>
    1fbc:	6f 5f       	subi	r22, 0xFF	; 255
    1fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc4:	16 c0       	rjmp	.+44     	; 0x1ff2 <__floatsisf+0x6c>
    1fc6:	88 23       	and	r24, r24
    1fc8:	11 f0       	breq	.+4      	; 0x1fce <__floatsisf+0x48>
    1fca:	96 e9       	ldi	r25, 0x96	; 150
    1fcc:	11 c0       	rjmp	.+34     	; 0x1ff0 <__floatsisf+0x6a>
    1fce:	77 23       	and	r23, r23
    1fd0:	21 f0       	breq	.+8      	; 0x1fda <__floatsisf+0x54>
    1fd2:	9e e8       	ldi	r25, 0x8E	; 142
    1fd4:	87 2f       	mov	r24, r23
    1fd6:	76 2f       	mov	r23, r22
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <__floatsisf+0x5e>
    1fda:	66 23       	and	r22, r22
    1fdc:	71 f0       	breq	.+28     	; 0x1ffa <__floatsisf+0x74>
    1fde:	96 e8       	ldi	r25, 0x86	; 134
    1fe0:	86 2f       	mov	r24, r22
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	2a f0       	brmi	.+10     	; 0x1ff2 <__floatsisf+0x6c>
    1fe8:	9a 95       	dec	r25
    1fea:	66 0f       	add	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	88 1f       	adc	r24, r24
    1ff0:	da f7       	brpl	.-10     	; 0x1fe8 <__floatsisf+0x62>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	96 95       	lsr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	97 f9       	bld	r25, 7
    1ffa:	08 95       	ret

00001ffc <__fp_cmp>:
    1ffc:	99 0f       	add	r25, r25
    1ffe:	00 08       	sbc	r0, r0
    2000:	55 0f       	add	r21, r21
    2002:	aa 0b       	sbc	r26, r26
    2004:	e0 e8       	ldi	r30, 0x80	; 128
    2006:	fe ef       	ldi	r31, 0xFE	; 254
    2008:	16 16       	cp	r1, r22
    200a:	17 06       	cpc	r1, r23
    200c:	e8 07       	cpc	r30, r24
    200e:	f9 07       	cpc	r31, r25
    2010:	c0 f0       	brcs	.+48     	; 0x2042 <__fp_cmp+0x46>
    2012:	12 16       	cp	r1, r18
    2014:	13 06       	cpc	r1, r19
    2016:	e4 07       	cpc	r30, r20
    2018:	f5 07       	cpc	r31, r21
    201a:	98 f0       	brcs	.+38     	; 0x2042 <__fp_cmp+0x46>
    201c:	62 1b       	sub	r22, r18
    201e:	73 0b       	sbc	r23, r19
    2020:	84 0b       	sbc	r24, r20
    2022:	95 0b       	sbc	r25, r21
    2024:	39 f4       	brne	.+14     	; 0x2034 <__fp_cmp+0x38>
    2026:	0a 26       	eor	r0, r26
    2028:	61 f0       	breq	.+24     	; 0x2042 <__fp_cmp+0x46>
    202a:	23 2b       	or	r18, r19
    202c:	24 2b       	or	r18, r20
    202e:	25 2b       	or	r18, r21
    2030:	21 f4       	brne	.+8      	; 0x203a <__fp_cmp+0x3e>
    2032:	08 95       	ret
    2034:	0a 26       	eor	r0, r26
    2036:	09 f4       	brne	.+2      	; 0x203a <__fp_cmp+0x3e>
    2038:	a1 40       	sbci	r26, 0x01	; 1
    203a:	a6 95       	lsr	r26
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	81 1d       	adc	r24, r1
    2040:	81 1d       	adc	r24, r1
    2042:	08 95       	ret

00002044 <__fp_inf>:
    2044:	97 f9       	bld	r25, 7
    2046:	9f 67       	ori	r25, 0x7F	; 127
    2048:	80 e8       	ldi	r24, 0x80	; 128
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	60 e0       	ldi	r22, 0x00	; 0
    204e:	08 95       	ret

00002050 <__fp_nan>:
    2050:	9f ef       	ldi	r25, 0xFF	; 255
    2052:	80 ec       	ldi	r24, 0xC0	; 192
    2054:	08 95       	ret

00002056 <__fp_powser>:
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	1f 93       	push	r17
    205c:	0f 93       	push	r16
    205e:	ff 92       	push	r15
    2060:	ef 92       	push	r14
    2062:	df 92       	push	r13
    2064:	7b 01       	movw	r14, r22
    2066:	8c 01       	movw	r16, r24
    2068:	68 94       	set
    206a:	05 c0       	rjmp	.+10     	; 0x2076 <__fp_powser+0x20>
    206c:	da 2e       	mov	r13, r26
    206e:	ef 01       	movw	r28, r30
    2070:	af d0       	rcall	.+350    	; 0x21d0 <__mulsf3x>
    2072:	fe 01       	movw	r30, r28
    2074:	e8 94       	clt
    2076:	a5 91       	lpm	r26, Z+
    2078:	25 91       	lpm	r18, Z+
    207a:	35 91       	lpm	r19, Z+
    207c:	45 91       	lpm	r20, Z+
    207e:	55 91       	lpm	r21, Z+
    2080:	ae f3       	brts	.-22     	; 0x206c <__fp_powser+0x16>
    2082:	ef 01       	movw	r28, r30
    2084:	63 de       	rcall	.-826    	; 0x1d4c <__addsf3x>
    2086:	fe 01       	movw	r30, r28
    2088:	97 01       	movw	r18, r14
    208a:	a8 01       	movw	r20, r16
    208c:	da 94       	dec	r13
    208e:	79 f7       	brne	.-34     	; 0x206e <__fp_powser+0x18>
    2090:	df 90       	pop	r13
    2092:	ef 90       	pop	r14
    2094:	ff 90       	pop	r15
    2096:	0f 91       	pop	r16
    2098:	1f 91       	pop	r17
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <__fp_pscA>:
    20a0:	00 24       	eor	r0, r0
    20a2:	0a 94       	dec	r0
    20a4:	16 16       	cp	r1, r22
    20a6:	17 06       	cpc	r1, r23
    20a8:	18 06       	cpc	r1, r24
    20aa:	09 06       	cpc	r0, r25
    20ac:	08 95       	ret

000020ae <__fp_pscB>:
    20ae:	00 24       	eor	r0, r0
    20b0:	0a 94       	dec	r0
    20b2:	12 16       	cp	r1, r18
    20b4:	13 06       	cpc	r1, r19
    20b6:	14 06       	cpc	r1, r20
    20b8:	05 06       	cpc	r0, r21
    20ba:	08 95       	ret
    20bc:	c9 cf       	rjmp	.-110    	; 0x2050 <__fp_nan>

000020be <__fp_rempio2>:
    20be:	50 d0       	rcall	.+160    	; 0x2160 <__fp_splitA>
    20c0:	e8 f3       	brcs	.-6      	; 0x20bc <__fp_pscB+0xe>
    20c2:	e8 94       	clt
    20c4:	e0 e0       	ldi	r30, 0x00	; 0
    20c6:	bb 27       	eor	r27, r27
    20c8:	9f 57       	subi	r25, 0x7F	; 127
    20ca:	f0 f0       	brcs	.+60     	; 0x2108 <__fp_rempio2+0x4a>
    20cc:	2a ed       	ldi	r18, 0xDA	; 218
    20ce:	3f e0       	ldi	r19, 0x0F	; 15
    20d0:	49 ec       	ldi	r20, 0xC9	; 201
    20d2:	06 c0       	rjmp	.+12     	; 0x20e0 <__fp_rempio2+0x22>
    20d4:	ee 0f       	add	r30, r30
    20d6:	bb 0f       	add	r27, r27
    20d8:	66 1f       	adc	r22, r22
    20da:	77 1f       	adc	r23, r23
    20dc:	88 1f       	adc	r24, r24
    20de:	28 f0       	brcs	.+10     	; 0x20ea <__fp_rempio2+0x2c>
    20e0:	b2 3a       	cpi	r27, 0xA2	; 162
    20e2:	62 07       	cpc	r22, r18
    20e4:	73 07       	cpc	r23, r19
    20e6:	84 07       	cpc	r24, r20
    20e8:	28 f0       	brcs	.+10     	; 0x20f4 <__fp_rempio2+0x36>
    20ea:	b2 5a       	subi	r27, 0xA2	; 162
    20ec:	62 0b       	sbc	r22, r18
    20ee:	73 0b       	sbc	r23, r19
    20f0:	84 0b       	sbc	r24, r20
    20f2:	e3 95       	inc	r30
    20f4:	9a 95       	dec	r25
    20f6:	72 f7       	brpl	.-36     	; 0x20d4 <__fp_rempio2+0x16>
    20f8:	80 38       	cpi	r24, 0x80	; 128
    20fa:	30 f4       	brcc	.+12     	; 0x2108 <__fp_rempio2+0x4a>
    20fc:	9a 95       	dec	r25
    20fe:	bb 0f       	add	r27, r27
    2100:	66 1f       	adc	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	d2 f7       	brpl	.-12     	; 0x20fc <__fp_rempio2+0x3e>
    2108:	90 48       	sbci	r25, 0x80	; 128
    210a:	be c0       	rjmp	.+380    	; 0x2288 <__fp_mpack_finite>

0000210c <__fp_round>:
    210c:	09 2e       	mov	r0, r25
    210e:	03 94       	inc	r0
    2110:	00 0c       	add	r0, r0
    2112:	11 f4       	brne	.+4      	; 0x2118 <__fp_round+0xc>
    2114:	88 23       	and	r24, r24
    2116:	52 f0       	brmi	.+20     	; 0x212c <__fp_round+0x20>
    2118:	bb 0f       	add	r27, r27
    211a:	40 f4       	brcc	.+16     	; 0x212c <__fp_round+0x20>
    211c:	bf 2b       	or	r27, r31
    211e:	11 f4       	brne	.+4      	; 0x2124 <__fp_round+0x18>
    2120:	60 ff       	sbrs	r22, 0
    2122:	04 c0       	rjmp	.+8      	; 0x212c <__fp_round+0x20>
    2124:	6f 5f       	subi	r22, 0xFF	; 255
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	8f 4f       	sbci	r24, 0xFF	; 255
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	08 95       	ret

0000212e <__fp_sinus>:
    212e:	ef 93       	push	r30
    2130:	e0 ff       	sbrs	r30, 0
    2132:	06 c0       	rjmp	.+12     	; 0x2140 <__fp_sinus+0x12>
    2134:	a2 ea       	ldi	r26, 0xA2	; 162
    2136:	2a ed       	ldi	r18, 0xDA	; 218
    2138:	3f e0       	ldi	r19, 0x0F	; 15
    213a:	49 ec       	ldi	r20, 0xC9	; 201
    213c:	5f eb       	ldi	r21, 0xBF	; 191
    213e:	06 de       	rcall	.-1012   	; 0x1d4c <__addsf3x>
    2140:	e5 df       	rcall	.-54     	; 0x210c <__fp_round>
    2142:	0f 90       	pop	r0
    2144:	03 94       	inc	r0
    2146:	01 fc       	sbrc	r0, 1
    2148:	90 58       	subi	r25, 0x80	; 128
    214a:	e9 eb       	ldi	r30, 0xB9	; 185
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	a8 c0       	rjmp	.+336    	; 0x22a0 <__fp_powsodd>

00002150 <__fp_split3>:
    2150:	57 fd       	sbrc	r21, 7
    2152:	90 58       	subi	r25, 0x80	; 128
    2154:	44 0f       	add	r20, r20
    2156:	55 1f       	adc	r21, r21
    2158:	59 f0       	breq	.+22     	; 0x2170 <__fp_splitA+0x10>
    215a:	5f 3f       	cpi	r21, 0xFF	; 255
    215c:	71 f0       	breq	.+28     	; 0x217a <__fp_splitA+0x1a>
    215e:	47 95       	ror	r20

00002160 <__fp_splitA>:
    2160:	88 0f       	add	r24, r24
    2162:	97 fb       	bst	r25, 7
    2164:	99 1f       	adc	r25, r25
    2166:	61 f0       	breq	.+24     	; 0x2180 <__fp_splitA+0x20>
    2168:	9f 3f       	cpi	r25, 0xFF	; 255
    216a:	79 f0       	breq	.+30     	; 0x218a <__fp_splitA+0x2a>
    216c:	87 95       	ror	r24
    216e:	08 95       	ret
    2170:	12 16       	cp	r1, r18
    2172:	13 06       	cpc	r1, r19
    2174:	14 06       	cpc	r1, r20
    2176:	55 1f       	adc	r21, r21
    2178:	f2 cf       	rjmp	.-28     	; 0x215e <__fp_split3+0xe>
    217a:	46 95       	lsr	r20
    217c:	f1 df       	rcall	.-30     	; 0x2160 <__fp_splitA>
    217e:	08 c0       	rjmp	.+16     	; 0x2190 <__fp_splitA+0x30>
    2180:	16 16       	cp	r1, r22
    2182:	17 06       	cpc	r1, r23
    2184:	18 06       	cpc	r1, r24
    2186:	99 1f       	adc	r25, r25
    2188:	f1 cf       	rjmp	.-30     	; 0x216c <__fp_splitA+0xc>
    218a:	86 95       	lsr	r24
    218c:	71 05       	cpc	r23, r1
    218e:	61 05       	cpc	r22, r1
    2190:	08 94       	sec
    2192:	08 95       	ret

00002194 <__fp_zero>:
    2194:	e8 94       	clt

00002196 <__fp_szero>:
    2196:	bb 27       	eor	r27, r27
    2198:	66 27       	eor	r22, r22
    219a:	77 27       	eor	r23, r23
    219c:	cb 01       	movw	r24, r22
    219e:	97 f9       	bld	r25, 7
    21a0:	08 95       	ret

000021a2 <__gesf2>:
    21a2:	2c df       	rcall	.-424    	; 0x1ffc <__fp_cmp>
    21a4:	08 f4       	brcc	.+2      	; 0x21a8 <__gesf2+0x6>
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	08 95       	ret

000021aa <inverse>:
    21aa:	9b 01       	movw	r18, r22
    21ac:	ac 01       	movw	r20, r24
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	80 e8       	ldi	r24, 0x80	; 128
    21b4:	9f e3       	ldi	r25, 0x3F	; 63
    21b6:	4c ce       	rjmp	.-872    	; 0x1e50 <__divsf3>

000021b8 <__mulsf3>:
    21b8:	0b d0       	rcall	.+22     	; 0x21d0 <__mulsf3x>
    21ba:	a8 cf       	rjmp	.-176    	; 0x210c <__fp_round>
    21bc:	71 df       	rcall	.-286    	; 0x20a0 <__fp_pscA>
    21be:	28 f0       	brcs	.+10     	; 0x21ca <__mulsf3+0x12>
    21c0:	76 df       	rcall	.-276    	; 0x20ae <__fp_pscB>
    21c2:	18 f0       	brcs	.+6      	; 0x21ca <__mulsf3+0x12>
    21c4:	95 23       	and	r25, r21
    21c6:	09 f0       	breq	.+2      	; 0x21ca <__mulsf3+0x12>
    21c8:	3d cf       	rjmp	.-390    	; 0x2044 <__fp_inf>
    21ca:	42 cf       	rjmp	.-380    	; 0x2050 <__fp_nan>
    21cc:	11 24       	eor	r1, r1
    21ce:	e3 cf       	rjmp	.-58     	; 0x2196 <__fp_szero>

000021d0 <__mulsf3x>:
    21d0:	bf df       	rcall	.-130    	; 0x2150 <__fp_split3>
    21d2:	a0 f3       	brcs	.-24     	; 0x21bc <__mulsf3+0x4>

000021d4 <__mulsf3_pse>:
    21d4:	95 9f       	mul	r25, r21
    21d6:	d1 f3       	breq	.-12     	; 0x21cc <__mulsf3+0x14>
    21d8:	95 0f       	add	r25, r21
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	55 1f       	adc	r21, r21
    21de:	62 9f       	mul	r22, r18
    21e0:	f0 01       	movw	r30, r0
    21e2:	72 9f       	mul	r23, r18
    21e4:	bb 27       	eor	r27, r27
    21e6:	f0 0d       	add	r31, r0
    21e8:	b1 1d       	adc	r27, r1
    21ea:	63 9f       	mul	r22, r19
    21ec:	aa 27       	eor	r26, r26
    21ee:	f0 0d       	add	r31, r0
    21f0:	b1 1d       	adc	r27, r1
    21f2:	aa 1f       	adc	r26, r26
    21f4:	64 9f       	mul	r22, r20
    21f6:	66 27       	eor	r22, r22
    21f8:	b0 0d       	add	r27, r0
    21fa:	a1 1d       	adc	r26, r1
    21fc:	66 1f       	adc	r22, r22
    21fe:	82 9f       	mul	r24, r18
    2200:	22 27       	eor	r18, r18
    2202:	b0 0d       	add	r27, r0
    2204:	a1 1d       	adc	r26, r1
    2206:	62 1f       	adc	r22, r18
    2208:	73 9f       	mul	r23, r19
    220a:	b0 0d       	add	r27, r0
    220c:	a1 1d       	adc	r26, r1
    220e:	62 1f       	adc	r22, r18
    2210:	83 9f       	mul	r24, r19
    2212:	a0 0d       	add	r26, r0
    2214:	61 1d       	adc	r22, r1
    2216:	22 1f       	adc	r18, r18
    2218:	74 9f       	mul	r23, r20
    221a:	33 27       	eor	r19, r19
    221c:	a0 0d       	add	r26, r0
    221e:	61 1d       	adc	r22, r1
    2220:	23 1f       	adc	r18, r19
    2222:	84 9f       	mul	r24, r20
    2224:	60 0d       	add	r22, r0
    2226:	21 1d       	adc	r18, r1
    2228:	82 2f       	mov	r24, r18
    222a:	76 2f       	mov	r23, r22
    222c:	6a 2f       	mov	r22, r26
    222e:	11 24       	eor	r1, r1
    2230:	9f 57       	subi	r25, 0x7F	; 127
    2232:	50 40       	sbci	r21, 0x00	; 0
    2234:	8a f0       	brmi	.+34     	; 0x2258 <__mulsf3_pse+0x84>
    2236:	e1 f0       	breq	.+56     	; 0x2270 <__mulsf3_pse+0x9c>
    2238:	88 23       	and	r24, r24
    223a:	4a f0       	brmi	.+18     	; 0x224e <__mulsf3_pse+0x7a>
    223c:	ee 0f       	add	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	bb 1f       	adc	r27, r27
    2242:	66 1f       	adc	r22, r22
    2244:	77 1f       	adc	r23, r23
    2246:	88 1f       	adc	r24, r24
    2248:	91 50       	subi	r25, 0x01	; 1
    224a:	50 40       	sbci	r21, 0x00	; 0
    224c:	a9 f7       	brne	.-22     	; 0x2238 <__mulsf3_pse+0x64>
    224e:	9e 3f       	cpi	r25, 0xFE	; 254
    2250:	51 05       	cpc	r21, r1
    2252:	70 f0       	brcs	.+28     	; 0x2270 <__mulsf3_pse+0x9c>
    2254:	f7 ce       	rjmp	.-530    	; 0x2044 <__fp_inf>
    2256:	9f cf       	rjmp	.-194    	; 0x2196 <__fp_szero>
    2258:	5f 3f       	cpi	r21, 0xFF	; 255
    225a:	ec f3       	brlt	.-6      	; 0x2256 <__mulsf3_pse+0x82>
    225c:	98 3e       	cpi	r25, 0xE8	; 232
    225e:	dc f3       	brlt	.-10     	; 0x2256 <__mulsf3_pse+0x82>
    2260:	86 95       	lsr	r24
    2262:	77 95       	ror	r23
    2264:	67 95       	ror	r22
    2266:	b7 95       	ror	r27
    2268:	f7 95       	ror	r31
    226a:	e7 95       	ror	r30
    226c:	9f 5f       	subi	r25, 0xFF	; 255
    226e:	c1 f7       	brne	.-16     	; 0x2260 <__mulsf3_pse+0x8c>
    2270:	fe 2b       	or	r31, r30
    2272:	88 0f       	add	r24, r24
    2274:	91 1d       	adc	r25, r1
    2276:	96 95       	lsr	r25
    2278:	87 95       	ror	r24
    227a:	97 f9       	bld	r25, 7
    227c:	08 95       	ret

0000227e <square>:
    227e:	9b 01       	movw	r18, r22
    2280:	ac 01       	movw	r20, r24
    2282:	9a cf       	rjmp	.-204    	; 0x21b8 <__mulsf3>

00002284 <__fp_mpack>:
    2284:	9f 3f       	cpi	r25, 0xFF	; 255
    2286:	31 f0       	breq	.+12     	; 0x2294 <__fp_mpack_finite+0xc>

00002288 <__fp_mpack_finite>:
    2288:	91 50       	subi	r25, 0x01	; 1
    228a:	20 f4       	brcc	.+8      	; 0x2294 <__fp_mpack_finite+0xc>
    228c:	87 95       	ror	r24
    228e:	77 95       	ror	r23
    2290:	67 95       	ror	r22
    2292:	b7 95       	ror	r27
    2294:	88 0f       	add	r24, r24
    2296:	91 1d       	adc	r25, r1
    2298:	96 95       	lsr	r25
    229a:	87 95       	ror	r24
    229c:	97 f9       	bld	r25, 7
    229e:	08 95       	ret

000022a0 <__fp_powsodd>:
    22a0:	9f 93       	push	r25
    22a2:	8f 93       	push	r24
    22a4:	7f 93       	push	r23
    22a6:	6f 93       	push	r22
    22a8:	ff 93       	push	r31
    22aa:	ef 93       	push	r30
    22ac:	9b 01       	movw	r18, r22
    22ae:	ac 01       	movw	r20, r24
    22b0:	83 df       	rcall	.-250    	; 0x21b8 <__mulsf3>
    22b2:	ef 91       	pop	r30
    22b4:	ff 91       	pop	r31
    22b6:	cf de       	rcall	.-610    	; 0x2056 <__fp_powser>
    22b8:	2f 91       	pop	r18
    22ba:	3f 91       	pop	r19
    22bc:	4f 91       	pop	r20
    22be:	5f 91       	pop	r21
    22c0:	7b cf       	rjmp	.-266    	; 0x21b8 <__mulsf3>

000022c2 <_exit>:
    22c2:	f8 94       	cli

000022c4 <__stop_program>:
    22c4:	ff cf       	rjmp	.-2      	; 0x22c4 <__stop_program>
