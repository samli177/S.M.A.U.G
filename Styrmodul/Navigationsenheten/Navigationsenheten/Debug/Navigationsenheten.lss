
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001296  00800100  0000238e  00002422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000238e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000683  00801396  00801396  000036b8  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  00006520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007268  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000418  00000000  00000000  00007297  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d92  00000000  00000000  000076af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fe3  00000000  00000000  0000b441  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002647  00000000  00000000  0000c424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c8c  00000000  00000000  0000ea6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000de9  00000000  00000000  0000f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000262a  00000000  00000000  000104e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000470  00000000  00000000  00012b0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	f5 c5       	rjmp	.+3050   	; 0xbf0 <__vector_1>
       6:	00 00       	nop
       8:	1d c6       	rjmp	.+3130   	; 0xc44 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	e1 c6       	rjmp	.+3522   	; 0xdd4 <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c6       	rjmp	.+3332   	; 0xd3a <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6a c6       	rjmp	.+3284   	; 0xd56 <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	ee e8       	ldi	r30, 0x8E	; 142
      ec:	f3 e2       	ldi	r31, 0x23	; 35
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a6 39       	cpi	r26, 0x96	; 150
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	2a e1       	ldi	r18, 0x1A	; 26
     100:	a6 e9       	ldi	r26, 0x96	; 150
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a9 31       	cpi	r26, 0x19	; 25
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	c4 d5       	rcall	.+2952   	; 0xc98 <main>
     110:	0c 94 c5 11 	jmp	0x238a	; 0x238a <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
	}
}

void turn_around()
{
	if(gStatus)
     116:	80 91 00 01 	lds	r24, 0x0100
     11a:	88 23       	and	r24, r24
     11c:	21 f0       	breq	.+8      	; 0x126 <turn_around+0x10>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     11e:	6c e1       	ldi	r22, 0x1C	; 28
     120:	71 e1       	ldi	r23, 0x11	; 17
     122:	80 e8       	ldi	r24, 0x80	; 128
     124:	cc d7       	rcall	.+3992   	; 0x10be <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(180, 0);
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	84 eb       	ldi	r24, 0xB4	; 180
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <USART_send_turn>
	while(USART_turn_done() == 0)
     130:	08 c0       	rjmp	.+16     	; 0x142 <turn_around+0x2c>
	{
		USART_decode_rx_fifo();
     132:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <USART_decode_rx_fifo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     136:	8f e3       	ldi	r24, 0x3F	; 63
     138:	9c e9       	ldi	r25, 0x9C	; 156
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <turn_around+0x24>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <turn_around+0x2a>
     140:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(180, 0);
	while(USART_turn_done() == 0)
     142:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <USART_turn_done>
     146:	88 23       	and	r24, r24
     148:	a1 f3       	breq	.-24     	; 0x132 <turn_around+0x1c>
	{
		USART_decode_rx_fifo();
		_delay_ms(10);
	}
	
	if(gStatus)
     14a:	80 91 00 01 	lds	r24, 0x0100
     14e:	88 23       	and	r24, r24
     150:	21 f0       	breq	.+8      	; 0x15a <turn_around+0x44>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     152:	65 e3       	ldi	r22, 0x35	; 53
     154:	71 e1       	ldi	r23, 0x11	; 17
     156:	80 e8       	ldi	r24, 0x80	; 128
     158:	b2 c7       	rjmp	.+3940   	; 0x10be <TWI_send_string>
     15a:	08 95       	ret

0000015c <walk_forward>:
	}
}

void walk_forward()
{
     15c:	8f 92       	push	r8
     15e:	9f 92       	push	r9
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	cf 92       	push	r12
     166:	df 92       	push	r13
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     170:	45 d4       	rcall	.+2186   	; 0x9fc <navigation_angle_offset>
     172:	6b 01       	movw	r12, r22
     174:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     176:	a6 d2       	rcall	.+1356   	; 0x6c4 <navigation_direction_regulation>
     178:	4b 01       	movw	r8, r22
     17a:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	48 e4       	ldi	r20, 0x48	; 72
     182:	52 e4       	ldi	r21, 0x42	; 66
     184:	c7 01       	movw	r24, r14
     186:	b6 01       	movw	r22, r12
     188:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     18c:	9b 01       	movw	r18, r22
     18e:	ac 01       	movw	r20, r24
     190:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__addsf3>
     194:	2b ed       	ldi	r18, 0xDB	; 219
     196:	3f e0       	ldi	r19, 0x0F	; 15
     198:	49 e4       	ldi	r20, 0x49	; 73
     19a:	50 e4       	ldi	r21, 0x40	; 64
     19c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	4c e4       	ldi	r20, 0x4C	; 76
     1a6:	52 e4       	ldi	r21, 0x42	; 66
     1a8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__addsf3>
     1ac:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1b0:	64 36       	cpi	r22, 0x64	; 100
     1b2:	71 05       	cpc	r23, r1
     1b4:	34 f4       	brge	.+12     	; 0x1c2 <walk_forward+0x66>
     1b6:	eb 01       	movw	r28, r22
     1b8:	dd 23       	and	r29, r29
     1ba:	2c f4       	brge	.+10     	; 0x1c6 <walk_forward+0x6a>
     1bc:	c0 e0       	ldi	r28, 0x00	; 0
     1be:	d0 e0       	ldi	r29, 0x00	; 0
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1c2:	c4 e6       	ldi	r28, 0x64	; 100
     1c4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	44 eb       	ldi	r20, 0xB4	; 180
     1cc:	52 e4       	ldi	r21, 0x42	; 66
     1ce:	c5 01       	movw	r24, r10
     1d0:	b4 01       	movw	r22, r8
     1d2:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     1d6:	2b ed       	ldi	r18, 0xDB	; 219
     1d8:	3f e0       	ldi	r19, 0x0F	; 15
     1da:	49 ec       	ldi	r20, 0xC9	; 201
     1dc:	50 e4       	ldi	r21, 0x40	; 64
     1de:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
     1e2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixsfsi>
     1e6:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1e8:	40 91 01 01 	lds	r20, 0x0101
     1ec:	6c 2f       	mov	r22, r28
     1ee:	82 2f       	mov	r24, r18
     1f0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1f4:	8e d1       	rcall	.+796    	; 0x512 <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	bf 90       	pop	r11
     204:	af 90       	pop	r10
     206:	9f 90       	pop	r9
     208:	8f 90       	pop	r8
     20a:	08 95       	ret

0000020c <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
	if(gStatus)
     210:	80 91 00 01 	lds	r24, 0x0100
     214:	88 23       	and	r24, r24
     216:	21 f0       	breq	.+8      	; 0x220 <turn_right+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     218:	6a e5       	ldi	r22, 0x5A	; 90
     21a:	71 e1       	ldi	r23, 0x11	; 17
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	4f d7       	rcall	.+3742   	; 0x10be <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(90, 1);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	8a e5       	ldi	r24, 0x5A	; 90
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 1a 0c 	call	0x1834	; 0x1834 <USART_send_turn>
	while(USART_turn_done() == 0)
     22a:	08 c0       	rjmp	.+16     	; 0x23c <turn_right+0x30>
	{
		USART_decode_rx_fifo();
     22c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <USART_decode_rx_fifo>
     230:	8f e3       	ldi	r24, 0x3F	; 63
     232:	9c e9       	ldi	r25, 0x9C	; 156
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <turn_right+0x28>
     238:	00 c0       	rjmp	.+0      	; 0x23a <turn_right+0x2e>
     23a:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(90, 1);
	while(USART_turn_done() == 0)
     23c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <USART_turn_done>
     240:	88 23       	and	r24, r24
     242:	a1 f3       	breq	.-24     	; 0x22c <turn_right+0x20>
     244:	cc e0       	ldi	r28, 0x0C	; 12
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	03 c0       	rjmp	.+6      	; 0x250 <turn_right+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     24a:	88 df       	rcall	.-240    	; 0x15c <walk_forward>
     24c:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_decode_rx_fifo();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
     24e:	19 f0       	breq	.+6      	; 0x256 <turn_right+0x4a>
     250:	5a d1       	rcall	.+692    	; 0x506 <navigation_autonomous_walk>
     252:	81 11       	cpse	r24, r1
     254:	fa cf       	rjmp	.-12     	; 0x24a <turn_right+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     256:	80 91 00 01 	lds	r24, 0x0100
     25a:	88 23       	and	r24, r24
     25c:	21 f0       	breq	.+8      	; 0x266 <turn_right+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     25e:	62 e7       	ldi	r22, 0x72	; 114
     260:	71 e1       	ldi	r23, 0x11	; 17
     262:	80 e8       	ldi	r24, 0x80	; 128
     264:	2c d7       	rcall	.+3672   	; 0x10be <TWI_send_string>
	}
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
	if(gStatus)
     270:	80 91 00 01 	lds	r24, 0x0100
     274:	88 23       	and	r24, r24
     276:	21 f0       	breq	.+8      	; 0x280 <turn_left+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     278:	66 e8       	ldi	r22, 0x86	; 134
     27a:	71 e1       	ldi	r23, 0x11	; 17
     27c:	80 e8       	ldi	r24, 0x80	; 128
     27e:	1f d7       	rcall	.+3646   	; 0x10be <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(90, 0);
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	8a e5       	ldi	r24, 0x5A	; 90
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 1a 0c 	call	0x1834	; 0x1834 <USART_send_turn>
	while(USART_turn_done() == 0)
     28a:	08 c0       	rjmp	.+16     	; 0x29c <turn_left+0x30>
	{
		USART_decode_rx_fifo();
     28c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <USART_decode_rx_fifo>
     290:	8f e3       	ldi	r24, 0x3F	; 63
     292:	9c e9       	ldi	r25, 0x9C	; 156
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <turn_left+0x28>
     298:	00 c0       	rjmp	.+0      	; 0x29a <turn_left+0x2e>
     29a:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(90, 0);
	while(USART_turn_done() == 0)
     29c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <USART_turn_done>
     2a0:	88 23       	and	r24, r24
     2a2:	a1 f3       	breq	.-24     	; 0x28c <turn_left+0x20>
     2a4:	cc e0       	ldi	r28, 0x0C	; 12
     2a6:	d0 e0       	ldi	r29, 0x00	; 0
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <turn_left+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     2aa:	58 df       	rcall	.-336    	; 0x15c <walk_forward>
     2ac:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_decode_rx_fifo();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
     2ae:	19 f0       	breq	.+6      	; 0x2b6 <turn_left+0x4a>
     2b0:	2a d1       	rcall	.+596    	; 0x506 <navigation_autonomous_walk>
     2b2:	81 11       	cpse	r24, r1
     2b4:	fa cf       	rjmp	.-12     	; 0x2aa <turn_left+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     2b6:	80 91 00 01 	lds	r24, 0x0100
     2ba:	88 23       	and	r24, r24
     2bc:	21 f0       	breq	.+8      	; 0x2c6 <turn_left+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2be:	6d e9       	ldi	r22, 0x9D	; 157
     2c0:	71 e1       	ldi	r23, 0x11	; 17
     2c2:	80 e8       	ldi	r24, 0x80	; 128
     2c4:	fc d6       	rcall	.+3576   	; 0x10be <TWI_send_string>
	}
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <autonomouswalk_walk>:
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
     2cc:	ab d1       	rcall	.+854    	; 0x624 <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     2ce:	15 d1       	rcall	.+554    	; 0x4fa <navigation_left_algorithm>
     2d0:	88 23       	and	r24, r24
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <autonomouswalk_walk+0xa>
     2d4:	39 c0       	rjmp	.+114    	; 0x348 <autonomouswalk_walk+0x7c>
	{
		if(navigation_check_left_turn() == 2)
     2d6:	e1 d1       	rcall	.+962    	; 0x69a <navigation_check_left_turn>
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	39 f4       	brne	.+14     	; 0x2ea <autonomouswalk_walk+0x1e>
		{
			for(int i = 0;i < 3; ++i)
			{
				walk_forward();
     2dc:	3f df       	rcall	.-386    	; 0x15c <walk_forward>
     2de:	3e df       	rcall	.-388    	; 0x15c <walk_forward>
     2e0:	3d df       	rcall	.-390    	; 0x15c <walk_forward>
			}
			turn_left();
     2e2:	c4 df       	rcall	.-120    	; 0x26c <turn_left>
			decisionCounter = 0;
     2e4:	10 92 96 13 	sts	0x1396, r1
     2e8:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     2ea:	84 e0       	ldi	r24, 0x04	; 4
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	53 d1       	rcall	.+678    	; 0x596 <navigation_get_sensor>
     2f0:	89 32       	cpi	r24, 0x29	; 41
     2f2:	20 f0       	brcs	.+8      	; 0x2fc <autonomouswalk_walk+0x30>
		{
			walk_forward();
     2f4:	33 df       	rcall	.-410    	; 0x15c <walk_forward>
			decisionCounter = 0;
     2f6:	10 92 96 13 	sts	0x1396, r1
     2fa:	08 95       	ret
		}
		else if(navigation_check_right_turn() == 2)
     2fc:	b9 d1       	rcall	.+882    	; 0x670 <navigation_check_right_turn>
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	21 f4       	brne	.+8      	; 0x30a <autonomouswalk_walk+0x3e>
		{
			turn_right();
     302:	84 df       	rcall	.-248    	; 0x20c <turn_right>
			decisionCounter = 0;
     304:	10 92 96 13 	sts	0x1396, r1
     308:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     30a:	c7 d1       	rcall	.+910    	; 0x69a <navigation_check_left_turn>
     30c:	81 11       	cpse	r24, r1
     30e:	07 c0       	rjmp	.+14     	; 0x31e <autonomouswalk_walk+0x52>
     310:	af d1       	rcall	.+862    	; 0x670 <navigation_check_right_turn>
     312:	81 11       	cpse	r24, r1
     314:	04 c0       	rjmp	.+8      	; 0x31e <autonomouswalk_walk+0x52>
		{
			turn_around();
     316:	ff de       	rcall	.-514    	; 0x116 <turn_around>
			decisionCounter = 0;
     318:	10 92 96 13 	sts	0x1396, r1
     31c:	08 95       	ret
		}
		else if(decisionCounter < 4)
     31e:	80 91 96 13 	lds	r24, 0x1396
     322:	84 30       	cpi	r24, 0x04	; 4
     324:	38 f4       	brcc	.+14     	; 0x334 <autonomouswalk_walk+0x68>
		{
			walk_forward();
     326:	1a df       	rcall	.-460    	; 0x15c <walk_forward>
			++decisionCounter;
     328:	80 91 96 13 	lds	r24, 0x1396
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 96 13 	sts	0x1396, r24
     332:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     334:	10 92 96 13 	sts	0x1396, r1
			navigation_set_autonomous_walk(0);
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	e8 d0       	rcall	.+464    	; 0x50c <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     33c:	49 e3       	ldi	r20, 0x39	; 57
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	60 eb       	ldi	r22, 0xB0	; 176
     342:	71 e1       	ldi	r23, 0x11	; 17
     344:	80 e8       	ldi	r24, 0x80	; 128
     346:	01 c7       	rjmp	.+3586   	; 0x114a <TWI_send_string_fixed_length>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     348:	93 d1       	rcall	.+806    	; 0x670 <navigation_check_right_turn>
     34a:	82 30       	cpi	r24, 0x02	; 2
     34c:	31 f4       	brne	.+12     	; 0x35a <autonomouswalk_walk+0x8e>
		{
			for(int i = 0;i < 2; ++i)
			{
				walk_forward();
     34e:	06 df       	rcall	.-500    	; 0x15c <walk_forward>
     350:	05 df       	rcall	.-502    	; 0x15c <walk_forward>
			}
			turn_right();
     352:	5c df       	rcall	.-328    	; 0x20c <turn_right>
			decisionCounter = 0;
     354:	10 92 96 13 	sts	0x1396, r1
     358:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     35a:	84 e0       	ldi	r24, 0x04	; 4
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	1b d1       	rcall	.+566    	; 0x596 <navigation_get_sensor>
     360:	89 32       	cpi	r24, 0x29	; 41
     362:	20 f0       	brcs	.+8      	; 0x36c <autonomouswalk_walk+0xa0>
		{
			walk_forward();
     364:	fb de       	rcall	.-522    	; 0x15c <walk_forward>
			decisionCounter = 0;
     366:	10 92 96 13 	sts	0x1396, r1
     36a:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 2)
     36c:	96 d1       	rcall	.+812    	; 0x69a <navigation_check_left_turn>
     36e:	82 30       	cpi	r24, 0x02	; 2
     370:	21 f4       	brne	.+8      	; 0x37a <autonomouswalk_walk+0xae>
		{
			turn_left();
     372:	7c df       	rcall	.-264    	; 0x26c <turn_left>
			decisionCounter = 0;
     374:	10 92 96 13 	sts	0x1396, r1
     378:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     37a:	8f d1       	rcall	.+798    	; 0x69a <navigation_check_left_turn>
     37c:	81 11       	cpse	r24, r1
     37e:	07 c0       	rjmp	.+14     	; 0x38e <autonomouswalk_walk+0xc2>
     380:	77 d1       	rcall	.+750    	; 0x670 <navigation_check_right_turn>
     382:	81 11       	cpse	r24, r1
     384:	04 c0       	rjmp	.+8      	; 0x38e <autonomouswalk_walk+0xc2>
		{
			turn_around();
     386:	c7 de       	rcall	.-626    	; 0x116 <turn_around>
			decisionCounter = 0;
     388:	10 92 96 13 	sts	0x1396, r1
     38c:	08 95       	ret
		}
		else if(decisionCounter < 4)
     38e:	80 91 96 13 	lds	r24, 0x1396
     392:	84 30       	cpi	r24, 0x04	; 4
     394:	38 f4       	brcc	.+14     	; 0x3a4 <autonomouswalk_walk+0xd8>
		{
			walk_forward();
     396:	e2 de       	rcall	.-572    	; 0x15c <walk_forward>
			++decisionCounter;
     398:	80 91 96 13 	lds	r24, 0x1396
     39c:	8f 5f       	subi	r24, 0xFF	; 255
     39e:	80 93 96 13 	sts	0x1396, r24
     3a2:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     3a4:	10 92 96 13 	sts	0x1396, r1
			navigation_set_autonomous_walk(0);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	b0 d0       	rcall	.+352    	; 0x50c <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     3ac:	49 e3       	ldi	r20, 0x39	; 57
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	60 eb       	ldi	r22, 0xB0	; 176
     3b2:	71 e1       	ldi	r23, 0x11	; 17
     3b4:	80 e8       	ldi	r24, 0x80	; 128
     3b6:	c9 c6       	rjmp	.+3474   	; 0x114a <TWI_send_string_fixed_length>

000003b8 <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     3b8:	bc 01       	movw	r22, r24
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 25 10 	call	0x204a	; 0x204a <__floatunsisf>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	4a e7       	ldi	r20, 0x7A	; 122
     3c8:	51 e4       	ldi	r21, 0x41	; 65
     3ca:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     3ce:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__fixunssfsi>
	OCR1A = delay;
     3d2:	70 93 89 00 	sts	0x0089, r23
     3d6:	60 93 88 00 	sts	0x0088, r22
     3da:	08 95       	ret

000003dc <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     3dc:	bc 01       	movw	r22, r24
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 25 10 	call	0x204a	; 0x204a <__floatunsisf>
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	4a e7       	ldi	r20, 0x7A	; 122
     3ec:	51 e4       	ldi	r21, 0x41	; 65
     3ee:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     3f2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__fixunssfsi>
	OCR3A = delay;
     3f6:	70 93 99 00 	sts	0x0099, r23
     3fa:	60 93 98 00 	sts	0x0098, r22
     3fe:	08 95       	ret

00000400 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     400:	e1 e8       	ldi	r30, 0x81	; 129
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	85 60       	ori	r24, 0x05	; 5
     408:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     40a:	e1 e9       	ldi	r30, 0x91	; 145
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	85 60       	ori	r24, 0x05	; 5
     412:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     414:	88 ee       	ldi	r24, 0xE8	; 232
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	cf df       	rcall	.-98     	; 0x3b8 <set_counter_1>
	set_counter_2(1000);
     41a:	88 ee       	ldi	r24, 0xE8	; 232
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	de df       	rcall	.-68     	; 0x3dc <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     420:	ef e6       	ldi	r30, 0x6F	; 111
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	82 60       	ori	r24, 0x02	; 2
     428:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     42a:	e1 e7       	ldi	r30, 0x71	; 113
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	82 60       	ori	r24, 0x02	; 2
     432:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     434:	10 92 85 00 	sts	0x0085, r1
     438:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     43c:	10 92 95 00 	sts	0x0095, r1
     440:	10 92 94 00 	sts	0x0094, r1
     444:	08 95       	ret

00000446 <FifoDataLength>:
     446:	fc 01       	movw	r30, r24
     448:	90 81       	ld	r25, Z
     44a:	91 50       	subi	r25, 0x01	; 1
     44c:	84 81       	ldd	r24, Z+4	; 0x04
     44e:	22 81       	ldd	r18, Z+2	; 0x02
     450:	82 1b       	sub	r24, r18
     452:	89 23       	and	r24, r25
     454:	08 95       	ret

00000456 <FifoWrite>:
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
     45e:	16 2f       	mov	r17, r22
     460:	f2 df       	rcall	.-28     	; 0x446 <FifoDataLength>
     462:	28 81       	ld	r18, Y
     464:	39 81       	ldd	r19, Y+1	; 0x01
     466:	21 50       	subi	r18, 0x01	; 1
     468:	31 09       	sbc	r19, r1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	82 17       	cp	r24, r18
     46e:	93 07       	cpc	r25, r19
     470:	69 f0       	breq	.+26     	; 0x48c <FifoWrite+0x36>
     472:	8c 81       	ldd	r24, Y+4	; 0x04
     474:	9d 81       	ldd	r25, Y+5	; 0x05
     476:	fe 01       	movw	r30, r28
     478:	e8 0f       	add	r30, r24
     47a:	f9 1f       	adc	r31, r25
     47c:	16 83       	std	Z+6, r17	; 0x06
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	28 23       	and	r18, r24
     482:	39 23       	and	r19, r25
     484:	3d 83       	std	Y+5, r19	; 0x05
     486:	2c 83       	std	Y+4, r18	; 0x04
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	01 c0       	rjmp	.+2      	; 0x48e <FifoWrite+0x38>
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	08 95       	ret

00000496 <FifoRead>:
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	ec 01       	movw	r28, r24
     4a0:	8b 01       	movw	r16, r22
     4a2:	d1 df       	rcall	.-94     	; 0x446 <FifoDataLength>
     4a4:	88 23       	and	r24, r24
     4a6:	a1 f0       	breq	.+40     	; 0x4d0 <FifoRead+0x3a>
     4a8:	ea 81       	ldd	r30, Y+2	; 0x02
     4aa:	fb 81       	ldd	r31, Y+3	; 0x03
     4ac:	ec 0f       	add	r30, r28
     4ae:	fd 1f       	adc	r31, r29
     4b0:	86 81       	ldd	r24, Z+6	; 0x06
     4b2:	f8 01       	movw	r30, r16
     4b4:	80 83       	st	Z, r24
     4b6:	28 81       	ld	r18, Y
     4b8:	39 81       	ldd	r19, Y+1	; 0x01
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	31 09       	sbc	r19, r1
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	9b 81       	ldd	r25, Y+3	; 0x03
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	82 23       	and	r24, r18
     4c6:	93 23       	and	r25, r19
     4c8:	9b 83       	std	Y+3, r25	; 0x03
     4ca:	8a 83       	std	Y+2, r24	; 0x02
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <FifoRead+0x3c>
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     4dc:	68 2f       	mov	r22, r24
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 25 10 	call	0x204a	; 0x204a <__floatunsisf>
     4e8:	60 93 03 01 	sts	0x0103, r22
     4ec:	70 93 04 01 	sts	0x0104, r23
     4f0:	80 93 05 01 	sts	0x0105, r24
     4f4:	90 93 06 01 	sts	0x0106, r25
     4f8:	08 95       	ret

000004fa <navigation_left_algorithm>:
     4fa:	80 91 07 01 	lds	r24, 0x0107
     4fe:	08 95       	ret

00000500 <navigation_set_algorithm>:
     500:	80 93 07 01 	sts	0x0107, r24
     504:	08 95       	ret

00000506 <navigation_autonomous_walk>:
     506:	80 91 02 01 	lds	r24, 0x0102
     50a:	08 95       	ret

0000050c <navigation_set_autonomous_walk>:
     50c:	80 93 02 01 	sts	0x0102, r24
     510:	08 95       	ret

00000512 <navigation_stepping_delay>:
     512:	cf 93       	push	r28
     514:	c2 e0       	ldi	r28, 0x02	; 2
     516:	0e c0       	rjmp	.+28     	; 0x534 <navigation_stepping_delay+0x22>
     518:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <USART_decode_rx_fifo>
     51c:	2f ef       	ldi	r18, 0xFF	; 255
     51e:	89 ef       	ldi	r24, 0xF9	; 249
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	21 50       	subi	r18, 0x01	; 1
     524:	80 40       	sbci	r24, 0x00	; 0
     526:	90 40       	sbci	r25, 0x00	; 0
     528:	e1 f7       	brne	.-8      	; 0x522 <navigation_stepping_delay+0x10>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <navigation_stepping_delay+0x1a>
     52c:	00 00       	nop
     52e:	82 b1       	in	r24, 0x02	; 2
     530:	8c 27       	eor	r24, r28
     532:	82 b9       	out	0x02, r24	; 2
     534:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <USART_ready>
     538:	88 23       	and	r24, r24
     53a:	71 f3       	breq	.-36     	; 0x518 <navigation_stepping_delay+0x6>
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <navigation_fill_buffer>:
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	c0 e0       	ldi	r28, 0x00	; 0
     54a:	d0 e0       	ldi	r29, 0x00	; 0
     54c:	00 91 98 13 	lds	r16, 0x1398
     550:	10 e0       	ldi	r17, 0x00	; 0
     552:	ce 01       	movw	r24, r28
     554:	85 d6       	rcall	.+3338   	; 0x1260 <TWI_get_sensor>
     556:	fe 01       	movw	r30, r28
     558:	ee 0f       	add	r30, r30
     55a:	ff 1f       	adc	r31, r31
     55c:	ee 0f       	add	r30, r30
     55e:	ff 1f       	adc	r31, r31
     560:	ec 0f       	add	r30, r28
     562:	fd 1f       	adc	r31, r29
     564:	0e 0f       	add	r16, r30
     566:	1f 1f       	adc	r17, r31
     568:	f8 01       	movw	r30, r16
     56a:	e6 54       	subi	r30, 0x46	; 70
     56c:	fc 4e       	sbci	r31, 0xEC	; 236
     56e:	80 83       	st	Z, r24
     570:	21 96       	adiw	r28, 0x01	; 1
     572:	c8 30       	cpi	r28, 0x08	; 8
     574:	d1 05       	cpc	r29, r1
     576:	51 f7       	brne	.-44     	; 0x54c <navigation_fill_buffer+0xc>
     578:	80 91 98 13 	lds	r24, 0x1398
     57c:	84 30       	cpi	r24, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <navigation_fill_buffer+0x46>
     580:	10 92 98 13 	sts	0x1398, r1
     584:	03 c0       	rjmp	.+6      	; 0x58c <navigation_fill_buffer+0x4c>
     586:	8f 5f       	subi	r24, 0xFF	; 255
     588:	80 93 98 13 	sts	0x1398, r24
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	08 95       	ret

00000596 <navigation_get_sensor>:
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	00 d0       	rcall	.+0      	; 0x59c <navigation_get_sensor+0x6>
     59c:	00 d0       	rcall	.+0      	; 0x59e <navigation_get_sensor+0x8>
     59e:	1f 92       	push	r1
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	fc 01       	movw	r30, r24
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	8e 0f       	add	r24, r30
     5b0:	9f 1f       	adc	r25, r31
     5b2:	fc 01       	movw	r30, r24
     5b4:	e6 54       	subi	r30, 0x46	; 70
     5b6:	fc 4e       	sbci	r31, 0xEC	; 236
     5b8:	80 81       	ld	r24, Z
     5ba:	89 83       	std	Y+1, r24	; 0x01
     5bc:	81 81       	ldd	r24, Z+1	; 0x01
     5be:	8a 83       	std	Y+2, r24	; 0x02
     5c0:	82 81       	ldd	r24, Z+2	; 0x02
     5c2:	8b 83       	std	Y+3, r24	; 0x03
     5c4:	83 81       	ldd	r24, Z+3	; 0x03
     5c6:	8c 83       	std	Y+4, r24	; 0x04
     5c8:	84 81       	ldd	r24, Z+4	; 0x04
     5ca:	8d 83       	std	Y+5, r24	; 0x05
     5cc:	24 e0       	ldi	r18, 0x04	; 4
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	0e c0       	rjmp	.+28     	; 0x5ee <navigation_get_sensor+0x58>
     5d2:	41 91       	ld	r20, Z+
     5d4:	50 81       	ld	r21, Z
     5d6:	54 17       	cp	r21, r20
     5d8:	20 f4       	brcc	.+8      	; 0x5e2 <navigation_get_sensor+0x4c>
     5da:	df 01       	movw	r26, r30
     5dc:	11 97       	sbiw	r26, 0x01	; 1
     5de:	5c 93       	st	X, r21
     5e0:	40 83       	st	Z, r20
     5e2:	8e 17       	cp	r24, r30
     5e4:	9f 07       	cpc	r25, r31
     5e6:	a9 f7       	brne	.-22     	; 0x5d2 <navigation_get_sensor+0x3c>
     5e8:	21 50       	subi	r18, 0x01	; 1
     5ea:	31 09       	sbc	r19, r1
     5ec:	49 f0       	breq	.+18     	; 0x600 <navigation_get_sensor+0x6a>
     5ee:	12 16       	cp	r1, r18
     5f0:	13 06       	cpc	r1, r19
     5f2:	d4 f7       	brge	.-12     	; 0x5e8 <navigation_get_sensor+0x52>
     5f4:	fe 01       	movw	r30, r28
     5f6:	31 96       	adiw	r30, 0x01	; 1
     5f8:	cf 01       	movw	r24, r30
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	e9 cf       	rjmp	.-46     	; 0x5d2 <navigation_get_sensor+0x3c>
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(7) < HEIGHT_LIMIT)
     612:	87 e0       	ldi	r24, 0x07	; 7
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	bf df       	rcall	.-130    	; 0x596 <navigation_get_sensor>
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	88 32       	cpi	r24, 0x28	; 40
     61c:	08 f0       	brcs	.+2      	; 0x620 <navigation_detect_low_pass_obsticle+0xe>
     61e:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     620:	89 2f       	mov	r24, r25
     622:	08 95       	ret

00000624 <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     624:	f6 df       	rcall	.-20     	; 0x612 <navigation_detect_low_pass_obsticle>
     626:	88 23       	and	r24, r24
     628:	e9 f0       	breq	.+58     	; 0x664 <navigation_low_pass_obstacle+0x40>
     62a:	80 91 97 13 	lds	r24, 0x1397
     62e:	81 11       	cpse	r24, r1
     630:	19 c0       	rjmp	.+50     	; 0x664 <navigation_low_pass_obstacle+0x40>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     632:	4b e1       	ldi	r20, 0x1B	; 27
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	6a ee       	ldi	r22, 0xEA	; 234
     638:	71 e1       	ldi	r23, 0x11	; 17
     63a:	80 e4       	ldi	r24, 0x40	; 64
     63c:	86 d5       	rcall	.+2828   	; 0x114a <TWI_send_string_fixed_length>
     63e:	2f ef       	ldi	r18, 0xFF	; 255
     640:	86 e7       	ldi	r24, 0x76	; 118
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	21 50       	subi	r18, 0x01	; 1
     646:	80 40       	sbci	r24, 0x00	; 0
     648:	90 40       	sbci	r25, 0x00	; 0
     64a:	e1 f7       	brne	.-8      	; 0x644 <navigation_low_pass_obstacle+0x20>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <navigation_low_pass_obstacle+0x2a>
     64e:	00 00       	nop
		_delay_ms(30);
		TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);
     650:	4b e1       	ldi	r20, 0x1B	; 27
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	6a ee       	ldi	r22, 0xEA	; 234
     656:	71 e1       	ldi	r23, 0x11	; 17
     658:	80 e8       	ldi	r24, 0x80	; 128
     65a:	77 d5       	rcall	.+2798   	; 0x114a <TWI_send_string_fixed_length>
		lowPassObstacleFlag = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 97 13 	sts	0x1397, r24
     662:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     664:	d6 df       	rcall	.-84     	; 0x612 <navigation_detect_low_pass_obsticle>
     666:	81 11       	cpse	r24, r1
     668:	02 c0       	rjmp	.+4      	; 0x66e <navigation_low_pass_obstacle+0x4a>
	{
		lowPassObstacleFlag = 0;
     66a:	10 92 97 13 	sts	0x1397, r1
     66e:	08 95       	ret

00000670 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	90 df       	rcall	.-224    	; 0x596 <navigation_get_sensor>
     676:	8c 33       	cpi	r24, 0x3C	; 60
     678:	28 f0       	brcs	.+10     	; 0x684 <navigation_check_right_turn+0x14>
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	8b df       	rcall	.-234    	; 0x596 <navigation_get_sensor>
     680:	8c 33       	cpi	r24, 0x3C	; 60
     682:	40 f4       	brcc	.+16     	; 0x694 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	86 df       	rcall	.-244    	; 0x596 <navigation_get_sensor>
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	86 34       	cpi	r24, 0x46	; 70
     68e:	18 f4       	brcc	.+6      	; 0x696 <navigation_check_right_turn+0x26>
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	01 c0       	rjmp	.+2      	; 0x696 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     694:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     696:	89 2f       	mov	r24, r25
     698:	08 95       	ret

0000069a <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	7b df       	rcall	.-266    	; 0x596 <navigation_get_sensor>
     6a0:	8c 33       	cpi	r24, 0x3C	; 60
     6a2:	28 f0       	brcs	.+10     	; 0x6ae <navigation_check_left_turn+0x14>
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	76 df       	rcall	.-276    	; 0x596 <navigation_get_sensor>
     6aa:	8c 33       	cpi	r24, 0x3C	; 60
     6ac:	40 f4       	brcc	.+16     	; 0x6be <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	71 df       	rcall	.-286    	; 0x596 <navigation_get_sensor>
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	86 34       	cpi	r24, 0x46	; 70
     6b8:	18 f4       	brcc	.+6      	; 0x6c0 <navigation_check_left_turn+0x26>
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     6be:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     6c0:	89 2f       	mov	r24, r25
     6c2:	08 95       	ret

000006c4 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	6b 01       	movw	r12, r22
     6d2:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     6d4:	80 91 07 01 	lds	r24, 0x0107
     6d8:	88 23       	and	r24, r24
     6da:	09 f4       	brne	.+2      	; 0x6de <navigation_direction_regulation+0x1a>
     6dc:	98 c0       	rjmp	.+304    	; 0x80e <navigation_direction_regulation+0x14a>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	59 df       	rcall	.-334    	; 0x596 <navigation_get_sensor>
     6e4:	c8 2f       	mov	r28, r24
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	55 df       	rcall	.-342    	; 0x596 <navigation_get_sensor>
     6ec:	2c 2f       	mov	r18, r28
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	a9 01       	movw	r20, r18
     6f2:	48 1b       	sub	r20, r24
     6f4:	51 09       	sbc	r21, r1
     6f6:	ca 01       	movw	r24, r20
     6f8:	99 23       	and	r25, r25
     6fa:	1c f4       	brge	.+6      	; 0x702 <navigation_direction_regulation+0x3e>
     6fc:	91 95       	neg	r25
     6fe:	81 95       	neg	r24
     700:	91 09       	sbc	r25, r1
     702:	0a 97       	sbiw	r24, 0x0a	; 10
     704:	b4 f5       	brge	.+108    	; 0x772 <navigation_direction_regulation+0xae>
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	45 df       	rcall	.-374    	; 0x596 <navigation_get_sensor>
     70c:	82 33       	cpi	r24, 0x32	; 50
     70e:	88 f5       	brcc	.+98     	; 0x772 <navigation_direction_regulation+0xae>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	40 df       	rcall	.-384    	; 0x596 <navigation_get_sensor>
     716:	c8 2f       	mov	r28, r24
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	3c df       	rcall	.-392    	; 0x596 <navigation_get_sensor>
     71e:	d8 2f       	mov	r29, r24
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <cos>
     728:	6b 01       	movw	r12, r22
     72a:	7c 01       	movw	r14, r24
     72c:	6d 2f       	mov	r22, r29
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	6c 0f       	add	r22, r28
     732:	71 1d       	adc	r23, r1
     734:	88 27       	eor	r24, r24
     736:	77 fd       	sbrc	r23, 7
     738:	80 95       	com	r24
     73a:	98 2f       	mov	r25, r24
     73c:	0e 94 27 10 	call	0x204e	; 0x204e <__floatsisf>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	5f e3       	ldi	r21, 0x3F	; 63
     748:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     74c:	26 e6       	ldi	r18, 0x66	; 102
     74e:	36 e6       	ldi	r19, 0x66	; 102
     750:	46 ed       	ldi	r20, 0xD6	; 214
     752:	50 e4       	ldi	r21, 0x40	; 64
     754:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__addsf3>
     758:	a7 01       	movw	r20, r14
     75a:	96 01       	movw	r18, r12
     75c:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e2       	ldi	r20, 0x20	; 32
     766:	52 e4       	ldi	r21, 0x42	; 66
     768:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__subsf3>
     76c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixsfsi>
     770:	e5 c0       	rjmp	.+458    	; 0x93c <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0f df       	rcall	.-482    	; 0x596 <navigation_get_sensor>
     778:	c8 2f       	mov	r28, r24
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0b df       	rcall	.-490    	; 0x596 <navigation_get_sensor>
     780:	2c 2f       	mov	r18, r28
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	a9 01       	movw	r20, r18
     786:	48 1b       	sub	r20, r24
     788:	51 09       	sbc	r21, r1
     78a:	ca 01       	movw	r24, r20
     78c:	99 23       	and	r25, r25
     78e:	1c f4       	brge	.+6      	; 0x796 <navigation_direction_regulation+0xd2>
     790:	91 95       	neg	r25
     792:	81 95       	neg	r24
     794:	91 09       	sbc	r25, r1
     796:	0a 97       	sbiw	r24, 0x0a	; 10
     798:	0c f0       	brlt	.+2      	; 0x79c <navigation_direction_regulation+0xd8>
     79a:	21 c1       	rjmp	.+578    	; 0x9de <navigation_direction_regulation+0x31a>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	fa de       	rcall	.-524    	; 0x596 <navigation_get_sensor>
     7a2:	82 33       	cpi	r24, 0x32	; 50
     7a4:	08 f0       	brcs	.+2      	; 0x7a8 <navigation_direction_regulation+0xe4>
     7a6:	1b c1       	rjmp	.+566    	; 0x9de <navigation_direction_regulation+0x31a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	f4 de       	rcall	.-536    	; 0x596 <navigation_get_sensor>
     7ae:	c8 2f       	mov	r28, r24
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	f0 de       	rcall	.-544    	; 0x596 <navigation_get_sensor>
     7b6:	d8 2f       	mov	r29, r24
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <cos>
     7c0:	6b 01       	movw	r12, r22
     7c2:	7c 01       	movw	r14, r24
     7c4:	6d 2f       	mov	r22, r29
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	6c 0f       	add	r22, r28
     7ca:	71 1d       	adc	r23, r1
     7cc:	88 27       	eor	r24, r24
     7ce:	77 fd       	sbrc	r23, 7
     7d0:	80 95       	com	r24
     7d2:	98 2f       	mov	r25, r24
     7d4:	0e 94 27 10 	call	0x204e	; 0x204e <__floatsisf>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	5f e3       	ldi	r21, 0x3F	; 63
     7e0:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     7e4:	26 e6       	ldi	r18, 0x66	; 102
     7e6:	36 e6       	ldi	r19, 0x66	; 102
     7e8:	46 ed       	ldi	r20, 0xD6	; 214
     7ea:	50 e4       	ldi	r21, 0x40	; 64
     7ec:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__addsf3>
     7f0:	a7 01       	movw	r20, r14
     7f2:	96 01       	movw	r18, r12
     7f4:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e2       	ldi	r24, 0x20	; 32
     802:	92 e4       	ldi	r25, 0x42	; 66
     804:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__subsf3>
     808:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixsfsi>
     80c:	97 c0       	rjmp	.+302    	; 0x93c <navigation_direction_regulation+0x278>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	c1 de       	rcall	.-638    	; 0x596 <navigation_get_sensor>
     814:	c8 2f       	mov	r28, r24
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	bd de       	rcall	.-646    	; 0x596 <navigation_get_sensor>
     81c:	2c 2f       	mov	r18, r28
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	a9 01       	movw	r20, r18
     822:	48 1b       	sub	r20, r24
     824:	51 09       	sbc	r21, r1
     826:	ca 01       	movw	r24, r20
     828:	99 23       	and	r25, r25
     82a:	1c f4       	brge	.+6      	; 0x832 <navigation_direction_regulation+0x16e>
     82c:	91 95       	neg	r25
     82e:	81 95       	neg	r24
     830:	91 09       	sbc	r25, r1
     832:	0a 97       	sbiw	r24, 0x0a	; 10
     834:	c4 f5       	brge	.+112    	; 0x8a6 <navigation_direction_regulation+0x1e2>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	ad de       	rcall	.-678    	; 0x596 <navigation_get_sensor>
     83c:	82 33       	cpi	r24, 0x32	; 50
     83e:	98 f5       	brcc	.+102    	; 0x8a6 <navigation_direction_regulation+0x1e2>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a8 de       	rcall	.-688    	; 0x596 <navigation_get_sensor>
     846:	c8 2f       	mov	r28, r24
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a4 de       	rcall	.-696    	; 0x596 <navigation_get_sensor>
     84e:	d8 2f       	mov	r29, r24
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <cos>
     858:	6b 01       	movw	r12, r22
     85a:	7c 01       	movw	r14, r24
     85c:	6d 2f       	mov	r22, r29
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	6c 0f       	add	r22, r28
     862:	71 1d       	adc	r23, r1
     864:	88 27       	eor	r24, r24
     866:	77 fd       	sbrc	r23, 7
     868:	80 95       	com	r24
     86a:	98 2f       	mov	r25, r24
     86c:	0e 94 27 10 	call	0x204e	; 0x204e <__floatsisf>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     87c:	26 e6       	ldi	r18, 0x66	; 102
     87e:	36 e6       	ldi	r19, 0x66	; 102
     880:	46 ed       	ldi	r20, 0xD6	; 214
     882:	50 e4       	ldi	r21, 0x40	; 64
     884:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__addsf3>
     888:	a7 01       	movw	r20, r14
     88a:	96 01       	movw	r18, r12
     88c:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e2       	ldi	r24, 0x20	; 32
     89a:	92 e4       	ldi	r25, 0x42	; 66
     89c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__subsf3>
     8a0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixsfsi>
     8a4:	4b c0       	rjmp	.+150    	; 0x93c <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	75 de       	rcall	.-790    	; 0x596 <navigation_get_sensor>
     8ac:	c8 2f       	mov	r28, r24
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	71 de       	rcall	.-798    	; 0x596 <navigation_get_sensor>
     8b4:	2c 2f       	mov	r18, r28
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	a9 01       	movw	r20, r18
     8ba:	48 1b       	sub	r20, r24
     8bc:	51 09       	sbc	r21, r1
     8be:	ca 01       	movw	r24, r20
     8c0:	99 23       	and	r25, r25
     8c2:	1c f4       	brge	.+6      	; 0x8ca <navigation_direction_regulation+0x206>
     8c4:	91 95       	neg	r25
     8c6:	81 95       	neg	r24
     8c8:	91 09       	sbc	r25, r1
     8ca:	0a 97       	sbiw	r24, 0x0a	; 10
     8cc:	0c f0       	brlt	.+2      	; 0x8d0 <navigation_direction_regulation+0x20c>
     8ce:	87 c0       	rjmp	.+270    	; 0x9de <navigation_direction_regulation+0x31a>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	60 de       	rcall	.-832    	; 0x596 <navigation_get_sensor>
     8d6:	82 33       	cpi	r24, 0x32	; 50
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <navigation_direction_regulation+0x218>
     8da:	81 c0       	rjmp	.+258    	; 0x9de <navigation_direction_regulation+0x31a>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	5a de       	rcall	.-844    	; 0x596 <navigation_get_sensor>
     8e2:	c8 2f       	mov	r28, r24
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	56 de       	rcall	.-852    	; 0x596 <navigation_get_sensor>
     8ea:	d8 2f       	mov	r29, r24
     8ec:	c7 01       	movw	r24, r14
     8ee:	b6 01       	movw	r22, r12
     8f0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <cos>
     8f4:	6b 01       	movw	r12, r22
     8f6:	7c 01       	movw	r14, r24
     8f8:	6d 2f       	mov	r22, r29
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	6c 0f       	add	r22, r28
     8fe:	71 1d       	adc	r23, r1
     900:	88 27       	eor	r24, r24
     902:	77 fd       	sbrc	r23, 7
     904:	80 95       	com	r24
     906:	98 2f       	mov	r25, r24
     908:	0e 94 27 10 	call	0x204e	; 0x204e <__floatsisf>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	5f e3       	ldi	r21, 0x3F	; 63
     914:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     918:	26 e6       	ldi	r18, 0x66	; 102
     91a:	36 e6       	ldi	r19, 0x66	; 102
     91c:	46 ed       	ldi	r20, 0xD6	; 214
     91e:	50 e4       	ldi	r21, 0x40	; 64
     920:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__addsf3>
     924:	a7 01       	movw	r20, r14
     926:	96 01       	movw	r18, r12
     928:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e2       	ldi	r20, 0x20	; 32
     932:	52 e4       	ldi	r21, 0x42	; 66
     934:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__subsf3>
     938:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     93c:	cb 01       	movw	r24, r22
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	03 97       	sbiw	r24, 0x03	; 3
     942:	08 f4       	brcc	.+2      	; 0x946 <navigation_direction_regulation+0x282>
     944:	47 c0       	rjmp	.+142    	; 0x9d4 <navigation_direction_regulation+0x310>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     946:	88 27       	eor	r24, r24
     948:	77 fd       	sbrc	r23, 7
     94a:	80 95       	com	r24
     94c:	98 2f       	mov	r25, r24
     94e:	0e 94 27 10 	call	0x204e	; 0x204e <__floatsisf>
     952:	20 91 03 01 	lds	r18, 0x0103
     956:	30 91 04 01 	lds	r19, 0x0104
     95a:	40 91 05 01 	lds	r20, 0x0105
     95e:	50 91 06 01 	lds	r21, 0x0106
     962:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     966:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <atan>
     96a:	c6 2e       	mov	r12, r22
     96c:	d7 2e       	mov	r13, r23
     96e:	e8 2e       	mov	r14, r24
     970:	f9 2e       	mov	r15, r25
		if(dir < 0)
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	a9 01       	movw	r20, r18
     978:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__cmpsf2>
     97c:	88 23       	and	r24, r24
     97e:	7c f4       	brge	.+30     	; 0x99e <navigation_direction_regulation+0x2da>
		{
			dir += 2*PI;
     980:	2b ed       	ldi	r18, 0xDB	; 219
     982:	3f e0       	ldi	r19, 0x0F	; 15
     984:	49 ec       	ldi	r20, 0xC9	; 201
     986:	50 e4       	ldi	r21, 0x40	; 64
     988:	6c 2d       	mov	r22, r12
     98a:	7d 2d       	mov	r23, r13
     98c:	8e 2d       	mov	r24, r14
     98e:	9f 2d       	mov	r25, r15
     990:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__addsf3>
     994:	c6 2e       	mov	r12, r22
     996:	d7 2e       	mov	r13, r23
     998:	e8 2e       	mov	r14, r24
     99a:	f9 2e       	mov	r15, r25
     99c:	24 c0       	rjmp	.+72     	; 0x9e6 <navigation_direction_regulation+0x322>
		} else if(dir >= 2*PI)
     99e:	2b ed       	ldi	r18, 0xDB	; 219
     9a0:	3f e0       	ldi	r19, 0x0F	; 15
     9a2:	49 ec       	ldi	r20, 0xC9	; 201
     9a4:	50 e4       	ldi	r21, 0x40	; 64
     9a6:	6c 2d       	mov	r22, r12
     9a8:	7d 2d       	mov	r23, r13
     9aa:	8e 2d       	mov	r24, r14
     9ac:	9f 2d       	mov	r25, r15
     9ae:	0e 94 35 11 	call	0x226a	; 0x226a <__gesf2>
     9b2:	88 23       	and	r24, r24
     9b4:	c4 f0       	brlt	.+48     	; 0x9e6 <navigation_direction_regulation+0x322>
		{
			dir -= 2*PI;
     9b6:	2b ed       	ldi	r18, 0xDB	; 219
     9b8:	3f e0       	ldi	r19, 0x0F	; 15
     9ba:	49 ec       	ldi	r20, 0xC9	; 201
     9bc:	50 e4       	ldi	r21, 0x40	; 64
     9be:	6c 2d       	mov	r22, r12
     9c0:	7d 2d       	mov	r23, r13
     9c2:	8e 2d       	mov	r24, r14
     9c4:	9f 2d       	mov	r25, r15
     9c6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__subsf3>
     9ca:	c6 2e       	mov	r12, r22
     9cc:	d7 2e       	mov	r13, r23
     9ce:	e8 2e       	mov	r14, r24
     9d0:	f9 2e       	mov	r15, r25
     9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <navigation_direction_regulation+0x322>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     9d4:	c1 2c       	mov	r12, r1
     9d6:	d1 2c       	mov	r13, r1
     9d8:	e1 2c       	mov	r14, r1
     9da:	f1 2c       	mov	r15, r1
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <navigation_direction_regulation+0x322>
     9de:	c1 2c       	mov	r12, r1
     9e0:	d1 2c       	mov	r13, r1
     9e2:	e1 2c       	mov	r14, r1
     9e4:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     9e6:	6c 2d       	mov	r22, r12
     9e8:	7d 2d       	mov	r23, r13
     9ea:	8e 2d       	mov	r24, r14
     9ec:	9f 2d       	mov	r25, r15
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	08 95       	ret

000009fc <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     a04:	80 91 07 01 	lds	r24, 0x0107
     a08:	88 23       	and	r24, r24
     a0a:	09 f4       	brne	.+2      	; 0xa0e <navigation_angle_offset+0x12>
     a0c:	6c c0       	rjmp	.+216    	; 0xae6 <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	c1 dd       	rcall	.-1150   	; 0x596 <navigation_get_sensor>
     a14:	f8 2e       	mov	r15, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	bd dd       	rcall	.-1158   	; 0x596 <navigation_get_sensor>
     a1c:	2f 2d       	mov	r18, r15
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	a9 01       	movw	r20, r18
     a22:	48 1b       	sub	r20, r24
     a24:	51 09       	sbc	r21, r1
     a26:	ca 01       	movw	r24, r20
     a28:	99 23       	and	r25, r25
     a2a:	1c f4       	brge	.+6      	; 0xa32 <navigation_angle_offset+0x36>
     a2c:	91 95       	neg	r25
     a2e:	81 95       	neg	r24
     a30:	91 09       	sbc	r25, r1
     a32:	0a 97       	sbiw	r24, 0x0a	; 10
     a34:	0c f5       	brge	.+66     	; 0xa78 <navigation_angle_offset+0x7c>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	ad dd       	rcall	.-1190   	; 0x596 <navigation_get_sensor>
     a3c:	82 33       	cpi	r24, 0x32	; 50
     a3e:	e0 f4       	brcc	.+56     	; 0xa78 <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a8 dd       	rcall	.-1200   	; 0x596 <navigation_get_sensor>
     a46:	f8 2e       	mov	r15, r24
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a4 dd       	rcall	.-1208   	; 0x596 <navigation_get_sensor>
     a4e:	6f 2d       	mov	r22, r15
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	68 1b       	sub	r22, r24
     a54:	71 09       	sbc	r23, r1
     a56:	88 27       	eor	r24, r24
     a58:	77 fd       	sbrc	r23, 7
     a5a:	80 95       	com	r24
     a5c:	98 2f       	mov	r25, r24
     a5e:	0e 94 27 10 	call	0x204e	; 0x204e <__floatsisf>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e8       	ldi	r20, 0x80	; 128
     a68:	5d e3       	ldi	r21, 0x3D	; 61
     a6a:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     a6e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <atan>
     a72:	6b 01       	movw	r12, r22
     a74:	7c 01       	movw	r14, r24
     a76:	a0 c0       	rjmp	.+320    	; 0xbb8 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	8c dd       	rcall	.-1256   	; 0x596 <navigation_get_sensor>
     a7e:	f8 2e       	mov	r15, r24
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	88 dd       	rcall	.-1264   	; 0x596 <navigation_get_sensor>
     a86:	2f 2d       	mov	r18, r15
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	a9 01       	movw	r20, r18
     a8c:	48 1b       	sub	r20, r24
     a8e:	51 09       	sbc	r21, r1
     a90:	ca 01       	movw	r24, r20
     a92:	99 23       	and	r25, r25
     a94:	1c f4       	brge	.+6      	; 0xa9c <navigation_angle_offset+0xa0>
     a96:	91 95       	neg	r25
     a98:	81 95       	neg	r24
     a9a:	91 09       	sbc	r25, r1
     a9c:	0a 97       	sbiw	r24, 0x0a	; 10
     a9e:	0c f0       	brlt	.+2      	; 0xaa2 <navigation_angle_offset+0xa6>
     aa0:	9a c0       	rjmp	.+308    	; 0xbd6 <navigation_angle_offset+0x1da>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	77 dd       	rcall	.-1298   	; 0x596 <navigation_get_sensor>
     aa8:	82 33       	cpi	r24, 0x32	; 50
     aaa:	08 f0       	brcs	.+2      	; 0xaae <navigation_angle_offset+0xb2>
     aac:	94 c0       	rjmp	.+296    	; 0xbd6 <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	71 dd       	rcall	.-1310   	; 0x596 <navigation_get_sensor>
     ab4:	f8 2e       	mov	r15, r24
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	6d dd       	rcall	.-1318   	; 0x596 <navigation_get_sensor>
     abc:	6f 2d       	mov	r22, r15
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	68 1b       	sub	r22, r24
     ac2:	71 09       	sbc	r23, r1
     ac4:	88 27       	eor	r24, r24
     ac6:	77 fd       	sbrc	r23, 7
     ac8:	80 95       	com	r24
     aca:	98 2f       	mov	r25, r24
     acc:	0e 94 27 10 	call	0x204e	; 0x204e <__floatsisf>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e8       	ldi	r20, 0x80	; 128
     ad6:	5d e3       	ldi	r21, 0x3D	; 61
     ad8:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     adc:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <atan>
     ae0:	6b 01       	movw	r12, r22
     ae2:	7c 01       	movw	r14, r24
     ae4:	69 c0       	rjmp	.+210    	; 0xbb8 <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	55 dd       	rcall	.-1366   	; 0x596 <navigation_get_sensor>
     aec:	f8 2e       	mov	r15, r24
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	51 dd       	rcall	.-1374   	; 0x596 <navigation_get_sensor>
     af4:	2f 2d       	mov	r18, r15
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	a9 01       	movw	r20, r18
     afa:	48 1b       	sub	r20, r24
     afc:	51 09       	sbc	r21, r1
     afe:	ca 01       	movw	r24, r20
     b00:	99 23       	and	r25, r25
     b02:	1c f4       	brge	.+6      	; 0xb0a <navigation_angle_offset+0x10e>
     b04:	91 95       	neg	r25
     b06:	81 95       	neg	r24
     b08:	91 09       	sbc	r25, r1
     b0a:	0a 97       	sbiw	r24, 0x0a	; 10
     b0c:	0c f5       	brge	.+66     	; 0xb50 <navigation_angle_offset+0x154>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	41 dd       	rcall	.-1406   	; 0x596 <navigation_get_sensor>
     b14:	82 33       	cpi	r24, 0x32	; 50
     b16:	e0 f4       	brcc	.+56     	; 0xb50 <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	3c dd       	rcall	.-1416   	; 0x596 <navigation_get_sensor>
     b1e:	f8 2e       	mov	r15, r24
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	38 dd       	rcall	.-1424   	; 0x596 <navigation_get_sensor>
     b26:	6f 2d       	mov	r22, r15
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	68 1b       	sub	r22, r24
     b2c:	71 09       	sbc	r23, r1
     b2e:	88 27       	eor	r24, r24
     b30:	77 fd       	sbrc	r23, 7
     b32:	80 95       	com	r24
     b34:	98 2f       	mov	r25, r24
     b36:	0e 94 27 10 	call	0x204e	; 0x204e <__floatsisf>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e8       	ldi	r20, 0x80	; 128
     b40:	5d e3       	ldi	r21, 0x3D	; 61
     b42:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     b46:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <atan>
     b4a:	6b 01       	movw	r12, r22
     b4c:	7c 01       	movw	r14, r24
     b4e:	34 c0       	rjmp	.+104    	; 0xbb8 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	20 dd       	rcall	.-1472   	; 0x596 <navigation_get_sensor>
     b56:	f8 2e       	mov	r15, r24
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	1c dd       	rcall	.-1480   	; 0x596 <navigation_get_sensor>
     b5e:	2f 2d       	mov	r18, r15
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	a9 01       	movw	r20, r18
     b64:	48 1b       	sub	r20, r24
     b66:	51 09       	sbc	r21, r1
     b68:	ca 01       	movw	r24, r20
     b6a:	99 23       	and	r25, r25
     b6c:	1c f4       	brge	.+6      	; 0xb74 <navigation_angle_offset+0x178>
     b6e:	91 95       	neg	r25
     b70:	81 95       	neg	r24
     b72:	91 09       	sbc	r25, r1
     b74:	0a 97       	sbiw	r24, 0x0a	; 10
     b76:	7c f5       	brge	.+94     	; 0xbd6 <navigation_angle_offset+0x1da>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0c dd       	rcall	.-1512   	; 0x596 <navigation_get_sensor>
     b7e:	82 33       	cpi	r24, 0x32	; 50
     b80:	50 f5       	brcc	.+84     	; 0xbd6 <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	07 dd       	rcall	.-1522   	; 0x596 <navigation_get_sensor>
     b88:	f8 2e       	mov	r15, r24
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	03 dd       	rcall	.-1530   	; 0x596 <navigation_get_sensor>
     b90:	6f 2d       	mov	r22, r15
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	68 1b       	sub	r22, r24
     b96:	71 09       	sbc	r23, r1
     b98:	88 27       	eor	r24, r24
     b9a:	77 fd       	sbrc	r23, 7
     b9c:	80 95       	com	r24
     b9e:	98 2f       	mov	r25, r24
     ba0:	0e 94 27 10 	call	0x204e	; 0x204e <__floatsisf>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e8       	ldi	r20, 0x80	; 128
     baa:	5d e3       	ldi	r21, 0x3D	; 61
     bac:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     bb0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <atan>
     bb4:	6b 01       	movw	r12, r22
     bb6:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     bb8:	c7 01       	movw	r24, r14
     bba:	b6 01       	movw	r22, r12
     bbc:	9f 77       	andi	r25, 0x7F	; 127
     bbe:	29 e2       	ldi	r18, 0x29	; 41
     bc0:	3c e5       	ldi	r19, 0x5C	; 92
     bc2:	4f e8       	ldi	r20, 0x8F	; 143
     bc4:	5d e3       	ldi	r21, 0x3D	; 61
     bc6:	0e 94 35 11 	call	0x226a	; 0x226a <__gesf2>
     bca:	18 16       	cp	r1, r24
     bcc:	3c f0       	brlt	.+14     	; 0xbdc <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     bce:	c1 2c       	mov	r12, r1
     bd0:	d1 2c       	mov	r13, r1
     bd2:	76 01       	movw	r14, r12
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <navigation_angle_offset+0x1e0>
     bd6:	c1 2c       	mov	r12, r1
     bd8:	d1 2c       	mov	r13, r1
     bda:	76 01       	movw	r14, r12
     bdc:	7c 2d       	mov	r23, r12
	}
}
     bde:	67 2f       	mov	r22, r23
     be0:	7d 2d       	mov	r23, r13
     be2:	8e 2d       	mov	r24, r14
     be4:	9f 2d       	mov	r25, r15
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	08 95       	ret

00000bf0 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     bf0:	1f 92       	push	r1
     bf2:	0f 92       	push	r0
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	0f 92       	push	r0
     bf8:	11 24       	eor	r1, r1
     bfa:	0b b6       	in	r0, 0x3b	; 59
     bfc:	0f 92       	push	r0
     bfe:	2f 93       	push	r18
     c00:	3f 93       	push	r19
     c02:	4f 93       	push	r20
     c04:	5f 93       	push	r21
     c06:	6f 93       	push	r22
     c08:	7f 93       	push	r23
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
     c0e:	af 93       	push	r26
     c10:	bf 93       	push	r27
     c12:	ef 93       	push	r30
     c14:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	73 dc       	rcall	.-1818   	; 0x500 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	77 dc       	rcall	.-1810   	; 0x50c <navigation_set_autonomous_walk>
}
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	0f 90       	pop	r0
     c38:	0b be       	out	0x3b, r0	; 59
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	0b b6       	in	r0, 0x3b	; 59
     c50:	0f 92       	push	r0
     c52:	2f 93       	push	r18
     c54:	3f 93       	push	r19
     c56:	4f 93       	push	r20
     c58:	5f 93       	push	r21
     c5a:	6f 93       	push	r22
     c5c:	7f 93       	push	r23
     c5e:	8f 93       	push	r24
     c60:	9f 93       	push	r25
     c62:	af 93       	push	r26
     c64:	bf 93       	push	r27
     c66:	ef 93       	push	r30
     c68:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	49 dc       	rcall	.-1902   	; 0x500 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	4d dc       	rcall	.-1894   	; 0x50c <navigation_set_autonomous_walk>
     c72:	ff 91       	pop	r31
     c74:	ef 91       	pop	r30
     c76:	bf 91       	pop	r27
     c78:	af 91       	pop	r26
     c7a:	9f 91       	pop	r25
     c7c:	8f 91       	pop	r24
     c7e:	7f 91       	pop	r23
     c80:	6f 91       	pop	r22
     c82:	5f 91       	pop	r21
     c84:	4f 91       	pop	r20
     c86:	3f 91       	pop	r19
     c88:	2f 91       	pop	r18
     c8a:	0f 90       	pop	r0
     c8c:	0b be       	out	0x3b, r0	; 59
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <main>:
//Flag to know if to send the autonom settings to the computer.
uint8_t autonom_flag = 1;

int main(void)
{
	USART_init();
     c98:	de d4       	rcall	.+2492   	; 0x1656 <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); //<<<????>>> send messages from gang to the display, not the computer
     c9a:	80 e8       	ldi	r24, 0x80	; 128
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	e7 d4       	rcall	.+2510   	; 0x166e <USART_set_twi_message_destination>
	sei();
     ca0:	78 94       	sei
	TWI_init(ST_ADDRESS);
     ca2:	80 e2       	ldi	r24, 0x20	; 32
     ca4:	70 d1       	rcall	.+736    	; 0xf86 <TWI_init>
	init_counters();
     ca6:	ac db       	rcall	.-2216   	; 0x400 <init_counters>
	
	LED_INIT;
     ca8:	81 b1       	in	r24, 0x01	; 1
     caa:	83 60       	ori	r24, 0x03	; 3
     cac:	81 b9       	out	0x01, r24	; 1
     cae:	87 b1       	in	r24, 0x07	; 7
     cb0:	80 6c       	ori	r24, 0xC0	; 192
     cb2:	87 b9       	out	0x07, r24	; 7
	
	//Buttons
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //For emphasize
     cb4:	81 b1       	in	r24, 0x01	; 1
     cb6:	8f 73       	andi	r24, 0x3F	; 63
     cb8:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     cba:	e8 e6       	ldi	r30, 0x68	; 104
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //mask for porta6 and porta7
     cc4:	eb e6       	ldi	r30, 0x6B	; 107
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 6c       	ori	r24, 0xC0	; 192
     ccc:	80 83       	st	Z, r24
     cce:	2f ef       	ldi	r18, 0xFF	; 255
     cd0:	83 e2       	ldi	r24, 0x23	; 35
     cd2:	94 ef       	ldi	r25, 0xF4	; 244
     cd4:	21 50       	subi	r18, 0x01	; 1
     cd6:	80 40       	sbci	r24, 0x00	; 0
     cd8:	90 40       	sbci	r25, 0x00	; 0
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <main+0x3c>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <main+0x46>
     cde:	00 00       	nop
	
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	14 dc       	rcall	.-2008   	; 0x50c <navigation_set_autonomous_walk>
	//set_counter_1(100);
	set_counter_2(200);
     ce4:	88 ec       	ldi	r24, 0xC8	; 200
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	79 db       	rcall	.-2318   	; 0x3dc <set_counter_2>
				USART_send_command();
			}
			
			if(TWI_elevation_flag())
			{
				LED0_TOGGLE;
     cea:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else
		{
			if(TWI_command_flag())
			{
				LED1_TOGGLE;
     cec:	c2 e0       	ldi	r28, 0x02	; 2
			LED1_TOGGLE;
			navigation_fill_buffer();
		}*/
		
		
		if(autonom_flag)
     cee:	80 91 08 01 	lds	r24, 0x0108
     cf2:	88 23       	and	r24, r24
     cf4:	31 f0       	breq	.+12     	; 0xd02 <main+0x6a>
		{
			TWI_send_autonom_settings(C_ADDRESS, navigation_left_algorithm());
     cf6:	01 dc       	rcall	.-2046   	; 0x4fa <navigation_left_algorithm>
     cf8:	68 2f       	mov	r22, r24
     cfa:	80 e8       	ldi	r24, 0x80	; 128
     cfc:	67 d1       	rcall	.+718    	; 0xfcc <TWI_send_autonom_settings>
			autonom_flag = 0;
     cfe:	10 92 08 01 	sts	0x0108, r1
		}
		
		if(navigation_autonomous_walk() == 1)
     d02:	01 dc       	rcall	.-2046   	; 0x506 <navigation_autonomous_walk>
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	49 f4       	brne	.+18     	; 0xd1a <main+0x82>
		{
			if(TWI_control_settings_flag())
     d08:	c5 d2       	rcall	.+1418   	; 0x1294 <TWI_control_settings_flag>
     d0a:	88 23       	and	r24, r24
     d0c:	21 f0       	breq	.+8      	; 0xd16 <main+0x7e>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	ab d2       	rcall	.+1366   	; 0x126a <TWI_get_control_setting>
     d14:	e3 db       	rcall	.-2106   	; 0x4dc <navigation_set_Kp>
			}
			autonomouswalk_walk();
     d16:	da da       	rcall	.-2636   	; 0x2cc <autonomouswalk_walk>
     d18:	ea cf       	rjmp	.-44     	; 0xcee <main+0x56>
		}
		else
		{
			if(TWI_command_flag())
     d1a:	b2 d2       	rcall	.+1380   	; 0x1280 <TWI_command_flag>
     d1c:	88 23       	and	r24, r24
     d1e:	21 f0       	breq	.+8      	; 0xd28 <main+0x90>
			{
				LED1_TOGGLE;
     d20:	82 b1       	in	r24, 0x02	; 2
     d22:	8c 27       	eor	r24, r28
     d24:	82 b9       	out	0x02, r24	; 2
				USART_send_command();
     d26:	6e d5       	rcall	.+2780   	; 0x1804 <USART_send_command>
			}
			
			if(TWI_elevation_flag())
     d28:	c9 d2       	rcall	.+1426   	; 0x12bc <TWI_elevation_flag>
     d2a:	88 23       	and	r24, r24
     d2c:	21 f0       	breq	.+8      	; 0xd36 <main+0x9e>
			{
				LED0_TOGGLE;
     d2e:	82 b1       	in	r24, 0x02	; 2
     d30:	8d 27       	eor	r24, r29
     d32:	82 b9       	out	0x02, r24	; 2
				USART_send_elevation();
     d34:	79 d5       	rcall	.+2802   	; 0x1828 <USART_send_elevation>
			}
		USART_decode_rx_fifo();
     d36:	93 d7       	rcall	.+3878   	; 0x1c5e <USART_decode_rx_fifo>
     d38:	da cf       	rjmp	.-76     	; 0xcee <main+0x56>

00000d3a <__vector_13>:
	}
}
//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     d3a:	1f 92       	push	r1
     d3c:	0f 92       	push	r0
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	0f 92       	push	r0
     d42:	11 24       	eor	r1, r1
	//USART_RequestGyro();
	TCNT1 = 0;
     d44:	10 92 85 00 	sts	0x0085, r1
     d48:	10 92 84 00 	sts	0x0084, r1
}
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	0b b6       	in	r0, 0x3b	; 59
     d62:	0f 92       	push	r0
     d64:	2f 93       	push	r18
     d66:	3f 93       	push	r19
     d68:	4f 93       	push	r20
     d6a:	5f 93       	push	r21
     d6c:	6f 93       	push	r22
     d6e:	7f 93       	push	r23
     d70:	8f 93       	push	r24
     d72:	9f 93       	push	r25
     d74:	af 93       	push	r26
     d76:	bf 93       	push	r27
     d78:	ef 93       	push	r30
     d7a:	ff 93       	push	r31
	if(TWI_autonom_settings_flag())
     d7c:	95 d2       	rcall	.+1322   	; 0x12a8 <TWI_autonom_settings_flag>
     d7e:	88 23       	and	r24, r24
     d80:	91 f0       	breq	.+36     	; 0xda6 <__vector_32+0x50>
	{
		uint8_t sett = TWI_get_autonom_settings();
     d82:	78 d2       	rcall	.+1264   	; 0x1274 <TWI_get_autonom_settings>
		if(sett == 0)
     d84:	81 11       	cpse	r24, r1
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__vector_32+0x36>
		{
			navigation_set_autonomous_walk(0);
     d88:	c1 db       	rcall	.-2174   	; 0x50c <navigation_set_autonomous_walk>
     d8a:	0a c0       	rjmp	.+20     	; 0xda0 <__vector_32+0x4a>
		}
		else if(sett == 1)
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	21 f4       	brne	.+8      	; 0xd98 <__vector_32+0x42>
		{
			navigation_set_autonomous_walk(1);
     d90:	bd db       	rcall	.-2182   	; 0x50c <navigation_set_autonomous_walk>
			navigation_set_algorithm(1);
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	b5 db       	rcall	.-2198   	; 0x500 <navigation_set_algorithm>
     d96:	04 c0       	rjmp	.+8      	; 0xda0 <__vector_32+0x4a>
		}
		else //sett == 2
		{
			navigation_set_autonomous_walk(1);
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	b8 db       	rcall	.-2192   	; 0x50c <navigation_set_autonomous_walk>
			navigation_set_algorithm(0);
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	b0 db       	rcall	.-2208   	; 0x500 <navigation_set_algorithm>
		}
		autonom_flag = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 08 01 	sts	0x0108, r24
	}
	TCNT3 = 0;
     da6:	10 92 95 00 	sts	0x0095, r1
     daa:	10 92 94 00 	sts	0x0094, r1
}
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	bf 91       	pop	r27
     db4:	af 91       	pop	r26
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	7f 91       	pop	r23
     dbc:	6f 91       	pop	r22
     dbe:	5f 91       	pop	r21
     dc0:	4f 91       	pop	r20
     dc2:	3f 91       	pop	r19
     dc4:	2f 91       	pop	r18
     dc6:	0f 90       	pop	r0
     dc8:	0b be       	out	0x3b, r0	; 59
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <__vector_4>:

//-------------------Buttons PinChange interrupt---------------------

ISR(PCINT0_vect)
{
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	0b b6       	in	r0, 0x3b	; 59
     de0:	0f 92       	push	r0
     de2:	2f 93       	push	r18
     de4:	3f 93       	push	r19
     de6:	4f 93       	push	r20
     de8:	5f 93       	push	r21
     dea:	6f 93       	push	r22
     dec:	7f 93       	push	r23
     dee:	8f 93       	push	r24
     df0:	9f 93       	push	r25
     df2:	af 93       	push	r26
     df4:	bf 93       	push	r27
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     dfa:	06 9b       	sbis	0x00, 6	; 0
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	85 db       	rcall	.-2294   	; 0x50c <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	7d db       	rcall	.-2310   	; 0x500 <navigation_set_algorithm>
		//test
		LED2_TOGGLE;
     e06:	98 b1       	in	r25, 0x08	; 8
     e08:	80 e4       	ldi	r24, 0x40	; 64
     e0a:	89 27       	eor	r24, r25
     e0c:	88 b9       	out	0x08, r24	; 8
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <__vector_4+0x4e>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     e10:	07 9b       	sbis	0x00, 7	; 0
     e12:	07 c0       	rjmp	.+14     	; 0xe22 <__vector_4+0x4e>
	{
		navigation_set_autonomous_walk(1);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	7a db       	rcall	.-2316   	; 0x50c <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	72 db       	rcall	.-2332   	; 0x500 <navigation_set_algorithm>
		//test
		LED3_TOGGLE;
     e1c:	88 b1       	in	r24, 0x08	; 8
     e1e:	80 58       	subi	r24, 0x80	; 128
     e20:	88 b9       	out	0x08, r24	; 8
	}
	autonom_flag = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	80 93 08 01 	sts	0x0108, r24
}
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0b be       	out	0x3b, r0	; 59
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <set_twi_reciever_enable>:
     e4e:	85 e4       	ldi	r24, 0x45	; 69
     e50:	80 93 bc 00 	sts	0x00BC, r24
     e54:	08 95       	ret

00000e56 <clear_int>:
     e56:	81 ec       	ldi	r24, 0xC1	; 193
     e58:	80 93 bc 00 	sts	0x00BC, r24
     e5c:	08 95       	ret

00000e5e <start_bus>:
     e5e:	84 ea       	ldi	r24, 0xA4	; 164
     e60:	80 93 bc 00 	sts	0x00BC, r24
     e64:	08 95       	ret

00000e66 <stop_bus>:
     e66:	85 ed       	ldi	r24, 0xD5	; 213
     e68:	80 93 bc 00 	sts	0x00BC, r24
     e6c:	08 95       	ret

00000e6e <Error>:
     e6e:	80 91 b9 00 	lds	r24, 0x00B9
     e72:	88 7f       	andi	r24, 0xF8	; 248
     e74:	88 33       	cpi	r24, 0x38	; 56
     e76:	09 f0       	breq	.+2      	; 0xe7a <Error+0xc>
     e78:	f6 cf       	rjmp	.-20     	; 0xe66 <stop_bus>
     e7a:	ed cf       	rjmp	.-38     	; 0xe56 <clear_int>

00000e7c <get_data>:
     e7c:	80 91 bb 00 	lds	r24, 0x00BB
     e80:	08 95       	ret

00000e82 <wait_for_bus>:
     e82:	ec eb       	ldi	r30, 0xBC	; 188
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 23       	and	r24, r24
     e8a:	ec f7       	brge	.-6      	; 0xe86 <wait_for_bus+0x4>
     e8c:	08 95       	ret

00000e8e <send_data_and_wait>:
     e8e:	80 93 bb 00 	sts	0x00BB, r24
     e92:	84 e8       	ldi	r24, 0x84	; 132
     e94:	80 93 bc 00 	sts	0x00BC, r24
     e98:	f4 cf       	rjmp	.-24     	; 0xe82 <wait_for_bus>

00000e9a <stop_twi>:
     e9a:	10 92 f5 14 	sts	0x14F5, r1
     e9e:	10 92 f4 14 	sts	0x14F4, r1
     ea2:	10 92 ff 14 	sts	0x14FF, r1
     ea6:	10 92 fe 14 	sts	0x14FE, r1
     eaa:	10 92 ea 14 	sts	0x14EA, r1
     eae:	10 92 e9 14 	sts	0x14E9, r1
     eb2:	10 92 ef 14 	sts	0x14EF, r1
     eb6:	10 92 ee 14 	sts	0x14EE, r1
     eba:	10 92 f2 14 	sts	0x14F2, r1
     ebe:	10 92 f1 14 	sts	0x14F1, r1
     ec2:	08 95       	ret

00000ec4 <reset_TWI>:
     ec4:	ec eb       	ldi	r30, 0xBC	; 188
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 6c       	ori	r24, 0xC0	; 192
     ecc:	80 83       	st	Z, r24
     ece:	08 95       	ret

00000ed0 <get_control_settings_from_bus>:
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	c0 91 ee 14 	lds	r28, 0x14EE
     ed8:	d0 91 ef 14 	lds	r29, 0x14EF
     edc:	cf df       	rcall	.-98     	; 0xe7c <get_data>
     ede:	c5 51       	subi	r28, 0x15	; 21
     ee0:	db 4e       	sbci	r29, 0xEB	; 235
     ee2:	88 83       	st	Y, r24
     ee4:	10 92 ef 14 	sts	0x14EF, r1
     ee8:	10 92 ee 14 	sts	0x14EE, r1
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <get_autonom_settings_from_bus>:
     ef2:	c4 df       	rcall	.-120    	; 0xe7c <get_data>
     ef4:	80 93 e9 13 	sts	0x13E9, r24
     ef8:	08 95       	ret

00000efa <get_char_from_bus>:
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	c0 91 e9 14 	lds	r28, 0x14E9
     f02:	d0 91 ea 14 	lds	r29, 0x14EA
     f06:	ba df       	rcall	.-140    	; 0xe7c <get_data>
     f08:	c6 51       	subi	r28, 0x16	; 22
     f0a:	dc 4e       	sbci	r29, 0xEC	; 236
     f0c:	88 83       	st	Y, r24
     f0e:	80 91 e9 14 	lds	r24, 0x14E9
     f12:	90 91 ea 14 	lds	r25, 0x14EA
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	90 93 ea 14 	sts	0x14EA, r25
     f1c:	80 93 e9 14 	sts	0x14E9, r24
     f20:	90 93 fa 14 	sts	0x14FA, r25
     f24:	80 93 f9 14 	sts	0x14F9, r24
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <get_sensor_from_bus>:
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	c0 91 fe 14 	lds	r28, 0x14FE
     f36:	d0 91 ff 14 	lds	r29, 0x14FF
     f3a:	c8 30       	cpi	r28, 0x08	; 8
     f3c:	d1 05       	cpc	r29, r1
     f3e:	99 f4       	brne	.+38     	; 0xf66 <get_sensor_from_bus+0x38>
     f40:	e0 e0       	ldi	r30, 0x00	; 0
     f42:	f5 e1       	ldi	r31, 0x15	; 21
     f44:	a8 e0       	ldi	r26, 0x08	; 8
     f46:	b5 e1       	ldi	r27, 0x15	; 21
     f48:	88 e0       	ldi	r24, 0x08	; 8
     f4a:	95 e1       	ldi	r25, 0x15	; 21
     f4c:	21 91       	ld	r18, Z+
     f4e:	2d 93       	st	X+, r18
     f50:	e8 17       	cp	r30, r24
     f52:	f9 07       	cpc	r31, r25
     f54:	d9 f7       	brne	.-10     	; 0xf4c <get_sensor_from_bus+0x1e>
     f56:	92 df       	rcall	.-220    	; 0xe7c <get_data>
     f58:	80 93 f8 14 	sts	0x14F8, r24
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	80 93 9e 13 	sts	0x139E, r24
     f62:	ee da       	rcall	.-2596   	; 0x540 <navigation_fill_buffer>
     f64:	0d c0       	rjmp	.+26     	; 0xf80 <get_sensor_from_bus+0x52>
     f66:	8a df       	rcall	.-236    	; 0xe7c <get_data>
     f68:	c0 50       	subi	r28, 0x00	; 0
     f6a:	db 4e       	sbci	r29, 0xEB	; 235
     f6c:	88 83       	st	Y, r24
     f6e:	80 91 fe 14 	lds	r24, 0x14FE
     f72:	90 91 ff 14 	lds	r25, 0x14FF
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	90 93 ff 14 	sts	0x14FF, r25
     f7c:	80 93 fe 14 	sts	0x14FE, r24
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <TWI_init>:
     f86:	80 93 f0 14 	sts	0x14F0, r24
     f8a:	80 34       	cpi	r24, 0x40	; 64
     f8c:	79 f0       	breq	.+30     	; 0xfac <TWI_init+0x26>
     f8e:	80 38       	cpi	r24, 0x80	; 128
     f90:	19 f0       	breq	.+6      	; 0xf98 <TWI_init+0x12>
     f92:	80 32       	cpi	r24, 0x20	; 32
     f94:	d1 f4       	brne	.+52     	; 0xfca <TWI_init+0x44>
     f96:	12 c0       	rjmp	.+36     	; 0xfbc <TWI_init+0x36>
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	88 b9       	out	0x08, r24	; 8
     f9c:	58 df       	rcall	.-336    	; 0xe4e <set_twi_reciever_enable>
     f9e:	8f e3       	ldi	r24, 0x3F	; 63
     fa0:	80 93 b8 00 	sts	0x00B8, r24
     fa4:	81 e8       	ldi	r24, 0x81	; 129
     fa6:	80 93 ba 00 	sts	0x00BA, r24
     faa:	08 95       	ret
     fac:	8f e3       	ldi	r24, 0x3F	; 63
     fae:	80 93 b8 00 	sts	0x00B8, r24
     fb2:	4d df       	rcall	.-358    	; 0xe4e <set_twi_reciever_enable>
     fb4:	80 e4       	ldi	r24, 0x40	; 64
     fb6:	80 93 ba 00 	sts	0x00BA, r24
     fba:	08 95       	ret
     fbc:	8f e3       	ldi	r24, 0x3F	; 63
     fbe:	80 93 b8 00 	sts	0x00B8, r24
     fc2:	45 df       	rcall	.-374    	; 0xe4e <set_twi_reciever_enable>
     fc4:	81 e2       	ldi	r24, 0x21	; 33
     fc6:	80 93 ba 00 	sts	0x00BA, r24
     fca:	08 95       	ret

00000fcc <TWI_send_autonom_settings>:
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	c8 2f       	mov	r28, r24
     fd2:	d6 2f       	mov	r29, r22
     fd4:	44 df       	rcall	.-376    	; 0xe5e <start_bus>
     fd6:	55 df       	rcall	.-342    	; 0xe82 <wait_for_bus>
     fd8:	90 91 b9 00 	lds	r25, 0x00B9
     fdc:	98 7f       	andi	r25, 0xF8	; 248
     fde:	98 30       	cpi	r25, 0x08	; 8
     fe0:	19 f0       	breq	.+6      	; 0xfe8 <TWI_send_autonom_settings+0x1c>
     fe2:	45 df       	rcall	.-374    	; 0xe6e <Error>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	20 c0       	rjmp	.+64     	; 0x1028 <TWI_send_autonom_settings+0x5c>
     fe8:	8c 2f       	mov	r24, r28
     fea:	51 df       	rcall	.-350    	; 0xe8e <send_data_and_wait>
     fec:	80 91 b9 00 	lds	r24, 0x00B9
     ff0:	88 7f       	andi	r24, 0xF8	; 248
     ff2:	88 31       	cpi	r24, 0x18	; 24
     ff4:	19 f0       	breq	.+6      	; 0xffc <TWI_send_autonom_settings+0x30>
     ff6:	3b df       	rcall	.-394    	; 0xe6e <Error>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	16 c0       	rjmp	.+44     	; 0x1028 <TWI_send_autonom_settings+0x5c>
     ffc:	85 e0       	ldi	r24, 0x05	; 5
     ffe:	47 df       	rcall	.-370    	; 0xe8e <send_data_and_wait>
    1000:	80 91 b9 00 	lds	r24, 0x00B9
    1004:	88 7f       	andi	r24, 0xF8	; 248
    1006:	88 32       	cpi	r24, 0x28	; 40
    1008:	19 f0       	breq	.+6      	; 0x1010 <TWI_send_autonom_settings+0x44>
    100a:	31 df       	rcall	.-414    	; 0xe6e <Error>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	0c c0       	rjmp	.+24     	; 0x1028 <TWI_send_autonom_settings+0x5c>
    1010:	8d 2f       	mov	r24, r29
    1012:	3d df       	rcall	.-390    	; 0xe8e <send_data_and_wait>
    1014:	80 91 b9 00 	lds	r24, 0x00B9
    1018:	88 7f       	andi	r24, 0xF8	; 248
    101a:	88 32       	cpi	r24, 0x28	; 40
    101c:	19 f0       	breq	.+6      	; 0x1024 <TWI_send_autonom_settings+0x58>
    101e:	27 df       	rcall	.-434    	; 0xe6e <Error>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <TWI_send_autonom_settings+0x5c>
    1024:	20 df       	rcall	.-448    	; 0xe66 <stop_bus>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <TWI_send_command>:
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	c8 2f       	mov	r28, r24
    1036:	d6 2f       	mov	r29, r22
    1038:	14 2f       	mov	r17, r20
    103a:	11 df       	rcall	.-478    	; 0xe5e <start_bus>
    103c:	22 df       	rcall	.-444    	; 0xe82 <wait_for_bus>
    103e:	90 91 b9 00 	lds	r25, 0x00B9
    1042:	98 7f       	andi	r25, 0xF8	; 248
    1044:	98 30       	cpi	r25, 0x08	; 8
    1046:	19 f0       	breq	.+6      	; 0x104e <TWI_send_command+0x20>
    1048:	12 df       	rcall	.-476    	; 0xe6e <Error>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	34 c0       	rjmp	.+104    	; 0x10b6 <TWI_send_command+0x88>
    104e:	80 e2       	ldi	r24, 0x20	; 32
    1050:	1e df       	rcall	.-452    	; 0xe8e <send_data_and_wait>
    1052:	80 91 b9 00 	lds	r24, 0x00B9
    1056:	88 7f       	andi	r24, 0xF8	; 248
    1058:	88 31       	cpi	r24, 0x18	; 24
    105a:	19 f0       	breq	.+6      	; 0x1062 <TWI_send_command+0x34>
    105c:	08 df       	rcall	.-496    	; 0xe6e <Error>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	2a c0       	rjmp	.+84     	; 0x10b6 <TWI_send_command+0x88>
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	14 df       	rcall	.-472    	; 0xe8e <send_data_and_wait>
    1066:	80 91 b9 00 	lds	r24, 0x00B9
    106a:	88 7f       	andi	r24, 0xF8	; 248
    106c:	88 32       	cpi	r24, 0x28	; 40
    106e:	19 f0       	breq	.+6      	; 0x1076 <TWI_send_command+0x48>
    1070:	fe de       	rcall	.-516    	; 0xe6e <Error>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	20 c0       	rjmp	.+64     	; 0x10b6 <TWI_send_command+0x88>
    1076:	8c 2f       	mov	r24, r28
    1078:	0a df       	rcall	.-492    	; 0xe8e <send_data_and_wait>
    107a:	80 91 b9 00 	lds	r24, 0x00B9
    107e:	88 7f       	andi	r24, 0xF8	; 248
    1080:	88 32       	cpi	r24, 0x28	; 40
    1082:	19 f0       	breq	.+6      	; 0x108a <TWI_send_command+0x5c>
    1084:	f4 de       	rcall	.-536    	; 0xe6e <Error>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	16 c0       	rjmp	.+44     	; 0x10b6 <TWI_send_command+0x88>
    108a:	8d 2f       	mov	r24, r29
    108c:	00 df       	rcall	.-512    	; 0xe8e <send_data_and_wait>
    108e:	80 91 b9 00 	lds	r24, 0x00B9
    1092:	88 7f       	andi	r24, 0xF8	; 248
    1094:	88 32       	cpi	r24, 0x28	; 40
    1096:	19 f0       	breq	.+6      	; 0x109e <TWI_send_command+0x70>
    1098:	ea de       	rcall	.-556    	; 0xe6e <Error>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	0c c0       	rjmp	.+24     	; 0x10b6 <TWI_send_command+0x88>
    109e:	81 2f       	mov	r24, r17
    10a0:	f6 de       	rcall	.-532    	; 0xe8e <send_data_and_wait>
    10a2:	80 91 b9 00 	lds	r24, 0x00B9
    10a6:	88 7f       	andi	r24, 0xF8	; 248
    10a8:	88 32       	cpi	r24, 0x28	; 40
    10aa:	19 f0       	breq	.+6      	; 0x10b2 <TWI_send_command+0x84>
    10ac:	e0 de       	rcall	.-576    	; 0xe6e <Error>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <TWI_send_command+0x88>
    10b2:	d9 de       	rcall	.-590    	; 0xe66 <stop_bus>
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	08 95       	ret

000010be <TWI_send_string>:
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	c8 2f       	mov	r28, r24
    10cc:	e6 2e       	mov	r14, r22
    10ce:	f7 2e       	mov	r15, r23
    10d0:	c6 de       	rcall	.-628    	; 0xe5e <start_bus>
    10d2:	d7 de       	rcall	.-594    	; 0xe82 <wait_for_bus>
    10d4:	90 91 b9 00 	lds	r25, 0x00B9
    10d8:	98 7f       	andi	r25, 0xF8	; 248
    10da:	98 30       	cpi	r25, 0x08	; 8
    10dc:	19 f0       	breq	.+6      	; 0x10e4 <TWI_send_string+0x26>
    10de:	c7 de       	rcall	.-626    	; 0xe6e <Error>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	2c c0       	rjmp	.+88     	; 0x113c <TWI_send_string+0x7e>
    10e4:	8c 2f       	mov	r24, r28
    10e6:	d3 de       	rcall	.-602    	; 0xe8e <send_data_and_wait>
    10e8:	80 91 b9 00 	lds	r24, 0x00B9
    10ec:	88 7f       	andi	r24, 0xF8	; 248
    10ee:	88 31       	cpi	r24, 0x18	; 24
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <TWI_send_string+0x3a>
    10f2:	bd de       	rcall	.-646    	; 0xe6e <Error>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	22 c0       	rjmp	.+68     	; 0x113c <TWI_send_string+0x7e>
    10f8:	89 e1       	ldi	r24, 0x19	; 25
    10fa:	c9 de       	rcall	.-622    	; 0xe8e <send_data_and_wait>
    10fc:	80 91 b9 00 	lds	r24, 0x00B9
    1100:	88 7f       	andi	r24, 0xF8	; 248
    1102:	88 32       	cpi	r24, 0x28	; 40
    1104:	29 f4       	brne	.+10     	; 0x1110 <TWI_send_string+0x52>
    1106:	0e 2d       	mov	r16, r14
    1108:	1f 2d       	mov	r17, r15
    110a:	c0 e0       	ldi	r28, 0x00	; 0
    110c:	d0 e0       	ldi	r29, 0x00	; 0
    110e:	08 c0       	rjmp	.+16     	; 0x1120 <TWI_send_string+0x62>
    1110:	ae de       	rcall	.-676    	; 0xe6e <Error>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	13 c0       	rjmp	.+38     	; 0x113c <TWI_send_string+0x7e>
    1116:	f8 01       	movw	r30, r16
    1118:	81 91       	ld	r24, Z+
    111a:	8f 01       	movw	r16, r30
    111c:	b8 de       	rcall	.-656    	; 0xe8e <send_data_and_wait>
    111e:	21 96       	adiw	r28, 0x01	; 1
    1120:	ee 2d       	mov	r30, r14
    1122:	ff 2d       	mov	r31, r15
    1124:	df 01       	movw	r26, r30
    1126:	0d 90       	ld	r0, X+
    1128:	00 20       	and	r0, r0
    112a:	e9 f7       	brne	.-6      	; 0x1126 <TWI_send_string+0x68>
    112c:	11 97       	sbiw	r26, 0x01	; 1
    112e:	ae 1b       	sub	r26, r30
    1130:	bf 0b       	sbc	r27, r31
    1132:	ca 17       	cp	r28, r26
    1134:	db 07       	cpc	r29, r27
    1136:	78 f3       	brcs	.-34     	; 0x1116 <TWI_send_string+0x58>
    1138:	96 de       	rcall	.-724    	; 0xe66 <stop_bus>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	08 95       	ret

0000114a <TWI_send_string_fixed_length>:
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	c8 2f       	mov	r28, r24
    1158:	e6 2e       	mov	r14, r22
    115a:	f7 2e       	mov	r15, r23
    115c:	8a 01       	movw	r16, r20
    115e:	7f de       	rcall	.-770    	; 0xe5e <start_bus>
    1160:	90 de       	rcall	.-736    	; 0xe82 <wait_for_bus>
    1162:	90 91 b9 00 	lds	r25, 0x00B9
    1166:	98 7f       	andi	r25, 0xF8	; 248
    1168:	98 30       	cpi	r25, 0x08	; 8
    116a:	19 f0       	breq	.+6      	; 0x1172 <TWI_send_string_fixed_length+0x28>
    116c:	80 de       	rcall	.-768    	; 0xe6e <Error>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	23 c0       	rjmp	.+70     	; 0x11b8 <TWI_send_string_fixed_length+0x6e>
    1172:	8c 2f       	mov	r24, r28
    1174:	8c de       	rcall	.-744    	; 0xe8e <send_data_and_wait>
    1176:	80 91 b9 00 	lds	r24, 0x00B9
    117a:	88 7f       	andi	r24, 0xF8	; 248
    117c:	88 31       	cpi	r24, 0x18	; 24
    117e:	19 f0       	breq	.+6      	; 0x1186 <TWI_send_string_fixed_length+0x3c>
    1180:	76 de       	rcall	.-788    	; 0xe6e <Error>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	19 c0       	rjmp	.+50     	; 0x11b8 <TWI_send_string_fixed_length+0x6e>
    1186:	89 e1       	ldi	r24, 0x19	; 25
    1188:	82 de       	rcall	.-764    	; 0xe8e <send_data_and_wait>
    118a:	80 91 b9 00 	lds	r24, 0x00B9
    118e:	88 7f       	andi	r24, 0xF8	; 248
    1190:	88 32       	cpi	r24, 0x28	; 40
    1192:	21 f4       	brne	.+8      	; 0x119c <TWI_send_string_fixed_length+0x52>
    1194:	10 16       	cp	r1, r16
    1196:	11 06       	cpc	r1, r17
    1198:	24 f0       	brlt	.+8      	; 0x11a2 <TWI_send_string_fixed_length+0x58>
    119a:	0c c0       	rjmp	.+24     	; 0x11b4 <TWI_send_string_fixed_length+0x6a>
    119c:	68 de       	rcall	.-816    	; 0xe6e <Error>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <TWI_send_string_fixed_length+0x6e>
    11a2:	ce 2d       	mov	r28, r14
    11a4:	df 2d       	mov	r29, r15
    11a6:	0c 0f       	add	r16, r28
    11a8:	1d 1f       	adc	r17, r29
    11aa:	89 91       	ld	r24, Y+
    11ac:	70 de       	rcall	.-800    	; 0xe8e <send_data_and_wait>
    11ae:	c0 17       	cp	r28, r16
    11b0:	d1 07       	cpc	r29, r17
    11b2:	d9 f7       	brne	.-10     	; 0x11aa <TWI_send_string_fixed_length+0x60>
    11b4:	58 de       	rcall	.-848    	; 0xe66 <stop_bus>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	08 95       	ret

000011c6 <TWI_send_float>:
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <TWI_send_float+0xe>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <TWI_send_float+0x10>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	18 2f       	mov	r17, r24
    11dc:	49 83       	std	Y+1, r20	; 0x01
    11de:	5a 83       	std	Y+2, r21	; 0x02
    11e0:	6b 83       	std	Y+3, r22	; 0x03
    11e2:	7c 83       	std	Y+4, r23	; 0x04
    11e4:	3c de       	rcall	.-904    	; 0xe5e <start_bus>
    11e6:	4d de       	rcall	.-870    	; 0xe82 <wait_for_bus>
    11e8:	90 91 b9 00 	lds	r25, 0x00B9
    11ec:	98 7f       	andi	r25, 0xF8	; 248
    11ee:	98 30       	cpi	r25, 0x08	; 8
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <TWI_send_float+0x32>
    11f2:	3d de       	rcall	.-902    	; 0xe6e <Error>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	24 c0       	rjmp	.+72     	; 0x1240 <TWI_send_float+0x7a>
    11f8:	81 2f       	mov	r24, r17
    11fa:	49 de       	rcall	.-878    	; 0xe8e <send_data_and_wait>
    11fc:	80 91 b9 00 	lds	r24, 0x00B9
    1200:	88 7f       	andi	r24, 0xF8	; 248
    1202:	88 31       	cpi	r24, 0x18	; 24
    1204:	19 f0       	breq	.+6      	; 0x120c <TWI_send_float+0x46>
    1206:	33 de       	rcall	.-922    	; 0xe6e <Error>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	1a c0       	rjmp	.+52     	; 0x1240 <TWI_send_float+0x7a>
    120c:	86 e0       	ldi	r24, 0x06	; 6
    120e:	3f de       	rcall	.-898    	; 0xe8e <send_data_and_wait>
    1210:	80 91 b9 00 	lds	r24, 0x00B9
    1214:	88 7f       	andi	r24, 0xF8	; 248
    1216:	88 32       	cpi	r24, 0x28	; 40
    1218:	19 f0       	breq	.+6      	; 0x1220 <TWI_send_float+0x5a>
    121a:	29 de       	rcall	.-942    	; 0xe6e <Error>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	10 c0       	rjmp	.+32     	; 0x1240 <TWI_send_float+0x7a>
    1220:	8e 01       	movw	r16, r28
    1222:	0f 5f       	subi	r16, 0xFF	; 255
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	7e 01       	movw	r14, r28
    1228:	85 e0       	ldi	r24, 0x05	; 5
    122a:	e8 0e       	add	r14, r24
    122c:	f1 1c       	adc	r15, r1
    122e:	f8 01       	movw	r30, r16
    1230:	81 91       	ld	r24, Z+
    1232:	8f 01       	movw	r16, r30
    1234:	2c de       	rcall	.-936    	; 0xe8e <send_data_and_wait>
    1236:	0e 15       	cp	r16, r14
    1238:	1f 05       	cpc	r17, r15
    123a:	c9 f7       	brne	.-14     	; 0x122e <TWI_send_float+0x68>
    123c:	14 de       	rcall	.-984    	; 0xe66 <stop_bus>
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	08 95       	ret

00001256 <TWI_get_command>:
    1256:	8a 51       	subi	r24, 0x1A	; 26
    1258:	9c 4e       	sbci	r25, 0xEC	; 236
    125a:	fc 01       	movw	r30, r24
    125c:	80 81       	ld	r24, Z
    125e:	08 95       	ret

00001260 <TWI_get_sensor>:
    1260:	88 5f       	subi	r24, 0xF8	; 248
    1262:	9a 4e       	sbci	r25, 0xEA	; 234
    1264:	fc 01       	movw	r30, r24
    1266:	80 81       	ld	r24, Z
    1268:	08 95       	ret

0000126a <TWI_get_control_setting>:
    126a:	85 51       	subi	r24, 0x15	; 21
    126c:	9b 4e       	sbci	r25, 0xEB	; 235
    126e:	fc 01       	movw	r30, r24
    1270:	80 81       	ld	r24, Z
    1272:	08 95       	ret

00001274 <TWI_get_autonom_settings>:
    1274:	80 91 e9 13 	lds	r24, 0x13E9
    1278:	08 95       	ret

0000127a <TWI_get_elevation>:
    127a:	80 91 f6 14 	lds	r24, 0x14F6
    127e:	08 95       	ret

00001280 <TWI_command_flag>:
    1280:	80 91 9d 13 	lds	r24, 0x139D
    1284:	88 23       	and	r24, r24
    1286:	21 f0       	breq	.+8      	; 0x1290 <TWI_command_flag+0x10>
    1288:	10 92 9d 13 	sts	0x139D, r1
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	08 95       	ret
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	08 95       	ret

00001294 <TWI_control_settings_flag>:
    1294:	80 91 9c 13 	lds	r24, 0x139C
    1298:	88 23       	and	r24, r24
    129a:	21 f0       	breq	.+8      	; 0x12a4 <TWI_control_settings_flag+0x10>
    129c:	10 92 9c 13 	sts	0x139C, r1
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	08 95       	ret
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	08 95       	ret

000012a8 <TWI_autonom_settings_flag>:
    12a8:	80 91 9b 13 	lds	r24, 0x139B
    12ac:	88 23       	and	r24, r24
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <TWI_autonom_settings_flag+0x10>
    12b0:	10 92 9b 13 	sts	0x139B, r1
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	08 95       	ret
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	08 95       	ret

000012bc <TWI_elevation_flag>:
    12bc:	80 91 9a 13 	lds	r24, 0x139A
    12c0:	88 23       	and	r24, r24
    12c2:	21 f0       	breq	.+8      	; 0x12cc <TWI_elevation_flag+0x10>
    12c4:	10 92 9a 13 	sts	0x139A, r1
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	08 95       	ret
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	08 95       	ret

000012d0 <write_to_TwiFIFO>:
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	d8 2f       	mov	r29, r24
    12da:	c9 2f       	mov	r28, r25
    12dc:	60 91 f9 14 	lds	r22, 0x14F9
    12e0:	80 91 09 01 	lds	r24, 0x0109
    12e4:	90 91 0a 01 	lds	r25, 0x010A
    12e8:	b6 d8       	rcall	.-3732   	; 0x456 <FifoWrite>
    12ea:	81 11       	cpse	r24, r1
    12ec:	1f c0       	rjmp	.+62     	; 0x132c <write_to_TwiFIFO+0x5c>
    12ee:	20 91 f9 14 	lds	r18, 0x14F9
    12f2:	30 91 fa 14 	lds	r19, 0x14FA
    12f6:	12 16       	cp	r1, r18
    12f8:	13 06       	cpc	r1, r19
    12fa:	d4 f4       	brge	.+52     	; 0x1330 <write_to_TwiFIFO+0x60>
    12fc:	0d 2f       	mov	r16, r29
    12fe:	1c 2f       	mov	r17, r28
    1300:	c0 e0       	ldi	r28, 0x00	; 0
    1302:	d0 e0       	ldi	r29, 0x00	; 0
    1304:	f8 01       	movw	r30, r16
    1306:	61 91       	ld	r22, Z+
    1308:	8f 01       	movw	r16, r30
    130a:	80 91 09 01 	lds	r24, 0x0109
    130e:	90 91 0a 01 	lds	r25, 0x010A
    1312:	a1 d8       	rcall	.-3774   	; 0x456 <FifoWrite>
    1314:	81 11       	cpse	r24, r1
    1316:	0e c0       	rjmp	.+28     	; 0x1334 <write_to_TwiFIFO+0x64>
    1318:	21 96       	adiw	r28, 0x01	; 1
    131a:	80 91 f9 14 	lds	r24, 0x14F9
    131e:	90 91 fa 14 	lds	r25, 0x14FA
    1322:	c8 17       	cp	r28, r24
    1324:	d9 07       	cpc	r29, r25
    1326:	74 f3       	brlt	.-36     	; 0x1304 <write_to_TwiFIFO+0x34>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <write_to_TwiFIFO+0x66>
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <write_to_TwiFIFO+0x66>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <write_to_TwiFIFO+0x66>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	08 95       	ret

00001340 <__vector_26>:
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	0b b6       	in	r0, 0x3b	; 59
    134c:	0f 92       	push	r0
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	80 91 f0 14 	lds	r24, 0x14F0
    136e:	80 34       	cpi	r24, 0x40	; 64
    1370:	09 f4       	brne	.+2      	; 0x1374 <__vector_26+0x34>
    1372:	87 c0       	rjmp	.+270    	; 0x1482 <__vector_26+0x142>
    1374:	80 38       	cpi	r24, 0x80	; 128
    1376:	21 f0       	breq	.+8      	; 0x1380 <__vector_26+0x40>
    1378:	80 32       	cpi	r24, 0x20	; 32
    137a:	09 f0       	breq	.+2      	; 0x137e <__vector_26+0x3e>
    137c:	57 c1       	rjmp	.+686    	; 0x162c <__vector_26+0x2ec>
    137e:	c9 c0       	rjmp	.+402    	; 0x1512 <__vector_26+0x1d2>
    1380:	80 91 b9 00 	lds	r24, 0x00B9
    1384:	88 7f       	andi	r24, 0xF8	; 248
    1386:	80 36       	cpi	r24, 0x60	; 96
    1388:	29 f0       	breq	.+10     	; 0x1394 <__vector_26+0x54>
    138a:	80 91 b9 00 	lds	r24, 0x00B9
    138e:	88 7f       	andi	r24, 0xF8	; 248
    1390:	88 36       	cpi	r24, 0x68	; 104
    1392:	21 f4       	brne	.+8      	; 0x139c <__vector_26+0x5c>
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 f3 14 	sts	0x14F3, r24
    139a:	71 c0       	rjmp	.+226    	; 0x147e <__vector_26+0x13e>
    139c:	80 91 b9 00 	lds	r24, 0x00B9
    13a0:	88 7f       	andi	r24, 0xF8	; 248
    13a2:	80 37       	cpi	r24, 0x70	; 112
    13a4:	29 f0       	breq	.+10     	; 0x13b0 <__vector_26+0x70>
    13a6:	80 91 b9 00 	lds	r24, 0x00B9
    13aa:	88 7f       	andi	r24, 0xF8	; 248
    13ac:	88 37       	cpi	r24, 0x78	; 120
    13ae:	39 f4       	brne	.+14     	; 0x13be <__vector_26+0x7e>
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	90 93 fd 14 	sts	0x14FD, r25
    13b8:	80 93 fc 14 	sts	0x14FC, r24
    13bc:	60 c0       	rjmp	.+192    	; 0x147e <__vector_26+0x13e>
    13be:	80 91 b9 00 	lds	r24, 0x00B9
    13c2:	88 7f       	andi	r24, 0xF8	; 248
    13c4:	80 38       	cpi	r24, 0x80	; 128
    13c6:	b9 f5       	brne	.+110    	; 0x1436 <__vector_26+0xf6>
    13c8:	80 91 f3 14 	lds	r24, 0x14F3
    13cc:	88 23       	and	r24, r24
    13ce:	41 f0       	breq	.+16     	; 0x13e0 <__vector_26+0xa0>
    13d0:	55 dd       	rcall	.-1366   	; 0xe7c <get_data>
    13d2:	80 93 fc 14 	sts	0x14FC, r24
    13d6:	10 92 fd 14 	sts	0x14FD, r1
    13da:	10 92 f3 14 	sts	0x14F3, r1
    13de:	4f c0       	rjmp	.+158    	; 0x147e <__vector_26+0x13e>
    13e0:	80 91 fc 14 	lds	r24, 0x14FC
    13e4:	90 91 fd 14 	lds	r25, 0x14FD
    13e8:	85 30       	cpi	r24, 0x05	; 5
    13ea:	91 05       	cpc	r25, r1
    13ec:	71 f0       	breq	.+28     	; 0x140a <__vector_26+0xca>
    13ee:	24 f4       	brge	.+8      	; 0x13f8 <__vector_26+0xb8>
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <__vector_26+0xb6>
    13f4:	44 c0       	rjmp	.+136    	; 0x147e <__vector_26+0x13e>
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <__vector_26+0xc6>
    13f8:	86 30       	cpi	r24, 0x06	; 6
    13fa:	91 05       	cpc	r25, r1
    13fc:	51 f0       	breq	.+20     	; 0x1412 <__vector_26+0xd2>
    13fe:	49 97       	sbiw	r24, 0x19	; 25
    1400:	09 f0       	breq	.+2      	; 0x1404 <__vector_26+0xc4>
    1402:	3d c0       	rjmp	.+122    	; 0x147e <__vector_26+0x13e>
    1404:	04 c0       	rjmp	.+8      	; 0x140e <__vector_26+0xce>
    1406:	64 dd       	rcall	.-1336   	; 0xed0 <get_control_settings_from_bus>
    1408:	3a c0       	rjmp	.+116    	; 0x147e <__vector_26+0x13e>
    140a:	73 dd       	rcall	.-1306   	; 0xef2 <get_autonom_settings_from_bus>
    140c:	38 c0       	rjmp	.+112    	; 0x147e <__vector_26+0x13e>
    140e:	75 dd       	rcall	.-1302   	; 0xefa <get_char_from_bus>
    1410:	36 c0       	rjmp	.+108    	; 0x147e <__vector_26+0x13e>
    1412:	c0 91 f1 14 	lds	r28, 0x14F1
    1416:	d0 91 f2 14 	lds	r29, 0x14F2
    141a:	30 dd       	rcall	.-1440   	; 0xe7c <get_data>
    141c:	ce 51       	subi	r28, 0x1E	; 30
    141e:	dc 4e       	sbci	r29, 0xEC	; 236
    1420:	88 83       	st	Y, r24
    1422:	80 91 f1 14 	lds	r24, 0x14F1
    1426:	90 91 f2 14 	lds	r25, 0x14F2
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	90 93 f2 14 	sts	0x14F2, r25
    1430:	80 93 f1 14 	sts	0x14F1, r24
    1434:	24 c0       	rjmp	.+72     	; 0x147e <__vector_26+0x13e>
    1436:	80 91 b9 00 	lds	r24, 0x00B9
    143a:	88 7f       	andi	r24, 0xF8	; 248
    143c:	80 39       	cpi	r24, 0x90	; 144
    143e:	11 f4       	brne	.+4      	; 0x1444 <__vector_26+0x104>
    1440:	76 dd       	rcall	.-1300   	; 0xf2e <get_sensor_from_bus>
    1442:	1d c0       	rjmp	.+58     	; 0x147e <__vector_26+0x13e>
    1444:	80 91 b9 00 	lds	r24, 0x00B9
    1448:	88 7f       	andi	r24, 0xF8	; 248
    144a:	80 3a       	cpi	r24, 0xA0	; 160
    144c:	c1 f4       	brne	.+48     	; 0x147e <__vector_26+0x13e>
    144e:	25 dd       	rcall	.-1462   	; 0xe9a <stop_twi>
    1450:	80 91 fc 14 	lds	r24, 0x14FC
    1454:	90 91 fd 14 	lds	r25, 0x14FD
    1458:	85 30       	cpi	r24, 0x05	; 5
    145a:	91 05       	cpc	r25, r1
    145c:	49 f0       	breq	.+18     	; 0x1470 <__vector_26+0x130>
    145e:	89 31       	cpi	r24, 0x19	; 25
    1460:	91 05       	cpc	r25, r1
    1462:	51 f0       	breq	.+20     	; 0x1478 <__vector_26+0x138>
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	59 f4       	brne	.+22     	; 0x147e <__vector_26+0x13e>
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 9c 13 	sts	0x139C, r24
    146e:	07 c0       	rjmp	.+14     	; 0x147e <__vector_26+0x13e>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	80 93 9b 13 	sts	0x139B, r24
    1476:	03 c0       	rjmp	.+6      	; 0x147e <__vector_26+0x13e>
    1478:	8a ee       	ldi	r24, 0xEA	; 234
    147a:	93 e1       	ldi	r25, 0x13	; 19
    147c:	29 df       	rcall	.-430    	; 0x12d0 <write_to_TwiFIFO>
    147e:	22 dd       	rcall	.-1468   	; 0xec4 <reset_TWI>
    1480:	d5 c0       	rjmp	.+426    	; 0x162c <__vector_26+0x2ec>
    1482:	80 91 b9 00 	lds	r24, 0x00B9
    1486:	88 7f       	andi	r24, 0xF8	; 248
    1488:	80 36       	cpi	r24, 0x60	; 96
    148a:	29 f0       	breq	.+10     	; 0x1496 <__vector_26+0x156>
    148c:	80 91 b9 00 	lds	r24, 0x00B9
    1490:	88 7f       	andi	r24, 0xF8	; 248
    1492:	88 36       	cpi	r24, 0x68	; 104
    1494:	21 f4       	brne	.+8      	; 0x149e <__vector_26+0x15e>
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	80 93 f3 14 	sts	0x14F3, r24
    149c:	38 c0       	rjmp	.+112    	; 0x150e <__vector_26+0x1ce>
    149e:	80 91 b9 00 	lds	r24, 0x00B9
    14a2:	88 7f       	andi	r24, 0xF8	; 248
    14a4:	80 38       	cpi	r24, 0x80	; 128
    14a6:	e1 f4       	brne	.+56     	; 0x14e0 <__vector_26+0x1a0>
    14a8:	80 91 f3 14 	lds	r24, 0x14F3
    14ac:	88 23       	and	r24, r24
    14ae:	41 f0       	breq	.+16     	; 0x14c0 <__vector_26+0x180>
    14b0:	e5 dc       	rcall	.-1590   	; 0xe7c <get_data>
    14b2:	80 93 fc 14 	sts	0x14FC, r24
    14b6:	10 92 fd 14 	sts	0x14FD, r1
    14ba:	10 92 f3 14 	sts	0x14F3, r1
    14be:	27 c0       	rjmp	.+78     	; 0x150e <__vector_26+0x1ce>
    14c0:	80 91 fc 14 	lds	r24, 0x14FC
    14c4:	90 91 fd 14 	lds	r25, 0x14FD
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	91 05       	cpc	r25, r1
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <__vector_26+0x194>
    14ce:	49 97       	sbiw	r24, 0x19	; 25
    14d0:	f1 f4       	brne	.+60     	; 0x150e <__vector_26+0x1ce>
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <__vector_26+0x19c>
    14d4:	d3 dc       	rcall	.-1626   	; 0xe7c <get_data>
    14d6:	80 93 fb 14 	sts	0x14FB, r24
    14da:	19 c0       	rjmp	.+50     	; 0x150e <__vector_26+0x1ce>
    14dc:	0e dd       	rcall	.-1508   	; 0xefa <get_char_from_bus>
    14de:	17 c0       	rjmp	.+46     	; 0x150e <__vector_26+0x1ce>
    14e0:	80 91 b9 00 	lds	r24, 0x00B9
    14e4:	88 7f       	andi	r24, 0xF8	; 248
    14e6:	80 3a       	cpi	r24, 0xA0	; 160
    14e8:	91 f4       	brne	.+36     	; 0x150e <__vector_26+0x1ce>
    14ea:	d7 dc       	rcall	.-1618   	; 0xe9a <stop_twi>
    14ec:	80 91 fc 14 	lds	r24, 0x14FC
    14f0:	90 91 fd 14 	lds	r25, 0x14FD
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	91 05       	cpc	r25, r1
    14f8:	19 f0       	breq	.+6      	; 0x1500 <__vector_26+0x1c0>
    14fa:	49 97       	sbiw	r24, 0x19	; 25
    14fc:	41 f4       	brne	.+16     	; 0x150e <__vector_26+0x1ce>
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <__vector_26+0x1c8>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 99 13 	sts	0x1399, r24
    1506:	03 c0       	rjmp	.+6      	; 0x150e <__vector_26+0x1ce>
    1508:	8a ee       	ldi	r24, 0xEA	; 234
    150a:	93 e1       	ldi	r25, 0x13	; 19
    150c:	e1 de       	rcall	.-574    	; 0x12d0 <write_to_TwiFIFO>
    150e:	da dc       	rcall	.-1612   	; 0xec4 <reset_TWI>
    1510:	8d c0       	rjmp	.+282    	; 0x162c <__vector_26+0x2ec>
    1512:	80 91 b9 00 	lds	r24, 0x00B9
    1516:	88 7f       	andi	r24, 0xF8	; 248
    1518:	80 36       	cpi	r24, 0x60	; 96
    151a:	29 f0       	breq	.+10     	; 0x1526 <__vector_26+0x1e6>
    151c:	80 91 b9 00 	lds	r24, 0x00B9
    1520:	88 7f       	andi	r24, 0xF8	; 248
    1522:	88 36       	cpi	r24, 0x68	; 104
    1524:	21 f4       	brne	.+8      	; 0x152e <__vector_26+0x1ee>
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 f3 14 	sts	0x14F3, r24
    152c:	7e c0       	rjmp	.+252    	; 0x162a <__vector_26+0x2ea>
    152e:	80 91 b9 00 	lds	r24, 0x00B9
    1532:	88 7f       	andi	r24, 0xF8	; 248
    1534:	80 37       	cpi	r24, 0x70	; 112
    1536:	29 f0       	breq	.+10     	; 0x1542 <__vector_26+0x202>
    1538:	80 91 b9 00 	lds	r24, 0x00B9
    153c:	88 7f       	andi	r24, 0xF8	; 248
    153e:	88 37       	cpi	r24, 0x78	; 120
    1540:	39 f4       	brne	.+14     	; 0x1550 <__vector_26+0x210>
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	90 93 fd 14 	sts	0x14FD, r25
    154a:	80 93 fc 14 	sts	0x14FC, r24
    154e:	6d c0       	rjmp	.+218    	; 0x162a <__vector_26+0x2ea>
    1550:	80 91 b9 00 	lds	r24, 0x00B9
    1554:	88 7f       	andi	r24, 0xF8	; 248
    1556:	80 38       	cpi	r24, 0x80	; 128
    1558:	09 f0       	breq	.+2      	; 0x155c <__vector_26+0x21c>
    155a:	3a c0       	rjmp	.+116    	; 0x15d0 <__vector_26+0x290>
    155c:	80 91 f3 14 	lds	r24, 0x14F3
    1560:	88 23       	and	r24, r24
    1562:	41 f0       	breq	.+16     	; 0x1574 <__vector_26+0x234>
    1564:	8b dc       	rcall	.-1770   	; 0xe7c <get_data>
    1566:	80 93 fc 14 	sts	0x14FC, r24
    156a:	10 92 fd 14 	sts	0x14FD, r1
    156e:	10 92 f3 14 	sts	0x14F3, r1
    1572:	5b c0       	rjmp	.+182    	; 0x162a <__vector_26+0x2ea>
    1574:	80 91 fc 14 	lds	r24, 0x14FC
    1578:	90 91 fd 14 	lds	r25, 0x14FD
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	91 05       	cpc	r25, r1
    1580:	19 f1       	breq	.+70     	; 0x15c8 <__vector_26+0x288>
    1582:	1c f4       	brge	.+6      	; 0x158a <__vector_26+0x24a>
    1584:	89 2b       	or	r24, r25
    1586:	41 f0       	breq	.+16     	; 0x1598 <__vector_26+0x258>
    1588:	50 c0       	rjmp	.+160    	; 0x162a <__vector_26+0x2ea>
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	91 05       	cpc	r25, r1
    158e:	b1 f0       	breq	.+44     	; 0x15bc <__vector_26+0x27c>
    1590:	05 97       	sbiw	r24, 0x05	; 5
    1592:	09 f0       	breq	.+2      	; 0x1596 <__vector_26+0x256>
    1594:	4a c0       	rjmp	.+148    	; 0x162a <__vector_26+0x2ea>
    1596:	1a c0       	rjmp	.+52     	; 0x15cc <__vector_26+0x28c>
    1598:	c0 91 f4 14 	lds	r28, 0x14F4
    159c:	d0 91 f5 14 	lds	r29, 0x14F5
    15a0:	6d dc       	rcall	.-1830   	; 0xe7c <get_data>
    15a2:	ca 51       	subi	r28, 0x1A	; 26
    15a4:	dc 4e       	sbci	r29, 0xEC	; 236
    15a6:	88 83       	st	Y, r24
    15a8:	80 91 f4 14 	lds	r24, 0x14F4
    15ac:	90 91 f5 14 	lds	r25, 0x14F5
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	90 93 f5 14 	sts	0x14F5, r25
    15b6:	80 93 f4 14 	sts	0x14F4, r24
    15ba:	37 c0       	rjmp	.+110    	; 0x162a <__vector_26+0x2ea>
    15bc:	5f dc       	rcall	.-1858   	; 0xe7c <get_data>
    15be:	80 93 f6 14 	sts	0x14F6, r24
    15c2:	10 92 f7 14 	sts	0x14F7, r1
    15c6:	31 c0       	rjmp	.+98     	; 0x162a <__vector_26+0x2ea>
    15c8:	83 dc       	rcall	.-1786   	; 0xed0 <get_control_settings_from_bus>
    15ca:	2f c0       	rjmp	.+94     	; 0x162a <__vector_26+0x2ea>
    15cc:	92 dc       	rcall	.-1756   	; 0xef2 <get_autonom_settings_from_bus>
    15ce:	2d c0       	rjmp	.+90     	; 0x162a <__vector_26+0x2ea>
    15d0:	80 91 b9 00 	lds	r24, 0x00B9
    15d4:	88 7f       	andi	r24, 0xF8	; 248
    15d6:	80 39       	cpi	r24, 0x90	; 144
    15d8:	11 f4       	brne	.+4      	; 0x15de <__vector_26+0x29e>
    15da:	a9 dc       	rcall	.-1710   	; 0xf2e <get_sensor_from_bus>
    15dc:	26 c0       	rjmp	.+76     	; 0x162a <__vector_26+0x2ea>
    15de:	80 91 b9 00 	lds	r24, 0x00B9
    15e2:	88 7f       	andi	r24, 0xF8	; 248
    15e4:	80 3a       	cpi	r24, 0xA0	; 160
    15e6:	09 f5       	brne	.+66     	; 0x162a <__vector_26+0x2ea>
    15e8:	58 dc       	rcall	.-1872   	; 0xe9a <stop_twi>
    15ea:	80 91 fc 14 	lds	r24, 0x14FC
    15ee:	90 91 fd 14 	lds	r25, 0x14FD
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	91 f0       	breq	.+36     	; 0x161c <__vector_26+0x2dc>
    15f8:	1c f4       	brge	.+6      	; 0x1600 <__vector_26+0x2c0>
    15fa:	89 2b       	or	r24, r25
    15fc:	39 f0       	breq	.+14     	; 0x160c <__vector_26+0x2cc>
    15fe:	15 c0       	rjmp	.+42     	; 0x162a <__vector_26+0x2ea>
    1600:	84 30       	cpi	r24, 0x04	; 4
    1602:	91 05       	cpc	r25, r1
    1604:	39 f0       	breq	.+14     	; 0x1614 <__vector_26+0x2d4>
    1606:	05 97       	sbiw	r24, 0x05	; 5
    1608:	81 f4       	brne	.+32     	; 0x162a <__vector_26+0x2ea>
    160a:	0c c0       	rjmp	.+24     	; 0x1624 <__vector_26+0x2e4>
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	80 93 9d 13 	sts	0x139D, r24
    1612:	0b c0       	rjmp	.+22     	; 0x162a <__vector_26+0x2ea>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 9a 13 	sts	0x139A, r24
    161a:	07 c0       	rjmp	.+14     	; 0x162a <__vector_26+0x2ea>
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	80 93 9c 13 	sts	0x139C, r24
    1622:	03 c0       	rjmp	.+6      	; 0x162a <__vector_26+0x2ea>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 93 9b 13 	sts	0x139B, r24
    162a:	4c dc       	rcall	.-1896   	; 0xec4 <reset_TWI>
    162c:	ff 91       	pop	r31
    162e:	ef 91       	pop	r30
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0b be       	out	0x3b, r0	; 59
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_send_packet(gRxBuffer[0], gRxBuffer[1]);
    1656:	10 92 c5 00 	sts	0x00C5, r1
    165a:	87 e0       	ldi	r24, 0x07	; 7
    165c:	80 93 c4 00 	sts	0x00C4, r24
    1660:	88 e9       	ldi	r24, 0x98	; 152
    1662:	80 93 c1 00 	sts	0x00C1, r24
    1666:	86 e0       	ldi	r24, 0x06	; 6
    1668:	80 93 c2 00 	sts	0x00C2, r24
    166c:	08 95       	ret

0000166e <USART_set_twi_message_destination>:
    166e:	90 93 1b 11 	sts	0x111B, r25
    1672:	80 93 1a 11 	sts	0x111A, r24
    1676:	08 95       	ret

00001678 <USART_check_tx_ready>:
    1678:	80 91 c0 00 	lds	r24, 0x00C0
    167c:	80 72       	andi	r24, 0x20	; 32
    167e:	08 95       	ret

00001680 <USART_write_byte>:
    1680:	cf 93       	push	r28
    1682:	c8 2f       	mov	r28, r24
    1684:	f9 df       	rcall	.-14     	; 0x1678 <USART_check_tx_ready>
    1686:	88 23       	and	r24, r24
    1688:	e9 f3       	breq	.-6      	; 0x1684 <USART_write_byte+0x4>
    168a:	c0 93 c6 00 	sts	0x00C6, r28
    168e:	cf 91       	pop	r28
    1690:	08 95       	ret

00001692 <USART_crc16>:
    1692:	cf 92       	push	r12
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	66 23       	and	r22, r22
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <USART_crc16+0x16>
    16a6:	3e c0       	rjmp	.+124    	; 0x1724 <USART_crc16+0x92>
    16a8:	06 2f       	mov	r16, r22
    16aa:	10 e0       	ldi	r17, 0x00	; 0
    16ac:	4f ef       	ldi	r20, 0xFF	; 255
    16ae:	5f ef       	ldi	r21, 0xFF	; 255
    16b0:	ee ef       	ldi	r30, 0xFE	; 254
    16b2:	ff ef       	ldi	r31, 0xFF	; 255
    16b4:	c6 2e       	mov	r12, r22
    16b6:	d1 2c       	mov	r13, r1
    16b8:	e8 2e       	mov	r14, r24
    16ba:	f1 2c       	mov	r15, r1
    16bc:	c8 e0       	ldi	r28, 0x08	; 8
    16be:	d0 e0       	ldi	r29, 0x00	; 0
    16c0:	ee 3f       	cpi	r30, 0xFE	; 254
    16c2:	6f ef       	ldi	r22, 0xFF	; 255
    16c4:	f6 07       	cpc	r31, r22
    16c6:	19 f4       	brne	.+6      	; 0x16ce <USART_crc16+0x3c>
    16c8:	8e 2d       	mov	r24, r14
    16ca:	9f 2d       	mov	r25, r15
    16cc:	30 c0       	rjmp	.+96     	; 0x172e <USART_crc16+0x9c>
    16ce:	ef 3f       	cpi	r30, 0xFF	; 255
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	f8 07       	cpc	r31, r24
    16d4:	19 f4       	brne	.+6      	; 0x16dc <USART_crc16+0x4a>
    16d6:	8c 2d       	mov	r24, r12
    16d8:	9d 2d       	mov	r25, r13
    16da:	29 c0       	rjmp	.+82     	; 0x172e <USART_crc16+0x9c>
    16dc:	df 01       	movw	r26, r30
    16de:	ab 5e       	subi	r26, 0xEB	; 235
    16e0:	b8 4e       	sbci	r27, 0xE8	; 232
    16e2:	8c 91       	ld	r24, X
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	23 c0       	rjmp	.+70     	; 0x172e <USART_crc16+0x9c>
    16e8:	ba 01       	movw	r22, r20
    16ea:	68 27       	eor	r22, r24
    16ec:	79 27       	eor	r23, r25
    16ee:	60 ff       	sbrs	r22, 0
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <USART_crc16+0x6e>
    16f2:	56 95       	lsr	r21
    16f4:	47 95       	ror	r20
    16f6:	68 e0       	ldi	r22, 0x08	; 8
    16f8:	46 27       	eor	r20, r22
    16fa:	64 e8       	ldi	r22, 0x84	; 132
    16fc:	56 27       	eor	r21, r22
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <USART_crc16+0x72>
    1700:	56 95       	lsr	r21
    1702:	47 95       	ror	r20
    1704:	96 95       	lsr	r25
    1706:	87 95       	ror	r24
    1708:	21 50       	subi	r18, 0x01	; 1
    170a:	31 09       	sbc	r19, r1
    170c:	69 f7       	brne	.-38     	; 0x16e8 <USART_crc16+0x56>
    170e:	31 96       	adiw	r30, 0x01	; 1
    1710:	e0 17       	cp	r30, r16
    1712:	f1 07       	cpc	r31, r17
    1714:	a9 f6       	brne	.-86     	; 0x16c0 <USART_crc16+0x2e>
    1716:	9a 01       	movw	r18, r20
    1718:	20 95       	com	r18
    171a:	30 95       	com	r19
    171c:	32 27       	eor	r19, r18
    171e:	23 27       	eor	r18, r19
    1720:	32 27       	eor	r19, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <USART_crc16+0x96>
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	82 2f       	mov	r24, r18
    172a:	93 2f       	mov	r25, r19
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <USART_crc16+0xa0>
    172e:	9e 01       	movw	r18, r28
    1730:	db cf       	rjmp	.-74     	; 0x16e8 <USART_crc16+0x56>
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	df 90       	pop	r13
    1740:	cf 90       	pop	r12
    1742:	08 95       	ret

00001744 <USART_send_packet>:
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	9e e7       	ldi	r25, 0x7E	; 126
    174e:	90 93 14 18 	sts	0x1814, r25
    1752:	80 93 15 18 	sts	0x1815, r24
    1756:	60 93 16 18 	sts	0x1816, r22
    175a:	26 2f       	mov	r18, r22
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	12 16       	cp	r1, r18
    1760:	13 06       	cpc	r1, r19
    1762:	4c f5       	brge	.+82     	; 0x17b6 <USART_send_packet+0x72>
    1764:	e5 e1       	ldi	r30, 0x15	; 21
    1766:	f7 e1       	ldi	r31, 0x17	; 23
    1768:	03 e0       	ldi	r16, 0x03	; 3
    176a:	10 e0       	ldi	r17, 0x00	; 0
    176c:	c0 e0       	ldi	r28, 0x00	; 0
    176e:	d0 e0       	ldi	r29, 0x00	; 0
    1770:	7d e7       	ldi	r23, 0x7D	; 125
    1772:	50 e2       	ldi	r21, 0x20	; 32
    1774:	90 81       	ld	r25, Z
    1776:	49 2f       	mov	r20, r25
    1778:	4d 57       	subi	r20, 0x7D	; 125
    177a:	42 30       	cpi	r20, 0x02	; 2
    177c:	80 f4       	brcc	.+32     	; 0x179e <USART_send_packet+0x5a>
    177e:	d8 01       	movw	r26, r16
    1780:	ac 5e       	subi	r26, 0xEC	; 236
    1782:	b7 4e       	sbci	r27, 0xE7	; 231
    1784:	ac 0f       	add	r26, r28
    1786:	bd 1f       	adc	r27, r29
    1788:	7c 93       	st	X, r23
    178a:	0f 5f       	subi	r16, 0xFF	; 255
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	d8 01       	movw	r26, r16
    1790:	ac 5e       	subi	r26, 0xEC	; 236
    1792:	b7 4e       	sbci	r27, 0xE7	; 231
    1794:	ac 0f       	add	r26, r28
    1796:	bd 1f       	adc	r27, r29
    1798:	95 27       	eor	r25, r21
    179a:	9c 93       	st	X, r25
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <USART_send_packet+0x66>
    179e:	d8 01       	movw	r26, r16
    17a0:	ac 5e       	subi	r26, 0xEC	; 236
    17a2:	b7 4e       	sbci	r27, 0xE7	; 231
    17a4:	ac 0f       	add	r26, r28
    17a6:	bd 1f       	adc	r27, r29
    17a8:	9c 93       	st	X, r25
    17aa:	21 96       	adiw	r28, 0x01	; 1
    17ac:	31 96       	adiw	r30, 0x01	; 1
    17ae:	c2 17       	cp	r28, r18
    17b0:	d3 07       	cpc	r29, r19
    17b2:	01 f7       	brne	.-64     	; 0x1774 <USART_send_packet+0x30>
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <USART_send_packet+0x7a>
    17b6:	03 e0       	ldi	r16, 0x03	; 3
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	c0 e0       	ldi	r28, 0x00	; 0
    17bc:	d0 e0       	ldi	r29, 0x00	; 0
    17be:	69 df       	rcall	.-302    	; 0x1692 <USART_crc16>
    17c0:	f8 01       	movw	r30, r16
    17c2:	ec 5e       	subi	r30, 0xEC	; 236
    17c4:	f7 4e       	sbci	r31, 0xE7	; 231
    17c6:	ec 0f       	add	r30, r28
    17c8:	fd 1f       	adc	r31, r29
    17ca:	90 83       	st	Z, r25
    17cc:	81 83       	std	Z+1, r24	; 0x01
    17ce:	22 96       	adiw	r28, 0x02	; 2
    17d0:	0c 0f       	add	r16, r28
    17d2:	1d 1f       	adc	r17, r29
    17d4:	f8 01       	movw	r30, r16
    17d6:	ec 5e       	subi	r30, 0xEC	; 236
    17d8:	f7 4e       	sbci	r31, 0xE7	; 231
    17da:	8e e7       	ldi	r24, 0x7E	; 126
    17dc:	80 83       	st	Z, r24
    17de:	c8 01       	movw	r24, r16
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	18 16       	cp	r1, r24
    17e4:	19 06       	cpc	r1, r25
    17e6:	4c f4       	brge	.+18     	; 0x17fa <USART_send_packet+0xb6>
    17e8:	c4 e1       	ldi	r28, 0x14	; 20
    17ea:	d8 e1       	ldi	r29, 0x18	; 24
    17ec:	0b 5e       	subi	r16, 0xEB	; 235
    17ee:	17 4e       	sbci	r17, 0xE7	; 231
    17f0:	89 91       	ld	r24, Y+
    17f2:	46 df       	rcall	.-372    	; 0x1680 <USART_write_byte>
    17f4:	c0 17       	cp	r28, r16
    17f6:	d1 07       	cpc	r29, r17
    17f8:	d9 f7       	brne	.-10     	; 0x17f0 <USART_send_packet+0xac>
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <USART_send_command>:
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	26 dd       	rcall	.-1460   	; 0x1256 <TWI_get_command>
    180a:	80 93 15 17 	sts	0x1715, r24
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	21 dd       	rcall	.-1470   	; 0x1256 <TWI_get_command>
    1814:	80 93 16 17 	sts	0x1716, r24
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	1c dd       	rcall	.-1480   	; 0x1256 <TWI_get_command>
    181e:	80 93 17 17 	sts	0x1717, r24
    1822:	63 e0       	ldi	r22, 0x03	; 3
    1824:	83 e4       	ldi	r24, 0x43	; 67
    1826:	8e cf       	rjmp	.-228    	; 0x1744 <USART_send_packet>

00001828 <USART_send_elevation>:
    1828:	28 dd       	rcall	.-1456   	; 0x127a <TWI_get_elevation>
    182a:	80 93 15 17 	sts	0x1715, r24
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	85 e4       	ldi	r24, 0x45	; 69
    1832:	88 cf       	rjmp	.-240    	; 0x1744 <USART_send_packet>

00001834 <USART_send_turn>:
    1834:	90 93 15 17 	sts	0x1715, r25
    1838:	80 93 16 17 	sts	0x1716, r24
    183c:	60 93 17 17 	sts	0x1717, r22
    1840:	63 e0       	ldi	r22, 0x03	; 3
    1842:	84 e5       	ldi	r24, 0x54	; 84
    1844:	7f cf       	rjmp	.-258    	; 0x1744 <USART_send_packet>

00001846 <USART_decode_message_rx_fifo>:
    1846:	8f 92       	push	r8
    1848:	9f 92       	push	r9
    184a:	af 92       	push	r10
    184c:	bf 92       	push	r11
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	ad b6       	in	r10, 0x3d	; 61
    1864:	be b6       	in	r11, 0x3e	; 62
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	80 91 12 01 	lds	r24, 0x0112
    186e:	90 91 13 01 	lds	r25, 0x0113
    1872:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1876:	88 23       	and	r24, r24
    1878:	31 f0       	breq	.+12     	; 0x1886 <USART_decode_message_rx_fifo+0x40>
    187a:	66 e0       	ldi	r22, 0x06	; 6
    187c:	72 e1       	ldi	r23, 0x12	; 18
    187e:	80 e4       	ldi	r24, 0x40	; 64
    1880:	1e dc       	rcall	.-1988   	; 0x10be <TWI_send_string>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	45 c0       	rjmp	.+138    	; 0x1910 <USART_decode_message_rx_fifo+0xca>
    1886:	c0 90 00 00 	lds	r12, 0x0000
    188a:	d1 2c       	mov	r13, r1
    188c:	96 01       	movw	r18, r12
    188e:	21 50       	subi	r18, 0x01	; 1
    1890:	31 09       	sbc	r19, r1
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	c1 14       	cp	r12, r1
    1898:	d1 04       	cpc	r13, r1
    189a:	11 f0       	breq	.+4      	; 0x18a0 <USART_decode_message_rx_fifo+0x5a>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	82 0f       	add	r24, r18
    18a2:	93 1f       	adc	r25, r19
    18a4:	2d b7       	in	r18, 0x3d	; 61
    18a6:	3e b7       	in	r19, 0x3e	; 62
    18a8:	28 1b       	sub	r18, r24
    18aa:	39 0b       	sbc	r19, r25
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	3e bf       	out	0x3e, r19	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	2d bf       	out	0x3d, r18	; 61
    18b6:	8d b7       	in	r24, 0x3d	; 61
    18b8:	9e b7       	in	r25, 0x3e	; 62
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	88 2e       	mov	r8, r24
    18be:	99 2e       	mov	r9, r25
    18c0:	1c 14       	cp	r1, r12
    18c2:	1d 04       	cpc	r1, r13
    18c4:	f4 f4       	brge	.+60     	; 0x1902 <USART_decode_message_rx_fifo+0xbc>
    18c6:	e8 2e       	mov	r14, r24
    18c8:	f9 2e       	mov	r15, r25
    18ca:	00 e0       	ldi	r16, 0x00	; 0
    18cc:	10 e0       	ldi	r17, 0x00	; 0
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	80 91 12 01 	lds	r24, 0x0112
    18d6:	90 91 13 01 	lds	r25, 0x0113
    18da:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    18de:	88 23       	and	r24, r24
    18e0:	31 f0       	breq	.+12     	; 0x18ee <USART_decode_message_rx_fifo+0xa8>
    18e2:	68 e2       	ldi	r22, 0x28	; 40
    18e4:	72 e1       	ldi	r23, 0x12	; 18
    18e6:	80 e4       	ldi	r24, 0x40	; 64
    18e8:	ea db       	rcall	.-2092   	; 0x10be <TWI_send_string>
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	11 c0       	rjmp	.+34     	; 0x1910 <USART_decode_message_rx_fifo+0xca>
    18ee:	80 91 00 00 	lds	r24, 0x0000
    18f2:	f7 01       	movw	r30, r14
    18f4:	81 93       	st	Z+, r24
    18f6:	7f 01       	movw	r14, r30
    18f8:	0f 5f       	subi	r16, 0xFF	; 255
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	0c 15       	cp	r16, r12
    18fe:	1d 05       	cpc	r17, r13
    1900:	34 f3       	brlt	.-52     	; 0x18ce <USART_decode_message_rx_fifo+0x88>
    1902:	a6 01       	movw	r20, r12
    1904:	68 2d       	mov	r22, r8
    1906:	79 2d       	mov	r23, r9
    1908:	80 91 1a 11 	lds	r24, 0x111A
    190c:	1e dc       	rcall	.-1988   	; 0x114a <TWI_send_string_fixed_length>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	be be       	out	0x3e, r11	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	ad be       	out	0x3d, r10	; 61
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	cf 90       	pop	r12
    192a:	bf 90       	pop	r11
    192c:	af 90       	pop	r10
    192e:	9f 90       	pop	r9
    1930:	8f 90       	pop	r8
    1932:	08 95       	ret

00001934 <USART_decode_gyro_rx_fifo>:
    1934:	af 92       	push	r10
    1936:	bf 92       	push	r11
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	00 d0       	rcall	.+0      	; 0x194a <USART_decode_gyro_rx_fifo+0x16>
    194a:	00 d0       	rcall	.+0      	; 0x194c <USART_decode_gyro_rx_fifo+0x18>
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	80 93 ab 13 	sts	0x13AB, r24
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	80 91 12 01 	lds	r24, 0x0112
    195e:	90 91 13 01 	lds	r25, 0x0113
    1962:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1966:	88 23       	and	r24, r24
    1968:	31 f0       	breq	.+12     	; 0x1976 <USART_decode_gyro_rx_fifo+0x42>
    196a:	6b e4       	ldi	r22, 0x4B	; 75
    196c:	72 e1       	ldi	r23, 0x12	; 18
    196e:	80 e4       	ldi	r24, 0x40	; 64
    1970:	a6 db       	rcall	.-2228   	; 0x10be <TWI_send_string>
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	73 c0       	rjmp	.+230    	; 0x1a5c <USART_decode_gyro_rx_fifo+0x128>
    1976:	80 91 00 00 	lds	r24, 0x0000
    197a:	8c 30       	cpi	r24, 0x0C	; 12
    197c:	09 f4       	brne	.+2      	; 0x1980 <USART_decode_gyro_rx_fifo+0x4c>
    197e:	53 c0       	rjmp	.+166    	; 0x1a26 <USART_decode_gyro_rx_fifo+0xf2>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	6c c0       	rjmp	.+216    	; 0x1a5c <USART_decode_gyro_rx_fifo+0x128>
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	80 91 12 01 	lds	r24, 0x0112
    198c:	90 91 13 01 	lds	r25, 0x0113
    1990:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1994:	88 23       	and	r24, r24
    1996:	31 f0       	breq	.+12     	; 0x19a4 <USART_decode_gyro_rx_fifo+0x70>
    1998:	6a e6       	ldi	r22, 0x6A	; 106
    199a:	72 e1       	ldi	r23, 0x12	; 18
    199c:	80 e4       	ldi	r24, 0x40	; 64
    199e:	8f db       	rcall	.-2274   	; 0x10be <TWI_send_string>
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	5c c0       	rjmp	.+184    	; 0x1a5c <USART_decode_gyro_rx_fifo+0x128>
    19a4:	80 91 00 00 	lds	r24, 0x0000
    19a8:	f6 01       	movw	r30, r12
    19aa:	81 93       	st	Z+, r24
    19ac:	6f 01       	movw	r12, r30
    19ae:	e0 17       	cp	r30, r16
    19b0:	f1 07       	cpc	r31, r17
    19b2:	41 f7       	brne	.-48     	; 0x1984 <USART_decode_gyro_rx_fifo+0x50>
    19b4:	f1 e0       	ldi	r31, 0x01	; 1
    19b6:	af 16       	cp	r10, r31
    19b8:	b1 04       	cpc	r11, r1
    19ba:	99 f0       	breq	.+38     	; 0x19e2 <USART_decode_gyro_rx_fifo+0xae>
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	a8 16       	cp	r10, r24
    19c0:	b1 04       	cpc	r11, r1
    19c2:	e1 f0       	breq	.+56     	; 0x19fc <USART_decode_gyro_rx_fifo+0xc8>
    19c4:	ab 28       	or	r10, r11
    19c6:	39 f5       	brne	.+78     	; 0x1a16 <USART_decode_gyro_rx_fifo+0xe2>
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	ab 81       	ldd	r26, Y+3	; 0x03
    19ce:	bc 81       	ldd	r27, Y+4	; 0x04
    19d0:	80 93 a7 13 	sts	0x13A7, r24
    19d4:	90 93 a8 13 	sts	0x13A8, r25
    19d8:	a0 93 a9 13 	sts	0x13A9, r26
    19dc:	b0 93 aa 13 	sts	0x13AA, r27
    19e0:	1e c0       	rjmp	.+60     	; 0x1a1e <USART_decode_gyro_rx_fifo+0xea>
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	ab 81       	ldd	r26, Y+3	; 0x03
    19e8:	bc 81       	ldd	r27, Y+4	; 0x04
    19ea:	80 93 a3 13 	sts	0x13A3, r24
    19ee:	90 93 a4 13 	sts	0x13A4, r25
    19f2:	a0 93 a5 13 	sts	0x13A5, r26
    19f6:	b0 93 a6 13 	sts	0x13A6, r27
    19fa:	11 c0       	rjmp	.+34     	; 0x1a1e <USART_decode_gyro_rx_fifo+0xea>
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	ab 81       	ldd	r26, Y+3	; 0x03
    1a02:	bc 81       	ldd	r27, Y+4	; 0x04
    1a04:	80 93 9f 13 	sts	0x139F, r24
    1a08:	90 93 a0 13 	sts	0x13A0, r25
    1a0c:	a0 93 a1 13 	sts	0x13A1, r26
    1a10:	b0 93 a2 13 	sts	0x13A2, r27
    1a14:	18 c0       	rjmp	.+48     	; 0x1a46 <USART_decode_gyro_rx_fifo+0x112>
    1a16:	e3 e0       	ldi	r30, 0x03	; 3
    1a18:	ee 16       	cp	r14, r30
    1a1a:	f1 04       	cpc	r15, r1
    1a1c:	a4 f4       	brge	.+40     	; 0x1a46 <USART_decode_gyro_rx_fifo+0x112>
    1a1e:	ff ef       	ldi	r31, 0xFF	; 255
    1a20:	ef 1a       	sub	r14, r31
    1a22:	ff 0a       	sbc	r15, r31
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <USART_decode_gyro_rx_fifo+0xfe>
    1a26:	ee 24       	eor	r14, r14
    1a28:	e3 94       	inc	r14
    1a2a:	f1 2c       	mov	r15, r1
    1a2c:	8e 01       	movw	r16, r28
    1a2e:	0b 5f       	subi	r16, 0xFB	; 251
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	57 01       	movw	r10, r14
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	a8 1a       	sub	r10, r24
    1a38:	b1 08       	sbc	r11, r1
    1a3a:	cc 24       	eor	r12, r12
    1a3c:	c3 94       	inc	r12
    1a3e:	d1 2c       	mov	r13, r1
    1a40:	cc 0e       	add	r12, r28
    1a42:	dd 1e       	adc	r13, r29
    1a44:	9f cf       	rjmp	.-194    	; 0x1984 <USART_decode_gyro_rx_fifo+0x50>
    1a46:	40 91 9f 13 	lds	r20, 0x139F
    1a4a:	50 91 a0 13 	lds	r21, 0x13A0
    1a4e:	60 91 a1 13 	lds	r22, 0x13A1
    1a52:	70 91 a2 13 	lds	r23, 0x13A2
    1a56:	80 e8       	ldi	r24, 0x80	; 128
    1a58:	b6 db       	rcall	.-2196   	; 0x11c6 <TWI_send_float>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	cf 90       	pop	r12
    1a74:	bf 90       	pop	r11
    1a76:	af 90       	pop	r10
    1a78:	08 95       	ret

00001a7a <USART_decode_command_rx_fifo>:
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	80 91 12 01 	lds	r24, 0x0112
    1a86:	90 91 13 01 	lds	r25, 0x0113
    1a8a:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1a8e:	88 23       	and	r24, r24
    1a90:	31 f0       	breq	.+12     	; 0x1a9e <USART_decode_command_rx_fifo+0x24>
    1a92:	6a e8       	ldi	r22, 0x8A	; 138
    1a94:	72 e1       	ldi	r23, 0x12	; 18
    1a96:	80 e4       	ldi	r24, 0x40	; 64
    1a98:	12 db       	rcall	.-2524   	; 0x10be <TWI_send_string>
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	45 c0       	rjmp	.+138    	; 0x1b28 <USART_decode_command_rx_fifo+0xae>
    1a9e:	80 91 00 00 	lds	r24, 0x0000
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <USART_decode_command_rx_fifo+0x2e>
    1aa6:	3b c0       	rjmp	.+118    	; 0x1b1e <USART_decode_command_rx_fifo+0xa4>
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	80 91 12 01 	lds	r24, 0x0112
    1ab0:	90 91 13 01 	lds	r25, 0x0113
    1ab4:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1ab8:	88 23       	and	r24, r24
    1aba:	31 f0       	breq	.+12     	; 0x1ac8 <USART_decode_command_rx_fifo+0x4e>
    1abc:	6c ea       	ldi	r22, 0xAC	; 172
    1abe:	72 e1       	ldi	r23, 0x12	; 18
    1ac0:	80 e4       	ldi	r24, 0x40	; 64
    1ac2:	fd da       	rcall	.-2566   	; 0x10be <TWI_send_string>
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	30 c0       	rjmp	.+96     	; 0x1b28 <USART_decode_command_rx_fifo+0xae>
    1ac8:	c0 91 00 00 	lds	r28, 0x0000
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	80 91 12 01 	lds	r24, 0x0112
    1ad4:	90 91 13 01 	lds	r25, 0x0113
    1ad8:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1adc:	88 23       	and	r24, r24
    1ade:	31 f0       	breq	.+12     	; 0x1aec <USART_decode_command_rx_fifo+0x72>
    1ae0:	64 ed       	ldi	r22, 0xD4	; 212
    1ae2:	72 e1       	ldi	r23, 0x12	; 18
    1ae4:	80 e4       	ldi	r24, 0x40	; 64
    1ae6:	eb da       	rcall	.-2602   	; 0x10be <TWI_send_string>
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	1e c0       	rjmp	.+60     	; 0x1b28 <USART_decode_command_rx_fifo+0xae>
    1aec:	d0 91 00 00 	lds	r29, 0x0000
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	80 91 12 01 	lds	r24, 0x0112
    1af8:	90 91 13 01 	lds	r25, 0x0113
    1afc:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1b00:	88 23       	and	r24, r24
    1b02:	31 f0       	breq	.+12     	; 0x1b10 <USART_decode_command_rx_fifo+0x96>
    1b04:	6b ef       	ldi	r22, 0xFB	; 251
    1b06:	72 e1       	ldi	r23, 0x12	; 18
    1b08:	80 e4       	ldi	r24, 0x40	; 64
    1b0a:	d9 da       	rcall	.-2638   	; 0x10be <TWI_send_string>
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	0c c0       	rjmp	.+24     	; 0x1b28 <USART_decode_command_rx_fifo+0xae>
    1b10:	40 91 00 00 	lds	r20, 0x0000
    1b14:	6d 2f       	mov	r22, r29
    1b16:	8c 2f       	mov	r24, r28
    1b18:	8a da       	rcall	.-2796   	; 0x102e <TWI_send_command>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	05 c0       	rjmp	.+10     	; 0x1b28 <USART_decode_command_rx_fifo+0xae>
    1b1e:	6f e1       	ldi	r22, 0x1F	; 31
    1b20:	73 e1       	ldi	r23, 0x13	; 19
    1b22:	80 e4       	ldi	r24, 0x40	; 64
    1b24:	cc da       	rcall	.-2664   	; 0x10be <TWI_send_string>
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	08 95       	ret

00001b2e <USART_DecodeValueFIFO>:
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <USART_DecodeValueFIFO+0xe>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <USART_DecodeValueFIFO+0x10>
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	80 91 12 01 	lds	r24, 0x0112
    1b4a:	90 91 13 01 	lds	r25, 0x0113
    1b4e:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1b52:	88 23       	and	r24, r24
    1b54:	31 f0       	breq	.+12     	; 0x1b62 <USART_DecodeValueFIFO+0x34>
    1b56:	66 e4       	ldi	r22, 0x46	; 70
    1b58:	73 e1       	ldi	r23, 0x13	; 19
    1b5a:	80 e4       	ldi	r24, 0x40	; 64
    1b5c:	b0 da       	rcall	.-2720   	; 0x10be <TWI_send_string>
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	29 c0       	rjmp	.+82     	; 0x1bb4 <USART_DecodeValueFIFO+0x86>
    1b62:	80 91 00 00 	lds	r24, 0x0000
    1b66:	84 30       	cpi	r24, 0x04	; 4
    1b68:	11 f5       	brne	.+68     	; 0x1bae <USART_DecodeValueFIFO+0x80>
    1b6a:	8e 01       	movw	r16, r28
    1b6c:	0f 5f       	subi	r16, 0xFF	; 255
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	7e 01       	movw	r14, r28
    1b72:	85 e0       	ldi	r24, 0x05	; 5
    1b74:	e8 0e       	add	r14, r24
    1b76:	f1 1c       	adc	r15, r1
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	80 91 12 01 	lds	r24, 0x0112
    1b80:	90 91 13 01 	lds	r25, 0x0113
    1b84:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1b88:	81 11       	cpse	r24, r1
    1b8a:	13 c0       	rjmp	.+38     	; 0x1bb2 <USART_DecodeValueFIFO+0x84>
    1b8c:	80 91 00 00 	lds	r24, 0x0000
    1b90:	f8 01       	movw	r30, r16
    1b92:	81 93       	st	Z+, r24
    1b94:	8f 01       	movw	r16, r30
    1b96:	ee 15       	cp	r30, r14
    1b98:	ff 05       	cpc	r31, r15
    1b9a:	71 f7       	brne	.-36     	; 0x1b78 <USART_DecodeValueFIFO+0x4a>
    1b9c:	49 81       	ldd	r20, Y+1	; 0x01
    1b9e:	5a 81       	ldd	r21, Y+2	; 0x02
    1ba0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ba2:	7c 81       	ldd	r23, Y+4	; 0x04
    1ba4:	80 91 1a 11 	lds	r24, 0x111A
    1ba8:	0e db       	rcall	.-2532   	; 0x11c6 <TWI_send_float>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	03 c0       	rjmp	.+6      	; 0x1bb4 <USART_DecodeValueFIFO+0x86>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <USART_DecodeValueFIFO+0x86>
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	08 95       	ret

00001bca <USART_DecodeReadyFIFO>:
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	80 91 12 01 	lds	r24, 0x0112
    1bd2:	90 91 13 01 	lds	r25, 0x0113
    1bd6:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1bda:	88 23       	and	r24, r24
    1bdc:	31 f0       	breq	.+12     	; 0x1bea <USART_DecodeReadyFIFO+0x20>
    1bde:	6a e8       	ldi	r22, 0x8A	; 138
    1be0:	72 e1       	ldi	r23, 0x12	; 18
    1be2:	80 e4       	ldi	r24, 0x40	; 64
    1be4:	6c da       	rcall	.-2856   	; 0x10be <TWI_send_string>
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	08 95       	ret
    1bea:	80 91 00 00 	lds	r24, 0x0000
    1bee:	81 11       	cpse	r24, r1
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <USART_DecodeReadyFIFO+0x32>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 93 ad 13 	sts	0x13AD, r24
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	08 95       	ret
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	08 95       	ret

00001c00 <USART_decode_turn_done_rx_fifo>:
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	80 91 12 01 	lds	r24, 0x0112
    1c08:	90 91 13 01 	lds	r25, 0x0113
    1c0c:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1c10:	88 23       	and	r24, r24
    1c12:	31 f0       	breq	.+12     	; 0x1c20 <USART_decode_turn_done_rx_fifo+0x20>
    1c14:	66 e6       	ldi	r22, 0x66	; 102
    1c16:	73 e1       	ldi	r23, 0x13	; 19
    1c18:	80 e4       	ldi	r24, 0x40	; 64
    1c1a:	51 da       	rcall	.-2910   	; 0x10be <TWI_send_string>
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	08 95       	ret
    1c20:	80 91 00 00 	lds	r24, 0x0000
    1c24:	81 11       	cpse	r24, r1
    1c26:	05 c0       	rjmp	.+10     	; 0x1c32 <USART_decode_turn_done_rx_fifo+0x32>
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	80 93 ac 13 	sts	0x13AC, r24
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	08 95       	ret
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	08 95       	ret

00001c36 <USART_ready>:
    1c36:	80 91 ad 13 	lds	r24, 0x13AD
    1c3a:	88 23       	and	r24, r24
    1c3c:	21 f0       	breq	.+8      	; 0x1c46 <USART_ready+0x10>
    1c3e:	10 92 ad 13 	sts	0x13AD, r1
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	08 95       	ret
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	08 95       	ret

00001c4a <USART_turn_done>:
    1c4a:	80 91 ac 13 	lds	r24, 0x13AC
    1c4e:	88 23       	and	r24, r24
    1c50:	21 f0       	breq	.+8      	; 0x1c5a <USART_turn_done+0x10>
    1c52:	10 92 ac 13 	sts	0x13AC, r1
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	08 95       	ret
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	08 95       	ret

00001c5e <USART_decode_rx_fifo>:
    1c5e:	28 c0       	rjmp	.+80     	; 0x1cb0 <USART_decode_rx_fifo+0x52>
    1c60:	80 91 00 00 	lds	r24, 0x0000
    1c64:	8d 34       	cpi	r24, 0x4D	; 77
    1c66:	69 f0       	breq	.+26     	; 0x1c82 <USART_decode_rx_fifo+0x24>
    1c68:	28 f4       	brcc	.+10     	; 0x1c74 <USART_decode_rx_fifo+0x16>
    1c6a:	83 34       	cpi	r24, 0x43	; 67
    1c6c:	71 f0       	breq	.+28     	; 0x1c8a <USART_decode_rx_fifo+0x2c>
    1c6e:	87 34       	cpi	r24, 0x47	; 71
    1c70:	f9 f4       	brne	.+62     	; 0x1cb0 <USART_decode_rx_fifo+0x52>
    1c72:	17 c0       	rjmp	.+46     	; 0x1ca2 <USART_decode_rx_fifo+0x44>
    1c74:	84 35       	cpi	r24, 0x54	; 84
    1c76:	c9 f0       	breq	.+50     	; 0x1caa <USART_decode_rx_fifo+0x4c>
    1c78:	86 35       	cpi	r24, 0x56	; 86
    1c7a:	59 f0       	breq	.+22     	; 0x1c92 <USART_decode_rx_fifo+0x34>
    1c7c:	82 35       	cpi	r24, 0x52	; 82
    1c7e:	c1 f4       	brne	.+48     	; 0x1cb0 <USART_decode_rx_fifo+0x52>
    1c80:	0c c0       	rjmp	.+24     	; 0x1c9a <USART_decode_rx_fifo+0x3c>
    1c82:	e1 dd       	rcall	.-1086   	; 0x1846 <USART_decode_message_rx_fifo>
    1c84:	88 23       	and	r24, r24
    1c86:	a1 f0       	breq	.+40     	; 0x1cb0 <USART_decode_rx_fifo+0x52>
    1c88:	08 95       	ret
    1c8a:	f7 de       	rcall	.-530    	; 0x1a7a <USART_decode_command_rx_fifo>
    1c8c:	88 23       	and	r24, r24
    1c8e:	81 f0       	breq	.+32     	; 0x1cb0 <USART_decode_rx_fifo+0x52>
    1c90:	08 95       	ret
    1c92:	4d df       	rcall	.-358    	; 0x1b2e <USART_DecodeValueFIFO>
    1c94:	88 23       	and	r24, r24
    1c96:	61 f0       	breq	.+24     	; 0x1cb0 <USART_decode_rx_fifo+0x52>
    1c98:	08 95       	ret
    1c9a:	97 df       	rcall	.-210    	; 0x1bca <USART_DecodeReadyFIFO>
    1c9c:	88 23       	and	r24, r24
    1c9e:	41 f0       	breq	.+16     	; 0x1cb0 <USART_decode_rx_fifo+0x52>
    1ca0:	08 95       	ret
    1ca2:	48 de       	rcall	.-880    	; 0x1934 <USART_decode_gyro_rx_fifo>
    1ca4:	88 23       	and	r24, r24
    1ca6:	21 f0       	breq	.+8      	; 0x1cb0 <USART_decode_rx_fifo+0x52>
    1ca8:	08 95       	ret
    1caa:	aa df       	rcall	.-172    	; 0x1c00 <USART_decode_turn_done_rx_fifo>
    1cac:	81 11       	cpse	r24, r1
    1cae:	0a c0       	rjmp	.+20     	; 0x1cc4 <USART_decode_rx_fifo+0x66>
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	80 91 12 01 	lds	r24, 0x0112
    1cb8:	90 91 13 01 	lds	r25, 0x0113
    1cbc:	0e 94 4b 02 	call	0x496	; 0x496 <FifoRead>
    1cc0:	88 23       	and	r24, r24
    1cc2:	71 f2       	breq	.-100    	; 0x1c60 <USART_decode_rx_fifo+0x2>
    1cc4:	08 95       	ret

00001cc6 <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1cc6:	1f 92       	push	r1
    1cc8:	0f 92       	push	r0
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	0f 92       	push	r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	0b b6       	in	r0, 0x3b	; 59
    1cd2:	0f 92       	push	r0
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	2f 93       	push	r18
    1cde:	3f 93       	push	r19
    1ce0:	4f 93       	push	r20
    1ce2:	5f 93       	push	r21
    1ce4:	6f 93       	push	r22
    1ce6:	7f 93       	push	r23
    1ce8:	8f 93       	push	r24
    1cea:	9f 93       	push	r25
    1cec:	af 93       	push	r26
    1cee:	bf 93       	push	r27
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	ef 93       	push	r30
    1cf6:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1cf8:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1cfc:	2e 37       	cpi	r18, 0x7E	; 126
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <__vector_20+0x3c>
    1d00:	3f c0       	rjmp	.+126    	; 0x1d80 <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1d02:	80 91 b0 13 	lds	r24, 0x13B0
    1d06:	90 91 b1 13 	lds	r25, 0x13B1
    1d0a:	84 30       	cpi	r24, 0x04	; 4
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	40 f4       	brcc	.+16     	; 0x1d20 <__vector_20+0x5a>
    1d10:	20 91 11 15 	lds	r18, 0x1511
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	2c 5f       	subi	r18, 0xFC	; 252
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	82 17       	cp	r24, r18
    1d1c:	93 07       	cpc	r25, r19
    1d1e:	59 f5       	brne	.+86     	; 0x1d76 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1d20:	80 91 ae 13 	lds	r24, 0x13AE
    1d24:	90 91 af 13 	lds	r25, 0x13AF
    1d28:	89 2b       	or	r24, r25
    1d2a:	21 f0       	breq	.+8      	; 0x1d34 <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1d2c:	10 92 af 13 	sts	0x13AF, r1
    1d30:	10 92 ae 13 	sts	0x13AE, r1
    1d34:	00 e1       	ldi	r16, 0x10	; 16
    1d36:	15 e1       	ldi	r17, 0x15	; 21
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1d38:	c0 e0       	ldi	r28, 0x00	; 0
    1d3a:	d0 e0       	ldi	r29, 0x00	; 0
    1d3c:	0f 2e       	mov	r0, r31
    1d3e:	f1 e1       	ldi	r31, 0x11	; 17
    1d40:	ef 2e       	mov	r14, r31
    1d42:	f5 e1       	ldi	r31, 0x15	; 21
    1d44:	ff 2e       	mov	r15, r31
    1d46:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1d48:	f8 01       	movw	r30, r16
    1d4a:	61 91       	ld	r22, Z+
    1d4c:	8f 01       	movw	r16, r30
    1d4e:	80 91 12 01 	lds	r24, 0x0112
    1d52:	90 91 13 01 	lds	r25, 0x0113
    1d56:	0e 94 2b 02 	call	0x456	; 0x456 <FifoWrite>
    1d5a:	88 23       	and	r24, r24
    1d5c:	21 f0       	breq	.+8      	; 0x1d66 <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1d5e:	6a e8       	ldi	r22, 0x8A	; 138
    1d60:	73 e1       	ldi	r23, 0x13	; 19
    1d62:	80 e4       	ldi	r24, 0x40	; 64
    1d64:	ac d9       	rcall	.-3240   	; 0x10be <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1d66:	21 96       	adiw	r28, 0x01	; 1
    1d68:	f7 01       	movw	r30, r14
    1d6a:	80 81       	ld	r24, Z
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 96       	adiw	r24, 0x02	; 2
    1d70:	c8 17       	cp	r28, r24
    1d72:	d9 07       	cpc	r29, r25
    1d74:	4c f3       	brlt	.-46     	; 0x1d48 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1d76:	10 92 b1 13 	sts	0x13B1, r1
    1d7a:	10 92 b0 13 	sts	0x13B0, r1
    1d7e:	16 c0       	rjmp	.+44     	; 0x1dac <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1d80:	2d 37       	cpi	r18, 0x7D	; 125
    1d82:	39 f4       	brne	.+14     	; 0x1d92 <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	90 93 af 13 	sts	0x13AF, r25
    1d8c:	80 93 ae 13 	sts	0x13AE, r24
    1d90:	0d c0       	rjmp	.+26     	; 0x1dac <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1d92:	80 91 b0 13 	lds	r24, 0x13B0
    1d96:	90 91 b1 13 	lds	r25, 0x13B1
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	e0 5f       	subi	r30, 0xF0	; 240
    1d9e:	fa 4e       	sbci	r31, 0xEA	; 234
    1da0:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	90 93 b1 13 	sts	0x13B1, r25
    1da8:	80 93 b0 13 	sts	0x13B0, r24
	}
	
	
}
    1dac:	ff 91       	pop	r31
    1dae:	ef 91       	pop	r30
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	bf 91       	pop	r27
    1db6:	af 91       	pop	r26
    1db8:	9f 91       	pop	r25
    1dba:	8f 91       	pop	r24
    1dbc:	7f 91       	pop	r23
    1dbe:	6f 91       	pop	r22
    1dc0:	5f 91       	pop	r21
    1dc2:	4f 91       	pop	r20
    1dc4:	3f 91       	pop	r19
    1dc6:	2f 91       	pop	r18
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	ff 90       	pop	r15
    1dce:	ef 90       	pop	r14
    1dd0:	0f 90       	pop	r0
    1dd2:	0b be       	out	0x3b, r0	; 59
    1dd4:	0f 90       	pop	r0
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	0f 90       	pop	r0
    1dda:	1f 90       	pop	r1
    1ddc:	18 95       	reti

00001dde <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1dde:	80 93 15 17 	sts	0x1715, r24
	gTxPayload[1] = rotation;
    1de2:	60 93 16 17 	sts	0x1716, r22
	gTxPayload[2] = speed;
    1de6:	40 93 17 17 	sts	0x1717, r20
	
	
	USART_send_packet('C', 3);
    1dea:	63 e0       	ldi	r22, 0x03	; 3
    1dec:	83 e4       	ldi	r24, 0x43	; 67
    1dee:	aa cc       	rjmp	.-1708   	; 0x1744 <USART_send_packet>

00001df0 <__subsf3>:
    1df0:	50 58       	subi	r21, 0x80	; 128

00001df2 <__addsf3>:
    1df2:	bb 27       	eor	r27, r27
    1df4:	aa 27       	eor	r26, r26
    1df6:	0e d0       	rcall	.+28     	; 0x1e14 <__addsf3x>
    1df8:	ed c1       	rjmp	.+986    	; 0x21d4 <__fp_round>
    1dfa:	b6 d1       	rcall	.+876    	; 0x2168 <__fp_pscA>
    1dfc:	30 f0       	brcs	.+12     	; 0x1e0a <__addsf3+0x18>
    1dfe:	bb d1       	rcall	.+886    	; 0x2176 <__fp_pscB>
    1e00:	20 f0       	brcs	.+8      	; 0x1e0a <__addsf3+0x18>
    1e02:	31 f4       	brne	.+12     	; 0x1e10 <__addsf3+0x1e>
    1e04:	9f 3f       	cpi	r25, 0xFF	; 255
    1e06:	11 f4       	brne	.+4      	; 0x1e0c <__addsf3+0x1a>
    1e08:	1e f4       	brtc	.+6      	; 0x1e10 <__addsf3+0x1e>
    1e0a:	86 c1       	rjmp	.+780    	; 0x2118 <__fp_nan>
    1e0c:	0e f4       	brtc	.+2      	; 0x1e10 <__addsf3+0x1e>
    1e0e:	e0 95       	com	r30
    1e10:	e7 fb       	bst	r30, 7
    1e12:	7c c1       	rjmp	.+760    	; 0x210c <__fp_inf>

00001e14 <__addsf3x>:
    1e14:	e9 2f       	mov	r30, r25
    1e16:	00 d2       	rcall	.+1024   	; 0x2218 <__fp_split3>
    1e18:	80 f3       	brcs	.-32     	; 0x1dfa <__addsf3+0x8>
    1e1a:	ba 17       	cp	r27, r26
    1e1c:	62 07       	cpc	r22, r18
    1e1e:	73 07       	cpc	r23, r19
    1e20:	84 07       	cpc	r24, r20
    1e22:	95 07       	cpc	r25, r21
    1e24:	18 f0       	brcs	.+6      	; 0x1e2c <__addsf3x+0x18>
    1e26:	71 f4       	brne	.+28     	; 0x1e44 <__addsf3x+0x30>
    1e28:	9e f5       	brtc	.+102    	; 0x1e90 <__addsf3x+0x7c>
    1e2a:	18 c2       	rjmp	.+1072   	; 0x225c <__fp_zero>
    1e2c:	0e f4       	brtc	.+2      	; 0x1e30 <__addsf3x+0x1c>
    1e2e:	e0 95       	com	r30
    1e30:	0b 2e       	mov	r0, r27
    1e32:	ba 2f       	mov	r27, r26
    1e34:	a0 2d       	mov	r26, r0
    1e36:	0b 01       	movw	r0, r22
    1e38:	b9 01       	movw	r22, r18
    1e3a:	90 01       	movw	r18, r0
    1e3c:	0c 01       	movw	r0, r24
    1e3e:	ca 01       	movw	r24, r20
    1e40:	a0 01       	movw	r20, r0
    1e42:	11 24       	eor	r1, r1
    1e44:	ff 27       	eor	r31, r31
    1e46:	59 1b       	sub	r21, r25
    1e48:	99 f0       	breq	.+38     	; 0x1e70 <__addsf3x+0x5c>
    1e4a:	59 3f       	cpi	r21, 0xF9	; 249
    1e4c:	50 f4       	brcc	.+20     	; 0x1e62 <__addsf3x+0x4e>
    1e4e:	50 3e       	cpi	r21, 0xE0	; 224
    1e50:	68 f1       	brcs	.+90     	; 0x1eac <__addsf3x+0x98>
    1e52:	1a 16       	cp	r1, r26
    1e54:	f0 40       	sbci	r31, 0x00	; 0
    1e56:	a2 2f       	mov	r26, r18
    1e58:	23 2f       	mov	r18, r19
    1e5a:	34 2f       	mov	r19, r20
    1e5c:	44 27       	eor	r20, r20
    1e5e:	58 5f       	subi	r21, 0xF8	; 248
    1e60:	f3 cf       	rjmp	.-26     	; 0x1e48 <__addsf3x+0x34>
    1e62:	46 95       	lsr	r20
    1e64:	37 95       	ror	r19
    1e66:	27 95       	ror	r18
    1e68:	a7 95       	ror	r26
    1e6a:	f0 40       	sbci	r31, 0x00	; 0
    1e6c:	53 95       	inc	r21
    1e6e:	c9 f7       	brne	.-14     	; 0x1e62 <__addsf3x+0x4e>
    1e70:	7e f4       	brtc	.+30     	; 0x1e90 <__addsf3x+0x7c>
    1e72:	1f 16       	cp	r1, r31
    1e74:	ba 0b       	sbc	r27, r26
    1e76:	62 0b       	sbc	r22, r18
    1e78:	73 0b       	sbc	r23, r19
    1e7a:	84 0b       	sbc	r24, r20
    1e7c:	ba f0       	brmi	.+46     	; 0x1eac <__addsf3x+0x98>
    1e7e:	91 50       	subi	r25, 0x01	; 1
    1e80:	a1 f0       	breq	.+40     	; 0x1eaa <__addsf3x+0x96>
    1e82:	ff 0f       	add	r31, r31
    1e84:	bb 1f       	adc	r27, r27
    1e86:	66 1f       	adc	r22, r22
    1e88:	77 1f       	adc	r23, r23
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	c2 f7       	brpl	.-16     	; 0x1e7e <__addsf3x+0x6a>
    1e8e:	0e c0       	rjmp	.+28     	; 0x1eac <__addsf3x+0x98>
    1e90:	ba 0f       	add	r27, r26
    1e92:	62 1f       	adc	r22, r18
    1e94:	73 1f       	adc	r23, r19
    1e96:	84 1f       	adc	r24, r20
    1e98:	48 f4       	brcc	.+18     	; 0x1eac <__addsf3x+0x98>
    1e9a:	87 95       	ror	r24
    1e9c:	77 95       	ror	r23
    1e9e:	67 95       	ror	r22
    1ea0:	b7 95       	ror	r27
    1ea2:	f7 95       	ror	r31
    1ea4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ea6:	08 f0       	brcs	.+2      	; 0x1eaa <__addsf3x+0x96>
    1ea8:	b3 cf       	rjmp	.-154    	; 0x1e10 <__addsf3+0x1e>
    1eaa:	93 95       	inc	r25
    1eac:	88 0f       	add	r24, r24
    1eae:	08 f0       	brcs	.+2      	; 0x1eb2 <__addsf3x+0x9e>
    1eb0:	99 27       	eor	r25, r25
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	97 95       	ror	r25
    1eb6:	87 95       	ror	r24
    1eb8:	08 95       	ret

00001eba <atan>:
    1eba:	df 93       	push	r29
    1ebc:	dd 27       	eor	r29, r29
    1ebe:	b9 2f       	mov	r27, r25
    1ec0:	bf 77       	andi	r27, 0x7F	; 127
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	16 16       	cp	r1, r22
    1ec8:	17 06       	cpc	r1, r23
    1eca:	48 07       	cpc	r20, r24
    1ecc:	5b 07       	cpc	r21, r27
    1ece:	10 f4       	brcc	.+4      	; 0x1ed4 <atan+0x1a>
    1ed0:	d9 2f       	mov	r29, r25
    1ed2:	cf d1       	rcall	.+926    	; 0x2272 <inverse>
    1ed4:	9f 93       	push	r25
    1ed6:	8f 93       	push	r24
    1ed8:	7f 93       	push	r23
    1eda:	6f 93       	push	r22
    1edc:	34 d2       	rcall	.+1128   	; 0x2346 <square>
    1ede:	ec e8       	ldi	r30, 0x8C	; 140
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	1d d1       	rcall	.+570    	; 0x211e <__fp_powser>
    1ee4:	77 d1       	rcall	.+750    	; 0x21d4 <__fp_round>
    1ee6:	2f 91       	pop	r18
    1ee8:	3f 91       	pop	r19
    1eea:	4f 91       	pop	r20
    1eec:	5f 91       	pop	r21
    1eee:	d4 d1       	rcall	.+936    	; 0x2298 <__mulsf3x>
    1ef0:	dd 23       	and	r29, r29
    1ef2:	49 f0       	breq	.+18     	; 0x1f06 <atan+0x4c>
    1ef4:	90 58       	subi	r25, 0x80	; 128
    1ef6:	a2 ea       	ldi	r26, 0xA2	; 162
    1ef8:	2a ed       	ldi	r18, 0xDA	; 218
    1efa:	3f e0       	ldi	r19, 0x0F	; 15
    1efc:	49 ec       	ldi	r20, 0xC9	; 201
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	d0 78       	andi	r29, 0x80	; 128
    1f02:	5d 27       	eor	r21, r29
    1f04:	87 df       	rcall	.-242    	; 0x1e14 <__addsf3x>
    1f06:	df 91       	pop	r29
    1f08:	65 c1       	rjmp	.+714    	; 0x21d4 <__fp_round>

00001f0a <__cmpsf2>:
    1f0a:	dc d0       	rcall	.+440    	; 0x20c4 <__fp_cmp>
    1f0c:	08 f4       	brcc	.+2      	; 0x1f10 <__cmpsf2+0x6>
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	08 95       	ret

00001f12 <cos>:
    1f12:	39 d1       	rcall	.+626    	; 0x2186 <__fp_rempio2>
    1f14:	e3 95       	inc	r30
    1f16:	6f c1       	rjmp	.+734    	; 0x21f6 <__fp_sinus>

00001f18 <__divsf3>:
    1f18:	0c d0       	rcall	.+24     	; 0x1f32 <__divsf3x>
    1f1a:	5c c1       	rjmp	.+696    	; 0x21d4 <__fp_round>
    1f1c:	2c d1       	rcall	.+600    	; 0x2176 <__fp_pscB>
    1f1e:	40 f0       	brcs	.+16     	; 0x1f30 <__divsf3+0x18>
    1f20:	23 d1       	rcall	.+582    	; 0x2168 <__fp_pscA>
    1f22:	30 f0       	brcs	.+12     	; 0x1f30 <__divsf3+0x18>
    1f24:	21 f4       	brne	.+8      	; 0x1f2e <__divsf3+0x16>
    1f26:	5f 3f       	cpi	r21, 0xFF	; 255
    1f28:	19 f0       	breq	.+6      	; 0x1f30 <__divsf3+0x18>
    1f2a:	f0 c0       	rjmp	.+480    	; 0x210c <__fp_inf>
    1f2c:	51 11       	cpse	r21, r1
    1f2e:	97 c1       	rjmp	.+814    	; 0x225e <__fp_szero>
    1f30:	f3 c0       	rjmp	.+486    	; 0x2118 <__fp_nan>

00001f32 <__divsf3x>:
    1f32:	72 d1       	rcall	.+740    	; 0x2218 <__fp_split3>
    1f34:	98 f3       	brcs	.-26     	; 0x1f1c <__divsf3+0x4>

00001f36 <__divsf3_pse>:
    1f36:	99 23       	and	r25, r25
    1f38:	c9 f3       	breq	.-14     	; 0x1f2c <__divsf3+0x14>
    1f3a:	55 23       	and	r21, r21
    1f3c:	b1 f3       	breq	.-20     	; 0x1f2a <__divsf3+0x12>
    1f3e:	95 1b       	sub	r25, r21
    1f40:	55 0b       	sbc	r21, r21
    1f42:	bb 27       	eor	r27, r27
    1f44:	aa 27       	eor	r26, r26
    1f46:	62 17       	cp	r22, r18
    1f48:	73 07       	cpc	r23, r19
    1f4a:	84 07       	cpc	r24, r20
    1f4c:	38 f0       	brcs	.+14     	; 0x1f5c <__divsf3_pse+0x26>
    1f4e:	9f 5f       	subi	r25, 0xFF	; 255
    1f50:	5f 4f       	sbci	r21, 0xFF	; 255
    1f52:	22 0f       	add	r18, r18
    1f54:	33 1f       	adc	r19, r19
    1f56:	44 1f       	adc	r20, r20
    1f58:	aa 1f       	adc	r26, r26
    1f5a:	a9 f3       	breq	.-22     	; 0x1f46 <__divsf3_pse+0x10>
    1f5c:	33 d0       	rcall	.+102    	; 0x1fc4 <__divsf3_pse+0x8e>
    1f5e:	0e 2e       	mov	r0, r30
    1f60:	3a f0       	brmi	.+14     	; 0x1f70 <__divsf3_pse+0x3a>
    1f62:	e0 e8       	ldi	r30, 0x80	; 128
    1f64:	30 d0       	rcall	.+96     	; 0x1fc6 <__divsf3_pse+0x90>
    1f66:	91 50       	subi	r25, 0x01	; 1
    1f68:	50 40       	sbci	r21, 0x00	; 0
    1f6a:	e6 95       	lsr	r30
    1f6c:	00 1c       	adc	r0, r0
    1f6e:	ca f7       	brpl	.-14     	; 0x1f62 <__divsf3_pse+0x2c>
    1f70:	29 d0       	rcall	.+82     	; 0x1fc4 <__divsf3_pse+0x8e>
    1f72:	fe 2f       	mov	r31, r30
    1f74:	27 d0       	rcall	.+78     	; 0x1fc4 <__divsf3_pse+0x8e>
    1f76:	66 0f       	add	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	bb 1f       	adc	r27, r27
    1f7e:	26 17       	cp	r18, r22
    1f80:	37 07       	cpc	r19, r23
    1f82:	48 07       	cpc	r20, r24
    1f84:	ab 07       	cpc	r26, r27
    1f86:	b0 e8       	ldi	r27, 0x80	; 128
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <__divsf3_pse+0x56>
    1f8a:	bb 0b       	sbc	r27, r27
    1f8c:	80 2d       	mov	r24, r0
    1f8e:	bf 01       	movw	r22, r30
    1f90:	ff 27       	eor	r31, r31
    1f92:	93 58       	subi	r25, 0x83	; 131
    1f94:	5f 4f       	sbci	r21, 0xFF	; 255
    1f96:	2a f0       	brmi	.+10     	; 0x1fa2 <__divsf3_pse+0x6c>
    1f98:	9e 3f       	cpi	r25, 0xFE	; 254
    1f9a:	51 05       	cpc	r21, r1
    1f9c:	68 f0       	brcs	.+26     	; 0x1fb8 <__divsf3_pse+0x82>
    1f9e:	b6 c0       	rjmp	.+364    	; 0x210c <__fp_inf>
    1fa0:	5e c1       	rjmp	.+700    	; 0x225e <__fp_szero>
    1fa2:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa4:	ec f3       	brlt	.-6      	; 0x1fa0 <__divsf3_pse+0x6a>
    1fa6:	98 3e       	cpi	r25, 0xE8	; 232
    1fa8:	dc f3       	brlt	.-10     	; 0x1fa0 <__divsf3_pse+0x6a>
    1faa:	86 95       	lsr	r24
    1fac:	77 95       	ror	r23
    1fae:	67 95       	ror	r22
    1fb0:	b7 95       	ror	r27
    1fb2:	f7 95       	ror	r31
    1fb4:	9f 5f       	subi	r25, 0xFF	; 255
    1fb6:	c9 f7       	brne	.-14     	; 0x1faa <__divsf3_pse+0x74>
    1fb8:	88 0f       	add	r24, r24
    1fba:	91 1d       	adc	r25, r1
    1fbc:	96 95       	lsr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	97 f9       	bld	r25, 7
    1fc2:	08 95       	ret
    1fc4:	e1 e0       	ldi	r30, 0x01	; 1
    1fc6:	66 0f       	add	r22, r22
    1fc8:	77 1f       	adc	r23, r23
    1fca:	88 1f       	adc	r24, r24
    1fcc:	bb 1f       	adc	r27, r27
    1fce:	62 17       	cp	r22, r18
    1fd0:	73 07       	cpc	r23, r19
    1fd2:	84 07       	cpc	r24, r20
    1fd4:	ba 07       	cpc	r27, r26
    1fd6:	20 f0       	brcs	.+8      	; 0x1fe0 <__divsf3_pse+0xaa>
    1fd8:	62 1b       	sub	r22, r18
    1fda:	73 0b       	sbc	r23, r19
    1fdc:	84 0b       	sbc	r24, r20
    1fde:	ba 0b       	sbc	r27, r26
    1fe0:	ee 1f       	adc	r30, r30
    1fe2:	88 f7       	brcc	.-30     	; 0x1fc6 <__divsf3_pse+0x90>
    1fe4:	e0 95       	com	r30
    1fe6:	08 95       	ret

00001fe8 <__fixsfsi>:
    1fe8:	04 d0       	rcall	.+8      	; 0x1ff2 <__fixunssfsi>
    1fea:	68 94       	set
    1fec:	b1 11       	cpse	r27, r1
    1fee:	37 c1       	rjmp	.+622    	; 0x225e <__fp_szero>
    1ff0:	08 95       	ret

00001ff2 <__fixunssfsi>:
    1ff2:	1a d1       	rcall	.+564    	; 0x2228 <__fp_splitA>
    1ff4:	88 f0       	brcs	.+34     	; 0x2018 <__fixunssfsi+0x26>
    1ff6:	9f 57       	subi	r25, 0x7F	; 127
    1ff8:	90 f0       	brcs	.+36     	; 0x201e <__fixunssfsi+0x2c>
    1ffa:	b9 2f       	mov	r27, r25
    1ffc:	99 27       	eor	r25, r25
    1ffe:	b7 51       	subi	r27, 0x17	; 23
    2000:	a0 f0       	brcs	.+40     	; 0x202a <__fixunssfsi+0x38>
    2002:	d1 f0       	breq	.+52     	; 0x2038 <__fixunssfsi+0x46>
    2004:	66 0f       	add	r22, r22
    2006:	77 1f       	adc	r23, r23
    2008:	88 1f       	adc	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	1a f0       	brmi	.+6      	; 0x2014 <__fixunssfsi+0x22>
    200e:	ba 95       	dec	r27
    2010:	c9 f7       	brne	.-14     	; 0x2004 <__fixunssfsi+0x12>
    2012:	12 c0       	rjmp	.+36     	; 0x2038 <__fixunssfsi+0x46>
    2014:	b1 30       	cpi	r27, 0x01	; 1
    2016:	81 f0       	breq	.+32     	; 0x2038 <__fixunssfsi+0x46>
    2018:	21 d1       	rcall	.+578    	; 0x225c <__fp_zero>
    201a:	b1 e0       	ldi	r27, 0x01	; 1
    201c:	08 95       	ret
    201e:	1e c1       	rjmp	.+572    	; 0x225c <__fp_zero>
    2020:	67 2f       	mov	r22, r23
    2022:	78 2f       	mov	r23, r24
    2024:	88 27       	eor	r24, r24
    2026:	b8 5f       	subi	r27, 0xF8	; 248
    2028:	39 f0       	breq	.+14     	; 0x2038 <__fixunssfsi+0x46>
    202a:	b9 3f       	cpi	r27, 0xF9	; 249
    202c:	cc f3       	brlt	.-14     	; 0x2020 <__fixunssfsi+0x2e>
    202e:	86 95       	lsr	r24
    2030:	77 95       	ror	r23
    2032:	67 95       	ror	r22
    2034:	b3 95       	inc	r27
    2036:	d9 f7       	brne	.-10     	; 0x202e <__fixunssfsi+0x3c>
    2038:	3e f4       	brtc	.+14     	; 0x2048 <__fixunssfsi+0x56>
    203a:	90 95       	com	r25
    203c:	80 95       	com	r24
    203e:	70 95       	com	r23
    2040:	61 95       	neg	r22
    2042:	7f 4f       	sbci	r23, 0xFF	; 255
    2044:	8f 4f       	sbci	r24, 0xFF	; 255
    2046:	9f 4f       	sbci	r25, 0xFF	; 255
    2048:	08 95       	ret

0000204a <__floatunsisf>:
    204a:	e8 94       	clt
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <__floatsisf+0x12>

0000204e <__floatsisf>:
    204e:	97 fb       	bst	r25, 7
    2050:	3e f4       	brtc	.+14     	; 0x2060 <__floatsisf+0x12>
    2052:	90 95       	com	r25
    2054:	80 95       	com	r24
    2056:	70 95       	com	r23
    2058:	61 95       	neg	r22
    205a:	7f 4f       	sbci	r23, 0xFF	; 255
    205c:	8f 4f       	sbci	r24, 0xFF	; 255
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	99 23       	and	r25, r25
    2062:	a9 f0       	breq	.+42     	; 0x208e <__floatsisf+0x40>
    2064:	f9 2f       	mov	r31, r25
    2066:	96 e9       	ldi	r25, 0x96	; 150
    2068:	bb 27       	eor	r27, r27
    206a:	93 95       	inc	r25
    206c:	f6 95       	lsr	r31
    206e:	87 95       	ror	r24
    2070:	77 95       	ror	r23
    2072:	67 95       	ror	r22
    2074:	b7 95       	ror	r27
    2076:	f1 11       	cpse	r31, r1
    2078:	f8 cf       	rjmp	.-16     	; 0x206a <__floatsisf+0x1c>
    207a:	fa f4       	brpl	.+62     	; 0x20ba <__floatsisf+0x6c>
    207c:	bb 0f       	add	r27, r27
    207e:	11 f4       	brne	.+4      	; 0x2084 <__floatsisf+0x36>
    2080:	60 ff       	sbrs	r22, 0
    2082:	1b c0       	rjmp	.+54     	; 0x20ba <__floatsisf+0x6c>
    2084:	6f 5f       	subi	r22, 0xFF	; 255
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	8f 4f       	sbci	r24, 0xFF	; 255
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	16 c0       	rjmp	.+44     	; 0x20ba <__floatsisf+0x6c>
    208e:	88 23       	and	r24, r24
    2090:	11 f0       	breq	.+4      	; 0x2096 <__floatsisf+0x48>
    2092:	96 e9       	ldi	r25, 0x96	; 150
    2094:	11 c0       	rjmp	.+34     	; 0x20b8 <__floatsisf+0x6a>
    2096:	77 23       	and	r23, r23
    2098:	21 f0       	breq	.+8      	; 0x20a2 <__floatsisf+0x54>
    209a:	9e e8       	ldi	r25, 0x8E	; 142
    209c:	87 2f       	mov	r24, r23
    209e:	76 2f       	mov	r23, r22
    20a0:	05 c0       	rjmp	.+10     	; 0x20ac <__floatsisf+0x5e>
    20a2:	66 23       	and	r22, r22
    20a4:	71 f0       	breq	.+28     	; 0x20c2 <__floatsisf+0x74>
    20a6:	96 e8       	ldi	r25, 0x86	; 134
    20a8:	86 2f       	mov	r24, r22
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	2a f0       	brmi	.+10     	; 0x20ba <__floatsisf+0x6c>
    20b0:	9a 95       	dec	r25
    20b2:	66 0f       	add	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	88 1f       	adc	r24, r24
    20b8:	da f7       	brpl	.-10     	; 0x20b0 <__floatsisf+0x62>
    20ba:	88 0f       	add	r24, r24
    20bc:	96 95       	lsr	r25
    20be:	87 95       	ror	r24
    20c0:	97 f9       	bld	r25, 7
    20c2:	08 95       	ret

000020c4 <__fp_cmp>:
    20c4:	99 0f       	add	r25, r25
    20c6:	00 08       	sbc	r0, r0
    20c8:	55 0f       	add	r21, r21
    20ca:	aa 0b       	sbc	r26, r26
    20cc:	e0 e8       	ldi	r30, 0x80	; 128
    20ce:	fe ef       	ldi	r31, 0xFE	; 254
    20d0:	16 16       	cp	r1, r22
    20d2:	17 06       	cpc	r1, r23
    20d4:	e8 07       	cpc	r30, r24
    20d6:	f9 07       	cpc	r31, r25
    20d8:	c0 f0       	brcs	.+48     	; 0x210a <__fp_cmp+0x46>
    20da:	12 16       	cp	r1, r18
    20dc:	13 06       	cpc	r1, r19
    20de:	e4 07       	cpc	r30, r20
    20e0:	f5 07       	cpc	r31, r21
    20e2:	98 f0       	brcs	.+38     	; 0x210a <__fp_cmp+0x46>
    20e4:	62 1b       	sub	r22, r18
    20e6:	73 0b       	sbc	r23, r19
    20e8:	84 0b       	sbc	r24, r20
    20ea:	95 0b       	sbc	r25, r21
    20ec:	39 f4       	brne	.+14     	; 0x20fc <__fp_cmp+0x38>
    20ee:	0a 26       	eor	r0, r26
    20f0:	61 f0       	breq	.+24     	; 0x210a <__fp_cmp+0x46>
    20f2:	23 2b       	or	r18, r19
    20f4:	24 2b       	or	r18, r20
    20f6:	25 2b       	or	r18, r21
    20f8:	21 f4       	brne	.+8      	; 0x2102 <__fp_cmp+0x3e>
    20fa:	08 95       	ret
    20fc:	0a 26       	eor	r0, r26
    20fe:	09 f4       	brne	.+2      	; 0x2102 <__fp_cmp+0x3e>
    2100:	a1 40       	sbci	r26, 0x01	; 1
    2102:	a6 95       	lsr	r26
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	81 1d       	adc	r24, r1
    2108:	81 1d       	adc	r24, r1
    210a:	08 95       	ret

0000210c <__fp_inf>:
    210c:	97 f9       	bld	r25, 7
    210e:	9f 67       	ori	r25, 0x7F	; 127
    2110:	80 e8       	ldi	r24, 0x80	; 128
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	08 95       	ret

00002118 <__fp_nan>:
    2118:	9f ef       	ldi	r25, 0xFF	; 255
    211a:	80 ec       	ldi	r24, 0xC0	; 192
    211c:	08 95       	ret

0000211e <__fp_powser>:
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	1f 93       	push	r17
    2124:	0f 93       	push	r16
    2126:	ff 92       	push	r15
    2128:	ef 92       	push	r14
    212a:	df 92       	push	r13
    212c:	7b 01       	movw	r14, r22
    212e:	8c 01       	movw	r16, r24
    2130:	68 94       	set
    2132:	05 c0       	rjmp	.+10     	; 0x213e <__fp_powser+0x20>
    2134:	da 2e       	mov	r13, r26
    2136:	ef 01       	movw	r28, r30
    2138:	af d0       	rcall	.+350    	; 0x2298 <__mulsf3x>
    213a:	fe 01       	movw	r30, r28
    213c:	e8 94       	clt
    213e:	a5 91       	lpm	r26, Z+
    2140:	25 91       	lpm	r18, Z+
    2142:	35 91       	lpm	r19, Z+
    2144:	45 91       	lpm	r20, Z+
    2146:	55 91       	lpm	r21, Z+
    2148:	ae f3       	brts	.-22     	; 0x2134 <__fp_powser+0x16>
    214a:	ef 01       	movw	r28, r30
    214c:	63 de       	rcall	.-826    	; 0x1e14 <__addsf3x>
    214e:	fe 01       	movw	r30, r28
    2150:	97 01       	movw	r18, r14
    2152:	a8 01       	movw	r20, r16
    2154:	da 94       	dec	r13
    2156:	79 f7       	brne	.-34     	; 0x2136 <__fp_powser+0x18>
    2158:	df 90       	pop	r13
    215a:	ef 90       	pop	r14
    215c:	ff 90       	pop	r15
    215e:	0f 91       	pop	r16
    2160:	1f 91       	pop	r17
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <__fp_pscA>:
    2168:	00 24       	eor	r0, r0
    216a:	0a 94       	dec	r0
    216c:	16 16       	cp	r1, r22
    216e:	17 06       	cpc	r1, r23
    2170:	18 06       	cpc	r1, r24
    2172:	09 06       	cpc	r0, r25
    2174:	08 95       	ret

00002176 <__fp_pscB>:
    2176:	00 24       	eor	r0, r0
    2178:	0a 94       	dec	r0
    217a:	12 16       	cp	r1, r18
    217c:	13 06       	cpc	r1, r19
    217e:	14 06       	cpc	r1, r20
    2180:	05 06       	cpc	r0, r21
    2182:	08 95       	ret
    2184:	c9 cf       	rjmp	.-110    	; 0x2118 <__fp_nan>

00002186 <__fp_rempio2>:
    2186:	50 d0       	rcall	.+160    	; 0x2228 <__fp_splitA>
    2188:	e8 f3       	brcs	.-6      	; 0x2184 <__fp_pscB+0xe>
    218a:	e8 94       	clt
    218c:	e0 e0       	ldi	r30, 0x00	; 0
    218e:	bb 27       	eor	r27, r27
    2190:	9f 57       	subi	r25, 0x7F	; 127
    2192:	f0 f0       	brcs	.+60     	; 0x21d0 <__fp_rempio2+0x4a>
    2194:	2a ed       	ldi	r18, 0xDA	; 218
    2196:	3f e0       	ldi	r19, 0x0F	; 15
    2198:	49 ec       	ldi	r20, 0xC9	; 201
    219a:	06 c0       	rjmp	.+12     	; 0x21a8 <__fp_rempio2+0x22>
    219c:	ee 0f       	add	r30, r30
    219e:	bb 0f       	add	r27, r27
    21a0:	66 1f       	adc	r22, r22
    21a2:	77 1f       	adc	r23, r23
    21a4:	88 1f       	adc	r24, r24
    21a6:	28 f0       	brcs	.+10     	; 0x21b2 <__fp_rempio2+0x2c>
    21a8:	b2 3a       	cpi	r27, 0xA2	; 162
    21aa:	62 07       	cpc	r22, r18
    21ac:	73 07       	cpc	r23, r19
    21ae:	84 07       	cpc	r24, r20
    21b0:	28 f0       	brcs	.+10     	; 0x21bc <__fp_rempio2+0x36>
    21b2:	b2 5a       	subi	r27, 0xA2	; 162
    21b4:	62 0b       	sbc	r22, r18
    21b6:	73 0b       	sbc	r23, r19
    21b8:	84 0b       	sbc	r24, r20
    21ba:	e3 95       	inc	r30
    21bc:	9a 95       	dec	r25
    21be:	72 f7       	brpl	.-36     	; 0x219c <__fp_rempio2+0x16>
    21c0:	80 38       	cpi	r24, 0x80	; 128
    21c2:	30 f4       	brcc	.+12     	; 0x21d0 <__fp_rempio2+0x4a>
    21c4:	9a 95       	dec	r25
    21c6:	bb 0f       	add	r27, r27
    21c8:	66 1f       	adc	r22, r22
    21ca:	77 1f       	adc	r23, r23
    21cc:	88 1f       	adc	r24, r24
    21ce:	d2 f7       	brpl	.-12     	; 0x21c4 <__fp_rempio2+0x3e>
    21d0:	90 48       	sbci	r25, 0x80	; 128
    21d2:	be c0       	rjmp	.+380    	; 0x2350 <__fp_mpack_finite>

000021d4 <__fp_round>:
    21d4:	09 2e       	mov	r0, r25
    21d6:	03 94       	inc	r0
    21d8:	00 0c       	add	r0, r0
    21da:	11 f4       	brne	.+4      	; 0x21e0 <__fp_round+0xc>
    21dc:	88 23       	and	r24, r24
    21de:	52 f0       	brmi	.+20     	; 0x21f4 <__fp_round+0x20>
    21e0:	bb 0f       	add	r27, r27
    21e2:	40 f4       	brcc	.+16     	; 0x21f4 <__fp_round+0x20>
    21e4:	bf 2b       	or	r27, r31
    21e6:	11 f4       	brne	.+4      	; 0x21ec <__fp_round+0x18>
    21e8:	60 ff       	sbrs	r22, 0
    21ea:	04 c0       	rjmp	.+8      	; 0x21f4 <__fp_round+0x20>
    21ec:	6f 5f       	subi	r22, 0xFF	; 255
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	8f 4f       	sbci	r24, 0xFF	; 255
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	08 95       	ret

000021f6 <__fp_sinus>:
    21f6:	ef 93       	push	r30
    21f8:	e0 ff       	sbrs	r30, 0
    21fa:	06 c0       	rjmp	.+12     	; 0x2208 <__fp_sinus+0x12>
    21fc:	a2 ea       	ldi	r26, 0xA2	; 162
    21fe:	2a ed       	ldi	r18, 0xDA	; 218
    2200:	3f e0       	ldi	r19, 0x0F	; 15
    2202:	49 ec       	ldi	r20, 0xC9	; 201
    2204:	5f eb       	ldi	r21, 0xBF	; 191
    2206:	06 de       	rcall	.-1012   	; 0x1e14 <__addsf3x>
    2208:	e5 df       	rcall	.-54     	; 0x21d4 <__fp_round>
    220a:	0f 90       	pop	r0
    220c:	03 94       	inc	r0
    220e:	01 fc       	sbrc	r0, 1
    2210:	90 58       	subi	r25, 0x80	; 128
    2212:	e9 eb       	ldi	r30, 0xB9	; 185
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	a8 c0       	rjmp	.+336    	; 0x2368 <__fp_powsodd>

00002218 <__fp_split3>:
    2218:	57 fd       	sbrc	r21, 7
    221a:	90 58       	subi	r25, 0x80	; 128
    221c:	44 0f       	add	r20, r20
    221e:	55 1f       	adc	r21, r21
    2220:	59 f0       	breq	.+22     	; 0x2238 <__fp_splitA+0x10>
    2222:	5f 3f       	cpi	r21, 0xFF	; 255
    2224:	71 f0       	breq	.+28     	; 0x2242 <__fp_splitA+0x1a>
    2226:	47 95       	ror	r20

00002228 <__fp_splitA>:
    2228:	88 0f       	add	r24, r24
    222a:	97 fb       	bst	r25, 7
    222c:	99 1f       	adc	r25, r25
    222e:	61 f0       	breq	.+24     	; 0x2248 <__fp_splitA+0x20>
    2230:	9f 3f       	cpi	r25, 0xFF	; 255
    2232:	79 f0       	breq	.+30     	; 0x2252 <__fp_splitA+0x2a>
    2234:	87 95       	ror	r24
    2236:	08 95       	ret
    2238:	12 16       	cp	r1, r18
    223a:	13 06       	cpc	r1, r19
    223c:	14 06       	cpc	r1, r20
    223e:	55 1f       	adc	r21, r21
    2240:	f2 cf       	rjmp	.-28     	; 0x2226 <__fp_split3+0xe>
    2242:	46 95       	lsr	r20
    2244:	f1 df       	rcall	.-30     	; 0x2228 <__fp_splitA>
    2246:	08 c0       	rjmp	.+16     	; 0x2258 <__fp_splitA+0x30>
    2248:	16 16       	cp	r1, r22
    224a:	17 06       	cpc	r1, r23
    224c:	18 06       	cpc	r1, r24
    224e:	99 1f       	adc	r25, r25
    2250:	f1 cf       	rjmp	.-30     	; 0x2234 <__fp_splitA+0xc>
    2252:	86 95       	lsr	r24
    2254:	71 05       	cpc	r23, r1
    2256:	61 05       	cpc	r22, r1
    2258:	08 94       	sec
    225a:	08 95       	ret

0000225c <__fp_zero>:
    225c:	e8 94       	clt

0000225e <__fp_szero>:
    225e:	bb 27       	eor	r27, r27
    2260:	66 27       	eor	r22, r22
    2262:	77 27       	eor	r23, r23
    2264:	cb 01       	movw	r24, r22
    2266:	97 f9       	bld	r25, 7
    2268:	08 95       	ret

0000226a <__gesf2>:
    226a:	2c df       	rcall	.-424    	; 0x20c4 <__fp_cmp>
    226c:	08 f4       	brcc	.+2      	; 0x2270 <__gesf2+0x6>
    226e:	8f ef       	ldi	r24, 0xFF	; 255
    2270:	08 95       	ret

00002272 <inverse>:
    2272:	9b 01       	movw	r18, r22
    2274:	ac 01       	movw	r20, r24
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	80 e8       	ldi	r24, 0x80	; 128
    227c:	9f e3       	ldi	r25, 0x3F	; 63
    227e:	4c ce       	rjmp	.-872    	; 0x1f18 <__divsf3>

00002280 <__mulsf3>:
    2280:	0b d0       	rcall	.+22     	; 0x2298 <__mulsf3x>
    2282:	a8 cf       	rjmp	.-176    	; 0x21d4 <__fp_round>
    2284:	71 df       	rcall	.-286    	; 0x2168 <__fp_pscA>
    2286:	28 f0       	brcs	.+10     	; 0x2292 <__mulsf3+0x12>
    2288:	76 df       	rcall	.-276    	; 0x2176 <__fp_pscB>
    228a:	18 f0       	brcs	.+6      	; 0x2292 <__mulsf3+0x12>
    228c:	95 23       	and	r25, r21
    228e:	09 f0       	breq	.+2      	; 0x2292 <__mulsf3+0x12>
    2290:	3d cf       	rjmp	.-390    	; 0x210c <__fp_inf>
    2292:	42 cf       	rjmp	.-380    	; 0x2118 <__fp_nan>
    2294:	11 24       	eor	r1, r1
    2296:	e3 cf       	rjmp	.-58     	; 0x225e <__fp_szero>

00002298 <__mulsf3x>:
    2298:	bf df       	rcall	.-130    	; 0x2218 <__fp_split3>
    229a:	a0 f3       	brcs	.-24     	; 0x2284 <__mulsf3+0x4>

0000229c <__mulsf3_pse>:
    229c:	95 9f       	mul	r25, r21
    229e:	d1 f3       	breq	.-12     	; 0x2294 <__mulsf3+0x14>
    22a0:	95 0f       	add	r25, r21
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	55 1f       	adc	r21, r21
    22a6:	62 9f       	mul	r22, r18
    22a8:	f0 01       	movw	r30, r0
    22aa:	72 9f       	mul	r23, r18
    22ac:	bb 27       	eor	r27, r27
    22ae:	f0 0d       	add	r31, r0
    22b0:	b1 1d       	adc	r27, r1
    22b2:	63 9f       	mul	r22, r19
    22b4:	aa 27       	eor	r26, r26
    22b6:	f0 0d       	add	r31, r0
    22b8:	b1 1d       	adc	r27, r1
    22ba:	aa 1f       	adc	r26, r26
    22bc:	64 9f       	mul	r22, r20
    22be:	66 27       	eor	r22, r22
    22c0:	b0 0d       	add	r27, r0
    22c2:	a1 1d       	adc	r26, r1
    22c4:	66 1f       	adc	r22, r22
    22c6:	82 9f       	mul	r24, r18
    22c8:	22 27       	eor	r18, r18
    22ca:	b0 0d       	add	r27, r0
    22cc:	a1 1d       	adc	r26, r1
    22ce:	62 1f       	adc	r22, r18
    22d0:	73 9f       	mul	r23, r19
    22d2:	b0 0d       	add	r27, r0
    22d4:	a1 1d       	adc	r26, r1
    22d6:	62 1f       	adc	r22, r18
    22d8:	83 9f       	mul	r24, r19
    22da:	a0 0d       	add	r26, r0
    22dc:	61 1d       	adc	r22, r1
    22de:	22 1f       	adc	r18, r18
    22e0:	74 9f       	mul	r23, r20
    22e2:	33 27       	eor	r19, r19
    22e4:	a0 0d       	add	r26, r0
    22e6:	61 1d       	adc	r22, r1
    22e8:	23 1f       	adc	r18, r19
    22ea:	84 9f       	mul	r24, r20
    22ec:	60 0d       	add	r22, r0
    22ee:	21 1d       	adc	r18, r1
    22f0:	82 2f       	mov	r24, r18
    22f2:	76 2f       	mov	r23, r22
    22f4:	6a 2f       	mov	r22, r26
    22f6:	11 24       	eor	r1, r1
    22f8:	9f 57       	subi	r25, 0x7F	; 127
    22fa:	50 40       	sbci	r21, 0x00	; 0
    22fc:	8a f0       	brmi	.+34     	; 0x2320 <__mulsf3_pse+0x84>
    22fe:	e1 f0       	breq	.+56     	; 0x2338 <__mulsf3_pse+0x9c>
    2300:	88 23       	and	r24, r24
    2302:	4a f0       	brmi	.+18     	; 0x2316 <__mulsf3_pse+0x7a>
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	bb 1f       	adc	r27, r27
    230a:	66 1f       	adc	r22, r22
    230c:	77 1f       	adc	r23, r23
    230e:	88 1f       	adc	r24, r24
    2310:	91 50       	subi	r25, 0x01	; 1
    2312:	50 40       	sbci	r21, 0x00	; 0
    2314:	a9 f7       	brne	.-22     	; 0x2300 <__mulsf3_pse+0x64>
    2316:	9e 3f       	cpi	r25, 0xFE	; 254
    2318:	51 05       	cpc	r21, r1
    231a:	70 f0       	brcs	.+28     	; 0x2338 <__mulsf3_pse+0x9c>
    231c:	f7 ce       	rjmp	.-530    	; 0x210c <__fp_inf>
    231e:	9f cf       	rjmp	.-194    	; 0x225e <__fp_szero>
    2320:	5f 3f       	cpi	r21, 0xFF	; 255
    2322:	ec f3       	brlt	.-6      	; 0x231e <__mulsf3_pse+0x82>
    2324:	98 3e       	cpi	r25, 0xE8	; 232
    2326:	dc f3       	brlt	.-10     	; 0x231e <__mulsf3_pse+0x82>
    2328:	86 95       	lsr	r24
    232a:	77 95       	ror	r23
    232c:	67 95       	ror	r22
    232e:	b7 95       	ror	r27
    2330:	f7 95       	ror	r31
    2332:	e7 95       	ror	r30
    2334:	9f 5f       	subi	r25, 0xFF	; 255
    2336:	c1 f7       	brne	.-16     	; 0x2328 <__mulsf3_pse+0x8c>
    2338:	fe 2b       	or	r31, r30
    233a:	88 0f       	add	r24, r24
    233c:	91 1d       	adc	r25, r1
    233e:	96 95       	lsr	r25
    2340:	87 95       	ror	r24
    2342:	97 f9       	bld	r25, 7
    2344:	08 95       	ret

00002346 <square>:
    2346:	9b 01       	movw	r18, r22
    2348:	ac 01       	movw	r20, r24
    234a:	9a cf       	rjmp	.-204    	; 0x2280 <__mulsf3>

0000234c <__fp_mpack>:
    234c:	9f 3f       	cpi	r25, 0xFF	; 255
    234e:	31 f0       	breq	.+12     	; 0x235c <__fp_mpack_finite+0xc>

00002350 <__fp_mpack_finite>:
    2350:	91 50       	subi	r25, 0x01	; 1
    2352:	20 f4       	brcc	.+8      	; 0x235c <__fp_mpack_finite+0xc>
    2354:	87 95       	ror	r24
    2356:	77 95       	ror	r23
    2358:	67 95       	ror	r22
    235a:	b7 95       	ror	r27
    235c:	88 0f       	add	r24, r24
    235e:	91 1d       	adc	r25, r1
    2360:	96 95       	lsr	r25
    2362:	87 95       	ror	r24
    2364:	97 f9       	bld	r25, 7
    2366:	08 95       	ret

00002368 <__fp_powsodd>:
    2368:	9f 93       	push	r25
    236a:	8f 93       	push	r24
    236c:	7f 93       	push	r23
    236e:	6f 93       	push	r22
    2370:	ff 93       	push	r31
    2372:	ef 93       	push	r30
    2374:	9b 01       	movw	r18, r22
    2376:	ac 01       	movw	r20, r24
    2378:	83 df       	rcall	.-250    	; 0x2280 <__mulsf3>
    237a:	ef 91       	pop	r30
    237c:	ff 91       	pop	r31
    237e:	cf de       	rcall	.-610    	; 0x211e <__fp_powser>
    2380:	2f 91       	pop	r18
    2382:	3f 91       	pop	r19
    2384:	4f 91       	pop	r20
    2386:	5f 91       	pop	r21
    2388:	7b cf       	rjmp	.-266    	; 0x2280 <__mulsf3>

0000238a <_exit>:
    238a:	f8 94       	cli

0000238c <__stop_program>:
    238c:	ff cf       	rjmp	.-2      	; 0x238c <__stop_program>
