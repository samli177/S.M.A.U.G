
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000012bc  00800100  00002446  000024da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002446  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000684  008013bc  008013bc  00003796  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  00003798  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  00006600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007348  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000438  00000000  00000000  00007377  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003fad  00000000  00000000  000077af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fab  00000000  00000000  0000b75c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002745  00000000  00000000  0000c707  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ccc  00000000  00000000  0000ee4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000de0  00000000  00000000  0000fb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002718  00000000  00000000  000108f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000490  00000000  00000000  00013010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	23 c6       	rjmp	.+3142   	; 0xc4c <__vector_1>
       6:	00 00       	nop
       8:	4b c6       	rjmp	.+3222   	; 0xca0 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	0f c7       	rjmp	.+3614   	; 0xe30 <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	b0 c6       	rjmp	.+3424   	; 0xd96 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	98 c6       	rjmp	.+3376   	; 0xdb2 <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e6 e4       	ldi	r30, 0x46	; 70
      ec:	f4 e2       	ldi	r31, 0x24	; 36
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	ac 3b       	cpi	r26, 0xBC	; 188
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	2a e1       	ldi	r18, 0x1A	; 26
     100:	ac eb       	ldi	r26, 0xBC	; 188
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a0 34       	cpi	r26, 0x40	; 64
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	f2 d5       	rcall	.+3044   	; 0xcf4 <main>
     110:	0c 94 21 12 	jmp	0x2442	; 0x2442 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
	}
}

void turn_around()
{
	if(gStatus)
     116:	80 91 00 01 	lds	r24, 0x0100
     11a:	88 23       	and	r24, r24
     11c:	21 f0       	breq	.+8      	; 0x126 <turn_around+0x10>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     11e:	6c e1       	ldi	r22, 0x1C	; 28
     120:	71 e1       	ldi	r23, 0x11	; 17
     122:	80 e8       	ldi	r24, 0x80	; 128
     124:	fa d7       	rcall	.+4084   	; 0x111a <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(180, 0);
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	84 eb       	ldi	r24, 0xB4	; 180
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 48 0c 	call	0x1890	; 0x1890 <USART_send_turn>
	while(USART_turn_done() == 0)
     130:	08 c0       	rjmp	.+16     	; 0x142 <turn_around+0x2c>
	{
		USART_decode_rx_fifo();
     132:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <USART_decode_rx_fifo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     136:	8f e3       	ldi	r24, 0x3F	; 63
     138:	9c e9       	ldi	r25, 0x9C	; 156
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <turn_around+0x24>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <turn_around+0x2a>
     140:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(180, 0);
	while(USART_turn_done() == 0)
     142:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <USART_turn_done>
     146:	88 23       	and	r24, r24
     148:	a1 f3       	breq	.-24     	; 0x132 <turn_around+0x1c>
	{
		USART_decode_rx_fifo();
		_delay_ms(10);
	}
	
	if(gStatus)
     14a:	80 91 00 01 	lds	r24, 0x0100
     14e:	88 23       	and	r24, r24
     150:	21 f0       	breq	.+8      	; 0x15a <turn_around+0x44>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     152:	65 e3       	ldi	r22, 0x35	; 53
     154:	71 e1       	ldi	r23, 0x11	; 17
     156:	80 e8       	ldi	r24, 0x80	; 128
     158:	e0 c7       	rjmp	.+4032   	; 0x111a <TWI_send_string>
     15a:	08 95       	ret

0000015c <walk_forward>:
	}
}

void walk_forward()
{
     15c:	8f 92       	push	r8
     15e:	9f 92       	push	r9
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	cf 92       	push	r12
     166:	df 92       	push	r13
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     170:	73 d4       	rcall	.+2278   	; 0xa58 <navigation_angle_offset>
     172:	6b 01       	movw	r12, r22
     174:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     176:	d4 d2       	rcall	.+1448   	; 0x720 <navigation_direction_regulation>
     178:	4b 01       	movw	r8, r22
     17a:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	48 e4       	ldi	r20, 0x48	; 72
     182:	52 e4       	ldi	r21, 0x42	; 66
     184:	c7 01       	movw	r24, r14
     186:	b6 01       	movw	r22, r12
     188:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     18c:	9b 01       	movw	r18, r22
     18e:	ac 01       	movw	r20, r24
     190:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     194:	2b ed       	ldi	r18, 0xDB	; 219
     196:	3f e0       	ldi	r19, 0x0F	; 15
     198:	49 e4       	ldi	r20, 0x49	; 73
     19a:	50 e4       	ldi	r21, 0x40	; 64
     19c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divsf3>
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	4c e4       	ldi	r20, 0x4C	; 76
     1a6:	52 e4       	ldi	r21, 0x42	; 66
     1a8:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     1ac:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1b0:	64 36       	cpi	r22, 0x64	; 100
     1b2:	71 05       	cpc	r23, r1
     1b4:	34 f4       	brge	.+12     	; 0x1c2 <walk_forward+0x66>
     1b6:	eb 01       	movw	r28, r22
     1b8:	dd 23       	and	r29, r29
     1ba:	2c f4       	brge	.+10     	; 0x1c6 <walk_forward+0x6a>
     1bc:	c0 e0       	ldi	r28, 0x00	; 0
     1be:	d0 e0       	ldi	r29, 0x00	; 0
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1c2:	c4 e6       	ldi	r28, 0x64	; 100
     1c4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	44 eb       	ldi	r20, 0xB4	; 180
     1cc:	52 e4       	ldi	r21, 0x42	; 66
     1ce:	c5 01       	movw	r24, r10
     1d0:	b4 01       	movw	r22, r8
     1d2:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     1d6:	2b ed       	ldi	r18, 0xDB	; 219
     1d8:	3f e0       	ldi	r19, 0x0F	; 15
     1da:	49 ec       	ldi	r20, 0xC9	; 201
     1dc:	50 e4       	ldi	r21, 0x40	; 64
     1de:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__divsf3>
     1e2:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fixsfsi>
     1e6:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1e8:	40 91 01 01 	lds	r20, 0x0101
     1ec:	6c 2f       	mov	r22, r28
     1ee:	82 2f       	mov	r24, r18
     1f0:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1f4:	bc d1       	rcall	.+888    	; 0x56e <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	bf 90       	pop	r11
     204:	af 90       	pop	r10
     206:	9f 90       	pop	r9
     208:	8f 90       	pop	r8
     20a:	08 95       	ret

0000020c <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
	if(gStatus)
     210:	80 91 00 01 	lds	r24, 0x0100
     214:	88 23       	and	r24, r24
     216:	21 f0       	breq	.+8      	; 0x220 <turn_right+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     218:	6a e5       	ldi	r22, 0x5A	; 90
     21a:	71 e1       	ldi	r23, 0x11	; 17
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	7d d7       	rcall	.+3834   	; 0x111a <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(90, 1);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	8a e5       	ldi	r24, 0x5A	; 90
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 48 0c 	call	0x1890	; 0x1890 <USART_send_turn>
	while(USART_turn_done() == 0)
     22a:	08 c0       	rjmp	.+16     	; 0x23c <turn_right+0x30>
	{
		USART_decode_rx_fifo();
     22c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <USART_decode_rx_fifo>
     230:	8f e3       	ldi	r24, 0x3F	; 63
     232:	9c e9       	ldi	r25, 0x9C	; 156
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <turn_right+0x28>
     238:	00 c0       	rjmp	.+0      	; 0x23a <turn_right+0x2e>
     23a:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(90, 1);
	while(USART_turn_done() == 0)
     23c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <USART_turn_done>
     240:	88 23       	and	r24, r24
     242:	a1 f3       	breq	.-24     	; 0x22c <turn_right+0x20>
     244:	cc e0       	ldi	r28, 0x0C	; 12
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	03 c0       	rjmp	.+6      	; 0x250 <turn_right+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     24a:	88 df       	rcall	.-240    	; 0x15c <walk_forward>
     24c:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_decode_rx_fifo();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
     24e:	19 f0       	breq	.+6      	; 0x256 <turn_right+0x4a>
     250:	88 d1       	rcall	.+784    	; 0x562 <navigation_autonomous_walk>
     252:	81 11       	cpse	r24, r1
     254:	fa cf       	rjmp	.-12     	; 0x24a <turn_right+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     256:	80 91 00 01 	lds	r24, 0x0100
     25a:	88 23       	and	r24, r24
     25c:	21 f0       	breq	.+8      	; 0x266 <turn_right+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     25e:	62 e7       	ldi	r22, 0x72	; 114
     260:	71 e1       	ldi	r23, 0x11	; 17
     262:	80 e8       	ldi	r24, 0x80	; 128
     264:	5a d7       	rcall	.+3764   	; 0x111a <TWI_send_string>
	}
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
	if(gStatus)
     270:	80 91 00 01 	lds	r24, 0x0100
     274:	88 23       	and	r24, r24
     276:	21 f0       	breq	.+8      	; 0x280 <turn_left+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     278:	66 e8       	ldi	r22, 0x86	; 134
     27a:	71 e1       	ldi	r23, 0x11	; 17
     27c:	80 e8       	ldi	r24, 0x80	; 128
     27e:	4d d7       	rcall	.+3738   	; 0x111a <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(90, 0);
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	8a e5       	ldi	r24, 0x5A	; 90
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 48 0c 	call	0x1890	; 0x1890 <USART_send_turn>
	while(USART_turn_done() == 0)
     28a:	08 c0       	rjmp	.+16     	; 0x29c <turn_left+0x30>
	{
		USART_decode_rx_fifo();
     28c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <USART_decode_rx_fifo>
     290:	8f e3       	ldi	r24, 0x3F	; 63
     292:	9c e9       	ldi	r25, 0x9C	; 156
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <turn_left+0x28>
     298:	00 c0       	rjmp	.+0      	; 0x29a <turn_left+0x2e>
     29a:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_send_turn(90, 0);
	while(USART_turn_done() == 0)
     29c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <USART_turn_done>
     2a0:	88 23       	and	r24, r24
     2a2:	a1 f3       	breq	.-24     	; 0x28c <turn_left+0x20>
     2a4:	cc e0       	ldi	r28, 0x0C	; 12
     2a6:	d0 e0       	ldi	r29, 0x00	; 0
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <turn_left+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     2aa:	58 df       	rcall	.-336    	; 0x15c <walk_forward>
     2ac:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_decode_rx_fifo();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < TURN_EXIT_ITTERATIONS && navigation_autonomous_walk() != 0); ++i)
     2ae:	19 f0       	breq	.+6      	; 0x2b6 <turn_left+0x4a>
     2b0:	58 d1       	rcall	.+688    	; 0x562 <navigation_autonomous_walk>
     2b2:	81 11       	cpse	r24, r1
     2b4:	fa cf       	rjmp	.-12     	; 0x2aa <turn_left+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     2b6:	80 91 00 01 	lds	r24, 0x0100
     2ba:	88 23       	and	r24, r24
     2bc:	21 f0       	breq	.+8      	; 0x2c6 <turn_left+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2be:	6d e9       	ldi	r22, 0x9D	; 157
     2c0:	71 e1       	ldi	r23, 0x11	; 17
     2c2:	80 e8       	ldi	r24, 0x80	; 128
     2c4:	2a d7       	rcall	.+3668   	; 0x111a <TWI_send_string>
	}
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <climb>:
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void climb()
{
	USART_send_climb();	
     2cc:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <USART_send_climb>
     2d0:	08 95       	ret

000002d2 <autonomouswalk_walk>:
}

void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
     2d2:	d6 d1       	rcall	.+940    	; 0x680 <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     2d4:	40 d1       	rcall	.+640    	; 0x556 <navigation_left_algorithm>
     2d6:	88 23       	and	r24, r24
     2d8:	09 f4       	brne	.+2      	; 0x2dc <autonomouswalk_walk+0xa>
     2da:	4e c0       	rjmp	.+156    	; 0x378 <autonomouswalk_walk+0xa6>
	{
		if(navigation_check_left_turn() == 2)
     2dc:	0c d2       	rcall	.+1048   	; 0x6f6 <navigation_check_left_turn>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	41 f4       	brne	.+16     	; 0x2f2 <autonomouswalk_walk+0x20>
		{
			for(int i = 0;i < 4; ++i)
			{
				walk_forward();
     2e2:	3c df       	rcall	.-392    	; 0x15c <walk_forward>
     2e4:	3b df       	rcall	.-394    	; 0x15c <walk_forward>
     2e6:	3a df       	rcall	.-396    	; 0x15c <walk_forward>
     2e8:	39 df       	rcall	.-398    	; 0x15c <walk_forward>
			}
			turn_left();
     2ea:	c0 df       	rcall	.-128    	; 0x26c <turn_left>
			decisionCounter = 0;
     2ec:	10 92 bc 13 	sts	0x13BC, r1
     2f0:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	7d d1       	rcall	.+762    	; 0x5f2 <navigation_get_sensor>
     2f8:	89 32       	cpi	r24, 0x29	; 41
     2fa:	c0 f0       	brcs	.+48     	; 0x32c <autonomouswalk_walk+0x5a>
		{
			if(navigation_get_sensor(6) < CORRIDOR_WIDTH / 2 - 5)
     2fc:	86 e0       	ldi	r24, 0x06	; 6
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	78 d1       	rcall	.+752    	; 0x5f2 <navigation_get_sensor>
     302:	83 32       	cpi	r24, 0x23	; 35
     304:	78 f4       	brcc	.+30     	; 0x324 <autonomouswalk_walk+0x52>
			{
				climb();
     306:	e2 df       	rcall	.-60     	; 0x2cc <climb>
				while(USART_climb_done() == 0)
     308:	08 c0       	rjmp	.+16     	; 0x31a <autonomouswalk_walk+0x48>
				{
					USART_decode_rx_fifo();
     30a:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <USART_decode_rx_fifo>
     30e:	8f e3       	ldi	r24, 0x3F	; 63
     310:	9c e9       	ldi	r25, 0x9C	; 156
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <autonomouswalk_walk+0x40>
     316:	00 c0       	rjmp	.+0      	; 0x318 <autonomouswalk_walk+0x46>
     318:	00 00       	nop
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
		{
			if(navigation_get_sensor(6) < CORRIDOR_WIDTH / 2 - 5)
			{
				climb();
				while(USART_climb_done() == 0)
     31a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <USART_climb_done>
     31e:	88 23       	and	r24, r24
     320:	a1 f3       	breq	.-24     	; 0x30a <autonomouswalk_walk+0x38>
     322:	01 c0       	rjmp	.+2      	; 0x326 <autonomouswalk_walk+0x54>
					_delay_ms(10);
				}
			}
			else
			{
				walk_forward();	
     324:	1b df       	rcall	.-458    	; 0x15c <walk_forward>
			}
			decisionCounter = 0;
     326:	10 92 bc 13 	sts	0x13BC, r1
     32a:	08 95       	ret
		}
		else if(navigation_check_right_turn() == 2)
     32c:	cf d1       	rcall	.+926    	; 0x6cc <navigation_check_right_turn>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	21 f4       	brne	.+8      	; 0x33a <autonomouswalk_walk+0x68>
		{
			turn_right();
     332:	6c df       	rcall	.-296    	; 0x20c <turn_right>
			decisionCounter = 0;
     334:	10 92 bc 13 	sts	0x13BC, r1
     338:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     33a:	dd d1       	rcall	.+954    	; 0x6f6 <navigation_check_left_turn>
     33c:	81 11       	cpse	r24, r1
     33e:	07 c0       	rjmp	.+14     	; 0x34e <autonomouswalk_walk+0x7c>
     340:	c5 d1       	rcall	.+906    	; 0x6cc <navigation_check_right_turn>
     342:	81 11       	cpse	r24, r1
     344:	04 c0       	rjmp	.+8      	; 0x34e <autonomouswalk_walk+0x7c>
		{
			turn_around();
     346:	e7 de       	rcall	.-562    	; 0x116 <turn_around>
			decisionCounter = 0;
     348:	10 92 bc 13 	sts	0x13BC, r1
     34c:	08 95       	ret
		}
		else if(decisionCounter < 4)
     34e:	80 91 bc 13 	lds	r24, 0x13BC
     352:	84 30       	cpi	r24, 0x04	; 4
     354:	38 f4       	brcc	.+14     	; 0x364 <autonomouswalk_walk+0x92>
		{
			walk_forward();
     356:	02 df       	rcall	.-508    	; 0x15c <walk_forward>
			++decisionCounter;
     358:	80 91 bc 13 	lds	r24, 0x13BC
     35c:	8f 5f       	subi	r24, 0xFF	; 255
     35e:	80 93 bc 13 	sts	0x13BC, r24
     362:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     364:	10 92 bc 13 	sts	0x13BC, r1
			navigation_set_autonomous_walk(0);
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	fe d0       	rcall	.+508    	; 0x568 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     36c:	49 e3       	ldi	r20, 0x39	; 57
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	60 eb       	ldi	r22, 0xB0	; 176
     372:	71 e1       	ldi	r23, 0x11	; 17
     374:	80 e8       	ldi	r24, 0x80	; 128
     376:	17 c7       	rjmp	.+3630   	; 0x11a6 <TWI_send_string_fixed_length>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     378:	a9 d1       	rcall	.+850    	; 0x6cc <navigation_check_right_turn>
     37a:	82 30       	cpi	r24, 0x02	; 2
     37c:	41 f4       	brne	.+16     	; 0x38e <autonomouswalk_walk+0xbc>
		{
			for(int i = 0;i < 4; ++i)
			{
				walk_forward();
     37e:	ee de       	rcall	.-548    	; 0x15c <walk_forward>
     380:	ed de       	rcall	.-550    	; 0x15c <walk_forward>
     382:	ec de       	rcall	.-552    	; 0x15c <walk_forward>
     384:	eb de       	rcall	.-554    	; 0x15c <walk_forward>
			}
			turn_right();
     386:	42 df       	rcall	.-380    	; 0x20c <turn_right>
			decisionCounter = 0;
     388:	10 92 bc 13 	sts	0x13BC, r1
     38c:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     38e:	84 e0       	ldi	r24, 0x04	; 4
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	2f d1       	rcall	.+606    	; 0x5f2 <navigation_get_sensor>
     394:	89 32       	cpi	r24, 0x29	; 41
     396:	c0 f0       	brcs	.+48     	; 0x3c8 <autonomouswalk_walk+0xf6>
		{
			if(navigation_get_sensor(6) < CORRIDOR_WIDTH / 2 - 5)
     398:	86 e0       	ldi	r24, 0x06	; 6
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2a d1       	rcall	.+596    	; 0x5f2 <navigation_get_sensor>
     39e:	83 32       	cpi	r24, 0x23	; 35
     3a0:	78 f4       	brcc	.+30     	; 0x3c0 <autonomouswalk_walk+0xee>
			{
				climb();
     3a2:	94 df       	rcall	.-216    	; 0x2cc <climb>
				while(USART_climb_done() == 0)
     3a4:	08 c0       	rjmp	.+16     	; 0x3b6 <autonomouswalk_walk+0xe4>
				{
					USART_decode_rx_fifo();
     3a6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <USART_decode_rx_fifo>
     3aa:	8f e3       	ldi	r24, 0x3F	; 63
     3ac:	9c e9       	ldi	r25, 0x9C	; 156
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <autonomouswalk_walk+0xdc>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <autonomouswalk_walk+0xe2>
     3b4:	00 00       	nop
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
		{
			if(navigation_get_sensor(6) < CORRIDOR_WIDTH / 2 - 5)
			{
				climb();
				while(USART_climb_done() == 0)
     3b6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <USART_climb_done>
     3ba:	88 23       	and	r24, r24
     3bc:	a1 f3       	breq	.-24     	; 0x3a6 <autonomouswalk_walk+0xd4>
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <autonomouswalk_walk+0xf0>
					_delay_ms(10);
				}
			}
			else
			{
				walk_forward();
     3c0:	cd de       	rcall	.-614    	; 0x15c <walk_forward>
			}
			decisionCounter = 0;
     3c2:	10 92 bc 13 	sts	0x13BC, r1
     3c6:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 2)
     3c8:	96 d1       	rcall	.+812    	; 0x6f6 <navigation_check_left_turn>
     3ca:	82 30       	cpi	r24, 0x02	; 2
     3cc:	21 f4       	brne	.+8      	; 0x3d6 <autonomouswalk_walk+0x104>
		{
			turn_left();
     3ce:	4e df       	rcall	.-356    	; 0x26c <turn_left>
			decisionCounter = 0;
     3d0:	10 92 bc 13 	sts	0x13BC, r1
     3d4:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     3d6:	8f d1       	rcall	.+798    	; 0x6f6 <navigation_check_left_turn>
     3d8:	81 11       	cpse	r24, r1
     3da:	07 c0       	rjmp	.+14     	; 0x3ea <autonomouswalk_walk+0x118>
     3dc:	77 d1       	rcall	.+750    	; 0x6cc <navigation_check_right_turn>
     3de:	81 11       	cpse	r24, r1
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <autonomouswalk_walk+0x118>
		{
			turn_around();
     3e2:	99 de       	rcall	.-718    	; 0x116 <turn_around>
			decisionCounter = 0;
     3e4:	10 92 bc 13 	sts	0x13BC, r1
     3e8:	08 95       	ret
		}
		else if(decisionCounter < 4)
     3ea:	80 91 bc 13 	lds	r24, 0x13BC
     3ee:	84 30       	cpi	r24, 0x04	; 4
     3f0:	38 f4       	brcc	.+14     	; 0x400 <autonomouswalk_walk+0x12e>
		{
			walk_forward();
     3f2:	b4 de       	rcall	.-664    	; 0x15c <walk_forward>
			++decisionCounter;
     3f4:	80 91 bc 13 	lds	r24, 0x13BC
     3f8:	8f 5f       	subi	r24, 0xFF	; 255
     3fa:	80 93 bc 13 	sts	0x13BC, r24
     3fe:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     400:	10 92 bc 13 	sts	0x13BC, r1
			navigation_set_autonomous_walk(0);
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	b0 d0       	rcall	.+352    	; 0x568 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     408:	49 e3       	ldi	r20, 0x39	; 57
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	60 eb       	ldi	r22, 0xB0	; 176
     40e:	71 e1       	ldi	r23, 0x11	; 17
     410:	80 e8       	ldi	r24, 0x80	; 128
     412:	c9 c6       	rjmp	.+3474   	; 0x11a6 <TWI_send_string_fixed_length>

00000414 <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     414:	bc 01       	movw	r22, r24
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 81 10 	call	0x2102	; 0x2102 <__floatunsisf>
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	4a e7       	ldi	r20, 0x7A	; 122
     424:	51 e4       	ldi	r21, 0x41	; 65
     426:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     42a:	0e 94 55 10 	call	0x20aa	; 0x20aa <__fixunssfsi>
	OCR1A = delay;
     42e:	70 93 89 00 	sts	0x0089, r23
     432:	60 93 88 00 	sts	0x0088, r22
     436:	08 95       	ret

00000438 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     438:	bc 01       	movw	r22, r24
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 81 10 	call	0x2102	; 0x2102 <__floatunsisf>
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	4a e7       	ldi	r20, 0x7A	; 122
     448:	51 e4       	ldi	r21, 0x41	; 65
     44a:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     44e:	0e 94 55 10 	call	0x20aa	; 0x20aa <__fixunssfsi>
	OCR3A = delay;
     452:	70 93 99 00 	sts	0x0099, r23
     456:	60 93 98 00 	sts	0x0098, r22
     45a:	08 95       	ret

0000045c <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     45c:	e1 e8       	ldi	r30, 0x81	; 129
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	85 60       	ori	r24, 0x05	; 5
     464:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     466:	e1 e9       	ldi	r30, 0x91	; 145
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	85 60       	ori	r24, 0x05	; 5
     46e:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     470:	88 ee       	ldi	r24, 0xE8	; 232
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	cf df       	rcall	.-98     	; 0x414 <set_counter_1>
	set_counter_2(1000);
     476:	88 ee       	ldi	r24, 0xE8	; 232
     478:	93 e0       	ldi	r25, 0x03	; 3
     47a:	de df       	rcall	.-68     	; 0x438 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     47c:	ef e6       	ldi	r30, 0x6F	; 111
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	82 60       	ori	r24, 0x02	; 2
     484:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     486:	e1 e7       	ldi	r30, 0x71	; 113
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	82 60       	ori	r24, 0x02	; 2
     48e:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     490:	10 92 85 00 	sts	0x0085, r1
     494:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     498:	10 92 95 00 	sts	0x0095, r1
     49c:	10 92 94 00 	sts	0x0094, r1
     4a0:	08 95       	ret

000004a2 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     4a2:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     4a4:	90 81       	ld	r25, Z
     4a6:	91 50       	subi	r25, 0x01	; 1
     4a8:	84 81       	ldd	r24, Z+4	; 0x04
     4aa:	22 81       	ldd	r18, Z+2	; 0x02
     4ac:	82 1b       	sub	r24, r18
};
     4ae:	89 23       	and	r24, r25
     4b0:	08 95       	ret

000004b2 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	ec 01       	movw	r28, r24
     4ba:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     4bc:	f2 df       	rcall	.-28     	; 0x4a2 <FifoDataLength>
     4be:	28 81       	ld	r18, Y
     4c0:	39 81       	ldd	r19, Y+1	; 0x01
     4c2:	21 50       	subi	r18, 0x01	; 1
     4c4:	31 09       	sbc	r19, r1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	82 17       	cp	r24, r18
     4ca:	93 07       	cpc	r25, r19
     4cc:	69 f0       	breq	.+26     	; 0x4e8 <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     4ce:	8c 81       	ldd	r24, Y+4	; 0x04
     4d0:	9d 81       	ldd	r25, Y+5	; 0x05
     4d2:	fe 01       	movw	r30, r28
     4d4:	e8 0f       	add	r30, r24
     4d6:	f9 1f       	adc	r31, r25
     4d8:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	28 23       	and	r18, r24
     4de:	39 23       	and	r19, r25
     4e0:	3d 83       	std	Y+5, r19	; 0x05
     4e2:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	08 95       	ret

000004f2 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ec 01       	movw	r28, r24
     4fc:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     4fe:	d1 df       	rcall	.-94     	; 0x4a2 <FifoDataLength>
     500:	88 23       	and	r24, r24
     502:	a1 f0       	breq	.+40     	; 0x52c <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     504:	ea 81       	ldd	r30, Y+2	; 0x02
     506:	fb 81       	ldd	r31, Y+3	; 0x03
     508:	ec 0f       	add	r30, r28
     50a:	fd 1f       	adc	r31, r29
     50c:	86 81       	ldd	r24, Z+6	; 0x06
     50e:	f8 01       	movw	r30, r16
     510:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     512:	28 81       	ld	r18, Y
     514:	39 81       	ldd	r19, Y+1	; 0x01
     516:	21 50       	subi	r18, 0x01	; 1
     518:	31 09       	sbc	r19, r1
     51a:	8a 81       	ldd	r24, Y+2	; 0x02
     51c:	9b 81       	ldd	r25, Y+3	; 0x03
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	82 23       	and	r24, r18
     522:	93 23       	and	r25, r19
     524:	9b 83       	std	Y+3, r25	; 0x03
     526:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	01 c0       	rjmp	.+2      	; 0x52e <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	08 95       	ret

00000538 <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     538:	68 2f       	mov	r22, r24
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 81 10 	call	0x2102	; 0x2102 <__floatunsisf>
     544:	60 93 03 01 	sts	0x0103, r22
     548:	70 93 04 01 	sts	0x0104, r23
     54c:	80 93 05 01 	sts	0x0105, r24
     550:	90 93 06 01 	sts	0x0106, r25
     554:	08 95       	ret

00000556 <navigation_left_algorithm>:
     556:	80 91 07 01 	lds	r24, 0x0107
     55a:	08 95       	ret

0000055c <navigation_set_algorithm>:
     55c:	80 93 07 01 	sts	0x0107, r24
     560:	08 95       	ret

00000562 <navigation_autonomous_walk>:
     562:	80 91 02 01 	lds	r24, 0x0102
     566:	08 95       	ret

00000568 <navigation_set_autonomous_walk>:
     568:	80 93 02 01 	sts	0x0102, r24
     56c:	08 95       	ret

0000056e <navigation_stepping_delay>:
     56e:	cf 93       	push	r28
     570:	c2 e0       	ldi	r28, 0x02	; 2
     572:	0e c0       	rjmp	.+28     	; 0x590 <navigation_stepping_delay+0x22>
     574:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <USART_decode_rx_fifo>
     578:	2f ef       	ldi	r18, 0xFF	; 255
     57a:	89 ef       	ldi	r24, 0xF9	; 249
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	21 50       	subi	r18, 0x01	; 1
     580:	80 40       	sbci	r24, 0x00	; 0
     582:	90 40       	sbci	r25, 0x00	; 0
     584:	e1 f7       	brne	.-8      	; 0x57e <navigation_stepping_delay+0x10>
     586:	00 c0       	rjmp	.+0      	; 0x588 <navigation_stepping_delay+0x1a>
     588:	00 00       	nop
     58a:	82 b1       	in	r24, 0x02	; 2
     58c:	8c 27       	eor	r24, r28
     58e:	82 b9       	out	0x02, r24	; 2
     590:	0e 94 67 0e 	call	0x1cce	; 0x1cce <USART_ready>
     594:	88 23       	and	r24, r24
     596:	71 f3       	breq	.-36     	; 0x574 <navigation_stepping_delay+0x6>
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <navigation_fill_buffer>:
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	c0 e0       	ldi	r28, 0x00	; 0
     5a6:	d0 e0       	ldi	r29, 0x00	; 0
     5a8:	00 91 be 13 	lds	r16, 0x13BE
     5ac:	10 e0       	ldi	r17, 0x00	; 0
     5ae:	ce 01       	movw	r24, r28
     5b0:	85 d6       	rcall	.+3338   	; 0x12bc <TWI_get_sensor>
     5b2:	fe 01       	movw	r30, r28
     5b4:	ee 0f       	add	r30, r30
     5b6:	ff 1f       	adc	r31, r31
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	ec 0f       	add	r30, r28
     5be:	fd 1f       	adc	r31, r29
     5c0:	0e 0f       	add	r16, r30
     5c2:	1f 1f       	adc	r17, r31
     5c4:	f8 01       	movw	r30, r16
     5c6:	ef 51       	subi	r30, 0x1F	; 31
     5c8:	fc 4e       	sbci	r31, 0xEC	; 236
     5ca:	80 83       	st	Z, r24
     5cc:	21 96       	adiw	r28, 0x01	; 1
     5ce:	c8 30       	cpi	r28, 0x08	; 8
     5d0:	d1 05       	cpc	r29, r1
     5d2:	51 f7       	brne	.-44     	; 0x5a8 <navigation_fill_buffer+0xc>
     5d4:	80 91 be 13 	lds	r24, 0x13BE
     5d8:	84 30       	cpi	r24, 0x04	; 4
     5da:	19 f4       	brne	.+6      	; 0x5e2 <navigation_fill_buffer+0x46>
     5dc:	10 92 be 13 	sts	0x13BE, r1
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <navigation_fill_buffer+0x4c>
     5e2:	8f 5f       	subi	r24, 0xFF	; 255
     5e4:	80 93 be 13 	sts	0x13BE, r24
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	08 95       	ret

000005f2 <navigation_get_sensor>:
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <navigation_get_sensor+0x6>
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <navigation_get_sensor+0x8>
     5fa:	1f 92       	push	r1
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	fc 01       	movw	r30, r24
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	8e 0f       	add	r24, r30
     60c:	9f 1f       	adc	r25, r31
     60e:	fc 01       	movw	r30, r24
     610:	ef 51       	subi	r30, 0x1F	; 31
     612:	fc 4e       	sbci	r31, 0xEC	; 236
     614:	80 81       	ld	r24, Z
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	8a 83       	std	Y+2, r24	; 0x02
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	8b 83       	std	Y+3, r24	; 0x03
     620:	83 81       	ldd	r24, Z+3	; 0x03
     622:	8c 83       	std	Y+4, r24	; 0x04
     624:	84 81       	ldd	r24, Z+4	; 0x04
     626:	8d 83       	std	Y+5, r24	; 0x05
     628:	24 e0       	ldi	r18, 0x04	; 4
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	0e c0       	rjmp	.+28     	; 0x64a <navigation_get_sensor+0x58>
     62e:	41 91       	ld	r20, Z+
     630:	50 81       	ld	r21, Z
     632:	54 17       	cp	r21, r20
     634:	20 f4       	brcc	.+8      	; 0x63e <navigation_get_sensor+0x4c>
     636:	df 01       	movw	r26, r30
     638:	11 97       	sbiw	r26, 0x01	; 1
     63a:	5c 93       	st	X, r21
     63c:	40 83       	st	Z, r20
     63e:	8e 17       	cp	r24, r30
     640:	9f 07       	cpc	r25, r31
     642:	a9 f7       	brne	.-22     	; 0x62e <navigation_get_sensor+0x3c>
     644:	21 50       	subi	r18, 0x01	; 1
     646:	31 09       	sbc	r19, r1
     648:	49 f0       	breq	.+18     	; 0x65c <navigation_get_sensor+0x6a>
     64a:	12 16       	cp	r1, r18
     64c:	13 06       	cpc	r1, r19
     64e:	d4 f7       	brge	.-12     	; 0x644 <navigation_get_sensor+0x52>
     650:	fe 01       	movw	r30, r28
     652:	31 96       	adiw	r30, 0x01	; 1
     654:	cf 01       	movw	r24, r30
     656:	82 0f       	add	r24, r18
     658:	93 1f       	adc	r25, r19
     65a:	e9 cf       	rjmp	.-46     	; 0x62e <navigation_get_sensor+0x3c>
     65c:	8b 81       	ldd	r24, Y+3	; 0x03
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(7) < HEIGHT_LIMIT)
     66e:	87 e0       	ldi	r24, 0x07	; 7
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	bf df       	rcall	.-130    	; 0x5f2 <navigation_get_sensor>
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	88 32       	cpi	r24, 0x28	; 40
     678:	08 f0       	brcs	.+2      	; 0x67c <navigation_detect_low_pass_obsticle+0xe>
     67a:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     67c:	89 2f       	mov	r24, r25
     67e:	08 95       	ret

00000680 <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     680:	f6 df       	rcall	.-20     	; 0x66e <navigation_detect_low_pass_obsticle>
     682:	88 23       	and	r24, r24
     684:	e9 f0       	breq	.+58     	; 0x6c0 <navigation_low_pass_obstacle+0x40>
     686:	80 91 bd 13 	lds	r24, 0x13BD
     68a:	81 11       	cpse	r24, r1
     68c:	19 c0       	rjmp	.+50     	; 0x6c0 <navigation_low_pass_obstacle+0x40>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     68e:	4b e1       	ldi	r20, 0x1B	; 27
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	6a ee       	ldi	r22, 0xEA	; 234
     694:	71 e1       	ldi	r23, 0x11	; 17
     696:	80 e4       	ldi	r24, 0x40	; 64
     698:	86 d5       	rcall	.+2828   	; 0x11a6 <TWI_send_string_fixed_length>
     69a:	2f ef       	ldi	r18, 0xFF	; 255
     69c:	86 e7       	ldi	r24, 0x76	; 118
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	21 50       	subi	r18, 0x01	; 1
     6a2:	80 40       	sbci	r24, 0x00	; 0
     6a4:	90 40       	sbci	r25, 0x00	; 0
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <navigation_low_pass_obstacle+0x20>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <navigation_low_pass_obstacle+0x2a>
     6aa:	00 00       	nop
		_delay_ms(30);
		TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);
     6ac:	4b e1       	ldi	r20, 0x1B	; 27
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	6a ee       	ldi	r22, 0xEA	; 234
     6b2:	71 e1       	ldi	r23, 0x11	; 17
     6b4:	80 e8       	ldi	r24, 0x80	; 128
     6b6:	77 d5       	rcall	.+2798   	; 0x11a6 <TWI_send_string_fixed_length>
		lowPassObstacleFlag = 1;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 bd 13 	sts	0x13BD, r24
     6be:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     6c0:	d6 df       	rcall	.-84     	; 0x66e <navigation_detect_low_pass_obsticle>
     6c2:	81 11       	cpse	r24, r1
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <navigation_low_pass_obstacle+0x4a>
	{
		lowPassObstacleFlag = 0;
     6c6:	10 92 bd 13 	sts	0x13BD, r1
     6ca:	08 95       	ret

000006cc <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	90 df       	rcall	.-224    	; 0x5f2 <navigation_get_sensor>
     6d2:	8c 33       	cpi	r24, 0x3C	; 60
     6d4:	28 f0       	brcs	.+10     	; 0x6e0 <navigation_check_right_turn+0x14>
     6d6:	83 e0       	ldi	r24, 0x03	; 3
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	8b df       	rcall	.-234    	; 0x5f2 <navigation_get_sensor>
     6dc:	8c 33       	cpi	r24, 0x3C	; 60
     6de:	40 f4       	brcc	.+16     	; 0x6f0 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	86 df       	rcall	.-244    	; 0x5f2 <navigation_get_sensor>
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	86 34       	cpi	r24, 0x46	; 70
     6ea:	18 f4       	brcc	.+6      	; 0x6f2 <navigation_check_right_turn+0x26>
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     6f0:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     6f2:	89 2f       	mov	r24, r25
     6f4:	08 95       	ret

000006f6 <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	7b df       	rcall	.-266    	; 0x5f2 <navigation_get_sensor>
     6fc:	8c 33       	cpi	r24, 0x3C	; 60
     6fe:	28 f0       	brcs	.+10     	; 0x70a <navigation_check_left_turn+0x14>
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	76 df       	rcall	.-276    	; 0x5f2 <navigation_get_sensor>
     706:	8c 33       	cpi	r24, 0x3C	; 60
     708:	40 f4       	brcc	.+16     	; 0x71a <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	71 df       	rcall	.-286    	; 0x5f2 <navigation_get_sensor>
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	86 34       	cpi	r24, 0x46	; 70
     714:	18 f4       	brcc	.+6      	; 0x71c <navigation_check_left_turn+0x26>
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	01 c0       	rjmp	.+2      	; 0x71c <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     71a:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     71c:	89 2f       	mov	r24, r25
     71e:	08 95       	ret

00000720 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	6b 01       	movw	r12, r22
     72e:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     730:	80 91 07 01 	lds	r24, 0x0107
     734:	88 23       	and	r24, r24
     736:	09 f4       	brne	.+2      	; 0x73a <navigation_direction_regulation+0x1a>
     738:	98 c0       	rjmp	.+304    	; 0x86a <navigation_direction_regulation+0x14a>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	59 df       	rcall	.-334    	; 0x5f2 <navigation_get_sensor>
     740:	c8 2f       	mov	r28, r24
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	55 df       	rcall	.-342    	; 0x5f2 <navigation_get_sensor>
     748:	2c 2f       	mov	r18, r28
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	a9 01       	movw	r20, r18
     74e:	48 1b       	sub	r20, r24
     750:	51 09       	sbc	r21, r1
     752:	ca 01       	movw	r24, r20
     754:	99 23       	and	r25, r25
     756:	1c f4       	brge	.+6      	; 0x75e <navigation_direction_regulation+0x3e>
     758:	91 95       	neg	r25
     75a:	81 95       	neg	r24
     75c:	91 09       	sbc	r25, r1
     75e:	0a 97       	sbiw	r24, 0x0a	; 10
     760:	b4 f5       	brge	.+108    	; 0x7ce <navigation_direction_regulation+0xae>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	45 df       	rcall	.-374    	; 0x5f2 <navigation_get_sensor>
     768:	82 33       	cpi	r24, 0x32	; 50
     76a:	88 f5       	brcc	.+98     	; 0x7ce <navigation_direction_regulation+0xae>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	40 df       	rcall	.-384    	; 0x5f2 <navigation_get_sensor>
     772:	c8 2f       	mov	r28, r24
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	3c df       	rcall	.-392    	; 0x5f2 <navigation_get_sensor>
     77a:	d8 2f       	mov	r29, r24
     77c:	c7 01       	movw	r24, r14
     77e:	b6 01       	movw	r22, r12
     780:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <cos>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
     788:	6d 2f       	mov	r22, r29
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	6c 0f       	add	r22, r28
     78e:	71 1d       	adc	r23, r1
     790:	88 27       	eor	r24, r24
     792:	77 fd       	sbrc	r23, 7
     794:	80 95       	com	r24
     796:	98 2f       	mov	r25, r24
     798:	0e 94 83 10 	call	0x2106	; 0x2106 <__floatsisf>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	5f e3       	ldi	r21, 0x3F	; 63
     7a4:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     7a8:	26 e6       	ldi	r18, 0x66	; 102
     7aa:	36 e6       	ldi	r19, 0x66	; 102
     7ac:	46 ed       	ldi	r20, 0xD6	; 214
     7ae:	50 e4       	ldi	r21, 0x40	; 64
     7b0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     7b4:	a7 01       	movw	r20, r14
     7b6:	96 01       	movw	r18, r12
     7b8:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e2       	ldi	r20, 0x20	; 32
     7c2:	52 e4       	ldi	r21, 0x42	; 66
     7c4:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__subsf3>
     7c8:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fixsfsi>
     7cc:	e5 c0       	rjmp	.+458    	; 0x998 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0f df       	rcall	.-482    	; 0x5f2 <navigation_get_sensor>
     7d4:	c8 2f       	mov	r28, r24
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0b df       	rcall	.-490    	; 0x5f2 <navigation_get_sensor>
     7dc:	2c 2f       	mov	r18, r28
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	a9 01       	movw	r20, r18
     7e2:	48 1b       	sub	r20, r24
     7e4:	51 09       	sbc	r21, r1
     7e6:	ca 01       	movw	r24, r20
     7e8:	99 23       	and	r25, r25
     7ea:	1c f4       	brge	.+6      	; 0x7f2 <navigation_direction_regulation+0xd2>
     7ec:	91 95       	neg	r25
     7ee:	81 95       	neg	r24
     7f0:	91 09       	sbc	r25, r1
     7f2:	0a 97       	sbiw	r24, 0x0a	; 10
     7f4:	0c f0       	brlt	.+2      	; 0x7f8 <navigation_direction_regulation+0xd8>
     7f6:	21 c1       	rjmp	.+578    	; 0xa3a <navigation_direction_regulation+0x31a>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	fa de       	rcall	.-524    	; 0x5f2 <navigation_get_sensor>
     7fe:	82 33       	cpi	r24, 0x32	; 50
     800:	08 f0       	brcs	.+2      	; 0x804 <navigation_direction_regulation+0xe4>
     802:	1b c1       	rjmp	.+566    	; 0xa3a <navigation_direction_regulation+0x31a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	f4 de       	rcall	.-536    	; 0x5f2 <navigation_get_sensor>
     80a:	c8 2f       	mov	r28, r24
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	f0 de       	rcall	.-544    	; 0x5f2 <navigation_get_sensor>
     812:	d8 2f       	mov	r29, r24
     814:	c7 01       	movw	r24, r14
     816:	b6 01       	movw	r22, r12
     818:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <cos>
     81c:	6b 01       	movw	r12, r22
     81e:	7c 01       	movw	r14, r24
     820:	6d 2f       	mov	r22, r29
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	6c 0f       	add	r22, r28
     826:	71 1d       	adc	r23, r1
     828:	88 27       	eor	r24, r24
     82a:	77 fd       	sbrc	r23, 7
     82c:	80 95       	com	r24
     82e:	98 2f       	mov	r25, r24
     830:	0e 94 83 10 	call	0x2106	; 0x2106 <__floatsisf>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     840:	26 e6       	ldi	r18, 0x66	; 102
     842:	36 e6       	ldi	r19, 0x66	; 102
     844:	46 ed       	ldi	r20, 0xD6	; 214
     846:	50 e4       	ldi	r21, 0x40	; 64
     848:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     84c:	a7 01       	movw	r20, r14
     84e:	96 01       	movw	r18, r12
     850:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 e2       	ldi	r24, 0x20	; 32
     85e:	92 e4       	ldi	r25, 0x42	; 66
     860:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__subsf3>
     864:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fixsfsi>
     868:	97 c0       	rjmp	.+302    	; 0x998 <navigation_direction_regulation+0x278>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	c1 de       	rcall	.-638    	; 0x5f2 <navigation_get_sensor>
     870:	c8 2f       	mov	r28, r24
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	bd de       	rcall	.-646    	; 0x5f2 <navigation_get_sensor>
     878:	2c 2f       	mov	r18, r28
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	a9 01       	movw	r20, r18
     87e:	48 1b       	sub	r20, r24
     880:	51 09       	sbc	r21, r1
     882:	ca 01       	movw	r24, r20
     884:	99 23       	and	r25, r25
     886:	1c f4       	brge	.+6      	; 0x88e <navigation_direction_regulation+0x16e>
     888:	91 95       	neg	r25
     88a:	81 95       	neg	r24
     88c:	91 09       	sbc	r25, r1
     88e:	0a 97       	sbiw	r24, 0x0a	; 10
     890:	c4 f5       	brge	.+112    	; 0x902 <navigation_direction_regulation+0x1e2>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	ad de       	rcall	.-678    	; 0x5f2 <navigation_get_sensor>
     898:	82 33       	cpi	r24, 0x32	; 50
     89a:	98 f5       	brcc	.+102    	; 0x902 <navigation_direction_regulation+0x1e2>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	a8 de       	rcall	.-688    	; 0x5f2 <navigation_get_sensor>
     8a2:	c8 2f       	mov	r28, r24
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	a4 de       	rcall	.-696    	; 0x5f2 <navigation_get_sensor>
     8aa:	d8 2f       	mov	r29, r24
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <cos>
     8b4:	6b 01       	movw	r12, r22
     8b6:	7c 01       	movw	r14, r24
     8b8:	6d 2f       	mov	r22, r29
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	6c 0f       	add	r22, r28
     8be:	71 1d       	adc	r23, r1
     8c0:	88 27       	eor	r24, r24
     8c2:	77 fd       	sbrc	r23, 7
     8c4:	80 95       	com	r24
     8c6:	98 2f       	mov	r25, r24
     8c8:	0e 94 83 10 	call	0x2106	; 0x2106 <__floatsisf>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	5f e3       	ldi	r21, 0x3F	; 63
     8d4:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     8d8:	26 e6       	ldi	r18, 0x66	; 102
     8da:	36 e6       	ldi	r19, 0x66	; 102
     8dc:	46 ed       	ldi	r20, 0xD6	; 214
     8de:	50 e4       	ldi	r21, 0x40	; 64
     8e0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     8e4:	a7 01       	movw	r20, r14
     8e6:	96 01       	movw	r18, r12
     8e8:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	80 e2       	ldi	r24, 0x20	; 32
     8f6:	92 e4       	ldi	r25, 0x42	; 66
     8f8:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__subsf3>
     8fc:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fixsfsi>
     900:	4b c0       	rjmp	.+150    	; 0x998 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	75 de       	rcall	.-790    	; 0x5f2 <navigation_get_sensor>
     908:	c8 2f       	mov	r28, r24
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	71 de       	rcall	.-798    	; 0x5f2 <navigation_get_sensor>
     910:	2c 2f       	mov	r18, r28
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	a9 01       	movw	r20, r18
     916:	48 1b       	sub	r20, r24
     918:	51 09       	sbc	r21, r1
     91a:	ca 01       	movw	r24, r20
     91c:	99 23       	and	r25, r25
     91e:	1c f4       	brge	.+6      	; 0x926 <navigation_direction_regulation+0x206>
     920:	91 95       	neg	r25
     922:	81 95       	neg	r24
     924:	91 09       	sbc	r25, r1
     926:	0a 97       	sbiw	r24, 0x0a	; 10
     928:	0c f0       	brlt	.+2      	; 0x92c <navigation_direction_regulation+0x20c>
     92a:	87 c0       	rjmp	.+270    	; 0xa3a <navigation_direction_regulation+0x31a>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	60 de       	rcall	.-832    	; 0x5f2 <navigation_get_sensor>
     932:	82 33       	cpi	r24, 0x32	; 50
     934:	08 f0       	brcs	.+2      	; 0x938 <navigation_direction_regulation+0x218>
     936:	81 c0       	rjmp	.+258    	; 0xa3a <navigation_direction_regulation+0x31a>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	5a de       	rcall	.-844    	; 0x5f2 <navigation_get_sensor>
     93e:	c8 2f       	mov	r28, r24
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	56 de       	rcall	.-852    	; 0x5f2 <navigation_get_sensor>
     946:	d8 2f       	mov	r29, r24
     948:	c7 01       	movw	r24, r14
     94a:	b6 01       	movw	r22, r12
     94c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <cos>
     950:	6b 01       	movw	r12, r22
     952:	7c 01       	movw	r14, r24
     954:	6d 2f       	mov	r22, r29
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	6c 0f       	add	r22, r28
     95a:	71 1d       	adc	r23, r1
     95c:	88 27       	eor	r24, r24
     95e:	77 fd       	sbrc	r23, 7
     960:	80 95       	com	r24
     962:	98 2f       	mov	r25, r24
     964:	0e 94 83 10 	call	0x2106	; 0x2106 <__floatsisf>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	5f e3       	ldi	r21, 0x3F	; 63
     970:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     974:	26 e6       	ldi	r18, 0x66	; 102
     976:	36 e6       	ldi	r19, 0x66	; 102
     978:	46 ed       	ldi	r20, 0xD6	; 214
     97a:	50 e4       	ldi	r21, 0x40	; 64
     97c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     980:	a7 01       	movw	r20, r14
     982:	96 01       	movw	r18, r12
     984:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e2       	ldi	r20, 0x20	; 32
     98e:	52 e4       	ldi	r21, 0x42	; 66
     990:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__subsf3>
     994:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     998:	cb 01       	movw	r24, r22
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	03 97       	sbiw	r24, 0x03	; 3
     99e:	08 f4       	brcc	.+2      	; 0x9a2 <navigation_direction_regulation+0x282>
     9a0:	47 c0       	rjmp	.+142    	; 0xa30 <navigation_direction_regulation+0x310>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     9a2:	88 27       	eor	r24, r24
     9a4:	77 fd       	sbrc	r23, 7
     9a6:	80 95       	com	r24
     9a8:	98 2f       	mov	r25, r24
     9aa:	0e 94 83 10 	call	0x2106	; 0x2106 <__floatsisf>
     9ae:	20 91 03 01 	lds	r18, 0x0103
     9b2:	30 91 04 01 	lds	r19, 0x0104
     9b6:	40 91 05 01 	lds	r20, 0x0105
     9ba:	50 91 06 01 	lds	r21, 0x0106
     9be:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     9c2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <atan>
     9c6:	c6 2e       	mov	r12, r22
     9c8:	d7 2e       	mov	r13, r23
     9ca:	e8 2e       	mov	r14, r24
     9cc:	f9 2e       	mov	r15, r25
		if(dir < 0)
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	a9 01       	movw	r20, r18
     9d4:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__cmpsf2>
     9d8:	88 23       	and	r24, r24
     9da:	7c f4       	brge	.+30     	; 0x9fa <navigation_direction_regulation+0x2da>
		{
			dir += 2*PI;
     9dc:	2b ed       	ldi	r18, 0xDB	; 219
     9de:	3f e0       	ldi	r19, 0x0F	; 15
     9e0:	49 ec       	ldi	r20, 0xC9	; 201
     9e2:	50 e4       	ldi	r21, 0x40	; 64
     9e4:	6c 2d       	mov	r22, r12
     9e6:	7d 2d       	mov	r23, r13
     9e8:	8e 2d       	mov	r24, r14
     9ea:	9f 2d       	mov	r25, r15
     9ec:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     9f0:	c6 2e       	mov	r12, r22
     9f2:	d7 2e       	mov	r13, r23
     9f4:	e8 2e       	mov	r14, r24
     9f6:	f9 2e       	mov	r15, r25
     9f8:	24 c0       	rjmp	.+72     	; 0xa42 <navigation_direction_regulation+0x322>
		} else if(dir >= 2*PI)
     9fa:	2b ed       	ldi	r18, 0xDB	; 219
     9fc:	3f e0       	ldi	r19, 0x0F	; 15
     9fe:	49 ec       	ldi	r20, 0xC9	; 201
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	6c 2d       	mov	r22, r12
     a04:	7d 2d       	mov	r23, r13
     a06:	8e 2d       	mov	r24, r14
     a08:	9f 2d       	mov	r25, r15
     a0a:	0e 94 91 11 	call	0x2322	; 0x2322 <__gesf2>
     a0e:	88 23       	and	r24, r24
     a10:	c4 f0       	brlt	.+48     	; 0xa42 <navigation_direction_regulation+0x322>
		{
			dir -= 2*PI;
     a12:	2b ed       	ldi	r18, 0xDB	; 219
     a14:	3f e0       	ldi	r19, 0x0F	; 15
     a16:	49 ec       	ldi	r20, 0xC9	; 201
     a18:	50 e4       	ldi	r21, 0x40	; 64
     a1a:	6c 2d       	mov	r22, r12
     a1c:	7d 2d       	mov	r23, r13
     a1e:	8e 2d       	mov	r24, r14
     a20:	9f 2d       	mov	r25, r15
     a22:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__subsf3>
     a26:	c6 2e       	mov	r12, r22
     a28:	d7 2e       	mov	r13, r23
     a2a:	e8 2e       	mov	r14, r24
     a2c:	f9 2e       	mov	r15, r25
     a2e:	09 c0       	rjmp	.+18     	; 0xa42 <navigation_direction_regulation+0x322>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     a30:	c1 2c       	mov	r12, r1
     a32:	d1 2c       	mov	r13, r1
     a34:	e1 2c       	mov	r14, r1
     a36:	f1 2c       	mov	r15, r1
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <navigation_direction_regulation+0x322>
     a3a:	c1 2c       	mov	r12, r1
     a3c:	d1 2c       	mov	r13, r1
     a3e:	e1 2c       	mov	r14, r1
     a40:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     a42:	6c 2d       	mov	r22, r12
     a44:	7d 2d       	mov	r23, r13
     a46:	8e 2d       	mov	r24, r14
     a48:	9f 2d       	mov	r25, r15
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	08 95       	ret

00000a58 <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     a60:	80 91 07 01 	lds	r24, 0x0107
     a64:	88 23       	and	r24, r24
     a66:	09 f4       	brne	.+2      	; 0xa6a <navigation_angle_offset+0x12>
     a68:	6c c0       	rjmp	.+216    	; 0xb42 <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	c1 dd       	rcall	.-1150   	; 0x5f2 <navigation_get_sensor>
     a70:	f8 2e       	mov	r15, r24
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	bd dd       	rcall	.-1158   	; 0x5f2 <navigation_get_sensor>
     a78:	2f 2d       	mov	r18, r15
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	a9 01       	movw	r20, r18
     a7e:	48 1b       	sub	r20, r24
     a80:	51 09       	sbc	r21, r1
     a82:	ca 01       	movw	r24, r20
     a84:	99 23       	and	r25, r25
     a86:	1c f4       	brge	.+6      	; 0xa8e <navigation_angle_offset+0x36>
     a88:	91 95       	neg	r25
     a8a:	81 95       	neg	r24
     a8c:	91 09       	sbc	r25, r1
     a8e:	0a 97       	sbiw	r24, 0x0a	; 10
     a90:	0c f5       	brge	.+66     	; 0xad4 <navigation_angle_offset+0x7c>
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	ad dd       	rcall	.-1190   	; 0x5f2 <navigation_get_sensor>
     a98:	82 33       	cpi	r24, 0x32	; 50
     a9a:	e0 f4       	brcc	.+56     	; 0xad4 <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a8 dd       	rcall	.-1200   	; 0x5f2 <navigation_get_sensor>
     aa2:	f8 2e       	mov	r15, r24
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a4 dd       	rcall	.-1208   	; 0x5f2 <navigation_get_sensor>
     aaa:	6f 2d       	mov	r22, r15
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	68 1b       	sub	r22, r24
     ab0:	71 09       	sbc	r23, r1
     ab2:	88 27       	eor	r24, r24
     ab4:	77 fd       	sbrc	r23, 7
     ab6:	80 95       	com	r24
     ab8:	98 2f       	mov	r25, r24
     aba:	0e 94 83 10 	call	0x2106	; 0x2106 <__floatsisf>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e8       	ldi	r20, 0x80	; 128
     ac4:	5d e3       	ldi	r21, 0x3D	; 61
     ac6:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     aca:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <atan>
     ace:	6b 01       	movw	r12, r22
     ad0:	7c 01       	movw	r14, r24
     ad2:	a0 c0       	rjmp	.+320    	; 0xc14 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	8c dd       	rcall	.-1256   	; 0x5f2 <navigation_get_sensor>
     ada:	f8 2e       	mov	r15, r24
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	88 dd       	rcall	.-1264   	; 0x5f2 <navigation_get_sensor>
     ae2:	2f 2d       	mov	r18, r15
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	a9 01       	movw	r20, r18
     ae8:	48 1b       	sub	r20, r24
     aea:	51 09       	sbc	r21, r1
     aec:	ca 01       	movw	r24, r20
     aee:	99 23       	and	r25, r25
     af0:	1c f4       	brge	.+6      	; 0xaf8 <navigation_angle_offset+0xa0>
     af2:	91 95       	neg	r25
     af4:	81 95       	neg	r24
     af6:	91 09       	sbc	r25, r1
     af8:	0a 97       	sbiw	r24, 0x0a	; 10
     afa:	0c f0       	brlt	.+2      	; 0xafe <navigation_angle_offset+0xa6>
     afc:	9a c0       	rjmp	.+308    	; 0xc32 <navigation_angle_offset+0x1da>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	77 dd       	rcall	.-1298   	; 0x5f2 <navigation_get_sensor>
     b04:	82 33       	cpi	r24, 0x32	; 50
     b06:	08 f0       	brcs	.+2      	; 0xb0a <navigation_angle_offset+0xb2>
     b08:	94 c0       	rjmp	.+296    	; 0xc32 <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	71 dd       	rcall	.-1310   	; 0x5f2 <navigation_get_sensor>
     b10:	f8 2e       	mov	r15, r24
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	6d dd       	rcall	.-1318   	; 0x5f2 <navigation_get_sensor>
     b18:	6f 2d       	mov	r22, r15
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	68 1b       	sub	r22, r24
     b1e:	71 09       	sbc	r23, r1
     b20:	88 27       	eor	r24, r24
     b22:	77 fd       	sbrc	r23, 7
     b24:	80 95       	com	r24
     b26:	98 2f       	mov	r25, r24
     b28:	0e 94 83 10 	call	0x2106	; 0x2106 <__floatsisf>
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e8       	ldi	r20, 0x80	; 128
     b32:	5d e3       	ldi	r21, 0x3D	; 61
     b34:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     b38:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <atan>
     b3c:	6b 01       	movw	r12, r22
     b3e:	7c 01       	movw	r14, r24
     b40:	69 c0       	rjmp	.+210    	; 0xc14 <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	55 dd       	rcall	.-1366   	; 0x5f2 <navigation_get_sensor>
     b48:	f8 2e       	mov	r15, r24
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	51 dd       	rcall	.-1374   	; 0x5f2 <navigation_get_sensor>
     b50:	2f 2d       	mov	r18, r15
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	a9 01       	movw	r20, r18
     b56:	48 1b       	sub	r20, r24
     b58:	51 09       	sbc	r21, r1
     b5a:	ca 01       	movw	r24, r20
     b5c:	99 23       	and	r25, r25
     b5e:	1c f4       	brge	.+6      	; 0xb66 <navigation_angle_offset+0x10e>
     b60:	91 95       	neg	r25
     b62:	81 95       	neg	r24
     b64:	91 09       	sbc	r25, r1
     b66:	0a 97       	sbiw	r24, 0x0a	; 10
     b68:	0c f5       	brge	.+66     	; 0xbac <navigation_angle_offset+0x154>
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	41 dd       	rcall	.-1406   	; 0x5f2 <navigation_get_sensor>
     b70:	82 33       	cpi	r24, 0x32	; 50
     b72:	e0 f4       	brcc	.+56     	; 0xbac <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	3c dd       	rcall	.-1416   	; 0x5f2 <navigation_get_sensor>
     b7a:	f8 2e       	mov	r15, r24
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	38 dd       	rcall	.-1424   	; 0x5f2 <navigation_get_sensor>
     b82:	6f 2d       	mov	r22, r15
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	68 1b       	sub	r22, r24
     b88:	71 09       	sbc	r23, r1
     b8a:	88 27       	eor	r24, r24
     b8c:	77 fd       	sbrc	r23, 7
     b8e:	80 95       	com	r24
     b90:	98 2f       	mov	r25, r24
     b92:	0e 94 83 10 	call	0x2106	; 0x2106 <__floatsisf>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e8       	ldi	r20, 0x80	; 128
     b9c:	5d e3       	ldi	r21, 0x3D	; 61
     b9e:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     ba2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <atan>
     ba6:	6b 01       	movw	r12, r22
     ba8:	7c 01       	movw	r14, r24
     baa:	34 c0       	rjmp	.+104    	; 0xc14 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	20 dd       	rcall	.-1472   	; 0x5f2 <navigation_get_sensor>
     bb2:	f8 2e       	mov	r15, r24
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	1c dd       	rcall	.-1480   	; 0x5f2 <navigation_get_sensor>
     bba:	2f 2d       	mov	r18, r15
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	a9 01       	movw	r20, r18
     bc0:	48 1b       	sub	r20, r24
     bc2:	51 09       	sbc	r21, r1
     bc4:	ca 01       	movw	r24, r20
     bc6:	99 23       	and	r25, r25
     bc8:	1c f4       	brge	.+6      	; 0xbd0 <navigation_angle_offset+0x178>
     bca:	91 95       	neg	r25
     bcc:	81 95       	neg	r24
     bce:	91 09       	sbc	r25, r1
     bd0:	0a 97       	sbiw	r24, 0x0a	; 10
     bd2:	7c f5       	brge	.+94     	; 0xc32 <navigation_angle_offset+0x1da>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0c dd       	rcall	.-1512   	; 0x5f2 <navigation_get_sensor>
     bda:	82 33       	cpi	r24, 0x32	; 50
     bdc:	50 f5       	brcc	.+84     	; 0xc32 <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	07 dd       	rcall	.-1522   	; 0x5f2 <navigation_get_sensor>
     be4:	f8 2e       	mov	r15, r24
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	03 dd       	rcall	.-1530   	; 0x5f2 <navigation_get_sensor>
     bec:	6f 2d       	mov	r22, r15
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	68 1b       	sub	r22, r24
     bf2:	71 09       	sbc	r23, r1
     bf4:	88 27       	eor	r24, r24
     bf6:	77 fd       	sbrc	r23, 7
     bf8:	80 95       	com	r24
     bfa:	98 2f       	mov	r25, r24
     bfc:	0e 94 83 10 	call	0x2106	; 0x2106 <__floatsisf>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e8       	ldi	r20, 0x80	; 128
     c06:	5d e3       	ldi	r21, 0x3D	; 61
     c08:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3>
     c0c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <atan>
     c10:	6b 01       	movw	r12, r22
     c12:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     c14:	c7 01       	movw	r24, r14
     c16:	b6 01       	movw	r22, r12
     c18:	9f 77       	andi	r25, 0x7F	; 127
     c1a:	29 e2       	ldi	r18, 0x29	; 41
     c1c:	3c e5       	ldi	r19, 0x5C	; 92
     c1e:	4f e8       	ldi	r20, 0x8F	; 143
     c20:	5d e3       	ldi	r21, 0x3D	; 61
     c22:	0e 94 91 11 	call	0x2322	; 0x2322 <__gesf2>
     c26:	18 16       	cp	r1, r24
     c28:	3c f0       	brlt	.+14     	; 0xc38 <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     c2a:	c1 2c       	mov	r12, r1
     c2c:	d1 2c       	mov	r13, r1
     c2e:	76 01       	movw	r14, r12
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <navigation_angle_offset+0x1e0>
     c32:	c1 2c       	mov	r12, r1
     c34:	d1 2c       	mov	r13, r1
     c36:	76 01       	movw	r14, r12
     c38:	7c 2d       	mov	r23, r12
	}
}
     c3a:	67 2f       	mov	r22, r23
     c3c:	7d 2d       	mov	r23, r13
     c3e:	8e 2d       	mov	r24, r14
     c40:	9f 2d       	mov	r25, r15
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	08 95       	ret

00000c4c <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	0b b6       	in	r0, 0x3b	; 59
     c58:	0f 92       	push	r0
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	73 dc       	rcall	.-1818   	; 0x55c <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	77 dc       	rcall	.-1810   	; 0x568 <navigation_set_autonomous_walk>
}
     c7a:	ff 91       	pop	r31
     c7c:	ef 91       	pop	r30
     c7e:	bf 91       	pop	r27
     c80:	af 91       	pop	r26
     c82:	9f 91       	pop	r25
     c84:	8f 91       	pop	r24
     c86:	7f 91       	pop	r23
     c88:	6f 91       	pop	r22
     c8a:	5f 91       	pop	r21
     c8c:	4f 91       	pop	r20
     c8e:	3f 91       	pop	r19
     c90:	2f 91       	pop	r18
     c92:	0f 90       	pop	r0
     c94:	0b be       	out	0x3b, r0	; 59
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	0f 90       	pop	r0
     c9c:	1f 90       	pop	r1
     c9e:	18 95       	reti

00000ca0 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     ca0:	1f 92       	push	r1
     ca2:	0f 92       	push	r0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	0f 92       	push	r0
     ca8:	11 24       	eor	r1, r1
     caa:	0b b6       	in	r0, 0x3b	; 59
     cac:	0f 92       	push	r0
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	49 dc       	rcall	.-1902   	; 0x55c <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	4d dc       	rcall	.-1894   	; 0x568 <navigation_set_autonomous_walk>
     cce:	ff 91       	pop	r31
     cd0:	ef 91       	pop	r30
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	7f 91       	pop	r23
     cdc:	6f 91       	pop	r22
     cde:	5f 91       	pop	r21
     ce0:	4f 91       	pop	r20
     ce2:	3f 91       	pop	r19
     ce4:	2f 91       	pop	r18
     ce6:	0f 90       	pop	r0
     ce8:	0b be       	out	0x3b, r0	; 59
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <main>:
//Flag to know if to send the autonom settings to the computer.
uint8_t autonom_flag = 1;

int main(void)
{
	USART_init();
     cf4:	de d4       	rcall	.+2492   	; 0x16b2 <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); //<<<????>>> send messages from gang to the display, not the computer
     cf6:	80 e8       	ldi	r24, 0x80	; 128
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	e7 d4       	rcall	.+2510   	; 0x16ca <USART_set_twi_message_destination>
	sei();
     cfc:	78 94       	sei
	TWI_init(ST_ADDRESS);
     cfe:	80 e2       	ldi	r24, 0x20	; 32
     d00:	70 d1       	rcall	.+736    	; 0xfe2 <TWI_init>
	init_counters();
     d02:	ac db       	rcall	.-2216   	; 0x45c <init_counters>
	
	LED_INIT;
     d04:	81 b1       	in	r24, 0x01	; 1
     d06:	83 60       	ori	r24, 0x03	; 3
     d08:	81 b9       	out	0x01, r24	; 1
     d0a:	87 b1       	in	r24, 0x07	; 7
     d0c:	80 6c       	ori	r24, 0xC0	; 192
     d0e:	87 b9       	out	0x07, r24	; 7
	
	//Buttons
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //For emphasize
     d10:	81 b1       	in	r24, 0x01	; 1
     d12:	8f 73       	andi	r24, 0x3F	; 63
     d14:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     d16:	e8 e6       	ldi	r30, 0x68	; 104
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	81 60       	ori	r24, 0x01	; 1
     d1e:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //mask for porta6 and porta7
     d20:	eb e6       	ldi	r30, 0x6B	; 107
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 6c       	ori	r24, 0xC0	; 192
     d28:	80 83       	st	Z, r24
     d2a:	2f ef       	ldi	r18, 0xFF	; 255
     d2c:	83 e2       	ldi	r24, 0x23	; 35
     d2e:	94 ef       	ldi	r25, 0xF4	; 244
     d30:	21 50       	subi	r18, 0x01	; 1
     d32:	80 40       	sbci	r24, 0x00	; 0
     d34:	90 40       	sbci	r25, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <main+0x3c>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <main+0x46>
     d3a:	00 00       	nop
	
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	14 dc       	rcall	.-2008   	; 0x568 <navigation_set_autonomous_walk>
	//set_counter_1(100);
	set_counter_2(200);
     d40:	88 ec       	ldi	r24, 0xC8	; 200
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	79 db       	rcall	.-2318   	; 0x438 <set_counter_2>
				USART_send_command();
			}
			
			if(TWI_elevation_flag())
			{
				LED0_TOGGLE;
     d46:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else
		{
			if(TWI_command_flag())
			{
				LED1_TOGGLE;
     d48:	c2 e0       	ldi	r28, 0x02	; 2
			LED1_TOGGLE;
			navigation_fill_buffer();
		}*/
		
		
		if(autonom_flag)
     d4a:	80 91 08 01 	lds	r24, 0x0108
     d4e:	88 23       	and	r24, r24
     d50:	31 f0       	breq	.+12     	; 0xd5e <main+0x6a>
		{
			TWI_send_autonom_settings(C_ADDRESS, navigation_left_algorithm());
     d52:	01 dc       	rcall	.-2046   	; 0x556 <navigation_left_algorithm>
     d54:	68 2f       	mov	r22, r24
     d56:	80 e8       	ldi	r24, 0x80	; 128
     d58:	67 d1       	rcall	.+718    	; 0x1028 <TWI_send_autonom_settings>
			autonom_flag = 0;
     d5a:	10 92 08 01 	sts	0x0108, r1
		}
		
		if(navigation_autonomous_walk() == 1)
     d5e:	01 dc       	rcall	.-2046   	; 0x562 <navigation_autonomous_walk>
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	49 f4       	brne	.+18     	; 0xd76 <main+0x82>
		{
			if(TWI_control_settings_flag())
     d64:	c5 d2       	rcall	.+1418   	; 0x12f0 <TWI_control_settings_flag>
     d66:	88 23       	and	r24, r24
     d68:	21 f0       	breq	.+8      	; 0xd72 <main+0x7e>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	ab d2       	rcall	.+1366   	; 0x12c6 <TWI_get_control_setting>
     d70:	e3 db       	rcall	.-2106   	; 0x538 <navigation_set_Kp>
			}
			autonomouswalk_walk();
     d72:	af da       	rcall	.-2722   	; 0x2d2 <autonomouswalk_walk>
     d74:	ea cf       	rjmp	.-44     	; 0xd4a <main+0x56>
		}
		else
		{
			if(TWI_command_flag())
     d76:	b2 d2       	rcall	.+1380   	; 0x12dc <TWI_command_flag>
     d78:	88 23       	and	r24, r24
     d7a:	21 f0       	breq	.+8      	; 0xd84 <main+0x90>
			{
				LED1_TOGGLE;
     d7c:	82 b1       	in	r24, 0x02	; 2
     d7e:	8c 27       	eor	r24, r28
     d80:	82 b9       	out	0x02, r24	; 2
				USART_send_command();
     d82:	6e d5       	rcall	.+2780   	; 0x1860 <USART_send_command>
			}
			
			if(TWI_elevation_flag())
     d84:	c9 d2       	rcall	.+1426   	; 0x1318 <TWI_elevation_flag>
     d86:	88 23       	and	r24, r24
     d88:	21 f0       	breq	.+8      	; 0xd92 <main+0x9e>
			{
				LED0_TOGGLE;
     d8a:	82 b1       	in	r24, 0x02	; 2
     d8c:	8d 27       	eor	r24, r29
     d8e:	82 b9       	out	0x02, r24	; 2
				USART_send_elevation();
     d90:	79 d5       	rcall	.+2802   	; 0x1884 <USART_send_elevation>
			}
		USART_decode_rx_fifo();
     d92:	bb d7       	rcall	.+3958   	; 0x1d0a <USART_decode_rx_fifo>
     d94:	da cf       	rjmp	.-76     	; 0xd4a <main+0x56>

00000d96 <__vector_13>:
	}
}
//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
	//USART_RequestGyro();
	TCNT1 = 0;
     da0:	10 92 85 00 	sts	0x0085, r1
     da4:	10 92 84 00 	sts	0x0084, r1
}
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	0b b6       	in	r0, 0x3b	; 59
     dbe:	0f 92       	push	r0
     dc0:	2f 93       	push	r18
     dc2:	3f 93       	push	r19
     dc4:	4f 93       	push	r20
     dc6:	5f 93       	push	r21
     dc8:	6f 93       	push	r22
     dca:	7f 93       	push	r23
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	af 93       	push	r26
     dd2:	bf 93       	push	r27
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
	if(TWI_autonom_settings_flag())
     dd8:	95 d2       	rcall	.+1322   	; 0x1304 <TWI_autonom_settings_flag>
     dda:	88 23       	and	r24, r24
     ddc:	91 f0       	breq	.+36     	; 0xe02 <__vector_32+0x50>
	{
		uint8_t sett = TWI_get_autonom_settings();
     dde:	78 d2       	rcall	.+1264   	; 0x12d0 <TWI_get_autonom_settings>
		if(sett == 0)
     de0:	81 11       	cpse	r24, r1
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <__vector_32+0x36>
		{
			navigation_set_autonomous_walk(0);
     de4:	c1 db       	rcall	.-2174   	; 0x568 <navigation_set_autonomous_walk>
     de6:	0a c0       	rjmp	.+20     	; 0xdfc <__vector_32+0x4a>
		}
		else if(sett == 1)
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	21 f4       	brne	.+8      	; 0xdf4 <__vector_32+0x42>
		{
			navigation_set_autonomous_walk(1);
     dec:	bd db       	rcall	.-2182   	; 0x568 <navigation_set_autonomous_walk>
			navigation_set_algorithm(1);
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	b5 db       	rcall	.-2198   	; 0x55c <navigation_set_algorithm>
     df2:	04 c0       	rjmp	.+8      	; 0xdfc <__vector_32+0x4a>
		}
		else //sett == 2
		{
			navigation_set_autonomous_walk(1);
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	b8 db       	rcall	.-2192   	; 0x568 <navigation_set_autonomous_walk>
			navigation_set_algorithm(0);
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	b0 db       	rcall	.-2208   	; 0x55c <navigation_set_algorithm>
		}
		autonom_flag = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	80 93 08 01 	sts	0x0108, r24
	}
	TCNT3 = 0;
     e02:	10 92 95 00 	sts	0x0095, r1
     e06:	10 92 94 00 	sts	0x0094, r1
}
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	7f 91       	pop	r23
     e18:	6f 91       	pop	r22
     e1a:	5f 91       	pop	r21
     e1c:	4f 91       	pop	r20
     e1e:	3f 91       	pop	r19
     e20:	2f 91       	pop	r18
     e22:	0f 90       	pop	r0
     e24:	0b be       	out	0x3b, r0	; 59
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <__vector_4>:

//-------------------Buttons PinChange interrupt---------------------

ISR(PCINT0_vect)
{
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	0b b6       	in	r0, 0x3b	; 59
     e3c:	0f 92       	push	r0
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     e56:	06 9b       	sbis	0x00, 6	; 0
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	85 db       	rcall	.-2294   	; 0x568 <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	7d db       	rcall	.-2310   	; 0x55c <navigation_set_algorithm>
		//test
		LED2_TOGGLE;
     e62:	98 b1       	in	r25, 0x08	; 8
     e64:	80 e4       	ldi	r24, 0x40	; 64
     e66:	89 27       	eor	r24, r25
     e68:	88 b9       	out	0x08, r24	; 8
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <__vector_4+0x4e>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     e6c:	07 9b       	sbis	0x00, 7	; 0
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <__vector_4+0x4e>
	{
		navigation_set_autonomous_walk(1);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	7a db       	rcall	.-2316   	; 0x568 <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	72 db       	rcall	.-2332   	; 0x55c <navigation_set_algorithm>
		//test
		LED3_TOGGLE;
     e78:	88 b1       	in	r24, 0x08	; 8
     e7a:	80 58       	subi	r24, 0x80	; 128
     e7c:	88 b9       	out	0x08, r24	; 8
	}
	autonom_flag = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 08 01 	sts	0x0108, r24
}
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0b be       	out	0x3b, r0	; 59
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	0f 90       	pop	r0
     ea6:	1f 90       	pop	r1
     ea8:	18 95       	reti

00000eaa <set_twi_reciever_enable>:
     eaa:	85 e4       	ldi	r24, 0x45	; 69
     eac:	80 93 bc 00 	sts	0x00BC, r24
     eb0:	08 95       	ret

00000eb2 <clear_int>:
     eb2:	81 ec       	ldi	r24, 0xC1	; 193
     eb4:	80 93 bc 00 	sts	0x00BC, r24
     eb8:	08 95       	ret

00000eba <start_bus>:
     eba:	84 ea       	ldi	r24, 0xA4	; 164
     ebc:	80 93 bc 00 	sts	0x00BC, r24
     ec0:	08 95       	ret

00000ec2 <stop_bus>:
     ec2:	85 ed       	ldi	r24, 0xD5	; 213
     ec4:	80 93 bc 00 	sts	0x00BC, r24
     ec8:	08 95       	ret

00000eca <Error>:
     eca:	80 91 b9 00 	lds	r24, 0x00B9
     ece:	88 7f       	andi	r24, 0xF8	; 248
     ed0:	88 33       	cpi	r24, 0x38	; 56
     ed2:	09 f0       	breq	.+2      	; 0xed6 <Error+0xc>
     ed4:	f6 cf       	rjmp	.-20     	; 0xec2 <stop_bus>
     ed6:	ed cf       	rjmp	.-38     	; 0xeb2 <clear_int>

00000ed8 <get_data>:
     ed8:	80 91 bb 00 	lds	r24, 0x00BB
     edc:	08 95       	ret

00000ede <wait_for_bus>:
     ede:	ec eb       	ldi	r30, 0xBC	; 188
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	88 23       	and	r24, r24
     ee6:	ec f7       	brge	.-6      	; 0xee2 <wait_for_bus+0x4>
     ee8:	08 95       	ret

00000eea <send_data_and_wait>:
     eea:	80 93 bb 00 	sts	0x00BB, r24
     eee:	84 e8       	ldi	r24, 0x84	; 132
     ef0:	80 93 bc 00 	sts	0x00BC, r24
     ef4:	f4 cf       	rjmp	.-24     	; 0xede <wait_for_bus>

00000ef6 <stop_twi>:
     ef6:	10 92 1c 15 	sts	0x151C, r1
     efa:	10 92 1b 15 	sts	0x151B, r1
     efe:	10 92 26 15 	sts	0x1526, r1
     f02:	10 92 25 15 	sts	0x1525, r1
     f06:	10 92 11 15 	sts	0x1511, r1
     f0a:	10 92 10 15 	sts	0x1510, r1
     f0e:	10 92 16 15 	sts	0x1516, r1
     f12:	10 92 15 15 	sts	0x1515, r1
     f16:	10 92 19 15 	sts	0x1519, r1
     f1a:	10 92 18 15 	sts	0x1518, r1
     f1e:	08 95       	ret

00000f20 <reset_TWI>:
     f20:	ec eb       	ldi	r30, 0xBC	; 188
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 6c       	ori	r24, 0xC0	; 192
     f28:	80 83       	st	Z, r24
     f2a:	08 95       	ret

00000f2c <get_control_settings_from_bus>:
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	c0 91 15 15 	lds	r28, 0x1515
     f34:	d0 91 16 15 	lds	r29, 0x1516
     f38:	cf df       	rcall	.-98     	; 0xed8 <get_data>
     f3a:	ce 5e       	subi	r28, 0xEE	; 238
     f3c:	da 4e       	sbci	r29, 0xEA	; 234
     f3e:	88 83       	st	Y, r24
     f40:	10 92 16 15 	sts	0x1516, r1
     f44:	10 92 15 15 	sts	0x1515, r1
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <get_autonom_settings_from_bus>:
     f4e:	c4 df       	rcall	.-120    	; 0xed8 <get_data>
     f50:	80 93 10 14 	sts	0x1410, r24
     f54:	08 95       	ret

00000f56 <get_char_from_bus>:
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	c0 91 10 15 	lds	r28, 0x1510
     f5e:	d0 91 11 15 	lds	r29, 0x1511
     f62:	ba df       	rcall	.-140    	; 0xed8 <get_data>
     f64:	cf 5e       	subi	r28, 0xEF	; 239
     f66:	db 4e       	sbci	r29, 0xEB	; 235
     f68:	88 83       	st	Y, r24
     f6a:	80 91 10 15 	lds	r24, 0x1510
     f6e:	90 91 11 15 	lds	r25, 0x1511
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	90 93 11 15 	sts	0x1511, r25
     f78:	80 93 10 15 	sts	0x1510, r24
     f7c:	90 93 21 15 	sts	0x1521, r25
     f80:	80 93 20 15 	sts	0x1520, r24
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <get_sensor_from_bus>:
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	c0 91 25 15 	lds	r28, 0x1525
     f92:	d0 91 26 15 	lds	r29, 0x1526
     f96:	c8 30       	cpi	r28, 0x08	; 8
     f98:	d1 05       	cpc	r29, r1
     f9a:	99 f4       	brne	.+38     	; 0xfc2 <get_sensor_from_bus+0x38>
     f9c:	e7 e2       	ldi	r30, 0x27	; 39
     f9e:	f5 e1       	ldi	r31, 0x15	; 21
     fa0:	af e2       	ldi	r26, 0x2F	; 47
     fa2:	b5 e1       	ldi	r27, 0x15	; 21
     fa4:	8f e2       	ldi	r24, 0x2F	; 47
     fa6:	95 e1       	ldi	r25, 0x15	; 21
     fa8:	21 91       	ld	r18, Z+
     faa:	2d 93       	st	X+, r18
     fac:	e8 17       	cp	r30, r24
     fae:	f9 07       	cpc	r31, r25
     fb0:	d9 f7       	brne	.-10     	; 0xfa8 <get_sensor_from_bus+0x1e>
     fb2:	92 df       	rcall	.-220    	; 0xed8 <get_data>
     fb4:	80 93 1f 15 	sts	0x151F, r24
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 c4 13 	sts	0x13C4, r24
     fbe:	ee da       	rcall	.-2596   	; 0x59c <navigation_fill_buffer>
     fc0:	0d c0       	rjmp	.+26     	; 0xfdc <get_sensor_from_bus+0x52>
     fc2:	8a df       	rcall	.-236    	; 0xed8 <get_data>
     fc4:	c9 5d       	subi	r28, 0xD9	; 217
     fc6:	da 4e       	sbci	r29, 0xEA	; 234
     fc8:	88 83       	st	Y, r24
     fca:	80 91 25 15 	lds	r24, 0x1525
     fce:	90 91 26 15 	lds	r25, 0x1526
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	90 93 26 15 	sts	0x1526, r25
     fd8:	80 93 25 15 	sts	0x1525, r24
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <TWI_init>:
     fe2:	80 93 17 15 	sts	0x1517, r24
     fe6:	80 34       	cpi	r24, 0x40	; 64
     fe8:	79 f0       	breq	.+30     	; 0x1008 <TWI_init+0x26>
     fea:	80 38       	cpi	r24, 0x80	; 128
     fec:	19 f0       	breq	.+6      	; 0xff4 <TWI_init+0x12>
     fee:	80 32       	cpi	r24, 0x20	; 32
     ff0:	d1 f4       	brne	.+52     	; 0x1026 <TWI_init+0x44>
     ff2:	12 c0       	rjmp	.+36     	; 0x1018 <TWI_init+0x36>
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	88 b9       	out	0x08, r24	; 8
     ff8:	58 df       	rcall	.-336    	; 0xeaa <set_twi_reciever_enable>
     ffa:	8f e3       	ldi	r24, 0x3F	; 63
     ffc:	80 93 b8 00 	sts	0x00B8, r24
    1000:	81 e8       	ldi	r24, 0x81	; 129
    1002:	80 93 ba 00 	sts	0x00BA, r24
    1006:	08 95       	ret
    1008:	8f e3       	ldi	r24, 0x3F	; 63
    100a:	80 93 b8 00 	sts	0x00B8, r24
    100e:	4d df       	rcall	.-358    	; 0xeaa <set_twi_reciever_enable>
    1010:	80 e4       	ldi	r24, 0x40	; 64
    1012:	80 93 ba 00 	sts	0x00BA, r24
    1016:	08 95       	ret
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	80 93 b8 00 	sts	0x00B8, r24
    101e:	45 df       	rcall	.-374    	; 0xeaa <set_twi_reciever_enable>
    1020:	81 e2       	ldi	r24, 0x21	; 33
    1022:	80 93 ba 00 	sts	0x00BA, r24
    1026:	08 95       	ret

00001028 <TWI_send_autonom_settings>:
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	c8 2f       	mov	r28, r24
    102e:	d6 2f       	mov	r29, r22
    1030:	44 df       	rcall	.-376    	; 0xeba <start_bus>
    1032:	55 df       	rcall	.-342    	; 0xede <wait_for_bus>
    1034:	90 91 b9 00 	lds	r25, 0x00B9
    1038:	98 7f       	andi	r25, 0xF8	; 248
    103a:	98 30       	cpi	r25, 0x08	; 8
    103c:	19 f0       	breq	.+6      	; 0x1044 <TWI_send_autonom_settings+0x1c>
    103e:	45 df       	rcall	.-374    	; 0xeca <Error>
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	20 c0       	rjmp	.+64     	; 0x1084 <TWI_send_autonom_settings+0x5c>
    1044:	8c 2f       	mov	r24, r28
    1046:	51 df       	rcall	.-350    	; 0xeea <send_data_and_wait>
    1048:	80 91 b9 00 	lds	r24, 0x00B9
    104c:	88 7f       	andi	r24, 0xF8	; 248
    104e:	88 31       	cpi	r24, 0x18	; 24
    1050:	19 f0       	breq	.+6      	; 0x1058 <TWI_send_autonom_settings+0x30>
    1052:	3b df       	rcall	.-394    	; 0xeca <Error>
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	16 c0       	rjmp	.+44     	; 0x1084 <TWI_send_autonom_settings+0x5c>
    1058:	85 e0       	ldi	r24, 0x05	; 5
    105a:	47 df       	rcall	.-370    	; 0xeea <send_data_and_wait>
    105c:	80 91 b9 00 	lds	r24, 0x00B9
    1060:	88 7f       	andi	r24, 0xF8	; 248
    1062:	88 32       	cpi	r24, 0x28	; 40
    1064:	19 f0       	breq	.+6      	; 0x106c <TWI_send_autonom_settings+0x44>
    1066:	31 df       	rcall	.-414    	; 0xeca <Error>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	0c c0       	rjmp	.+24     	; 0x1084 <TWI_send_autonom_settings+0x5c>
    106c:	8d 2f       	mov	r24, r29
    106e:	3d df       	rcall	.-390    	; 0xeea <send_data_and_wait>
    1070:	80 91 b9 00 	lds	r24, 0x00B9
    1074:	88 7f       	andi	r24, 0xF8	; 248
    1076:	88 32       	cpi	r24, 0x28	; 40
    1078:	19 f0       	breq	.+6      	; 0x1080 <TWI_send_autonom_settings+0x58>
    107a:	27 df       	rcall	.-434    	; 0xeca <Error>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <TWI_send_autonom_settings+0x5c>
    1080:	20 df       	rcall	.-448    	; 0xec2 <stop_bus>
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <TWI_send_command>:
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	c8 2f       	mov	r28, r24
    1092:	d6 2f       	mov	r29, r22
    1094:	14 2f       	mov	r17, r20
    1096:	11 df       	rcall	.-478    	; 0xeba <start_bus>
    1098:	22 df       	rcall	.-444    	; 0xede <wait_for_bus>
    109a:	90 91 b9 00 	lds	r25, 0x00B9
    109e:	98 7f       	andi	r25, 0xF8	; 248
    10a0:	98 30       	cpi	r25, 0x08	; 8
    10a2:	19 f0       	breq	.+6      	; 0x10aa <TWI_send_command+0x20>
    10a4:	12 df       	rcall	.-476    	; 0xeca <Error>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	34 c0       	rjmp	.+104    	; 0x1112 <TWI_send_command+0x88>
    10aa:	80 e2       	ldi	r24, 0x20	; 32
    10ac:	1e df       	rcall	.-452    	; 0xeea <send_data_and_wait>
    10ae:	80 91 b9 00 	lds	r24, 0x00B9
    10b2:	88 7f       	andi	r24, 0xF8	; 248
    10b4:	88 31       	cpi	r24, 0x18	; 24
    10b6:	19 f0       	breq	.+6      	; 0x10be <TWI_send_command+0x34>
    10b8:	08 df       	rcall	.-496    	; 0xeca <Error>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	2a c0       	rjmp	.+84     	; 0x1112 <TWI_send_command+0x88>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	14 df       	rcall	.-472    	; 0xeea <send_data_and_wait>
    10c2:	80 91 b9 00 	lds	r24, 0x00B9
    10c6:	88 7f       	andi	r24, 0xF8	; 248
    10c8:	88 32       	cpi	r24, 0x28	; 40
    10ca:	19 f0       	breq	.+6      	; 0x10d2 <TWI_send_command+0x48>
    10cc:	fe de       	rcall	.-516    	; 0xeca <Error>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	20 c0       	rjmp	.+64     	; 0x1112 <TWI_send_command+0x88>
    10d2:	8c 2f       	mov	r24, r28
    10d4:	0a df       	rcall	.-492    	; 0xeea <send_data_and_wait>
    10d6:	80 91 b9 00 	lds	r24, 0x00B9
    10da:	88 7f       	andi	r24, 0xF8	; 248
    10dc:	88 32       	cpi	r24, 0x28	; 40
    10de:	19 f0       	breq	.+6      	; 0x10e6 <TWI_send_command+0x5c>
    10e0:	f4 de       	rcall	.-536    	; 0xeca <Error>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	16 c0       	rjmp	.+44     	; 0x1112 <TWI_send_command+0x88>
    10e6:	8d 2f       	mov	r24, r29
    10e8:	00 df       	rcall	.-512    	; 0xeea <send_data_and_wait>
    10ea:	80 91 b9 00 	lds	r24, 0x00B9
    10ee:	88 7f       	andi	r24, 0xF8	; 248
    10f0:	88 32       	cpi	r24, 0x28	; 40
    10f2:	19 f0       	breq	.+6      	; 0x10fa <TWI_send_command+0x70>
    10f4:	ea de       	rcall	.-556    	; 0xeca <Error>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	0c c0       	rjmp	.+24     	; 0x1112 <TWI_send_command+0x88>
    10fa:	81 2f       	mov	r24, r17
    10fc:	f6 de       	rcall	.-532    	; 0xeea <send_data_and_wait>
    10fe:	80 91 b9 00 	lds	r24, 0x00B9
    1102:	88 7f       	andi	r24, 0xF8	; 248
    1104:	88 32       	cpi	r24, 0x28	; 40
    1106:	19 f0       	breq	.+6      	; 0x110e <TWI_send_command+0x84>
    1108:	e0 de       	rcall	.-576    	; 0xeca <Error>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <TWI_send_command+0x88>
    110e:	d9 de       	rcall	.-590    	; 0xec2 <stop_bus>
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	08 95       	ret

0000111a <TWI_send_string>:
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	c8 2f       	mov	r28, r24
    1128:	e6 2e       	mov	r14, r22
    112a:	f7 2e       	mov	r15, r23
    112c:	c6 de       	rcall	.-628    	; 0xeba <start_bus>
    112e:	d7 de       	rcall	.-594    	; 0xede <wait_for_bus>
    1130:	90 91 b9 00 	lds	r25, 0x00B9
    1134:	98 7f       	andi	r25, 0xF8	; 248
    1136:	98 30       	cpi	r25, 0x08	; 8
    1138:	19 f0       	breq	.+6      	; 0x1140 <TWI_send_string+0x26>
    113a:	c7 de       	rcall	.-626    	; 0xeca <Error>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	2c c0       	rjmp	.+88     	; 0x1198 <TWI_send_string+0x7e>
    1140:	8c 2f       	mov	r24, r28
    1142:	d3 de       	rcall	.-602    	; 0xeea <send_data_and_wait>
    1144:	80 91 b9 00 	lds	r24, 0x00B9
    1148:	88 7f       	andi	r24, 0xF8	; 248
    114a:	88 31       	cpi	r24, 0x18	; 24
    114c:	19 f0       	breq	.+6      	; 0x1154 <TWI_send_string+0x3a>
    114e:	bd de       	rcall	.-646    	; 0xeca <Error>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	22 c0       	rjmp	.+68     	; 0x1198 <TWI_send_string+0x7e>
    1154:	89 e1       	ldi	r24, 0x19	; 25
    1156:	c9 de       	rcall	.-622    	; 0xeea <send_data_and_wait>
    1158:	80 91 b9 00 	lds	r24, 0x00B9
    115c:	88 7f       	andi	r24, 0xF8	; 248
    115e:	88 32       	cpi	r24, 0x28	; 40
    1160:	29 f4       	brne	.+10     	; 0x116c <TWI_send_string+0x52>
    1162:	0e 2d       	mov	r16, r14
    1164:	1f 2d       	mov	r17, r15
    1166:	c0 e0       	ldi	r28, 0x00	; 0
    1168:	d0 e0       	ldi	r29, 0x00	; 0
    116a:	08 c0       	rjmp	.+16     	; 0x117c <TWI_send_string+0x62>
    116c:	ae de       	rcall	.-676    	; 0xeca <Error>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	13 c0       	rjmp	.+38     	; 0x1198 <TWI_send_string+0x7e>
    1172:	f8 01       	movw	r30, r16
    1174:	81 91       	ld	r24, Z+
    1176:	8f 01       	movw	r16, r30
    1178:	b8 de       	rcall	.-656    	; 0xeea <send_data_and_wait>
    117a:	21 96       	adiw	r28, 0x01	; 1
    117c:	ee 2d       	mov	r30, r14
    117e:	ff 2d       	mov	r31, r15
    1180:	df 01       	movw	r26, r30
    1182:	0d 90       	ld	r0, X+
    1184:	00 20       	and	r0, r0
    1186:	e9 f7       	brne	.-6      	; 0x1182 <TWI_send_string+0x68>
    1188:	11 97       	sbiw	r26, 0x01	; 1
    118a:	ae 1b       	sub	r26, r30
    118c:	bf 0b       	sbc	r27, r31
    118e:	ca 17       	cp	r28, r26
    1190:	db 07       	cpc	r29, r27
    1192:	78 f3       	brcs	.-34     	; 0x1172 <TWI_send_string+0x58>
    1194:	96 de       	rcall	.-724    	; 0xec2 <stop_bus>
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	08 95       	ret

000011a6 <TWI_send_string_fixed_length>:
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	c8 2f       	mov	r28, r24
    11b4:	e6 2e       	mov	r14, r22
    11b6:	f7 2e       	mov	r15, r23
    11b8:	8a 01       	movw	r16, r20
    11ba:	7f de       	rcall	.-770    	; 0xeba <start_bus>
    11bc:	90 de       	rcall	.-736    	; 0xede <wait_for_bus>
    11be:	90 91 b9 00 	lds	r25, 0x00B9
    11c2:	98 7f       	andi	r25, 0xF8	; 248
    11c4:	98 30       	cpi	r25, 0x08	; 8
    11c6:	19 f0       	breq	.+6      	; 0x11ce <TWI_send_string_fixed_length+0x28>
    11c8:	80 de       	rcall	.-768    	; 0xeca <Error>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	23 c0       	rjmp	.+70     	; 0x1214 <TWI_send_string_fixed_length+0x6e>
    11ce:	8c 2f       	mov	r24, r28
    11d0:	8c de       	rcall	.-744    	; 0xeea <send_data_and_wait>
    11d2:	80 91 b9 00 	lds	r24, 0x00B9
    11d6:	88 7f       	andi	r24, 0xF8	; 248
    11d8:	88 31       	cpi	r24, 0x18	; 24
    11da:	19 f0       	breq	.+6      	; 0x11e2 <TWI_send_string_fixed_length+0x3c>
    11dc:	76 de       	rcall	.-788    	; 0xeca <Error>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	19 c0       	rjmp	.+50     	; 0x1214 <TWI_send_string_fixed_length+0x6e>
    11e2:	89 e1       	ldi	r24, 0x19	; 25
    11e4:	82 de       	rcall	.-764    	; 0xeea <send_data_and_wait>
    11e6:	80 91 b9 00 	lds	r24, 0x00B9
    11ea:	88 7f       	andi	r24, 0xF8	; 248
    11ec:	88 32       	cpi	r24, 0x28	; 40
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <TWI_send_string_fixed_length+0x52>
    11f0:	10 16       	cp	r1, r16
    11f2:	11 06       	cpc	r1, r17
    11f4:	24 f0       	brlt	.+8      	; 0x11fe <TWI_send_string_fixed_length+0x58>
    11f6:	0c c0       	rjmp	.+24     	; 0x1210 <TWI_send_string_fixed_length+0x6a>
    11f8:	68 de       	rcall	.-816    	; 0xeca <Error>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <TWI_send_string_fixed_length+0x6e>
    11fe:	ce 2d       	mov	r28, r14
    1200:	df 2d       	mov	r29, r15
    1202:	0c 0f       	add	r16, r28
    1204:	1d 1f       	adc	r17, r29
    1206:	89 91       	ld	r24, Y+
    1208:	70 de       	rcall	.-800    	; 0xeea <send_data_and_wait>
    120a:	c0 17       	cp	r28, r16
    120c:	d1 07       	cpc	r29, r17
    120e:	d9 f7       	brne	.-10     	; 0x1206 <TWI_send_string_fixed_length+0x60>
    1210:	58 de       	rcall	.-848    	; 0xec2 <stop_bus>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	08 95       	ret

00001222 <TWI_send_float>:
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	00 d0       	rcall	.+0      	; 0x1230 <TWI_send_float+0xe>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <TWI_send_float+0x10>
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	18 2f       	mov	r17, r24
    1238:	49 83       	std	Y+1, r20	; 0x01
    123a:	5a 83       	std	Y+2, r21	; 0x02
    123c:	6b 83       	std	Y+3, r22	; 0x03
    123e:	7c 83       	std	Y+4, r23	; 0x04
    1240:	3c de       	rcall	.-904    	; 0xeba <start_bus>
    1242:	4d de       	rcall	.-870    	; 0xede <wait_for_bus>
    1244:	90 91 b9 00 	lds	r25, 0x00B9
    1248:	98 7f       	andi	r25, 0xF8	; 248
    124a:	98 30       	cpi	r25, 0x08	; 8
    124c:	19 f0       	breq	.+6      	; 0x1254 <TWI_send_float+0x32>
    124e:	3d de       	rcall	.-902    	; 0xeca <Error>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	24 c0       	rjmp	.+72     	; 0x129c <TWI_send_float+0x7a>
    1254:	81 2f       	mov	r24, r17
    1256:	49 de       	rcall	.-878    	; 0xeea <send_data_and_wait>
    1258:	80 91 b9 00 	lds	r24, 0x00B9
    125c:	88 7f       	andi	r24, 0xF8	; 248
    125e:	88 31       	cpi	r24, 0x18	; 24
    1260:	19 f0       	breq	.+6      	; 0x1268 <TWI_send_float+0x46>
    1262:	33 de       	rcall	.-922    	; 0xeca <Error>
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	1a c0       	rjmp	.+52     	; 0x129c <TWI_send_float+0x7a>
    1268:	86 e0       	ldi	r24, 0x06	; 6
    126a:	3f de       	rcall	.-898    	; 0xeea <send_data_and_wait>
    126c:	80 91 b9 00 	lds	r24, 0x00B9
    1270:	88 7f       	andi	r24, 0xF8	; 248
    1272:	88 32       	cpi	r24, 0x28	; 40
    1274:	19 f0       	breq	.+6      	; 0x127c <TWI_send_float+0x5a>
    1276:	29 de       	rcall	.-942    	; 0xeca <Error>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	10 c0       	rjmp	.+32     	; 0x129c <TWI_send_float+0x7a>
    127c:	8e 01       	movw	r16, r28
    127e:	0f 5f       	subi	r16, 0xFF	; 255
    1280:	1f 4f       	sbci	r17, 0xFF	; 255
    1282:	7e 01       	movw	r14, r28
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	e8 0e       	add	r14, r24
    1288:	f1 1c       	adc	r15, r1
    128a:	f8 01       	movw	r30, r16
    128c:	81 91       	ld	r24, Z+
    128e:	8f 01       	movw	r16, r30
    1290:	2c de       	rcall	.-936    	; 0xeea <send_data_and_wait>
    1292:	0e 15       	cp	r16, r14
    1294:	1f 05       	cpc	r17, r15
    1296:	c9 f7       	brne	.-14     	; 0x128a <TWI_send_float+0x68>
    1298:	14 de       	rcall	.-984    	; 0xec2 <stop_bus>
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	08 95       	ret

000012b2 <TWI_get_command>:
    12b2:	83 5f       	subi	r24, 0xF3	; 243
    12b4:	9b 4e       	sbci	r25, 0xEB	; 235
    12b6:	fc 01       	movw	r30, r24
    12b8:	80 81       	ld	r24, Z
    12ba:	08 95       	ret

000012bc <TWI_get_sensor>:
    12bc:	81 5d       	subi	r24, 0xD1	; 209
    12be:	9a 4e       	sbci	r25, 0xEA	; 234
    12c0:	fc 01       	movw	r30, r24
    12c2:	80 81       	ld	r24, Z
    12c4:	08 95       	ret

000012c6 <TWI_get_control_setting>:
    12c6:	8e 5e       	subi	r24, 0xEE	; 238
    12c8:	9a 4e       	sbci	r25, 0xEA	; 234
    12ca:	fc 01       	movw	r30, r24
    12cc:	80 81       	ld	r24, Z
    12ce:	08 95       	ret

000012d0 <TWI_get_autonom_settings>:
    12d0:	80 91 10 14 	lds	r24, 0x1410
    12d4:	08 95       	ret

000012d6 <TWI_get_elevation>:
    12d6:	80 91 1d 15 	lds	r24, 0x151D
    12da:	08 95       	ret

000012dc <TWI_command_flag>:
    12dc:	80 91 c3 13 	lds	r24, 0x13C3
    12e0:	88 23       	and	r24, r24
    12e2:	21 f0       	breq	.+8      	; 0x12ec <TWI_command_flag+0x10>
    12e4:	10 92 c3 13 	sts	0x13C3, r1
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	08 95       	ret
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <TWI_control_settings_flag>:
    12f0:	80 91 c2 13 	lds	r24, 0x13C2
    12f4:	88 23       	and	r24, r24
    12f6:	21 f0       	breq	.+8      	; 0x1300 <TWI_control_settings_flag+0x10>
    12f8:	10 92 c2 13 	sts	0x13C2, r1
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	08 95       	ret
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	08 95       	ret

00001304 <TWI_autonom_settings_flag>:
    1304:	80 91 c1 13 	lds	r24, 0x13C1
    1308:	88 23       	and	r24, r24
    130a:	21 f0       	breq	.+8      	; 0x1314 <TWI_autonom_settings_flag+0x10>
    130c:	10 92 c1 13 	sts	0x13C1, r1
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	08 95       	ret
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	08 95       	ret

00001318 <TWI_elevation_flag>:
    1318:	80 91 c0 13 	lds	r24, 0x13C0
    131c:	88 23       	and	r24, r24
    131e:	21 f0       	breq	.+8      	; 0x1328 <TWI_elevation_flag+0x10>
    1320:	10 92 c0 13 	sts	0x13C0, r1
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	08 95       	ret
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	08 95       	ret

0000132c <write_to_TwiFIFO>:
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	d8 2f       	mov	r29, r24
    1336:	c9 2f       	mov	r28, r25
    1338:	60 91 20 15 	lds	r22, 0x1520
    133c:	80 91 09 01 	lds	r24, 0x0109
    1340:	90 91 0a 01 	lds	r25, 0x010A
    1344:	b6 d8       	rcall	.-3732   	; 0x4b2 <FifoWrite>
    1346:	81 11       	cpse	r24, r1
    1348:	1f c0       	rjmp	.+62     	; 0x1388 <write_to_TwiFIFO+0x5c>
    134a:	20 91 20 15 	lds	r18, 0x1520
    134e:	30 91 21 15 	lds	r19, 0x1521
    1352:	12 16       	cp	r1, r18
    1354:	13 06       	cpc	r1, r19
    1356:	d4 f4       	brge	.+52     	; 0x138c <write_to_TwiFIFO+0x60>
    1358:	0d 2f       	mov	r16, r29
    135a:	1c 2f       	mov	r17, r28
    135c:	c0 e0       	ldi	r28, 0x00	; 0
    135e:	d0 e0       	ldi	r29, 0x00	; 0
    1360:	f8 01       	movw	r30, r16
    1362:	61 91       	ld	r22, Z+
    1364:	8f 01       	movw	r16, r30
    1366:	80 91 09 01 	lds	r24, 0x0109
    136a:	90 91 0a 01 	lds	r25, 0x010A
    136e:	a1 d8       	rcall	.-3774   	; 0x4b2 <FifoWrite>
    1370:	81 11       	cpse	r24, r1
    1372:	0e c0       	rjmp	.+28     	; 0x1390 <write_to_TwiFIFO+0x64>
    1374:	21 96       	adiw	r28, 0x01	; 1
    1376:	80 91 20 15 	lds	r24, 0x1520
    137a:	90 91 21 15 	lds	r25, 0x1521
    137e:	c8 17       	cp	r28, r24
    1380:	d9 07       	cpc	r29, r25
    1382:	74 f3       	brlt	.-36     	; 0x1360 <write_to_TwiFIFO+0x34>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <write_to_TwiFIFO+0x66>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <write_to_TwiFIFO+0x66>
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <write_to_TwiFIFO+0x66>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	08 95       	ret

0000139c <__vector_26>:
    139c:	1f 92       	push	r1
    139e:	0f 92       	push	r0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	0f 92       	push	r0
    13a4:	11 24       	eor	r1, r1
    13a6:	0b b6       	in	r0, 0x3b	; 59
    13a8:	0f 92       	push	r0
    13aa:	2f 93       	push	r18
    13ac:	3f 93       	push	r19
    13ae:	4f 93       	push	r20
    13b0:	5f 93       	push	r21
    13b2:	6f 93       	push	r22
    13b4:	7f 93       	push	r23
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	80 91 17 15 	lds	r24, 0x1517
    13ca:	80 34       	cpi	r24, 0x40	; 64
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <__vector_26+0x34>
    13ce:	87 c0       	rjmp	.+270    	; 0x14de <__vector_26+0x142>
    13d0:	80 38       	cpi	r24, 0x80	; 128
    13d2:	21 f0       	breq	.+8      	; 0x13dc <__vector_26+0x40>
    13d4:	80 32       	cpi	r24, 0x20	; 32
    13d6:	09 f0       	breq	.+2      	; 0x13da <__vector_26+0x3e>
    13d8:	57 c1       	rjmp	.+686    	; 0x1688 <__vector_26+0x2ec>
    13da:	c9 c0       	rjmp	.+402    	; 0x156e <__vector_26+0x1d2>
    13dc:	80 91 b9 00 	lds	r24, 0x00B9
    13e0:	88 7f       	andi	r24, 0xF8	; 248
    13e2:	80 36       	cpi	r24, 0x60	; 96
    13e4:	29 f0       	breq	.+10     	; 0x13f0 <__vector_26+0x54>
    13e6:	80 91 b9 00 	lds	r24, 0x00B9
    13ea:	88 7f       	andi	r24, 0xF8	; 248
    13ec:	88 36       	cpi	r24, 0x68	; 104
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <__vector_26+0x5c>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	80 93 1a 15 	sts	0x151A, r24
    13f6:	71 c0       	rjmp	.+226    	; 0x14da <__vector_26+0x13e>
    13f8:	80 91 b9 00 	lds	r24, 0x00B9
    13fc:	88 7f       	andi	r24, 0xF8	; 248
    13fe:	80 37       	cpi	r24, 0x70	; 112
    1400:	29 f0       	breq	.+10     	; 0x140c <__vector_26+0x70>
    1402:	80 91 b9 00 	lds	r24, 0x00B9
    1406:	88 7f       	andi	r24, 0xF8	; 248
    1408:	88 37       	cpi	r24, 0x78	; 120
    140a:	39 f4       	brne	.+14     	; 0x141a <__vector_26+0x7e>
    140c:	8f ef       	ldi	r24, 0xFF	; 255
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	90 93 24 15 	sts	0x1524, r25
    1414:	80 93 23 15 	sts	0x1523, r24
    1418:	60 c0       	rjmp	.+192    	; 0x14da <__vector_26+0x13e>
    141a:	80 91 b9 00 	lds	r24, 0x00B9
    141e:	88 7f       	andi	r24, 0xF8	; 248
    1420:	80 38       	cpi	r24, 0x80	; 128
    1422:	b9 f5       	brne	.+110    	; 0x1492 <__vector_26+0xf6>
    1424:	80 91 1a 15 	lds	r24, 0x151A
    1428:	88 23       	and	r24, r24
    142a:	41 f0       	breq	.+16     	; 0x143c <__vector_26+0xa0>
    142c:	55 dd       	rcall	.-1366   	; 0xed8 <get_data>
    142e:	80 93 23 15 	sts	0x1523, r24
    1432:	10 92 24 15 	sts	0x1524, r1
    1436:	10 92 1a 15 	sts	0x151A, r1
    143a:	4f c0       	rjmp	.+158    	; 0x14da <__vector_26+0x13e>
    143c:	80 91 23 15 	lds	r24, 0x1523
    1440:	90 91 24 15 	lds	r25, 0x1524
    1444:	85 30       	cpi	r24, 0x05	; 5
    1446:	91 05       	cpc	r25, r1
    1448:	71 f0       	breq	.+28     	; 0x1466 <__vector_26+0xca>
    144a:	24 f4       	brge	.+8      	; 0x1454 <__vector_26+0xb8>
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	09 f0       	breq	.+2      	; 0x1452 <__vector_26+0xb6>
    1450:	44 c0       	rjmp	.+136    	; 0x14da <__vector_26+0x13e>
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <__vector_26+0xc6>
    1454:	86 30       	cpi	r24, 0x06	; 6
    1456:	91 05       	cpc	r25, r1
    1458:	51 f0       	breq	.+20     	; 0x146e <__vector_26+0xd2>
    145a:	49 97       	sbiw	r24, 0x19	; 25
    145c:	09 f0       	breq	.+2      	; 0x1460 <__vector_26+0xc4>
    145e:	3d c0       	rjmp	.+122    	; 0x14da <__vector_26+0x13e>
    1460:	04 c0       	rjmp	.+8      	; 0x146a <__vector_26+0xce>
    1462:	64 dd       	rcall	.-1336   	; 0xf2c <get_control_settings_from_bus>
    1464:	3a c0       	rjmp	.+116    	; 0x14da <__vector_26+0x13e>
    1466:	73 dd       	rcall	.-1306   	; 0xf4e <get_autonom_settings_from_bus>
    1468:	38 c0       	rjmp	.+112    	; 0x14da <__vector_26+0x13e>
    146a:	75 dd       	rcall	.-1302   	; 0xf56 <get_char_from_bus>
    146c:	36 c0       	rjmp	.+108    	; 0x14da <__vector_26+0x13e>
    146e:	c0 91 18 15 	lds	r28, 0x1518
    1472:	d0 91 19 15 	lds	r29, 0x1519
    1476:	30 dd       	rcall	.-1440   	; 0xed8 <get_data>
    1478:	c7 5f       	subi	r28, 0xF7	; 247
    147a:	db 4e       	sbci	r29, 0xEB	; 235
    147c:	88 83       	st	Y, r24
    147e:	80 91 18 15 	lds	r24, 0x1518
    1482:	90 91 19 15 	lds	r25, 0x1519
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	90 93 19 15 	sts	0x1519, r25
    148c:	80 93 18 15 	sts	0x1518, r24
    1490:	24 c0       	rjmp	.+72     	; 0x14da <__vector_26+0x13e>
    1492:	80 91 b9 00 	lds	r24, 0x00B9
    1496:	88 7f       	andi	r24, 0xF8	; 248
    1498:	80 39       	cpi	r24, 0x90	; 144
    149a:	11 f4       	brne	.+4      	; 0x14a0 <__vector_26+0x104>
    149c:	76 dd       	rcall	.-1300   	; 0xf8a <get_sensor_from_bus>
    149e:	1d c0       	rjmp	.+58     	; 0x14da <__vector_26+0x13e>
    14a0:	80 91 b9 00 	lds	r24, 0x00B9
    14a4:	88 7f       	andi	r24, 0xF8	; 248
    14a6:	80 3a       	cpi	r24, 0xA0	; 160
    14a8:	c1 f4       	brne	.+48     	; 0x14da <__vector_26+0x13e>
    14aa:	25 dd       	rcall	.-1462   	; 0xef6 <stop_twi>
    14ac:	80 91 23 15 	lds	r24, 0x1523
    14b0:	90 91 24 15 	lds	r25, 0x1524
    14b4:	85 30       	cpi	r24, 0x05	; 5
    14b6:	91 05       	cpc	r25, r1
    14b8:	49 f0       	breq	.+18     	; 0x14cc <__vector_26+0x130>
    14ba:	89 31       	cpi	r24, 0x19	; 25
    14bc:	91 05       	cpc	r25, r1
    14be:	51 f0       	breq	.+20     	; 0x14d4 <__vector_26+0x138>
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	59 f4       	brne	.+22     	; 0x14da <__vector_26+0x13e>
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 93 c2 13 	sts	0x13C2, r24
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <__vector_26+0x13e>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	80 93 c1 13 	sts	0x13C1, r24
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <__vector_26+0x13e>
    14d4:	81 e1       	ldi	r24, 0x11	; 17
    14d6:	94 e1       	ldi	r25, 0x14	; 20
    14d8:	29 df       	rcall	.-430    	; 0x132c <write_to_TwiFIFO>
    14da:	22 dd       	rcall	.-1468   	; 0xf20 <reset_TWI>
    14dc:	d5 c0       	rjmp	.+426    	; 0x1688 <__vector_26+0x2ec>
    14de:	80 91 b9 00 	lds	r24, 0x00B9
    14e2:	88 7f       	andi	r24, 0xF8	; 248
    14e4:	80 36       	cpi	r24, 0x60	; 96
    14e6:	29 f0       	breq	.+10     	; 0x14f2 <__vector_26+0x156>
    14e8:	80 91 b9 00 	lds	r24, 0x00B9
    14ec:	88 7f       	andi	r24, 0xF8	; 248
    14ee:	88 36       	cpi	r24, 0x68	; 104
    14f0:	21 f4       	brne	.+8      	; 0x14fa <__vector_26+0x15e>
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	80 93 1a 15 	sts	0x151A, r24
    14f8:	38 c0       	rjmp	.+112    	; 0x156a <__vector_26+0x1ce>
    14fa:	80 91 b9 00 	lds	r24, 0x00B9
    14fe:	88 7f       	andi	r24, 0xF8	; 248
    1500:	80 38       	cpi	r24, 0x80	; 128
    1502:	e1 f4       	brne	.+56     	; 0x153c <__vector_26+0x1a0>
    1504:	80 91 1a 15 	lds	r24, 0x151A
    1508:	88 23       	and	r24, r24
    150a:	41 f0       	breq	.+16     	; 0x151c <__vector_26+0x180>
    150c:	e5 dc       	rcall	.-1590   	; 0xed8 <get_data>
    150e:	80 93 23 15 	sts	0x1523, r24
    1512:	10 92 24 15 	sts	0x1524, r1
    1516:	10 92 1a 15 	sts	0x151A, r1
    151a:	27 c0       	rjmp	.+78     	; 0x156a <__vector_26+0x1ce>
    151c:	80 91 23 15 	lds	r24, 0x1523
    1520:	90 91 24 15 	lds	r25, 0x1524
    1524:	82 30       	cpi	r24, 0x02	; 2
    1526:	91 05       	cpc	r25, r1
    1528:	19 f0       	breq	.+6      	; 0x1530 <__vector_26+0x194>
    152a:	49 97       	sbiw	r24, 0x19	; 25
    152c:	f1 f4       	brne	.+60     	; 0x156a <__vector_26+0x1ce>
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <__vector_26+0x19c>
    1530:	d3 dc       	rcall	.-1626   	; 0xed8 <get_data>
    1532:	80 93 22 15 	sts	0x1522, r24
    1536:	19 c0       	rjmp	.+50     	; 0x156a <__vector_26+0x1ce>
    1538:	0e dd       	rcall	.-1508   	; 0xf56 <get_char_from_bus>
    153a:	17 c0       	rjmp	.+46     	; 0x156a <__vector_26+0x1ce>
    153c:	80 91 b9 00 	lds	r24, 0x00B9
    1540:	88 7f       	andi	r24, 0xF8	; 248
    1542:	80 3a       	cpi	r24, 0xA0	; 160
    1544:	91 f4       	brne	.+36     	; 0x156a <__vector_26+0x1ce>
    1546:	d7 dc       	rcall	.-1618   	; 0xef6 <stop_twi>
    1548:	80 91 23 15 	lds	r24, 0x1523
    154c:	90 91 24 15 	lds	r25, 0x1524
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	91 05       	cpc	r25, r1
    1554:	19 f0       	breq	.+6      	; 0x155c <__vector_26+0x1c0>
    1556:	49 97       	sbiw	r24, 0x19	; 25
    1558:	41 f4       	brne	.+16     	; 0x156a <__vector_26+0x1ce>
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <__vector_26+0x1c8>
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	80 93 bf 13 	sts	0x13BF, r24
    1562:	03 c0       	rjmp	.+6      	; 0x156a <__vector_26+0x1ce>
    1564:	81 e1       	ldi	r24, 0x11	; 17
    1566:	94 e1       	ldi	r25, 0x14	; 20
    1568:	e1 de       	rcall	.-574    	; 0x132c <write_to_TwiFIFO>
    156a:	da dc       	rcall	.-1612   	; 0xf20 <reset_TWI>
    156c:	8d c0       	rjmp	.+282    	; 0x1688 <__vector_26+0x2ec>
    156e:	80 91 b9 00 	lds	r24, 0x00B9
    1572:	88 7f       	andi	r24, 0xF8	; 248
    1574:	80 36       	cpi	r24, 0x60	; 96
    1576:	29 f0       	breq	.+10     	; 0x1582 <__vector_26+0x1e6>
    1578:	80 91 b9 00 	lds	r24, 0x00B9
    157c:	88 7f       	andi	r24, 0xF8	; 248
    157e:	88 36       	cpi	r24, 0x68	; 104
    1580:	21 f4       	brne	.+8      	; 0x158a <__vector_26+0x1ee>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 93 1a 15 	sts	0x151A, r24
    1588:	7e c0       	rjmp	.+252    	; 0x1686 <__vector_26+0x2ea>
    158a:	80 91 b9 00 	lds	r24, 0x00B9
    158e:	88 7f       	andi	r24, 0xF8	; 248
    1590:	80 37       	cpi	r24, 0x70	; 112
    1592:	29 f0       	breq	.+10     	; 0x159e <__vector_26+0x202>
    1594:	80 91 b9 00 	lds	r24, 0x00B9
    1598:	88 7f       	andi	r24, 0xF8	; 248
    159a:	88 37       	cpi	r24, 0x78	; 120
    159c:	39 f4       	brne	.+14     	; 0x15ac <__vector_26+0x210>
    159e:	8f ef       	ldi	r24, 0xFF	; 255
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	90 93 24 15 	sts	0x1524, r25
    15a6:	80 93 23 15 	sts	0x1523, r24
    15aa:	6d c0       	rjmp	.+218    	; 0x1686 <__vector_26+0x2ea>
    15ac:	80 91 b9 00 	lds	r24, 0x00B9
    15b0:	88 7f       	andi	r24, 0xF8	; 248
    15b2:	80 38       	cpi	r24, 0x80	; 128
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <__vector_26+0x21c>
    15b6:	3a c0       	rjmp	.+116    	; 0x162c <__vector_26+0x290>
    15b8:	80 91 1a 15 	lds	r24, 0x151A
    15bc:	88 23       	and	r24, r24
    15be:	41 f0       	breq	.+16     	; 0x15d0 <__vector_26+0x234>
    15c0:	8b dc       	rcall	.-1770   	; 0xed8 <get_data>
    15c2:	80 93 23 15 	sts	0x1523, r24
    15c6:	10 92 24 15 	sts	0x1524, r1
    15ca:	10 92 1a 15 	sts	0x151A, r1
    15ce:	5b c0       	rjmp	.+182    	; 0x1686 <__vector_26+0x2ea>
    15d0:	80 91 23 15 	lds	r24, 0x1523
    15d4:	90 91 24 15 	lds	r25, 0x1524
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	19 f1       	breq	.+70     	; 0x1624 <__vector_26+0x288>
    15de:	1c f4       	brge	.+6      	; 0x15e6 <__vector_26+0x24a>
    15e0:	89 2b       	or	r24, r25
    15e2:	41 f0       	breq	.+16     	; 0x15f4 <__vector_26+0x258>
    15e4:	50 c0       	rjmp	.+160    	; 0x1686 <__vector_26+0x2ea>
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	91 05       	cpc	r25, r1
    15ea:	b1 f0       	breq	.+44     	; 0x1618 <__vector_26+0x27c>
    15ec:	05 97       	sbiw	r24, 0x05	; 5
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <__vector_26+0x256>
    15f0:	4a c0       	rjmp	.+148    	; 0x1686 <__vector_26+0x2ea>
    15f2:	1a c0       	rjmp	.+52     	; 0x1628 <__vector_26+0x28c>
    15f4:	c0 91 1b 15 	lds	r28, 0x151B
    15f8:	d0 91 1c 15 	lds	r29, 0x151C
    15fc:	6d dc       	rcall	.-1830   	; 0xed8 <get_data>
    15fe:	c3 5f       	subi	r28, 0xF3	; 243
    1600:	db 4e       	sbci	r29, 0xEB	; 235
    1602:	88 83       	st	Y, r24
    1604:	80 91 1b 15 	lds	r24, 0x151B
    1608:	90 91 1c 15 	lds	r25, 0x151C
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	90 93 1c 15 	sts	0x151C, r25
    1612:	80 93 1b 15 	sts	0x151B, r24
    1616:	37 c0       	rjmp	.+110    	; 0x1686 <__vector_26+0x2ea>
    1618:	5f dc       	rcall	.-1858   	; 0xed8 <get_data>
    161a:	80 93 1d 15 	sts	0x151D, r24
    161e:	10 92 1e 15 	sts	0x151E, r1
    1622:	31 c0       	rjmp	.+98     	; 0x1686 <__vector_26+0x2ea>
    1624:	83 dc       	rcall	.-1786   	; 0xf2c <get_control_settings_from_bus>
    1626:	2f c0       	rjmp	.+94     	; 0x1686 <__vector_26+0x2ea>
    1628:	92 dc       	rcall	.-1756   	; 0xf4e <get_autonom_settings_from_bus>
    162a:	2d c0       	rjmp	.+90     	; 0x1686 <__vector_26+0x2ea>
    162c:	80 91 b9 00 	lds	r24, 0x00B9
    1630:	88 7f       	andi	r24, 0xF8	; 248
    1632:	80 39       	cpi	r24, 0x90	; 144
    1634:	11 f4       	brne	.+4      	; 0x163a <__vector_26+0x29e>
    1636:	a9 dc       	rcall	.-1710   	; 0xf8a <get_sensor_from_bus>
    1638:	26 c0       	rjmp	.+76     	; 0x1686 <__vector_26+0x2ea>
    163a:	80 91 b9 00 	lds	r24, 0x00B9
    163e:	88 7f       	andi	r24, 0xF8	; 248
    1640:	80 3a       	cpi	r24, 0xA0	; 160
    1642:	09 f5       	brne	.+66     	; 0x1686 <__vector_26+0x2ea>
    1644:	58 dc       	rcall	.-1872   	; 0xef6 <stop_twi>
    1646:	80 91 23 15 	lds	r24, 0x1523
    164a:	90 91 24 15 	lds	r25, 0x1524
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	91 05       	cpc	r25, r1
    1652:	91 f0       	breq	.+36     	; 0x1678 <__vector_26+0x2dc>
    1654:	1c f4       	brge	.+6      	; 0x165c <__vector_26+0x2c0>
    1656:	89 2b       	or	r24, r25
    1658:	39 f0       	breq	.+14     	; 0x1668 <__vector_26+0x2cc>
    165a:	15 c0       	rjmp	.+42     	; 0x1686 <__vector_26+0x2ea>
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	91 05       	cpc	r25, r1
    1660:	39 f0       	breq	.+14     	; 0x1670 <__vector_26+0x2d4>
    1662:	05 97       	sbiw	r24, 0x05	; 5
    1664:	81 f4       	brne	.+32     	; 0x1686 <__vector_26+0x2ea>
    1666:	0c c0       	rjmp	.+24     	; 0x1680 <__vector_26+0x2e4>
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 c3 13 	sts	0x13C3, r24
    166e:	0b c0       	rjmp	.+22     	; 0x1686 <__vector_26+0x2ea>
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	80 93 c0 13 	sts	0x13C0, r24
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <__vector_26+0x2ea>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 c2 13 	sts	0x13C2, r24
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <__vector_26+0x2ea>
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	80 93 c1 13 	sts	0x13C1, r24
    1686:	4c dc       	rcall	.-1896   	; 0xf20 <reset_TWI>
    1688:	ff 91       	pop	r31
    168a:	ef 91       	pop	r30
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	7f 91       	pop	r23
    169a:	6f 91       	pop	r22
    169c:	5f 91       	pop	r21
    169e:	4f 91       	pop	r20
    16a0:	3f 91       	pop	r19
    16a2:	2f 91       	pop	r18
    16a4:	0f 90       	pop	r0
    16a6:	0b be       	out	0x3b, r0	; 59
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_send_packet(gRxBuffer[0], gRxBuffer[1]);
    16b2:	10 92 c5 00 	sts	0x00C5, r1
    16b6:	87 e0       	ldi	r24, 0x07	; 7
    16b8:	80 93 c4 00 	sts	0x00C4, r24
    16bc:	88 e9       	ldi	r24, 0x98	; 152
    16be:	80 93 c1 00 	sts	0x00C1, r24
    16c2:	86 e0       	ldi	r24, 0x06	; 6
    16c4:	80 93 c2 00 	sts	0x00C2, r24
    16c8:	08 95       	ret

000016ca <USART_set_twi_message_destination>:
    16ca:	90 93 1b 11 	sts	0x111B, r25
    16ce:	80 93 1a 11 	sts	0x111A, r24
    16d2:	08 95       	ret

000016d4 <USART_check_tx_ready>:
    16d4:	80 91 c0 00 	lds	r24, 0x00C0
    16d8:	80 72       	andi	r24, 0x20	; 32
    16da:	08 95       	ret

000016dc <USART_write_byte>:
    16dc:	cf 93       	push	r28
    16de:	c8 2f       	mov	r28, r24
    16e0:	f9 df       	rcall	.-14     	; 0x16d4 <USART_check_tx_ready>
    16e2:	88 23       	and	r24, r24
    16e4:	e9 f3       	breq	.-6      	; 0x16e0 <USART_write_byte+0x4>
    16e6:	c0 93 c6 00 	sts	0x00C6, r28
    16ea:	cf 91       	pop	r28
    16ec:	08 95       	ret

000016ee <USART_crc16>:
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	66 23       	and	r22, r22
    1700:	09 f4       	brne	.+2      	; 0x1704 <USART_crc16+0x16>
    1702:	3e c0       	rjmp	.+124    	; 0x1780 <USART_crc16+0x92>
    1704:	06 2f       	mov	r16, r22
    1706:	10 e0       	ldi	r17, 0x00	; 0
    1708:	4f ef       	ldi	r20, 0xFF	; 255
    170a:	5f ef       	ldi	r21, 0xFF	; 255
    170c:	ee ef       	ldi	r30, 0xFE	; 254
    170e:	ff ef       	ldi	r31, 0xFF	; 255
    1710:	c6 2e       	mov	r12, r22
    1712:	d1 2c       	mov	r13, r1
    1714:	e8 2e       	mov	r14, r24
    1716:	f1 2c       	mov	r15, r1
    1718:	c8 e0       	ldi	r28, 0x08	; 8
    171a:	d0 e0       	ldi	r29, 0x00	; 0
    171c:	ee 3f       	cpi	r30, 0xFE	; 254
    171e:	6f ef       	ldi	r22, 0xFF	; 255
    1720:	f6 07       	cpc	r31, r22
    1722:	19 f4       	brne	.+6      	; 0x172a <USART_crc16+0x3c>
    1724:	8e 2d       	mov	r24, r14
    1726:	9f 2d       	mov	r25, r15
    1728:	30 c0       	rjmp	.+96     	; 0x178a <USART_crc16+0x9c>
    172a:	ef 3f       	cpi	r30, 0xFF	; 255
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	f8 07       	cpc	r31, r24
    1730:	19 f4       	brne	.+6      	; 0x1738 <USART_crc16+0x4a>
    1732:	8c 2d       	mov	r24, r12
    1734:	9d 2d       	mov	r25, r13
    1736:	29 c0       	rjmp	.+82     	; 0x178a <USART_crc16+0x9c>
    1738:	df 01       	movw	r26, r30
    173a:	a4 5c       	subi	r26, 0xC4	; 196
    173c:	b8 4e       	sbci	r27, 0xE8	; 232
    173e:	8c 91       	ld	r24, X
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	23 c0       	rjmp	.+70     	; 0x178a <USART_crc16+0x9c>
    1744:	ba 01       	movw	r22, r20
    1746:	68 27       	eor	r22, r24
    1748:	79 27       	eor	r23, r25
    174a:	60 ff       	sbrs	r22, 0
    174c:	07 c0       	rjmp	.+14     	; 0x175c <USART_crc16+0x6e>
    174e:	56 95       	lsr	r21
    1750:	47 95       	ror	r20
    1752:	68 e0       	ldi	r22, 0x08	; 8
    1754:	46 27       	eor	r20, r22
    1756:	64 e8       	ldi	r22, 0x84	; 132
    1758:	56 27       	eor	r21, r22
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <USART_crc16+0x72>
    175c:	56 95       	lsr	r21
    175e:	47 95       	ror	r20
    1760:	96 95       	lsr	r25
    1762:	87 95       	ror	r24
    1764:	21 50       	subi	r18, 0x01	; 1
    1766:	31 09       	sbc	r19, r1
    1768:	69 f7       	brne	.-38     	; 0x1744 <USART_crc16+0x56>
    176a:	31 96       	adiw	r30, 0x01	; 1
    176c:	e0 17       	cp	r30, r16
    176e:	f1 07       	cpc	r31, r17
    1770:	a9 f6       	brne	.-86     	; 0x171c <USART_crc16+0x2e>
    1772:	9a 01       	movw	r18, r20
    1774:	20 95       	com	r18
    1776:	30 95       	com	r19
    1778:	32 27       	eor	r19, r18
    177a:	23 27       	eor	r18, r19
    177c:	32 27       	eor	r19, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <USART_crc16+0x96>
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	82 2f       	mov	r24, r18
    1786:	93 2f       	mov	r25, r19
    1788:	02 c0       	rjmp	.+4      	; 0x178e <USART_crc16+0xa0>
    178a:	9e 01       	movw	r18, r28
    178c:	db cf       	rjmp	.-74     	; 0x1744 <USART_crc16+0x56>
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	df 90       	pop	r13
    179c:	cf 90       	pop	r12
    179e:	08 95       	ret

000017a0 <USART_send_packet>:
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	9e e7       	ldi	r25, 0x7E	; 126
    17aa:	90 93 3b 18 	sts	0x183B, r25
    17ae:	80 93 3c 18 	sts	0x183C, r24
    17b2:	60 93 3d 18 	sts	0x183D, r22
    17b6:	26 2f       	mov	r18, r22
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	12 16       	cp	r1, r18
    17bc:	13 06       	cpc	r1, r19
    17be:	4c f5       	brge	.+82     	; 0x1812 <USART_send_packet+0x72>
    17c0:	ec e3       	ldi	r30, 0x3C	; 60
    17c2:	f7 e1       	ldi	r31, 0x17	; 23
    17c4:	03 e0       	ldi	r16, 0x03	; 3
    17c6:	10 e0       	ldi	r17, 0x00	; 0
    17c8:	c0 e0       	ldi	r28, 0x00	; 0
    17ca:	d0 e0       	ldi	r29, 0x00	; 0
    17cc:	7d e7       	ldi	r23, 0x7D	; 125
    17ce:	50 e2       	ldi	r21, 0x20	; 32
    17d0:	90 81       	ld	r25, Z
    17d2:	49 2f       	mov	r20, r25
    17d4:	4d 57       	subi	r20, 0x7D	; 125
    17d6:	42 30       	cpi	r20, 0x02	; 2
    17d8:	80 f4       	brcc	.+32     	; 0x17fa <USART_send_packet+0x5a>
    17da:	d8 01       	movw	r26, r16
    17dc:	a5 5c       	subi	r26, 0xC5	; 197
    17de:	b7 4e       	sbci	r27, 0xE7	; 231
    17e0:	ac 0f       	add	r26, r28
    17e2:	bd 1f       	adc	r27, r29
    17e4:	7c 93       	st	X, r23
    17e6:	0f 5f       	subi	r16, 0xFF	; 255
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	d8 01       	movw	r26, r16
    17ec:	a5 5c       	subi	r26, 0xC5	; 197
    17ee:	b7 4e       	sbci	r27, 0xE7	; 231
    17f0:	ac 0f       	add	r26, r28
    17f2:	bd 1f       	adc	r27, r29
    17f4:	95 27       	eor	r25, r21
    17f6:	9c 93       	st	X, r25
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <USART_send_packet+0x66>
    17fa:	d8 01       	movw	r26, r16
    17fc:	a5 5c       	subi	r26, 0xC5	; 197
    17fe:	b7 4e       	sbci	r27, 0xE7	; 231
    1800:	ac 0f       	add	r26, r28
    1802:	bd 1f       	adc	r27, r29
    1804:	9c 93       	st	X, r25
    1806:	21 96       	adiw	r28, 0x01	; 1
    1808:	31 96       	adiw	r30, 0x01	; 1
    180a:	c2 17       	cp	r28, r18
    180c:	d3 07       	cpc	r29, r19
    180e:	01 f7       	brne	.-64     	; 0x17d0 <USART_send_packet+0x30>
    1810:	04 c0       	rjmp	.+8      	; 0x181a <USART_send_packet+0x7a>
    1812:	03 e0       	ldi	r16, 0x03	; 3
    1814:	10 e0       	ldi	r17, 0x00	; 0
    1816:	c0 e0       	ldi	r28, 0x00	; 0
    1818:	d0 e0       	ldi	r29, 0x00	; 0
    181a:	69 df       	rcall	.-302    	; 0x16ee <USART_crc16>
    181c:	f8 01       	movw	r30, r16
    181e:	e5 5c       	subi	r30, 0xC5	; 197
    1820:	f7 4e       	sbci	r31, 0xE7	; 231
    1822:	ec 0f       	add	r30, r28
    1824:	fd 1f       	adc	r31, r29
    1826:	90 83       	st	Z, r25
    1828:	81 83       	std	Z+1, r24	; 0x01
    182a:	22 96       	adiw	r28, 0x02	; 2
    182c:	0c 0f       	add	r16, r28
    182e:	1d 1f       	adc	r17, r29
    1830:	f8 01       	movw	r30, r16
    1832:	e5 5c       	subi	r30, 0xC5	; 197
    1834:	f7 4e       	sbci	r31, 0xE7	; 231
    1836:	8e e7       	ldi	r24, 0x7E	; 126
    1838:	80 83       	st	Z, r24
    183a:	c8 01       	movw	r24, r16
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	18 16       	cp	r1, r24
    1840:	19 06       	cpc	r1, r25
    1842:	4c f4       	brge	.+18     	; 0x1856 <USART_send_packet+0xb6>
    1844:	cb e3       	ldi	r28, 0x3B	; 59
    1846:	d8 e1       	ldi	r29, 0x18	; 24
    1848:	04 5c       	subi	r16, 0xC4	; 196
    184a:	17 4e       	sbci	r17, 0xE7	; 231
    184c:	89 91       	ld	r24, Y+
    184e:	46 df       	rcall	.-372    	; 0x16dc <USART_write_byte>
    1850:	c0 17       	cp	r28, r16
    1852:	d1 07       	cpc	r29, r17
    1854:	d9 f7       	brne	.-10     	; 0x184c <USART_send_packet+0xac>
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	08 95       	ret

00001860 <USART_send_command>:
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	26 dd       	rcall	.-1460   	; 0x12b2 <TWI_get_command>
    1866:	80 93 3c 17 	sts	0x173C, r24
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	21 dd       	rcall	.-1470   	; 0x12b2 <TWI_get_command>
    1870:	80 93 3d 17 	sts	0x173D, r24
    1874:	82 e0       	ldi	r24, 0x02	; 2
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	1c dd       	rcall	.-1480   	; 0x12b2 <TWI_get_command>
    187a:	80 93 3e 17 	sts	0x173E, r24
    187e:	63 e0       	ldi	r22, 0x03	; 3
    1880:	83 e4       	ldi	r24, 0x43	; 67
    1882:	8e cf       	rjmp	.-228    	; 0x17a0 <USART_send_packet>

00001884 <USART_send_elevation>:
    1884:	28 dd       	rcall	.-1456   	; 0x12d6 <TWI_get_elevation>
    1886:	80 93 3c 17 	sts	0x173C, r24
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	85 e4       	ldi	r24, 0x45	; 69
    188e:	88 cf       	rjmp	.-240    	; 0x17a0 <USART_send_packet>

00001890 <USART_send_turn>:
    1890:	90 93 3c 17 	sts	0x173C, r25
    1894:	80 93 3d 17 	sts	0x173D, r24
    1898:	60 93 3e 17 	sts	0x173E, r22
    189c:	63 e0       	ldi	r22, 0x03	; 3
    189e:	84 e5       	ldi	r24, 0x54	; 84
    18a0:	7f cf       	rjmp	.-258    	; 0x17a0 <USART_send_packet>

000018a2 <USART_send_climb>:
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	88 e4       	ldi	r24, 0x48	; 72
    18a6:	7c cf       	rjmp	.-264    	; 0x17a0 <USART_send_packet>

000018a8 <USART_decode_message_rx_fifo>:
    18a8:	8f 92       	push	r8
    18aa:	9f 92       	push	r9
    18ac:	af 92       	push	r10
    18ae:	bf 92       	push	r11
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	ad b6       	in	r10, 0x3d	; 61
    18c6:	be b6       	in	r11, 0x3e	; 62
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	80 91 12 01 	lds	r24, 0x0112
    18d0:	90 91 13 01 	lds	r25, 0x0113
    18d4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    18d8:	88 23       	and	r24, r24
    18da:	31 f0       	breq	.+12     	; 0x18e8 <USART_decode_message_rx_fifo+0x40>
    18dc:	66 e0       	ldi	r22, 0x06	; 6
    18de:	72 e1       	ldi	r23, 0x12	; 18
    18e0:	80 e4       	ldi	r24, 0x40	; 64
    18e2:	1b dc       	rcall	.-1994   	; 0x111a <TWI_send_string>
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	45 c0       	rjmp	.+138    	; 0x1972 <USART_decode_message_rx_fifo+0xca>
    18e8:	c0 90 00 00 	lds	r12, 0x0000
    18ec:	d1 2c       	mov	r13, r1
    18ee:	96 01       	movw	r18, r12
    18f0:	21 50       	subi	r18, 0x01	; 1
    18f2:	31 09       	sbc	r19, r1
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	c1 14       	cp	r12, r1
    18fa:	d1 04       	cpc	r13, r1
    18fc:	11 f0       	breq	.+4      	; 0x1902 <USART_decode_message_rx_fifo+0x5a>
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	82 0f       	add	r24, r18
    1904:	93 1f       	adc	r25, r19
    1906:	2d b7       	in	r18, 0x3d	; 61
    1908:	3e b7       	in	r19, 0x3e	; 62
    190a:	28 1b       	sub	r18, r24
    190c:	39 0b       	sbc	r19, r25
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	3e bf       	out	0x3e, r19	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	2d bf       	out	0x3d, r18	; 61
    1918:	8d b7       	in	r24, 0x3d	; 61
    191a:	9e b7       	in	r25, 0x3e	; 62
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	88 2e       	mov	r8, r24
    1920:	99 2e       	mov	r9, r25
    1922:	1c 14       	cp	r1, r12
    1924:	1d 04       	cpc	r1, r13
    1926:	f4 f4       	brge	.+60     	; 0x1964 <USART_decode_message_rx_fifo+0xbc>
    1928:	e8 2e       	mov	r14, r24
    192a:	f9 2e       	mov	r15, r25
    192c:	00 e0       	ldi	r16, 0x00	; 0
    192e:	10 e0       	ldi	r17, 0x00	; 0
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	80 91 12 01 	lds	r24, 0x0112
    1938:	90 91 13 01 	lds	r25, 0x0113
    193c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1940:	88 23       	and	r24, r24
    1942:	31 f0       	breq	.+12     	; 0x1950 <USART_decode_message_rx_fifo+0xa8>
    1944:	68 e2       	ldi	r22, 0x28	; 40
    1946:	72 e1       	ldi	r23, 0x12	; 18
    1948:	80 e4       	ldi	r24, 0x40	; 64
    194a:	e7 db       	rcall	.-2098   	; 0x111a <TWI_send_string>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	11 c0       	rjmp	.+34     	; 0x1972 <USART_decode_message_rx_fifo+0xca>
    1950:	80 91 00 00 	lds	r24, 0x0000
    1954:	f7 01       	movw	r30, r14
    1956:	81 93       	st	Z+, r24
    1958:	7f 01       	movw	r14, r30
    195a:	0f 5f       	subi	r16, 0xFF	; 255
    195c:	1f 4f       	sbci	r17, 0xFF	; 255
    195e:	0c 15       	cp	r16, r12
    1960:	1d 05       	cpc	r17, r13
    1962:	34 f3       	brlt	.-52     	; 0x1930 <USART_decode_message_rx_fifo+0x88>
    1964:	a6 01       	movw	r20, r12
    1966:	68 2d       	mov	r22, r8
    1968:	79 2d       	mov	r23, r9
    196a:	80 91 1a 11 	lds	r24, 0x111A
    196e:	1b dc       	rcall	.-1994   	; 0x11a6 <TWI_send_string_fixed_length>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	be be       	out	0x3e, r11	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	ad be       	out	0x3d, r10	; 61
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	bf 90       	pop	r11
    198e:	af 90       	pop	r10
    1990:	9f 90       	pop	r9
    1992:	8f 90       	pop	r8
    1994:	08 95       	ret

00001996 <USART_decode_gyro_rx_fifo>:
    1996:	af 92       	push	r10
    1998:	bf 92       	push	r11
    199a:	cf 92       	push	r12
    199c:	df 92       	push	r13
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <USART_decode_gyro_rx_fifo+0x16>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <USART_decode_gyro_rx_fifo+0x18>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	80 93 d1 13 	sts	0x13D1, r24
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	80 91 12 01 	lds	r24, 0x0112
    19c0:	90 91 13 01 	lds	r25, 0x0113
    19c4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    19c8:	88 23       	and	r24, r24
    19ca:	31 f0       	breq	.+12     	; 0x19d8 <USART_decode_gyro_rx_fifo+0x42>
    19cc:	6b e4       	ldi	r22, 0x4B	; 75
    19ce:	72 e1       	ldi	r23, 0x12	; 18
    19d0:	80 e4       	ldi	r24, 0x40	; 64
    19d2:	a3 db       	rcall	.-2234   	; 0x111a <TWI_send_string>
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	73 c0       	rjmp	.+230    	; 0x1abe <USART_decode_gyro_rx_fifo+0x128>
    19d8:	80 91 00 00 	lds	r24, 0x0000
    19dc:	8c 30       	cpi	r24, 0x0C	; 12
    19de:	09 f4       	brne	.+2      	; 0x19e2 <USART_decode_gyro_rx_fifo+0x4c>
    19e0:	53 c0       	rjmp	.+166    	; 0x1a88 <USART_decode_gyro_rx_fifo+0xf2>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	6c c0       	rjmp	.+216    	; 0x1abe <USART_decode_gyro_rx_fifo+0x128>
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	80 91 12 01 	lds	r24, 0x0112
    19ee:	90 91 13 01 	lds	r25, 0x0113
    19f2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    19f6:	88 23       	and	r24, r24
    19f8:	31 f0       	breq	.+12     	; 0x1a06 <USART_decode_gyro_rx_fifo+0x70>
    19fa:	6a e6       	ldi	r22, 0x6A	; 106
    19fc:	72 e1       	ldi	r23, 0x12	; 18
    19fe:	80 e4       	ldi	r24, 0x40	; 64
    1a00:	8c db       	rcall	.-2280   	; 0x111a <TWI_send_string>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	5c c0       	rjmp	.+184    	; 0x1abe <USART_decode_gyro_rx_fifo+0x128>
    1a06:	80 91 00 00 	lds	r24, 0x0000
    1a0a:	f6 01       	movw	r30, r12
    1a0c:	81 93       	st	Z+, r24
    1a0e:	6f 01       	movw	r12, r30
    1a10:	e0 17       	cp	r30, r16
    1a12:	f1 07       	cpc	r31, r17
    1a14:	41 f7       	brne	.-48     	; 0x19e6 <USART_decode_gyro_rx_fifo+0x50>
    1a16:	f1 e0       	ldi	r31, 0x01	; 1
    1a18:	af 16       	cp	r10, r31
    1a1a:	b1 04       	cpc	r11, r1
    1a1c:	99 f0       	breq	.+38     	; 0x1a44 <USART_decode_gyro_rx_fifo+0xae>
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	a8 16       	cp	r10, r24
    1a22:	b1 04       	cpc	r11, r1
    1a24:	e1 f0       	breq	.+56     	; 0x1a5e <USART_decode_gyro_rx_fifo+0xc8>
    1a26:	ab 28       	or	r10, r11
    1a28:	39 f5       	brne	.+78     	; 0x1a78 <USART_decode_gyro_rx_fifo+0xe2>
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2e:	ab 81       	ldd	r26, Y+3	; 0x03
    1a30:	bc 81       	ldd	r27, Y+4	; 0x04
    1a32:	80 93 cd 13 	sts	0x13CD, r24
    1a36:	90 93 ce 13 	sts	0x13CE, r25
    1a3a:	a0 93 cf 13 	sts	0x13CF, r26
    1a3e:	b0 93 d0 13 	sts	0x13D0, r27
    1a42:	1e c0       	rjmp	.+60     	; 0x1a80 <USART_decode_gyro_rx_fifo+0xea>
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	ab 81       	ldd	r26, Y+3	; 0x03
    1a4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1a4c:	80 93 c9 13 	sts	0x13C9, r24
    1a50:	90 93 ca 13 	sts	0x13CA, r25
    1a54:	a0 93 cb 13 	sts	0x13CB, r26
    1a58:	b0 93 cc 13 	sts	0x13CC, r27
    1a5c:	11 c0       	rjmp	.+34     	; 0x1a80 <USART_decode_gyro_rx_fifo+0xea>
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	ab 81       	ldd	r26, Y+3	; 0x03
    1a64:	bc 81       	ldd	r27, Y+4	; 0x04
    1a66:	80 93 c5 13 	sts	0x13C5, r24
    1a6a:	90 93 c6 13 	sts	0x13C6, r25
    1a6e:	a0 93 c7 13 	sts	0x13C7, r26
    1a72:	b0 93 c8 13 	sts	0x13C8, r27
    1a76:	18 c0       	rjmp	.+48     	; 0x1aa8 <USART_decode_gyro_rx_fifo+0x112>
    1a78:	e3 e0       	ldi	r30, 0x03	; 3
    1a7a:	ee 16       	cp	r14, r30
    1a7c:	f1 04       	cpc	r15, r1
    1a7e:	a4 f4       	brge	.+40     	; 0x1aa8 <USART_decode_gyro_rx_fifo+0x112>
    1a80:	ff ef       	ldi	r31, 0xFF	; 255
    1a82:	ef 1a       	sub	r14, r31
    1a84:	ff 0a       	sbc	r15, r31
    1a86:	06 c0       	rjmp	.+12     	; 0x1a94 <USART_decode_gyro_rx_fifo+0xfe>
    1a88:	ee 24       	eor	r14, r14
    1a8a:	e3 94       	inc	r14
    1a8c:	f1 2c       	mov	r15, r1
    1a8e:	8e 01       	movw	r16, r28
    1a90:	0b 5f       	subi	r16, 0xFB	; 251
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	57 01       	movw	r10, r14
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	a8 1a       	sub	r10, r24
    1a9a:	b1 08       	sbc	r11, r1
    1a9c:	cc 24       	eor	r12, r12
    1a9e:	c3 94       	inc	r12
    1aa0:	d1 2c       	mov	r13, r1
    1aa2:	cc 0e       	add	r12, r28
    1aa4:	dd 1e       	adc	r13, r29
    1aa6:	9f cf       	rjmp	.-194    	; 0x19e6 <USART_decode_gyro_rx_fifo+0x50>
    1aa8:	40 91 c5 13 	lds	r20, 0x13C5
    1aac:	50 91 c6 13 	lds	r21, 0x13C6
    1ab0:	60 91 c7 13 	lds	r22, 0x13C7
    1ab4:	70 91 c8 13 	lds	r23, 0x13C8
    1ab8:	80 e8       	ldi	r24, 0x80	; 128
    1aba:	b3 db       	rcall	.-2202   	; 0x1222 <TWI_send_float>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	08 95       	ret

00001adc <USART_decode_command_rx_fifo>:
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	80 91 12 01 	lds	r24, 0x0112
    1ae8:	90 91 13 01 	lds	r25, 0x0113
    1aec:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1af0:	88 23       	and	r24, r24
    1af2:	31 f0       	breq	.+12     	; 0x1b00 <USART_decode_command_rx_fifo+0x24>
    1af4:	6a e8       	ldi	r22, 0x8A	; 138
    1af6:	72 e1       	ldi	r23, 0x12	; 18
    1af8:	80 e4       	ldi	r24, 0x40	; 64
    1afa:	0f db       	rcall	.-2530   	; 0x111a <TWI_send_string>
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	45 c0       	rjmp	.+138    	; 0x1b8a <USART_decode_command_rx_fifo+0xae>
    1b00:	80 91 00 00 	lds	r24, 0x0000
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <USART_decode_command_rx_fifo+0x2e>
    1b08:	3b c0       	rjmp	.+118    	; 0x1b80 <USART_decode_command_rx_fifo+0xa4>
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	80 91 12 01 	lds	r24, 0x0112
    1b12:	90 91 13 01 	lds	r25, 0x0113
    1b16:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1b1a:	88 23       	and	r24, r24
    1b1c:	31 f0       	breq	.+12     	; 0x1b2a <USART_decode_command_rx_fifo+0x4e>
    1b1e:	6c ea       	ldi	r22, 0xAC	; 172
    1b20:	72 e1       	ldi	r23, 0x12	; 18
    1b22:	80 e4       	ldi	r24, 0x40	; 64
    1b24:	fa da       	rcall	.-2572   	; 0x111a <TWI_send_string>
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	30 c0       	rjmp	.+96     	; 0x1b8a <USART_decode_command_rx_fifo+0xae>
    1b2a:	c0 91 00 00 	lds	r28, 0x0000
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	80 91 12 01 	lds	r24, 0x0112
    1b36:	90 91 13 01 	lds	r25, 0x0113
    1b3a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1b3e:	88 23       	and	r24, r24
    1b40:	31 f0       	breq	.+12     	; 0x1b4e <USART_decode_command_rx_fifo+0x72>
    1b42:	64 ed       	ldi	r22, 0xD4	; 212
    1b44:	72 e1       	ldi	r23, 0x12	; 18
    1b46:	80 e4       	ldi	r24, 0x40	; 64
    1b48:	e8 da       	rcall	.-2608   	; 0x111a <TWI_send_string>
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	1e c0       	rjmp	.+60     	; 0x1b8a <USART_decode_command_rx_fifo+0xae>
    1b4e:	d0 91 00 00 	lds	r29, 0x0000
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	80 91 12 01 	lds	r24, 0x0112
    1b5a:	90 91 13 01 	lds	r25, 0x0113
    1b5e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1b62:	88 23       	and	r24, r24
    1b64:	31 f0       	breq	.+12     	; 0x1b72 <USART_decode_command_rx_fifo+0x96>
    1b66:	6b ef       	ldi	r22, 0xFB	; 251
    1b68:	72 e1       	ldi	r23, 0x12	; 18
    1b6a:	80 e4       	ldi	r24, 0x40	; 64
    1b6c:	d6 da       	rcall	.-2644   	; 0x111a <TWI_send_string>
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	0c c0       	rjmp	.+24     	; 0x1b8a <USART_decode_command_rx_fifo+0xae>
    1b72:	40 91 00 00 	lds	r20, 0x0000
    1b76:	6d 2f       	mov	r22, r29
    1b78:	8c 2f       	mov	r24, r28
    1b7a:	87 da       	rcall	.-2802   	; 0x108a <TWI_send_command>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	05 c0       	rjmp	.+10     	; 0x1b8a <USART_decode_command_rx_fifo+0xae>
    1b80:	6f e1       	ldi	r22, 0x1F	; 31
    1b82:	73 e1       	ldi	r23, 0x13	; 19
    1b84:	80 e4       	ldi	r24, 0x40	; 64
    1b86:	c9 da       	rcall	.-2670   	; 0x111a <TWI_send_string>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <USART_DecodeValueFIFO>:
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <USART_DecodeValueFIFO+0xe>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <USART_DecodeValueFIFO+0x10>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	80 91 12 01 	lds	r24, 0x0112
    1bac:	90 91 13 01 	lds	r25, 0x0113
    1bb0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1bb4:	88 23       	and	r24, r24
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <USART_DecodeValueFIFO+0x34>
    1bb8:	66 e4       	ldi	r22, 0x46	; 70
    1bba:	73 e1       	ldi	r23, 0x13	; 19
    1bbc:	80 e4       	ldi	r24, 0x40	; 64
    1bbe:	ad da       	rcall	.-2726   	; 0x111a <TWI_send_string>
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	29 c0       	rjmp	.+82     	; 0x1c16 <USART_DecodeValueFIFO+0x86>
    1bc4:	80 91 00 00 	lds	r24, 0x0000
    1bc8:	84 30       	cpi	r24, 0x04	; 4
    1bca:	11 f5       	brne	.+68     	; 0x1c10 <USART_DecodeValueFIFO+0x80>
    1bcc:	8e 01       	movw	r16, r28
    1bce:	0f 5f       	subi	r16, 0xFF	; 255
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	7e 01       	movw	r14, r28
    1bd4:	85 e0       	ldi	r24, 0x05	; 5
    1bd6:	e8 0e       	add	r14, r24
    1bd8:	f1 1c       	adc	r15, r1
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	80 91 12 01 	lds	r24, 0x0112
    1be2:	90 91 13 01 	lds	r25, 0x0113
    1be6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1bea:	81 11       	cpse	r24, r1
    1bec:	13 c0       	rjmp	.+38     	; 0x1c14 <USART_DecodeValueFIFO+0x84>
    1bee:	80 91 00 00 	lds	r24, 0x0000
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	81 93       	st	Z+, r24
    1bf6:	8f 01       	movw	r16, r30
    1bf8:	ee 15       	cp	r30, r14
    1bfa:	ff 05       	cpc	r31, r15
    1bfc:	71 f7       	brne	.-36     	; 0x1bda <USART_DecodeValueFIFO+0x4a>
    1bfe:	49 81       	ldd	r20, Y+1	; 0x01
    1c00:	5a 81       	ldd	r21, Y+2	; 0x02
    1c02:	6b 81       	ldd	r22, Y+3	; 0x03
    1c04:	7c 81       	ldd	r23, Y+4	; 0x04
    1c06:	80 91 1a 11 	lds	r24, 0x111A
    1c0a:	0b db       	rcall	.-2538   	; 0x1222 <TWI_send_float>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	03 c0       	rjmp	.+6      	; 0x1c16 <USART_DecodeValueFIFO+0x86>
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <USART_DecodeValueFIFO+0x86>
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	08 95       	ret

00001c2c <USART_DecodeReadyFIFO>:
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	80 91 12 01 	lds	r24, 0x0112
    1c34:	90 91 13 01 	lds	r25, 0x0113
    1c38:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1c3c:	88 23       	and	r24, r24
    1c3e:	31 f0       	breq	.+12     	; 0x1c4c <USART_DecodeReadyFIFO+0x20>
    1c40:	6a e8       	ldi	r22, 0x8A	; 138
    1c42:	72 e1       	ldi	r23, 0x12	; 18
    1c44:	80 e4       	ldi	r24, 0x40	; 64
    1c46:	69 da       	rcall	.-2862   	; 0x111a <TWI_send_string>
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	08 95       	ret
    1c4c:	80 91 00 00 	lds	r24, 0x0000
    1c50:	81 11       	cpse	r24, r1
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e <USART_DecodeReadyFIFO+0x32>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	80 93 d4 13 	sts	0x13D4, r24
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	08 95       	ret
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	08 95       	ret

00001c62 <USART_decode_turn_done_rx_fifo>:
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	80 91 12 01 	lds	r24, 0x0112
    1c6a:	90 91 13 01 	lds	r25, 0x0113
    1c6e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1c72:	88 23       	and	r24, r24
    1c74:	31 f0       	breq	.+12     	; 0x1c82 <USART_decode_turn_done_rx_fifo+0x20>
    1c76:	66 e6       	ldi	r22, 0x66	; 102
    1c78:	73 e1       	ldi	r23, 0x13	; 19
    1c7a:	80 e4       	ldi	r24, 0x40	; 64
    1c7c:	4e da       	rcall	.-2916   	; 0x111a <TWI_send_string>
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	08 95       	ret
    1c82:	80 91 00 00 	lds	r24, 0x0000
    1c86:	81 11       	cpse	r24, r1
    1c88:	05 c0       	rjmp	.+10     	; 0x1c94 <USART_decode_turn_done_rx_fifo+0x32>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	80 93 d3 13 	sts	0x13D3, r24
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	08 95       	ret
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	08 95       	ret

00001c98 <USART_decode_climb_done_rx_fifo>:
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	80 91 12 01 	lds	r24, 0x0112
    1ca0:	90 91 13 01 	lds	r25, 0x0113
    1ca4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1ca8:	88 23       	and	r24, r24
    1caa:	31 f0       	breq	.+12     	; 0x1cb8 <USART_decode_climb_done_rx_fifo+0x20>
    1cac:	6a e8       	ldi	r22, 0x8A	; 138
    1cae:	73 e1       	ldi	r23, 0x13	; 19
    1cb0:	80 e4       	ldi	r24, 0x40	; 64
    1cb2:	33 da       	rcall	.-2970   	; 0x111a <TWI_send_string>
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	08 95       	ret
    1cb8:	80 91 00 00 	lds	r24, 0x0000
    1cbc:	81 11       	cpse	r24, r1
    1cbe:	05 c0       	rjmp	.+10     	; 0x1cca <USART_decode_climb_done_rx_fifo+0x32>
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	80 93 d2 13 	sts	0x13D2, r24
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	08 95       	ret
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	08 95       	ret

00001cce <USART_ready>:
    1cce:	80 91 d4 13 	lds	r24, 0x13D4
    1cd2:	88 23       	and	r24, r24
    1cd4:	21 f0       	breq	.+8      	; 0x1cde <USART_ready+0x10>
    1cd6:	10 92 d4 13 	sts	0x13D4, r1
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	08 95       	ret
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	08 95       	ret

00001ce2 <USART_turn_done>:
    1ce2:	80 91 d3 13 	lds	r24, 0x13D3
    1ce6:	88 23       	and	r24, r24
    1ce8:	21 f0       	breq	.+8      	; 0x1cf2 <USART_turn_done+0x10>
    1cea:	10 92 d3 13 	sts	0x13D3, r1
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	08 95       	ret
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	08 95       	ret

00001cf6 <USART_climb_done>:
    1cf6:	80 91 d2 13 	lds	r24, 0x13D2
    1cfa:	88 23       	and	r24, r24
    1cfc:	21 f0       	breq	.+8      	; 0x1d06 <USART_climb_done+0x10>
    1cfe:	10 92 d2 13 	sts	0x13D2, r1
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	08 95       	ret
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	08 95       	ret

00001d0a <USART_decode_rx_fifo>:
    1d0a:	2e c0       	rjmp	.+92     	; 0x1d68 <USART_decode_rx_fifo+0x5e>
    1d0c:	80 91 00 00 	lds	r24, 0x0000
    1d10:	8d 34       	cpi	r24, 0x4D	; 77
    1d12:	79 f0       	breq	.+30     	; 0x1d32 <USART_decode_rx_fifo+0x28>
    1d14:	38 f4       	brcc	.+14     	; 0x1d24 <USART_decode_rx_fifo+0x1a>
    1d16:	87 34       	cpi	r24, 0x47	; 71
    1d18:	e1 f0       	breq	.+56     	; 0x1d52 <USART_decode_rx_fifo+0x48>
    1d1a:	88 34       	cpi	r24, 0x48	; 72
    1d1c:	11 f1       	breq	.+68     	; 0x1d62 <USART_decode_rx_fifo+0x58>
    1d1e:	83 34       	cpi	r24, 0x43	; 67
    1d20:	19 f5       	brne	.+70     	; 0x1d68 <USART_decode_rx_fifo+0x5e>
    1d22:	0b c0       	rjmp	.+22     	; 0x1d3a <USART_decode_rx_fifo+0x30>
    1d24:	84 35       	cpi	r24, 0x54	; 84
    1d26:	c9 f0       	breq	.+50     	; 0x1d5a <USART_decode_rx_fifo+0x50>
    1d28:	86 35       	cpi	r24, 0x56	; 86
    1d2a:	59 f0       	breq	.+22     	; 0x1d42 <USART_decode_rx_fifo+0x38>
    1d2c:	82 35       	cpi	r24, 0x52	; 82
    1d2e:	e1 f4       	brne	.+56     	; 0x1d68 <USART_decode_rx_fifo+0x5e>
    1d30:	0c c0       	rjmp	.+24     	; 0x1d4a <USART_decode_rx_fifo+0x40>
    1d32:	ba dd       	rcall	.-1164   	; 0x18a8 <USART_decode_message_rx_fifo>
    1d34:	88 23       	and	r24, r24
    1d36:	c1 f0       	breq	.+48     	; 0x1d68 <USART_decode_rx_fifo+0x5e>
    1d38:	08 95       	ret
    1d3a:	d0 de       	rcall	.-608    	; 0x1adc <USART_decode_command_rx_fifo>
    1d3c:	88 23       	and	r24, r24
    1d3e:	a1 f0       	breq	.+40     	; 0x1d68 <USART_decode_rx_fifo+0x5e>
    1d40:	08 95       	ret
    1d42:	26 df       	rcall	.-436    	; 0x1b90 <USART_DecodeValueFIFO>
    1d44:	88 23       	and	r24, r24
    1d46:	81 f0       	breq	.+32     	; 0x1d68 <USART_decode_rx_fifo+0x5e>
    1d48:	08 95       	ret
    1d4a:	70 df       	rcall	.-288    	; 0x1c2c <USART_DecodeReadyFIFO>
    1d4c:	88 23       	and	r24, r24
    1d4e:	61 f0       	breq	.+24     	; 0x1d68 <USART_decode_rx_fifo+0x5e>
    1d50:	08 95       	ret
    1d52:	21 de       	rcall	.-958    	; 0x1996 <USART_decode_gyro_rx_fifo>
    1d54:	88 23       	and	r24, r24
    1d56:	41 f0       	breq	.+16     	; 0x1d68 <USART_decode_rx_fifo+0x5e>
    1d58:	08 95       	ret
    1d5a:	83 df       	rcall	.-250    	; 0x1c62 <USART_decode_turn_done_rx_fifo>
    1d5c:	88 23       	and	r24, r24
    1d5e:	21 f0       	breq	.+8      	; 0x1d68 <USART_decode_rx_fifo+0x5e>
    1d60:	08 95       	ret
    1d62:	9a df       	rcall	.-204    	; 0x1c98 <USART_decode_climb_done_rx_fifo>
    1d64:	81 11       	cpse	r24, r1
    1d66:	0a c0       	rjmp	.+20     	; 0x1d7c <USART_decode_rx_fifo+0x72>
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	80 91 12 01 	lds	r24, 0x0112
    1d70:	90 91 13 01 	lds	r25, 0x0113
    1d74:	0e 94 79 02 	call	0x4f2	; 0x4f2 <FifoRead>
    1d78:	88 23       	and	r24, r24
    1d7a:	41 f2       	breq	.-112    	; 0x1d0c <USART_decode_rx_fifo+0x2>
    1d7c:	08 95       	ret

00001d7e <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1d7e:	1f 92       	push	r1
    1d80:	0f 92       	push	r0
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	0f 92       	push	r0
    1d86:	11 24       	eor	r1, r1
    1d88:	0b b6       	in	r0, 0x3b	; 59
    1d8a:	0f 92       	push	r0
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	2f 93       	push	r18
    1d96:	3f 93       	push	r19
    1d98:	4f 93       	push	r20
    1d9a:	5f 93       	push	r21
    1d9c:	6f 93       	push	r22
    1d9e:	7f 93       	push	r23
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	ef 93       	push	r30
    1dae:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1db0:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1db4:	2e 37       	cpi	r18, 0x7E	; 126
    1db6:	09 f0       	breq	.+2      	; 0x1dba <__vector_20+0x3c>
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1dba:	80 91 d7 13 	lds	r24, 0x13D7
    1dbe:	90 91 d8 13 	lds	r25, 0x13D8
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	40 f4       	brcc	.+16     	; 0x1dd8 <__vector_20+0x5a>
    1dc8:	20 91 38 15 	lds	r18, 0x1538
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	2c 5f       	subi	r18, 0xFC	; 252
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	82 17       	cp	r24, r18
    1dd4:	93 07       	cpc	r25, r19
    1dd6:	59 f5       	brne	.+86     	; 0x1e2e <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1dd8:	80 91 d5 13 	lds	r24, 0x13D5
    1ddc:	90 91 d6 13 	lds	r25, 0x13D6
    1de0:	89 2b       	or	r24, r25
    1de2:	21 f0       	breq	.+8      	; 0x1dec <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1de4:	10 92 d6 13 	sts	0x13D6, r1
    1de8:	10 92 d5 13 	sts	0x13D5, r1
    1dec:	07 e3       	ldi	r16, 0x37	; 55
    1dee:	15 e1       	ldi	r17, 0x15	; 21
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1df0:	c0 e0       	ldi	r28, 0x00	; 0
    1df2:	d0 e0       	ldi	r29, 0x00	; 0
    1df4:	0f 2e       	mov	r0, r31
    1df6:	f8 e3       	ldi	r31, 0x38	; 56
    1df8:	ef 2e       	mov	r14, r31
    1dfa:	f5 e1       	ldi	r31, 0x15	; 21
    1dfc:	ff 2e       	mov	r15, r31
    1dfe:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1e00:	f8 01       	movw	r30, r16
    1e02:	61 91       	ld	r22, Z+
    1e04:	8f 01       	movw	r16, r30
    1e06:	80 91 12 01 	lds	r24, 0x0112
    1e0a:	90 91 13 01 	lds	r25, 0x0113
    1e0e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <FifoWrite>
    1e12:	88 23       	and	r24, r24
    1e14:	21 f0       	breq	.+8      	; 0x1e1e <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1e16:	6f ea       	ldi	r22, 0xAF	; 175
    1e18:	73 e1       	ldi	r23, 0x13	; 19
    1e1a:	80 e4       	ldi	r24, 0x40	; 64
    1e1c:	7e d9       	rcall	.-3332   	; 0x111a <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1e1e:	21 96       	adiw	r28, 0x01	; 1
    1e20:	f7 01       	movw	r30, r14
    1e22:	80 81       	ld	r24, Z
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	02 96       	adiw	r24, 0x02	; 2
    1e28:	c8 17       	cp	r28, r24
    1e2a:	d9 07       	cpc	r29, r25
    1e2c:	4c f3       	brlt	.-46     	; 0x1e00 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1e2e:	10 92 d8 13 	sts	0x13D8, r1
    1e32:	10 92 d7 13 	sts	0x13D7, r1
    1e36:	16 c0       	rjmp	.+44     	; 0x1e64 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1e38:	2d 37       	cpi	r18, 0x7D	; 125
    1e3a:	39 f4       	brne	.+14     	; 0x1e4a <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	90 93 d6 13 	sts	0x13D6, r25
    1e44:	80 93 d5 13 	sts	0x13D5, r24
    1e48:	0d c0       	rjmp	.+26     	; 0x1e64 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1e4a:	80 91 d7 13 	lds	r24, 0x13D7
    1e4e:	90 91 d8 13 	lds	r25, 0x13D8
    1e52:	fc 01       	movw	r30, r24
    1e54:	e9 5c       	subi	r30, 0xC9	; 201
    1e56:	fa 4e       	sbci	r31, 0xEA	; 234
    1e58:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	90 93 d8 13 	sts	0x13D8, r25
    1e60:	80 93 d7 13 	sts	0x13D7, r24
	}
	
	
}
    1e64:	ff 91       	pop	r31
    1e66:	ef 91       	pop	r30
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	bf 91       	pop	r27
    1e6e:	af 91       	pop	r26
    1e70:	9f 91       	pop	r25
    1e72:	8f 91       	pop	r24
    1e74:	7f 91       	pop	r23
    1e76:	6f 91       	pop	r22
    1e78:	5f 91       	pop	r21
    1e7a:	4f 91       	pop	r20
    1e7c:	3f 91       	pop	r19
    1e7e:	2f 91       	pop	r18
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	0f 90       	pop	r0
    1e8a:	0b be       	out	0x3b, r0	; 59
    1e8c:	0f 90       	pop	r0
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	0f 90       	pop	r0
    1e92:	1f 90       	pop	r1
    1e94:	18 95       	reti

00001e96 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1e96:	80 93 3c 17 	sts	0x173C, r24
	gTxPayload[1] = rotation;
    1e9a:	60 93 3d 17 	sts	0x173D, r22
	gTxPayload[2] = speed;
    1e9e:	40 93 3e 17 	sts	0x173E, r20
	
	
	USART_send_packet('C', 3);
    1ea2:	63 e0       	ldi	r22, 0x03	; 3
    1ea4:	83 e4       	ldi	r24, 0x43	; 67
    1ea6:	7c cc       	rjmp	.-1800   	; 0x17a0 <USART_send_packet>

00001ea8 <__subsf3>:
    1ea8:	50 58       	subi	r21, 0x80	; 128

00001eaa <__addsf3>:
    1eaa:	bb 27       	eor	r27, r27
    1eac:	aa 27       	eor	r26, r26
    1eae:	0e d0       	rcall	.+28     	; 0x1ecc <__addsf3x>
    1eb0:	ed c1       	rjmp	.+986    	; 0x228c <__fp_round>
    1eb2:	b6 d1       	rcall	.+876    	; 0x2220 <__fp_pscA>
    1eb4:	30 f0       	brcs	.+12     	; 0x1ec2 <__addsf3+0x18>
    1eb6:	bb d1       	rcall	.+886    	; 0x222e <__fp_pscB>
    1eb8:	20 f0       	brcs	.+8      	; 0x1ec2 <__addsf3+0x18>
    1eba:	31 f4       	brne	.+12     	; 0x1ec8 <__addsf3+0x1e>
    1ebc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ebe:	11 f4       	brne	.+4      	; 0x1ec4 <__addsf3+0x1a>
    1ec0:	1e f4       	brtc	.+6      	; 0x1ec8 <__addsf3+0x1e>
    1ec2:	86 c1       	rjmp	.+780    	; 0x21d0 <__fp_nan>
    1ec4:	0e f4       	brtc	.+2      	; 0x1ec8 <__addsf3+0x1e>
    1ec6:	e0 95       	com	r30
    1ec8:	e7 fb       	bst	r30, 7
    1eca:	7c c1       	rjmp	.+760    	; 0x21c4 <__fp_inf>

00001ecc <__addsf3x>:
    1ecc:	e9 2f       	mov	r30, r25
    1ece:	00 d2       	rcall	.+1024   	; 0x22d0 <__fp_split3>
    1ed0:	80 f3       	brcs	.-32     	; 0x1eb2 <__addsf3+0x8>
    1ed2:	ba 17       	cp	r27, r26
    1ed4:	62 07       	cpc	r22, r18
    1ed6:	73 07       	cpc	r23, r19
    1ed8:	84 07       	cpc	r24, r20
    1eda:	95 07       	cpc	r25, r21
    1edc:	18 f0       	brcs	.+6      	; 0x1ee4 <__addsf3x+0x18>
    1ede:	71 f4       	brne	.+28     	; 0x1efc <__addsf3x+0x30>
    1ee0:	9e f5       	brtc	.+102    	; 0x1f48 <__addsf3x+0x7c>
    1ee2:	18 c2       	rjmp	.+1072   	; 0x2314 <__fp_zero>
    1ee4:	0e f4       	brtc	.+2      	; 0x1ee8 <__addsf3x+0x1c>
    1ee6:	e0 95       	com	r30
    1ee8:	0b 2e       	mov	r0, r27
    1eea:	ba 2f       	mov	r27, r26
    1eec:	a0 2d       	mov	r26, r0
    1eee:	0b 01       	movw	r0, r22
    1ef0:	b9 01       	movw	r22, r18
    1ef2:	90 01       	movw	r18, r0
    1ef4:	0c 01       	movw	r0, r24
    1ef6:	ca 01       	movw	r24, r20
    1ef8:	a0 01       	movw	r20, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	ff 27       	eor	r31, r31
    1efe:	59 1b       	sub	r21, r25
    1f00:	99 f0       	breq	.+38     	; 0x1f28 <__addsf3x+0x5c>
    1f02:	59 3f       	cpi	r21, 0xF9	; 249
    1f04:	50 f4       	brcc	.+20     	; 0x1f1a <__addsf3x+0x4e>
    1f06:	50 3e       	cpi	r21, 0xE0	; 224
    1f08:	68 f1       	brcs	.+90     	; 0x1f64 <__addsf3x+0x98>
    1f0a:	1a 16       	cp	r1, r26
    1f0c:	f0 40       	sbci	r31, 0x00	; 0
    1f0e:	a2 2f       	mov	r26, r18
    1f10:	23 2f       	mov	r18, r19
    1f12:	34 2f       	mov	r19, r20
    1f14:	44 27       	eor	r20, r20
    1f16:	58 5f       	subi	r21, 0xF8	; 248
    1f18:	f3 cf       	rjmp	.-26     	; 0x1f00 <__addsf3x+0x34>
    1f1a:	46 95       	lsr	r20
    1f1c:	37 95       	ror	r19
    1f1e:	27 95       	ror	r18
    1f20:	a7 95       	ror	r26
    1f22:	f0 40       	sbci	r31, 0x00	; 0
    1f24:	53 95       	inc	r21
    1f26:	c9 f7       	brne	.-14     	; 0x1f1a <__addsf3x+0x4e>
    1f28:	7e f4       	brtc	.+30     	; 0x1f48 <__addsf3x+0x7c>
    1f2a:	1f 16       	cp	r1, r31
    1f2c:	ba 0b       	sbc	r27, r26
    1f2e:	62 0b       	sbc	r22, r18
    1f30:	73 0b       	sbc	r23, r19
    1f32:	84 0b       	sbc	r24, r20
    1f34:	ba f0       	brmi	.+46     	; 0x1f64 <__addsf3x+0x98>
    1f36:	91 50       	subi	r25, 0x01	; 1
    1f38:	a1 f0       	breq	.+40     	; 0x1f62 <__addsf3x+0x96>
    1f3a:	ff 0f       	add	r31, r31
    1f3c:	bb 1f       	adc	r27, r27
    1f3e:	66 1f       	adc	r22, r22
    1f40:	77 1f       	adc	r23, r23
    1f42:	88 1f       	adc	r24, r24
    1f44:	c2 f7       	brpl	.-16     	; 0x1f36 <__addsf3x+0x6a>
    1f46:	0e c0       	rjmp	.+28     	; 0x1f64 <__addsf3x+0x98>
    1f48:	ba 0f       	add	r27, r26
    1f4a:	62 1f       	adc	r22, r18
    1f4c:	73 1f       	adc	r23, r19
    1f4e:	84 1f       	adc	r24, r20
    1f50:	48 f4       	brcc	.+18     	; 0x1f64 <__addsf3x+0x98>
    1f52:	87 95       	ror	r24
    1f54:	77 95       	ror	r23
    1f56:	67 95       	ror	r22
    1f58:	b7 95       	ror	r27
    1f5a:	f7 95       	ror	r31
    1f5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <__addsf3x+0x96>
    1f60:	b3 cf       	rjmp	.-154    	; 0x1ec8 <__addsf3+0x1e>
    1f62:	93 95       	inc	r25
    1f64:	88 0f       	add	r24, r24
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <__addsf3x+0x9e>
    1f68:	99 27       	eor	r25, r25
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	97 95       	ror	r25
    1f6e:	87 95       	ror	r24
    1f70:	08 95       	ret

00001f72 <atan>:
    1f72:	df 93       	push	r29
    1f74:	dd 27       	eor	r29, r29
    1f76:	b9 2f       	mov	r27, r25
    1f78:	bf 77       	andi	r27, 0x7F	; 127
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	16 16       	cp	r1, r22
    1f80:	17 06       	cpc	r1, r23
    1f82:	48 07       	cpc	r20, r24
    1f84:	5b 07       	cpc	r21, r27
    1f86:	10 f4       	brcc	.+4      	; 0x1f8c <atan+0x1a>
    1f88:	d9 2f       	mov	r29, r25
    1f8a:	cf d1       	rcall	.+926    	; 0x232a <inverse>
    1f8c:	9f 93       	push	r25
    1f8e:	8f 93       	push	r24
    1f90:	7f 93       	push	r23
    1f92:	6f 93       	push	r22
    1f94:	34 d2       	rcall	.+1128   	; 0x23fe <square>
    1f96:	ec e8       	ldi	r30, 0x8C	; 140
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	1d d1       	rcall	.+570    	; 0x21d6 <__fp_powser>
    1f9c:	77 d1       	rcall	.+750    	; 0x228c <__fp_round>
    1f9e:	2f 91       	pop	r18
    1fa0:	3f 91       	pop	r19
    1fa2:	4f 91       	pop	r20
    1fa4:	5f 91       	pop	r21
    1fa6:	d4 d1       	rcall	.+936    	; 0x2350 <__mulsf3x>
    1fa8:	dd 23       	and	r29, r29
    1faa:	49 f0       	breq	.+18     	; 0x1fbe <atan+0x4c>
    1fac:	90 58       	subi	r25, 0x80	; 128
    1fae:	a2 ea       	ldi	r26, 0xA2	; 162
    1fb0:	2a ed       	ldi	r18, 0xDA	; 218
    1fb2:	3f e0       	ldi	r19, 0x0F	; 15
    1fb4:	49 ec       	ldi	r20, 0xC9	; 201
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	d0 78       	andi	r29, 0x80	; 128
    1fba:	5d 27       	eor	r21, r29
    1fbc:	87 df       	rcall	.-242    	; 0x1ecc <__addsf3x>
    1fbe:	df 91       	pop	r29
    1fc0:	65 c1       	rjmp	.+714    	; 0x228c <__fp_round>

00001fc2 <__cmpsf2>:
    1fc2:	dc d0       	rcall	.+440    	; 0x217c <__fp_cmp>
    1fc4:	08 f4       	brcc	.+2      	; 0x1fc8 <__cmpsf2+0x6>
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	08 95       	ret

00001fca <cos>:
    1fca:	39 d1       	rcall	.+626    	; 0x223e <__fp_rempio2>
    1fcc:	e3 95       	inc	r30
    1fce:	6f c1       	rjmp	.+734    	; 0x22ae <__fp_sinus>

00001fd0 <__divsf3>:
    1fd0:	0c d0       	rcall	.+24     	; 0x1fea <__divsf3x>
    1fd2:	5c c1       	rjmp	.+696    	; 0x228c <__fp_round>
    1fd4:	2c d1       	rcall	.+600    	; 0x222e <__fp_pscB>
    1fd6:	40 f0       	brcs	.+16     	; 0x1fe8 <__divsf3+0x18>
    1fd8:	23 d1       	rcall	.+582    	; 0x2220 <__fp_pscA>
    1fda:	30 f0       	brcs	.+12     	; 0x1fe8 <__divsf3+0x18>
    1fdc:	21 f4       	brne	.+8      	; 0x1fe6 <__divsf3+0x16>
    1fde:	5f 3f       	cpi	r21, 0xFF	; 255
    1fe0:	19 f0       	breq	.+6      	; 0x1fe8 <__divsf3+0x18>
    1fe2:	f0 c0       	rjmp	.+480    	; 0x21c4 <__fp_inf>
    1fe4:	51 11       	cpse	r21, r1
    1fe6:	97 c1       	rjmp	.+814    	; 0x2316 <__fp_szero>
    1fe8:	f3 c0       	rjmp	.+486    	; 0x21d0 <__fp_nan>

00001fea <__divsf3x>:
    1fea:	72 d1       	rcall	.+740    	; 0x22d0 <__fp_split3>
    1fec:	98 f3       	brcs	.-26     	; 0x1fd4 <__divsf3+0x4>

00001fee <__divsf3_pse>:
    1fee:	99 23       	and	r25, r25
    1ff0:	c9 f3       	breq	.-14     	; 0x1fe4 <__divsf3+0x14>
    1ff2:	55 23       	and	r21, r21
    1ff4:	b1 f3       	breq	.-20     	; 0x1fe2 <__divsf3+0x12>
    1ff6:	95 1b       	sub	r25, r21
    1ff8:	55 0b       	sbc	r21, r21
    1ffa:	bb 27       	eor	r27, r27
    1ffc:	aa 27       	eor	r26, r26
    1ffe:	62 17       	cp	r22, r18
    2000:	73 07       	cpc	r23, r19
    2002:	84 07       	cpc	r24, r20
    2004:	38 f0       	brcs	.+14     	; 0x2014 <__divsf3_pse+0x26>
    2006:	9f 5f       	subi	r25, 0xFF	; 255
    2008:	5f 4f       	sbci	r21, 0xFF	; 255
    200a:	22 0f       	add	r18, r18
    200c:	33 1f       	adc	r19, r19
    200e:	44 1f       	adc	r20, r20
    2010:	aa 1f       	adc	r26, r26
    2012:	a9 f3       	breq	.-22     	; 0x1ffe <__divsf3_pse+0x10>
    2014:	33 d0       	rcall	.+102    	; 0x207c <__divsf3_pse+0x8e>
    2016:	0e 2e       	mov	r0, r30
    2018:	3a f0       	brmi	.+14     	; 0x2028 <__divsf3_pse+0x3a>
    201a:	e0 e8       	ldi	r30, 0x80	; 128
    201c:	30 d0       	rcall	.+96     	; 0x207e <__divsf3_pse+0x90>
    201e:	91 50       	subi	r25, 0x01	; 1
    2020:	50 40       	sbci	r21, 0x00	; 0
    2022:	e6 95       	lsr	r30
    2024:	00 1c       	adc	r0, r0
    2026:	ca f7       	brpl	.-14     	; 0x201a <__divsf3_pse+0x2c>
    2028:	29 d0       	rcall	.+82     	; 0x207c <__divsf3_pse+0x8e>
    202a:	fe 2f       	mov	r31, r30
    202c:	27 d0       	rcall	.+78     	; 0x207c <__divsf3_pse+0x8e>
    202e:	66 0f       	add	r22, r22
    2030:	77 1f       	adc	r23, r23
    2032:	88 1f       	adc	r24, r24
    2034:	bb 1f       	adc	r27, r27
    2036:	26 17       	cp	r18, r22
    2038:	37 07       	cpc	r19, r23
    203a:	48 07       	cpc	r20, r24
    203c:	ab 07       	cpc	r26, r27
    203e:	b0 e8       	ldi	r27, 0x80	; 128
    2040:	09 f0       	breq	.+2      	; 0x2044 <__divsf3_pse+0x56>
    2042:	bb 0b       	sbc	r27, r27
    2044:	80 2d       	mov	r24, r0
    2046:	bf 01       	movw	r22, r30
    2048:	ff 27       	eor	r31, r31
    204a:	93 58       	subi	r25, 0x83	; 131
    204c:	5f 4f       	sbci	r21, 0xFF	; 255
    204e:	2a f0       	brmi	.+10     	; 0x205a <__divsf3_pse+0x6c>
    2050:	9e 3f       	cpi	r25, 0xFE	; 254
    2052:	51 05       	cpc	r21, r1
    2054:	68 f0       	brcs	.+26     	; 0x2070 <__divsf3_pse+0x82>
    2056:	b6 c0       	rjmp	.+364    	; 0x21c4 <__fp_inf>
    2058:	5e c1       	rjmp	.+700    	; 0x2316 <__fp_szero>
    205a:	5f 3f       	cpi	r21, 0xFF	; 255
    205c:	ec f3       	brlt	.-6      	; 0x2058 <__divsf3_pse+0x6a>
    205e:	98 3e       	cpi	r25, 0xE8	; 232
    2060:	dc f3       	brlt	.-10     	; 0x2058 <__divsf3_pse+0x6a>
    2062:	86 95       	lsr	r24
    2064:	77 95       	ror	r23
    2066:	67 95       	ror	r22
    2068:	b7 95       	ror	r27
    206a:	f7 95       	ror	r31
    206c:	9f 5f       	subi	r25, 0xFF	; 255
    206e:	c9 f7       	brne	.-14     	; 0x2062 <__divsf3_pse+0x74>
    2070:	88 0f       	add	r24, r24
    2072:	91 1d       	adc	r25, r1
    2074:	96 95       	lsr	r25
    2076:	87 95       	ror	r24
    2078:	97 f9       	bld	r25, 7
    207a:	08 95       	ret
    207c:	e1 e0       	ldi	r30, 0x01	; 1
    207e:	66 0f       	add	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	88 1f       	adc	r24, r24
    2084:	bb 1f       	adc	r27, r27
    2086:	62 17       	cp	r22, r18
    2088:	73 07       	cpc	r23, r19
    208a:	84 07       	cpc	r24, r20
    208c:	ba 07       	cpc	r27, r26
    208e:	20 f0       	brcs	.+8      	; 0x2098 <__divsf3_pse+0xaa>
    2090:	62 1b       	sub	r22, r18
    2092:	73 0b       	sbc	r23, r19
    2094:	84 0b       	sbc	r24, r20
    2096:	ba 0b       	sbc	r27, r26
    2098:	ee 1f       	adc	r30, r30
    209a:	88 f7       	brcc	.-30     	; 0x207e <__divsf3_pse+0x90>
    209c:	e0 95       	com	r30
    209e:	08 95       	ret

000020a0 <__fixsfsi>:
    20a0:	04 d0       	rcall	.+8      	; 0x20aa <__fixunssfsi>
    20a2:	68 94       	set
    20a4:	b1 11       	cpse	r27, r1
    20a6:	37 c1       	rjmp	.+622    	; 0x2316 <__fp_szero>
    20a8:	08 95       	ret

000020aa <__fixunssfsi>:
    20aa:	1a d1       	rcall	.+564    	; 0x22e0 <__fp_splitA>
    20ac:	88 f0       	brcs	.+34     	; 0x20d0 <__fixunssfsi+0x26>
    20ae:	9f 57       	subi	r25, 0x7F	; 127
    20b0:	90 f0       	brcs	.+36     	; 0x20d6 <__fixunssfsi+0x2c>
    20b2:	b9 2f       	mov	r27, r25
    20b4:	99 27       	eor	r25, r25
    20b6:	b7 51       	subi	r27, 0x17	; 23
    20b8:	a0 f0       	brcs	.+40     	; 0x20e2 <__fixunssfsi+0x38>
    20ba:	d1 f0       	breq	.+52     	; 0x20f0 <__fixunssfsi+0x46>
    20bc:	66 0f       	add	r22, r22
    20be:	77 1f       	adc	r23, r23
    20c0:	88 1f       	adc	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	1a f0       	brmi	.+6      	; 0x20cc <__fixunssfsi+0x22>
    20c6:	ba 95       	dec	r27
    20c8:	c9 f7       	brne	.-14     	; 0x20bc <__fixunssfsi+0x12>
    20ca:	12 c0       	rjmp	.+36     	; 0x20f0 <__fixunssfsi+0x46>
    20cc:	b1 30       	cpi	r27, 0x01	; 1
    20ce:	81 f0       	breq	.+32     	; 0x20f0 <__fixunssfsi+0x46>
    20d0:	21 d1       	rcall	.+578    	; 0x2314 <__fp_zero>
    20d2:	b1 e0       	ldi	r27, 0x01	; 1
    20d4:	08 95       	ret
    20d6:	1e c1       	rjmp	.+572    	; 0x2314 <__fp_zero>
    20d8:	67 2f       	mov	r22, r23
    20da:	78 2f       	mov	r23, r24
    20dc:	88 27       	eor	r24, r24
    20de:	b8 5f       	subi	r27, 0xF8	; 248
    20e0:	39 f0       	breq	.+14     	; 0x20f0 <__fixunssfsi+0x46>
    20e2:	b9 3f       	cpi	r27, 0xF9	; 249
    20e4:	cc f3       	brlt	.-14     	; 0x20d8 <__fixunssfsi+0x2e>
    20e6:	86 95       	lsr	r24
    20e8:	77 95       	ror	r23
    20ea:	67 95       	ror	r22
    20ec:	b3 95       	inc	r27
    20ee:	d9 f7       	brne	.-10     	; 0x20e6 <__fixunssfsi+0x3c>
    20f0:	3e f4       	brtc	.+14     	; 0x2100 <__fixunssfsi+0x56>
    20f2:	90 95       	com	r25
    20f4:	80 95       	com	r24
    20f6:	70 95       	com	r23
    20f8:	61 95       	neg	r22
    20fa:	7f 4f       	sbci	r23, 0xFF	; 255
    20fc:	8f 4f       	sbci	r24, 0xFF	; 255
    20fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2100:	08 95       	ret

00002102 <__floatunsisf>:
    2102:	e8 94       	clt
    2104:	09 c0       	rjmp	.+18     	; 0x2118 <__floatsisf+0x12>

00002106 <__floatsisf>:
    2106:	97 fb       	bst	r25, 7
    2108:	3e f4       	brtc	.+14     	; 0x2118 <__floatsisf+0x12>
    210a:	90 95       	com	r25
    210c:	80 95       	com	r24
    210e:	70 95       	com	r23
    2110:	61 95       	neg	r22
    2112:	7f 4f       	sbci	r23, 0xFF	; 255
    2114:	8f 4f       	sbci	r24, 0xFF	; 255
    2116:	9f 4f       	sbci	r25, 0xFF	; 255
    2118:	99 23       	and	r25, r25
    211a:	a9 f0       	breq	.+42     	; 0x2146 <__floatsisf+0x40>
    211c:	f9 2f       	mov	r31, r25
    211e:	96 e9       	ldi	r25, 0x96	; 150
    2120:	bb 27       	eor	r27, r27
    2122:	93 95       	inc	r25
    2124:	f6 95       	lsr	r31
    2126:	87 95       	ror	r24
    2128:	77 95       	ror	r23
    212a:	67 95       	ror	r22
    212c:	b7 95       	ror	r27
    212e:	f1 11       	cpse	r31, r1
    2130:	f8 cf       	rjmp	.-16     	; 0x2122 <__floatsisf+0x1c>
    2132:	fa f4       	brpl	.+62     	; 0x2172 <__floatsisf+0x6c>
    2134:	bb 0f       	add	r27, r27
    2136:	11 f4       	brne	.+4      	; 0x213c <__floatsisf+0x36>
    2138:	60 ff       	sbrs	r22, 0
    213a:	1b c0       	rjmp	.+54     	; 0x2172 <__floatsisf+0x6c>
    213c:	6f 5f       	subi	r22, 0xFF	; 255
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	8f 4f       	sbci	r24, 0xFF	; 255
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	16 c0       	rjmp	.+44     	; 0x2172 <__floatsisf+0x6c>
    2146:	88 23       	and	r24, r24
    2148:	11 f0       	breq	.+4      	; 0x214e <__floatsisf+0x48>
    214a:	96 e9       	ldi	r25, 0x96	; 150
    214c:	11 c0       	rjmp	.+34     	; 0x2170 <__floatsisf+0x6a>
    214e:	77 23       	and	r23, r23
    2150:	21 f0       	breq	.+8      	; 0x215a <__floatsisf+0x54>
    2152:	9e e8       	ldi	r25, 0x8E	; 142
    2154:	87 2f       	mov	r24, r23
    2156:	76 2f       	mov	r23, r22
    2158:	05 c0       	rjmp	.+10     	; 0x2164 <__floatsisf+0x5e>
    215a:	66 23       	and	r22, r22
    215c:	71 f0       	breq	.+28     	; 0x217a <__floatsisf+0x74>
    215e:	96 e8       	ldi	r25, 0x86	; 134
    2160:	86 2f       	mov	r24, r22
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	2a f0       	brmi	.+10     	; 0x2172 <__floatsisf+0x6c>
    2168:	9a 95       	dec	r25
    216a:	66 0f       	add	r22, r22
    216c:	77 1f       	adc	r23, r23
    216e:	88 1f       	adc	r24, r24
    2170:	da f7       	brpl	.-10     	; 0x2168 <__floatsisf+0x62>
    2172:	88 0f       	add	r24, r24
    2174:	96 95       	lsr	r25
    2176:	87 95       	ror	r24
    2178:	97 f9       	bld	r25, 7
    217a:	08 95       	ret

0000217c <__fp_cmp>:
    217c:	99 0f       	add	r25, r25
    217e:	00 08       	sbc	r0, r0
    2180:	55 0f       	add	r21, r21
    2182:	aa 0b       	sbc	r26, r26
    2184:	e0 e8       	ldi	r30, 0x80	; 128
    2186:	fe ef       	ldi	r31, 0xFE	; 254
    2188:	16 16       	cp	r1, r22
    218a:	17 06       	cpc	r1, r23
    218c:	e8 07       	cpc	r30, r24
    218e:	f9 07       	cpc	r31, r25
    2190:	c0 f0       	brcs	.+48     	; 0x21c2 <__fp_cmp+0x46>
    2192:	12 16       	cp	r1, r18
    2194:	13 06       	cpc	r1, r19
    2196:	e4 07       	cpc	r30, r20
    2198:	f5 07       	cpc	r31, r21
    219a:	98 f0       	brcs	.+38     	; 0x21c2 <__fp_cmp+0x46>
    219c:	62 1b       	sub	r22, r18
    219e:	73 0b       	sbc	r23, r19
    21a0:	84 0b       	sbc	r24, r20
    21a2:	95 0b       	sbc	r25, r21
    21a4:	39 f4       	brne	.+14     	; 0x21b4 <__fp_cmp+0x38>
    21a6:	0a 26       	eor	r0, r26
    21a8:	61 f0       	breq	.+24     	; 0x21c2 <__fp_cmp+0x46>
    21aa:	23 2b       	or	r18, r19
    21ac:	24 2b       	or	r18, r20
    21ae:	25 2b       	or	r18, r21
    21b0:	21 f4       	brne	.+8      	; 0x21ba <__fp_cmp+0x3e>
    21b2:	08 95       	ret
    21b4:	0a 26       	eor	r0, r26
    21b6:	09 f4       	brne	.+2      	; 0x21ba <__fp_cmp+0x3e>
    21b8:	a1 40       	sbci	r26, 0x01	; 1
    21ba:	a6 95       	lsr	r26
    21bc:	8f ef       	ldi	r24, 0xFF	; 255
    21be:	81 1d       	adc	r24, r1
    21c0:	81 1d       	adc	r24, r1
    21c2:	08 95       	ret

000021c4 <__fp_inf>:
    21c4:	97 f9       	bld	r25, 7
    21c6:	9f 67       	ori	r25, 0x7F	; 127
    21c8:	80 e8       	ldi	r24, 0x80	; 128
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	08 95       	ret

000021d0 <__fp_nan>:
    21d0:	9f ef       	ldi	r25, 0xFF	; 255
    21d2:	80 ec       	ldi	r24, 0xC0	; 192
    21d4:	08 95       	ret

000021d6 <__fp_powser>:
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	1f 93       	push	r17
    21dc:	0f 93       	push	r16
    21de:	ff 92       	push	r15
    21e0:	ef 92       	push	r14
    21e2:	df 92       	push	r13
    21e4:	7b 01       	movw	r14, r22
    21e6:	8c 01       	movw	r16, r24
    21e8:	68 94       	set
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <__fp_powser+0x20>
    21ec:	da 2e       	mov	r13, r26
    21ee:	ef 01       	movw	r28, r30
    21f0:	af d0       	rcall	.+350    	; 0x2350 <__mulsf3x>
    21f2:	fe 01       	movw	r30, r28
    21f4:	e8 94       	clt
    21f6:	a5 91       	lpm	r26, Z+
    21f8:	25 91       	lpm	r18, Z+
    21fa:	35 91       	lpm	r19, Z+
    21fc:	45 91       	lpm	r20, Z+
    21fe:	55 91       	lpm	r21, Z+
    2200:	ae f3       	brts	.-22     	; 0x21ec <__fp_powser+0x16>
    2202:	ef 01       	movw	r28, r30
    2204:	63 de       	rcall	.-826    	; 0x1ecc <__addsf3x>
    2206:	fe 01       	movw	r30, r28
    2208:	97 01       	movw	r18, r14
    220a:	a8 01       	movw	r20, r16
    220c:	da 94       	dec	r13
    220e:	79 f7       	brne	.-34     	; 0x21ee <__fp_powser+0x18>
    2210:	df 90       	pop	r13
    2212:	ef 90       	pop	r14
    2214:	ff 90       	pop	r15
    2216:	0f 91       	pop	r16
    2218:	1f 91       	pop	r17
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <__fp_pscA>:
    2220:	00 24       	eor	r0, r0
    2222:	0a 94       	dec	r0
    2224:	16 16       	cp	r1, r22
    2226:	17 06       	cpc	r1, r23
    2228:	18 06       	cpc	r1, r24
    222a:	09 06       	cpc	r0, r25
    222c:	08 95       	ret

0000222e <__fp_pscB>:
    222e:	00 24       	eor	r0, r0
    2230:	0a 94       	dec	r0
    2232:	12 16       	cp	r1, r18
    2234:	13 06       	cpc	r1, r19
    2236:	14 06       	cpc	r1, r20
    2238:	05 06       	cpc	r0, r21
    223a:	08 95       	ret
    223c:	c9 cf       	rjmp	.-110    	; 0x21d0 <__fp_nan>

0000223e <__fp_rempio2>:
    223e:	50 d0       	rcall	.+160    	; 0x22e0 <__fp_splitA>
    2240:	e8 f3       	brcs	.-6      	; 0x223c <__fp_pscB+0xe>
    2242:	e8 94       	clt
    2244:	e0 e0       	ldi	r30, 0x00	; 0
    2246:	bb 27       	eor	r27, r27
    2248:	9f 57       	subi	r25, 0x7F	; 127
    224a:	f0 f0       	brcs	.+60     	; 0x2288 <__fp_rempio2+0x4a>
    224c:	2a ed       	ldi	r18, 0xDA	; 218
    224e:	3f e0       	ldi	r19, 0x0F	; 15
    2250:	49 ec       	ldi	r20, 0xC9	; 201
    2252:	06 c0       	rjmp	.+12     	; 0x2260 <__fp_rempio2+0x22>
    2254:	ee 0f       	add	r30, r30
    2256:	bb 0f       	add	r27, r27
    2258:	66 1f       	adc	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	88 1f       	adc	r24, r24
    225e:	28 f0       	brcs	.+10     	; 0x226a <__fp_rempio2+0x2c>
    2260:	b2 3a       	cpi	r27, 0xA2	; 162
    2262:	62 07       	cpc	r22, r18
    2264:	73 07       	cpc	r23, r19
    2266:	84 07       	cpc	r24, r20
    2268:	28 f0       	brcs	.+10     	; 0x2274 <__fp_rempio2+0x36>
    226a:	b2 5a       	subi	r27, 0xA2	; 162
    226c:	62 0b       	sbc	r22, r18
    226e:	73 0b       	sbc	r23, r19
    2270:	84 0b       	sbc	r24, r20
    2272:	e3 95       	inc	r30
    2274:	9a 95       	dec	r25
    2276:	72 f7       	brpl	.-36     	; 0x2254 <__fp_rempio2+0x16>
    2278:	80 38       	cpi	r24, 0x80	; 128
    227a:	30 f4       	brcc	.+12     	; 0x2288 <__fp_rempio2+0x4a>
    227c:	9a 95       	dec	r25
    227e:	bb 0f       	add	r27, r27
    2280:	66 1f       	adc	r22, r22
    2282:	77 1f       	adc	r23, r23
    2284:	88 1f       	adc	r24, r24
    2286:	d2 f7       	brpl	.-12     	; 0x227c <__fp_rempio2+0x3e>
    2288:	90 48       	sbci	r25, 0x80	; 128
    228a:	be c0       	rjmp	.+380    	; 0x2408 <__fp_mpack_finite>

0000228c <__fp_round>:
    228c:	09 2e       	mov	r0, r25
    228e:	03 94       	inc	r0
    2290:	00 0c       	add	r0, r0
    2292:	11 f4       	brne	.+4      	; 0x2298 <__fp_round+0xc>
    2294:	88 23       	and	r24, r24
    2296:	52 f0       	brmi	.+20     	; 0x22ac <__fp_round+0x20>
    2298:	bb 0f       	add	r27, r27
    229a:	40 f4       	brcc	.+16     	; 0x22ac <__fp_round+0x20>
    229c:	bf 2b       	or	r27, r31
    229e:	11 f4       	brne	.+4      	; 0x22a4 <__fp_round+0x18>
    22a0:	60 ff       	sbrs	r22, 0
    22a2:	04 c0       	rjmp	.+8      	; 0x22ac <__fp_round+0x20>
    22a4:	6f 5f       	subi	r22, 0xFF	; 255
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	8f 4f       	sbci	r24, 0xFF	; 255
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	08 95       	ret

000022ae <__fp_sinus>:
    22ae:	ef 93       	push	r30
    22b0:	e0 ff       	sbrs	r30, 0
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <__fp_sinus+0x12>
    22b4:	a2 ea       	ldi	r26, 0xA2	; 162
    22b6:	2a ed       	ldi	r18, 0xDA	; 218
    22b8:	3f e0       	ldi	r19, 0x0F	; 15
    22ba:	49 ec       	ldi	r20, 0xC9	; 201
    22bc:	5f eb       	ldi	r21, 0xBF	; 191
    22be:	06 de       	rcall	.-1012   	; 0x1ecc <__addsf3x>
    22c0:	e5 df       	rcall	.-54     	; 0x228c <__fp_round>
    22c2:	0f 90       	pop	r0
    22c4:	03 94       	inc	r0
    22c6:	01 fc       	sbrc	r0, 1
    22c8:	90 58       	subi	r25, 0x80	; 128
    22ca:	e9 eb       	ldi	r30, 0xB9	; 185
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	a8 c0       	rjmp	.+336    	; 0x2420 <__fp_powsodd>

000022d0 <__fp_split3>:
    22d0:	57 fd       	sbrc	r21, 7
    22d2:	90 58       	subi	r25, 0x80	; 128
    22d4:	44 0f       	add	r20, r20
    22d6:	55 1f       	adc	r21, r21
    22d8:	59 f0       	breq	.+22     	; 0x22f0 <__fp_splitA+0x10>
    22da:	5f 3f       	cpi	r21, 0xFF	; 255
    22dc:	71 f0       	breq	.+28     	; 0x22fa <__fp_splitA+0x1a>
    22de:	47 95       	ror	r20

000022e0 <__fp_splitA>:
    22e0:	88 0f       	add	r24, r24
    22e2:	97 fb       	bst	r25, 7
    22e4:	99 1f       	adc	r25, r25
    22e6:	61 f0       	breq	.+24     	; 0x2300 <__fp_splitA+0x20>
    22e8:	9f 3f       	cpi	r25, 0xFF	; 255
    22ea:	79 f0       	breq	.+30     	; 0x230a <__fp_splitA+0x2a>
    22ec:	87 95       	ror	r24
    22ee:	08 95       	ret
    22f0:	12 16       	cp	r1, r18
    22f2:	13 06       	cpc	r1, r19
    22f4:	14 06       	cpc	r1, r20
    22f6:	55 1f       	adc	r21, r21
    22f8:	f2 cf       	rjmp	.-28     	; 0x22de <__fp_split3+0xe>
    22fa:	46 95       	lsr	r20
    22fc:	f1 df       	rcall	.-30     	; 0x22e0 <__fp_splitA>
    22fe:	08 c0       	rjmp	.+16     	; 0x2310 <__fp_splitA+0x30>
    2300:	16 16       	cp	r1, r22
    2302:	17 06       	cpc	r1, r23
    2304:	18 06       	cpc	r1, r24
    2306:	99 1f       	adc	r25, r25
    2308:	f1 cf       	rjmp	.-30     	; 0x22ec <__fp_splitA+0xc>
    230a:	86 95       	lsr	r24
    230c:	71 05       	cpc	r23, r1
    230e:	61 05       	cpc	r22, r1
    2310:	08 94       	sec
    2312:	08 95       	ret

00002314 <__fp_zero>:
    2314:	e8 94       	clt

00002316 <__fp_szero>:
    2316:	bb 27       	eor	r27, r27
    2318:	66 27       	eor	r22, r22
    231a:	77 27       	eor	r23, r23
    231c:	cb 01       	movw	r24, r22
    231e:	97 f9       	bld	r25, 7
    2320:	08 95       	ret

00002322 <__gesf2>:
    2322:	2c df       	rcall	.-424    	; 0x217c <__fp_cmp>
    2324:	08 f4       	brcc	.+2      	; 0x2328 <__gesf2+0x6>
    2326:	8f ef       	ldi	r24, 0xFF	; 255
    2328:	08 95       	ret

0000232a <inverse>:
    232a:	9b 01       	movw	r18, r22
    232c:	ac 01       	movw	r20, r24
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	80 e8       	ldi	r24, 0x80	; 128
    2334:	9f e3       	ldi	r25, 0x3F	; 63
    2336:	4c ce       	rjmp	.-872    	; 0x1fd0 <__divsf3>

00002338 <__mulsf3>:
    2338:	0b d0       	rcall	.+22     	; 0x2350 <__mulsf3x>
    233a:	a8 cf       	rjmp	.-176    	; 0x228c <__fp_round>
    233c:	71 df       	rcall	.-286    	; 0x2220 <__fp_pscA>
    233e:	28 f0       	brcs	.+10     	; 0x234a <__mulsf3+0x12>
    2340:	76 df       	rcall	.-276    	; 0x222e <__fp_pscB>
    2342:	18 f0       	brcs	.+6      	; 0x234a <__mulsf3+0x12>
    2344:	95 23       	and	r25, r21
    2346:	09 f0       	breq	.+2      	; 0x234a <__mulsf3+0x12>
    2348:	3d cf       	rjmp	.-390    	; 0x21c4 <__fp_inf>
    234a:	42 cf       	rjmp	.-380    	; 0x21d0 <__fp_nan>
    234c:	11 24       	eor	r1, r1
    234e:	e3 cf       	rjmp	.-58     	; 0x2316 <__fp_szero>

00002350 <__mulsf3x>:
    2350:	bf df       	rcall	.-130    	; 0x22d0 <__fp_split3>
    2352:	a0 f3       	brcs	.-24     	; 0x233c <__mulsf3+0x4>

00002354 <__mulsf3_pse>:
    2354:	95 9f       	mul	r25, r21
    2356:	d1 f3       	breq	.-12     	; 0x234c <__mulsf3+0x14>
    2358:	95 0f       	add	r25, r21
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	55 1f       	adc	r21, r21
    235e:	62 9f       	mul	r22, r18
    2360:	f0 01       	movw	r30, r0
    2362:	72 9f       	mul	r23, r18
    2364:	bb 27       	eor	r27, r27
    2366:	f0 0d       	add	r31, r0
    2368:	b1 1d       	adc	r27, r1
    236a:	63 9f       	mul	r22, r19
    236c:	aa 27       	eor	r26, r26
    236e:	f0 0d       	add	r31, r0
    2370:	b1 1d       	adc	r27, r1
    2372:	aa 1f       	adc	r26, r26
    2374:	64 9f       	mul	r22, r20
    2376:	66 27       	eor	r22, r22
    2378:	b0 0d       	add	r27, r0
    237a:	a1 1d       	adc	r26, r1
    237c:	66 1f       	adc	r22, r22
    237e:	82 9f       	mul	r24, r18
    2380:	22 27       	eor	r18, r18
    2382:	b0 0d       	add	r27, r0
    2384:	a1 1d       	adc	r26, r1
    2386:	62 1f       	adc	r22, r18
    2388:	73 9f       	mul	r23, r19
    238a:	b0 0d       	add	r27, r0
    238c:	a1 1d       	adc	r26, r1
    238e:	62 1f       	adc	r22, r18
    2390:	83 9f       	mul	r24, r19
    2392:	a0 0d       	add	r26, r0
    2394:	61 1d       	adc	r22, r1
    2396:	22 1f       	adc	r18, r18
    2398:	74 9f       	mul	r23, r20
    239a:	33 27       	eor	r19, r19
    239c:	a0 0d       	add	r26, r0
    239e:	61 1d       	adc	r22, r1
    23a0:	23 1f       	adc	r18, r19
    23a2:	84 9f       	mul	r24, r20
    23a4:	60 0d       	add	r22, r0
    23a6:	21 1d       	adc	r18, r1
    23a8:	82 2f       	mov	r24, r18
    23aa:	76 2f       	mov	r23, r22
    23ac:	6a 2f       	mov	r22, r26
    23ae:	11 24       	eor	r1, r1
    23b0:	9f 57       	subi	r25, 0x7F	; 127
    23b2:	50 40       	sbci	r21, 0x00	; 0
    23b4:	8a f0       	brmi	.+34     	; 0x23d8 <__mulsf3_pse+0x84>
    23b6:	e1 f0       	breq	.+56     	; 0x23f0 <__mulsf3_pse+0x9c>
    23b8:	88 23       	and	r24, r24
    23ba:	4a f0       	brmi	.+18     	; 0x23ce <__mulsf3_pse+0x7a>
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	bb 1f       	adc	r27, r27
    23c2:	66 1f       	adc	r22, r22
    23c4:	77 1f       	adc	r23, r23
    23c6:	88 1f       	adc	r24, r24
    23c8:	91 50       	subi	r25, 0x01	; 1
    23ca:	50 40       	sbci	r21, 0x00	; 0
    23cc:	a9 f7       	brne	.-22     	; 0x23b8 <__mulsf3_pse+0x64>
    23ce:	9e 3f       	cpi	r25, 0xFE	; 254
    23d0:	51 05       	cpc	r21, r1
    23d2:	70 f0       	brcs	.+28     	; 0x23f0 <__mulsf3_pse+0x9c>
    23d4:	f7 ce       	rjmp	.-530    	; 0x21c4 <__fp_inf>
    23d6:	9f cf       	rjmp	.-194    	; 0x2316 <__fp_szero>
    23d8:	5f 3f       	cpi	r21, 0xFF	; 255
    23da:	ec f3       	brlt	.-6      	; 0x23d6 <__mulsf3_pse+0x82>
    23dc:	98 3e       	cpi	r25, 0xE8	; 232
    23de:	dc f3       	brlt	.-10     	; 0x23d6 <__mulsf3_pse+0x82>
    23e0:	86 95       	lsr	r24
    23e2:	77 95       	ror	r23
    23e4:	67 95       	ror	r22
    23e6:	b7 95       	ror	r27
    23e8:	f7 95       	ror	r31
    23ea:	e7 95       	ror	r30
    23ec:	9f 5f       	subi	r25, 0xFF	; 255
    23ee:	c1 f7       	brne	.-16     	; 0x23e0 <__mulsf3_pse+0x8c>
    23f0:	fe 2b       	or	r31, r30
    23f2:	88 0f       	add	r24, r24
    23f4:	91 1d       	adc	r25, r1
    23f6:	96 95       	lsr	r25
    23f8:	87 95       	ror	r24
    23fa:	97 f9       	bld	r25, 7
    23fc:	08 95       	ret

000023fe <square>:
    23fe:	9b 01       	movw	r18, r22
    2400:	ac 01       	movw	r20, r24
    2402:	9a cf       	rjmp	.-204    	; 0x2338 <__mulsf3>

00002404 <__fp_mpack>:
    2404:	9f 3f       	cpi	r25, 0xFF	; 255
    2406:	31 f0       	breq	.+12     	; 0x2414 <__fp_mpack_finite+0xc>

00002408 <__fp_mpack_finite>:
    2408:	91 50       	subi	r25, 0x01	; 1
    240a:	20 f4       	brcc	.+8      	; 0x2414 <__fp_mpack_finite+0xc>
    240c:	87 95       	ror	r24
    240e:	77 95       	ror	r23
    2410:	67 95       	ror	r22
    2412:	b7 95       	ror	r27
    2414:	88 0f       	add	r24, r24
    2416:	91 1d       	adc	r25, r1
    2418:	96 95       	lsr	r25
    241a:	87 95       	ror	r24
    241c:	97 f9       	bld	r25, 7
    241e:	08 95       	ret

00002420 <__fp_powsodd>:
    2420:	9f 93       	push	r25
    2422:	8f 93       	push	r24
    2424:	7f 93       	push	r23
    2426:	6f 93       	push	r22
    2428:	ff 93       	push	r31
    242a:	ef 93       	push	r30
    242c:	9b 01       	movw	r18, r22
    242e:	ac 01       	movw	r20, r24
    2430:	83 df       	rcall	.-250    	; 0x2338 <__mulsf3>
    2432:	ef 91       	pop	r30
    2434:	ff 91       	pop	r31
    2436:	cf de       	rcall	.-610    	; 0x21d6 <__fp_powser>
    2438:	2f 91       	pop	r18
    243a:	3f 91       	pop	r19
    243c:	4f 91       	pop	r20
    243e:	5f 91       	pop	r21
    2440:	7b cf       	rjmp	.-266    	; 0x2338 <__mulsf3>

00002442 <_exit>:
    2442:	f8 94       	cli

00002444 <__stop_program>:
    2444:	ff cf       	rjmp	.-2      	; 0x2444 <__stop_program>
