
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000021ba  00800100  00001df6  00001e8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001df6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000067a  008022ba  008022ba  00004044  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  00004044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  00006eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007bf4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000398  00000000  00000000  00007c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000033c8  00000000  00000000  00007fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f2b  00000000  00000000  0000b383  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002117  00000000  00000000  0000c2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b08  00000000  00000000  0000e3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c2c  00000000  00000000  0000eed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022af  00000000  00000000  0000fafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000418  00000000  00000000  00011dab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	bc c4       	rjmp	.+2424   	; 0x97e <__vector_1>
       6:	00 00       	nop
       8:	e4 c4       	rjmp	.+2504   	; 0x9d2 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	81 c0       	rjmp	.+258    	; 0x114 <__bad_interrupt>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c5       	rjmp	.+2668   	; 0xaa2 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c7       	rjmp	.+3850   	; 0xf74 <__vector_26>
      6a:	00 00       	nop
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1e c5       	rjmp	.+2620   	; 0xabe <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	12 e2       	ldi	r17, 0x22	; 34
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e6 ef       	ldi	r30, 0xF6	; 246
      ec:	fd e1       	ldi	r31, 0x1D	; 29
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	aa 3b       	cpi	r26, 0xBA	; 186
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	29 e2       	ldi	r18, 0x29	; 41
     100:	aa eb       	ldi	r26, 0xBA	; 186
     102:	b2 e2       	ldi	r27, 0x22	; 34
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a4 33       	cpi	r26, 0x34	; 52
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	8b d4       	rcall	.+2326   	; 0xa26 <main>
     110:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
	if(gStatus)
     11a:	80 91 00 01 	lds	r24, 0x0100
     11e:	88 23       	and	r24, r24
     120:	f1 f0       	breq	.+60     	; 0x15e <turn_around+0x48>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     122:	68 e1       	ldi	r22, 0x18	; 24
     124:	71 e2       	ldi	r23, 0x21	; 33
     126:	80 e8       	ldi	r24, 0x80	; 128
     128:	de d5       	rcall	.+3004   	; 0xce6 <TWI_send_string>
     12a:	19 c0       	rjmp	.+50     	; 0x15e <turn_around+0x48>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	6e e1       	ldi	r22, 0x1E	; 30
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 23 0c 	call	0x1846	; 0x1846 <USART_send_command_parameters>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     136:	2f ef       	ldi	r18, 0xFF	; 255
     138:	87 e8       	ldi	r24, 0x87	; 135
     13a:	93 e1       	ldi	r25, 0x13	; 19
     13c:	21 50       	subi	r18, 0x01	; 1
     13e:	80 40       	sbci	r24, 0x00	; 0
     140:	90 40       	sbci	r25, 0x00	; 0
     142:	e1 f7       	brne	.-8      	; 0x13c <turn_around+0x26>
     144:	00 c0       	rjmp	.+0      	; 0x146 <turn_around+0x30>
     146:	00 00       	nop
     148:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
	}
	for(int i = 0; i < 35; ++i)
     14a:	81 f7       	brne	.-32     	; 0x12c <turn_around+0x16>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		_delay_ms(STEPPING_TIME);
	}
	if(gStatus)
     14c:	80 91 00 01 	lds	r24, 0x0100
     150:	88 23       	and	r24, r24
     152:	41 f0       	breq	.+16     	; 0x164 <turn_around+0x4e>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     154:	61 e3       	ldi	r22, 0x31	; 49
     156:	71 e2       	ldi	r23, 0x21	; 33
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	c5 d5       	rcall	.+2954   	; 0xce6 <TWI_send_string>
     15c:	03 c0       	rjmp	.+6      	; 0x164 <turn_around+0x4e>
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     15e:	c3 e2       	ldi	r28, 0x23	; 35
     160:	d0 e0       	ldi	r29, 0x00	; 0
     162:	e4 cf       	rjmp	.-56     	; 0x12c <turn_around+0x16>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
	}
}
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <walk_forward>:

void walk_forward()
{
     16a:	8f 92       	push	r8
     16c:	9f 92       	push	r9
     16e:	af 92       	push	r10
     170:	bf 92       	push	r11
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     17e:	71 d3       	rcall	.+1762   	; 0x862 <navigation_angle_offset>
     180:	4b 01       	movw	r8, r22
     182:	5c 01       	movw	r10, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     184:	68 d2       	rcall	.+1232   	; 0x656 <navigation_direction_regulation>
     186:	6b 01       	movw	r12, r22
     188:	7c 01       	movw	r14, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * (2.0/PI + fabs(directionCompensationAngle)));
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	48 e4       	ldi	r20, 0x48	; 72
     190:	52 e4       	ldi	r21, 0x42	; 66
     192:	c5 01       	movw	r24, r10
     194:	b4 01       	movw	r22, r8
     196:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     19a:	4b 01       	movw	r8, r22
     19c:	5c 01       	movw	r10, r24
     19e:	c7 01       	movw	r24, r14
     1a0:	b6 01       	movw	r22, r12
     1a2:	9f 77       	andi	r25, 0x7F	; 127
     1a4:	23 e8       	ldi	r18, 0x83	; 131
     1a6:	39 ef       	ldi	r19, 0xF9	; 249
     1a8:	42 e2       	ldi	r20, 0x22	; 34
     1aa:	5f e3       	ldi	r21, 0x3F	; 63
     1ac:	0e 94 2d 0c 	call	0x185a	; 0x185a <__addsf3>
     1b0:	9b 01       	movw	r18, r22
     1b2:	ac 01       	movw	r20, r24
     1b4:	c5 01       	movw	r24, r10
     1b6:	b4 01       	movw	r22, r8
     1b8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	4c e4       	ldi	r20, 0x4C	; 76
     1c2:	52 e4       	ldi	r21, 0x42	; 66
     1c4:	0e 94 2d 0c 	call	0x185a	; 0x185a <__addsf3>
     1c8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1cc:	64 36       	cpi	r22, 0x64	; 100
     1ce:	71 05       	cpc	r23, r1
     1d0:	34 f4       	brge	.+12     	; 0x1de <walk_forward+0x74>
     1d2:	eb 01       	movw	r28, r22
     1d4:	dd 23       	and	r29, r29
     1d6:	2c f4       	brge	.+10     	; 0x1e2 <walk_forward+0x78>
     1d8:	c0 e0       	ldi	r28, 0x00	; 0
     1da:	d0 e0       	ldi	r29, 0x00	; 0
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <walk_forward+0x78>
	{
		adjustmentRotation = 100;
     1de:	c4 e6       	ldi	r28, 0x64	; 100
     1e0:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	44 eb       	ldi	r20, 0xB4	; 180
     1e8:	52 e4       	ldi	r21, 0x42	; 66
     1ea:	c7 01       	movw	r24, r14
     1ec:	b6 01       	movw	r22, r12
     1ee:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     1f2:	2b ed       	ldi	r18, 0xDB	; 219
     1f4:	3f e0       	ldi	r19, 0x0F	; 15
     1f6:	49 ec       	ldi	r20, 0xC9	; 201
     1f8:	50 e4       	ldi	r21, 0x40	; 64
     1fa:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
     1fe:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fixsfsi>
     202:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     204:	40 91 01 01 	lds	r20, 0x0101
     208:	6c 2f       	mov	r22, r28
     20a:	82 2f       	mov	r24, r18
     20c:	0e 94 23 0c 	call	0x1846	; 0x1846 <USART_send_command_parameters>
     210:	2f ef       	ldi	r18, 0xFF	; 255
     212:	83 ec       	ldi	r24, 0xC3	; 195
     214:	99 e0       	ldi	r25, 0x09	; 9
     216:	21 50       	subi	r18, 0x01	; 1
     218:	80 40       	sbci	r24, 0x00	; 0
     21a:	90 40       	sbci	r25, 0x00	; 0
     21c:	e1 f7       	brne	.-8      	; 0x216 <walk_forward+0xac>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <walk_forward+0xb6>
     220:	00 00       	nop
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	_delay_ms(STEPPING_TIME / 2);
	TWI_send_float(C_ADDRESS, adjustmentRotation);
     222:	be 01       	movw	r22, r28
     224:	88 27       	eor	r24, r24
     226:	77 fd       	sbrc	r23, 7
     228:	80 95       	com	r24
     22a:	98 2f       	mov	r25, r24
     22c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__floatsisf>
     230:	ab 01       	movw	r20, r22
     232:	bc 01       	movw	r22, r24
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	db d5       	rcall	.+2998   	; 0xdee <TWI_send_float>
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	83 ec       	ldi	r24, 0xC3	; 195
     23c:	99 e0       	ldi	r25, 0x09	; 9
     23e:	21 50       	subi	r18, 0x01	; 1
     240:	80 40       	sbci	r24, 0x00	; 0
     242:	90 40       	sbci	r25, 0x00	; 0
     244:	e1 f7       	brne	.-8      	; 0x23e <walk_forward+0xd4>
     246:	00 c0       	rjmp	.+0      	; 0x248 <walk_forward+0xde>
     248:	00 00       	nop
	_delay_ms(STEPPING_TIME / 2);
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	ff 90       	pop	r15
     250:	ef 90       	pop	r14
     252:	df 90       	pop	r13
     254:	cf 90       	pop	r12
     256:	bf 90       	pop	r11
     258:	af 90       	pop	r10
     25a:	9f 90       	pop	r9
     25c:	8f 90       	pop	r8
     25e:	08 95       	ret

00000260 <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
	if(gStatus)
     264:	80 91 00 01 	lds	r24, 0x0100
     268:	88 23       	and	r24, r24
     26a:	19 f1       	breq	.+70     	; 0x2b2 <turn_right+0x52>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     26c:	66 e5       	ldi	r22, 0x56	; 86
     26e:	71 e2       	ldi	r23, 0x21	; 33
     270:	80 e8       	ldi	r24, 0x80	; 128
     272:	39 d5       	rcall	.+2674   	; 0xce6 <TWI_send_string>
     274:	1e c0       	rjmp	.+60     	; 0x2b2 <turn_right+0x52>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
     276:	40 e0       	ldi	r20, 0x00	; 0
     278:	66 e4       	ldi	r22, 0x46	; 70
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 23 0c 	call	0x1846	; 0x1846 <USART_send_command_parameters>
     280:	2f ef       	ldi	r18, 0xFF	; 255
     282:	87 e8       	ldi	r24, 0x87	; 135
     284:	93 e1       	ldi	r25, 0x13	; 19
     286:	21 50       	subi	r18, 0x01	; 1
     288:	80 40       	sbci	r24, 0x00	; 0
     28a:	90 40       	sbci	r25, 0x00	; 0
     28c:	e1 f7       	brne	.-8      	; 0x286 <turn_right+0x26>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <turn_right+0x30>
     290:	00 00       	nop
     292:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
	}
	for(int i = 0; i < 20; ++i)
     294:	81 f7       	brne	.-32     	; 0x276 <turn_right+0x16>
     296:	cf e0       	ldi	r28, 0x0F	; 15
     298:	d0 e0       	ldi	r29, 0x00	; 0
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		_delay_ms(STEPPING_TIME);
	}
	for(int i = 0; i < 15; ++i)
	{
		walk_forward();
     29a:	67 df       	rcall	.-306    	; 0x16a <walk_forward>
     29c:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		_delay_ms(STEPPING_TIME);
	}
	for(int i = 0; i < 15; ++i)
     29e:	e9 f7       	brne	.-6      	; 0x29a <turn_right+0x3a>
	{
		walk_forward();
	}
	if(gStatus)
     2a0:	80 91 00 01 	lds	r24, 0x0100
     2a4:	88 23       	and	r24, r24
     2a6:	41 f0       	breq	.+16     	; 0x2b8 <turn_right+0x58>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     2a8:	6e e6       	ldi	r22, 0x6E	; 110
     2aa:	71 e2       	ldi	r23, 0x21	; 33
     2ac:	80 e8       	ldi	r24, 0x80	; 128
     2ae:	1b d5       	rcall	.+2614   	; 0xce6 <TWI_send_string>
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <turn_right+0x58>
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     2b2:	c4 e1       	ldi	r28, 0x14	; 20
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
     2b6:	df cf       	rjmp	.-66     	; 0x276 <turn_right+0x16>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
	if(gStatus)
     2c2:	80 91 00 01 	lds	r24, 0x0100
     2c6:	88 23       	and	r24, r24
     2c8:	19 f1       	breq	.+70     	; 0x310 <turn_left+0x52>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     2ca:	62 e8       	ldi	r22, 0x82	; 130
     2cc:	71 e2       	ldi	r23, 0x21	; 33
     2ce:	80 e8       	ldi	r24, 0x80	; 128
     2d0:	0a d5       	rcall	.+2580   	; 0xce6 <TWI_send_string>
     2d2:	1e c0       	rjmp	.+60     	; 0x310 <turn_left+0x52>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	6e e1       	ldi	r22, 0x1E	; 30
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 23 0c 	call	0x1846	; 0x1846 <USART_send_command_parameters>
     2de:	2f ef       	ldi	r18, 0xFF	; 255
     2e0:	87 e8       	ldi	r24, 0x87	; 135
     2e2:	93 e1       	ldi	r25, 0x13	; 19
     2e4:	21 50       	subi	r18, 0x01	; 1
     2e6:	80 40       	sbci	r24, 0x00	; 0
     2e8:	90 40       	sbci	r25, 0x00	; 0
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <turn_left+0x26>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <turn_left+0x30>
     2ee:	00 00       	nop
     2f0:	21 97       	sbiw	r28, 0x01	; 1
	}
	for(int i = 0;i < 3; ++i)
	{
		walk_forward();
	}
	for(int i = 0; i < 17; ++i)
     2f2:	81 f7       	brne	.-32     	; 0x2d4 <turn_left+0x16>
     2f4:	cf e0       	ldi	r28, 0x0F	; 15
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		_delay_ms(STEPPING_TIME);
	}
	for(int i = 0; i < 15; ++i)
	{
		walk_forward();
     2f8:	38 df       	rcall	.-400    	; 0x16a <walk_forward>
     2fa:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		_delay_ms(STEPPING_TIME);
	}
	for(int i = 0; i < 15; ++i)
     2fc:	e9 f7       	brne	.-6      	; 0x2f8 <turn_left+0x3a>
	{
		walk_forward();
	}
	if(gStatus)
     2fe:	80 91 00 01 	lds	r24, 0x0100
     302:	88 23       	and	r24, r24
     304:	59 f0       	breq	.+22     	; 0x31c <turn_left+0x5e>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     306:	69 e9       	ldi	r22, 0x99	; 153
     308:	71 e2       	ldi	r23, 0x21	; 33
     30a:	80 e8       	ldi	r24, 0x80	; 128
     30c:	ec d4       	rcall	.+2520   	; 0xce6 <TWI_send_string>
     30e:	06 c0       	rjmp	.+12     	; 0x31c <turn_left+0x5e>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
	}
	for(int i = 0;i < 3; ++i)
	{
		walk_forward();
     310:	2c df       	rcall	.-424    	; 0x16a <walk_forward>
     312:	2b df       	rcall	.-426    	; 0x16a <walk_forward>
     314:	2a df       	rcall	.-428    	; 0x16a <walk_forward>
     316:	c1 e1       	ldi	r28, 0x11	; 17
     318:	d0 e0       	ldi	r29, 0x00	; 0
     31a:	dc cf       	rjmp	.-72     	; 0x2d4 <turn_left+0x16>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <autonomouswalk_walk>:
	_delay_ms(STEPPING_TIME / 2);
}

void autonomouswalk_walk()
{
	if(navigation_left_algorithm())
     322:	c4 d0       	rcall	.+392    	; 0x4ac <navigation_left_algorithm>
     324:	88 23       	and	r24, r24
     326:	79 f0       	breq	.+30     	; 0x346 <autonomouswalk_walk+0x24>
	{
		if(navigation_check_left_turn() == 2)
     328:	81 d1       	rcall	.+770    	; 0x62c <navigation_check_left_turn>
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	09 f4       	brne	.+2      	; 0x330 <autonomouswalk_walk+0xe>
		{
			
			turn_left();
     32e:	c7 cf       	rjmp	.-114    	; 0x2be <turn_left>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     330:	84 e0       	ldi	r24, 0x04	; 4
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	64 d1       	rcall	.+712    	; 0x5fe <navigation_get_sensor>
     336:	89 32       	cpi	r24, 0x29	; 41
     338:	08 f0       	brcs	.+2      	; 0x33c <autonomouswalk_walk+0x1a>
		{
			walk_forward();
     33a:	17 cf       	rjmp	.-466    	; 0x16a <walk_forward>
		}
		else if(navigation_check_right_turn() == 2)
     33c:	62 d1       	rcall	.+708    	; 0x602 <navigation_check_right_turn>
     33e:	82 30       	cpi	r24, 0x02	; 2
     340:	09 f4       	brne	.+2      	; 0x344 <autonomouswalk_walk+0x22>
		{
			turn_right();
     342:	8e cf       	rjmp	.-228    	; 0x260 <turn_right>
		}
		else
		{
			turn_around();
     344:	e8 ce       	rjmp	.-560    	; 0x116 <turn_around>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     346:	5d d1       	rcall	.+698    	; 0x602 <navigation_check_right_turn>
     348:	82 30       	cpi	r24, 0x02	; 2
     34a:	21 f4       	brne	.+8      	; 0x354 <autonomouswalk_walk+0x32>
		{
			for(int i = 0;i < 3; ++i)
			{
				walk_forward();
     34c:	0e df       	rcall	.-484    	; 0x16a <walk_forward>
     34e:	0d df       	rcall	.-486    	; 0x16a <walk_forward>
     350:	0c df       	rcall	.-488    	; 0x16a <walk_forward>
			}
			turn_right();
     352:	86 cf       	rjmp	.-244    	; 0x260 <turn_right>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     354:	84 e0       	ldi	r24, 0x04	; 4
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	52 d1       	rcall	.+676    	; 0x5fe <navigation_get_sensor>
     35a:	89 32       	cpi	r24, 0x29	; 41
     35c:	08 f0       	brcs	.+2      	; 0x360 <autonomouswalk_walk+0x3e>
		{
			walk_forward();
     35e:	05 cf       	rjmp	.-502    	; 0x16a <walk_forward>
		}
		else if(navigation_check_left_turn() == 2)
     360:	65 d1       	rcall	.+714    	; 0x62c <navigation_check_left_turn>
     362:	82 30       	cpi	r24, 0x02	; 2
     364:	09 f4       	brne	.+2      	; 0x368 <autonomouswalk_walk+0x46>
		{
			turn_left();
     366:	ab cf       	rjmp	.-170    	; 0x2be <turn_left>
		}
		else
		{
			turn_around();
     368:	d6 ce       	rjmp	.-596    	; 0x116 <turn_around>

0000036a <set_counter_1>:
     36a:	bc 01       	movw	r22, r24
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__floatunsisf>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	4a e7       	ldi	r20, 0x7A	; 122
     37a:	51 e4       	ldi	r21, 0x41	; 65
     37c:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     380:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__fixunssfsi>
     384:	70 93 89 00 	sts	0x0089, r23
     388:	60 93 88 00 	sts	0x0088, r22
     38c:	08 95       	ret

0000038e <set_counter_2>:
     38e:	bc 01       	movw	r22, r24
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__floatunsisf>
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	4a e7       	ldi	r20, 0x7A	; 122
     39e:	51 e4       	ldi	r21, 0x41	; 65
     3a0:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     3a4:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__fixunssfsi>
     3a8:	70 93 99 00 	sts	0x0099, r23
     3ac:	60 93 98 00 	sts	0x0098, r22
     3b0:	08 95       	ret

000003b2 <init_counters>:
     3b2:	e1 e8       	ldi	r30, 0x81	; 129
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	85 60       	ori	r24, 0x05	; 5
     3ba:	80 83       	st	Z, r24
     3bc:	e1 e9       	ldi	r30, 0x91	; 145
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	85 60       	ori	r24, 0x05	; 5
     3c4:	80 83       	st	Z, r24
     3c6:	88 ee       	ldi	r24, 0xE8	; 232
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	cf df       	rcall	.-98     	; 0x36a <set_counter_1>
     3cc:	88 ee       	ldi	r24, 0xE8	; 232
     3ce:	93 e0       	ldi	r25, 0x03	; 3
     3d0:	de df       	rcall	.-68     	; 0x38e <set_counter_2>
     3d2:	ef e6       	ldi	r30, 0x6F	; 111
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	82 60       	ori	r24, 0x02	; 2
     3da:	80 83       	st	Z, r24
     3dc:	e1 e7       	ldi	r30, 0x71	; 113
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	82 60       	ori	r24, 0x02	; 2
     3e4:	80 83       	st	Z, r24
     3e6:	10 92 85 00 	sts	0x0085, r1
     3ea:	10 92 84 00 	sts	0x0084, r1
     3ee:	10 92 95 00 	sts	0x0095, r1
     3f2:	10 92 94 00 	sts	0x0094, r1
     3f6:	08 95       	ret

000003f8 <FifoDataLength>:
     3f8:	fc 01       	movw	r30, r24
     3fa:	90 81       	ld	r25, Z
     3fc:	91 50       	subi	r25, 0x01	; 1
     3fe:	84 81       	ldd	r24, Z+4	; 0x04
     400:	22 81       	ldd	r18, Z+2	; 0x02
     402:	82 1b       	sub	r24, r18
     404:	89 23       	and	r24, r25
     406:	08 95       	ret

00000408 <FifoWrite>:
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
     410:	16 2f       	mov	r17, r22
     412:	f2 df       	rcall	.-28     	; 0x3f8 <FifoDataLength>
     414:	28 81       	ld	r18, Y
     416:	39 81       	ldd	r19, Y+1	; 0x01
     418:	21 50       	subi	r18, 0x01	; 1
     41a:	31 09       	sbc	r19, r1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	82 17       	cp	r24, r18
     420:	93 07       	cpc	r25, r19
     422:	69 f0       	breq	.+26     	; 0x43e <FifoWrite+0x36>
     424:	8c 81       	ldd	r24, Y+4	; 0x04
     426:	9d 81       	ldd	r25, Y+5	; 0x05
     428:	fe 01       	movw	r30, r28
     42a:	e8 0f       	add	r30, r24
     42c:	f9 1f       	adc	r31, r25
     42e:	16 83       	std	Z+6, r17	; 0x06
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	28 23       	and	r18, r24
     434:	39 23       	and	r19, r25
     436:	3d 83       	std	Y+5, r19	; 0x05
     438:	2c 83       	std	Y+4, r18	; 0x04
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	01 c0       	rjmp	.+2      	; 0x440 <FifoWrite+0x38>
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	08 95       	ret

00000448 <FifoRead>:
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	ec 01       	movw	r28, r24
     452:	8b 01       	movw	r16, r22
     454:	d1 df       	rcall	.-94     	; 0x3f8 <FifoDataLength>
     456:	88 23       	and	r24, r24
     458:	a1 f0       	breq	.+40     	; 0x482 <FifoRead+0x3a>
     45a:	ea 81       	ldd	r30, Y+2	; 0x02
     45c:	fb 81       	ldd	r31, Y+3	; 0x03
     45e:	ec 0f       	add	r30, r28
     460:	fd 1f       	adc	r31, r29
     462:	86 81       	ldd	r24, Z+6	; 0x06
     464:	f8 01       	movw	r30, r16
     466:	80 83       	st	Z, r24
     468:	28 81       	ld	r18, Y
     46a:	39 81       	ldd	r19, Y+1	; 0x01
     46c:	21 50       	subi	r18, 0x01	; 1
     46e:	31 09       	sbc	r19, r1
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	9b 81       	ldd	r25, Y+3	; 0x03
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	82 23       	and	r24, r18
     478:	93 23       	and	r25, r19
     47a:	9b 83       	std	Y+3, r25	; 0x03
     47c:	8a 83       	std	Y+2, r24	; 0x02
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	01 c0       	rjmp	.+2      	; 0x484 <FifoRead+0x3c>
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     48e:	68 2f       	mov	r22, r24
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__floatunsisf>
     49a:	60 93 03 01 	sts	0x0103, r22
     49e:	70 93 04 01 	sts	0x0104, r23
     4a2:	80 93 05 01 	sts	0x0105, r24
     4a6:	90 93 06 01 	sts	0x0106, r25
     4aa:	08 95       	ret

000004ac <navigation_left_algorithm>:
     4ac:	80 91 07 01 	lds	r24, 0x0107
     4b0:	08 95       	ret

000004b2 <navigation_set_algorithm>:
     4b2:	80 93 07 01 	sts	0x0107, r24
     4b6:	08 95       	ret

000004b8 <navigation_autonomous_walk>:
     4b8:	80 91 02 01 	lds	r24, 0x0102
     4bc:	08 95       	ret

000004be <navigation_set_autonomous_walk>:
     4be:	80 93 02 01 	sts	0x0102, r24
     4c2:	08 95       	ret

000004c4 <navigation_fill_buffer>:
     4c4:	6f 92       	push	r6
     4c6:	7f 92       	push	r7
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	27 97       	sbiw	r28, 0x07	; 7
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	e0 90 ba 22 	lds	r14, 0x22BA
     4f8:	f1 2c       	mov	r15, r1
     4fa:	c8 01       	movw	r24, r16
     4fc:	c5 d4       	rcall	.+2442   	; 0xe88 <TWI_get_sensor>
     4fe:	f8 01       	movw	r30, r16
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	ee 0f       	add	r30, r30
     506:	ff 1f       	adc	r31, r31
     508:	ee 0f       	add	r30, r30
     50a:	ff 1f       	adc	r31, r31
     50c:	e0 1b       	sub	r30, r16
     50e:	f1 0b       	sbc	r31, r17
     510:	ee 0d       	add	r30, r14
     512:	ff 1d       	adc	r31, r15
     514:	e3 53       	subi	r30, 0x33	; 51
     516:	fd 4d       	sbci	r31, 0xDD	; 221
     518:	80 83       	st	Z, r24
     51a:	0f 5f       	subi	r16, 0xFF	; 255
     51c:	1f 4f       	sbci	r17, 0xFF	; 255
     51e:	08 30       	cpi	r16, 0x08	; 8
     520:	11 05       	cpc	r17, r1
     522:	41 f7       	brne	.-48     	; 0x4f4 <navigation_fill_buffer+0x30>
     524:	80 91 ba 22 	lds	r24, 0x22BA
     528:	86 30       	cpi	r24, 0x06	; 6
     52a:	19 f4       	brne	.+6      	; 0x532 <navigation_fill_buffer+0x6e>
     52c:	10 92 ba 22 	sts	0x22BA, r1
     530:	38 c0       	rjmp	.+112    	; 0x5a2 <navigation_fill_buffer+0xde>
     532:	8f 5f       	subi	r24, 0xFF	; 255
     534:	80 93 ba 22 	sts	0x22BA, r24
     538:	34 c0       	rjmp	.+104    	; 0x5a2 <navigation_fill_buffer+0xde>
     53a:	8d 91       	ld	r24, X+
     53c:	81 93       	st	Z+, r24
     53e:	e4 17       	cp	r30, r20
     540:	f5 07       	cpc	r31, r21
     542:	d9 f7       	brne	.-10     	; 0x53a <navigation_fill_buffer+0x76>
     544:	95 01       	movw	r18, r10
     546:	0e c0       	rjmp	.+28     	; 0x564 <navigation_fill_buffer+0xa0>
     548:	71 90       	ld	r7, Z+
     54a:	60 80       	ld	r6, Z
     54c:	67 14       	cp	r6, r7
     54e:	20 f4       	brcc	.+8      	; 0x558 <navigation_fill_buffer+0x94>
     550:	df 01       	movw	r26, r30
     552:	11 97       	sbiw	r26, 0x01	; 1
     554:	6c 92       	st	X, r6
     556:	70 82       	st	Z, r7
     558:	e8 17       	cp	r30, r24
     55a:	f9 07       	cpc	r31, r25
     55c:	a9 f7       	brne	.-22     	; 0x548 <navigation_fill_buffer+0x84>
     55e:	21 50       	subi	r18, 0x01	; 1
     560:	31 09       	sbc	r19, r1
     562:	49 f0       	breq	.+18     	; 0x576 <navigation_fill_buffer+0xb2>
     564:	12 16       	cp	r1, r18
     566:	13 06       	cpc	r1, r19
     568:	d4 f7       	brge	.-12     	; 0x55e <navigation_fill_buffer+0x9a>
     56a:	cb 01       	movw	r24, r22
     56c:	82 0f       	add	r24, r18
     56e:	93 1f       	adc	r25, r19
     570:	e8 2d       	mov	r30, r8
     572:	f9 2d       	mov	r31, r9
     574:	e9 cf       	rjmp	.-46     	; 0x548 <navigation_fill_buffer+0x84>
     576:	8c 81       	ldd	r24, Y+4	; 0x04
     578:	f7 01       	movw	r30, r14
     57a:	81 93       	st	Z+, r24
     57c:	7f 01       	movw	r14, r30
     57e:	0f 5f       	subi	r16, 0xFF	; 255
     580:	1f 4f       	sbci	r17, 0xFF	; 255
     582:	08 30       	cpi	r16, 0x08	; 8
     584:	11 05       	cpc	r17, r1
     586:	31 f1       	breq	.+76     	; 0x5d4 <navigation_fill_buffer+0x110>
     588:	d8 01       	movw	r26, r16
     58a:	aa 0f       	add	r26, r26
     58c:	bb 1f       	adc	r27, r27
     58e:	aa 0f       	add	r26, r26
     590:	bb 1f       	adc	r27, r27
     592:	aa 0f       	add	r26, r26
     594:	bb 1f       	adc	r27, r27
     596:	a0 1b       	sub	r26, r16
     598:	b1 0b       	sbc	r27, r17
     59a:	a3 53       	subi	r26, 0x33	; 51
     59c:	bd 4d       	sbci	r27, 0xDD	; 221
     59e:	f6 01       	movw	r30, r12
     5a0:	cc cf       	rjmp	.-104    	; 0x53a <navigation_fill_buffer+0x76>
     5a2:	0f 2e       	mov	r0, r31
     5a4:	f5 ec       	ldi	r31, 0xC5	; 197
     5a6:	ef 2e       	mov	r14, r31
     5a8:	f2 e2       	ldi	r31, 0x22	; 34
     5aa:	ff 2e       	mov	r15, r31
     5ac:	f0 2d       	mov	r31, r0
     5ae:	00 e0       	ldi	r16, 0x00	; 0
     5b0:	10 e0       	ldi	r17, 0x00	; 0
     5b2:	cc 24       	eor	r12, r12
     5b4:	c3 94       	inc	r12
     5b6:	d1 2c       	mov	r13, r1
     5b8:	cc 0e       	add	r12, r28
     5ba:	dd 1e       	adc	r13, r29
     5bc:	b6 01       	movw	r22, r12
     5be:	ae 01       	movw	r20, r28
     5c0:	48 5f       	subi	r20, 0xF8	; 248
     5c2:	5f 4f       	sbci	r21, 0xFF	; 255
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f6 e0       	ldi	r31, 0x06	; 6
     5c8:	af 2e       	mov	r10, r31
     5ca:	b1 2c       	mov	r11, r1
     5cc:	f0 2d       	mov	r31, r0
     5ce:	8c 2c       	mov	r8, r12
     5d0:	97 2e       	mov	r9, r23
     5d2:	da cf       	rjmp	.-76     	; 0x588 <navigation_fill_buffer+0xc4>
     5d4:	27 96       	adiw	r28, 0x07	; 7
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	cf 90       	pop	r12
     5f0:	bf 90       	pop	r11
     5f2:	af 90       	pop	r10
     5f4:	9f 90       	pop	r9
     5f6:	8f 90       	pop	r8
     5f8:	7f 90       	pop	r7
     5fa:	6f 90       	pop	r6
     5fc:	08 95       	ret

000005fe <navigation_get_sensor>:
     5fe:	44 c4       	rjmp	.+2184   	; 0xe88 <TWI_get_sensor>
     600:	08 95       	ret

00000602 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 10))
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	fb df       	rcall	.-10     	; 0x5fe <navigation_get_sensor>
     608:	82 33       	cpi	r24, 0x32	; 50
     60a:	28 f0       	brcs	.+10     	; 0x616 <navigation_check_right_turn+0x14>
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	f6 df       	rcall	.-20     	; 0x5fe <navigation_get_sensor>
     612:	82 33       	cpi	r24, 0x32	; 50
     614:	40 f4       	brcc	.+16     	; 0x626 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	f1 df       	rcall	.-30     	; 0x5fe <navigation_get_sensor>
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	86 34       	cpi	r24, 0x46	; 70
     620:	18 f4       	brcc	.+6      	; 0x628 <navigation_check_right_turn+0x26>
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	01 c0       	rjmp	.+2      	; 0x628 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 10))
	{
		return 2;
     626:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     628:	89 2f       	mov	r24, r25
     62a:	08 95       	ret

0000062c <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 10))
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	e6 df       	rcall	.-52     	; 0x5fe <navigation_get_sensor>
     632:	82 33       	cpi	r24, 0x32	; 50
     634:	28 f0       	brcs	.+10     	; 0x640 <navigation_check_left_turn+0x14>
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	e1 df       	rcall	.-62     	; 0x5fe <navigation_get_sensor>
     63c:	82 33       	cpi	r24, 0x32	; 50
     63e:	40 f4       	brcc	.+16     	; 0x650 <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	dc df       	rcall	.-72     	; 0x5fe <navigation_get_sensor>
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	86 34       	cpi	r24, 0x46	; 70
     64a:	18 f4       	brcc	.+6      	; 0x652 <navigation_check_left_turn+0x26>
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	01 c0       	rjmp	.+2      	; 0x652 <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 10))
	{
		return 2;
     650:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     652:	89 2f       	mov	r24, r25
     654:	08 95       	ret

00000656 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	6b 01       	movw	r12, r22
     664:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     666:	80 91 07 01 	lds	r24, 0x0107
     66a:	88 23       	and	r24, r24
     66c:	09 f4       	brne	.+2      	; 0x670 <navigation_direction_regulation+0x1a>
     66e:	4c c0       	rjmp	.+152    	; 0x708 <navigation_direction_regulation+0xb2>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	c4 df       	rcall	.-120    	; 0x5fe <navigation_get_sensor>
     676:	c8 2f       	mov	r28, r24
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	c0 df       	rcall	.-128    	; 0x5fe <navigation_get_sensor>
     67e:	2c 2f       	mov	r18, r28
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	a9 01       	movw	r20, r18
     684:	48 1b       	sub	r20, r24
     686:	51 09       	sbc	r21, r1
     688:	ca 01       	movw	r24, r20
     68a:	99 23       	and	r25, r25
     68c:	1c f4       	brge	.+6      	; 0x694 <navigation_direction_regulation+0x3e>
     68e:	91 95       	neg	r25
     690:	81 95       	neg	r24
     692:	91 09       	sbc	r25, r1
     694:	0a 97       	sbiw	r24, 0x0a	; 10
     696:	0c f0       	brlt	.+2      	; 0x69a <navigation_direction_regulation+0x44>
     698:	d5 c0       	rjmp	.+426    	; 0x844 <navigation_direction_regulation+0x1ee>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	af df       	rcall	.-162    	; 0x5fe <navigation_get_sensor>
     6a0:	82 33       	cpi	r24, 0x32	; 50
     6a2:	08 f0       	brcs	.+2      	; 0x6a6 <navigation_direction_regulation+0x50>
     6a4:	cf c0       	rjmp	.+414    	; 0x844 <navigation_direction_regulation+0x1ee>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	a9 df       	rcall	.-174    	; 0x5fe <navigation_get_sensor>
     6ac:	c8 2f       	mov	r28, r24
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	a5 df       	rcall	.-182    	; 0x5fe <navigation_get_sensor>
     6b4:	d8 2f       	mov	r29, r24
     6b6:	c7 01       	movw	r24, r14
     6b8:	b6 01       	movw	r22, r12
     6ba:	0e 94 bd 0c 	call	0x197a	; 0x197a <cos>
     6be:	6b 01       	movw	r12, r22
     6c0:	7c 01       	movw	r14, r24
     6c2:	6d 2f       	mov	r22, r29
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	6c 0f       	add	r22, r28
     6c8:	71 1d       	adc	r23, r1
     6ca:	88 27       	eor	r24, r24
     6cc:	77 fd       	sbrc	r23, 7
     6ce:	80 95       	com	r24
     6d0:	98 2f       	mov	r25, r24
     6d2:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__floatsisf>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 ef       	ldi	r20, 0xF0	; 240
     6e8:	50 e4       	ldi	r21, 0x40	; 64
     6ea:	0e 94 2d 0c 	call	0x185a	; 0x185a <__addsf3>
     6ee:	a7 01       	movw	r20, r14
     6f0:	96 01       	movw	r18, r12
     6f2:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e2       	ldi	r20, 0x20	; 32
     6fc:	52 e4       	ldi	r21, 0x42	; 66
     6fe:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__subsf3>
     702:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fixsfsi>
     706:	4d c0       	rjmp	.+154    	; 0x7a2 <navigation_direction_regulation+0x14c>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	78 df       	rcall	.-272    	; 0x5fe <navigation_get_sensor>
     70e:	c8 2f       	mov	r28, r24
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	74 df       	rcall	.-280    	; 0x5fe <navigation_get_sensor>
     716:	2c 2f       	mov	r18, r28
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	48 1b       	sub	r20, r24
     71e:	51 09       	sbc	r21, r1
     720:	ca 01       	movw	r24, r20
     722:	99 23       	and	r25, r25
     724:	1c f4       	brge	.+6      	; 0x72c <navigation_direction_regulation+0xd6>
     726:	91 95       	neg	r25
     728:	81 95       	neg	r24
     72a:	91 09       	sbc	r25, r1
     72c:	0a 97       	sbiw	r24, 0x0a	; 10
     72e:	0c f0       	brlt	.+2      	; 0x732 <navigation_direction_regulation+0xdc>
     730:	89 c0       	rjmp	.+274    	; 0x844 <navigation_direction_regulation+0x1ee>
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	63 df       	rcall	.-314    	; 0x5fe <navigation_get_sensor>
     738:	82 33       	cpi	r24, 0x32	; 50
     73a:	08 f0       	brcs	.+2      	; 0x73e <navigation_direction_regulation+0xe8>
     73c:	83 c0       	rjmp	.+262    	; 0x844 <navigation_direction_regulation+0x1ee>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	5d df       	rcall	.-326    	; 0x5fe <navigation_get_sensor>
     744:	c8 2f       	mov	r28, r24
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	59 df       	rcall	.-334    	; 0x5fe <navigation_get_sensor>
     74c:	d8 2f       	mov	r29, r24
     74e:	c7 01       	movw	r24, r14
     750:	b6 01       	movw	r22, r12
     752:	0e 94 bd 0c 	call	0x197a	; 0x197a <cos>
     756:	6b 01       	movw	r12, r22
     758:	7c 01       	movw	r14, r24
     75a:	6d 2f       	mov	r22, r29
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	6c 0f       	add	r22, r28
     760:	71 1d       	adc	r23, r1
     762:	88 27       	eor	r24, r24
     764:	77 fd       	sbrc	r23, 7
     766:	80 95       	com	r24
     768:	98 2f       	mov	r25, r24
     76a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__floatsisf>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	5f e3       	ldi	r21, 0x3F	; 63
     776:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 ef       	ldi	r20, 0xF0	; 240
     780:	50 e4       	ldi	r21, 0x40	; 64
     782:	0e 94 2d 0c 	call	0x185a	; 0x185a <__addsf3>
     786:	a7 01       	movw	r20, r14
     788:	96 01       	movw	r18, r12
     78a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     78e:	9b 01       	movw	r18, r22
     790:	ac 01       	movw	r20, r24
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e2       	ldi	r24, 0x20	; 32
     798:	92 e4       	ldi	r25, 0x42	; 66
     79a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__subsf3>
     79e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     7a2:	cb 01       	movw	r24, r22
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	03 97       	sbiw	r24, 0x03	; 3
     7a8:	08 f4       	brcc	.+2      	; 0x7ac <navigation_direction_regulation+0x156>
     7aa:	47 c0       	rjmp	.+142    	; 0x83a <navigation_direction_regulation+0x1e4>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__floatsisf>
     7b8:	20 91 03 01 	lds	r18, 0x0103
     7bc:	30 91 04 01 	lds	r19, 0x0104
     7c0:	40 91 05 01 	lds	r20, 0x0105
     7c4:	50 91 06 01 	lds	r21, 0x0106
     7c8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3>
     7cc:	0e 94 91 0c 	call	0x1922	; 0x1922 <atan>
     7d0:	c6 2e       	mov	r12, r22
     7d2:	d7 2e       	mov	r13, r23
     7d4:	e8 2e       	mov	r14, r24
     7d6:	f9 2e       	mov	r15, r25
		if(dir < 0)
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	a9 01       	movw	r20, r18
     7de:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__cmpsf2>
     7e2:	88 23       	and	r24, r24
     7e4:	7c f4       	brge	.+30     	; 0x804 <navigation_direction_regulation+0x1ae>
		{
			dir += 2*PI;
     7e6:	2b ed       	ldi	r18, 0xDB	; 219
     7e8:	3f e0       	ldi	r19, 0x0F	; 15
     7ea:	49 ec       	ldi	r20, 0xC9	; 201
     7ec:	50 e4       	ldi	r21, 0x40	; 64
     7ee:	6c 2d       	mov	r22, r12
     7f0:	7d 2d       	mov	r23, r13
     7f2:	8e 2d       	mov	r24, r14
     7f4:	9f 2d       	mov	r25, r15
     7f6:	0e 94 2d 0c 	call	0x185a	; 0x185a <__addsf3>
     7fa:	c6 2e       	mov	r12, r22
     7fc:	d7 2e       	mov	r13, r23
     7fe:	e8 2e       	mov	r14, r24
     800:	f9 2e       	mov	r15, r25
     802:	24 c0       	rjmp	.+72     	; 0x84c <navigation_direction_regulation+0x1f6>
		} else if(dir >= 2*PI)
     804:	2b ed       	ldi	r18, 0xDB	; 219
     806:	3f e0       	ldi	r19, 0x0F	; 15
     808:	49 ec       	ldi	r20, 0xC9	; 201
     80a:	50 e4       	ldi	r21, 0x40	; 64
     80c:	6c 2d       	mov	r22, r12
     80e:	7d 2d       	mov	r23, r13
     810:	8e 2d       	mov	r24, r14
     812:	9f 2d       	mov	r25, r15
     814:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__gesf2>
     818:	88 23       	and	r24, r24
     81a:	c4 f0       	brlt	.+48     	; 0x84c <navigation_direction_regulation+0x1f6>
		{
			dir -= 2*PI;
     81c:	2b ed       	ldi	r18, 0xDB	; 219
     81e:	3f e0       	ldi	r19, 0x0F	; 15
     820:	49 ec       	ldi	r20, 0xC9	; 201
     822:	50 e4       	ldi	r21, 0x40	; 64
     824:	6c 2d       	mov	r22, r12
     826:	7d 2d       	mov	r23, r13
     828:	8e 2d       	mov	r24, r14
     82a:	9f 2d       	mov	r25, r15
     82c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__subsf3>
     830:	c6 2e       	mov	r12, r22
     832:	d7 2e       	mov	r13, r23
     834:	e8 2e       	mov	r14, r24
     836:	f9 2e       	mov	r15, r25
     838:	09 c0       	rjmp	.+18     	; 0x84c <navigation_direction_regulation+0x1f6>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     83a:	c1 2c       	mov	r12, r1
     83c:	d1 2c       	mov	r13, r1
     83e:	e1 2c       	mov	r14, r1
     840:	f1 2c       	mov	r15, r1
     842:	04 c0       	rjmp	.+8      	; 0x84c <navigation_direction_regulation+0x1f6>
     844:	c1 2c       	mov	r12, r1
     846:	d1 2c       	mov	r13, r1
     848:	e1 2c       	mov	r14, r1
     84a:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     84c:	6c 2d       	mov	r22, r12
     84e:	7d 2d       	mov	r23, r13
     850:	8e 2d       	mov	r24, r14
     852:	9f 2d       	mov	r25, r15
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	08 95       	ret

00000862 <navigation_angle_offset>:
{
	gAutonomousWalk = walk;
}

float navigation_angle_offset()
{
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     86a:	80 91 07 01 	lds	r24, 0x0107
     86e:	88 23       	and	r24, r24
     870:	b9 f1       	breq	.+110    	; 0x8e0 <navigation_angle_offset+0x7e>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	c3 de       	rcall	.-634    	; 0x5fe <navigation_get_sensor>
     878:	f8 2e       	mov	r15, r24
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	bf de       	rcall	.-642    	; 0x5fe <navigation_get_sensor>
     880:	2f 2d       	mov	r18, r15
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	a9 01       	movw	r20, r18
     886:	48 1b       	sub	r20, r24
     888:	51 09       	sbc	r21, r1
     88a:	ca 01       	movw	r24, r20
     88c:	99 23       	and	r25, r25
     88e:	1c f4       	brge	.+6      	; 0x896 <navigation_angle_offset+0x34>
     890:	91 95       	neg	r25
     892:	81 95       	neg	r24
     894:	91 09       	sbc	r25, r1
     896:	0a 97       	sbiw	r24, 0x0a	; 10
     898:	0c f0       	brlt	.+2      	; 0x89c <navigation_angle_offset+0x3a>
     89a:	64 c0       	rjmp	.+200    	; 0x964 <navigation_angle_offset+0x102>
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	ae de       	rcall	.-676    	; 0x5fe <navigation_get_sensor>
     8a2:	82 33       	cpi	r24, 0x32	; 50
     8a4:	08 f0       	brcs	.+2      	; 0x8a8 <navigation_angle_offset+0x46>
     8a6:	5e c0       	rjmp	.+188    	; 0x964 <navigation_angle_offset+0x102>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	a8 de       	rcall	.-688    	; 0x5fe <navigation_get_sensor>
     8ae:	f8 2e       	mov	r15, r24
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a4 de       	rcall	.-696    	; 0x5fe <navigation_get_sensor>
     8b6:	6f 2d       	mov	r22, r15
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	68 1b       	sub	r22, r24
     8bc:	71 09       	sbc	r23, r1
     8be:	88 27       	eor	r24, r24
     8c0:	77 fd       	sbrc	r23, 7
     8c2:	80 95       	com	r24
     8c4:	98 2f       	mov	r25, r24
     8c6:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__floatsisf>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	48 e6       	ldi	r20, 0x68	; 104
     8d0:	51 e4       	ldi	r21, 0x41	; 65
     8d2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
     8d6:	0e 94 91 0c 	call	0x1922	; 0x1922 <atan>
     8da:	6b 01       	movw	r12, r22
     8dc:	7c 01       	movw	r14, r24
     8de:	33 c0       	rjmp	.+102    	; 0x946 <navigation_angle_offset+0xe4>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	8c de       	rcall	.-744    	; 0x5fe <navigation_get_sensor>
     8e6:	f8 2e       	mov	r15, r24
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	88 de       	rcall	.-752    	; 0x5fe <navigation_get_sensor>
     8ee:	2f 2d       	mov	r18, r15
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	a9 01       	movw	r20, r18
     8f4:	48 1b       	sub	r20, r24
     8f6:	51 09       	sbc	r21, r1
     8f8:	ca 01       	movw	r24, r20
     8fa:	99 23       	and	r25, r25
     8fc:	1c f4       	brge	.+6      	; 0x904 <navigation_angle_offset+0xa2>
     8fe:	91 95       	neg	r25
     900:	81 95       	neg	r24
     902:	91 09       	sbc	r25, r1
     904:	0a 97       	sbiw	r24, 0x0a	; 10
     906:	74 f5       	brge	.+92     	; 0x964 <navigation_angle_offset+0x102>
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	78 de       	rcall	.-784    	; 0x5fe <navigation_get_sensor>
     90e:	82 33       	cpi	r24, 0x32	; 50
     910:	48 f5       	brcc	.+82     	; 0x964 <navigation_angle_offset+0x102>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	73 de       	rcall	.-794    	; 0x5fe <navigation_get_sensor>
     918:	f8 2e       	mov	r15, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	6f de       	rcall	.-802    	; 0x5fe <navigation_get_sensor>
     920:	6f 2d       	mov	r22, r15
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	68 1b       	sub	r22, r24
     926:	71 09       	sbc	r23, r1
     928:	88 27       	eor	r24, r24
     92a:	77 fd       	sbrc	r23, 7
     92c:	80 95       	com	r24
     92e:	98 2f       	mov	r25, r24
     930:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__floatsisf>
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	48 e6       	ldi	r20, 0x68	; 104
     93a:	51 e4       	ldi	r21, 0x41	; 65
     93c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
     940:	f0 d7       	rcall	.+4064   	; 0x1922 <atan>
     942:	6b 01       	movw	r12, r22
     944:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     946:	c7 01       	movw	r24, r14
     948:	b6 01       	movw	r22, r12
     94a:	9f 77       	andi	r25, 0x7F	; 127
     94c:	29 e2       	ldi	r18, 0x29	; 41
     94e:	3c e5       	ldi	r19, 0x5C	; 92
     950:	4f e8       	ldi	r20, 0x8F	; 143
     952:	5d e3       	ldi	r21, 0x3D	; 61
     954:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__gesf2>
     958:	18 16       	cp	r1, r24
     95a:	3c f0       	brlt	.+14     	; 0x96a <navigation_angle_offset+0x108>
	{
		return angle;
	}
	else
	{
		return 0;
     95c:	c1 2c       	mov	r12, r1
     95e:	d1 2c       	mov	r13, r1
     960:	76 01       	movw	r14, r12
     962:	03 c0       	rjmp	.+6      	; 0x96a <navigation_angle_offset+0x108>
     964:	c1 2c       	mov	r12, r1
     966:	d1 2c       	mov	r13, r1
     968:	76 01       	movw	r14, r12
     96a:	7c 2d       	mov	r23, r12
	}
}
     96c:	67 2f       	mov	r22, r23
     96e:	7d 2d       	mov	r23, r13
     970:	8e 2d       	mov	r24, r14
     972:	9f 2d       	mov	r25, r15
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	df 90       	pop	r13
     97a:	cf 90       	pop	r12
     97c:	08 95       	ret

0000097e <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     97e:	1f 92       	push	r1
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	0f 92       	push	r0
     986:	11 24       	eor	r1, r1
     988:	0b b6       	in	r0, 0x3b	; 59
     98a:	0f 92       	push	r0
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	ef 93       	push	r30
     9a2:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	85 dd       	rcall	.-1270   	; 0x4b2 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	89 dd       	rcall	.-1262   	; 0x4be <navigation_set_autonomous_walk>
}
     9ac:	ff 91       	pop	r31
     9ae:	ef 91       	pop	r30
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	7f 91       	pop	r23
     9ba:	6f 91       	pop	r22
     9bc:	5f 91       	pop	r21
     9be:	4f 91       	pop	r20
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	0f 90       	pop	r0
     9c6:	0b be       	out	0x3b, r0	; 59
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	0b b6       	in	r0, 0x3b	; 59
     9de:	0f 92       	push	r0
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	5b dd       	rcall	.-1354   	; 0x4b2 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	5f dd       	rcall	.-1346   	; 0x4be <navigation_set_autonomous_walk>
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	0f 90       	pop	r0
     a1a:	0b be       	out	0x3b, r0	; 59
     a1c:	0f 90       	pop	r0
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	0f 90       	pop	r0
     a22:	1f 90       	pop	r1
     a24:	18 95       	reti

00000a26 <main>:
#include "Navigation.h"
#include "autonomouswalk.h"

int main(void)
{
	USART_init();
     a26:	59 d4       	rcall	.+2226   	; 0x12da <USART_init>
	sei();
     a28:	78 94       	sei
	TWI_init(ST_ADDRESS);
     a2a:	80 e2       	ldi	r24, 0x20	; 32
     a2c:	f1 d0       	rcall	.+482    	; 0xc10 <TWI_init>
	init_counters();
     a2e:	c1 dc       	rcall	.-1662   	; 0x3b2 <init_counters>
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
     a30:	81 b1       	in	r24, 0x01	; 1
     a32:	83 60       	ori	r24, 0x03	; 3
     a34:	81 b9       	out	0x01, r24	; 1
     a36:	2f ef       	ldi	r18, 0xFF	; 255
     a38:	83 e2       	ldi	r24, 0x23	; 35
     a3a:	94 ef       	ldi	r25, 0xF4	; 244
     a3c:	21 50       	subi	r18, 0x01	; 1
     a3e:	80 40       	sbci	r24, 0x00	; 0
     a40:	90 40       	sbci	r25, 0x00	; 0
     a42:	e1 f7       	brne	.-8      	; 0xa3c <main+0x16>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <main+0x20>
     a46:	00 00       	nop
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	39 dd       	rcall	.-1422   	; 0x4be <navigation_set_autonomous_walk>
		}
		else
		{
			if(TWI_command_flag())
			{
				PORTA ^= (1<<PORTA1);
     a4c:	c2 e0       	ldi	r28, 0x02	; 2
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
    while(1)
    {
		if(TWI_sensor_flag())
     a4e:	29 d2       	rcall	.+1106   	; 0xea2 <TWI_sensor_flag>
     a50:	81 11       	cpse	r24, r1
		{
			navigation_fill_buffer();
     a52:	38 dd       	rcall	.-1424   	; 0x4c4 <navigation_fill_buffer>
		}
		if(TWI_autonom_settings_flag())
     a54:	44 d2       	rcall	.+1160   	; 0xede <TWI_autonom_settings_flag>
     a56:	88 23       	and	r24, r24
     a58:	79 f0       	breq	.+30     	; 0xa78 <main+0x52>
		{
			uint8_t sett = TWI_get_autonom_settings();
     a5a:	20 d2       	rcall	.+1088   	; 0xe9c <TWI_get_autonom_settings>
			if(sett == 0)
     a5c:	81 11       	cpse	r24, r1
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <main+0x3e>
			{
				navigation_set_autonomous_walk(0);
     a60:	2e dd       	rcall	.-1444   	; 0x4be <navigation_set_autonomous_walk>
     a62:	0a c0       	rjmp	.+20     	; 0xa78 <main+0x52>
			}
			else if(sett == 1)
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	21 f4       	brne	.+8      	; 0xa70 <main+0x4a>
			{
				navigation_set_autonomous_walk(1);
     a68:	2a dd       	rcall	.-1452   	; 0x4be <navigation_set_autonomous_walk>
				navigation_set_algorithm(1);
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	22 dd       	rcall	.-1468   	; 0x4b2 <navigation_set_algorithm>
     a6e:	04 c0       	rjmp	.+8      	; 0xa78 <main+0x52>
			}
			else //sett == 2
			{
				navigation_set_autonomous_walk(1);
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	25 dd       	rcall	.-1462   	; 0x4be <navigation_set_autonomous_walk>
				navigation_set_algorithm(0);
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	1d dd       	rcall	.-1478   	; 0x4b2 <navigation_set_algorithm>
			}
		}
		
		if(navigation_autonomous_walk() == 1)
     a78:	1f dd       	rcall	.-1474   	; 0x4b8 <navigation_autonomous_walk>
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	49 f4       	brne	.+18     	; 0xa90 <main+0x6a>
		{
			if(TWI_control_settings_flag())
     a7e:	25 d2       	rcall	.+1098   	; 0xeca <TWI_control_settings_flag>
     a80:	88 23       	and	r24, r24
     a82:	21 f0       	breq	.+8      	; 0xa8c <main+0x66>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	04 d2       	rcall	.+1032   	; 0xe92 <TWI_get_control_setting>
     a8a:	01 dd       	rcall	.-1534   	; 0x48e <navigation_set_Kp>
			}
			autonomouswalk_walk();
     a8c:	4a dc       	rcall	.-1900   	; 0x322 <autonomouswalk_walk>
     a8e:	07 c0       	rjmp	.+14     	; 0xa9e <main+0x78>
		}
		else
		{
			if(TWI_command_flag())
     a90:	12 d2       	rcall	.+1060   	; 0xeb6 <TWI_command_flag>
     a92:	88 23       	and	r24, r24
     a94:	21 f0       	breq	.+8      	; 0xa9e <main+0x78>
			{
				PORTA ^= (1<<PORTA1);
     a96:	82 b1       	in	r24, 0x02	; 2
     a98:	8c 27       	eor	r24, r28
     a9a:	82 b9       	out	0x02, r24	; 2
				USART_SendCommand();
     a9c:	f0 d4       	rcall	.+2528   	; 0x147e <USART_SendCommand>
			}
		}
		USART_DecodeRxFIFO();
     a9e:	28 d6       	rcall	.+3152   	; 0x16f0 <USART_DecodeRxFIFO>
    }
     aa0:	d6 cf       	rjmp	.-84     	; 0xa4e <main+0x28>

00000aa2 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	11 24       	eor	r1, r1
	TCNT1 = 0;
     aac:	10 92 85 00 	sts	0x0085, r1
     ab0:	10 92 84 00 	sts	0x0084, r1
	
	/*if(USART_ready())
	{
		PORTA ^= (1<<PORTA0);
	}*/
}
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
	TCNT3 = 0;
     ac8:	10 92 95 00 	sts	0x0095, r1
     acc:	10 92 94 00 	sts	0x0094, r1
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <set_twi_reciever_enable>:
     ada:	85 e4       	ldi	r24, 0x45	; 69
     adc:	80 93 bc 00 	sts	0x00BC, r24
     ae0:	08 95       	ret

00000ae2 <clear_int>:
     ae2:	81 ec       	ldi	r24, 0xC1	; 193
     ae4:	80 93 bc 00 	sts	0x00BC, r24
     ae8:	08 95       	ret

00000aea <start_bus>:
     aea:	84 ea       	ldi	r24, 0xA4	; 164
     aec:	80 93 bc 00 	sts	0x00BC, r24
     af0:	08 95       	ret

00000af2 <stop_bus>:
     af2:	85 ed       	ldi	r24, 0xD5	; 213
     af4:	80 93 bc 00 	sts	0x00BC, r24
     af8:	08 95       	ret

00000afa <Error>:
     afa:	80 91 b9 00 	lds	r24, 0x00B9
     afe:	88 7f       	andi	r24, 0xF8	; 248
     b00:	88 33       	cpi	r24, 0x38	; 56
     b02:	09 f0       	breq	.+2      	; 0xb06 <Error+0xc>
     b04:	f6 cf       	rjmp	.-20     	; 0xaf2 <stop_bus>
     b06:	ed cf       	rjmp	.-38     	; 0xae2 <clear_int>

00000b08 <get_data>:
     b08:	80 91 bb 00 	lds	r24, 0x00BB
     b0c:	08 95       	ret

00000b0e <wait_for_bus>:
     b0e:	ec eb       	ldi	r30, 0xBC	; 188
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	88 23       	and	r24, r24
     b16:	ec f7       	brge	.-6      	; 0xb12 <wait_for_bus+0x4>
     b18:	08 95       	ret

00000b1a <send_data_and_wait>:
     b1a:	80 93 bb 00 	sts	0x00BB, r24
     b1e:	84 e8       	ldi	r24, 0x84	; 132
     b20:	80 93 bc 00 	sts	0x00BC, r24
     b24:	f4 cf       	rjmp	.-24     	; 0xb0e <wait_for_bus>

00000b26 <stop_twi>:
     b26:	10 92 18 24 	sts	0x2418, r1
     b2a:	10 92 17 24 	sts	0x2417, r1
     b2e:	10 92 22 24 	sts	0x2422, r1
     b32:	10 92 21 24 	sts	0x2421, r1
     b36:	10 92 0d 24 	sts	0x240D, r1
     b3a:	10 92 0c 24 	sts	0x240C, r1
     b3e:	10 92 12 24 	sts	0x2412, r1
     b42:	10 92 11 24 	sts	0x2411, r1
     b46:	10 92 15 24 	sts	0x2415, r1
     b4a:	10 92 14 24 	sts	0x2414, r1
     b4e:	08 95       	ret

00000b50 <reset_TWI>:
     b50:	ec eb       	ldi	r30, 0xBC	; 188
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	80 6c       	ori	r24, 0xC0	; 192
     b58:	80 83       	st	Z, r24
     b5a:	08 95       	ret

00000b5c <get_sensor_from_bus>:
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	c0 91 21 24 	lds	r28, 0x2421
     b64:	d0 91 22 24 	lds	r29, 0x2422
     b68:	c8 30       	cpi	r28, 0x08	; 8
     b6a:	d1 05       	cpc	r29, r1
     b6c:	91 f4       	brne	.+36     	; 0xb92 <get_sensor_from_bus+0x36>
     b6e:	ed ec       	ldi	r30, 0xCD	; 205
     b70:	f2 e2       	ldi	r31, 0x22	; 34
     b72:	a3 e2       	ldi	r26, 0x23	; 35
     b74:	b4 e2       	ldi	r27, 0x24	; 36
     b76:	85 ed       	ldi	r24, 0xD5	; 213
     b78:	92 e2       	ldi	r25, 0x22	; 34
     b7a:	21 91       	ld	r18, Z+
     b7c:	2d 93       	st	X+, r18
     b7e:	e8 17       	cp	r30, r24
     b80:	f9 07       	cpc	r31, r25
     b82:	d9 f7       	brne	.-10     	; 0xb7a <get_sensor_from_bus+0x1e>
     b84:	c1 df       	rcall	.-126    	; 0xb08 <get_data>
     b86:	80 93 1b 24 	sts	0x241B, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	80 93 c0 22 	sts	0x22C0, r24
     b90:	0d c0       	rjmp	.+26     	; 0xbac <get_sensor_from_bus+0x50>
     b92:	ba df       	rcall	.-140    	; 0xb08 <get_data>
     b94:	c3 53       	subi	r28, 0x33	; 51
     b96:	dd 4d       	sbci	r29, 0xDD	; 221
     b98:	88 83       	st	Y, r24
     b9a:	80 91 21 24 	lds	r24, 0x2421
     b9e:	90 91 22 24 	lds	r25, 0x2422
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	90 93 22 24 	sts	0x2422, r25
     ba8:	80 93 21 24 	sts	0x2421, r24
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <get_control_settings_from_bus>:
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	c0 91 11 24 	lds	r28, 0x2411
     bba:	d0 91 12 24 	lds	r29, 0x2412
     bbe:	a4 df       	rcall	.-184    	; 0xb08 <get_data>
     bc0:	c2 5f       	subi	r28, 0xF2	; 242
     bc2:	db 4d       	sbci	r29, 0xDB	; 219
     bc4:	88 83       	st	Y, r24
     bc6:	10 92 12 24 	sts	0x2412, r1
     bca:	10 92 11 24 	sts	0x2411, r1
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <get_autonom_settings_from_bus>:
     bd4:	99 df       	rcall	.-206    	; 0xb08 <get_data>
     bd6:	80 93 0c 23 	sts	0x230C, r24
     bda:	08 95       	ret

00000bdc <get_char_from_bus>:
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	c0 91 0c 24 	lds	r28, 0x240C
     be4:	d0 91 0d 24 	lds	r29, 0x240D
     be8:	8f df       	rcall	.-226    	; 0xb08 <get_data>
     bea:	c3 5f       	subi	r28, 0xF3	; 243
     bec:	dc 4d       	sbci	r29, 0xDC	; 220
     bee:	88 83       	st	Y, r24
     bf0:	80 91 0c 24 	lds	r24, 0x240C
     bf4:	90 91 0d 24 	lds	r25, 0x240D
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	90 93 0d 24 	sts	0x240D, r25
     bfe:	80 93 0c 24 	sts	0x240C, r24
     c02:	90 93 1d 24 	sts	0x241D, r25
     c06:	80 93 1c 24 	sts	0x241C, r24
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <TWI_init>:
     c10:	80 93 13 24 	sts	0x2413, r24
     c14:	80 34       	cpi	r24, 0x40	; 64
     c16:	79 f0       	breq	.+30     	; 0xc36 <TWI_init+0x26>
     c18:	80 38       	cpi	r24, 0x80	; 128
     c1a:	19 f0       	breq	.+6      	; 0xc22 <TWI_init+0x12>
     c1c:	80 32       	cpi	r24, 0x20	; 32
     c1e:	d1 f4       	brne	.+52     	; 0xc54 <TWI_init+0x44>
     c20:	12 c0       	rjmp	.+36     	; 0xc46 <TWI_init+0x36>
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	88 b9       	out	0x08, r24	; 8
     c26:	59 df       	rcall	.-334    	; 0xada <set_twi_reciever_enable>
     c28:	8f e3       	ldi	r24, 0x3F	; 63
     c2a:	80 93 b8 00 	sts	0x00B8, r24
     c2e:	81 e8       	ldi	r24, 0x81	; 129
     c30:	80 93 ba 00 	sts	0x00BA, r24
     c34:	08 95       	ret
     c36:	8f e3       	ldi	r24, 0x3F	; 63
     c38:	80 93 b8 00 	sts	0x00B8, r24
     c3c:	4e df       	rcall	.-356    	; 0xada <set_twi_reciever_enable>
     c3e:	80 e4       	ldi	r24, 0x40	; 64
     c40:	80 93 ba 00 	sts	0x00BA, r24
     c44:	08 95       	ret
     c46:	8f e3       	ldi	r24, 0x3F	; 63
     c48:	80 93 b8 00 	sts	0x00B8, r24
     c4c:	46 df       	rcall	.-372    	; 0xada <set_twi_reciever_enable>
     c4e:	81 e2       	ldi	r24, 0x21	; 33
     c50:	80 93 ba 00 	sts	0x00BA, r24
     c54:	08 95       	ret

00000c56 <TWI_send_command>:
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	c8 2f       	mov	r28, r24
     c5e:	d6 2f       	mov	r29, r22
     c60:	14 2f       	mov	r17, r20
     c62:	43 df       	rcall	.-378    	; 0xaea <start_bus>
     c64:	54 df       	rcall	.-344    	; 0xb0e <wait_for_bus>
     c66:	90 91 b9 00 	lds	r25, 0x00B9
     c6a:	98 7f       	andi	r25, 0xF8	; 248
     c6c:	98 30       	cpi	r25, 0x08	; 8
     c6e:	19 f0       	breq	.+6      	; 0xc76 <TWI_send_command+0x20>
     c70:	44 df       	rcall	.-376    	; 0xafa <Error>
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	34 c0       	rjmp	.+104    	; 0xcde <TWI_send_command+0x88>
     c76:	80 e2       	ldi	r24, 0x20	; 32
     c78:	50 df       	rcall	.-352    	; 0xb1a <send_data_and_wait>
     c7a:	80 91 b9 00 	lds	r24, 0x00B9
     c7e:	88 7f       	andi	r24, 0xF8	; 248
     c80:	88 31       	cpi	r24, 0x18	; 24
     c82:	19 f0       	breq	.+6      	; 0xc8a <TWI_send_command+0x34>
     c84:	3a df       	rcall	.-396    	; 0xafa <Error>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	2a c0       	rjmp	.+84     	; 0xcde <TWI_send_command+0x88>
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	46 df       	rcall	.-372    	; 0xb1a <send_data_and_wait>
     c8e:	80 91 b9 00 	lds	r24, 0x00B9
     c92:	88 7f       	andi	r24, 0xF8	; 248
     c94:	88 32       	cpi	r24, 0x28	; 40
     c96:	19 f0       	breq	.+6      	; 0xc9e <TWI_send_command+0x48>
     c98:	30 df       	rcall	.-416    	; 0xafa <Error>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	20 c0       	rjmp	.+64     	; 0xcde <TWI_send_command+0x88>
     c9e:	8c 2f       	mov	r24, r28
     ca0:	3c df       	rcall	.-392    	; 0xb1a <send_data_and_wait>
     ca2:	80 91 b9 00 	lds	r24, 0x00B9
     ca6:	88 7f       	andi	r24, 0xF8	; 248
     ca8:	88 32       	cpi	r24, 0x28	; 40
     caa:	19 f0       	breq	.+6      	; 0xcb2 <TWI_send_command+0x5c>
     cac:	26 df       	rcall	.-436    	; 0xafa <Error>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	16 c0       	rjmp	.+44     	; 0xcde <TWI_send_command+0x88>
     cb2:	8d 2f       	mov	r24, r29
     cb4:	32 df       	rcall	.-412    	; 0xb1a <send_data_and_wait>
     cb6:	80 91 b9 00 	lds	r24, 0x00B9
     cba:	88 7f       	andi	r24, 0xF8	; 248
     cbc:	88 32       	cpi	r24, 0x28	; 40
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <TWI_send_command+0x70>
     cc0:	1c df       	rcall	.-456    	; 0xafa <Error>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	0c c0       	rjmp	.+24     	; 0xcde <TWI_send_command+0x88>
     cc6:	81 2f       	mov	r24, r17
     cc8:	28 df       	rcall	.-432    	; 0xb1a <send_data_and_wait>
     cca:	80 91 b9 00 	lds	r24, 0x00B9
     cce:	88 7f       	andi	r24, 0xF8	; 248
     cd0:	88 32       	cpi	r24, 0x28	; 40
     cd2:	19 f0       	breq	.+6      	; 0xcda <TWI_send_command+0x84>
     cd4:	12 df       	rcall	.-476    	; 0xafa <Error>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <TWI_send_command+0x88>
     cda:	0b df       	rcall	.-490    	; 0xaf2 <stop_bus>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	08 95       	ret

00000ce6 <TWI_send_string>:
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	c8 2f       	mov	r28, r24
     cf4:	e6 2e       	mov	r14, r22
     cf6:	f7 2e       	mov	r15, r23
     cf8:	f8 de       	rcall	.-528    	; 0xaea <start_bus>
     cfa:	09 df       	rcall	.-494    	; 0xb0e <wait_for_bus>
     cfc:	90 91 b9 00 	lds	r25, 0x00B9
     d00:	98 7f       	andi	r25, 0xF8	; 248
     d02:	98 30       	cpi	r25, 0x08	; 8
     d04:	19 f0       	breq	.+6      	; 0xd0c <TWI_send_string+0x26>
     d06:	f9 de       	rcall	.-526    	; 0xafa <Error>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	2c c0       	rjmp	.+88     	; 0xd64 <TWI_send_string+0x7e>
     d0c:	8c 2f       	mov	r24, r28
     d0e:	05 df       	rcall	.-502    	; 0xb1a <send_data_and_wait>
     d10:	80 91 b9 00 	lds	r24, 0x00B9
     d14:	88 7f       	andi	r24, 0xF8	; 248
     d16:	88 31       	cpi	r24, 0x18	; 24
     d18:	19 f0       	breq	.+6      	; 0xd20 <TWI_send_string+0x3a>
     d1a:	ef de       	rcall	.-546    	; 0xafa <Error>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	22 c0       	rjmp	.+68     	; 0xd64 <TWI_send_string+0x7e>
     d20:	89 e1       	ldi	r24, 0x19	; 25
     d22:	fb de       	rcall	.-522    	; 0xb1a <send_data_and_wait>
     d24:	80 91 b9 00 	lds	r24, 0x00B9
     d28:	88 7f       	andi	r24, 0xF8	; 248
     d2a:	88 32       	cpi	r24, 0x28	; 40
     d2c:	29 f4       	brne	.+10     	; 0xd38 <TWI_send_string+0x52>
     d2e:	0e 2d       	mov	r16, r14
     d30:	1f 2d       	mov	r17, r15
     d32:	c0 e0       	ldi	r28, 0x00	; 0
     d34:	d0 e0       	ldi	r29, 0x00	; 0
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <TWI_send_string+0x62>
     d38:	e0 de       	rcall	.-576    	; 0xafa <Error>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	13 c0       	rjmp	.+38     	; 0xd64 <TWI_send_string+0x7e>
     d3e:	f8 01       	movw	r30, r16
     d40:	81 91       	ld	r24, Z+
     d42:	8f 01       	movw	r16, r30
     d44:	ea de       	rcall	.-556    	; 0xb1a <send_data_and_wait>
     d46:	21 96       	adiw	r28, 0x01	; 1
     d48:	ee 2d       	mov	r30, r14
     d4a:	ff 2d       	mov	r31, r15
     d4c:	df 01       	movw	r26, r30
     d4e:	0d 90       	ld	r0, X+
     d50:	00 20       	and	r0, r0
     d52:	e9 f7       	brne	.-6      	; 0xd4e <TWI_send_string+0x68>
     d54:	11 97       	sbiw	r26, 0x01	; 1
     d56:	ae 1b       	sub	r26, r30
     d58:	bf 0b       	sbc	r27, r31
     d5a:	ca 17       	cp	r28, r26
     d5c:	db 07       	cpc	r29, r27
     d5e:	78 f3       	brcs	.-34     	; 0xd3e <TWI_send_string+0x58>
     d60:	c8 de       	rcall	.-624    	; 0xaf2 <stop_bus>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	08 95       	ret

00000d72 <TWI_send_string_fixed_length>:
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	c8 2f       	mov	r28, r24
     d80:	e6 2e       	mov	r14, r22
     d82:	f7 2e       	mov	r15, r23
     d84:	8a 01       	movw	r16, r20
     d86:	b1 de       	rcall	.-670    	; 0xaea <start_bus>
     d88:	c2 de       	rcall	.-636    	; 0xb0e <wait_for_bus>
     d8a:	90 91 b9 00 	lds	r25, 0x00B9
     d8e:	98 7f       	andi	r25, 0xF8	; 248
     d90:	98 30       	cpi	r25, 0x08	; 8
     d92:	19 f0       	breq	.+6      	; 0xd9a <TWI_send_string_fixed_length+0x28>
     d94:	b2 de       	rcall	.-668    	; 0xafa <Error>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	23 c0       	rjmp	.+70     	; 0xde0 <TWI_send_string_fixed_length+0x6e>
     d9a:	8c 2f       	mov	r24, r28
     d9c:	be de       	rcall	.-644    	; 0xb1a <send_data_and_wait>
     d9e:	80 91 b9 00 	lds	r24, 0x00B9
     da2:	88 7f       	andi	r24, 0xF8	; 248
     da4:	88 31       	cpi	r24, 0x18	; 24
     da6:	19 f0       	breq	.+6      	; 0xdae <TWI_send_string_fixed_length+0x3c>
     da8:	a8 de       	rcall	.-688    	; 0xafa <Error>
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	19 c0       	rjmp	.+50     	; 0xde0 <TWI_send_string_fixed_length+0x6e>
     dae:	89 e1       	ldi	r24, 0x19	; 25
     db0:	b4 de       	rcall	.-664    	; 0xb1a <send_data_and_wait>
     db2:	80 91 b9 00 	lds	r24, 0x00B9
     db6:	88 7f       	andi	r24, 0xF8	; 248
     db8:	88 32       	cpi	r24, 0x28	; 40
     dba:	21 f4       	brne	.+8      	; 0xdc4 <TWI_send_string_fixed_length+0x52>
     dbc:	10 16       	cp	r1, r16
     dbe:	11 06       	cpc	r1, r17
     dc0:	24 f0       	brlt	.+8      	; 0xdca <TWI_send_string_fixed_length+0x58>
     dc2:	0c c0       	rjmp	.+24     	; 0xddc <TWI_send_string_fixed_length+0x6a>
     dc4:	9a de       	rcall	.-716    	; 0xafa <Error>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	0b c0       	rjmp	.+22     	; 0xde0 <TWI_send_string_fixed_length+0x6e>
     dca:	ce 2d       	mov	r28, r14
     dcc:	df 2d       	mov	r29, r15
     dce:	0c 0f       	add	r16, r28
     dd0:	1d 1f       	adc	r17, r29
     dd2:	89 91       	ld	r24, Y+
     dd4:	a2 de       	rcall	.-700    	; 0xb1a <send_data_and_wait>
     dd6:	c0 17       	cp	r28, r16
     dd8:	d1 07       	cpc	r29, r17
     dda:	d9 f7       	brne	.-10     	; 0xdd2 <TWI_send_string_fixed_length+0x60>
     ddc:	8a de       	rcall	.-748    	; 0xaf2 <stop_bus>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	08 95       	ret

00000dee <TWI_send_float>:
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <TWI_send_float+0xe>
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <TWI_send_float+0x10>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	18 2f       	mov	r17, r24
     e04:	49 83       	std	Y+1, r20	; 0x01
     e06:	5a 83       	std	Y+2, r21	; 0x02
     e08:	6b 83       	std	Y+3, r22	; 0x03
     e0a:	7c 83       	std	Y+4, r23	; 0x04
     e0c:	6e de       	rcall	.-804    	; 0xaea <start_bus>
     e0e:	7f de       	rcall	.-770    	; 0xb0e <wait_for_bus>
     e10:	90 91 b9 00 	lds	r25, 0x00B9
     e14:	98 7f       	andi	r25, 0xF8	; 248
     e16:	98 30       	cpi	r25, 0x08	; 8
     e18:	19 f0       	breq	.+6      	; 0xe20 <TWI_send_float+0x32>
     e1a:	6f de       	rcall	.-802    	; 0xafa <Error>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	24 c0       	rjmp	.+72     	; 0xe68 <TWI_send_float+0x7a>
     e20:	81 2f       	mov	r24, r17
     e22:	7b de       	rcall	.-778    	; 0xb1a <send_data_and_wait>
     e24:	80 91 b9 00 	lds	r24, 0x00B9
     e28:	88 7f       	andi	r24, 0xF8	; 248
     e2a:	88 31       	cpi	r24, 0x18	; 24
     e2c:	19 f0       	breq	.+6      	; 0xe34 <TWI_send_float+0x46>
     e2e:	65 de       	rcall	.-822    	; 0xafa <Error>
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	1a c0       	rjmp	.+52     	; 0xe68 <TWI_send_float+0x7a>
     e34:	86 e0       	ldi	r24, 0x06	; 6
     e36:	71 de       	rcall	.-798    	; 0xb1a <send_data_and_wait>
     e38:	80 91 b9 00 	lds	r24, 0x00B9
     e3c:	88 7f       	andi	r24, 0xF8	; 248
     e3e:	88 32       	cpi	r24, 0x28	; 40
     e40:	19 f0       	breq	.+6      	; 0xe48 <TWI_send_float+0x5a>
     e42:	5b de       	rcall	.-842    	; 0xafa <Error>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <TWI_send_float+0x7a>
     e48:	8e 01       	movw	r16, r28
     e4a:	0f 5f       	subi	r16, 0xFF	; 255
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	7e 01       	movw	r14, r28
     e50:	85 e0       	ldi	r24, 0x05	; 5
     e52:	e8 0e       	add	r14, r24
     e54:	f1 1c       	adc	r15, r1
     e56:	f8 01       	movw	r30, r16
     e58:	81 91       	ld	r24, Z+
     e5a:	8f 01       	movw	r16, r30
     e5c:	5e de       	rcall	.-836    	; 0xb1a <send_data_and_wait>
     e5e:	0e 15       	cp	r16, r14
     e60:	1f 05       	cpc	r17, r15
     e62:	c9 f7       	brne	.-14     	; 0xe56 <TWI_send_float+0x68>
     e64:	46 de       	rcall	.-884    	; 0xaf2 <stop_bus>
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	08 95       	ret

00000e7e <TWI_get_command>:
     e7e:	87 5f       	subi	r24, 0xF7	; 247
     e80:	9c 4d       	sbci	r25, 0xDC	; 220
     e82:	fc 01       	movw	r30, r24
     e84:	80 81       	ld	r24, Z
     e86:	08 95       	ret

00000e88 <TWI_get_sensor>:
     e88:	8d 5d       	subi	r24, 0xDD	; 221
     e8a:	9b 4d       	sbci	r25, 0xDB	; 219
     e8c:	fc 01       	movw	r30, r24
     e8e:	80 81       	ld	r24, Z
     e90:	08 95       	ret

00000e92 <TWI_get_control_setting>:
     e92:	82 5f       	subi	r24, 0xF2	; 242
     e94:	9b 4d       	sbci	r25, 0xDB	; 219
     e96:	fc 01       	movw	r30, r24
     e98:	80 81       	ld	r24, Z
     e9a:	08 95       	ret

00000e9c <TWI_get_autonom_settings>:
     e9c:	80 91 0c 23 	lds	r24, 0x230C
     ea0:	08 95       	ret

00000ea2 <TWI_sensor_flag>:
     ea2:	80 91 c0 22 	lds	r24, 0x22C0
     ea6:	88 23       	and	r24, r24
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <TWI_sensor_flag+0x10>
     eaa:	10 92 c0 22 	sts	0x22C0, r1
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	08 95       	ret
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	08 95       	ret

00000eb6 <TWI_command_flag>:
     eb6:	80 91 bf 22 	lds	r24, 0x22BF
     eba:	88 23       	and	r24, r24
     ebc:	21 f0       	breq	.+8      	; 0xec6 <TWI_command_flag+0x10>
     ebe:	10 92 bf 22 	sts	0x22BF, r1
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	08 95       	ret
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	08 95       	ret

00000eca <TWI_control_settings_flag>:
     eca:	80 91 be 22 	lds	r24, 0x22BE
     ece:	88 23       	and	r24, r24
     ed0:	21 f0       	breq	.+8      	; 0xeda <TWI_control_settings_flag+0x10>
     ed2:	10 92 be 22 	sts	0x22BE, r1
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	08 95       	ret
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	08 95       	ret

00000ede <TWI_autonom_settings_flag>:
     ede:	80 91 bd 22 	lds	r24, 0x22BD
     ee2:	88 23       	and	r24, r24
     ee4:	21 f0       	breq	.+8      	; 0xeee <TWI_autonom_settings_flag+0x10>
     ee6:	10 92 bd 22 	sts	0x22BD, r1
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	08 95       	ret
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	08 95       	ret

00000ef2 <write_to_TwiFIFO>:
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	e8 2e       	mov	r14, r24
     f00:	f9 2e       	mov	r15, r25
     f02:	e8 2f       	mov	r30, r24
     f04:	f9 2f       	mov	r31, r25
     f06:	df 01       	movw	r26, r30
     f08:	0d 90       	ld	r0, X+
     f0a:	00 20       	and	r0, r0
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <write_to_TwiFIFO+0x16>
     f0e:	11 97       	sbiw	r26, 0x01	; 1
     f10:	bd 01       	movw	r22, r26
     f12:	6e 1b       	sub	r22, r30
     f14:	7f 0b       	sbc	r23, r31
     f16:	80 91 08 01 	lds	r24, 0x0108
     f1a:	90 91 09 01 	lds	r25, 0x0109
     f1e:	74 da       	rcall	.-2840   	; 0x408 <FifoWrite>
     f20:	81 11       	cpse	r24, r1
     f22:	1e c0       	rjmp	.+60     	; 0xf60 <write_to_TwiFIFO+0x6e>
     f24:	0e 2d       	mov	r16, r14
     f26:	1f 2d       	mov	r17, r15
     f28:	c0 e0       	ldi	r28, 0x00	; 0
     f2a:	d0 e0       	ldi	r29, 0x00	; 0
     f2c:	0b c0       	rjmp	.+22     	; 0xf44 <write_to_TwiFIFO+0x52>
     f2e:	f8 01       	movw	r30, r16
     f30:	61 91       	ld	r22, Z+
     f32:	8f 01       	movw	r16, r30
     f34:	80 91 08 01 	lds	r24, 0x0108
     f38:	90 91 09 01 	lds	r25, 0x0109
     f3c:	65 da       	rcall	.-2870   	; 0x408 <FifoWrite>
     f3e:	81 11       	cpse	r24, r1
     f40:	11 c0       	rjmp	.+34     	; 0xf64 <write_to_TwiFIFO+0x72>
     f42:	21 96       	adiw	r28, 0x01	; 1
     f44:	ee 2d       	mov	r30, r14
     f46:	ff 2d       	mov	r31, r15
     f48:	df 01       	movw	r26, r30
     f4a:	0d 90       	ld	r0, X+
     f4c:	00 20       	and	r0, r0
     f4e:	e9 f7       	brne	.-6      	; 0xf4a <write_to_TwiFIFO+0x58>
     f50:	11 97       	sbiw	r26, 0x01	; 1
     f52:	ae 1b       	sub	r26, r30
     f54:	bf 0b       	sbc	r27, r31
     f56:	ca 17       	cp	r28, r26
     f58:	db 07       	cpc	r29, r27
     f5a:	48 f3       	brcs	.-46     	; 0xf2e <write_to_TwiFIFO+0x3c>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <write_to_TwiFIFO+0x74>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <write_to_TwiFIFO+0x74>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	08 95       	ret

00000f74 <__vector_26>:
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	0b b6       	in	r0, 0x3b	; 59
     f80:	0f 92       	push	r0
     f82:	2f 93       	push	r18
     f84:	3f 93       	push	r19
     f86:	4f 93       	push	r20
     f88:	5f 93       	push	r21
     f8a:	6f 93       	push	r22
     f8c:	7f 93       	push	r23
     f8e:	8f 93       	push	r24
     f90:	9f 93       	push	r25
     f92:	af 93       	push	r26
     f94:	bf 93       	push	r27
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
     f9e:	80 91 13 24 	lds	r24, 0x2413
     fa2:	80 34       	cpi	r24, 0x40	; 64
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <__vector_26+0x34>
     fa6:	87 c0       	rjmp	.+270    	; 0x10b6 <__vector_26+0x142>
     fa8:	80 38       	cpi	r24, 0x80	; 128
     faa:	21 f0       	breq	.+8      	; 0xfb4 <__vector_26+0x40>
     fac:	80 32       	cpi	r24, 0x20	; 32
     fae:	09 f0       	breq	.+2      	; 0xfb2 <__vector_26+0x3e>
     fb0:	7f c1       	rjmp	.+766    	; 0x12b0 <__vector_26+0x33c>
     fb2:	c9 c0       	rjmp	.+402    	; 0x1146 <__vector_26+0x1d2>
     fb4:	80 91 b9 00 	lds	r24, 0x00B9
     fb8:	88 7f       	andi	r24, 0xF8	; 248
     fba:	80 36       	cpi	r24, 0x60	; 96
     fbc:	29 f0       	breq	.+10     	; 0xfc8 <__vector_26+0x54>
     fbe:	80 91 b9 00 	lds	r24, 0x00B9
     fc2:	88 7f       	andi	r24, 0xF8	; 248
     fc4:	88 36       	cpi	r24, 0x68	; 104
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <__vector_26+0x5c>
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	80 93 16 24 	sts	0x2416, r24
     fce:	71 c0       	rjmp	.+226    	; 0x10b2 <__vector_26+0x13e>
     fd0:	80 91 b9 00 	lds	r24, 0x00B9
     fd4:	88 7f       	andi	r24, 0xF8	; 248
     fd6:	80 37       	cpi	r24, 0x70	; 112
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <__vector_26+0x70>
     fda:	80 91 b9 00 	lds	r24, 0x00B9
     fde:	88 7f       	andi	r24, 0xF8	; 248
     fe0:	88 37       	cpi	r24, 0x78	; 120
     fe2:	39 f4       	brne	.+14     	; 0xff2 <__vector_26+0x7e>
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	90 93 20 24 	sts	0x2420, r25
     fec:	80 93 1f 24 	sts	0x241F, r24
     ff0:	60 c0       	rjmp	.+192    	; 0x10b2 <__vector_26+0x13e>
     ff2:	80 91 b9 00 	lds	r24, 0x00B9
     ff6:	88 7f       	andi	r24, 0xF8	; 248
     ff8:	80 38       	cpi	r24, 0x80	; 128
     ffa:	b9 f5       	brne	.+110    	; 0x106a <__vector_26+0xf6>
     ffc:	80 91 16 24 	lds	r24, 0x2416
    1000:	88 23       	and	r24, r24
    1002:	41 f0       	breq	.+16     	; 0x1014 <__vector_26+0xa0>
    1004:	81 dd       	rcall	.-1278   	; 0xb08 <get_data>
    1006:	80 93 1f 24 	sts	0x241F, r24
    100a:	10 92 20 24 	sts	0x2420, r1
    100e:	10 92 16 24 	sts	0x2416, r1
    1012:	4f c0       	rjmp	.+158    	; 0x10b2 <__vector_26+0x13e>
    1014:	80 91 1f 24 	lds	r24, 0x241F
    1018:	90 91 20 24 	lds	r25, 0x2420
    101c:	85 30       	cpi	r24, 0x05	; 5
    101e:	91 05       	cpc	r25, r1
    1020:	71 f0       	breq	.+28     	; 0x103e <__vector_26+0xca>
    1022:	24 f4       	brge	.+8      	; 0x102c <__vector_26+0xb8>
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	09 f0       	breq	.+2      	; 0x102a <__vector_26+0xb6>
    1028:	44 c0       	rjmp	.+136    	; 0x10b2 <__vector_26+0x13e>
    102a:	07 c0       	rjmp	.+14     	; 0x103a <__vector_26+0xc6>
    102c:	86 30       	cpi	r24, 0x06	; 6
    102e:	91 05       	cpc	r25, r1
    1030:	51 f0       	breq	.+20     	; 0x1046 <__vector_26+0xd2>
    1032:	49 97       	sbiw	r24, 0x19	; 25
    1034:	09 f0       	breq	.+2      	; 0x1038 <__vector_26+0xc4>
    1036:	3d c0       	rjmp	.+122    	; 0x10b2 <__vector_26+0x13e>
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <__vector_26+0xce>
    103a:	bb dd       	rcall	.-1162   	; 0xbb2 <get_control_settings_from_bus>
    103c:	3a c0       	rjmp	.+116    	; 0x10b2 <__vector_26+0x13e>
    103e:	ca dd       	rcall	.-1132   	; 0xbd4 <get_autonom_settings_from_bus>
    1040:	38 c0       	rjmp	.+112    	; 0x10b2 <__vector_26+0x13e>
    1042:	cc dd       	rcall	.-1128   	; 0xbdc <get_char_from_bus>
    1044:	36 c0       	rjmp	.+108    	; 0x10b2 <__vector_26+0x13e>
    1046:	c0 91 14 24 	lds	r28, 0x2414
    104a:	d0 91 15 24 	lds	r29, 0x2415
    104e:	5c dd       	rcall	.-1352   	; 0xb08 <get_data>
    1050:	cb 5f       	subi	r28, 0xFB	; 251
    1052:	dc 4d       	sbci	r29, 0xDC	; 220
    1054:	88 83       	st	Y, r24
    1056:	80 91 14 24 	lds	r24, 0x2414
    105a:	90 91 15 24 	lds	r25, 0x2415
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	90 93 15 24 	sts	0x2415, r25
    1064:	80 93 14 24 	sts	0x2414, r24
    1068:	24 c0       	rjmp	.+72     	; 0x10b2 <__vector_26+0x13e>
    106a:	80 91 b9 00 	lds	r24, 0x00B9
    106e:	88 7f       	andi	r24, 0xF8	; 248
    1070:	80 39       	cpi	r24, 0x90	; 144
    1072:	11 f4       	brne	.+4      	; 0x1078 <__vector_26+0x104>
    1074:	73 dd       	rcall	.-1306   	; 0xb5c <get_sensor_from_bus>
    1076:	1d c0       	rjmp	.+58     	; 0x10b2 <__vector_26+0x13e>
    1078:	80 91 b9 00 	lds	r24, 0x00B9
    107c:	88 7f       	andi	r24, 0xF8	; 248
    107e:	80 3a       	cpi	r24, 0xA0	; 160
    1080:	c1 f4       	brne	.+48     	; 0x10b2 <__vector_26+0x13e>
    1082:	51 dd       	rcall	.-1374   	; 0xb26 <stop_twi>
    1084:	80 91 1f 24 	lds	r24, 0x241F
    1088:	90 91 20 24 	lds	r25, 0x2420
    108c:	85 30       	cpi	r24, 0x05	; 5
    108e:	91 05       	cpc	r25, r1
    1090:	49 f0       	breq	.+18     	; 0x10a4 <__vector_26+0x130>
    1092:	89 31       	cpi	r24, 0x19	; 25
    1094:	91 05       	cpc	r25, r1
    1096:	51 f0       	breq	.+20     	; 0x10ac <__vector_26+0x138>
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	59 f4       	brne	.+22     	; 0x10b2 <__vector_26+0x13e>
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	80 93 be 22 	sts	0x22BE, r24
    10a2:	07 c0       	rjmp	.+14     	; 0x10b2 <__vector_26+0x13e>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 bd 22 	sts	0x22BD, r24
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <__vector_26+0x13e>
    10ac:	8d e0       	ldi	r24, 0x0D	; 13
    10ae:	93 e2       	ldi	r25, 0x23	; 35
    10b0:	20 df       	rcall	.-448    	; 0xef2 <write_to_TwiFIFO>
    10b2:	4e dd       	rcall	.-1380   	; 0xb50 <reset_TWI>
    10b4:	fd c0       	rjmp	.+506    	; 0x12b0 <__vector_26+0x33c>
    10b6:	80 91 b9 00 	lds	r24, 0x00B9
    10ba:	88 7f       	andi	r24, 0xF8	; 248
    10bc:	80 36       	cpi	r24, 0x60	; 96
    10be:	29 f0       	breq	.+10     	; 0x10ca <__vector_26+0x156>
    10c0:	80 91 b9 00 	lds	r24, 0x00B9
    10c4:	88 7f       	andi	r24, 0xF8	; 248
    10c6:	88 36       	cpi	r24, 0x68	; 104
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <__vector_26+0x15e>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	80 93 16 24 	sts	0x2416, r24
    10d0:	38 c0       	rjmp	.+112    	; 0x1142 <__vector_26+0x1ce>
    10d2:	80 91 b9 00 	lds	r24, 0x00B9
    10d6:	88 7f       	andi	r24, 0xF8	; 248
    10d8:	80 38       	cpi	r24, 0x80	; 128
    10da:	e1 f4       	brne	.+56     	; 0x1114 <__vector_26+0x1a0>
    10dc:	80 91 16 24 	lds	r24, 0x2416
    10e0:	88 23       	and	r24, r24
    10e2:	41 f0       	breq	.+16     	; 0x10f4 <__vector_26+0x180>
    10e4:	11 dd       	rcall	.-1502   	; 0xb08 <get_data>
    10e6:	80 93 1f 24 	sts	0x241F, r24
    10ea:	10 92 20 24 	sts	0x2420, r1
    10ee:	10 92 16 24 	sts	0x2416, r1
    10f2:	27 c0       	rjmp	.+78     	; 0x1142 <__vector_26+0x1ce>
    10f4:	80 91 1f 24 	lds	r24, 0x241F
    10f8:	90 91 20 24 	lds	r25, 0x2420
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	91 05       	cpc	r25, r1
    1100:	19 f0       	breq	.+6      	; 0x1108 <__vector_26+0x194>
    1102:	49 97       	sbiw	r24, 0x19	; 25
    1104:	f1 f4       	brne	.+60     	; 0x1142 <__vector_26+0x1ce>
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <__vector_26+0x19c>
    1108:	ff dc       	rcall	.-1538   	; 0xb08 <get_data>
    110a:	80 93 1e 24 	sts	0x241E, r24
    110e:	19 c0       	rjmp	.+50     	; 0x1142 <__vector_26+0x1ce>
    1110:	65 dd       	rcall	.-1334   	; 0xbdc <get_char_from_bus>
    1112:	17 c0       	rjmp	.+46     	; 0x1142 <__vector_26+0x1ce>
    1114:	80 91 b9 00 	lds	r24, 0x00B9
    1118:	88 7f       	andi	r24, 0xF8	; 248
    111a:	80 3a       	cpi	r24, 0xA0	; 160
    111c:	91 f4       	brne	.+36     	; 0x1142 <__vector_26+0x1ce>
    111e:	03 dd       	rcall	.-1530   	; 0xb26 <stop_twi>
    1120:	80 91 1f 24 	lds	r24, 0x241F
    1124:	90 91 20 24 	lds	r25, 0x2420
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	91 05       	cpc	r25, r1
    112c:	19 f0       	breq	.+6      	; 0x1134 <__vector_26+0x1c0>
    112e:	49 97       	sbiw	r24, 0x19	; 25
    1130:	41 f4       	brne	.+16     	; 0x1142 <__vector_26+0x1ce>
    1132:	04 c0       	rjmp	.+8      	; 0x113c <__vector_26+0x1c8>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 bb 22 	sts	0x22BB, r24
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <__vector_26+0x1ce>
    113c:	8d e0       	ldi	r24, 0x0D	; 13
    113e:	93 e2       	ldi	r25, 0x23	; 35
    1140:	d8 de       	rcall	.-592    	; 0xef2 <write_to_TwiFIFO>
    1142:	06 dd       	rcall	.-1524   	; 0xb50 <reset_TWI>
    1144:	b5 c0       	rjmp	.+362    	; 0x12b0 <__vector_26+0x33c>
    1146:	80 91 b9 00 	lds	r24, 0x00B9
    114a:	88 7f       	andi	r24, 0xF8	; 248
    114c:	80 36       	cpi	r24, 0x60	; 96
    114e:	29 f0       	breq	.+10     	; 0x115a <__vector_26+0x1e6>
    1150:	80 91 b9 00 	lds	r24, 0x00B9
    1154:	88 7f       	andi	r24, 0xF8	; 248
    1156:	88 36       	cpi	r24, 0x68	; 104
    1158:	21 f4       	brne	.+8      	; 0x1162 <__vector_26+0x1ee>
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 93 16 24 	sts	0x2416, r24
    1160:	a6 c0       	rjmp	.+332    	; 0x12ae <__vector_26+0x33a>
    1162:	80 91 b9 00 	lds	r24, 0x00B9
    1166:	88 7f       	andi	r24, 0xF8	; 248
    1168:	80 37       	cpi	r24, 0x70	; 112
    116a:	29 f0       	breq	.+10     	; 0x1176 <__vector_26+0x202>
    116c:	80 91 b9 00 	lds	r24, 0x00B9
    1170:	88 7f       	andi	r24, 0xF8	; 248
    1172:	88 37       	cpi	r24, 0x78	; 120
    1174:	39 f4       	brne	.+14     	; 0x1184 <__vector_26+0x210>
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	90 93 20 24 	sts	0x2420, r25
    117e:	80 93 1f 24 	sts	0x241F, r24
    1182:	95 c0       	rjmp	.+298    	; 0x12ae <__vector_26+0x33a>
    1184:	80 91 b9 00 	lds	r24, 0x00B9
    1188:	88 7f       	andi	r24, 0xF8	; 248
    118a:	80 38       	cpi	r24, 0x80	; 128
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_26+0x21c>
    118e:	62 c0       	rjmp	.+196    	; 0x1254 <__vector_26+0x2e0>
    1190:	80 91 16 24 	lds	r24, 0x2416
    1194:	88 23       	and	r24, r24
    1196:	41 f0       	breq	.+16     	; 0x11a8 <__vector_26+0x234>
    1198:	b7 dc       	rcall	.-1682   	; 0xb08 <get_data>
    119a:	80 93 1f 24 	sts	0x241F, r24
    119e:	10 92 20 24 	sts	0x2420, r1
    11a2:	10 92 16 24 	sts	0x2416, r1
    11a6:	83 c0       	rjmp	.+262    	; 0x12ae <__vector_26+0x33a>
    11a8:	80 91 1f 24 	lds	r24, 0x241F
    11ac:	90 91 20 24 	lds	r25, 0x2420
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__vector_26+0x244>
    11b6:	4a c0       	rjmp	.+148    	; 0x124c <__vector_26+0x2d8>
    11b8:	1c f4       	brge	.+6      	; 0x11c0 <__vector_26+0x24c>
    11ba:	89 2b       	or	r24, r25
    11bc:	41 f0       	breq	.+16     	; 0x11ce <__vector_26+0x25a>
    11be:	77 c0       	rjmp	.+238    	; 0x12ae <__vector_26+0x33a>
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	91 05       	cpc	r25, r1
    11c4:	b1 f0       	breq	.+44     	; 0x11f2 <__vector_26+0x27e>
    11c6:	05 97       	sbiw	r24, 0x05	; 5
    11c8:	09 f0       	breq	.+2      	; 0x11cc <__vector_26+0x258>
    11ca:	71 c0       	rjmp	.+226    	; 0x12ae <__vector_26+0x33a>
    11cc:	41 c0       	rjmp	.+130    	; 0x1250 <__vector_26+0x2dc>
    11ce:	c0 91 17 24 	lds	r28, 0x2417
    11d2:	d0 91 18 24 	lds	r29, 0x2418
    11d6:	98 dc       	rcall	.-1744   	; 0xb08 <get_data>
    11d8:	c7 5f       	subi	r28, 0xF7	; 247
    11da:	dc 4d       	sbci	r29, 0xDC	; 220
    11dc:	88 83       	st	Y, r24
    11de:	80 91 17 24 	lds	r24, 0x2417
    11e2:	90 91 18 24 	lds	r25, 0x2418
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	90 93 18 24 	sts	0x2418, r25
    11ec:	80 93 17 24 	sts	0x2417, r24
    11f0:	5e c0       	rjmp	.+188    	; 0x12ae <__vector_26+0x33a>
    11f2:	8a dc       	rcall	.-1772   	; 0xb08 <get_data>
    11f4:	81 11       	cpse	r24, r1
    11f6:	0a c0       	rjmp	.+20     	; 0x120c <__vector_26+0x298>
    11f8:	80 91 19 24 	lds	r24, 0x2419
    11fc:	90 91 1a 24 	lds	r25, 0x241A
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	90 93 1a 24 	sts	0x241A, r25
    1206:	80 93 19 24 	sts	0x2419, r24
    120a:	09 c0       	rjmp	.+18     	; 0x121e <__vector_26+0x2aa>
    120c:	80 91 19 24 	lds	r24, 0x2419
    1210:	90 91 1a 24 	lds	r25, 0x241A
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	90 93 1a 24 	sts	0x241A, r25
    121a:	80 93 19 24 	sts	0x2419, r24
    121e:	80 91 19 24 	lds	r24, 0x2419
    1222:	90 91 1a 24 	lds	r25, 0x241A
    1226:	18 16       	cp	r1, r24
    1228:	19 06       	cpc	r1, r25
    122a:	3c f0       	brlt	.+14     	; 0x123a <__vector_26+0x2c6>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	90 93 1a 24 	sts	0x241A, r25
    1234:	80 93 19 24 	sts	0x2419, r24
    1238:	3a c0       	rjmp	.+116    	; 0x12ae <__vector_26+0x33a>
    123a:	08 97       	sbiw	r24, 0x08	; 8
    123c:	c4 f1       	brlt	.+112    	; 0x12ae <__vector_26+0x33a>
    123e:	87 e0       	ldi	r24, 0x07	; 7
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	90 93 1a 24 	sts	0x241A, r25
    1246:	80 93 19 24 	sts	0x2419, r24
    124a:	31 c0       	rjmp	.+98     	; 0x12ae <__vector_26+0x33a>
    124c:	b2 dc       	rcall	.-1692   	; 0xbb2 <get_control_settings_from_bus>
    124e:	2f c0       	rjmp	.+94     	; 0x12ae <__vector_26+0x33a>
    1250:	c1 dc       	rcall	.-1662   	; 0xbd4 <get_autonom_settings_from_bus>
    1252:	2d c0       	rjmp	.+90     	; 0x12ae <__vector_26+0x33a>
    1254:	80 91 b9 00 	lds	r24, 0x00B9
    1258:	88 7f       	andi	r24, 0xF8	; 248
    125a:	80 39       	cpi	r24, 0x90	; 144
    125c:	11 f4       	brne	.+4      	; 0x1262 <__vector_26+0x2ee>
    125e:	7e dc       	rcall	.-1796   	; 0xb5c <get_sensor_from_bus>
    1260:	26 c0       	rjmp	.+76     	; 0x12ae <__vector_26+0x33a>
    1262:	80 91 b9 00 	lds	r24, 0x00B9
    1266:	88 7f       	andi	r24, 0xF8	; 248
    1268:	80 3a       	cpi	r24, 0xA0	; 160
    126a:	09 f5       	brne	.+66     	; 0x12ae <__vector_26+0x33a>
    126c:	5c dc       	rcall	.-1864   	; 0xb26 <stop_twi>
    126e:	80 91 1f 24 	lds	r24, 0x241F
    1272:	90 91 20 24 	lds	r25, 0x2420
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	91 05       	cpc	r25, r1
    127a:	91 f0       	breq	.+36     	; 0x12a0 <__vector_26+0x32c>
    127c:	1c f4       	brge	.+6      	; 0x1284 <__vector_26+0x310>
    127e:	89 2b       	or	r24, r25
    1280:	39 f0       	breq	.+14     	; 0x1290 <__vector_26+0x31c>
    1282:	15 c0       	rjmp	.+42     	; 0x12ae <__vector_26+0x33a>
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	91 05       	cpc	r25, r1
    1288:	39 f0       	breq	.+14     	; 0x1298 <__vector_26+0x324>
    128a:	05 97       	sbiw	r24, 0x05	; 5
    128c:	81 f4       	brne	.+32     	; 0x12ae <__vector_26+0x33a>
    128e:	0c c0       	rjmp	.+24     	; 0x12a8 <__vector_26+0x334>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 bf 22 	sts	0x22BF, r24
    1296:	0b c0       	rjmp	.+22     	; 0x12ae <__vector_26+0x33a>
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	80 93 bc 22 	sts	0x22BC, r24
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <__vector_26+0x33a>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 93 be 22 	sts	0x22BE, r24
    12a6:	03 c0       	rjmp	.+6      	; 0x12ae <__vector_26+0x33a>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 bd 22 	sts	0x22BD, r24
    12ae:	50 dc       	rcall	.-1888   	; 0xb50 <reset_TWI>
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	0b be       	out	0x3b, r0	; 59
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <USART_init>:
		
		switch(*tag){
			case('M'): // if 'tag' is 'M'
			{
				if(USART_DecodeMessageRxFIFO()) // if decoding failed
				{
    12da:	10 92 c5 00 	sts	0x00C5, r1
    12de:	87 e0       	ldi	r24, 0x07	; 7
    12e0:	80 93 c4 00 	sts	0x00C4, r24
    12e4:	88 e9       	ldi	r24, 0x98	; 152
    12e6:	80 93 c1 00 	sts	0x00C1, r24
    12ea:	86 e0       	ldi	r24, 0x06	; 6
    12ec:	80 93 c2 00 	sts	0x00C2, r24
    12f0:	08 95       	ret

000012f2 <USART_CheckTxReady>:
    12f2:	80 91 c0 00 	lds	r24, 0x00C0
    12f6:	80 72       	andi	r24, 0x20	; 32
    12f8:	08 95       	ret

000012fa <USART_WriteByte>:
    12fa:	cf 93       	push	r28
    12fc:	c8 2f       	mov	r28, r24
    12fe:	f9 df       	rcall	.-14     	; 0x12f2 <USART_CheckTxReady>
    1300:	88 23       	and	r24, r24
    1302:	e9 f3       	breq	.-6      	; 0x12fe <USART_WriteByte+0x4>
    1304:	c0 93 c6 00 	sts	0x00C6, r28
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <USART_crc16>:
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	66 23       	and	r22, r22
    131e:	09 f4       	brne	.+2      	; 0x1322 <USART_crc16+0x16>
    1320:	3e c0       	rjmp	.+124    	; 0x139e <USART_crc16+0x92>
    1322:	06 2f       	mov	r16, r22
    1324:	10 e0       	ldi	r17, 0x00	; 0
    1326:	4f ef       	ldi	r20, 0xFF	; 255
    1328:	5f ef       	ldi	r21, 0xFF	; 255
    132a:	ee ef       	ldi	r30, 0xFE	; 254
    132c:	ff ef       	ldi	r31, 0xFF	; 255
    132e:	c6 2e       	mov	r12, r22
    1330:	d1 2c       	mov	r13, r1
    1332:	e8 2e       	mov	r14, r24
    1334:	f1 2c       	mov	r15, r1
    1336:	c8 e0       	ldi	r28, 0x08	; 8
    1338:	d0 e0       	ldi	r29, 0x00	; 0
    133a:	ee 3f       	cpi	r30, 0xFE	; 254
    133c:	6f ef       	ldi	r22, 0xFF	; 255
    133e:	f6 07       	cpc	r31, r22
    1340:	19 f4       	brne	.+6      	; 0x1348 <USART_crc16+0x3c>
    1342:	8e 2d       	mov	r24, r14
    1344:	9f 2d       	mov	r25, r15
    1346:	30 c0       	rjmp	.+96     	; 0x13a8 <USART_crc16+0x9c>
    1348:	ef 3f       	cpi	r30, 0xFF	; 255
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	f8 07       	cpc	r31, r24
    134e:	19 f4       	brne	.+6      	; 0x1356 <USART_crc16+0x4a>
    1350:	8c 2d       	mov	r24, r12
    1352:	9d 2d       	mov	r25, r13
    1354:	29 c0       	rjmp	.+82     	; 0x13a8 <USART_crc16+0x9c>
    1356:	df 01       	movw	r26, r30
    1358:	a0 5d       	subi	r26, 0xD0	; 208
    135a:	b9 4d       	sbci	r27, 0xD9	; 217
    135c:	8c 91       	ld	r24, X
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	23 c0       	rjmp	.+70     	; 0x13a8 <USART_crc16+0x9c>
    1362:	ba 01       	movw	r22, r20
    1364:	68 27       	eor	r22, r24
    1366:	79 27       	eor	r23, r25
    1368:	60 ff       	sbrs	r22, 0
    136a:	07 c0       	rjmp	.+14     	; 0x137a <USART_crc16+0x6e>
    136c:	56 95       	lsr	r21
    136e:	47 95       	ror	r20
    1370:	68 e0       	ldi	r22, 0x08	; 8
    1372:	46 27       	eor	r20, r22
    1374:	64 e8       	ldi	r22, 0x84	; 132
    1376:	56 27       	eor	r21, r22
    1378:	02 c0       	rjmp	.+4      	; 0x137e <USART_crc16+0x72>
    137a:	56 95       	lsr	r21
    137c:	47 95       	ror	r20
    137e:	96 95       	lsr	r25
    1380:	87 95       	ror	r24
    1382:	21 50       	subi	r18, 0x01	; 1
    1384:	31 09       	sbc	r19, r1
    1386:	69 f7       	brne	.-38     	; 0x1362 <USART_crc16+0x56>
    1388:	31 96       	adiw	r30, 0x01	; 1
    138a:	e0 17       	cp	r30, r16
    138c:	f1 07       	cpc	r31, r17
    138e:	a9 f6       	brne	.-86     	; 0x133a <USART_crc16+0x2e>
    1390:	9a 01       	movw	r18, r20
    1392:	20 95       	com	r18
    1394:	30 95       	com	r19
    1396:	32 27       	eor	r19, r18
    1398:	23 27       	eor	r18, r19
    139a:	32 27       	eor	r19, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <USART_crc16+0x96>
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	82 2f       	mov	r24, r18
    13a4:	93 2f       	mov	r25, r19
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <USART_crc16+0xa0>
    13a8:	9e 01       	movw	r18, r28
    13aa:	db cf       	rjmp	.-74     	; 0x1362 <USART_crc16+0x56>
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	df 90       	pop	r13
    13ba:	cf 90       	pop	r12
    13bc:	08 95       	ret

000013be <USART_SendPacket>:
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	9e e7       	ldi	r25, 0x7E	; 126
    13c8:	90 93 2f 27 	sts	0x272F, r25
    13cc:	80 93 30 27 	sts	0x2730, r24
    13d0:	60 93 31 27 	sts	0x2731, r22
    13d4:	26 2f       	mov	r18, r22
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	12 16       	cp	r1, r18
    13da:	13 06       	cpc	r1, r19
    13dc:	4c f5       	brge	.+82     	; 0x1430 <USART_SendPacket+0x72>
    13de:	e0 e3       	ldi	r30, 0x30	; 48
    13e0:	f6 e2       	ldi	r31, 0x26	; 38
    13e2:	03 e0       	ldi	r16, 0x03	; 3
    13e4:	10 e0       	ldi	r17, 0x00	; 0
    13e6:	c0 e0       	ldi	r28, 0x00	; 0
    13e8:	d0 e0       	ldi	r29, 0x00	; 0
    13ea:	7d e7       	ldi	r23, 0x7D	; 125
    13ec:	50 e2       	ldi	r21, 0x20	; 32
    13ee:	90 81       	ld	r25, Z
    13f0:	49 2f       	mov	r20, r25
    13f2:	4d 57       	subi	r20, 0x7D	; 125
    13f4:	42 30       	cpi	r20, 0x02	; 2
    13f6:	80 f4       	brcc	.+32     	; 0x1418 <USART_SendPacket+0x5a>
    13f8:	d8 01       	movw	r26, r16
    13fa:	a1 5d       	subi	r26, 0xD1	; 209
    13fc:	b8 4d       	sbci	r27, 0xD8	; 216
    13fe:	ac 0f       	add	r26, r28
    1400:	bd 1f       	adc	r27, r29
    1402:	7c 93       	st	X, r23
    1404:	0f 5f       	subi	r16, 0xFF	; 255
    1406:	1f 4f       	sbci	r17, 0xFF	; 255
    1408:	d8 01       	movw	r26, r16
    140a:	a1 5d       	subi	r26, 0xD1	; 209
    140c:	b8 4d       	sbci	r27, 0xD8	; 216
    140e:	ac 0f       	add	r26, r28
    1410:	bd 1f       	adc	r27, r29
    1412:	95 27       	eor	r25, r21
    1414:	9c 93       	st	X, r25
    1416:	06 c0       	rjmp	.+12     	; 0x1424 <USART_SendPacket+0x66>
    1418:	d8 01       	movw	r26, r16
    141a:	a1 5d       	subi	r26, 0xD1	; 209
    141c:	b8 4d       	sbci	r27, 0xD8	; 216
    141e:	ac 0f       	add	r26, r28
    1420:	bd 1f       	adc	r27, r29
    1422:	9c 93       	st	X, r25
    1424:	21 96       	adiw	r28, 0x01	; 1
    1426:	31 96       	adiw	r30, 0x01	; 1
    1428:	c2 17       	cp	r28, r18
    142a:	d3 07       	cpc	r29, r19
    142c:	01 f7       	brne	.-64     	; 0x13ee <USART_SendPacket+0x30>
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <USART_SendPacket+0x7a>
    1430:	03 e0       	ldi	r16, 0x03	; 3
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	c0 e0       	ldi	r28, 0x00	; 0
    1436:	d0 e0       	ldi	r29, 0x00	; 0
    1438:	69 df       	rcall	.-302    	; 0x130c <USART_crc16>
    143a:	f8 01       	movw	r30, r16
    143c:	e1 5d       	subi	r30, 0xD1	; 209
    143e:	f8 4d       	sbci	r31, 0xD8	; 216
    1440:	ec 0f       	add	r30, r28
    1442:	fd 1f       	adc	r31, r29
    1444:	90 83       	st	Z, r25
    1446:	81 83       	std	Z+1, r24	; 0x01
    1448:	22 96       	adiw	r28, 0x02	; 2
    144a:	0c 0f       	add	r16, r28
    144c:	1d 1f       	adc	r17, r29
    144e:	f8 01       	movw	r30, r16
    1450:	e1 5d       	subi	r30, 0xD1	; 209
    1452:	f8 4d       	sbci	r31, 0xD8	; 216
    1454:	8e e7       	ldi	r24, 0x7E	; 126
    1456:	80 83       	st	Z, r24
    1458:	c8 01       	movw	r24, r16
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	18 16       	cp	r1, r24
    145e:	19 06       	cpc	r1, r25
    1460:	4c f4       	brge	.+18     	; 0x1474 <USART_SendPacket+0xb6>
    1462:	cf e2       	ldi	r28, 0x2F	; 47
    1464:	d7 e2       	ldi	r29, 0x27	; 39
    1466:	00 5d       	subi	r16, 0xD0	; 208
    1468:	18 4d       	sbci	r17, 0xD8	; 216
    146a:	89 91       	ld	r24, Y+
    146c:	46 df       	rcall	.-372    	; 0x12fa <USART_WriteByte>
    146e:	c0 17       	cp	r28, r16
    1470:	d1 07       	cpc	r29, r17
    1472:	d9 f7       	brne	.-10     	; 0x146a <USART_SendPacket+0xac>
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	08 95       	ret

0000147e <USART_SendCommand>:
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	fd dc       	rcall	.-1542   	; 0xe7e <TWI_get_command>
    1484:	80 93 30 26 	sts	0x2630, r24
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	f8 dc       	rcall	.-1552   	; 0xe7e <TWI_get_command>
    148e:	80 93 31 26 	sts	0x2631, r24
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	f3 dc       	rcall	.-1562   	; 0xe7e <TWI_get_command>
    1498:	80 93 32 26 	sts	0x2632, r24
    149c:	63 e0       	ldi	r22, 0x03	; 3
    149e:	83 e4       	ldi	r24, 0x43	; 67
    14a0:	8e cf       	rjmp	.-228    	; 0x13be <USART_SendPacket>

000014a2 <USART_DecodeMessageRxFIFO>:
    14a2:	8f 92       	push	r8
    14a4:	9f 92       	push	r9
    14a6:	af 92       	push	r10
    14a8:	bf 92       	push	r11
    14aa:	cf 92       	push	r12
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	ad b6       	in	r10, 0x3d	; 61
    14c0:	be b6       	in	r11, 0x3e	; 62
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	80 91 10 11 	lds	r24, 0x1110
    14ca:	90 91 11 11 	lds	r25, 0x1111
    14ce:	0e 94 24 02 	call	0x448	; 0x448 <FifoRead>
    14d2:	88 23       	and	r24, r24
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <USART_DecodeMessageRxFIFO+0x40>
    14d6:	6c ea       	ldi	r22, 0xAC	; 172
    14d8:	71 e2       	ldi	r23, 0x21	; 33
    14da:	80 e4       	ldi	r24, 0x40	; 64
    14dc:	04 dc       	rcall	.-2040   	; 0xce6 <TWI_send_string>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	44 c0       	rjmp	.+136    	; 0x156a <USART_DecodeMessageRxFIFO+0xc8>
    14e2:	c0 90 00 00 	lds	r12, 0x0000
    14e6:	d1 2c       	mov	r13, r1
    14e8:	96 01       	movw	r18, r12
    14ea:	21 50       	subi	r18, 0x01	; 1
    14ec:	31 09       	sbc	r19, r1
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	c1 14       	cp	r12, r1
    14f4:	d1 04       	cpc	r13, r1
    14f6:	11 f0       	breq	.+4      	; 0x14fc <USART_DecodeMessageRxFIFO+0x5a>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	82 0f       	add	r24, r18
    14fe:	93 1f       	adc	r25, r19
    1500:	2d b7       	in	r18, 0x3d	; 61
    1502:	3e b7       	in	r19, 0x3e	; 62
    1504:	28 1b       	sub	r18, r24
    1506:	39 0b       	sbc	r19, r25
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	3e bf       	out	0x3e, r19	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	2d bf       	out	0x3d, r18	; 61
    1512:	8d b7       	in	r24, 0x3d	; 61
    1514:	9e b7       	in	r25, 0x3e	; 62
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	88 2e       	mov	r8, r24
    151a:	99 2e       	mov	r9, r25
    151c:	1c 14       	cp	r1, r12
    151e:	1d 04       	cpc	r1, r13
    1520:	f4 f4       	brge	.+60     	; 0x155e <USART_DecodeMessageRxFIFO+0xbc>
    1522:	e8 2e       	mov	r14, r24
    1524:	f9 2e       	mov	r15, r25
    1526:	00 e0       	ldi	r16, 0x00	; 0
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	80 91 10 11 	lds	r24, 0x1110
    1532:	90 91 11 11 	lds	r25, 0x1111
    1536:	0e 94 24 02 	call	0x448	; 0x448 <FifoRead>
    153a:	88 23       	and	r24, r24
    153c:	31 f0       	breq	.+12     	; 0x154a <USART_DecodeMessageRxFIFO+0xa8>
    153e:	6e ec       	ldi	r22, 0xCE	; 206
    1540:	71 e2       	ldi	r23, 0x21	; 33
    1542:	80 e4       	ldi	r24, 0x40	; 64
    1544:	d0 db       	rcall	.-2144   	; 0xce6 <TWI_send_string>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	10 c0       	rjmp	.+32     	; 0x156a <USART_DecodeMessageRxFIFO+0xc8>
    154a:	80 91 00 00 	lds	r24, 0x0000
    154e:	f7 01       	movw	r30, r14
    1550:	81 93       	st	Z+, r24
    1552:	7f 01       	movw	r14, r30
    1554:	0f 5f       	subi	r16, 0xFF	; 255
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	0c 15       	cp	r16, r12
    155a:	1d 05       	cpc	r17, r13
    155c:	34 f3       	brlt	.-52     	; 0x152a <USART_DecodeMessageRxFIFO+0x88>
    155e:	a6 01       	movw	r20, r12
    1560:	68 2d       	mov	r22, r8
    1562:	79 2d       	mov	r23, r9
    1564:	80 e8       	ldi	r24, 0x80	; 128
    1566:	05 dc       	rcall	.-2038   	; 0xd72 <TWI_send_string_fixed_length>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	be be       	out	0x3e, r11	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	ad be       	out	0x3d, r10	; 61
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	df 90       	pop	r13
    1582:	cf 90       	pop	r12
    1584:	bf 90       	pop	r11
    1586:	af 90       	pop	r10
    1588:	9f 90       	pop	r9
    158a:	8f 90       	pop	r8
    158c:	08 95       	ret

0000158e <USART_DecodeCommandRxFIFO>:
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	80 91 10 11 	lds	r24, 0x1110
    159a:	90 91 11 11 	lds	r25, 0x1111
    159e:	0e 94 24 02 	call	0x448	; 0x448 <FifoRead>
    15a2:	88 23       	and	r24, r24
    15a4:	31 f0       	breq	.+12     	; 0x15b2 <USART_DecodeCommandRxFIFO+0x24>
    15a6:	61 ef       	ldi	r22, 0xF1	; 241
    15a8:	71 e2       	ldi	r23, 0x21	; 33
    15aa:	80 e4       	ldi	r24, 0x40	; 64
    15ac:	9c db       	rcall	.-2248   	; 0xce6 <TWI_send_string>
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	45 c0       	rjmp	.+138    	; 0x163c <USART_DecodeCommandRxFIFO+0xae>
    15b2:	80 91 00 00 	lds	r24, 0x0000
    15b6:	83 30       	cpi	r24, 0x03	; 3
    15b8:	09 f0       	breq	.+2      	; 0x15bc <USART_DecodeCommandRxFIFO+0x2e>
    15ba:	3b c0       	rjmp	.+118    	; 0x1632 <USART_DecodeCommandRxFIFO+0xa4>
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	80 91 10 11 	lds	r24, 0x1110
    15c4:	90 91 11 11 	lds	r25, 0x1111
    15c8:	0e 94 24 02 	call	0x448	; 0x448 <FifoRead>
    15cc:	88 23       	and	r24, r24
    15ce:	31 f0       	breq	.+12     	; 0x15dc <USART_DecodeCommandRxFIFO+0x4e>
    15d0:	63 e1       	ldi	r22, 0x13	; 19
    15d2:	72 e2       	ldi	r23, 0x22	; 34
    15d4:	80 e4       	ldi	r24, 0x40	; 64
    15d6:	87 db       	rcall	.-2290   	; 0xce6 <TWI_send_string>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	30 c0       	rjmp	.+96     	; 0x163c <USART_DecodeCommandRxFIFO+0xae>
    15dc:	c0 91 00 00 	lds	r28, 0x0000
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	80 91 10 11 	lds	r24, 0x1110
    15e8:	90 91 11 11 	lds	r25, 0x1111
    15ec:	0e 94 24 02 	call	0x448	; 0x448 <FifoRead>
    15f0:	88 23       	and	r24, r24
    15f2:	31 f0       	breq	.+12     	; 0x1600 <USART_DecodeCommandRxFIFO+0x72>
    15f4:	6b e3       	ldi	r22, 0x3B	; 59
    15f6:	72 e2       	ldi	r23, 0x22	; 34
    15f8:	80 e4       	ldi	r24, 0x40	; 64
    15fa:	75 db       	rcall	.-2326   	; 0xce6 <TWI_send_string>
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	1e c0       	rjmp	.+60     	; 0x163c <USART_DecodeCommandRxFIFO+0xae>
    1600:	d0 91 00 00 	lds	r29, 0x0000
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	80 91 10 11 	lds	r24, 0x1110
    160c:	90 91 11 11 	lds	r25, 0x1111
    1610:	0e 94 24 02 	call	0x448	; 0x448 <FifoRead>
    1614:	88 23       	and	r24, r24
    1616:	31 f0       	breq	.+12     	; 0x1624 <USART_DecodeCommandRxFIFO+0x96>
    1618:	62 e6       	ldi	r22, 0x62	; 98
    161a:	72 e2       	ldi	r23, 0x22	; 34
    161c:	80 e4       	ldi	r24, 0x40	; 64
    161e:	63 db       	rcall	.-2362   	; 0xce6 <TWI_send_string>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	0c c0       	rjmp	.+24     	; 0x163c <USART_DecodeCommandRxFIFO+0xae>
    1624:	40 91 00 00 	lds	r20, 0x0000
    1628:	6d 2f       	mov	r22, r29
    162a:	8c 2f       	mov	r24, r28
    162c:	14 db       	rcall	.-2520   	; 0xc56 <TWI_send_command>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	05 c0       	rjmp	.+10     	; 0x163c <USART_DecodeCommandRxFIFO+0xae>
    1632:	66 e8       	ldi	r22, 0x86	; 134
    1634:	72 e2       	ldi	r23, 0x22	; 34
    1636:	80 e4       	ldi	r24, 0x40	; 64
    1638:	56 db       	rcall	.-2388   	; 0xce6 <TWI_send_string>
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	08 95       	ret

00001642 <USART_DecodeValueFIFO>:
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	00 d0       	rcall	.+0      	; 0x1650 <USART_DecodeValueFIFO+0xe>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <USART_DecodeValueFIFO+0x10>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	80 91 10 11 	lds	r24, 0x1110
    165e:	90 91 11 11 	lds	r25, 0x1111
    1662:	0e 94 24 02 	call	0x448	; 0x448 <FifoRead>
    1666:	88 23       	and	r24, r24
    1668:	31 f0       	breq	.+12     	; 0x1676 <USART_DecodeValueFIFO+0x34>
    166a:	61 ef       	ldi	r22, 0xF1	; 241
    166c:	71 e2       	ldi	r23, 0x21	; 33
    166e:	80 e4       	ldi	r24, 0x40	; 64
    1670:	3a db       	rcall	.-2444   	; 0xce6 <TWI_send_string>
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	32 c0       	rjmp	.+100    	; 0x16da <USART_DecodeValueFIFO+0x98>
    1676:	80 91 00 00 	lds	r24, 0x0000
    167a:	84 30       	cpi	r24, 0x04	; 4
    167c:	59 f5       	brne	.+86     	; 0x16d4 <USART_DecodeValueFIFO+0x92>
    167e:	8e 01       	movw	r16, r28
    1680:	0f 5f       	subi	r16, 0xFF	; 255
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	7e 01       	movw	r14, r28
    1686:	85 e0       	ldi	r24, 0x05	; 5
    1688:	e8 0e       	add	r14, r24
    168a:	f1 1c       	adc	r15, r1
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	80 91 10 11 	lds	r24, 0x1110
    1694:	90 91 11 11 	lds	r25, 0x1111
    1698:	0e 94 24 02 	call	0x448	; 0x448 <FifoRead>
    169c:	81 11       	cpse	r24, r1
    169e:	1c c0       	rjmp	.+56     	; 0x16d8 <USART_DecodeValueFIFO+0x96>
    16a0:	e0 e0       	ldi	r30, 0x00	; 0
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	d8 01       	movw	r26, r16
    16a8:	8d 93       	st	X+, r24
    16aa:	8d 01       	movw	r16, r26
    16ac:	60 81       	ld	r22, Z
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	fe d1       	rcall	.+1020   	; 0x1ab2 <__floatunsisf>
    16b6:	ab 01       	movw	r20, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	80 e8       	ldi	r24, 0x80	; 128
    16bc:	98 db       	rcall	.-2256   	; 0xdee <TWI_send_float>
    16be:	0e 15       	cp	r16, r14
    16c0:	1f 05       	cpc	r17, r15
    16c2:	21 f7       	brne	.-56     	; 0x168c <USART_DecodeValueFIFO+0x4a>
    16c4:	49 81       	ldd	r20, Y+1	; 0x01
    16c6:	5a 81       	ldd	r21, Y+2	; 0x02
    16c8:	6b 81       	ldd	r22, Y+3	; 0x03
    16ca:	7c 81       	ldd	r23, Y+4	; 0x04
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	8f db       	rcall	.-2274   	; 0xdee <TWI_send_float>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <USART_DecodeValueFIFO+0x98>
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <USART_DecodeValueFIFO+0x98>
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	08 95       	ret

000016f0 <USART_DecodeRxFIFO>:
    16f0:	13 c0       	rjmp	.+38     	; 0x1718 <USART_DecodeRxFIFO+0x28>
    16f2:	80 91 00 00 	lds	r24, 0x0000
    16f6:	8d 34       	cpi	r24, 0x4D	; 77
    16f8:	29 f0       	breq	.+10     	; 0x1704 <USART_DecodeRxFIFO+0x14>
    16fa:	86 35       	cpi	r24, 0x56	; 86
    16fc:	51 f0       	breq	.+20     	; 0x1712 <USART_DecodeRxFIFO+0x22>
    16fe:	83 34       	cpi	r24, 0x43	; 67
    1700:	59 f4       	brne	.+22     	; 0x1718 <USART_DecodeRxFIFO+0x28>
    1702:	04 c0       	rjmp	.+8      	; 0x170c <USART_DecodeRxFIFO+0x1c>
    1704:	ce de       	rcall	.-612    	; 0x14a2 <USART_DecodeMessageRxFIFO>
    1706:	88 23       	and	r24, r24
    1708:	39 f0       	breq	.+14     	; 0x1718 <USART_DecodeRxFIFO+0x28>
    170a:	08 95       	ret
    170c:	40 df       	rcall	.-384    	; 0x158e <USART_DecodeCommandRxFIFO>
    170e:	81 11       	cpse	r24, r1
    1710:	0d c0       	rjmp	.+26     	; 0x172c <USART_DecodeRxFIFO+0x3c>
    1712:	97 df       	rcall	.-210    	; 0x1642 <USART_DecodeValueFIFO>
    1714:	81 11       	cpse	r24, r1
    1716:	0a c0       	rjmp	.+20     	; 0x172c <USART_DecodeRxFIFO+0x3c>
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	80 91 10 11 	lds	r24, 0x1110
    1720:	90 91 11 11 	lds	r25, 0x1111
    1724:	0e 94 24 02 	call	0x448	; 0x448 <FifoRead>
    1728:	88 23       	and	r24, r24
    172a:	19 f3       	breq	.-58     	; 0x16f2 <USART_DecodeRxFIFO+0x2>
    172c:	08 95       	ret

0000172e <__vector_20>:
					// TODO: flush buffer?
					return;
				}
				
				break;
    172e:	1f 92       	push	r1
    1730:	0f 92       	push	r0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	0f 92       	push	r0
    1736:	11 24       	eor	r1, r1
    1738:	0b b6       	in	r0, 0x3b	; 59
    173a:	0f 92       	push	r0
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	2f 93       	push	r18
    1746:	3f 93       	push	r19
    1748:	4f 93       	push	r20
    174a:	5f 93       	push	r21
    174c:	6f 93       	push	r22
    174e:	7f 93       	push	r23
    1750:	8f 93       	push	r24
    1752:	9f 93       	push	r25
    1754:	af 93       	push	r26
    1756:	bf 93       	push	r27
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	ef 93       	push	r30
    175e:	ff 93       	push	r31
			}
			case('C'): // 
    1760:	20 91 c6 00 	lds	r18, 0x00C6
			{
				if(USART_DecodeCommandRxFIFO())
    1764:	2e 37       	cpi	r18, 0x7E	; 126
    1766:	09 f0       	breq	.+2      	; 0x176a <__vector_20+0x3c>
    1768:	3f c0       	rjmp	.+126    	; 0x17e8 <__vector_20+0xba>
				{
					// TODO: flush buffer?
    176a:	80 91 c3 22 	lds	r24, 0x22C3
    176e:	90 91 c4 22 	lds	r25, 0x22C4
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	91 05       	cpc	r25, r1
    1776:	40 f4       	brcc	.+16     	; 0x1788 <__vector_20+0x5a>
    1778:	20 91 2c 24 	lds	r18, 0x242C
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	2c 5f       	subi	r18, 0xFC	; 252
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	82 17       	cp	r24, r18
    1784:	93 07       	cpc	r25, r19
    1786:	59 f5       	brne	.+86     	; 0x17de <__vector_20+0xb0>
					return;
				}
    1788:	80 91 c1 22 	lds	r24, 0x22C1
    178c:	90 91 c2 22 	lds	r25, 0x22C2
    1790:	89 2b       	or	r24, r25
    1792:	21 f0       	breq	.+8      	; 0x179c <__vector_20+0x6e>
				break;
			}
			case('V'):
    1794:	10 92 c2 22 	sts	0x22C2, r1
    1798:	10 92 c1 22 	sts	0x22C1, r1
    179c:	0b e2       	ldi	r16, 0x2B	; 43
    179e:	14 e2       	ldi	r17, 0x24	; 36
			{
				if(USART_DecodeValueFIFO())
				{
					
					return;
				}
    17a0:	c0 e0       	ldi	r28, 0x00	; 0
    17a2:	d0 e0       	ldi	r29, 0x00	; 0
    17a4:	0f 2e       	mov	r0, r31
    17a6:	fc e2       	ldi	r31, 0x2C	; 44
    17a8:	ef 2e       	mov	r14, r31
    17aa:	f4 e2       	ldi	r31, 0x24	; 36
    17ac:	ff 2e       	mov	r15, r31
    17ae:	f0 2d       	mov	r31, r0
				break;
			}
    17b0:	f8 01       	movw	r30, r16
    17b2:	61 91       	ld	r22, Z+
    17b4:	8f 01       	movw	r16, r30
    17b6:	80 91 10 11 	lds	r24, 0x1110
    17ba:	90 91 11 11 	lds	r25, 0x1111
    17be:	0e 94 04 02 	call	0x408	; 0x408 <FifoWrite>
    17c2:	88 23       	and	r24, r24
    17c4:	21 f0       	breq	.+8      	; 0x17ce <__vector_20+0xa0>
			case('R'):
			{
    17c6:	6d ea       	ldi	r22, 0xAD	; 173
    17c8:	72 e2       	ldi	r23, 0x22	; 34
    17ca:	80 e4       	ldi	r24, 0x40	; 64
    17cc:	8c da       	rcall	.-2792   	; 0xce6 <TWI_send_string>
			{
				if(USART_DecodeValueFIFO())
				{
					
					return;
				}
    17ce:	21 96       	adiw	r28, 0x01	; 1
    17d0:	f7 01       	movw	r30, r14
    17d2:	80 81       	ld	r24, Z
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 96       	adiw	r24, 0x02	; 2
    17d8:	c8 17       	cp	r28, r24
    17da:	d9 07       	cpc	r29, r25
    17dc:	4c f3       	brlt	.-46     	; 0x17b0 <__vector_20+0x82>
			{
				if(USART_DecodeReadyFIFO())
				{
					return;
				}
				break;
    17de:	10 92 c4 22 	sts	0x22C4, r1
    17e2:	10 92 c3 22 	sts	0x22C3, r1
    17e6:	16 c0       	rjmp	.+44     	; 0x1814 <__vector_20+0xe6>
			}
		}
    17e8:	2d 37       	cpi	r18, 0x7D	; 125
    17ea:	39 f4       	brne	.+14     	; 0x17fa <__vector_20+0xcc>
	}
}
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	90 93 c2 22 	sts	0x22C2, r25
    17f4:	80 93 c1 22 	sts	0x22C1, r24
    17f8:	0d c0       	rjmp	.+26     	; 0x1814 <__vector_20+0xe6>



    17fa:	80 91 c3 22 	lds	r24, 0x22C3
    17fe:	90 91 c4 22 	lds	r25, 0x22C4
    1802:	fc 01       	movw	r30, r24
    1804:	e5 5d       	subi	r30, 0xD5	; 213
    1806:	fb 4d       	sbci	r31, 0xDB	; 219
    1808:	20 83       	st	Z, r18
void USART_Bounce()
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	90 93 c4 22 	sts	0x22C4, r25
    1810:	80 93 c3 22 	sts	0x22C3, r24
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
    1814:	ff 91       	pop	r31
    1816:	ef 91       	pop	r30
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	bf 91       	pop	r27
    181e:	af 91       	pop	r26
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	7f 91       	pop	r23
    1826:	6f 91       	pop	r22
    1828:	5f 91       	pop	r21
    182a:	4f 91       	pop	r20
    182c:	3f 91       	pop	r19
    182e:	2f 91       	pop	r18
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	0f 90       	pop	r0
    183a:	0b be       	out	0x3b, r0	; 59
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	0f 90       	pop	r0
    1842:	1f 90       	pop	r1
    1844:	18 95       	reti

00001846 <USART_send_command_parameters>:
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
}

    1846:	80 93 30 26 	sts	0x2630, r24

    184a:	60 93 31 26 	sts	0x2631, r22
ISR (USART0_RX_vect)
    184e:	40 93 32 26 	sts	0x2632, r20
{
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1852:	63 e0       	ldi	r22, 0x03	; 3
    1854:	83 e4       	ldi	r24, 0x43	; 67
    1856:	b3 cd       	rjmp	.-1178   	; 0x13be <USART_SendPacket>

00001858 <__subsf3>:
    1858:	50 58       	subi	r21, 0x80	; 128

0000185a <__addsf3>:
    185a:	bb 27       	eor	r27, r27
    185c:	aa 27       	eor	r26, r26
    185e:	0e d0       	rcall	.+28     	; 0x187c <__addsf3x>
    1860:	ed c1       	rjmp	.+986    	; 0x1c3c <__fp_round>
    1862:	b6 d1       	rcall	.+876    	; 0x1bd0 <__fp_pscA>
    1864:	30 f0       	brcs	.+12     	; 0x1872 <__addsf3+0x18>
    1866:	bb d1       	rcall	.+886    	; 0x1bde <__fp_pscB>
    1868:	20 f0       	brcs	.+8      	; 0x1872 <__addsf3+0x18>
    186a:	31 f4       	brne	.+12     	; 0x1878 <__addsf3+0x1e>
    186c:	9f 3f       	cpi	r25, 0xFF	; 255
    186e:	11 f4       	brne	.+4      	; 0x1874 <__addsf3+0x1a>
    1870:	1e f4       	brtc	.+6      	; 0x1878 <__addsf3+0x1e>
    1872:	86 c1       	rjmp	.+780    	; 0x1b80 <__fp_nan>
    1874:	0e f4       	brtc	.+2      	; 0x1878 <__addsf3+0x1e>
    1876:	e0 95       	com	r30
    1878:	e7 fb       	bst	r30, 7
    187a:	7c c1       	rjmp	.+760    	; 0x1b74 <__fp_inf>

0000187c <__addsf3x>:
    187c:	e9 2f       	mov	r30, r25
    187e:	00 d2       	rcall	.+1024   	; 0x1c80 <__fp_split3>
    1880:	80 f3       	brcs	.-32     	; 0x1862 <__addsf3+0x8>
    1882:	ba 17       	cp	r27, r26
    1884:	62 07       	cpc	r22, r18
    1886:	73 07       	cpc	r23, r19
    1888:	84 07       	cpc	r24, r20
    188a:	95 07       	cpc	r25, r21
    188c:	18 f0       	brcs	.+6      	; 0x1894 <__addsf3x+0x18>
    188e:	71 f4       	brne	.+28     	; 0x18ac <__addsf3x+0x30>
    1890:	9e f5       	brtc	.+102    	; 0x18f8 <__addsf3x+0x7c>
    1892:	18 c2       	rjmp	.+1072   	; 0x1cc4 <__fp_zero>
    1894:	0e f4       	brtc	.+2      	; 0x1898 <__addsf3x+0x1c>
    1896:	e0 95       	com	r30
    1898:	0b 2e       	mov	r0, r27
    189a:	ba 2f       	mov	r27, r26
    189c:	a0 2d       	mov	r26, r0
    189e:	0b 01       	movw	r0, r22
    18a0:	b9 01       	movw	r22, r18
    18a2:	90 01       	movw	r18, r0
    18a4:	0c 01       	movw	r0, r24
    18a6:	ca 01       	movw	r24, r20
    18a8:	a0 01       	movw	r20, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	ff 27       	eor	r31, r31
    18ae:	59 1b       	sub	r21, r25
    18b0:	99 f0       	breq	.+38     	; 0x18d8 <__addsf3x+0x5c>
    18b2:	59 3f       	cpi	r21, 0xF9	; 249
    18b4:	50 f4       	brcc	.+20     	; 0x18ca <__addsf3x+0x4e>
    18b6:	50 3e       	cpi	r21, 0xE0	; 224
    18b8:	68 f1       	brcs	.+90     	; 0x1914 <__addsf3x+0x98>
    18ba:	1a 16       	cp	r1, r26
    18bc:	f0 40       	sbci	r31, 0x00	; 0
    18be:	a2 2f       	mov	r26, r18
    18c0:	23 2f       	mov	r18, r19
    18c2:	34 2f       	mov	r19, r20
    18c4:	44 27       	eor	r20, r20
    18c6:	58 5f       	subi	r21, 0xF8	; 248
    18c8:	f3 cf       	rjmp	.-26     	; 0x18b0 <__addsf3x+0x34>
    18ca:	46 95       	lsr	r20
    18cc:	37 95       	ror	r19
    18ce:	27 95       	ror	r18
    18d0:	a7 95       	ror	r26
    18d2:	f0 40       	sbci	r31, 0x00	; 0
    18d4:	53 95       	inc	r21
    18d6:	c9 f7       	brne	.-14     	; 0x18ca <__addsf3x+0x4e>
    18d8:	7e f4       	brtc	.+30     	; 0x18f8 <__addsf3x+0x7c>
    18da:	1f 16       	cp	r1, r31
    18dc:	ba 0b       	sbc	r27, r26
    18de:	62 0b       	sbc	r22, r18
    18e0:	73 0b       	sbc	r23, r19
    18e2:	84 0b       	sbc	r24, r20
    18e4:	ba f0       	brmi	.+46     	; 0x1914 <__addsf3x+0x98>
    18e6:	91 50       	subi	r25, 0x01	; 1
    18e8:	a1 f0       	breq	.+40     	; 0x1912 <__addsf3x+0x96>
    18ea:	ff 0f       	add	r31, r31
    18ec:	bb 1f       	adc	r27, r27
    18ee:	66 1f       	adc	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	88 1f       	adc	r24, r24
    18f4:	c2 f7       	brpl	.-16     	; 0x18e6 <__addsf3x+0x6a>
    18f6:	0e c0       	rjmp	.+28     	; 0x1914 <__addsf3x+0x98>
    18f8:	ba 0f       	add	r27, r26
    18fa:	62 1f       	adc	r22, r18
    18fc:	73 1f       	adc	r23, r19
    18fe:	84 1f       	adc	r24, r20
    1900:	48 f4       	brcc	.+18     	; 0x1914 <__addsf3x+0x98>
    1902:	87 95       	ror	r24
    1904:	77 95       	ror	r23
    1906:	67 95       	ror	r22
    1908:	b7 95       	ror	r27
    190a:	f7 95       	ror	r31
    190c:	9e 3f       	cpi	r25, 0xFE	; 254
    190e:	08 f0       	brcs	.+2      	; 0x1912 <__addsf3x+0x96>
    1910:	b3 cf       	rjmp	.-154    	; 0x1878 <__addsf3+0x1e>
    1912:	93 95       	inc	r25
    1914:	88 0f       	add	r24, r24
    1916:	08 f0       	brcs	.+2      	; 0x191a <__addsf3x+0x9e>
    1918:	99 27       	eor	r25, r25
    191a:	ee 0f       	add	r30, r30
    191c:	97 95       	ror	r25
    191e:	87 95       	ror	r24
    1920:	08 95       	ret

00001922 <atan>:
    1922:	df 93       	push	r29
    1924:	dd 27       	eor	r29, r29
    1926:	b9 2f       	mov	r27, r25
    1928:	bf 77       	andi	r27, 0x7F	; 127
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	5f e3       	ldi	r21, 0x3F	; 63
    192e:	16 16       	cp	r1, r22
    1930:	17 06       	cpc	r1, r23
    1932:	48 07       	cpc	r20, r24
    1934:	5b 07       	cpc	r21, r27
    1936:	10 f4       	brcc	.+4      	; 0x193c <atan+0x1a>
    1938:	d9 2f       	mov	r29, r25
    193a:	cf d1       	rcall	.+926    	; 0x1cda <inverse>
    193c:	9f 93       	push	r25
    193e:	8f 93       	push	r24
    1940:	7f 93       	push	r23
    1942:	6f 93       	push	r22
    1944:	34 d2       	rcall	.+1128   	; 0x1dae <square>
    1946:	ec e8       	ldi	r30, 0x8C	; 140
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	1d d1       	rcall	.+570    	; 0x1b86 <__fp_powser>
    194c:	77 d1       	rcall	.+750    	; 0x1c3c <__fp_round>
    194e:	2f 91       	pop	r18
    1950:	3f 91       	pop	r19
    1952:	4f 91       	pop	r20
    1954:	5f 91       	pop	r21
    1956:	d4 d1       	rcall	.+936    	; 0x1d00 <__mulsf3x>
    1958:	dd 23       	and	r29, r29
    195a:	49 f0       	breq	.+18     	; 0x196e <atan+0x4c>
    195c:	90 58       	subi	r25, 0x80	; 128
    195e:	a2 ea       	ldi	r26, 0xA2	; 162
    1960:	2a ed       	ldi	r18, 0xDA	; 218
    1962:	3f e0       	ldi	r19, 0x0F	; 15
    1964:	49 ec       	ldi	r20, 0xC9	; 201
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	d0 78       	andi	r29, 0x80	; 128
    196a:	5d 27       	eor	r21, r29
    196c:	87 df       	rcall	.-242    	; 0x187c <__addsf3x>
    196e:	df 91       	pop	r29
    1970:	65 c1       	rjmp	.+714    	; 0x1c3c <__fp_round>

00001972 <__cmpsf2>:
    1972:	dc d0       	rcall	.+440    	; 0x1b2c <__fp_cmp>
    1974:	08 f4       	brcc	.+2      	; 0x1978 <__cmpsf2+0x6>
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	08 95       	ret

0000197a <cos>:
    197a:	39 d1       	rcall	.+626    	; 0x1bee <__fp_rempio2>
    197c:	e3 95       	inc	r30
    197e:	6f c1       	rjmp	.+734    	; 0x1c5e <__fp_sinus>

00001980 <__divsf3>:
    1980:	0c d0       	rcall	.+24     	; 0x199a <__divsf3x>
    1982:	5c c1       	rjmp	.+696    	; 0x1c3c <__fp_round>
    1984:	2c d1       	rcall	.+600    	; 0x1bde <__fp_pscB>
    1986:	40 f0       	brcs	.+16     	; 0x1998 <__divsf3+0x18>
    1988:	23 d1       	rcall	.+582    	; 0x1bd0 <__fp_pscA>
    198a:	30 f0       	brcs	.+12     	; 0x1998 <__divsf3+0x18>
    198c:	21 f4       	brne	.+8      	; 0x1996 <__divsf3+0x16>
    198e:	5f 3f       	cpi	r21, 0xFF	; 255
    1990:	19 f0       	breq	.+6      	; 0x1998 <__divsf3+0x18>
    1992:	f0 c0       	rjmp	.+480    	; 0x1b74 <__fp_inf>
    1994:	51 11       	cpse	r21, r1
    1996:	97 c1       	rjmp	.+814    	; 0x1cc6 <__fp_szero>
    1998:	f3 c0       	rjmp	.+486    	; 0x1b80 <__fp_nan>

0000199a <__divsf3x>:
    199a:	72 d1       	rcall	.+740    	; 0x1c80 <__fp_split3>
    199c:	98 f3       	brcs	.-26     	; 0x1984 <__divsf3+0x4>

0000199e <__divsf3_pse>:
    199e:	99 23       	and	r25, r25
    19a0:	c9 f3       	breq	.-14     	; 0x1994 <__divsf3+0x14>
    19a2:	55 23       	and	r21, r21
    19a4:	b1 f3       	breq	.-20     	; 0x1992 <__divsf3+0x12>
    19a6:	95 1b       	sub	r25, r21
    19a8:	55 0b       	sbc	r21, r21
    19aa:	bb 27       	eor	r27, r27
    19ac:	aa 27       	eor	r26, r26
    19ae:	62 17       	cp	r22, r18
    19b0:	73 07       	cpc	r23, r19
    19b2:	84 07       	cpc	r24, r20
    19b4:	38 f0       	brcs	.+14     	; 0x19c4 <__divsf3_pse+0x26>
    19b6:	9f 5f       	subi	r25, 0xFF	; 255
    19b8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ba:	22 0f       	add	r18, r18
    19bc:	33 1f       	adc	r19, r19
    19be:	44 1f       	adc	r20, r20
    19c0:	aa 1f       	adc	r26, r26
    19c2:	a9 f3       	breq	.-22     	; 0x19ae <__divsf3_pse+0x10>
    19c4:	33 d0       	rcall	.+102    	; 0x1a2c <__divsf3_pse+0x8e>
    19c6:	0e 2e       	mov	r0, r30
    19c8:	3a f0       	brmi	.+14     	; 0x19d8 <__divsf3_pse+0x3a>
    19ca:	e0 e8       	ldi	r30, 0x80	; 128
    19cc:	30 d0       	rcall	.+96     	; 0x1a2e <__divsf3_pse+0x90>
    19ce:	91 50       	subi	r25, 0x01	; 1
    19d0:	50 40       	sbci	r21, 0x00	; 0
    19d2:	e6 95       	lsr	r30
    19d4:	00 1c       	adc	r0, r0
    19d6:	ca f7       	brpl	.-14     	; 0x19ca <__divsf3_pse+0x2c>
    19d8:	29 d0       	rcall	.+82     	; 0x1a2c <__divsf3_pse+0x8e>
    19da:	fe 2f       	mov	r31, r30
    19dc:	27 d0       	rcall	.+78     	; 0x1a2c <__divsf3_pse+0x8e>
    19de:	66 0f       	add	r22, r22
    19e0:	77 1f       	adc	r23, r23
    19e2:	88 1f       	adc	r24, r24
    19e4:	bb 1f       	adc	r27, r27
    19e6:	26 17       	cp	r18, r22
    19e8:	37 07       	cpc	r19, r23
    19ea:	48 07       	cpc	r20, r24
    19ec:	ab 07       	cpc	r26, r27
    19ee:	b0 e8       	ldi	r27, 0x80	; 128
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <__divsf3_pse+0x56>
    19f2:	bb 0b       	sbc	r27, r27
    19f4:	80 2d       	mov	r24, r0
    19f6:	bf 01       	movw	r22, r30
    19f8:	ff 27       	eor	r31, r31
    19fa:	93 58       	subi	r25, 0x83	; 131
    19fc:	5f 4f       	sbci	r21, 0xFF	; 255
    19fe:	2a f0       	brmi	.+10     	; 0x1a0a <__divsf3_pse+0x6c>
    1a00:	9e 3f       	cpi	r25, 0xFE	; 254
    1a02:	51 05       	cpc	r21, r1
    1a04:	68 f0       	brcs	.+26     	; 0x1a20 <__divsf3_pse+0x82>
    1a06:	b6 c0       	rjmp	.+364    	; 0x1b74 <__fp_inf>
    1a08:	5e c1       	rjmp	.+700    	; 0x1cc6 <__fp_szero>
    1a0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0c:	ec f3       	brlt	.-6      	; 0x1a08 <__divsf3_pse+0x6a>
    1a0e:	98 3e       	cpi	r25, 0xE8	; 232
    1a10:	dc f3       	brlt	.-10     	; 0x1a08 <__divsf3_pse+0x6a>
    1a12:	86 95       	lsr	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	b7 95       	ror	r27
    1a1a:	f7 95       	ror	r31
    1a1c:	9f 5f       	subi	r25, 0xFF	; 255
    1a1e:	c9 f7       	brne	.-14     	; 0x1a12 <__divsf3_pse+0x74>
    1a20:	88 0f       	add	r24, r24
    1a22:	91 1d       	adc	r25, r1
    1a24:	96 95       	lsr	r25
    1a26:	87 95       	ror	r24
    1a28:	97 f9       	bld	r25, 7
    1a2a:	08 95       	ret
    1a2c:	e1 e0       	ldi	r30, 0x01	; 1
    1a2e:	66 0f       	add	r22, r22
    1a30:	77 1f       	adc	r23, r23
    1a32:	88 1f       	adc	r24, r24
    1a34:	bb 1f       	adc	r27, r27
    1a36:	62 17       	cp	r22, r18
    1a38:	73 07       	cpc	r23, r19
    1a3a:	84 07       	cpc	r24, r20
    1a3c:	ba 07       	cpc	r27, r26
    1a3e:	20 f0       	brcs	.+8      	; 0x1a48 <__divsf3_pse+0xaa>
    1a40:	62 1b       	sub	r22, r18
    1a42:	73 0b       	sbc	r23, r19
    1a44:	84 0b       	sbc	r24, r20
    1a46:	ba 0b       	sbc	r27, r26
    1a48:	ee 1f       	adc	r30, r30
    1a4a:	88 f7       	brcc	.-30     	; 0x1a2e <__divsf3_pse+0x90>
    1a4c:	e0 95       	com	r30
    1a4e:	08 95       	ret

00001a50 <__fixsfsi>:
    1a50:	04 d0       	rcall	.+8      	; 0x1a5a <__fixunssfsi>
    1a52:	68 94       	set
    1a54:	b1 11       	cpse	r27, r1
    1a56:	37 c1       	rjmp	.+622    	; 0x1cc6 <__fp_szero>
    1a58:	08 95       	ret

00001a5a <__fixunssfsi>:
    1a5a:	1a d1       	rcall	.+564    	; 0x1c90 <__fp_splitA>
    1a5c:	88 f0       	brcs	.+34     	; 0x1a80 <__fixunssfsi+0x26>
    1a5e:	9f 57       	subi	r25, 0x7F	; 127
    1a60:	90 f0       	brcs	.+36     	; 0x1a86 <__fixunssfsi+0x2c>
    1a62:	b9 2f       	mov	r27, r25
    1a64:	99 27       	eor	r25, r25
    1a66:	b7 51       	subi	r27, 0x17	; 23
    1a68:	a0 f0       	brcs	.+40     	; 0x1a92 <__fixunssfsi+0x38>
    1a6a:	d1 f0       	breq	.+52     	; 0x1aa0 <__fixunssfsi+0x46>
    1a6c:	66 0f       	add	r22, r22
    1a6e:	77 1f       	adc	r23, r23
    1a70:	88 1f       	adc	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	1a f0       	brmi	.+6      	; 0x1a7c <__fixunssfsi+0x22>
    1a76:	ba 95       	dec	r27
    1a78:	c9 f7       	brne	.-14     	; 0x1a6c <__fixunssfsi+0x12>
    1a7a:	12 c0       	rjmp	.+36     	; 0x1aa0 <__fixunssfsi+0x46>
    1a7c:	b1 30       	cpi	r27, 0x01	; 1
    1a7e:	81 f0       	breq	.+32     	; 0x1aa0 <__fixunssfsi+0x46>
    1a80:	21 d1       	rcall	.+578    	; 0x1cc4 <__fp_zero>
    1a82:	b1 e0       	ldi	r27, 0x01	; 1
    1a84:	08 95       	ret
    1a86:	1e c1       	rjmp	.+572    	; 0x1cc4 <__fp_zero>
    1a88:	67 2f       	mov	r22, r23
    1a8a:	78 2f       	mov	r23, r24
    1a8c:	88 27       	eor	r24, r24
    1a8e:	b8 5f       	subi	r27, 0xF8	; 248
    1a90:	39 f0       	breq	.+14     	; 0x1aa0 <__fixunssfsi+0x46>
    1a92:	b9 3f       	cpi	r27, 0xF9	; 249
    1a94:	cc f3       	brlt	.-14     	; 0x1a88 <__fixunssfsi+0x2e>
    1a96:	86 95       	lsr	r24
    1a98:	77 95       	ror	r23
    1a9a:	67 95       	ror	r22
    1a9c:	b3 95       	inc	r27
    1a9e:	d9 f7       	brne	.-10     	; 0x1a96 <__fixunssfsi+0x3c>
    1aa0:	3e f4       	brtc	.+14     	; 0x1ab0 <__fixunssfsi+0x56>
    1aa2:	90 95       	com	r25
    1aa4:	80 95       	com	r24
    1aa6:	70 95       	com	r23
    1aa8:	61 95       	neg	r22
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	8f 4f       	sbci	r24, 0xFF	; 255
    1aae:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab0:	08 95       	ret

00001ab2 <__floatunsisf>:
    1ab2:	e8 94       	clt
    1ab4:	09 c0       	rjmp	.+18     	; 0x1ac8 <__floatsisf+0x12>

00001ab6 <__floatsisf>:
    1ab6:	97 fb       	bst	r25, 7
    1ab8:	3e f4       	brtc	.+14     	; 0x1ac8 <__floatsisf+0x12>
    1aba:	90 95       	com	r25
    1abc:	80 95       	com	r24
    1abe:	70 95       	com	r23
    1ac0:	61 95       	neg	r22
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	99 23       	and	r25, r25
    1aca:	a9 f0       	breq	.+42     	; 0x1af6 <__floatsisf+0x40>
    1acc:	f9 2f       	mov	r31, r25
    1ace:	96 e9       	ldi	r25, 0x96	; 150
    1ad0:	bb 27       	eor	r27, r27
    1ad2:	93 95       	inc	r25
    1ad4:	f6 95       	lsr	r31
    1ad6:	87 95       	ror	r24
    1ad8:	77 95       	ror	r23
    1ada:	67 95       	ror	r22
    1adc:	b7 95       	ror	r27
    1ade:	f1 11       	cpse	r31, r1
    1ae0:	f8 cf       	rjmp	.-16     	; 0x1ad2 <__floatsisf+0x1c>
    1ae2:	fa f4       	brpl	.+62     	; 0x1b22 <__floatsisf+0x6c>
    1ae4:	bb 0f       	add	r27, r27
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <__floatsisf+0x36>
    1ae8:	60 ff       	sbrs	r22, 0
    1aea:	1b c0       	rjmp	.+54     	; 0x1b22 <__floatsisf+0x6c>
    1aec:	6f 5f       	subi	r22, 0xFF	; 255
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	8f 4f       	sbci	r24, 0xFF	; 255
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	16 c0       	rjmp	.+44     	; 0x1b22 <__floatsisf+0x6c>
    1af6:	88 23       	and	r24, r24
    1af8:	11 f0       	breq	.+4      	; 0x1afe <__floatsisf+0x48>
    1afa:	96 e9       	ldi	r25, 0x96	; 150
    1afc:	11 c0       	rjmp	.+34     	; 0x1b20 <__floatsisf+0x6a>
    1afe:	77 23       	and	r23, r23
    1b00:	21 f0       	breq	.+8      	; 0x1b0a <__floatsisf+0x54>
    1b02:	9e e8       	ldi	r25, 0x8E	; 142
    1b04:	87 2f       	mov	r24, r23
    1b06:	76 2f       	mov	r23, r22
    1b08:	05 c0       	rjmp	.+10     	; 0x1b14 <__floatsisf+0x5e>
    1b0a:	66 23       	and	r22, r22
    1b0c:	71 f0       	breq	.+28     	; 0x1b2a <__floatsisf+0x74>
    1b0e:	96 e8       	ldi	r25, 0x86	; 134
    1b10:	86 2f       	mov	r24, r22
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	2a f0       	brmi	.+10     	; 0x1b22 <__floatsisf+0x6c>
    1b18:	9a 95       	dec	r25
    1b1a:	66 0f       	add	r22, r22
    1b1c:	77 1f       	adc	r23, r23
    1b1e:	88 1f       	adc	r24, r24
    1b20:	da f7       	brpl	.-10     	; 0x1b18 <__floatsisf+0x62>
    1b22:	88 0f       	add	r24, r24
    1b24:	96 95       	lsr	r25
    1b26:	87 95       	ror	r24
    1b28:	97 f9       	bld	r25, 7
    1b2a:	08 95       	ret

00001b2c <__fp_cmp>:
    1b2c:	99 0f       	add	r25, r25
    1b2e:	00 08       	sbc	r0, r0
    1b30:	55 0f       	add	r21, r21
    1b32:	aa 0b       	sbc	r26, r26
    1b34:	e0 e8       	ldi	r30, 0x80	; 128
    1b36:	fe ef       	ldi	r31, 0xFE	; 254
    1b38:	16 16       	cp	r1, r22
    1b3a:	17 06       	cpc	r1, r23
    1b3c:	e8 07       	cpc	r30, r24
    1b3e:	f9 07       	cpc	r31, r25
    1b40:	c0 f0       	brcs	.+48     	; 0x1b72 <__fp_cmp+0x46>
    1b42:	12 16       	cp	r1, r18
    1b44:	13 06       	cpc	r1, r19
    1b46:	e4 07       	cpc	r30, r20
    1b48:	f5 07       	cpc	r31, r21
    1b4a:	98 f0       	brcs	.+38     	; 0x1b72 <__fp_cmp+0x46>
    1b4c:	62 1b       	sub	r22, r18
    1b4e:	73 0b       	sbc	r23, r19
    1b50:	84 0b       	sbc	r24, r20
    1b52:	95 0b       	sbc	r25, r21
    1b54:	39 f4       	brne	.+14     	; 0x1b64 <__fp_cmp+0x38>
    1b56:	0a 26       	eor	r0, r26
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <__fp_cmp+0x46>
    1b5a:	23 2b       	or	r18, r19
    1b5c:	24 2b       	or	r18, r20
    1b5e:	25 2b       	or	r18, r21
    1b60:	21 f4       	brne	.+8      	; 0x1b6a <__fp_cmp+0x3e>
    1b62:	08 95       	ret
    1b64:	0a 26       	eor	r0, r26
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <__fp_cmp+0x3e>
    1b68:	a1 40       	sbci	r26, 0x01	; 1
    1b6a:	a6 95       	lsr	r26
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	81 1d       	adc	r24, r1
    1b70:	81 1d       	adc	r24, r1
    1b72:	08 95       	ret

00001b74 <__fp_inf>:
    1b74:	97 f9       	bld	r25, 7
    1b76:	9f 67       	ori	r25, 0x7F	; 127
    1b78:	80 e8       	ldi	r24, 0x80	; 128
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	08 95       	ret

00001b80 <__fp_nan>:
    1b80:	9f ef       	ldi	r25, 0xFF	; 255
    1b82:	80 ec       	ldi	r24, 0xC0	; 192
    1b84:	08 95       	ret

00001b86 <__fp_powser>:
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	1f 93       	push	r17
    1b8c:	0f 93       	push	r16
    1b8e:	ff 92       	push	r15
    1b90:	ef 92       	push	r14
    1b92:	df 92       	push	r13
    1b94:	7b 01       	movw	r14, r22
    1b96:	8c 01       	movw	r16, r24
    1b98:	68 94       	set
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <__fp_powser+0x20>
    1b9c:	da 2e       	mov	r13, r26
    1b9e:	ef 01       	movw	r28, r30
    1ba0:	af d0       	rcall	.+350    	; 0x1d00 <__mulsf3x>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e8 94       	clt
    1ba6:	a5 91       	lpm	r26, Z+
    1ba8:	25 91       	lpm	r18, Z+
    1baa:	35 91       	lpm	r19, Z+
    1bac:	45 91       	lpm	r20, Z+
    1bae:	55 91       	lpm	r21, Z+
    1bb0:	ae f3       	brts	.-22     	; 0x1b9c <__fp_powser+0x16>
    1bb2:	ef 01       	movw	r28, r30
    1bb4:	63 de       	rcall	.-826    	; 0x187c <__addsf3x>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	97 01       	movw	r18, r14
    1bba:	a8 01       	movw	r20, r16
    1bbc:	da 94       	dec	r13
    1bbe:	79 f7       	brne	.-34     	; 0x1b9e <__fp_powser+0x18>
    1bc0:	df 90       	pop	r13
    1bc2:	ef 90       	pop	r14
    1bc4:	ff 90       	pop	r15
    1bc6:	0f 91       	pop	r16
    1bc8:	1f 91       	pop	r17
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <__fp_pscA>:
    1bd0:	00 24       	eor	r0, r0
    1bd2:	0a 94       	dec	r0
    1bd4:	16 16       	cp	r1, r22
    1bd6:	17 06       	cpc	r1, r23
    1bd8:	18 06       	cpc	r1, r24
    1bda:	09 06       	cpc	r0, r25
    1bdc:	08 95       	ret

00001bde <__fp_pscB>:
    1bde:	00 24       	eor	r0, r0
    1be0:	0a 94       	dec	r0
    1be2:	12 16       	cp	r1, r18
    1be4:	13 06       	cpc	r1, r19
    1be6:	14 06       	cpc	r1, r20
    1be8:	05 06       	cpc	r0, r21
    1bea:	08 95       	ret
    1bec:	c9 cf       	rjmp	.-110    	; 0x1b80 <__fp_nan>

00001bee <__fp_rempio2>:
    1bee:	50 d0       	rcall	.+160    	; 0x1c90 <__fp_splitA>
    1bf0:	e8 f3       	brcs	.-6      	; 0x1bec <__fp_pscB+0xe>
    1bf2:	e8 94       	clt
    1bf4:	e0 e0       	ldi	r30, 0x00	; 0
    1bf6:	bb 27       	eor	r27, r27
    1bf8:	9f 57       	subi	r25, 0x7F	; 127
    1bfa:	f0 f0       	brcs	.+60     	; 0x1c38 <__fp_rempio2+0x4a>
    1bfc:	2a ed       	ldi	r18, 0xDA	; 218
    1bfe:	3f e0       	ldi	r19, 0x0F	; 15
    1c00:	49 ec       	ldi	r20, 0xC9	; 201
    1c02:	06 c0       	rjmp	.+12     	; 0x1c10 <__fp_rempio2+0x22>
    1c04:	ee 0f       	add	r30, r30
    1c06:	bb 0f       	add	r27, r27
    1c08:	66 1f       	adc	r22, r22
    1c0a:	77 1f       	adc	r23, r23
    1c0c:	88 1f       	adc	r24, r24
    1c0e:	28 f0       	brcs	.+10     	; 0x1c1a <__fp_rempio2+0x2c>
    1c10:	b2 3a       	cpi	r27, 0xA2	; 162
    1c12:	62 07       	cpc	r22, r18
    1c14:	73 07       	cpc	r23, r19
    1c16:	84 07       	cpc	r24, r20
    1c18:	28 f0       	brcs	.+10     	; 0x1c24 <__fp_rempio2+0x36>
    1c1a:	b2 5a       	subi	r27, 0xA2	; 162
    1c1c:	62 0b       	sbc	r22, r18
    1c1e:	73 0b       	sbc	r23, r19
    1c20:	84 0b       	sbc	r24, r20
    1c22:	e3 95       	inc	r30
    1c24:	9a 95       	dec	r25
    1c26:	72 f7       	brpl	.-36     	; 0x1c04 <__fp_rempio2+0x16>
    1c28:	80 38       	cpi	r24, 0x80	; 128
    1c2a:	30 f4       	brcc	.+12     	; 0x1c38 <__fp_rempio2+0x4a>
    1c2c:	9a 95       	dec	r25
    1c2e:	bb 0f       	add	r27, r27
    1c30:	66 1f       	adc	r22, r22
    1c32:	77 1f       	adc	r23, r23
    1c34:	88 1f       	adc	r24, r24
    1c36:	d2 f7       	brpl	.-12     	; 0x1c2c <__fp_rempio2+0x3e>
    1c38:	90 48       	sbci	r25, 0x80	; 128
    1c3a:	be c0       	rjmp	.+380    	; 0x1db8 <__fp_mpack_finite>

00001c3c <__fp_round>:
    1c3c:	09 2e       	mov	r0, r25
    1c3e:	03 94       	inc	r0
    1c40:	00 0c       	add	r0, r0
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <__fp_round+0xc>
    1c44:	88 23       	and	r24, r24
    1c46:	52 f0       	brmi	.+20     	; 0x1c5c <__fp_round+0x20>
    1c48:	bb 0f       	add	r27, r27
    1c4a:	40 f4       	brcc	.+16     	; 0x1c5c <__fp_round+0x20>
    1c4c:	bf 2b       	or	r27, r31
    1c4e:	11 f4       	brne	.+4      	; 0x1c54 <__fp_round+0x18>
    1c50:	60 ff       	sbrs	r22, 0
    1c52:	04 c0       	rjmp	.+8      	; 0x1c5c <__fp_round+0x20>
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	08 95       	ret

00001c5e <__fp_sinus>:
    1c5e:	ef 93       	push	r30
    1c60:	e0 ff       	sbrs	r30, 0
    1c62:	06 c0       	rjmp	.+12     	; 0x1c70 <__fp_sinus+0x12>
    1c64:	a2 ea       	ldi	r26, 0xA2	; 162
    1c66:	2a ed       	ldi	r18, 0xDA	; 218
    1c68:	3f e0       	ldi	r19, 0x0F	; 15
    1c6a:	49 ec       	ldi	r20, 0xC9	; 201
    1c6c:	5f eb       	ldi	r21, 0xBF	; 191
    1c6e:	06 de       	rcall	.-1012   	; 0x187c <__addsf3x>
    1c70:	e5 df       	rcall	.-54     	; 0x1c3c <__fp_round>
    1c72:	0f 90       	pop	r0
    1c74:	03 94       	inc	r0
    1c76:	01 fc       	sbrc	r0, 1
    1c78:	90 58       	subi	r25, 0x80	; 128
    1c7a:	e9 eb       	ldi	r30, 0xB9	; 185
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	a8 c0       	rjmp	.+336    	; 0x1dd0 <__fp_powsodd>

00001c80 <__fp_split3>:
    1c80:	57 fd       	sbrc	r21, 7
    1c82:	90 58       	subi	r25, 0x80	; 128
    1c84:	44 0f       	add	r20, r20
    1c86:	55 1f       	adc	r21, r21
    1c88:	59 f0       	breq	.+22     	; 0x1ca0 <__fp_splitA+0x10>
    1c8a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c8c:	71 f0       	breq	.+28     	; 0x1caa <__fp_splitA+0x1a>
    1c8e:	47 95       	ror	r20

00001c90 <__fp_splitA>:
    1c90:	88 0f       	add	r24, r24
    1c92:	97 fb       	bst	r25, 7
    1c94:	99 1f       	adc	r25, r25
    1c96:	61 f0       	breq	.+24     	; 0x1cb0 <__fp_splitA+0x20>
    1c98:	9f 3f       	cpi	r25, 0xFF	; 255
    1c9a:	79 f0       	breq	.+30     	; 0x1cba <__fp_splitA+0x2a>
    1c9c:	87 95       	ror	r24
    1c9e:	08 95       	ret
    1ca0:	12 16       	cp	r1, r18
    1ca2:	13 06       	cpc	r1, r19
    1ca4:	14 06       	cpc	r1, r20
    1ca6:	55 1f       	adc	r21, r21
    1ca8:	f2 cf       	rjmp	.-28     	; 0x1c8e <__fp_split3+0xe>
    1caa:	46 95       	lsr	r20
    1cac:	f1 df       	rcall	.-30     	; 0x1c90 <__fp_splitA>
    1cae:	08 c0       	rjmp	.+16     	; 0x1cc0 <__fp_splitA+0x30>
    1cb0:	16 16       	cp	r1, r22
    1cb2:	17 06       	cpc	r1, r23
    1cb4:	18 06       	cpc	r1, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	f1 cf       	rjmp	.-30     	; 0x1c9c <__fp_splitA+0xc>
    1cba:	86 95       	lsr	r24
    1cbc:	71 05       	cpc	r23, r1
    1cbe:	61 05       	cpc	r22, r1
    1cc0:	08 94       	sec
    1cc2:	08 95       	ret

00001cc4 <__fp_zero>:
    1cc4:	e8 94       	clt

00001cc6 <__fp_szero>:
    1cc6:	bb 27       	eor	r27, r27
    1cc8:	66 27       	eor	r22, r22
    1cca:	77 27       	eor	r23, r23
    1ccc:	cb 01       	movw	r24, r22
    1cce:	97 f9       	bld	r25, 7
    1cd0:	08 95       	ret

00001cd2 <__gesf2>:
    1cd2:	2c df       	rcall	.-424    	; 0x1b2c <__fp_cmp>
    1cd4:	08 f4       	brcc	.+2      	; 0x1cd8 <__gesf2+0x6>
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	08 95       	ret

00001cda <inverse>:
    1cda:	9b 01       	movw	r18, r22
    1cdc:	ac 01       	movw	r20, r24
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	80 e8       	ldi	r24, 0x80	; 128
    1ce4:	9f e3       	ldi	r25, 0x3F	; 63
    1ce6:	4c ce       	rjmp	.-872    	; 0x1980 <__divsf3>

00001ce8 <__mulsf3>:
    1ce8:	0b d0       	rcall	.+22     	; 0x1d00 <__mulsf3x>
    1cea:	a8 cf       	rjmp	.-176    	; 0x1c3c <__fp_round>
    1cec:	71 df       	rcall	.-286    	; 0x1bd0 <__fp_pscA>
    1cee:	28 f0       	brcs	.+10     	; 0x1cfa <__mulsf3+0x12>
    1cf0:	76 df       	rcall	.-276    	; 0x1bde <__fp_pscB>
    1cf2:	18 f0       	brcs	.+6      	; 0x1cfa <__mulsf3+0x12>
    1cf4:	95 23       	and	r25, r21
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <__mulsf3+0x12>
    1cf8:	3d cf       	rjmp	.-390    	; 0x1b74 <__fp_inf>
    1cfa:	42 cf       	rjmp	.-380    	; 0x1b80 <__fp_nan>
    1cfc:	11 24       	eor	r1, r1
    1cfe:	e3 cf       	rjmp	.-58     	; 0x1cc6 <__fp_szero>

00001d00 <__mulsf3x>:
    1d00:	bf df       	rcall	.-130    	; 0x1c80 <__fp_split3>
    1d02:	a0 f3       	brcs	.-24     	; 0x1cec <__mulsf3+0x4>

00001d04 <__mulsf3_pse>:
    1d04:	95 9f       	mul	r25, r21
    1d06:	d1 f3       	breq	.-12     	; 0x1cfc <__mulsf3+0x14>
    1d08:	95 0f       	add	r25, r21
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	55 1f       	adc	r21, r21
    1d0e:	62 9f       	mul	r22, r18
    1d10:	f0 01       	movw	r30, r0
    1d12:	72 9f       	mul	r23, r18
    1d14:	bb 27       	eor	r27, r27
    1d16:	f0 0d       	add	r31, r0
    1d18:	b1 1d       	adc	r27, r1
    1d1a:	63 9f       	mul	r22, r19
    1d1c:	aa 27       	eor	r26, r26
    1d1e:	f0 0d       	add	r31, r0
    1d20:	b1 1d       	adc	r27, r1
    1d22:	aa 1f       	adc	r26, r26
    1d24:	64 9f       	mul	r22, r20
    1d26:	66 27       	eor	r22, r22
    1d28:	b0 0d       	add	r27, r0
    1d2a:	a1 1d       	adc	r26, r1
    1d2c:	66 1f       	adc	r22, r22
    1d2e:	82 9f       	mul	r24, r18
    1d30:	22 27       	eor	r18, r18
    1d32:	b0 0d       	add	r27, r0
    1d34:	a1 1d       	adc	r26, r1
    1d36:	62 1f       	adc	r22, r18
    1d38:	73 9f       	mul	r23, r19
    1d3a:	b0 0d       	add	r27, r0
    1d3c:	a1 1d       	adc	r26, r1
    1d3e:	62 1f       	adc	r22, r18
    1d40:	83 9f       	mul	r24, r19
    1d42:	a0 0d       	add	r26, r0
    1d44:	61 1d       	adc	r22, r1
    1d46:	22 1f       	adc	r18, r18
    1d48:	74 9f       	mul	r23, r20
    1d4a:	33 27       	eor	r19, r19
    1d4c:	a0 0d       	add	r26, r0
    1d4e:	61 1d       	adc	r22, r1
    1d50:	23 1f       	adc	r18, r19
    1d52:	84 9f       	mul	r24, r20
    1d54:	60 0d       	add	r22, r0
    1d56:	21 1d       	adc	r18, r1
    1d58:	82 2f       	mov	r24, r18
    1d5a:	76 2f       	mov	r23, r22
    1d5c:	6a 2f       	mov	r22, r26
    1d5e:	11 24       	eor	r1, r1
    1d60:	9f 57       	subi	r25, 0x7F	; 127
    1d62:	50 40       	sbci	r21, 0x00	; 0
    1d64:	8a f0       	brmi	.+34     	; 0x1d88 <__mulsf3_pse+0x84>
    1d66:	e1 f0       	breq	.+56     	; 0x1da0 <__mulsf3_pse+0x9c>
    1d68:	88 23       	and	r24, r24
    1d6a:	4a f0       	brmi	.+18     	; 0x1d7e <__mulsf3_pse+0x7a>
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	bb 1f       	adc	r27, r27
    1d72:	66 1f       	adc	r22, r22
    1d74:	77 1f       	adc	r23, r23
    1d76:	88 1f       	adc	r24, r24
    1d78:	91 50       	subi	r25, 0x01	; 1
    1d7a:	50 40       	sbci	r21, 0x00	; 0
    1d7c:	a9 f7       	brne	.-22     	; 0x1d68 <__mulsf3_pse+0x64>
    1d7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d80:	51 05       	cpc	r21, r1
    1d82:	70 f0       	brcs	.+28     	; 0x1da0 <__mulsf3_pse+0x9c>
    1d84:	f7 ce       	rjmp	.-530    	; 0x1b74 <__fp_inf>
    1d86:	9f cf       	rjmp	.-194    	; 0x1cc6 <__fp_szero>
    1d88:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8a:	ec f3       	brlt	.-6      	; 0x1d86 <__mulsf3_pse+0x82>
    1d8c:	98 3e       	cpi	r25, 0xE8	; 232
    1d8e:	dc f3       	brlt	.-10     	; 0x1d86 <__mulsf3_pse+0x82>
    1d90:	86 95       	lsr	r24
    1d92:	77 95       	ror	r23
    1d94:	67 95       	ror	r22
    1d96:	b7 95       	ror	r27
    1d98:	f7 95       	ror	r31
    1d9a:	e7 95       	ror	r30
    1d9c:	9f 5f       	subi	r25, 0xFF	; 255
    1d9e:	c1 f7       	brne	.-16     	; 0x1d90 <__mulsf3_pse+0x8c>
    1da0:	fe 2b       	or	r31, r30
    1da2:	88 0f       	add	r24, r24
    1da4:	91 1d       	adc	r25, r1
    1da6:	96 95       	lsr	r25
    1da8:	87 95       	ror	r24
    1daa:	97 f9       	bld	r25, 7
    1dac:	08 95       	ret

00001dae <square>:
    1dae:	9b 01       	movw	r18, r22
    1db0:	ac 01       	movw	r20, r24
    1db2:	9a cf       	rjmp	.-204    	; 0x1ce8 <__mulsf3>

00001db4 <__fp_mpack>:
    1db4:	9f 3f       	cpi	r25, 0xFF	; 255
    1db6:	31 f0       	breq	.+12     	; 0x1dc4 <__fp_mpack_finite+0xc>

00001db8 <__fp_mpack_finite>:
    1db8:	91 50       	subi	r25, 0x01	; 1
    1dba:	20 f4       	brcc	.+8      	; 0x1dc4 <__fp_mpack_finite+0xc>
    1dbc:	87 95       	ror	r24
    1dbe:	77 95       	ror	r23
    1dc0:	67 95       	ror	r22
    1dc2:	b7 95       	ror	r27
    1dc4:	88 0f       	add	r24, r24
    1dc6:	91 1d       	adc	r25, r1
    1dc8:	96 95       	lsr	r25
    1dca:	87 95       	ror	r24
    1dcc:	97 f9       	bld	r25, 7
    1dce:	08 95       	ret

00001dd0 <__fp_powsodd>:
    1dd0:	9f 93       	push	r25
    1dd2:	8f 93       	push	r24
    1dd4:	7f 93       	push	r23
    1dd6:	6f 93       	push	r22
    1dd8:	ff 93       	push	r31
    1dda:	ef 93       	push	r30
    1ddc:	9b 01       	movw	r18, r22
    1dde:	ac 01       	movw	r20, r24
    1de0:	83 df       	rcall	.-250    	; 0x1ce8 <__mulsf3>
    1de2:	ef 91       	pop	r30
    1de4:	ff 91       	pop	r31
    1de6:	cf de       	rcall	.-610    	; 0x1b86 <__fp_powser>
    1de8:	2f 91       	pop	r18
    1dea:	3f 91       	pop	r19
    1dec:	4f 91       	pop	r20
    1dee:	5f 91       	pop	r21
    1df0:	7b cf       	rjmp	.-266    	; 0x1ce8 <__mulsf3>

00001df2 <_exit>:
    1df2:	f8 94       	cli

00001df4 <__stop_program>:
    1df4:	ff cf       	rjmp	.-2      	; 0x1df4 <__stop_program>
