
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000011ba  00800100  00001f68  00001ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000683  008012ba  008012ba  000031b6  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  000031b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006d68  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003b8  00000000  00000000  00006d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003504  00000000  00000000  0000714f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f72  00000000  00000000  0000a653  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022ba  00000000  00000000  0000b5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b88  00000000  00000000  0000d880  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c84  00000000  00000000  0000e408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002270  00000000  00000000  0000f08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f0  00000000  00000000  000112fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	08 c5       	rjmp	.+2576   	; 0xa16 <__vector_1>
       6:	00 00       	nop
       8:	30 c5       	rjmp	.+2656   	; 0xa6a <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	bd c5       	rjmp	.+2938   	; 0xb8c <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c5       	rjmp	.+2846   	; 0xb54 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c5       	rjmp	.+2798   	; 0xb70 <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	12 e1       	ldi	r17, 0x12	; 18
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e8 e6       	ldi	r30, 0x68	; 104
      ec:	ff e1       	ldi	r31, 0x1F	; 31
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	aa 3b       	cpi	r26, 0xBA	; 186
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	29 e1       	ldi	r18, 0x19	; 25
     100:	aa eb       	ldi	r26, 0xBA	; 186
     102:	b2 e1       	ldi	r27, 0x12	; 18
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	ad 33       	cpi	r26, 0x3D	; 61
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	d7 d4       	rcall	.+2478   	; 0xabe <main>
     110:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
	if(gStatus)
     11a:	80 91 00 01 	lds	r24, 0x0100
     11e:	88 23       	and	r24, r24
     120:	c9 f0       	breq	.+50     	; 0x154 <turn_around+0x3e>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     122:	69 e1       	ldi	r22, 0x19	; 25
     124:	71 e1       	ldi	r23, 0x11	; 17
     126:	80 e8       	ldi	r24, 0x80	; 128
     128:	73 d6       	rcall	.+3302   	; 0xe10 <TWI_send_string>
     12a:	14 c0       	rjmp	.+40     	; 0x154 <turn_around+0x3e>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	6e e1       	ldi	r22, 0x1E	; 30
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <USART_send_command_parameters>
		navigation_stepping_delay();
     136:	b8 d1       	rcall	.+880    	; 0x4a8 <navigation_stepping_delay>
     138:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
	}
	for(int i = 0; (i < 40 && TWI_get_autonom_settings() != 0); ++i)
     13a:	19 f0       	breq	.+6      	; 0x142 <turn_around+0x2c>
     13c:	44 d7       	rcall	.+3720   	; 0xfc6 <TWI_get_autonom_settings>
     13e:	81 11       	cpse	r24, r1
     140:	f5 cf       	rjmp	.-22     	; 0x12c <turn_around+0x16>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	if(gStatus)
     142:	80 91 00 01 	lds	r24, 0x0100
     146:	88 23       	and	r24, r24
     148:	41 f0       	breq	.+16     	; 0x15a <turn_around+0x44>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     14a:	62 e3       	ldi	r22, 0x32	; 50
     14c:	71 e1       	ldi	r23, 0x11	; 17
     14e:	80 e8       	ldi	r24, 0x80	; 128
     150:	5f d6       	rcall	.+3262   	; 0xe10 <TWI_send_string>
     152:	03 c0       	rjmp	.+6      	; 0x15a <turn_around+0x44>
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     154:	c8 e2       	ldi	r28, 0x28	; 40
     156:	d0 e0       	ldi	r29, 0x00	; 0
     158:	f1 cf       	rjmp	.-30     	; 0x13c <turn_around+0x26>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
	}
}
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <walk_forward>:

void walk_forward()
{
     160:	8f 92       	push	r8
     162:	9f 92       	push	r9
     164:	af 92       	push	r10
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     174:	56 d3       	rcall	.+1708   	; 0x822 <navigation_angle_offset>
     176:	6b 01       	movw	r12, r22
     178:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     17a:	4d d2       	rcall	.+1178   	; 0x616 <navigation_direction_regulation>
     17c:	4b 01       	movw	r8, r22
     17e:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	48 e4       	ldi	r20, 0x48	; 72
     186:	52 e4       	ldi	r21, 0x42	; 66
     188:	c7 01       	movw	r24, r14
     18a:	b6 01       	movw	r22, r12
     18c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     190:	9b 01       	movw	r18, r22
     192:	ac 01       	movw	r20, r24
     194:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__addsf3>
     198:	2b ed       	ldi	r18, 0xDB	; 219
     19a:	3f e0       	ldi	r19, 0x0F	; 15
     19c:	49 e4       	ldi	r20, 0x49	; 73
     19e:	50 e4       	ldi	r21, 0x40	; 64
     1a0:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__divsf3>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	4c e4       	ldi	r20, 0x4C	; 76
     1aa:	52 e4       	ldi	r21, 0x42	; 66
     1ac:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__addsf3>
     1b0:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1b4:	64 36       	cpi	r22, 0x64	; 100
     1b6:	71 05       	cpc	r23, r1
     1b8:	34 f4       	brge	.+12     	; 0x1c6 <walk_forward+0x66>
     1ba:	eb 01       	movw	r28, r22
     1bc:	dd 23       	and	r29, r29
     1be:	2c f4       	brge	.+10     	; 0x1ca <walk_forward+0x6a>
     1c0:	c0 e0       	ldi	r28, 0x00	; 0
     1c2:	d0 e0       	ldi	r29, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1c6:	c4 e6       	ldi	r28, 0x64	; 100
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	44 eb       	ldi	r20, 0xB4	; 180
     1d0:	52 e4       	ldi	r21, 0x42	; 66
     1d2:	c5 01       	movw	r24, r10
     1d4:	b4 01       	movw	r22, r8
     1d6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     1da:	2b ed       	ldi	r18, 0xDB	; 219
     1dc:	3f e0       	ldi	r19, 0x0F	; 15
     1de:	49 ec       	ldi	r20, 0xC9	; 201
     1e0:	50 e4       	ldi	r21, 0x40	; 64
     1e2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__divsf3>
     1e6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fixsfsi>
     1ea:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1ec:	40 91 01 01 	lds	r20, 0x0101
     1f0:	6c 2f       	mov	r22, r28
     1f2:	82 2f       	mov	r24, r18
     1f4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1f8:	57 d1       	rcall	.+686    	; 0x4a8 <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	ff 90       	pop	r15
     200:	ef 90       	pop	r14
     202:	df 90       	pop	r13
     204:	cf 90       	pop	r12
     206:	bf 90       	pop	r11
     208:	af 90       	pop	r10
     20a:	9f 90       	pop	r9
     20c:	8f 90       	pop	r8
     20e:	08 95       	ret

00000210 <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
	if(gStatus)
     214:	80 91 00 01 	lds	r24, 0x0100
     218:	88 23       	and	r24, r24
     21a:	01 f1       	breq	.+64     	; 0x25c <turn_right+0x4c>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     21c:	67 e5       	ldi	r22, 0x57	; 87
     21e:	71 e1       	ldi	r23, 0x11	; 17
     220:	80 e8       	ldi	r24, 0x80	; 128
     222:	f6 d5       	rcall	.+3052   	; 0xe10 <TWI_send_string>
     224:	1b c0       	rjmp	.+54     	; 0x25c <turn_right+0x4c>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	66 e4       	ldi	r22, 0x46	; 70
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <USART_send_command_parameters>
		navigation_stepping_delay();
     230:	3b d1       	rcall	.+630    	; 0x4a8 <navigation_stepping_delay>
     232:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     234:	b1 f0       	breq	.+44     	; 0x262 <turn_right+0x52>
     236:	c7 d6       	rcall	.+3470   	; 0xfc6 <TWI_get_autonom_settings>
     238:	81 11       	cpse	r24, r1
     23a:	f5 cf       	rjmp	.-22     	; 0x226 <turn_right+0x16>
     23c:	12 c0       	rjmp	.+36     	; 0x262 <turn_right+0x52>
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     23e:	90 df       	rcall	.-224    	; 0x160 <walk_forward>
     240:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     242:	19 f0       	breq	.+6      	; 0x24a <turn_right+0x3a>
     244:	c0 d6       	rcall	.+3456   	; 0xfc6 <TWI_get_autonom_settings>
     246:	81 11       	cpse	r24, r1
     248:	fa cf       	rjmp	.-12     	; 0x23e <turn_right+0x2e>
	{
		walk_forward();
	}
	if(gStatus)
     24a:	80 91 00 01 	lds	r24, 0x0100
     24e:	88 23       	and	r24, r24
     250:	59 f0       	breq	.+22     	; 0x268 <turn_right+0x58>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     252:	6f e6       	ldi	r22, 0x6F	; 111
     254:	71 e1       	ldi	r23, 0x11	; 17
     256:	80 e8       	ldi	r24, 0x80	; 128
     258:	db d5       	rcall	.+2998   	; 0xe10 <TWI_send_string>
     25a:	06 c0       	rjmp	.+12     	; 0x268 <turn_right+0x58>
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     25c:	c4 e1       	ldi	r28, 0x14	; 20
     25e:	d0 e0       	ldi	r29, 0x00	; 0
     260:	ea cf       	rjmp	.-44     	; 0x236 <turn_right+0x26>
     262:	cc e0       	ldi	r28, 0x0C	; 12
     264:	d0 e0       	ldi	r29, 0x00	; 0
     266:	ee cf       	rjmp	.-36     	; 0x244 <turn_right+0x34>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
	if(gStatus)
     272:	80 91 00 01 	lds	r24, 0x0100
     276:	88 23       	and	r24, r24
     278:	01 f1       	breq	.+64     	; 0x2ba <turn_left+0x4c>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     27a:	63 e8       	ldi	r22, 0x83	; 131
     27c:	71 e1       	ldi	r23, 0x11	; 17
     27e:	80 e8       	ldi	r24, 0x80	; 128
     280:	c7 d5       	rcall	.+2958   	; 0xe10 <TWI_send_string>
     282:	1b c0       	rjmp	.+54     	; 0x2ba <turn_left+0x4c>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	6e e1       	ldi	r22, 0x1E	; 30
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <USART_send_command_parameters>
		navigation_stepping_delay();
     28e:	0c d1       	rcall	.+536    	; 0x4a8 <navigation_stepping_delay>
     290:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     292:	b1 f0       	breq	.+44     	; 0x2c0 <turn_left+0x52>
     294:	98 d6       	rcall	.+3376   	; 0xfc6 <TWI_get_autonom_settings>
     296:	81 11       	cpse	r24, r1
     298:	f5 cf       	rjmp	.-22     	; 0x284 <turn_left+0x16>
     29a:	12 c0       	rjmp	.+36     	; 0x2c0 <turn_left+0x52>
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     29c:	61 df       	rcall	.-318    	; 0x160 <walk_forward>
     29e:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <turn_left+0x3a>
     2a2:	91 d6       	rcall	.+3362   	; 0xfc6 <TWI_get_autonom_settings>
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <turn_left+0x2e>
	{
		walk_forward();
	}
	if(gStatus)
     2a8:	80 91 00 01 	lds	r24, 0x0100
     2ac:	88 23       	and	r24, r24
     2ae:	59 f0       	breq	.+22     	; 0x2c6 <turn_left+0x58>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2b0:	6a e9       	ldi	r22, 0x9A	; 154
     2b2:	71 e1       	ldi	r23, 0x11	; 17
     2b4:	80 e8       	ldi	r24, 0x80	; 128
     2b6:	ac d5       	rcall	.+2904   	; 0xe10 <TWI_send_string>
     2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <turn_left+0x58>
{
	return gStatus;
}

void turn_left()
{
     2ba:	c4 e1       	ldi	r28, 0x14	; 20
     2bc:	d0 e0       	ldi	r29, 0x00	; 0
     2be:	ea cf       	rjmp	.-44     	; 0x294 <turn_left+0x26>
     2c0:	cc e0       	ldi	r28, 0x0C	; 12
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
     2c4:	ee cf       	rjmp	.-36     	; 0x2a2 <turn_left+0x34>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <autonomouswalk_walk>:
	navigation_stepping_delay();
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void autonomouswalk_walk()
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
	if(navigation_left_algorithm())
     2d0:	df d0       	rcall	.+446    	; 0x490 <navigation_left_algorithm>
     2d2:	88 23       	and	r24, r24
     2d4:	e9 f0       	breq	.+58     	; 0x310 <autonomouswalk_walk+0x44>
	{
		if(navigation_check_left_turn() == 2)
     2d6:	8a d1       	rcall	.+788    	; 0x5ec <navigation_check_left_turn>
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	61 f4       	brne	.+24     	; 0x2f4 <autonomouswalk_walk+0x28>
     2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <autonomouswalk_walk+0x1a>
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     2de:	40 df       	rcall	.-384    	; 0x160 <walk_forward>
     2e0:	21 97       	sbiw	r28, 0x01	; 1
{
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
     2e2:	19 f4       	brne	.+6      	; 0x2ea <autonomouswalk_walk+0x1e>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <autonomouswalk_walk+0x24>

void autonomouswalk_walk()
{
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
     2e6:	c3 e0       	ldi	r28, 0x03	; 3
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
     2ea:	6d d6       	rcall	.+3290   	; 0xfc6 <TWI_get_autonom_settings>
     2ec:	81 11       	cpse	r24, r1
     2ee:	f7 cf       	rjmp	.-18     	; 0x2de <autonomouswalk_walk+0x12>
			{
				walk_forward();
			}
			turn_left();
     2f0:	be df       	rcall	.-132    	; 0x26e <turn_left>
     2f2:	2a c0       	rjmp	.+84     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     2f4:	84 e0       	ldi	r24, 0x04	; 4
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	1b d1       	rcall	.+566    	; 0x530 <navigation_get_sensor>
     2fa:	89 32       	cpi	r24, 0x29	; 41
     2fc:	10 f0       	brcs	.+4      	; 0x302 <autonomouswalk_walk+0x36>
		{
			walk_forward();
     2fe:	30 df       	rcall	.-416    	; 0x160 <walk_forward>
     300:	23 c0       	rjmp	.+70     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else if(navigation_check_right_turn() == 2)
     302:	5f d1       	rcall	.+702    	; 0x5c2 <navigation_check_right_turn>
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	11 f4       	brne	.+4      	; 0x30c <autonomouswalk_walk+0x40>
		{
			turn_right();
     308:	83 df       	rcall	.-250    	; 0x210 <turn_right>
     30a:	1e c0       	rjmp	.+60     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else
		{
			turn_around();
     30c:	04 df       	rcall	.-504    	; 0x116 <turn_around>
     30e:	1c c0       	rjmp	.+56     	; 0x348 <autonomouswalk_walk+0x7c>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     310:	58 d1       	rcall	.+688    	; 0x5c2 <navigation_check_right_turn>
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	61 f4       	brne	.+24     	; 0x32e <autonomouswalk_walk+0x62>
     316:	04 c0       	rjmp	.+8      	; 0x320 <autonomouswalk_walk+0x54>
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     318:	23 df       	rcall	.-442    	; 0x160 <walk_forward>
     31a:	21 97       	sbiw	r28, 0x01	; 1
	}
	else
	{
		if(navigation_check_right_turn() == 2)
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
     31c:	19 f4       	brne	.+6      	; 0x324 <autonomouswalk_walk+0x58>
     31e:	05 c0       	rjmp	.+10     	; 0x32a <autonomouswalk_walk+0x5e>
			turn_around();
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     320:	c3 e0       	ldi	r28, 0x03	; 3
     322:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
     324:	50 d6       	rcall	.+3232   	; 0xfc6 <TWI_get_autonom_settings>
     326:	81 11       	cpse	r24, r1
     328:	f7 cf       	rjmp	.-18     	; 0x318 <autonomouswalk_walk+0x4c>
			{
				walk_forward();
			}
			turn_right();
     32a:	72 df       	rcall	.-284    	; 0x210 <turn_right>
     32c:	0d c0       	rjmp	.+26     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     32e:	84 e0       	ldi	r24, 0x04	; 4
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	fe d0       	rcall	.+508    	; 0x530 <navigation_get_sensor>
     334:	89 32       	cpi	r24, 0x29	; 41
     336:	10 f0       	brcs	.+4      	; 0x33c <autonomouswalk_walk+0x70>
		{
			walk_forward();
     338:	13 df       	rcall	.-474    	; 0x160 <walk_forward>
     33a:	06 c0       	rjmp	.+12     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else if(navigation_check_left_turn() == 2)
     33c:	57 d1       	rcall	.+686    	; 0x5ec <navigation_check_left_turn>
     33e:	82 30       	cpi	r24, 0x02	; 2
     340:	11 f4       	brne	.+4      	; 0x346 <autonomouswalk_walk+0x7a>
		{
			turn_left();
     342:	95 df       	rcall	.-214    	; 0x26e <turn_left>
     344:	01 c0       	rjmp	.+2      	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else
		{
			turn_around();
     346:	e7 de       	rcall	.-562    	; 0x116 <turn_around>
		}
	}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     34e:	bc 01       	movw	r22, r24
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__floatunsisf>
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	4a e7       	ldi	r20, 0x7A	; 122
     35e:	51 e4       	ldi	r21, 0x41	; 65
     360:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     364:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixunssfsi>
	OCR1A = delay;
     368:	70 93 89 00 	sts	0x0089, r23
     36c:	60 93 88 00 	sts	0x0088, r22
     370:	08 95       	ret

00000372 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     372:	bc 01       	movw	r22, r24
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__floatunsisf>
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	4a e7       	ldi	r20, 0x7A	; 122
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     388:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixunssfsi>
	OCR3A = delay;
     38c:	70 93 99 00 	sts	0x0099, r23
     390:	60 93 98 00 	sts	0x0098, r22
     394:	08 95       	ret

00000396 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     396:	e1 e8       	ldi	r30, 0x81	; 129
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	85 60       	ori	r24, 0x05	; 5
     39e:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     3a0:	e1 e9       	ldi	r30, 0x91	; 145
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	85 60       	ori	r24, 0x05	; 5
     3a8:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     3aa:	88 ee       	ldi	r24, 0xE8	; 232
     3ac:	93 e0       	ldi	r25, 0x03	; 3
     3ae:	cf df       	rcall	.-98     	; 0x34e <set_counter_1>
	set_counter_2(1000);
     3b0:	88 ee       	ldi	r24, 0xE8	; 232
     3b2:	93 e0       	ldi	r25, 0x03	; 3
     3b4:	de df       	rcall	.-68     	; 0x372 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     3b6:	ef e6       	ldi	r30, 0x6F	; 111
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	82 60       	ori	r24, 0x02	; 2
     3be:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     3c0:	e1 e7       	ldi	r30, 0x71	; 113
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	82 60       	ori	r24, 0x02	; 2
     3c8:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     3ca:	10 92 85 00 	sts	0x0085, r1
     3ce:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     3d2:	10 92 95 00 	sts	0x0095, r1
     3d6:	10 92 94 00 	sts	0x0094, r1
     3da:	08 95       	ret

000003dc <FifoDataLength>:
     3dc:	fc 01       	movw	r30, r24
     3de:	90 81       	ld	r25, Z
     3e0:	91 50       	subi	r25, 0x01	; 1
     3e2:	84 81       	ldd	r24, Z+4	; 0x04
     3e4:	22 81       	ldd	r18, Z+2	; 0x02
     3e6:	82 1b       	sub	r24, r18
     3e8:	89 23       	and	r24, r25
     3ea:	08 95       	ret

000003ec <FifoWrite>:
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	ec 01       	movw	r28, r24
     3f4:	16 2f       	mov	r17, r22
     3f6:	f2 df       	rcall	.-28     	; 0x3dc <FifoDataLength>
     3f8:	28 81       	ld	r18, Y
     3fa:	39 81       	ldd	r19, Y+1	; 0x01
     3fc:	21 50       	subi	r18, 0x01	; 1
     3fe:	31 09       	sbc	r19, r1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	82 17       	cp	r24, r18
     404:	93 07       	cpc	r25, r19
     406:	69 f0       	breq	.+26     	; 0x422 <FifoWrite+0x36>
     408:	8c 81       	ldd	r24, Y+4	; 0x04
     40a:	9d 81       	ldd	r25, Y+5	; 0x05
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f9 1f       	adc	r31, r25
     412:	16 83       	std	Z+6, r17	; 0x06
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	28 23       	and	r18, r24
     418:	39 23       	and	r19, r25
     41a:	3d 83       	std	Y+5, r19	; 0x05
     41c:	2c 83       	std	Y+4, r18	; 0x04
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	01 c0       	rjmp	.+2      	; 0x424 <FifoWrite+0x38>
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	08 95       	ret

0000042c <FifoRead>:
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ec 01       	movw	r28, r24
     436:	8b 01       	movw	r16, r22
     438:	d1 df       	rcall	.-94     	; 0x3dc <FifoDataLength>
     43a:	88 23       	and	r24, r24
     43c:	a1 f0       	breq	.+40     	; 0x466 <FifoRead+0x3a>
     43e:	ea 81       	ldd	r30, Y+2	; 0x02
     440:	fb 81       	ldd	r31, Y+3	; 0x03
     442:	ec 0f       	add	r30, r28
     444:	fd 1f       	adc	r31, r29
     446:	86 81       	ldd	r24, Z+6	; 0x06
     448:	f8 01       	movw	r30, r16
     44a:	80 83       	st	Z, r24
     44c:	28 81       	ld	r18, Y
     44e:	39 81       	ldd	r19, Y+1	; 0x01
     450:	21 50       	subi	r18, 0x01	; 1
     452:	31 09       	sbc	r19, r1
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	9b 81       	ldd	r25, Y+3	; 0x03
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	82 23       	and	r24, r18
     45c:	93 23       	and	r25, r19
     45e:	9b 83       	std	Y+3, r25	; 0x03
     460:	8a 83       	std	Y+2, r24	; 0x02
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	01 c0       	rjmp	.+2      	; 0x468 <FifoRead+0x3c>
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	08 95       	ret

00000472 <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     472:	68 2f       	mov	r22, r24
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__floatunsisf>
     47e:	60 93 03 01 	sts	0x0103, r22
     482:	70 93 04 01 	sts	0x0104, r23
     486:	80 93 05 01 	sts	0x0105, r24
     48a:	90 93 06 01 	sts	0x0106, r25
     48e:	08 95       	ret

00000490 <navigation_left_algorithm>:
     490:	80 91 07 01 	lds	r24, 0x0107
     494:	08 95       	ret

00000496 <navigation_set_algorithm>:
     496:	80 93 07 01 	sts	0x0107, r24
     49a:	08 95       	ret

0000049c <navigation_autonomous_walk>:
     49c:	80 91 02 01 	lds	r24, 0x0102
     4a0:	08 95       	ret

000004a2 <navigation_set_autonomous_walk>:
     4a2:	80 93 02 01 	sts	0x0102, r24
     4a6:	08 95       	ret

000004a8 <navigation_stepping_delay>:
     4a8:	cf 93       	push	r28
     4aa:	c2 e0       	ldi	r28, 0x02	; 2
     4ac:	0e c0       	rjmp	.+28     	; 0x4ca <navigation_stepping_delay+0x22>
     4ae:	0e 94 28 0c 	call	0x1850	; 0x1850 <USART_DecodeRxFIFO>
     4b2:	2f ef       	ldi	r18, 0xFF	; 255
     4b4:	89 ef       	ldi	r24, 0xF9	; 249
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	80 40       	sbci	r24, 0x00	; 0
     4bc:	90 40       	sbci	r25, 0x00	; 0
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <navigation_stepping_delay+0x10>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <navigation_stepping_delay+0x1a>
     4c2:	00 00       	nop
     4c4:	82 b1       	in	r24, 0x02	; 2
     4c6:	8c 27       	eor	r24, r28
     4c8:	82 b9       	out	0x02, r24	; 2
     4ca:	0e 94 1e 0c 	call	0x183c	; 0x183c <USART_ready>
     4ce:	88 23       	and	r24, r24
     4d0:	71 f3       	breq	.-36     	; 0x4ae <navigation_stepping_delay+0x6>
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <navigation_fill_buffer>:
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	c0 e0       	ldi	r28, 0x00	; 0
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
     4e2:	00 91 ba 12 	lds	r16, 0x12BA
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	ce 01       	movw	r24, r28
     4ea:	63 d5       	rcall	.+2758   	; 0xfb2 <TWI_get_sensor>
     4ec:	fe 01       	movw	r30, r28
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	ec 1b       	sub	r30, r28
     4fc:	fd 0b       	sbc	r31, r29
     4fe:	0e 0f       	add	r16, r30
     500:	1f 1f       	adc	r17, r31
     502:	f8 01       	movw	r30, r16
     504:	e2 53       	subi	r30, 0x32	; 50
     506:	fd 4e       	sbci	r31, 0xED	; 237
     508:	80 83       	st	Z, r24
     50a:	21 96       	adiw	r28, 0x01	; 1
     50c:	c8 30       	cpi	r28, 0x08	; 8
     50e:	d1 05       	cpc	r29, r1
     510:	41 f7       	brne	.-48     	; 0x4e2 <navigation_fill_buffer+0xc>
     512:	80 91 ba 12 	lds	r24, 0x12BA
     516:	86 30       	cpi	r24, 0x06	; 6
     518:	19 f4       	brne	.+6      	; 0x520 <navigation_fill_buffer+0x4a>
     51a:	10 92 ba 12 	sts	0x12BA, r1
     51e:	03 c0       	rjmp	.+6      	; 0x526 <navigation_fill_buffer+0x50>
     520:	8f 5f       	subi	r24, 0xFF	; 255
     522:	80 93 ba 12 	sts	0x12BA, r24
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	08 95       	ret

00000530 <navigation_get_sensor>:
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	27 97       	sbiw	r28, 0x07	; 7
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	dc 01       	movw	r26, r24
     54a:	aa 0f       	add	r26, r26
     54c:	bb 1f       	adc	r27, r27
     54e:	aa 0f       	add	r26, r26
     550:	bb 1f       	adc	r27, r27
     552:	aa 0f       	add	r26, r26
     554:	bb 1f       	adc	r27, r27
     556:	a8 1b       	sub	r26, r24
     558:	b9 0b       	sbc	r27, r25
     55a:	a2 53       	subi	r26, 0x32	; 50
     55c:	bd 4e       	sbci	r27, 0xED	; 237
     55e:	fe 01       	movw	r30, r28
     560:	31 96       	adiw	r30, 0x01	; 1
     562:	af 01       	movw	r20, r30
     564:	ce 01       	movw	r24, r28
     566:	08 96       	adiw	r24, 0x08	; 8
     568:	2d 91       	ld	r18, X+
     56a:	21 93       	st	Z+, r18
     56c:	e8 17       	cp	r30, r24
     56e:	f9 07       	cpc	r31, r25
     570:	d9 f7       	brne	.-10     	; 0x568 <navigation_get_sensor+0x38>
     572:	26 e0       	ldi	r18, 0x06	; 6
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	04 2f       	mov	r16, r20
     578:	15 2f       	mov	r17, r21
     57a:	0e c0       	rjmp	.+28     	; 0x598 <navigation_get_sensor+0x68>
     57c:	61 91       	ld	r22, Z+
     57e:	70 81       	ld	r23, Z
     580:	76 17       	cp	r23, r22
     582:	20 f4       	brcc	.+8      	; 0x58c <navigation_get_sensor+0x5c>
     584:	df 01       	movw	r26, r30
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	7c 93       	st	X, r23
     58a:	60 83       	st	Z, r22
     58c:	8e 17       	cp	r24, r30
     58e:	9f 07       	cpc	r25, r31
     590:	a9 f7       	brne	.-22     	; 0x57c <navigation_get_sensor+0x4c>
     592:	21 50       	subi	r18, 0x01	; 1
     594:	31 09       	sbc	r19, r1
     596:	49 f0       	breq	.+18     	; 0x5aa <navigation_get_sensor+0x7a>
     598:	12 16       	cp	r1, r18
     59a:	13 06       	cpc	r1, r19
     59c:	d4 f7       	brge	.-12     	; 0x592 <navigation_get_sensor+0x62>
     59e:	c9 01       	movw	r24, r18
     5a0:	84 0f       	add	r24, r20
     5a2:	95 1f       	adc	r25, r21
     5a4:	e0 2f       	mov	r30, r16
     5a6:	f1 2f       	mov	r31, r17
     5a8:	e9 cf       	rjmp	.-46     	; 0x57c <navigation_get_sensor+0x4c>
     5aa:	8c 81       	ldd	r24, Y+4	; 0x04
     5ac:	27 96       	adiw	r28, 0x07	; 7
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 10))
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	b4 df       	rcall	.-152    	; 0x530 <navigation_get_sensor>
     5c8:	82 33       	cpi	r24, 0x32	; 50
     5ca:	28 f0       	brcs	.+10     	; 0x5d6 <navigation_check_right_turn+0x14>
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	af df       	rcall	.-162    	; 0x530 <navigation_get_sensor>
     5d2:	82 33       	cpi	r24, 0x32	; 50
     5d4:	40 f4       	brcc	.+16     	; 0x5e6 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	aa df       	rcall	.-172    	; 0x530 <navigation_get_sensor>
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	86 34       	cpi	r24, 0x46	; 70
     5e0:	18 f4       	brcc	.+6      	; 0x5e8 <navigation_check_right_turn+0x26>
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 10))
	{
		return 2;
     5e6:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     5e8:	89 2f       	mov	r24, r25
     5ea:	08 95       	ret

000005ec <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 10))
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	9f df       	rcall	.-194    	; 0x530 <navigation_get_sensor>
     5f2:	82 33       	cpi	r24, 0x32	; 50
     5f4:	28 f0       	brcs	.+10     	; 0x600 <navigation_check_left_turn+0x14>
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	9a df       	rcall	.-204    	; 0x530 <navigation_get_sensor>
     5fc:	82 33       	cpi	r24, 0x32	; 50
     5fe:	40 f4       	brcc	.+16     	; 0x610 <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	95 df       	rcall	.-214    	; 0x530 <navigation_get_sensor>
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	86 34       	cpi	r24, 0x46	; 70
     60a:	18 f4       	brcc	.+6      	; 0x612 <navigation_check_left_turn+0x26>
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	01 c0       	rjmp	.+2      	; 0x612 <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 10))
	{
		return 2;
     610:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     612:	89 2f       	mov	r24, r25
     614:	08 95       	ret

00000616 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	6b 01       	movw	r12, r22
     624:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     626:	80 91 07 01 	lds	r24, 0x0107
     62a:	88 23       	and	r24, r24
     62c:	09 f4       	brne	.+2      	; 0x630 <navigation_direction_regulation+0x1a>
     62e:	4c c0       	rjmp	.+152    	; 0x6c8 <navigation_direction_regulation+0xb2>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	7d df       	rcall	.-262    	; 0x530 <navigation_get_sensor>
     636:	c8 2f       	mov	r28, r24
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	79 df       	rcall	.-270    	; 0x530 <navigation_get_sensor>
     63e:	2c 2f       	mov	r18, r28
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	48 1b       	sub	r20, r24
     646:	51 09       	sbc	r21, r1
     648:	ca 01       	movw	r24, r20
     64a:	99 23       	and	r25, r25
     64c:	1c f4       	brge	.+6      	; 0x654 <navigation_direction_regulation+0x3e>
     64e:	91 95       	neg	r25
     650:	81 95       	neg	r24
     652:	91 09       	sbc	r25, r1
     654:	0a 97       	sbiw	r24, 0x0a	; 10
     656:	0c f0       	brlt	.+2      	; 0x65a <navigation_direction_regulation+0x44>
     658:	d5 c0       	rjmp	.+426    	; 0x804 <navigation_direction_regulation+0x1ee>
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	68 df       	rcall	.-304    	; 0x530 <navigation_get_sensor>
     660:	82 33       	cpi	r24, 0x32	; 50
     662:	08 f0       	brcs	.+2      	; 0x666 <navigation_direction_regulation+0x50>
     664:	cf c0       	rjmp	.+414    	; 0x804 <navigation_direction_regulation+0x1ee>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	62 df       	rcall	.-316    	; 0x530 <navigation_get_sensor>
     66c:	c8 2f       	mov	r28, r24
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	5e df       	rcall	.-324    	; 0x530 <navigation_get_sensor>
     674:	d8 2f       	mov	r29, r24
     676:	c7 01       	movw	r24, r14
     678:	b6 01       	movw	r22, r12
     67a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <cos>
     67e:	6b 01       	movw	r12, r22
     680:	7c 01       	movw	r14, r24
     682:	6d 2f       	mov	r22, r29
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	6c 0f       	add	r22, r28
     688:	71 1d       	adc	r23, r1
     68a:	88 27       	eor	r24, r24
     68c:	77 fd       	sbrc	r23, 7
     68e:	80 95       	com	r24
     690:	98 2f       	mov	r25, r24
     692:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__floatsisf>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	5f e3       	ldi	r21, 0x3F	; 63
     69e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 ef       	ldi	r20, 0xF0	; 240
     6a8:	50 e4       	ldi	r21, 0x40	; 64
     6aa:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__addsf3>
     6ae:	a7 01       	movw	r20, r14
     6b0:	96 01       	movw	r18, r12
     6b2:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e2       	ldi	r20, 0x20	; 32
     6bc:	52 e4       	ldi	r21, 0x42	; 66
     6be:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__subsf3>
     6c2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fixsfsi>
     6c6:	4d c0       	rjmp	.+154    	; 0x762 <navigation_direction_regulation+0x14c>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	31 df       	rcall	.-414    	; 0x530 <navigation_get_sensor>
     6ce:	c8 2f       	mov	r28, r24
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	2d df       	rcall	.-422    	; 0x530 <navigation_get_sensor>
     6d6:	2c 2f       	mov	r18, r28
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	a9 01       	movw	r20, r18
     6dc:	48 1b       	sub	r20, r24
     6de:	51 09       	sbc	r21, r1
     6e0:	ca 01       	movw	r24, r20
     6e2:	99 23       	and	r25, r25
     6e4:	1c f4       	brge	.+6      	; 0x6ec <navigation_direction_regulation+0xd6>
     6e6:	91 95       	neg	r25
     6e8:	81 95       	neg	r24
     6ea:	91 09       	sbc	r25, r1
     6ec:	0a 97       	sbiw	r24, 0x0a	; 10
     6ee:	0c f0       	brlt	.+2      	; 0x6f2 <navigation_direction_regulation+0xdc>
     6f0:	89 c0       	rjmp	.+274    	; 0x804 <navigation_direction_regulation+0x1ee>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	1c df       	rcall	.-456    	; 0x530 <navigation_get_sensor>
     6f8:	82 33       	cpi	r24, 0x32	; 50
     6fa:	08 f0       	brcs	.+2      	; 0x6fe <navigation_direction_regulation+0xe8>
     6fc:	83 c0       	rjmp	.+262    	; 0x804 <navigation_direction_regulation+0x1ee>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	16 df       	rcall	.-468    	; 0x530 <navigation_get_sensor>
     704:	c8 2f       	mov	r28, r24
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	12 df       	rcall	.-476    	; 0x530 <navigation_get_sensor>
     70c:	d8 2f       	mov	r29, r24
     70e:	c7 01       	movw	r24, r14
     710:	b6 01       	movw	r22, r12
     712:	0e 94 76 0d 	call	0x1aec	; 0x1aec <cos>
     716:	6b 01       	movw	r12, r22
     718:	7c 01       	movw	r14, r24
     71a:	6d 2f       	mov	r22, r29
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	6c 0f       	add	r22, r28
     720:	71 1d       	adc	r23, r1
     722:	88 27       	eor	r24, r24
     724:	77 fd       	sbrc	r23, 7
     726:	80 95       	com	r24
     728:	98 2f       	mov	r25, r24
     72a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__floatsisf>
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 ef       	ldi	r20, 0xF0	; 240
     740:	50 e4       	ldi	r21, 0x40	; 64
     742:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__addsf3>
     746:	a7 01       	movw	r20, r14
     748:	96 01       	movw	r18, r12
     74a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	80 e2       	ldi	r24, 0x20	; 32
     758:	92 e4       	ldi	r25, 0x42	; 66
     75a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__subsf3>
     75e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     762:	cb 01       	movw	r24, r22
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	03 97       	sbiw	r24, 0x03	; 3
     768:	08 f4       	brcc	.+2      	; 0x76c <navigation_direction_regulation+0x156>
     76a:	47 c0       	rjmp	.+142    	; 0x7fa <navigation_direction_regulation+0x1e4>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     76c:	88 27       	eor	r24, r24
     76e:	77 fd       	sbrc	r23, 7
     770:	80 95       	com	r24
     772:	98 2f       	mov	r25, r24
     774:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__floatsisf>
     778:	20 91 03 01 	lds	r18, 0x0103
     77c:	30 91 04 01 	lds	r19, 0x0104
     780:	40 91 05 01 	lds	r20, 0x0105
     784:	50 91 06 01 	lds	r21, 0x0106
     788:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     78c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <atan>
     790:	c6 2e       	mov	r12, r22
     792:	d7 2e       	mov	r13, r23
     794:	e8 2e       	mov	r14, r24
     796:	f9 2e       	mov	r15, r25
		if(dir < 0)
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	a9 01       	movw	r20, r18
     79e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__cmpsf2>
     7a2:	88 23       	and	r24, r24
     7a4:	7c f4       	brge	.+30     	; 0x7c4 <navigation_direction_regulation+0x1ae>
		{
			dir += 2*PI;
     7a6:	2b ed       	ldi	r18, 0xDB	; 219
     7a8:	3f e0       	ldi	r19, 0x0F	; 15
     7aa:	49 ec       	ldi	r20, 0xC9	; 201
     7ac:	50 e4       	ldi	r21, 0x40	; 64
     7ae:	6c 2d       	mov	r22, r12
     7b0:	7d 2d       	mov	r23, r13
     7b2:	8e 2d       	mov	r24, r14
     7b4:	9f 2d       	mov	r25, r15
     7b6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__addsf3>
     7ba:	c6 2e       	mov	r12, r22
     7bc:	d7 2e       	mov	r13, r23
     7be:	e8 2e       	mov	r14, r24
     7c0:	f9 2e       	mov	r15, r25
     7c2:	24 c0       	rjmp	.+72     	; 0x80c <navigation_direction_regulation+0x1f6>
		} else if(dir >= 2*PI)
     7c4:	2b ed       	ldi	r18, 0xDB	; 219
     7c6:	3f e0       	ldi	r19, 0x0F	; 15
     7c8:	49 ec       	ldi	r20, 0xC9	; 201
     7ca:	50 e4       	ldi	r21, 0x40	; 64
     7cc:	6c 2d       	mov	r22, r12
     7ce:	7d 2d       	mov	r23, r13
     7d0:	8e 2d       	mov	r24, r14
     7d2:	9f 2d       	mov	r25, r15
     7d4:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__gesf2>
     7d8:	88 23       	and	r24, r24
     7da:	c4 f0       	brlt	.+48     	; 0x80c <navigation_direction_regulation+0x1f6>
		{
			dir -= 2*PI;
     7dc:	2b ed       	ldi	r18, 0xDB	; 219
     7de:	3f e0       	ldi	r19, 0x0F	; 15
     7e0:	49 ec       	ldi	r20, 0xC9	; 201
     7e2:	50 e4       	ldi	r21, 0x40	; 64
     7e4:	6c 2d       	mov	r22, r12
     7e6:	7d 2d       	mov	r23, r13
     7e8:	8e 2d       	mov	r24, r14
     7ea:	9f 2d       	mov	r25, r15
     7ec:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__subsf3>
     7f0:	c6 2e       	mov	r12, r22
     7f2:	d7 2e       	mov	r13, r23
     7f4:	e8 2e       	mov	r14, r24
     7f6:	f9 2e       	mov	r15, r25
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <navigation_direction_regulation+0x1f6>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     7fa:	c1 2c       	mov	r12, r1
     7fc:	d1 2c       	mov	r13, r1
     7fe:	e1 2c       	mov	r14, r1
     800:	f1 2c       	mov	r15, r1
     802:	04 c0       	rjmp	.+8      	; 0x80c <navigation_direction_regulation+0x1f6>
     804:	c1 2c       	mov	r12, r1
     806:	d1 2c       	mov	r13, r1
     808:	e1 2c       	mov	r14, r1
     80a:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     80c:	6c 2d       	mov	r22, r12
     80e:	7d 2d       	mov	r23, r13
     810:	8e 2d       	mov	r24, r14
     812:	9f 2d       	mov	r25, r15
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	08 95       	ret

00000822 <navigation_angle_offset>:
		PORTA ^= (1<<PORTA1);
	}
}

float navigation_angle_offset()
{
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     82a:	80 91 07 01 	lds	r24, 0x0107
     82e:	88 23       	and	r24, r24
     830:	09 f4       	brne	.+2      	; 0x834 <navigation_angle_offset+0x12>
     832:	6c c0       	rjmp	.+216    	; 0x90c <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	7b de       	rcall	.-778    	; 0x530 <navigation_get_sensor>
     83a:	f8 2e       	mov	r15, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	77 de       	rcall	.-786    	; 0x530 <navigation_get_sensor>
     842:	2f 2d       	mov	r18, r15
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	a9 01       	movw	r20, r18
     848:	48 1b       	sub	r20, r24
     84a:	51 09       	sbc	r21, r1
     84c:	ca 01       	movw	r24, r20
     84e:	99 23       	and	r25, r25
     850:	1c f4       	brge	.+6      	; 0x858 <navigation_angle_offset+0x36>
     852:	91 95       	neg	r25
     854:	81 95       	neg	r24
     856:	91 09       	sbc	r25, r1
     858:	0a 97       	sbiw	r24, 0x0a	; 10
     85a:	0c f5       	brge	.+66     	; 0x89e <navigation_angle_offset+0x7c>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	67 de       	rcall	.-818    	; 0x530 <navigation_get_sensor>
     862:	82 33       	cpi	r24, 0x32	; 50
     864:	e0 f4       	brcc	.+56     	; 0x89e <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	62 de       	rcall	.-828    	; 0x530 <navigation_get_sensor>
     86c:	f8 2e       	mov	r15, r24
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	5e de       	rcall	.-836    	; 0x530 <navigation_get_sensor>
     874:	6f 2d       	mov	r22, r15
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	68 1b       	sub	r22, r24
     87a:	71 09       	sbc	r23, r1
     87c:	88 27       	eor	r24, r24
     87e:	77 fd       	sbrc	r23, 7
     880:	80 95       	com	r24
     882:	98 2f       	mov	r25, r24
     884:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__floatsisf>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	48 e6       	ldi	r20, 0x68	; 104
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__divsf3>
     894:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <atan>
     898:	6b 01       	movw	r12, r22
     89a:	7c 01       	movw	r14, r24
     89c:	a0 c0       	rjmp	.+320    	; 0x9de <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	46 de       	rcall	.-884    	; 0x530 <navigation_get_sensor>
     8a4:	f8 2e       	mov	r15, r24
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	42 de       	rcall	.-892    	; 0x530 <navigation_get_sensor>
     8ac:	2f 2d       	mov	r18, r15
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	a9 01       	movw	r20, r18
     8b2:	48 1b       	sub	r20, r24
     8b4:	51 09       	sbc	r21, r1
     8b6:	ca 01       	movw	r24, r20
     8b8:	99 23       	and	r25, r25
     8ba:	1c f4       	brge	.+6      	; 0x8c2 <navigation_angle_offset+0xa0>
     8bc:	91 95       	neg	r25
     8be:	81 95       	neg	r24
     8c0:	91 09       	sbc	r25, r1
     8c2:	0a 97       	sbiw	r24, 0x0a	; 10
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <navigation_angle_offset+0xa6>
     8c6:	9a c0       	rjmp	.+308    	; 0x9fc <navigation_angle_offset+0x1da>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	31 de       	rcall	.-926    	; 0x530 <navigation_get_sensor>
     8ce:	82 33       	cpi	r24, 0x32	; 50
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <navigation_angle_offset+0xb2>
     8d2:	94 c0       	rjmp	.+296    	; 0x9fc <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	2b de       	rcall	.-938    	; 0x530 <navigation_get_sensor>
     8da:	f8 2e       	mov	r15, r24
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	27 de       	rcall	.-946    	; 0x530 <navigation_get_sensor>
     8e2:	6f 2d       	mov	r22, r15
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	68 1b       	sub	r22, r24
     8e8:	71 09       	sbc	r23, r1
     8ea:	88 27       	eor	r24, r24
     8ec:	77 fd       	sbrc	r23, 7
     8ee:	80 95       	com	r24
     8f0:	98 2f       	mov	r25, r24
     8f2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__floatsisf>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	48 e6       	ldi	r20, 0x68	; 104
     8fc:	51 e4       	ldi	r21, 0x41	; 65
     8fe:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__divsf3>
     902:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <atan>
     906:	6b 01       	movw	r12, r22
     908:	7c 01       	movw	r14, r24
     90a:	69 c0       	rjmp	.+210    	; 0x9de <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0f de       	rcall	.-994    	; 0x530 <navigation_get_sensor>
     912:	f8 2e       	mov	r15, r24
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0b de       	rcall	.-1002   	; 0x530 <navigation_get_sensor>
     91a:	2f 2d       	mov	r18, r15
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	a9 01       	movw	r20, r18
     920:	48 1b       	sub	r20, r24
     922:	51 09       	sbc	r21, r1
     924:	ca 01       	movw	r24, r20
     926:	99 23       	and	r25, r25
     928:	1c f4       	brge	.+6      	; 0x930 <navigation_angle_offset+0x10e>
     92a:	91 95       	neg	r25
     92c:	81 95       	neg	r24
     92e:	91 09       	sbc	r25, r1
     930:	0a 97       	sbiw	r24, 0x0a	; 10
     932:	0c f5       	brge	.+66     	; 0x976 <navigation_angle_offset+0x154>
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fb dd       	rcall	.-1034   	; 0x530 <navigation_get_sensor>
     93a:	82 33       	cpi	r24, 0x32	; 50
     93c:	e0 f4       	brcc	.+56     	; 0x976 <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	f6 dd       	rcall	.-1044   	; 0x530 <navigation_get_sensor>
     944:	f8 2e       	mov	r15, r24
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	f2 dd       	rcall	.-1052   	; 0x530 <navigation_get_sensor>
     94c:	6f 2d       	mov	r22, r15
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	68 1b       	sub	r22, r24
     952:	71 09       	sbc	r23, r1
     954:	88 27       	eor	r24, r24
     956:	77 fd       	sbrc	r23, 7
     958:	80 95       	com	r24
     95a:	98 2f       	mov	r25, r24
     95c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__floatsisf>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	48 e6       	ldi	r20, 0x68	; 104
     966:	51 e4       	ldi	r21, 0x41	; 65
     968:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__divsf3>
     96c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <atan>
     970:	6b 01       	movw	r12, r22
     972:	7c 01       	movw	r14, r24
     974:	34 c0       	rjmp	.+104    	; 0x9de <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	da dd       	rcall	.-1100   	; 0x530 <navigation_get_sensor>
     97c:	f8 2e       	mov	r15, r24
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	d6 dd       	rcall	.-1108   	; 0x530 <navigation_get_sensor>
     984:	2f 2d       	mov	r18, r15
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	a9 01       	movw	r20, r18
     98a:	48 1b       	sub	r20, r24
     98c:	51 09       	sbc	r21, r1
     98e:	ca 01       	movw	r24, r20
     990:	99 23       	and	r25, r25
     992:	1c f4       	brge	.+6      	; 0x99a <navigation_angle_offset+0x178>
     994:	91 95       	neg	r25
     996:	81 95       	neg	r24
     998:	91 09       	sbc	r25, r1
     99a:	0a 97       	sbiw	r24, 0x0a	; 10
     99c:	7c f5       	brge	.+94     	; 0x9fc <navigation_angle_offset+0x1da>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	c6 dd       	rcall	.-1140   	; 0x530 <navigation_get_sensor>
     9a4:	82 33       	cpi	r24, 0x32	; 50
     9a6:	50 f5       	brcc	.+84     	; 0x9fc <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	c1 dd       	rcall	.-1150   	; 0x530 <navigation_get_sensor>
     9ae:	f8 2e       	mov	r15, r24
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	bd dd       	rcall	.-1158   	; 0x530 <navigation_get_sensor>
     9b6:	6f 2d       	mov	r22, r15
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	68 1b       	sub	r22, r24
     9bc:	71 09       	sbc	r23, r1
     9be:	88 27       	eor	r24, r24
     9c0:	77 fd       	sbrc	r23, 7
     9c2:	80 95       	com	r24
     9c4:	98 2f       	mov	r25, r24
     9c6:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__floatsisf>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	48 e6       	ldi	r20, 0x68	; 104
     9d0:	51 e4       	ldi	r21, 0x41	; 65
     9d2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__divsf3>
     9d6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <atan>
     9da:	6b 01       	movw	r12, r22
     9dc:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     9de:	c7 01       	movw	r24, r14
     9e0:	b6 01       	movw	r22, r12
     9e2:	9f 77       	andi	r25, 0x7F	; 127
     9e4:	29 e2       	ldi	r18, 0x29	; 41
     9e6:	3c e5       	ldi	r19, 0x5C	; 92
     9e8:	4f e8       	ldi	r20, 0x8F	; 143
     9ea:	5d e3       	ldi	r21, 0x3D	; 61
     9ec:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__gesf2>
     9f0:	18 16       	cp	r1, r24
     9f2:	3c f0       	brlt	.+14     	; 0xa02 <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     9f4:	c1 2c       	mov	r12, r1
     9f6:	d1 2c       	mov	r13, r1
     9f8:	76 01       	movw	r14, r12
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <navigation_angle_offset+0x1e0>
     9fc:	c1 2c       	mov	r12, r1
     9fe:	d1 2c       	mov	r13, r1
     a00:	76 01       	movw	r14, r12
     a02:	7c 2d       	mov	r23, r12
	}
}
     a04:	67 2f       	mov	r22, r23
     a06:	7d 2d       	mov	r23, r13
     a08:	8e 2d       	mov	r24, r14
     a0a:	9f 2d       	mov	r25, r15
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	0b b6       	in	r0, 0x3b	; 59
     a22:	0f 92       	push	r0
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	4f 93       	push	r20
     a2a:	5f 93       	push	r21
     a2c:	6f 93       	push	r22
     a2e:	7f 93       	push	r23
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	af 93       	push	r26
     a36:	bf 93       	push	r27
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	2b dd       	rcall	.-1450   	; 0x496 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	2f dd       	rcall	.-1442   	; 0x4a2 <navigation_set_autonomous_walk>
}
     a44:	ff 91       	pop	r31
     a46:	ef 91       	pop	r30
     a48:	bf 91       	pop	r27
     a4a:	af 91       	pop	r26
     a4c:	9f 91       	pop	r25
     a4e:	8f 91       	pop	r24
     a50:	7f 91       	pop	r23
     a52:	6f 91       	pop	r22
     a54:	5f 91       	pop	r21
     a56:	4f 91       	pop	r20
     a58:	3f 91       	pop	r19
     a5a:	2f 91       	pop	r18
     a5c:	0f 90       	pop	r0
     a5e:	0b be       	out	0x3b, r0	; 59
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	0f 92       	push	r0
     a72:	11 24       	eor	r1, r1
     a74:	0b b6       	in	r0, 0x3b	; 59
     a76:	0f 92       	push	r0
     a78:	2f 93       	push	r18
     a7a:	3f 93       	push	r19
     a7c:	4f 93       	push	r20
     a7e:	5f 93       	push	r21
     a80:	6f 93       	push	r22
     a82:	7f 93       	push	r23
     a84:	8f 93       	push	r24
     a86:	9f 93       	push	r25
     a88:	af 93       	push	r26
     a8a:	bf 93       	push	r27
     a8c:	ef 93       	push	r30
     a8e:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	01 dd       	rcall	.-1534   	; 0x496 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	05 dd       	rcall	.-1526   	; 0x4a2 <navigation_set_autonomous_walk>
     a98:	ff 91       	pop	r31
     a9a:	ef 91       	pop	r30
     a9c:	bf 91       	pop	r27
     a9e:	af 91       	pop	r26
     aa0:	9f 91       	pop	r25
     aa2:	8f 91       	pop	r24
     aa4:	7f 91       	pop	r23
     aa6:	6f 91       	pop	r22
     aa8:	5f 91       	pop	r21
     aaa:	4f 91       	pop	r20
     aac:	3f 91       	pop	r19
     aae:	2f 91       	pop	r18
     ab0:	0f 90       	pop	r0
     ab2:	0b be       	out	0x3b, r0	; 59
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <main>:
#include "Navigation.h"
#include "autonomouswalk.h"

int main(void)
{
	USART_init();
     abe:	98 d4       	rcall	.+2352   	; 0x13f0 <USART_init>
	sei();
     ac0:	78 94       	sei
	TWI_init(ST_ADDRESS);
     ac2:	80 e2       	ldi	r24, 0x20	; 32
     ac4:	3a d1       	rcall	.+628    	; 0xd3a <TWI_init>
	init_counters();
     ac6:	67 dc       	rcall	.-1842   	; 0x396 <init_counters>
	
	//LEDs
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
     ac8:	81 b1       	in	r24, 0x01	; 1
     aca:	83 60       	ori	r24, 0x03	; 3
     acc:	81 b9       	out	0x01, r24	; 1
	DDRC |= (1<<PORTC6 | 1<<PORTC7);
     ace:	87 b1       	in	r24, 0x07	; 7
     ad0:	80 6c       	ori	r24, 0xC0	; 192
     ad2:	87 b9       	out	0x07, r24	; 7
	
	//Buttons.
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //To emphasize.
     ad4:	81 b1       	in	r24, 0x01	; 1
     ad6:	8f 73       	andi	r24, 0x3F	; 63
     ad8:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     ada:	e8 e6       	ldi	r30, 0x68	; 104
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //Interrupt on porta6 and porta7
     ae4:	eb e6       	ldi	r30, 0x6B	; 107
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	80 6c       	ori	r24, 0xC0	; 192
     aec:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aee:	2f ef       	ldi	r18, 0xFF	; 255
     af0:	83 e2       	ldi	r24, 0x23	; 35
     af2:	94 ef       	ldi	r25, 0xF4	; 244
     af4:	21 50       	subi	r18, 0x01	; 1
     af6:	80 40       	sbci	r24, 0x00	; 0
     af8:	90 40       	sbci	r25, 0x00	; 0
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <main+0x36>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <main+0x40>
     afe:	00 00       	nop
	//end buttons.
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	cf dc       	rcall	.-1634   	; 0x4a2 <navigation_set_autonomous_walk>
		}
		else
		{
			if(TWI_command_flag())
			{
				PORTA ^= (1<<PORTA1);
     b04:	c2 e0       	ldi	r28, 0x02	; 2
		/*if(TWI_sensor_flag())
		{
			PORTA ^= (1<<PORTA1);
			navigation_fill_buffer();
		}*/
		if(TWI_autonom_settings_flag())
     b06:	76 d2       	rcall	.+1260   	; 0xff4 <TWI_autonom_settings_flag>
     b08:	88 23       	and	r24, r24
     b0a:	79 f0       	breq	.+30     	; 0xb2a <main+0x6c>
		{
			uint8_t sett = TWI_get_autonom_settings();
     b0c:	5c d2       	rcall	.+1208   	; 0xfc6 <TWI_get_autonom_settings>
			if(sett == 0)
     b0e:	81 11       	cpse	r24, r1
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <main+0x58>
			{
				navigation_set_autonomous_walk(0);
     b12:	c7 dc       	rcall	.-1650   	; 0x4a2 <navigation_set_autonomous_walk>
     b14:	0a c0       	rjmp	.+20     	; 0xb2a <main+0x6c>
			}
			else if(sett == 1)
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	21 f4       	brne	.+8      	; 0xb22 <main+0x64>
			{
				navigation_set_autonomous_walk(1);
     b1a:	c3 dc       	rcall	.-1658   	; 0x4a2 <navigation_set_autonomous_walk>
				navigation_set_algorithm(1);
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	bb dc       	rcall	.-1674   	; 0x496 <navigation_set_algorithm>
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <main+0x6c>
			}
			else //sett == 2
			{
				navigation_set_autonomous_walk(1);
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	be dc       	rcall	.-1668   	; 0x4a2 <navigation_set_autonomous_walk>
				navigation_set_algorithm(0);
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	b6 dc       	rcall	.-1684   	; 0x496 <navigation_set_algorithm>
			}
		}
		
		if(navigation_autonomous_walk() == 1)
     b2a:	b8 dc       	rcall	.-1680   	; 0x49c <navigation_autonomous_walk>
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	49 f4       	brne	.+18     	; 0xb42 <main+0x84>
		{
			if(TWI_control_settings_flag())
     b30:	57 d2       	rcall	.+1198   	; 0xfe0 <TWI_control_settings_flag>
     b32:	88 23       	and	r24, r24
     b34:	21 f0       	breq	.+8      	; 0xb3e <main+0x80>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	40 d2       	rcall	.+1152   	; 0xfbc <TWI_get_control_setting>
     b3c:	9a dc       	rcall	.-1740   	; 0x472 <navigation_set_Kp>
			}
			autonomouswalk_walk();
     b3e:	c6 db       	rcall	.-2164   	; 0x2cc <autonomouswalk_walk>
     b40:	07 c0       	rjmp	.+14     	; 0xb50 <main+0x92>
		}
		else
		{
			if(TWI_command_flag())
     b42:	44 d2       	rcall	.+1160   	; 0xfcc <TWI_command_flag>
     b44:	88 23       	and	r24, r24
     b46:	21 f0       	breq	.+8      	; 0xb50 <main+0x92>
			{
				PORTA ^= (1<<PORTA1);
     b48:	82 b1       	in	r24, 0x02	; 2
     b4a:	8c 27       	eor	r24, r28
     b4c:	82 b9       	out	0x02, r24	; 2
				USART_SendCommand();
     b4e:	22 d5       	rcall	.+2628   	; 0x1594 <USART_SendCommand>
			}
		}
		USART_DecodeRxFIFO();
     b50:	7f d6       	rcall	.+3326   	; 0x1850 <USART_DecodeRxFIFO>
    }
     b52:	d9 cf       	rjmp	.-78     	; 0xb06 <main+0x48>

00000b54 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
	TCNT1 = 0;
     b5e:	10 92 85 00 	sts	0x0085, r1
     b62:	10 92 84 00 	sts	0x0084, r1
}
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     b70:	1f 92       	push	r1
     b72:	0f 92       	push	r0
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
	//TWI_send_float(C_ADDRESS, (float)navigation_get_sensor(0));
	TCNT3 = 0;
     b7a:	10 92 95 00 	sts	0x0095, r1
     b7e:	10 92 94 00 	sts	0x0094, r1
}
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <__vector_4>:

//-------------------PinChange interrupt for buttons---------------------------

ISR(PCINT0_vect)
{
     b8c:	1f 92       	push	r1
     b8e:	0f 92       	push	r0
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	0f 92       	push	r0
     b94:	11 24       	eor	r1, r1
     b96:	0b b6       	in	r0, 0x3b	; 59
     b98:	0f 92       	push	r0
     b9a:	2f 93       	push	r18
     b9c:	3f 93       	push	r19
     b9e:	4f 93       	push	r20
     ba0:	5f 93       	push	r21
     ba2:	6f 93       	push	r22
     ba4:	7f 93       	push	r23
     ba6:	8f 93       	push	r24
     ba8:	9f 93       	push	r25
     baa:	af 93       	push	r26
     bac:	bf 93       	push	r27
     bae:	ef 93       	push	r30
     bb0:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     bb2:	06 9b       	sbis	0x00, 6	; 0
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	74 dc       	rcall	.-1816   	; 0x4a2 <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	6c dc       	rcall	.-1832   	; 0x496 <navigation_set_algorithm>
		//test
		PORTC ^= (1<<PORTC6);
     bbe:	98 b1       	in	r25, 0x08	; 8
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	89 27       	eor	r24, r25
     bc4:	88 b9       	out	0x08, r24	; 8
     bc6:	0a c0       	rjmp	.+20     	; 0xbdc <__vector_4+0x50>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     bc8:	07 9b       	sbis	0x00, 7	; 0
     bca:	08 c0       	rjmp	.+16     	; 0xbdc <__vector_4+0x50>
	{
		navigation_set_autonomous_walk(1);
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	69 dc       	rcall	.-1838   	; 0x4a2 <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	61 dc       	rcall	.-1854   	; 0x496 <navigation_set_algorithm>
		//test
		PORTA ^= (1<<PORTA0);
     bd4:	92 b1       	in	r25, 0x02	; 2
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	89 27       	eor	r24, r25
     bda:	82 b9       	out	0x02, r24	; 2
	}
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	0f 90       	pop	r0
     bf6:	0b be       	out	0x3b, r0	; 59
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <set_twi_reciever_enable>:
     c02:	85 e4       	ldi	r24, 0x45	; 69
     c04:	80 93 bc 00 	sts	0x00BC, r24
     c08:	08 95       	ret

00000c0a <clear_int>:
     c0a:	81 ec       	ldi	r24, 0xC1	; 193
     c0c:	80 93 bc 00 	sts	0x00BC, r24
     c10:	08 95       	ret

00000c12 <start_bus>:
     c12:	84 ea       	ldi	r24, 0xA4	; 164
     c14:	80 93 bc 00 	sts	0x00BC, r24
     c18:	08 95       	ret

00000c1a <stop_bus>:
     c1a:	85 ed       	ldi	r24, 0xD5	; 213
     c1c:	80 93 bc 00 	sts	0x00BC, r24
     c20:	08 95       	ret

00000c22 <Error>:
     c22:	80 91 b9 00 	lds	r24, 0x00B9
     c26:	88 7f       	andi	r24, 0xF8	; 248
     c28:	88 33       	cpi	r24, 0x38	; 56
     c2a:	09 f0       	breq	.+2      	; 0xc2e <Error+0xc>
     c2c:	f6 cf       	rjmp	.-20     	; 0xc1a <stop_bus>
     c2e:	ed cf       	rjmp	.-38     	; 0xc0a <clear_int>

00000c30 <get_data>:
     c30:	80 91 bb 00 	lds	r24, 0x00BB
     c34:	08 95       	ret

00000c36 <wait_for_bus>:
     c36:	ec eb       	ldi	r30, 0xBC	; 188
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	88 23       	and	r24, r24
     c3e:	ec f7       	brge	.-6      	; 0xc3a <wait_for_bus+0x4>
     c40:	08 95       	ret

00000c42 <send_data_and_wait>:
     c42:	80 93 bb 00 	sts	0x00BB, r24
     c46:	84 e8       	ldi	r24, 0x84	; 132
     c48:	80 93 bc 00 	sts	0x00BC, r24
     c4c:	f4 cf       	rjmp	.-24     	; 0xc36 <wait_for_bus>

00000c4e <stop_twi>:
     c4e:	10 92 19 14 	sts	0x1419, r1
     c52:	10 92 18 14 	sts	0x1418, r1
     c56:	10 92 23 14 	sts	0x1423, r1
     c5a:	10 92 22 14 	sts	0x1422, r1
     c5e:	10 92 0e 14 	sts	0x140E, r1
     c62:	10 92 0d 14 	sts	0x140D, r1
     c66:	10 92 13 14 	sts	0x1413, r1
     c6a:	10 92 12 14 	sts	0x1412, r1
     c6e:	10 92 16 14 	sts	0x1416, r1
     c72:	10 92 15 14 	sts	0x1415, r1
     c76:	08 95       	ret

00000c78 <reset_TWI>:
     c78:	ec eb       	ldi	r30, 0xBC	; 188
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	80 6c       	ori	r24, 0xC0	; 192
     c80:	80 83       	st	Z, r24
     c82:	08 95       	ret

00000c84 <get_control_settings_from_bus>:
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	c0 91 12 14 	lds	r28, 0x1412
     c8c:	d0 91 13 14 	lds	r29, 0x1413
     c90:	cf df       	rcall	.-98     	; 0xc30 <get_data>
     c92:	c1 5f       	subi	r28, 0xF1	; 241
     c94:	db 4e       	sbci	r29, 0xEB	; 235
     c96:	88 83       	st	Y, r24
     c98:	10 92 13 14 	sts	0x1413, r1
     c9c:	10 92 12 14 	sts	0x1412, r1
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <get_autonom_settings_from_bus>:
     ca6:	c4 df       	rcall	.-120    	; 0xc30 <get_data>
     ca8:	80 93 0d 13 	sts	0x130D, r24
     cac:	08 95       	ret

00000cae <get_char_from_bus>:
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	c0 91 0d 14 	lds	r28, 0x140D
     cb6:	d0 91 0e 14 	lds	r29, 0x140E
     cba:	ba df       	rcall	.-140    	; 0xc30 <get_data>
     cbc:	c2 5f       	subi	r28, 0xF2	; 242
     cbe:	dc 4e       	sbci	r29, 0xEC	; 236
     cc0:	88 83       	st	Y, r24
     cc2:	80 91 0d 14 	lds	r24, 0x140D
     cc6:	90 91 0e 14 	lds	r25, 0x140E
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	90 93 0e 14 	sts	0x140E, r25
     cd0:	80 93 0d 14 	sts	0x140D, r24
     cd4:	90 93 1e 14 	sts	0x141E, r25
     cd8:	80 93 1d 14 	sts	0x141D, r24
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <get_sensor_from_bus>:
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	c0 91 22 14 	lds	r28, 0x1422
     cea:	d0 91 23 14 	lds	r29, 0x1423
     cee:	c8 30       	cpi	r28, 0x08	; 8
     cf0:	d1 05       	cpc	r29, r1
     cf2:	99 f4       	brne	.+38     	; 0xd1a <get_sensor_from_bus+0x38>
     cf4:	e4 e2       	ldi	r30, 0x24	; 36
     cf6:	f4 e1       	ldi	r31, 0x14	; 20
     cf8:	ac e2       	ldi	r26, 0x2C	; 44
     cfa:	b4 e1       	ldi	r27, 0x14	; 20
     cfc:	8c e2       	ldi	r24, 0x2C	; 44
     cfe:	94 e1       	ldi	r25, 0x14	; 20
     d00:	21 91       	ld	r18, Z+
     d02:	2d 93       	st	X+, r18
     d04:	e8 17       	cp	r30, r24
     d06:	f9 07       	cpc	r31, r25
     d08:	d9 f7       	brne	.-10     	; 0xd00 <get_sensor_from_bus+0x1e>
     d0a:	92 df       	rcall	.-220    	; 0xc30 <get_data>
     d0c:	80 93 1c 14 	sts	0x141C, r24
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 c0 12 	sts	0x12C0, r24
     d16:	df db       	rcall	.-2114   	; 0x4d6 <navigation_fill_buffer>
     d18:	0d c0       	rjmp	.+26     	; 0xd34 <get_sensor_from_bus+0x52>
     d1a:	8a df       	rcall	.-236    	; 0xc30 <get_data>
     d1c:	cc 5d       	subi	r28, 0xDC	; 220
     d1e:	db 4e       	sbci	r29, 0xEB	; 235
     d20:	88 83       	st	Y, r24
     d22:	80 91 22 14 	lds	r24, 0x1422
     d26:	90 91 23 14 	lds	r25, 0x1423
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	90 93 23 14 	sts	0x1423, r25
     d30:	80 93 22 14 	sts	0x1422, r24
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	08 95       	ret

00000d3a <TWI_init>:
     d3a:	80 93 14 14 	sts	0x1414, r24
     d3e:	80 34       	cpi	r24, 0x40	; 64
     d40:	79 f0       	breq	.+30     	; 0xd60 <TWI_init+0x26>
     d42:	80 38       	cpi	r24, 0x80	; 128
     d44:	19 f0       	breq	.+6      	; 0xd4c <TWI_init+0x12>
     d46:	80 32       	cpi	r24, 0x20	; 32
     d48:	d1 f4       	brne	.+52     	; 0xd7e <TWI_init+0x44>
     d4a:	12 c0       	rjmp	.+36     	; 0xd70 <TWI_init+0x36>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	88 b9       	out	0x08, r24	; 8
     d50:	58 df       	rcall	.-336    	; 0xc02 <set_twi_reciever_enable>
     d52:	8f e3       	ldi	r24, 0x3F	; 63
     d54:	80 93 b8 00 	sts	0x00B8, r24
     d58:	81 e8       	ldi	r24, 0x81	; 129
     d5a:	80 93 ba 00 	sts	0x00BA, r24
     d5e:	08 95       	ret
     d60:	8f e3       	ldi	r24, 0x3F	; 63
     d62:	80 93 b8 00 	sts	0x00B8, r24
     d66:	4d df       	rcall	.-358    	; 0xc02 <set_twi_reciever_enable>
     d68:	80 e4       	ldi	r24, 0x40	; 64
     d6a:	80 93 ba 00 	sts	0x00BA, r24
     d6e:	08 95       	ret
     d70:	8f e3       	ldi	r24, 0x3F	; 63
     d72:	80 93 b8 00 	sts	0x00B8, r24
     d76:	45 df       	rcall	.-374    	; 0xc02 <set_twi_reciever_enable>
     d78:	81 e2       	ldi	r24, 0x21	; 33
     d7a:	80 93 ba 00 	sts	0x00BA, r24
     d7e:	08 95       	ret

00000d80 <TWI_send_command>:
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	c8 2f       	mov	r28, r24
     d88:	d6 2f       	mov	r29, r22
     d8a:	14 2f       	mov	r17, r20
     d8c:	42 df       	rcall	.-380    	; 0xc12 <start_bus>
     d8e:	53 df       	rcall	.-346    	; 0xc36 <wait_for_bus>
     d90:	90 91 b9 00 	lds	r25, 0x00B9
     d94:	98 7f       	andi	r25, 0xF8	; 248
     d96:	98 30       	cpi	r25, 0x08	; 8
     d98:	19 f0       	breq	.+6      	; 0xda0 <TWI_send_command+0x20>
     d9a:	43 df       	rcall	.-378    	; 0xc22 <Error>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	34 c0       	rjmp	.+104    	; 0xe08 <TWI_send_command+0x88>
     da0:	80 e2       	ldi	r24, 0x20	; 32
     da2:	4f df       	rcall	.-354    	; 0xc42 <send_data_and_wait>
     da4:	80 91 b9 00 	lds	r24, 0x00B9
     da8:	88 7f       	andi	r24, 0xF8	; 248
     daa:	88 31       	cpi	r24, 0x18	; 24
     dac:	19 f0       	breq	.+6      	; 0xdb4 <TWI_send_command+0x34>
     dae:	39 df       	rcall	.-398    	; 0xc22 <Error>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	2a c0       	rjmp	.+84     	; 0xe08 <TWI_send_command+0x88>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	45 df       	rcall	.-374    	; 0xc42 <send_data_and_wait>
     db8:	80 91 b9 00 	lds	r24, 0x00B9
     dbc:	88 7f       	andi	r24, 0xF8	; 248
     dbe:	88 32       	cpi	r24, 0x28	; 40
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <TWI_send_command+0x48>
     dc2:	2f df       	rcall	.-418    	; 0xc22 <Error>
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	20 c0       	rjmp	.+64     	; 0xe08 <TWI_send_command+0x88>
     dc8:	8c 2f       	mov	r24, r28
     dca:	3b df       	rcall	.-394    	; 0xc42 <send_data_and_wait>
     dcc:	80 91 b9 00 	lds	r24, 0x00B9
     dd0:	88 7f       	andi	r24, 0xF8	; 248
     dd2:	88 32       	cpi	r24, 0x28	; 40
     dd4:	19 f0       	breq	.+6      	; 0xddc <TWI_send_command+0x5c>
     dd6:	25 df       	rcall	.-438    	; 0xc22 <Error>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	16 c0       	rjmp	.+44     	; 0xe08 <TWI_send_command+0x88>
     ddc:	8d 2f       	mov	r24, r29
     dde:	31 df       	rcall	.-414    	; 0xc42 <send_data_and_wait>
     de0:	80 91 b9 00 	lds	r24, 0x00B9
     de4:	88 7f       	andi	r24, 0xF8	; 248
     de6:	88 32       	cpi	r24, 0x28	; 40
     de8:	19 f0       	breq	.+6      	; 0xdf0 <TWI_send_command+0x70>
     dea:	1b df       	rcall	.-458    	; 0xc22 <Error>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0c c0       	rjmp	.+24     	; 0xe08 <TWI_send_command+0x88>
     df0:	81 2f       	mov	r24, r17
     df2:	27 df       	rcall	.-434    	; 0xc42 <send_data_and_wait>
     df4:	80 91 b9 00 	lds	r24, 0x00B9
     df8:	88 7f       	andi	r24, 0xF8	; 248
     dfa:	88 32       	cpi	r24, 0x28	; 40
     dfc:	19 f0       	breq	.+6      	; 0xe04 <TWI_send_command+0x84>
     dfe:	11 df       	rcall	.-478    	; 0xc22 <Error>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <TWI_send_command+0x88>
     e04:	0a df       	rcall	.-492    	; 0xc1a <stop_bus>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	08 95       	ret

00000e10 <TWI_send_string>:
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	c8 2f       	mov	r28, r24
     e1e:	e6 2e       	mov	r14, r22
     e20:	f7 2e       	mov	r15, r23
     e22:	f7 de       	rcall	.-530    	; 0xc12 <start_bus>
     e24:	08 df       	rcall	.-496    	; 0xc36 <wait_for_bus>
     e26:	90 91 b9 00 	lds	r25, 0x00B9
     e2a:	98 7f       	andi	r25, 0xF8	; 248
     e2c:	98 30       	cpi	r25, 0x08	; 8
     e2e:	19 f0       	breq	.+6      	; 0xe36 <TWI_send_string+0x26>
     e30:	f8 de       	rcall	.-528    	; 0xc22 <Error>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	2c c0       	rjmp	.+88     	; 0xe8e <TWI_send_string+0x7e>
     e36:	8c 2f       	mov	r24, r28
     e38:	04 df       	rcall	.-504    	; 0xc42 <send_data_and_wait>
     e3a:	80 91 b9 00 	lds	r24, 0x00B9
     e3e:	88 7f       	andi	r24, 0xF8	; 248
     e40:	88 31       	cpi	r24, 0x18	; 24
     e42:	19 f0       	breq	.+6      	; 0xe4a <TWI_send_string+0x3a>
     e44:	ee de       	rcall	.-548    	; 0xc22 <Error>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	22 c0       	rjmp	.+68     	; 0xe8e <TWI_send_string+0x7e>
     e4a:	89 e1       	ldi	r24, 0x19	; 25
     e4c:	fa de       	rcall	.-524    	; 0xc42 <send_data_and_wait>
     e4e:	80 91 b9 00 	lds	r24, 0x00B9
     e52:	88 7f       	andi	r24, 0xF8	; 248
     e54:	88 32       	cpi	r24, 0x28	; 40
     e56:	29 f4       	brne	.+10     	; 0xe62 <TWI_send_string+0x52>
     e58:	0e 2d       	mov	r16, r14
     e5a:	1f 2d       	mov	r17, r15
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
     e60:	08 c0       	rjmp	.+16     	; 0xe72 <TWI_send_string+0x62>
     e62:	df de       	rcall	.-578    	; 0xc22 <Error>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	13 c0       	rjmp	.+38     	; 0xe8e <TWI_send_string+0x7e>
     e68:	f8 01       	movw	r30, r16
     e6a:	81 91       	ld	r24, Z+
     e6c:	8f 01       	movw	r16, r30
     e6e:	e9 de       	rcall	.-558    	; 0xc42 <send_data_and_wait>
     e70:	21 96       	adiw	r28, 0x01	; 1
     e72:	ee 2d       	mov	r30, r14
     e74:	ff 2d       	mov	r31, r15
     e76:	df 01       	movw	r26, r30
     e78:	0d 90       	ld	r0, X+
     e7a:	00 20       	and	r0, r0
     e7c:	e9 f7       	brne	.-6      	; 0xe78 <TWI_send_string+0x68>
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	ae 1b       	sub	r26, r30
     e82:	bf 0b       	sbc	r27, r31
     e84:	ca 17       	cp	r28, r26
     e86:	db 07       	cpc	r29, r27
     e88:	78 f3       	brcs	.-34     	; 0xe68 <TWI_send_string+0x58>
     e8a:	c7 de       	rcall	.-626    	; 0xc1a <stop_bus>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	08 95       	ret

00000e9c <TWI_send_string_fixed_length>:
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	c8 2f       	mov	r28, r24
     eaa:	e6 2e       	mov	r14, r22
     eac:	f7 2e       	mov	r15, r23
     eae:	8a 01       	movw	r16, r20
     eb0:	b0 de       	rcall	.-672    	; 0xc12 <start_bus>
     eb2:	c1 de       	rcall	.-638    	; 0xc36 <wait_for_bus>
     eb4:	90 91 b9 00 	lds	r25, 0x00B9
     eb8:	98 7f       	andi	r25, 0xF8	; 248
     eba:	98 30       	cpi	r25, 0x08	; 8
     ebc:	19 f0       	breq	.+6      	; 0xec4 <TWI_send_string_fixed_length+0x28>
     ebe:	b1 de       	rcall	.-670    	; 0xc22 <Error>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	23 c0       	rjmp	.+70     	; 0xf0a <TWI_send_string_fixed_length+0x6e>
     ec4:	8c 2f       	mov	r24, r28
     ec6:	bd de       	rcall	.-646    	; 0xc42 <send_data_and_wait>
     ec8:	80 91 b9 00 	lds	r24, 0x00B9
     ecc:	88 7f       	andi	r24, 0xF8	; 248
     ece:	88 31       	cpi	r24, 0x18	; 24
     ed0:	19 f0       	breq	.+6      	; 0xed8 <TWI_send_string_fixed_length+0x3c>
     ed2:	a7 de       	rcall	.-690    	; 0xc22 <Error>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	19 c0       	rjmp	.+50     	; 0xf0a <TWI_send_string_fixed_length+0x6e>
     ed8:	89 e1       	ldi	r24, 0x19	; 25
     eda:	b3 de       	rcall	.-666    	; 0xc42 <send_data_and_wait>
     edc:	80 91 b9 00 	lds	r24, 0x00B9
     ee0:	88 7f       	andi	r24, 0xF8	; 248
     ee2:	88 32       	cpi	r24, 0x28	; 40
     ee4:	21 f4       	brne	.+8      	; 0xeee <TWI_send_string_fixed_length+0x52>
     ee6:	10 16       	cp	r1, r16
     ee8:	11 06       	cpc	r1, r17
     eea:	24 f0       	brlt	.+8      	; 0xef4 <TWI_send_string_fixed_length+0x58>
     eec:	0c c0       	rjmp	.+24     	; 0xf06 <TWI_send_string_fixed_length+0x6a>
     eee:	99 de       	rcall	.-718    	; 0xc22 <Error>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	0b c0       	rjmp	.+22     	; 0xf0a <TWI_send_string_fixed_length+0x6e>
     ef4:	ce 2d       	mov	r28, r14
     ef6:	df 2d       	mov	r29, r15
     ef8:	0c 0f       	add	r16, r28
     efa:	1d 1f       	adc	r17, r29
     efc:	89 91       	ld	r24, Y+
     efe:	a1 de       	rcall	.-702    	; 0xc42 <send_data_and_wait>
     f00:	c0 17       	cp	r28, r16
     f02:	d1 07       	cpc	r29, r17
     f04:	d9 f7       	brne	.-10     	; 0xefc <TWI_send_string_fixed_length+0x60>
     f06:	89 de       	rcall	.-750    	; 0xc1a <stop_bus>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	08 95       	ret

00000f18 <TWI_send_float>:
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	00 d0       	rcall	.+0      	; 0xf26 <TWI_send_float+0xe>
     f26:	00 d0       	rcall	.+0      	; 0xf28 <TWI_send_float+0x10>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	18 2f       	mov	r17, r24
     f2e:	49 83       	std	Y+1, r20	; 0x01
     f30:	5a 83       	std	Y+2, r21	; 0x02
     f32:	6b 83       	std	Y+3, r22	; 0x03
     f34:	7c 83       	std	Y+4, r23	; 0x04
     f36:	6d de       	rcall	.-806    	; 0xc12 <start_bus>
     f38:	7e de       	rcall	.-772    	; 0xc36 <wait_for_bus>
     f3a:	90 91 b9 00 	lds	r25, 0x00B9
     f3e:	98 7f       	andi	r25, 0xF8	; 248
     f40:	98 30       	cpi	r25, 0x08	; 8
     f42:	19 f0       	breq	.+6      	; 0xf4a <TWI_send_float+0x32>
     f44:	6e de       	rcall	.-804    	; 0xc22 <Error>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	24 c0       	rjmp	.+72     	; 0xf92 <TWI_send_float+0x7a>
     f4a:	81 2f       	mov	r24, r17
     f4c:	7a de       	rcall	.-780    	; 0xc42 <send_data_and_wait>
     f4e:	80 91 b9 00 	lds	r24, 0x00B9
     f52:	88 7f       	andi	r24, 0xF8	; 248
     f54:	88 31       	cpi	r24, 0x18	; 24
     f56:	19 f0       	breq	.+6      	; 0xf5e <TWI_send_float+0x46>
     f58:	64 de       	rcall	.-824    	; 0xc22 <Error>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	1a c0       	rjmp	.+52     	; 0xf92 <TWI_send_float+0x7a>
     f5e:	86 e0       	ldi	r24, 0x06	; 6
     f60:	70 de       	rcall	.-800    	; 0xc42 <send_data_and_wait>
     f62:	80 91 b9 00 	lds	r24, 0x00B9
     f66:	88 7f       	andi	r24, 0xF8	; 248
     f68:	88 32       	cpi	r24, 0x28	; 40
     f6a:	19 f0       	breq	.+6      	; 0xf72 <TWI_send_float+0x5a>
     f6c:	5a de       	rcall	.-844    	; 0xc22 <Error>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	10 c0       	rjmp	.+32     	; 0xf92 <TWI_send_float+0x7a>
     f72:	8e 01       	movw	r16, r28
     f74:	0f 5f       	subi	r16, 0xFF	; 255
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
     f78:	7e 01       	movw	r14, r28
     f7a:	85 e0       	ldi	r24, 0x05	; 5
     f7c:	e8 0e       	add	r14, r24
     f7e:	f1 1c       	adc	r15, r1
     f80:	f8 01       	movw	r30, r16
     f82:	81 91       	ld	r24, Z+
     f84:	8f 01       	movw	r16, r30
     f86:	5d de       	rcall	.-838    	; 0xc42 <send_data_and_wait>
     f88:	0e 15       	cp	r16, r14
     f8a:	1f 05       	cpc	r17, r15
     f8c:	c9 f7       	brne	.-14     	; 0xf80 <TWI_send_float+0x68>
     f8e:	45 de       	rcall	.-886    	; 0xc1a <stop_bus>
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	08 95       	ret

00000fa8 <TWI_get_command>:
     fa8:	86 5f       	subi	r24, 0xF6	; 246
     faa:	9c 4e       	sbci	r25, 0xEC	; 236
     fac:	fc 01       	movw	r30, r24
     fae:	80 81       	ld	r24, Z
     fb0:	08 95       	ret

00000fb2 <TWI_get_sensor>:
     fb2:	84 5d       	subi	r24, 0xD4	; 212
     fb4:	9b 4e       	sbci	r25, 0xEB	; 235
     fb6:	fc 01       	movw	r30, r24
     fb8:	80 81       	ld	r24, Z
     fba:	08 95       	ret

00000fbc <TWI_get_control_setting>:
     fbc:	81 5f       	subi	r24, 0xF1	; 241
     fbe:	9b 4e       	sbci	r25, 0xEB	; 235
     fc0:	fc 01       	movw	r30, r24
     fc2:	80 81       	ld	r24, Z
     fc4:	08 95       	ret

00000fc6 <TWI_get_autonom_settings>:
     fc6:	80 91 0d 13 	lds	r24, 0x130D
     fca:	08 95       	ret

00000fcc <TWI_command_flag>:
     fcc:	80 91 bf 12 	lds	r24, 0x12BF
     fd0:	88 23       	and	r24, r24
     fd2:	21 f0       	breq	.+8      	; 0xfdc <TWI_command_flag+0x10>
     fd4:	10 92 bf 12 	sts	0x12BF, r1
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	08 95       	ret
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	08 95       	ret

00000fe0 <TWI_control_settings_flag>:
     fe0:	80 91 be 12 	lds	r24, 0x12BE
     fe4:	88 23       	and	r24, r24
     fe6:	21 f0       	breq	.+8      	; 0xff0 <TWI_control_settings_flag+0x10>
     fe8:	10 92 be 12 	sts	0x12BE, r1
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	08 95       	ret
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	08 95       	ret

00000ff4 <TWI_autonom_settings_flag>:
     ff4:	80 91 bd 12 	lds	r24, 0x12BD
     ff8:	88 23       	and	r24, r24
     ffa:	21 f0       	breq	.+8      	; 0x1004 <TWI_autonom_settings_flag+0x10>
     ffc:	10 92 bd 12 	sts	0x12BD, r1
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	08 95       	ret
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	08 95       	ret

00001008 <write_to_TwiFIFO>:
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	e8 2e       	mov	r14, r24
    1016:	f9 2e       	mov	r15, r25
    1018:	e8 2f       	mov	r30, r24
    101a:	f9 2f       	mov	r31, r25
    101c:	df 01       	movw	r26, r30
    101e:	0d 90       	ld	r0, X+
    1020:	00 20       	and	r0, r0
    1022:	e9 f7       	brne	.-6      	; 0x101e <write_to_TwiFIFO+0x16>
    1024:	11 97       	sbiw	r26, 0x01	; 1
    1026:	bd 01       	movw	r22, r26
    1028:	6e 1b       	sub	r22, r30
    102a:	7f 0b       	sbc	r23, r31
    102c:	80 91 08 01 	lds	r24, 0x0108
    1030:	90 91 09 01 	lds	r25, 0x0109
    1034:	db d9       	rcall	.-3146   	; 0x3ec <FifoWrite>
    1036:	81 11       	cpse	r24, r1
    1038:	1e c0       	rjmp	.+60     	; 0x1076 <write_to_TwiFIFO+0x6e>
    103a:	0e 2d       	mov	r16, r14
    103c:	1f 2d       	mov	r17, r15
    103e:	c0 e0       	ldi	r28, 0x00	; 0
    1040:	d0 e0       	ldi	r29, 0x00	; 0
    1042:	0b c0       	rjmp	.+22     	; 0x105a <write_to_TwiFIFO+0x52>
    1044:	f8 01       	movw	r30, r16
    1046:	61 91       	ld	r22, Z+
    1048:	8f 01       	movw	r16, r30
    104a:	80 91 08 01 	lds	r24, 0x0108
    104e:	90 91 09 01 	lds	r25, 0x0109
    1052:	cc d9       	rcall	.-3176   	; 0x3ec <FifoWrite>
    1054:	81 11       	cpse	r24, r1
    1056:	11 c0       	rjmp	.+34     	; 0x107a <write_to_TwiFIFO+0x72>
    1058:	21 96       	adiw	r28, 0x01	; 1
    105a:	ee 2d       	mov	r30, r14
    105c:	ff 2d       	mov	r31, r15
    105e:	df 01       	movw	r26, r30
    1060:	0d 90       	ld	r0, X+
    1062:	00 20       	and	r0, r0
    1064:	e9 f7       	brne	.-6      	; 0x1060 <write_to_TwiFIFO+0x58>
    1066:	11 97       	sbiw	r26, 0x01	; 1
    1068:	ae 1b       	sub	r26, r30
    106a:	bf 0b       	sbc	r27, r31
    106c:	ca 17       	cp	r28, r26
    106e:	db 07       	cpc	r29, r27
    1070:	48 f3       	brcs	.-46     	; 0x1044 <write_to_TwiFIFO+0x3c>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	03 c0       	rjmp	.+6      	; 0x107c <write_to_TwiFIFO+0x74>
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	01 c0       	rjmp	.+2      	; 0x107c <write_to_TwiFIFO+0x74>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	08 95       	ret

0000108a <__vector_26>:
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	0b b6       	in	r0, 0x3b	; 59
    1096:	0f 92       	push	r0
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	80 91 14 14 	lds	r24, 0x1414
    10b8:	80 34       	cpi	r24, 0x40	; 64
    10ba:	09 f4       	brne	.+2      	; 0x10be <__vector_26+0x34>
    10bc:	87 c0       	rjmp	.+270    	; 0x11cc <__vector_26+0x142>
    10be:	80 38       	cpi	r24, 0x80	; 128
    10c0:	21 f0       	breq	.+8      	; 0x10ca <__vector_26+0x40>
    10c2:	80 32       	cpi	r24, 0x20	; 32
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_26+0x3e>
    10c6:	7f c1       	rjmp	.+766    	; 0x13c6 <__vector_26+0x33c>
    10c8:	c9 c0       	rjmp	.+402    	; 0x125c <__vector_26+0x1d2>
    10ca:	80 91 b9 00 	lds	r24, 0x00B9
    10ce:	88 7f       	andi	r24, 0xF8	; 248
    10d0:	80 36       	cpi	r24, 0x60	; 96
    10d2:	29 f0       	breq	.+10     	; 0x10de <__vector_26+0x54>
    10d4:	80 91 b9 00 	lds	r24, 0x00B9
    10d8:	88 7f       	andi	r24, 0xF8	; 248
    10da:	88 36       	cpi	r24, 0x68	; 104
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <__vector_26+0x5c>
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 93 17 14 	sts	0x1417, r24
    10e4:	71 c0       	rjmp	.+226    	; 0x11c8 <__vector_26+0x13e>
    10e6:	80 91 b9 00 	lds	r24, 0x00B9
    10ea:	88 7f       	andi	r24, 0xF8	; 248
    10ec:	80 37       	cpi	r24, 0x70	; 112
    10ee:	29 f0       	breq	.+10     	; 0x10fa <__vector_26+0x70>
    10f0:	80 91 b9 00 	lds	r24, 0x00B9
    10f4:	88 7f       	andi	r24, 0xF8	; 248
    10f6:	88 37       	cpi	r24, 0x78	; 120
    10f8:	39 f4       	brne	.+14     	; 0x1108 <__vector_26+0x7e>
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	90 93 21 14 	sts	0x1421, r25
    1102:	80 93 20 14 	sts	0x1420, r24
    1106:	60 c0       	rjmp	.+192    	; 0x11c8 <__vector_26+0x13e>
    1108:	80 91 b9 00 	lds	r24, 0x00B9
    110c:	88 7f       	andi	r24, 0xF8	; 248
    110e:	80 38       	cpi	r24, 0x80	; 128
    1110:	b9 f5       	brne	.+110    	; 0x1180 <__vector_26+0xf6>
    1112:	80 91 17 14 	lds	r24, 0x1417
    1116:	88 23       	and	r24, r24
    1118:	41 f0       	breq	.+16     	; 0x112a <__vector_26+0xa0>
    111a:	8a dd       	rcall	.-1260   	; 0xc30 <get_data>
    111c:	80 93 20 14 	sts	0x1420, r24
    1120:	10 92 21 14 	sts	0x1421, r1
    1124:	10 92 17 14 	sts	0x1417, r1
    1128:	4f c0       	rjmp	.+158    	; 0x11c8 <__vector_26+0x13e>
    112a:	80 91 20 14 	lds	r24, 0x1420
    112e:	90 91 21 14 	lds	r25, 0x1421
    1132:	85 30       	cpi	r24, 0x05	; 5
    1134:	91 05       	cpc	r25, r1
    1136:	71 f0       	breq	.+28     	; 0x1154 <__vector_26+0xca>
    1138:	24 f4       	brge	.+8      	; 0x1142 <__vector_26+0xb8>
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	09 f0       	breq	.+2      	; 0x1140 <__vector_26+0xb6>
    113e:	44 c0       	rjmp	.+136    	; 0x11c8 <__vector_26+0x13e>
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <__vector_26+0xc6>
    1142:	86 30       	cpi	r24, 0x06	; 6
    1144:	91 05       	cpc	r25, r1
    1146:	51 f0       	breq	.+20     	; 0x115c <__vector_26+0xd2>
    1148:	49 97       	sbiw	r24, 0x19	; 25
    114a:	09 f0       	breq	.+2      	; 0x114e <__vector_26+0xc4>
    114c:	3d c0       	rjmp	.+122    	; 0x11c8 <__vector_26+0x13e>
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <__vector_26+0xce>
    1150:	99 dd       	rcall	.-1230   	; 0xc84 <get_control_settings_from_bus>
    1152:	3a c0       	rjmp	.+116    	; 0x11c8 <__vector_26+0x13e>
    1154:	a8 dd       	rcall	.-1200   	; 0xca6 <get_autonom_settings_from_bus>
    1156:	38 c0       	rjmp	.+112    	; 0x11c8 <__vector_26+0x13e>
    1158:	aa dd       	rcall	.-1196   	; 0xcae <get_char_from_bus>
    115a:	36 c0       	rjmp	.+108    	; 0x11c8 <__vector_26+0x13e>
    115c:	c0 91 15 14 	lds	r28, 0x1415
    1160:	d0 91 16 14 	lds	r29, 0x1416
    1164:	65 dd       	rcall	.-1334   	; 0xc30 <get_data>
    1166:	ca 5f       	subi	r28, 0xFA	; 250
    1168:	dc 4e       	sbci	r29, 0xEC	; 236
    116a:	88 83       	st	Y, r24
    116c:	80 91 15 14 	lds	r24, 0x1415
    1170:	90 91 16 14 	lds	r25, 0x1416
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	90 93 16 14 	sts	0x1416, r25
    117a:	80 93 15 14 	sts	0x1415, r24
    117e:	24 c0       	rjmp	.+72     	; 0x11c8 <__vector_26+0x13e>
    1180:	80 91 b9 00 	lds	r24, 0x00B9
    1184:	88 7f       	andi	r24, 0xF8	; 248
    1186:	80 39       	cpi	r24, 0x90	; 144
    1188:	11 f4       	brne	.+4      	; 0x118e <__vector_26+0x104>
    118a:	ab dd       	rcall	.-1194   	; 0xce2 <get_sensor_from_bus>
    118c:	1d c0       	rjmp	.+58     	; 0x11c8 <__vector_26+0x13e>
    118e:	80 91 b9 00 	lds	r24, 0x00B9
    1192:	88 7f       	andi	r24, 0xF8	; 248
    1194:	80 3a       	cpi	r24, 0xA0	; 160
    1196:	c1 f4       	brne	.+48     	; 0x11c8 <__vector_26+0x13e>
    1198:	5a dd       	rcall	.-1356   	; 0xc4e <stop_twi>
    119a:	80 91 20 14 	lds	r24, 0x1420
    119e:	90 91 21 14 	lds	r25, 0x1421
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	91 05       	cpc	r25, r1
    11a6:	49 f0       	breq	.+18     	; 0x11ba <__vector_26+0x130>
    11a8:	89 31       	cpi	r24, 0x19	; 25
    11aa:	91 05       	cpc	r25, r1
    11ac:	51 f0       	breq	.+20     	; 0x11c2 <__vector_26+0x138>
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	59 f4       	brne	.+22     	; 0x11c8 <__vector_26+0x13e>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 be 12 	sts	0x12BE, r24
    11b8:	07 c0       	rjmp	.+14     	; 0x11c8 <__vector_26+0x13e>
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 bd 12 	sts	0x12BD, r24
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <__vector_26+0x13e>
    11c2:	8e e0       	ldi	r24, 0x0E	; 14
    11c4:	93 e1       	ldi	r25, 0x13	; 19
    11c6:	20 df       	rcall	.-448    	; 0x1008 <write_to_TwiFIFO>
    11c8:	57 dd       	rcall	.-1362   	; 0xc78 <reset_TWI>
    11ca:	fd c0       	rjmp	.+506    	; 0x13c6 <__vector_26+0x33c>
    11cc:	80 91 b9 00 	lds	r24, 0x00B9
    11d0:	88 7f       	andi	r24, 0xF8	; 248
    11d2:	80 36       	cpi	r24, 0x60	; 96
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <__vector_26+0x156>
    11d6:	80 91 b9 00 	lds	r24, 0x00B9
    11da:	88 7f       	andi	r24, 0xF8	; 248
    11dc:	88 36       	cpi	r24, 0x68	; 104
    11de:	21 f4       	brne	.+8      	; 0x11e8 <__vector_26+0x15e>
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	80 93 17 14 	sts	0x1417, r24
    11e6:	38 c0       	rjmp	.+112    	; 0x1258 <__vector_26+0x1ce>
    11e8:	80 91 b9 00 	lds	r24, 0x00B9
    11ec:	88 7f       	andi	r24, 0xF8	; 248
    11ee:	80 38       	cpi	r24, 0x80	; 128
    11f0:	e1 f4       	brne	.+56     	; 0x122a <__vector_26+0x1a0>
    11f2:	80 91 17 14 	lds	r24, 0x1417
    11f6:	88 23       	and	r24, r24
    11f8:	41 f0       	breq	.+16     	; 0x120a <__vector_26+0x180>
    11fa:	1a dd       	rcall	.-1484   	; 0xc30 <get_data>
    11fc:	80 93 20 14 	sts	0x1420, r24
    1200:	10 92 21 14 	sts	0x1421, r1
    1204:	10 92 17 14 	sts	0x1417, r1
    1208:	27 c0       	rjmp	.+78     	; 0x1258 <__vector_26+0x1ce>
    120a:	80 91 20 14 	lds	r24, 0x1420
    120e:	90 91 21 14 	lds	r25, 0x1421
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	91 05       	cpc	r25, r1
    1216:	19 f0       	breq	.+6      	; 0x121e <__vector_26+0x194>
    1218:	49 97       	sbiw	r24, 0x19	; 25
    121a:	f1 f4       	brne	.+60     	; 0x1258 <__vector_26+0x1ce>
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <__vector_26+0x19c>
    121e:	08 dd       	rcall	.-1520   	; 0xc30 <get_data>
    1220:	80 93 1f 14 	sts	0x141F, r24
    1224:	19 c0       	rjmp	.+50     	; 0x1258 <__vector_26+0x1ce>
    1226:	43 dd       	rcall	.-1402   	; 0xcae <get_char_from_bus>
    1228:	17 c0       	rjmp	.+46     	; 0x1258 <__vector_26+0x1ce>
    122a:	80 91 b9 00 	lds	r24, 0x00B9
    122e:	88 7f       	andi	r24, 0xF8	; 248
    1230:	80 3a       	cpi	r24, 0xA0	; 160
    1232:	91 f4       	brne	.+36     	; 0x1258 <__vector_26+0x1ce>
    1234:	0c dd       	rcall	.-1512   	; 0xc4e <stop_twi>
    1236:	80 91 20 14 	lds	r24, 0x1420
    123a:	90 91 21 14 	lds	r25, 0x1421
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	91 05       	cpc	r25, r1
    1242:	19 f0       	breq	.+6      	; 0x124a <__vector_26+0x1c0>
    1244:	49 97       	sbiw	r24, 0x19	; 25
    1246:	41 f4       	brne	.+16     	; 0x1258 <__vector_26+0x1ce>
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <__vector_26+0x1c8>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 bb 12 	sts	0x12BB, r24
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <__vector_26+0x1ce>
    1252:	8e e0       	ldi	r24, 0x0E	; 14
    1254:	93 e1       	ldi	r25, 0x13	; 19
    1256:	d8 de       	rcall	.-592    	; 0x1008 <write_to_TwiFIFO>
    1258:	0f dd       	rcall	.-1506   	; 0xc78 <reset_TWI>
    125a:	b5 c0       	rjmp	.+362    	; 0x13c6 <__vector_26+0x33c>
    125c:	80 91 b9 00 	lds	r24, 0x00B9
    1260:	88 7f       	andi	r24, 0xF8	; 248
    1262:	80 36       	cpi	r24, 0x60	; 96
    1264:	29 f0       	breq	.+10     	; 0x1270 <__vector_26+0x1e6>
    1266:	80 91 b9 00 	lds	r24, 0x00B9
    126a:	88 7f       	andi	r24, 0xF8	; 248
    126c:	88 36       	cpi	r24, 0x68	; 104
    126e:	21 f4       	brne	.+8      	; 0x1278 <__vector_26+0x1ee>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 17 14 	sts	0x1417, r24
    1276:	a6 c0       	rjmp	.+332    	; 0x13c4 <__vector_26+0x33a>
    1278:	80 91 b9 00 	lds	r24, 0x00B9
    127c:	88 7f       	andi	r24, 0xF8	; 248
    127e:	80 37       	cpi	r24, 0x70	; 112
    1280:	29 f0       	breq	.+10     	; 0x128c <__vector_26+0x202>
    1282:	80 91 b9 00 	lds	r24, 0x00B9
    1286:	88 7f       	andi	r24, 0xF8	; 248
    1288:	88 37       	cpi	r24, 0x78	; 120
    128a:	39 f4       	brne	.+14     	; 0x129a <__vector_26+0x210>
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	90 93 21 14 	sts	0x1421, r25
    1294:	80 93 20 14 	sts	0x1420, r24
    1298:	95 c0       	rjmp	.+298    	; 0x13c4 <__vector_26+0x33a>
    129a:	80 91 b9 00 	lds	r24, 0x00B9
    129e:	88 7f       	andi	r24, 0xF8	; 248
    12a0:	80 38       	cpi	r24, 0x80	; 128
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <__vector_26+0x21c>
    12a4:	62 c0       	rjmp	.+196    	; 0x136a <__vector_26+0x2e0>
    12a6:	80 91 17 14 	lds	r24, 0x1417
    12aa:	88 23       	and	r24, r24
    12ac:	41 f0       	breq	.+16     	; 0x12be <__vector_26+0x234>
    12ae:	c0 dc       	rcall	.-1664   	; 0xc30 <get_data>
    12b0:	80 93 20 14 	sts	0x1420, r24
    12b4:	10 92 21 14 	sts	0x1421, r1
    12b8:	10 92 17 14 	sts	0x1417, r1
    12bc:	83 c0       	rjmp	.+262    	; 0x13c4 <__vector_26+0x33a>
    12be:	80 91 20 14 	lds	r24, 0x1420
    12c2:	90 91 21 14 	lds	r25, 0x1421
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <__vector_26+0x244>
    12cc:	4a c0       	rjmp	.+148    	; 0x1362 <__vector_26+0x2d8>
    12ce:	1c f4       	brge	.+6      	; 0x12d6 <__vector_26+0x24c>
    12d0:	89 2b       	or	r24, r25
    12d2:	41 f0       	breq	.+16     	; 0x12e4 <__vector_26+0x25a>
    12d4:	77 c0       	rjmp	.+238    	; 0x13c4 <__vector_26+0x33a>
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	91 05       	cpc	r25, r1
    12da:	b1 f0       	breq	.+44     	; 0x1308 <__vector_26+0x27e>
    12dc:	05 97       	sbiw	r24, 0x05	; 5
    12de:	09 f0       	breq	.+2      	; 0x12e2 <__vector_26+0x258>
    12e0:	71 c0       	rjmp	.+226    	; 0x13c4 <__vector_26+0x33a>
    12e2:	41 c0       	rjmp	.+130    	; 0x1366 <__vector_26+0x2dc>
    12e4:	c0 91 18 14 	lds	r28, 0x1418
    12e8:	d0 91 19 14 	lds	r29, 0x1419
    12ec:	a1 dc       	rcall	.-1726   	; 0xc30 <get_data>
    12ee:	c6 5f       	subi	r28, 0xF6	; 246
    12f0:	dc 4e       	sbci	r29, 0xEC	; 236
    12f2:	88 83       	st	Y, r24
    12f4:	80 91 18 14 	lds	r24, 0x1418
    12f8:	90 91 19 14 	lds	r25, 0x1419
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 19 14 	sts	0x1419, r25
    1302:	80 93 18 14 	sts	0x1418, r24
    1306:	5e c0       	rjmp	.+188    	; 0x13c4 <__vector_26+0x33a>
    1308:	93 dc       	rcall	.-1754   	; 0xc30 <get_data>
    130a:	81 11       	cpse	r24, r1
    130c:	0a c0       	rjmp	.+20     	; 0x1322 <__vector_26+0x298>
    130e:	80 91 1a 14 	lds	r24, 0x141A
    1312:	90 91 1b 14 	lds	r25, 0x141B
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	90 93 1b 14 	sts	0x141B, r25
    131c:	80 93 1a 14 	sts	0x141A, r24
    1320:	09 c0       	rjmp	.+18     	; 0x1334 <__vector_26+0x2aa>
    1322:	80 91 1a 14 	lds	r24, 0x141A
    1326:	90 91 1b 14 	lds	r25, 0x141B
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	90 93 1b 14 	sts	0x141B, r25
    1330:	80 93 1a 14 	sts	0x141A, r24
    1334:	80 91 1a 14 	lds	r24, 0x141A
    1338:	90 91 1b 14 	lds	r25, 0x141B
    133c:	18 16       	cp	r1, r24
    133e:	19 06       	cpc	r1, r25
    1340:	3c f0       	brlt	.+14     	; 0x1350 <__vector_26+0x2c6>
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	90 93 1b 14 	sts	0x141B, r25
    134a:	80 93 1a 14 	sts	0x141A, r24
    134e:	3a c0       	rjmp	.+116    	; 0x13c4 <__vector_26+0x33a>
    1350:	08 97       	sbiw	r24, 0x08	; 8
    1352:	c4 f1       	brlt	.+112    	; 0x13c4 <__vector_26+0x33a>
    1354:	87 e0       	ldi	r24, 0x07	; 7
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	90 93 1b 14 	sts	0x141B, r25
    135c:	80 93 1a 14 	sts	0x141A, r24
    1360:	31 c0       	rjmp	.+98     	; 0x13c4 <__vector_26+0x33a>
    1362:	90 dc       	rcall	.-1760   	; 0xc84 <get_control_settings_from_bus>
    1364:	2f c0       	rjmp	.+94     	; 0x13c4 <__vector_26+0x33a>
    1366:	9f dc       	rcall	.-1730   	; 0xca6 <get_autonom_settings_from_bus>
    1368:	2d c0       	rjmp	.+90     	; 0x13c4 <__vector_26+0x33a>
    136a:	80 91 b9 00 	lds	r24, 0x00B9
    136e:	88 7f       	andi	r24, 0xF8	; 248
    1370:	80 39       	cpi	r24, 0x90	; 144
    1372:	11 f4       	brne	.+4      	; 0x1378 <__vector_26+0x2ee>
    1374:	b6 dc       	rcall	.-1684   	; 0xce2 <get_sensor_from_bus>
    1376:	26 c0       	rjmp	.+76     	; 0x13c4 <__vector_26+0x33a>
    1378:	80 91 b9 00 	lds	r24, 0x00B9
    137c:	88 7f       	andi	r24, 0xF8	; 248
    137e:	80 3a       	cpi	r24, 0xA0	; 160
    1380:	09 f5       	brne	.+66     	; 0x13c4 <__vector_26+0x33a>
    1382:	65 dc       	rcall	.-1846   	; 0xc4e <stop_twi>
    1384:	80 91 20 14 	lds	r24, 0x1420
    1388:	90 91 21 14 	lds	r25, 0x1421
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	91 f0       	breq	.+36     	; 0x13b6 <__vector_26+0x32c>
    1392:	1c f4       	brge	.+6      	; 0x139a <__vector_26+0x310>
    1394:	89 2b       	or	r24, r25
    1396:	39 f0       	breq	.+14     	; 0x13a6 <__vector_26+0x31c>
    1398:	15 c0       	rjmp	.+42     	; 0x13c4 <__vector_26+0x33a>
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	91 05       	cpc	r25, r1
    139e:	39 f0       	breq	.+14     	; 0x13ae <__vector_26+0x324>
    13a0:	05 97       	sbiw	r24, 0x05	; 5
    13a2:	81 f4       	brne	.+32     	; 0x13c4 <__vector_26+0x33a>
    13a4:	0c c0       	rjmp	.+24     	; 0x13be <__vector_26+0x334>
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	80 93 bf 12 	sts	0x12BF, r24
    13ac:	0b c0       	rjmp	.+22     	; 0x13c4 <__vector_26+0x33a>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	80 93 bc 12 	sts	0x12BC, r24
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <__vector_26+0x33a>
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	80 93 be 12 	sts	0x12BE, r24
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <__vector_26+0x33a>
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 bd 12 	sts	0x12BD, r24
    13c4:	59 dc       	rcall	.-1870   	; 0xc78 <reset_TWI>
    13c6:	ff 91       	pop	r31
    13c8:	ef 91       	pop	r30
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0b be       	out	0x3b, r0	; 59
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
    13f0:	10 92 c5 00 	sts	0x00C5, r1
    13f4:	87 e0       	ldi	r24, 0x07	; 7
    13f6:	80 93 c4 00 	sts	0x00C4, r24
    13fa:	88 e9       	ldi	r24, 0x98	; 152
    13fc:	80 93 c1 00 	sts	0x00C1, r24
    1400:	86 e0       	ldi	r24, 0x06	; 6
    1402:	80 93 c2 00 	sts	0x00C2, r24
    1406:	08 95       	ret

00001408 <USART_CheckTxReady>:
    1408:	80 91 c0 00 	lds	r24, 0x00C0
    140c:	80 72       	andi	r24, 0x20	; 32
    140e:	08 95       	ret

00001410 <USART_WriteByte>:
    1410:	cf 93       	push	r28
    1412:	c8 2f       	mov	r28, r24
    1414:	f9 df       	rcall	.-14     	; 0x1408 <USART_CheckTxReady>
    1416:	88 23       	and	r24, r24
    1418:	e9 f3       	breq	.-6      	; 0x1414 <USART_WriteByte+0x4>
    141a:	c0 93 c6 00 	sts	0x00C6, r28
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <USART_crc16>:
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	66 23       	and	r22, r22
    1434:	09 f4       	brne	.+2      	; 0x1438 <USART_crc16+0x16>
    1436:	3e c0       	rjmp	.+124    	; 0x14b4 <USART_crc16+0x92>
    1438:	06 2f       	mov	r16, r22
    143a:	10 e0       	ldi	r17, 0x00	; 0
    143c:	4f ef       	ldi	r20, 0xFF	; 255
    143e:	5f ef       	ldi	r21, 0xFF	; 255
    1440:	ee ef       	ldi	r30, 0xFE	; 254
    1442:	ff ef       	ldi	r31, 0xFF	; 255
    1444:	c6 2e       	mov	r12, r22
    1446:	d1 2c       	mov	r13, r1
    1448:	e8 2e       	mov	r14, r24
    144a:	f1 2c       	mov	r15, r1
    144c:	c8 e0       	ldi	r28, 0x08	; 8
    144e:	d0 e0       	ldi	r29, 0x00	; 0
    1450:	ee 3f       	cpi	r30, 0xFE	; 254
    1452:	6f ef       	ldi	r22, 0xFF	; 255
    1454:	f6 07       	cpc	r31, r22
    1456:	19 f4       	brne	.+6      	; 0x145e <USART_crc16+0x3c>
    1458:	8e 2d       	mov	r24, r14
    145a:	9f 2d       	mov	r25, r15
    145c:	30 c0       	rjmp	.+96     	; 0x14be <USART_crc16+0x9c>
    145e:	ef 3f       	cpi	r30, 0xFF	; 255
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	f8 07       	cpc	r31, r24
    1464:	19 f4       	brne	.+6      	; 0x146c <USART_crc16+0x4a>
    1466:	8c 2d       	mov	r24, r12
    1468:	9d 2d       	mov	r25, r13
    146a:	29 c0       	rjmp	.+82     	; 0x14be <USART_crc16+0x9c>
    146c:	df 01       	movw	r26, r30
    146e:	a7 5c       	subi	r26, 0xC7	; 199
    1470:	b9 4e       	sbci	r27, 0xE9	; 233
    1472:	8c 91       	ld	r24, X
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	23 c0       	rjmp	.+70     	; 0x14be <USART_crc16+0x9c>
    1478:	ba 01       	movw	r22, r20
    147a:	68 27       	eor	r22, r24
    147c:	79 27       	eor	r23, r25
    147e:	60 ff       	sbrs	r22, 0
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <USART_crc16+0x6e>
    1482:	56 95       	lsr	r21
    1484:	47 95       	ror	r20
    1486:	68 e0       	ldi	r22, 0x08	; 8
    1488:	46 27       	eor	r20, r22
    148a:	64 e8       	ldi	r22, 0x84	; 132
    148c:	56 27       	eor	r21, r22
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <USART_crc16+0x72>
    1490:	56 95       	lsr	r21
    1492:	47 95       	ror	r20
    1494:	96 95       	lsr	r25
    1496:	87 95       	ror	r24
    1498:	21 50       	subi	r18, 0x01	; 1
    149a:	31 09       	sbc	r19, r1
    149c:	69 f7       	brne	.-38     	; 0x1478 <USART_crc16+0x56>
    149e:	31 96       	adiw	r30, 0x01	; 1
    14a0:	e0 17       	cp	r30, r16
    14a2:	f1 07       	cpc	r31, r17
    14a4:	a9 f6       	brne	.-86     	; 0x1450 <USART_crc16+0x2e>
    14a6:	9a 01       	movw	r18, r20
    14a8:	20 95       	com	r18
    14aa:	30 95       	com	r19
    14ac:	32 27       	eor	r19, r18
    14ae:	23 27       	eor	r18, r19
    14b0:	32 27       	eor	r19, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <USART_crc16+0x96>
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	82 2f       	mov	r24, r18
    14ba:	93 2f       	mov	r25, r19
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <USART_crc16+0xa0>
    14be:	9e 01       	movw	r18, r28
    14c0:	db cf       	rjmp	.-74     	; 0x1478 <USART_crc16+0x56>
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	cf 90       	pop	r12
    14d2:	08 95       	ret

000014d4 <USART_SendPacket>:
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	9e e7       	ldi	r25, 0x7E	; 126
    14de:	90 93 38 17 	sts	0x1738, r25
    14e2:	80 93 39 17 	sts	0x1739, r24
    14e6:	60 93 3a 17 	sts	0x173A, r22
    14ea:	26 2f       	mov	r18, r22
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	12 16       	cp	r1, r18
    14f0:	13 06       	cpc	r1, r19
    14f2:	4c f5       	brge	.+82     	; 0x1546 <USART_SendPacket+0x72>
    14f4:	e9 e3       	ldi	r30, 0x39	; 57
    14f6:	f6 e1       	ldi	r31, 0x16	; 22
    14f8:	03 e0       	ldi	r16, 0x03	; 3
    14fa:	10 e0       	ldi	r17, 0x00	; 0
    14fc:	c0 e0       	ldi	r28, 0x00	; 0
    14fe:	d0 e0       	ldi	r29, 0x00	; 0
    1500:	7d e7       	ldi	r23, 0x7D	; 125
    1502:	50 e2       	ldi	r21, 0x20	; 32
    1504:	90 81       	ld	r25, Z
    1506:	49 2f       	mov	r20, r25
    1508:	4d 57       	subi	r20, 0x7D	; 125
    150a:	42 30       	cpi	r20, 0x02	; 2
    150c:	80 f4       	brcc	.+32     	; 0x152e <USART_SendPacket+0x5a>
    150e:	d8 01       	movw	r26, r16
    1510:	a8 5c       	subi	r26, 0xC8	; 200
    1512:	b8 4e       	sbci	r27, 0xE8	; 232
    1514:	ac 0f       	add	r26, r28
    1516:	bd 1f       	adc	r27, r29
    1518:	7c 93       	st	X, r23
    151a:	0f 5f       	subi	r16, 0xFF	; 255
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	d8 01       	movw	r26, r16
    1520:	a8 5c       	subi	r26, 0xC8	; 200
    1522:	b8 4e       	sbci	r27, 0xE8	; 232
    1524:	ac 0f       	add	r26, r28
    1526:	bd 1f       	adc	r27, r29
    1528:	95 27       	eor	r25, r21
    152a:	9c 93       	st	X, r25
    152c:	06 c0       	rjmp	.+12     	; 0x153a <USART_SendPacket+0x66>
    152e:	d8 01       	movw	r26, r16
    1530:	a8 5c       	subi	r26, 0xC8	; 200
    1532:	b8 4e       	sbci	r27, 0xE8	; 232
    1534:	ac 0f       	add	r26, r28
    1536:	bd 1f       	adc	r27, r29
    1538:	9c 93       	st	X, r25
    153a:	21 96       	adiw	r28, 0x01	; 1
    153c:	31 96       	adiw	r30, 0x01	; 1
    153e:	c2 17       	cp	r28, r18
    1540:	d3 07       	cpc	r29, r19
    1542:	01 f7       	brne	.-64     	; 0x1504 <USART_SendPacket+0x30>
    1544:	04 c0       	rjmp	.+8      	; 0x154e <USART_SendPacket+0x7a>
    1546:	03 e0       	ldi	r16, 0x03	; 3
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	c0 e0       	ldi	r28, 0x00	; 0
    154c:	d0 e0       	ldi	r29, 0x00	; 0
    154e:	69 df       	rcall	.-302    	; 0x1422 <USART_crc16>
    1550:	f8 01       	movw	r30, r16
    1552:	e8 5c       	subi	r30, 0xC8	; 200
    1554:	f8 4e       	sbci	r31, 0xE8	; 232
    1556:	ec 0f       	add	r30, r28
    1558:	fd 1f       	adc	r31, r29
    155a:	90 83       	st	Z, r25
    155c:	81 83       	std	Z+1, r24	; 0x01
    155e:	22 96       	adiw	r28, 0x02	; 2
    1560:	0c 0f       	add	r16, r28
    1562:	1d 1f       	adc	r17, r29
    1564:	f8 01       	movw	r30, r16
    1566:	e8 5c       	subi	r30, 0xC8	; 200
    1568:	f8 4e       	sbci	r31, 0xE8	; 232
    156a:	8e e7       	ldi	r24, 0x7E	; 126
    156c:	80 83       	st	Z, r24
    156e:	c8 01       	movw	r24, r16
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	18 16       	cp	r1, r24
    1574:	19 06       	cpc	r1, r25
    1576:	4c f4       	brge	.+18     	; 0x158a <USART_SendPacket+0xb6>
    1578:	c8 e3       	ldi	r28, 0x38	; 56
    157a:	d7 e1       	ldi	r29, 0x17	; 23
    157c:	07 5c       	subi	r16, 0xC7	; 199
    157e:	18 4e       	sbci	r17, 0xE8	; 232
    1580:	89 91       	ld	r24, Y+
    1582:	46 df       	rcall	.-372    	; 0x1410 <USART_WriteByte>
    1584:	c0 17       	cp	r28, r16
    1586:	d1 07       	cpc	r29, r17
    1588:	d9 f7       	brne	.-10     	; 0x1580 <USART_SendPacket+0xac>
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <USART_SendCommand>:
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	07 dd       	rcall	.-1522   	; 0xfa8 <TWI_get_command>
    159a:	80 93 39 16 	sts	0x1639, r24
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 dd       	rcall	.-1532   	; 0xfa8 <TWI_get_command>
    15a4:	80 93 3a 16 	sts	0x163A, r24
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	fd dc       	rcall	.-1542   	; 0xfa8 <TWI_get_command>
    15ae:	80 93 3b 16 	sts	0x163B, r24
    15b2:	63 e0       	ldi	r22, 0x03	; 3
    15b4:	83 e4       	ldi	r24, 0x43	; 67
    15b6:	8e cf       	rjmp	.-228    	; 0x14d4 <USART_SendPacket>

000015b8 <USART_DecodeMessageRxFIFO>:
    15b8:	8f 92       	push	r8
    15ba:	9f 92       	push	r9
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	ad b6       	in	r10, 0x3d	; 61
    15d6:	be b6       	in	r11, 0x3e	; 62
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	80 91 11 01 	lds	r24, 0x0111
    15e0:	90 91 12 01 	lds	r25, 0x0112
    15e4:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    15e8:	88 23       	and	r24, r24
    15ea:	31 f0       	breq	.+12     	; 0x15f8 <USART_DecodeMessageRxFIFO+0x40>
    15ec:	6d ea       	ldi	r22, 0xAD	; 173
    15ee:	71 e1       	ldi	r23, 0x11	; 17
    15f0:	80 e4       	ldi	r24, 0x40	; 64
    15f2:	0e dc       	rcall	.-2020   	; 0xe10 <TWI_send_string>
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	44 c0       	rjmp	.+136    	; 0x1680 <USART_DecodeMessageRxFIFO+0xc8>
    15f8:	c0 90 00 00 	lds	r12, 0x0000
    15fc:	d1 2c       	mov	r13, r1
    15fe:	96 01       	movw	r18, r12
    1600:	21 50       	subi	r18, 0x01	; 1
    1602:	31 09       	sbc	r19, r1
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	c1 14       	cp	r12, r1
    160a:	d1 04       	cpc	r13, r1
    160c:	11 f0       	breq	.+4      	; 0x1612 <USART_DecodeMessageRxFIFO+0x5a>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	82 0f       	add	r24, r18
    1614:	93 1f       	adc	r25, r19
    1616:	2d b7       	in	r18, 0x3d	; 61
    1618:	3e b7       	in	r19, 0x3e	; 62
    161a:	28 1b       	sub	r18, r24
    161c:	39 0b       	sbc	r19, r25
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	3e bf       	out	0x3e, r19	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	2d bf       	out	0x3d, r18	; 61
    1628:	8d b7       	in	r24, 0x3d	; 61
    162a:	9e b7       	in	r25, 0x3e	; 62
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	88 2e       	mov	r8, r24
    1630:	99 2e       	mov	r9, r25
    1632:	1c 14       	cp	r1, r12
    1634:	1d 04       	cpc	r1, r13
    1636:	f4 f4       	brge	.+60     	; 0x1674 <USART_DecodeMessageRxFIFO+0xbc>
    1638:	e8 2e       	mov	r14, r24
    163a:	f9 2e       	mov	r15, r25
    163c:	00 e0       	ldi	r16, 0x00	; 0
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	80 91 11 01 	lds	r24, 0x0111
    1648:	90 91 12 01 	lds	r25, 0x0112
    164c:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    1650:	88 23       	and	r24, r24
    1652:	31 f0       	breq	.+12     	; 0x1660 <USART_DecodeMessageRxFIFO+0xa8>
    1654:	6f ec       	ldi	r22, 0xCF	; 207
    1656:	71 e1       	ldi	r23, 0x11	; 17
    1658:	80 e4       	ldi	r24, 0x40	; 64
    165a:	da db       	rcall	.-2124   	; 0xe10 <TWI_send_string>
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	10 c0       	rjmp	.+32     	; 0x1680 <USART_DecodeMessageRxFIFO+0xc8>
    1660:	80 91 00 00 	lds	r24, 0x0000
    1664:	f7 01       	movw	r30, r14
    1666:	81 93       	st	Z+, r24
    1668:	7f 01       	movw	r14, r30
    166a:	0f 5f       	subi	r16, 0xFF	; 255
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
    166e:	0c 15       	cp	r16, r12
    1670:	1d 05       	cpc	r17, r13
    1672:	34 f3       	brlt	.-52     	; 0x1640 <USART_DecodeMessageRxFIFO+0x88>
    1674:	a6 01       	movw	r20, r12
    1676:	68 2d       	mov	r22, r8
    1678:	79 2d       	mov	r23, r9
    167a:	80 e8       	ldi	r24, 0x80	; 128
    167c:	0f dc       	rcall	.-2018   	; 0xe9c <TWI_send_string_fixed_length>
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	be be       	out	0x3e, r11	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	ad be       	out	0x3d, r10	; 61
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	bf 90       	pop	r11
    169c:	af 90       	pop	r10
    169e:	9f 90       	pop	r9
    16a0:	8f 90       	pop	r8
    16a2:	08 95       	ret

000016a4 <USART_DecodeCommandRxFIFO>:
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	80 91 11 01 	lds	r24, 0x0111
    16b0:	90 91 12 01 	lds	r25, 0x0112
    16b4:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    16b8:	88 23       	and	r24, r24
    16ba:	31 f0       	breq	.+12     	; 0x16c8 <USART_DecodeCommandRxFIFO+0x24>
    16bc:	62 ef       	ldi	r22, 0xF2	; 242
    16be:	71 e1       	ldi	r23, 0x11	; 17
    16c0:	80 e4       	ldi	r24, 0x40	; 64
    16c2:	a6 db       	rcall	.-2228   	; 0xe10 <TWI_send_string>
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	45 c0       	rjmp	.+138    	; 0x1752 <USART_DecodeCommandRxFIFO+0xae>
    16c8:	80 91 00 00 	lds	r24, 0x0000
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <USART_DecodeCommandRxFIFO+0x2e>
    16d0:	3b c0       	rjmp	.+118    	; 0x1748 <USART_DecodeCommandRxFIFO+0xa4>
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 91 11 01 	lds	r24, 0x0111
    16da:	90 91 12 01 	lds	r25, 0x0112
    16de:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    16e2:	88 23       	and	r24, r24
    16e4:	31 f0       	breq	.+12     	; 0x16f2 <USART_DecodeCommandRxFIFO+0x4e>
    16e6:	64 e1       	ldi	r22, 0x14	; 20
    16e8:	72 e1       	ldi	r23, 0x12	; 18
    16ea:	80 e4       	ldi	r24, 0x40	; 64
    16ec:	91 db       	rcall	.-2270   	; 0xe10 <TWI_send_string>
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	30 c0       	rjmp	.+96     	; 0x1752 <USART_DecodeCommandRxFIFO+0xae>
    16f2:	c0 91 00 00 	lds	r28, 0x0000
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	80 91 11 01 	lds	r24, 0x0111
    16fe:	90 91 12 01 	lds	r25, 0x0112
    1702:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    1706:	88 23       	and	r24, r24
    1708:	31 f0       	breq	.+12     	; 0x1716 <USART_DecodeCommandRxFIFO+0x72>
    170a:	6c e3       	ldi	r22, 0x3C	; 60
    170c:	72 e1       	ldi	r23, 0x12	; 18
    170e:	80 e4       	ldi	r24, 0x40	; 64
    1710:	7f db       	rcall	.-2306   	; 0xe10 <TWI_send_string>
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	1e c0       	rjmp	.+60     	; 0x1752 <USART_DecodeCommandRxFIFO+0xae>
    1716:	d0 91 00 00 	lds	r29, 0x0000
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	80 91 11 01 	lds	r24, 0x0111
    1722:	90 91 12 01 	lds	r25, 0x0112
    1726:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    172a:	88 23       	and	r24, r24
    172c:	31 f0       	breq	.+12     	; 0x173a <USART_DecodeCommandRxFIFO+0x96>
    172e:	63 e6       	ldi	r22, 0x63	; 99
    1730:	72 e1       	ldi	r23, 0x12	; 18
    1732:	80 e4       	ldi	r24, 0x40	; 64
    1734:	6d db       	rcall	.-2342   	; 0xe10 <TWI_send_string>
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	0c c0       	rjmp	.+24     	; 0x1752 <USART_DecodeCommandRxFIFO+0xae>
    173a:	40 91 00 00 	lds	r20, 0x0000
    173e:	6d 2f       	mov	r22, r29
    1740:	8c 2f       	mov	r24, r28
    1742:	1e db       	rcall	.-2500   	; 0xd80 <TWI_send_command>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <USART_DecodeCommandRxFIFO+0xae>
    1748:	67 e8       	ldi	r22, 0x87	; 135
    174a:	72 e1       	ldi	r23, 0x12	; 18
    174c:	80 e4       	ldi	r24, 0x40	; 64
    174e:	60 db       	rcall	.-2368   	; 0xe10 <TWI_send_string>
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <USART_DecodeValueFIFO>:
    1758:	ef 92       	push	r14
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	00 d0       	rcall	.+0      	; 0x1766 <USART_DecodeValueFIFO+0xe>
    1766:	00 d0       	rcall	.+0      	; 0x1768 <USART_DecodeValueFIFO+0x10>
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	80 91 11 01 	lds	r24, 0x0111
    1774:	90 91 12 01 	lds	r25, 0x0112
    1778:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    177c:	88 23       	and	r24, r24
    177e:	31 f0       	breq	.+12     	; 0x178c <USART_DecodeValueFIFO+0x34>
    1780:	62 ef       	ldi	r22, 0xF2	; 242
    1782:	71 e1       	ldi	r23, 0x11	; 17
    1784:	80 e4       	ldi	r24, 0x40	; 64
    1786:	44 db       	rcall	.-2424   	; 0xe10 <TWI_send_string>
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	32 c0       	rjmp	.+100    	; 0x17f0 <USART_DecodeValueFIFO+0x98>
    178c:	80 91 00 00 	lds	r24, 0x0000
    1790:	84 30       	cpi	r24, 0x04	; 4
    1792:	59 f5       	brne	.+86     	; 0x17ea <USART_DecodeValueFIFO+0x92>
    1794:	8e 01       	movw	r16, r28
    1796:	0f 5f       	subi	r16, 0xFF	; 255
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	7e 01       	movw	r14, r28
    179c:	85 e0       	ldi	r24, 0x05	; 5
    179e:	e8 0e       	add	r14, r24
    17a0:	f1 1c       	adc	r15, r1
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	80 91 11 01 	lds	r24, 0x0111
    17aa:	90 91 12 01 	lds	r25, 0x0112
    17ae:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    17b2:	81 11       	cpse	r24, r1
    17b4:	1c c0       	rjmp	.+56     	; 0x17ee <USART_DecodeValueFIFO+0x96>
    17b6:	e0 e0       	ldi	r30, 0x00	; 0
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	d8 01       	movw	r26, r16
    17be:	8d 93       	st	X+, r24
    17c0:	8d 01       	movw	r16, r26
    17c2:	60 81       	ld	r22, Z
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	2c d2       	rcall	.+1112   	; 0x1c24 <__floatunsisf>
    17cc:	ab 01       	movw	r20, r22
    17ce:	bc 01       	movw	r22, r24
    17d0:	80 e8       	ldi	r24, 0x80	; 128
    17d2:	a2 db       	rcall	.-2236   	; 0xf18 <TWI_send_float>
    17d4:	0e 15       	cp	r16, r14
    17d6:	1f 05       	cpc	r17, r15
    17d8:	21 f7       	brne	.-56     	; 0x17a2 <USART_DecodeValueFIFO+0x4a>
    17da:	49 81       	ldd	r20, Y+1	; 0x01
    17dc:	5a 81       	ldd	r21, Y+2	; 0x02
    17de:	6b 81       	ldd	r22, Y+3	; 0x03
    17e0:	7c 81       	ldd	r23, Y+4	; 0x04
    17e2:	80 e8       	ldi	r24, 0x80	; 128
    17e4:	99 db       	rcall	.-2254   	; 0xf18 <TWI_send_float>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <USART_DecodeValueFIFO+0x98>
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <USART_DecodeValueFIFO+0x98>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	08 95       	ret

00001806 <USART_DecodeReadyFIFO>:
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	80 91 11 01 	lds	r24, 0x0111
    180e:	90 91 12 01 	lds	r25, 0x0112
    1812:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    1816:	88 23       	and	r24, r24
    1818:	31 f0       	breq	.+12     	; 0x1826 <USART_DecodeReadyFIFO+0x20>
    181a:	62 ef       	ldi	r22, 0xF2	; 242
    181c:	71 e1       	ldi	r23, 0x11	; 17
    181e:	80 e4       	ldi	r24, 0x40	; 64
    1820:	f7 da       	rcall	.-2578   	; 0xe10 <TWI_send_string>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	08 95       	ret
    1826:	80 91 00 00 	lds	r24, 0x0000
    182a:	81 11       	cpse	r24, r1
    182c:	05 c0       	rjmp	.+10     	; 0x1838 <USART_DecodeReadyFIFO+0x32>
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 93 c1 12 	sts	0x12C1, r24
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	08 95       	ret
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	08 95       	ret

0000183c <USART_ready>:
    183c:	80 91 c1 12 	lds	r24, 0x12C1
    1840:	88 23       	and	r24, r24
    1842:	21 f0       	breq	.+8      	; 0x184c <USART_ready+0x10>
    1844:	10 92 c1 12 	sts	0x12C1, r1
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	08 95       	ret
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	08 95       	ret

00001850 <USART_DecodeRxFIFO>:
    1850:	1c c0       	rjmp	.+56     	; 0x188a <USART_DecodeRxFIFO+0x3a>
    1852:	80 91 00 00 	lds	r24, 0x0000
    1856:	8d 34       	cpi	r24, 0x4D	; 77
    1858:	49 f0       	breq	.+18     	; 0x186c <USART_DecodeRxFIFO+0x1c>
    185a:	18 f4       	brcc	.+6      	; 0x1862 <USART_DecodeRxFIFO+0x12>
    185c:	83 34       	cpi	r24, 0x43	; 67
    185e:	a9 f4       	brne	.+42     	; 0x188a <USART_DecodeRxFIFO+0x3a>
    1860:	09 c0       	rjmp	.+18     	; 0x1874 <USART_DecodeRxFIFO+0x24>
    1862:	82 35       	cpi	r24, 0x52	; 82
    1864:	79 f0       	breq	.+30     	; 0x1884 <USART_DecodeRxFIFO+0x34>
    1866:	86 35       	cpi	r24, 0x56	; 86
    1868:	81 f4       	brne	.+32     	; 0x188a <USART_DecodeRxFIFO+0x3a>
    186a:	08 c0       	rjmp	.+16     	; 0x187c <USART_DecodeRxFIFO+0x2c>
    186c:	a5 de       	rcall	.-694    	; 0x15b8 <USART_DecodeMessageRxFIFO>
    186e:	88 23       	and	r24, r24
    1870:	61 f0       	breq	.+24     	; 0x188a <USART_DecodeRxFIFO+0x3a>
    1872:	08 95       	ret
    1874:	17 df       	rcall	.-466    	; 0x16a4 <USART_DecodeCommandRxFIFO>
    1876:	88 23       	and	r24, r24
    1878:	41 f0       	breq	.+16     	; 0x188a <USART_DecodeRxFIFO+0x3a>
    187a:	08 95       	ret
    187c:	6d df       	rcall	.-294    	; 0x1758 <USART_DecodeValueFIFO>
    187e:	88 23       	and	r24, r24
    1880:	21 f0       	breq	.+8      	; 0x188a <USART_DecodeRxFIFO+0x3a>
    1882:	08 95       	ret
    1884:	c0 df       	rcall	.-128    	; 0x1806 <USART_DecodeReadyFIFO>
    1886:	81 11       	cpse	r24, r1
    1888:	0a c0       	rjmp	.+20     	; 0x189e <USART_DecodeRxFIFO+0x4e>
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	80 91 11 01 	lds	r24, 0x0111
    1892:	90 91 12 01 	lds	r25, 0x0112
    1896:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    189a:	88 23       	and	r24, r24
    189c:	d1 f2       	breq	.-76     	; 0x1852 <USART_DecodeRxFIFO+0x2>
    189e:	08 95       	ret

000018a0 <__vector_20>:
}


ISR (USART0_RX_vect)
{
    18a0:	1f 92       	push	r1
    18a2:	0f 92       	push	r0
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	0f 92       	push	r0
    18a8:	11 24       	eor	r1, r1
    18aa:	0b b6       	in	r0, 0x3b	; 59
    18ac:	0f 92       	push	r0
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	2f 93       	push	r18
    18b8:	3f 93       	push	r19
    18ba:	4f 93       	push	r20
    18bc:	5f 93       	push	r21
    18be:	6f 93       	push	r22
    18c0:	7f 93       	push	r23
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	af 93       	push	r26
    18c8:	bf 93       	push	r27
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    18d2:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    18d6:	2e 37       	cpi	r18, 0x7E	; 126
    18d8:	09 f0       	breq	.+2      	; 0x18dc <__vector_20+0x3c>
    18da:	3f c0       	rjmp	.+126    	; 0x195a <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    18dc:	80 91 c4 12 	lds	r24, 0x12C4
    18e0:	90 91 c5 12 	lds	r25, 0x12C5
    18e4:	84 30       	cpi	r24, 0x04	; 4
    18e6:	91 05       	cpc	r25, r1
    18e8:	40 f4       	brcc	.+16     	; 0x18fa <__vector_20+0x5a>
    18ea:	20 91 35 14 	lds	r18, 0x1435
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	2c 5f       	subi	r18, 0xFC	; 252
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	82 17       	cp	r24, r18
    18f6:	93 07       	cpc	r25, r19
    18f8:	59 f5       	brne	.+86     	; 0x1950 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    18fa:	80 91 c2 12 	lds	r24, 0x12C2
    18fe:	90 91 c3 12 	lds	r25, 0x12C3
    1902:	89 2b       	or	r24, r25
    1904:	21 f0       	breq	.+8      	; 0x190e <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1906:	10 92 c3 12 	sts	0x12C3, r1
    190a:	10 92 c2 12 	sts	0x12C2, r1
    190e:	04 e3       	ldi	r16, 0x34	; 52
    1910:	14 e1       	ldi	r17, 0x14	; 20
			}
			
			//USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1912:	c0 e0       	ldi	r28, 0x00	; 0
    1914:	d0 e0       	ldi	r29, 0x00	; 0
    1916:	0f 2e       	mov	r0, r31
    1918:	f5 e3       	ldi	r31, 0x35	; 53
    191a:	ef 2e       	mov	r14, r31
    191c:	f4 e1       	ldi	r31, 0x14	; 20
    191e:	ff 2e       	mov	r15, r31
    1920:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1922:	f8 01       	movw	r30, r16
    1924:	61 91       	ld	r22, Z+
    1926:	8f 01       	movw	r16, r30
    1928:	80 91 11 01 	lds	r24, 0x0111
    192c:	90 91 12 01 	lds	r25, 0x0112
    1930:	0e 94 f6 01 	call	0x3ec	; 0x3ec <FifoWrite>
    1934:	88 23       	and	r24, r24
    1936:	21 f0       	breq	.+8      	; 0x1940 <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1938:	6e ea       	ldi	r22, 0xAE	; 174
    193a:	72 e1       	ldi	r23, 0x12	; 18
    193c:	80 e4       	ldi	r24, 0x40	; 64
    193e:	68 da       	rcall	.-2864   	; 0xe10 <TWI_send_string>
			}
			
			//USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1940:	21 96       	adiw	r28, 0x01	; 1
    1942:	f7 01       	movw	r30, r14
    1944:	80 81       	ld	r24, Z
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 96       	adiw	r24, 0x02	; 2
    194a:	c8 17       	cp	r28, r24
    194c:	d9 07       	cpc	r29, r25
    194e:	4c f3       	brlt	.-46     	; 0x1922 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1950:	10 92 c5 12 	sts	0x12C5, r1
    1954:	10 92 c4 12 	sts	0x12C4, r1
    1958:	16 c0       	rjmp	.+44     	; 0x1986 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    195a:	2d 37       	cpi	r18, 0x7D	; 125
    195c:	39 f4       	brne	.+14     	; 0x196c <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	90 93 c3 12 	sts	0x12C3, r25
    1966:	80 93 c2 12 	sts	0x12C2, r24
    196a:	0d c0       	rjmp	.+26     	; 0x1986 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    196c:	80 91 c4 12 	lds	r24, 0x12C4
    1970:	90 91 c5 12 	lds	r25, 0x12C5
    1974:	fc 01       	movw	r30, r24
    1976:	ec 5c       	subi	r30, 0xCC	; 204
    1978:	fb 4e       	sbci	r31, 0xEB	; 235
    197a:	20 83       	st	Z, r18
		++gRxBufferIndex;
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	90 93 c5 12 	sts	0x12C5, r25
    1982:	80 93 c4 12 	sts	0x12C4, r24
	}
	
	
}
    1986:	ff 91       	pop	r31
    1988:	ef 91       	pop	r30
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	7f 91       	pop	r23
    1998:	6f 91       	pop	r22
    199a:	5f 91       	pop	r21
    199c:	4f 91       	pop	r20
    199e:	3f 91       	pop	r19
    19a0:	2f 91       	pop	r18
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	0f 90       	pop	r0
    19ac:	0b be       	out	0x3b, r0	; 59
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    19b8:	80 93 39 16 	sts	0x1639, r24
	gTxPayload[1] = rotation;
    19bc:	60 93 3a 16 	sts	0x163A, r22
	gTxPayload[2] = speed;
    19c0:	40 93 3b 16 	sts	0x163B, r20
	
	
	USART_SendPacket('C', 3);
    19c4:	63 e0       	ldi	r22, 0x03	; 3
    19c6:	83 e4       	ldi	r24, 0x43	; 67
    19c8:	85 cd       	rjmp	.-1270   	; 0x14d4 <USART_SendPacket>

000019ca <__subsf3>:
    19ca:	50 58       	subi	r21, 0x80	; 128

000019cc <__addsf3>:
    19cc:	bb 27       	eor	r27, r27
    19ce:	aa 27       	eor	r26, r26
    19d0:	0e d0       	rcall	.+28     	; 0x19ee <__addsf3x>
    19d2:	ed c1       	rjmp	.+986    	; 0x1dae <__fp_round>
    19d4:	b6 d1       	rcall	.+876    	; 0x1d42 <__fp_pscA>
    19d6:	30 f0       	brcs	.+12     	; 0x19e4 <__addsf3+0x18>
    19d8:	bb d1       	rcall	.+886    	; 0x1d50 <__fp_pscB>
    19da:	20 f0       	brcs	.+8      	; 0x19e4 <__addsf3+0x18>
    19dc:	31 f4       	brne	.+12     	; 0x19ea <__addsf3+0x1e>
    19de:	9f 3f       	cpi	r25, 0xFF	; 255
    19e0:	11 f4       	brne	.+4      	; 0x19e6 <__addsf3+0x1a>
    19e2:	1e f4       	brtc	.+6      	; 0x19ea <__addsf3+0x1e>
    19e4:	86 c1       	rjmp	.+780    	; 0x1cf2 <__fp_nan>
    19e6:	0e f4       	brtc	.+2      	; 0x19ea <__addsf3+0x1e>
    19e8:	e0 95       	com	r30
    19ea:	e7 fb       	bst	r30, 7
    19ec:	7c c1       	rjmp	.+760    	; 0x1ce6 <__fp_inf>

000019ee <__addsf3x>:
    19ee:	e9 2f       	mov	r30, r25
    19f0:	00 d2       	rcall	.+1024   	; 0x1df2 <__fp_split3>
    19f2:	80 f3       	brcs	.-32     	; 0x19d4 <__addsf3+0x8>
    19f4:	ba 17       	cp	r27, r26
    19f6:	62 07       	cpc	r22, r18
    19f8:	73 07       	cpc	r23, r19
    19fa:	84 07       	cpc	r24, r20
    19fc:	95 07       	cpc	r25, r21
    19fe:	18 f0       	brcs	.+6      	; 0x1a06 <__addsf3x+0x18>
    1a00:	71 f4       	brne	.+28     	; 0x1a1e <__addsf3x+0x30>
    1a02:	9e f5       	brtc	.+102    	; 0x1a6a <__addsf3x+0x7c>
    1a04:	18 c2       	rjmp	.+1072   	; 0x1e36 <__fp_zero>
    1a06:	0e f4       	brtc	.+2      	; 0x1a0a <__addsf3x+0x1c>
    1a08:	e0 95       	com	r30
    1a0a:	0b 2e       	mov	r0, r27
    1a0c:	ba 2f       	mov	r27, r26
    1a0e:	a0 2d       	mov	r26, r0
    1a10:	0b 01       	movw	r0, r22
    1a12:	b9 01       	movw	r22, r18
    1a14:	90 01       	movw	r18, r0
    1a16:	0c 01       	movw	r0, r24
    1a18:	ca 01       	movw	r24, r20
    1a1a:	a0 01       	movw	r20, r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	ff 27       	eor	r31, r31
    1a20:	59 1b       	sub	r21, r25
    1a22:	99 f0       	breq	.+38     	; 0x1a4a <__addsf3x+0x5c>
    1a24:	59 3f       	cpi	r21, 0xF9	; 249
    1a26:	50 f4       	brcc	.+20     	; 0x1a3c <__addsf3x+0x4e>
    1a28:	50 3e       	cpi	r21, 0xE0	; 224
    1a2a:	68 f1       	brcs	.+90     	; 0x1a86 <__addsf3x+0x98>
    1a2c:	1a 16       	cp	r1, r26
    1a2e:	f0 40       	sbci	r31, 0x00	; 0
    1a30:	a2 2f       	mov	r26, r18
    1a32:	23 2f       	mov	r18, r19
    1a34:	34 2f       	mov	r19, r20
    1a36:	44 27       	eor	r20, r20
    1a38:	58 5f       	subi	r21, 0xF8	; 248
    1a3a:	f3 cf       	rjmp	.-26     	; 0x1a22 <__addsf3x+0x34>
    1a3c:	46 95       	lsr	r20
    1a3e:	37 95       	ror	r19
    1a40:	27 95       	ror	r18
    1a42:	a7 95       	ror	r26
    1a44:	f0 40       	sbci	r31, 0x00	; 0
    1a46:	53 95       	inc	r21
    1a48:	c9 f7       	brne	.-14     	; 0x1a3c <__addsf3x+0x4e>
    1a4a:	7e f4       	brtc	.+30     	; 0x1a6a <__addsf3x+0x7c>
    1a4c:	1f 16       	cp	r1, r31
    1a4e:	ba 0b       	sbc	r27, r26
    1a50:	62 0b       	sbc	r22, r18
    1a52:	73 0b       	sbc	r23, r19
    1a54:	84 0b       	sbc	r24, r20
    1a56:	ba f0       	brmi	.+46     	; 0x1a86 <__addsf3x+0x98>
    1a58:	91 50       	subi	r25, 0x01	; 1
    1a5a:	a1 f0       	breq	.+40     	; 0x1a84 <__addsf3x+0x96>
    1a5c:	ff 0f       	add	r31, r31
    1a5e:	bb 1f       	adc	r27, r27
    1a60:	66 1f       	adc	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	c2 f7       	brpl	.-16     	; 0x1a58 <__addsf3x+0x6a>
    1a68:	0e c0       	rjmp	.+28     	; 0x1a86 <__addsf3x+0x98>
    1a6a:	ba 0f       	add	r27, r26
    1a6c:	62 1f       	adc	r22, r18
    1a6e:	73 1f       	adc	r23, r19
    1a70:	84 1f       	adc	r24, r20
    1a72:	48 f4       	brcc	.+18     	; 0x1a86 <__addsf3x+0x98>
    1a74:	87 95       	ror	r24
    1a76:	77 95       	ror	r23
    1a78:	67 95       	ror	r22
    1a7a:	b7 95       	ror	r27
    1a7c:	f7 95       	ror	r31
    1a7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a80:	08 f0       	brcs	.+2      	; 0x1a84 <__addsf3x+0x96>
    1a82:	b3 cf       	rjmp	.-154    	; 0x19ea <__addsf3+0x1e>
    1a84:	93 95       	inc	r25
    1a86:	88 0f       	add	r24, r24
    1a88:	08 f0       	brcs	.+2      	; 0x1a8c <__addsf3x+0x9e>
    1a8a:	99 27       	eor	r25, r25
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	97 95       	ror	r25
    1a90:	87 95       	ror	r24
    1a92:	08 95       	ret

00001a94 <atan>:
    1a94:	df 93       	push	r29
    1a96:	dd 27       	eor	r29, r29
    1a98:	b9 2f       	mov	r27, r25
    1a9a:	bf 77       	andi	r27, 0x7F	; 127
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	16 16       	cp	r1, r22
    1aa2:	17 06       	cpc	r1, r23
    1aa4:	48 07       	cpc	r20, r24
    1aa6:	5b 07       	cpc	r21, r27
    1aa8:	10 f4       	brcc	.+4      	; 0x1aae <atan+0x1a>
    1aaa:	d9 2f       	mov	r29, r25
    1aac:	cf d1       	rcall	.+926    	; 0x1e4c <inverse>
    1aae:	9f 93       	push	r25
    1ab0:	8f 93       	push	r24
    1ab2:	7f 93       	push	r23
    1ab4:	6f 93       	push	r22
    1ab6:	34 d2       	rcall	.+1128   	; 0x1f20 <square>
    1ab8:	ec e8       	ldi	r30, 0x8C	; 140
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	1d d1       	rcall	.+570    	; 0x1cf8 <__fp_powser>
    1abe:	77 d1       	rcall	.+750    	; 0x1dae <__fp_round>
    1ac0:	2f 91       	pop	r18
    1ac2:	3f 91       	pop	r19
    1ac4:	4f 91       	pop	r20
    1ac6:	5f 91       	pop	r21
    1ac8:	d4 d1       	rcall	.+936    	; 0x1e72 <__mulsf3x>
    1aca:	dd 23       	and	r29, r29
    1acc:	49 f0       	breq	.+18     	; 0x1ae0 <atan+0x4c>
    1ace:	90 58       	subi	r25, 0x80	; 128
    1ad0:	a2 ea       	ldi	r26, 0xA2	; 162
    1ad2:	2a ed       	ldi	r18, 0xDA	; 218
    1ad4:	3f e0       	ldi	r19, 0x0F	; 15
    1ad6:	49 ec       	ldi	r20, 0xC9	; 201
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	d0 78       	andi	r29, 0x80	; 128
    1adc:	5d 27       	eor	r21, r29
    1ade:	87 df       	rcall	.-242    	; 0x19ee <__addsf3x>
    1ae0:	df 91       	pop	r29
    1ae2:	65 c1       	rjmp	.+714    	; 0x1dae <__fp_round>

00001ae4 <__cmpsf2>:
    1ae4:	dc d0       	rcall	.+440    	; 0x1c9e <__fp_cmp>
    1ae6:	08 f4       	brcc	.+2      	; 0x1aea <__cmpsf2+0x6>
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	08 95       	ret

00001aec <cos>:
    1aec:	39 d1       	rcall	.+626    	; 0x1d60 <__fp_rempio2>
    1aee:	e3 95       	inc	r30
    1af0:	6f c1       	rjmp	.+734    	; 0x1dd0 <__fp_sinus>

00001af2 <__divsf3>:
    1af2:	0c d0       	rcall	.+24     	; 0x1b0c <__divsf3x>
    1af4:	5c c1       	rjmp	.+696    	; 0x1dae <__fp_round>
    1af6:	2c d1       	rcall	.+600    	; 0x1d50 <__fp_pscB>
    1af8:	40 f0       	brcs	.+16     	; 0x1b0a <__divsf3+0x18>
    1afa:	23 d1       	rcall	.+582    	; 0x1d42 <__fp_pscA>
    1afc:	30 f0       	brcs	.+12     	; 0x1b0a <__divsf3+0x18>
    1afe:	21 f4       	brne	.+8      	; 0x1b08 <__divsf3+0x16>
    1b00:	5f 3f       	cpi	r21, 0xFF	; 255
    1b02:	19 f0       	breq	.+6      	; 0x1b0a <__divsf3+0x18>
    1b04:	f0 c0       	rjmp	.+480    	; 0x1ce6 <__fp_inf>
    1b06:	51 11       	cpse	r21, r1
    1b08:	97 c1       	rjmp	.+814    	; 0x1e38 <__fp_szero>
    1b0a:	f3 c0       	rjmp	.+486    	; 0x1cf2 <__fp_nan>

00001b0c <__divsf3x>:
    1b0c:	72 d1       	rcall	.+740    	; 0x1df2 <__fp_split3>
    1b0e:	98 f3       	brcs	.-26     	; 0x1af6 <__divsf3+0x4>

00001b10 <__divsf3_pse>:
    1b10:	99 23       	and	r25, r25
    1b12:	c9 f3       	breq	.-14     	; 0x1b06 <__divsf3+0x14>
    1b14:	55 23       	and	r21, r21
    1b16:	b1 f3       	breq	.-20     	; 0x1b04 <__divsf3+0x12>
    1b18:	95 1b       	sub	r25, r21
    1b1a:	55 0b       	sbc	r21, r21
    1b1c:	bb 27       	eor	r27, r27
    1b1e:	aa 27       	eor	r26, r26
    1b20:	62 17       	cp	r22, r18
    1b22:	73 07       	cpc	r23, r19
    1b24:	84 07       	cpc	r24, r20
    1b26:	38 f0       	brcs	.+14     	; 0x1b36 <__divsf3_pse+0x26>
    1b28:	9f 5f       	subi	r25, 0xFF	; 255
    1b2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2c:	22 0f       	add	r18, r18
    1b2e:	33 1f       	adc	r19, r19
    1b30:	44 1f       	adc	r20, r20
    1b32:	aa 1f       	adc	r26, r26
    1b34:	a9 f3       	breq	.-22     	; 0x1b20 <__divsf3_pse+0x10>
    1b36:	33 d0       	rcall	.+102    	; 0x1b9e <__divsf3_pse+0x8e>
    1b38:	0e 2e       	mov	r0, r30
    1b3a:	3a f0       	brmi	.+14     	; 0x1b4a <__divsf3_pse+0x3a>
    1b3c:	e0 e8       	ldi	r30, 0x80	; 128
    1b3e:	30 d0       	rcall	.+96     	; 0x1ba0 <__divsf3_pse+0x90>
    1b40:	91 50       	subi	r25, 0x01	; 1
    1b42:	50 40       	sbci	r21, 0x00	; 0
    1b44:	e6 95       	lsr	r30
    1b46:	00 1c       	adc	r0, r0
    1b48:	ca f7       	brpl	.-14     	; 0x1b3c <__divsf3_pse+0x2c>
    1b4a:	29 d0       	rcall	.+82     	; 0x1b9e <__divsf3_pse+0x8e>
    1b4c:	fe 2f       	mov	r31, r30
    1b4e:	27 d0       	rcall	.+78     	; 0x1b9e <__divsf3_pse+0x8e>
    1b50:	66 0f       	add	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	88 1f       	adc	r24, r24
    1b56:	bb 1f       	adc	r27, r27
    1b58:	26 17       	cp	r18, r22
    1b5a:	37 07       	cpc	r19, r23
    1b5c:	48 07       	cpc	r20, r24
    1b5e:	ab 07       	cpc	r26, r27
    1b60:	b0 e8       	ldi	r27, 0x80	; 128
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <__divsf3_pse+0x56>
    1b64:	bb 0b       	sbc	r27, r27
    1b66:	80 2d       	mov	r24, r0
    1b68:	bf 01       	movw	r22, r30
    1b6a:	ff 27       	eor	r31, r31
    1b6c:	93 58       	subi	r25, 0x83	; 131
    1b6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b70:	2a f0       	brmi	.+10     	; 0x1b7c <__divsf3_pse+0x6c>
    1b72:	9e 3f       	cpi	r25, 0xFE	; 254
    1b74:	51 05       	cpc	r21, r1
    1b76:	68 f0       	brcs	.+26     	; 0x1b92 <__divsf3_pse+0x82>
    1b78:	b6 c0       	rjmp	.+364    	; 0x1ce6 <__fp_inf>
    1b7a:	5e c1       	rjmp	.+700    	; 0x1e38 <__fp_szero>
    1b7c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b7e:	ec f3       	brlt	.-6      	; 0x1b7a <__divsf3_pse+0x6a>
    1b80:	98 3e       	cpi	r25, 0xE8	; 232
    1b82:	dc f3       	brlt	.-10     	; 0x1b7a <__divsf3_pse+0x6a>
    1b84:	86 95       	lsr	r24
    1b86:	77 95       	ror	r23
    1b88:	67 95       	ror	r22
    1b8a:	b7 95       	ror	r27
    1b8c:	f7 95       	ror	r31
    1b8e:	9f 5f       	subi	r25, 0xFF	; 255
    1b90:	c9 f7       	brne	.-14     	; 0x1b84 <__divsf3_pse+0x74>
    1b92:	88 0f       	add	r24, r24
    1b94:	91 1d       	adc	r25, r1
    1b96:	96 95       	lsr	r25
    1b98:	87 95       	ror	r24
    1b9a:	97 f9       	bld	r25, 7
    1b9c:	08 95       	ret
    1b9e:	e1 e0       	ldi	r30, 0x01	; 1
    1ba0:	66 0f       	add	r22, r22
    1ba2:	77 1f       	adc	r23, r23
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	bb 1f       	adc	r27, r27
    1ba8:	62 17       	cp	r22, r18
    1baa:	73 07       	cpc	r23, r19
    1bac:	84 07       	cpc	r24, r20
    1bae:	ba 07       	cpc	r27, r26
    1bb0:	20 f0       	brcs	.+8      	; 0x1bba <__divsf3_pse+0xaa>
    1bb2:	62 1b       	sub	r22, r18
    1bb4:	73 0b       	sbc	r23, r19
    1bb6:	84 0b       	sbc	r24, r20
    1bb8:	ba 0b       	sbc	r27, r26
    1bba:	ee 1f       	adc	r30, r30
    1bbc:	88 f7       	brcc	.-30     	; 0x1ba0 <__divsf3_pse+0x90>
    1bbe:	e0 95       	com	r30
    1bc0:	08 95       	ret

00001bc2 <__fixsfsi>:
    1bc2:	04 d0       	rcall	.+8      	; 0x1bcc <__fixunssfsi>
    1bc4:	68 94       	set
    1bc6:	b1 11       	cpse	r27, r1
    1bc8:	37 c1       	rjmp	.+622    	; 0x1e38 <__fp_szero>
    1bca:	08 95       	ret

00001bcc <__fixunssfsi>:
    1bcc:	1a d1       	rcall	.+564    	; 0x1e02 <__fp_splitA>
    1bce:	88 f0       	brcs	.+34     	; 0x1bf2 <__fixunssfsi+0x26>
    1bd0:	9f 57       	subi	r25, 0x7F	; 127
    1bd2:	90 f0       	brcs	.+36     	; 0x1bf8 <__fixunssfsi+0x2c>
    1bd4:	b9 2f       	mov	r27, r25
    1bd6:	99 27       	eor	r25, r25
    1bd8:	b7 51       	subi	r27, 0x17	; 23
    1bda:	a0 f0       	brcs	.+40     	; 0x1c04 <__fixunssfsi+0x38>
    1bdc:	d1 f0       	breq	.+52     	; 0x1c12 <__fixunssfsi+0x46>
    1bde:	66 0f       	add	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	88 1f       	adc	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	1a f0       	brmi	.+6      	; 0x1bee <__fixunssfsi+0x22>
    1be8:	ba 95       	dec	r27
    1bea:	c9 f7       	brne	.-14     	; 0x1bde <__fixunssfsi+0x12>
    1bec:	12 c0       	rjmp	.+36     	; 0x1c12 <__fixunssfsi+0x46>
    1bee:	b1 30       	cpi	r27, 0x01	; 1
    1bf0:	81 f0       	breq	.+32     	; 0x1c12 <__fixunssfsi+0x46>
    1bf2:	21 d1       	rcall	.+578    	; 0x1e36 <__fp_zero>
    1bf4:	b1 e0       	ldi	r27, 0x01	; 1
    1bf6:	08 95       	ret
    1bf8:	1e c1       	rjmp	.+572    	; 0x1e36 <__fp_zero>
    1bfa:	67 2f       	mov	r22, r23
    1bfc:	78 2f       	mov	r23, r24
    1bfe:	88 27       	eor	r24, r24
    1c00:	b8 5f       	subi	r27, 0xF8	; 248
    1c02:	39 f0       	breq	.+14     	; 0x1c12 <__fixunssfsi+0x46>
    1c04:	b9 3f       	cpi	r27, 0xF9	; 249
    1c06:	cc f3       	brlt	.-14     	; 0x1bfa <__fixunssfsi+0x2e>
    1c08:	86 95       	lsr	r24
    1c0a:	77 95       	ror	r23
    1c0c:	67 95       	ror	r22
    1c0e:	b3 95       	inc	r27
    1c10:	d9 f7       	brne	.-10     	; 0x1c08 <__fixunssfsi+0x3c>
    1c12:	3e f4       	brtc	.+14     	; 0x1c22 <__fixunssfsi+0x56>
    1c14:	90 95       	com	r25
    1c16:	80 95       	com	r24
    1c18:	70 95       	com	r23
    1c1a:	61 95       	neg	r22
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c20:	9f 4f       	sbci	r25, 0xFF	; 255
    1c22:	08 95       	ret

00001c24 <__floatunsisf>:
    1c24:	e8 94       	clt
    1c26:	09 c0       	rjmp	.+18     	; 0x1c3a <__floatsisf+0x12>

00001c28 <__floatsisf>:
    1c28:	97 fb       	bst	r25, 7
    1c2a:	3e f4       	brtc	.+14     	; 0x1c3a <__floatsisf+0x12>
    1c2c:	90 95       	com	r25
    1c2e:	80 95       	com	r24
    1c30:	70 95       	com	r23
    1c32:	61 95       	neg	r22
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	8f 4f       	sbci	r24, 0xFF	; 255
    1c38:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3a:	99 23       	and	r25, r25
    1c3c:	a9 f0       	breq	.+42     	; 0x1c68 <__floatsisf+0x40>
    1c3e:	f9 2f       	mov	r31, r25
    1c40:	96 e9       	ldi	r25, 0x96	; 150
    1c42:	bb 27       	eor	r27, r27
    1c44:	93 95       	inc	r25
    1c46:	f6 95       	lsr	r31
    1c48:	87 95       	ror	r24
    1c4a:	77 95       	ror	r23
    1c4c:	67 95       	ror	r22
    1c4e:	b7 95       	ror	r27
    1c50:	f1 11       	cpse	r31, r1
    1c52:	f8 cf       	rjmp	.-16     	; 0x1c44 <__floatsisf+0x1c>
    1c54:	fa f4       	brpl	.+62     	; 0x1c94 <__floatsisf+0x6c>
    1c56:	bb 0f       	add	r27, r27
    1c58:	11 f4       	brne	.+4      	; 0x1c5e <__floatsisf+0x36>
    1c5a:	60 ff       	sbrs	r22, 0
    1c5c:	1b c0       	rjmp	.+54     	; 0x1c94 <__floatsisf+0x6c>
    1c5e:	6f 5f       	subi	r22, 0xFF	; 255
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	8f 4f       	sbci	r24, 0xFF	; 255
    1c64:	9f 4f       	sbci	r25, 0xFF	; 255
    1c66:	16 c0       	rjmp	.+44     	; 0x1c94 <__floatsisf+0x6c>
    1c68:	88 23       	and	r24, r24
    1c6a:	11 f0       	breq	.+4      	; 0x1c70 <__floatsisf+0x48>
    1c6c:	96 e9       	ldi	r25, 0x96	; 150
    1c6e:	11 c0       	rjmp	.+34     	; 0x1c92 <__floatsisf+0x6a>
    1c70:	77 23       	and	r23, r23
    1c72:	21 f0       	breq	.+8      	; 0x1c7c <__floatsisf+0x54>
    1c74:	9e e8       	ldi	r25, 0x8E	; 142
    1c76:	87 2f       	mov	r24, r23
    1c78:	76 2f       	mov	r23, r22
    1c7a:	05 c0       	rjmp	.+10     	; 0x1c86 <__floatsisf+0x5e>
    1c7c:	66 23       	and	r22, r22
    1c7e:	71 f0       	breq	.+28     	; 0x1c9c <__floatsisf+0x74>
    1c80:	96 e8       	ldi	r25, 0x86	; 134
    1c82:	86 2f       	mov	r24, r22
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	2a f0       	brmi	.+10     	; 0x1c94 <__floatsisf+0x6c>
    1c8a:	9a 95       	dec	r25
    1c8c:	66 0f       	add	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	88 1f       	adc	r24, r24
    1c92:	da f7       	brpl	.-10     	; 0x1c8a <__floatsisf+0x62>
    1c94:	88 0f       	add	r24, r24
    1c96:	96 95       	lsr	r25
    1c98:	87 95       	ror	r24
    1c9a:	97 f9       	bld	r25, 7
    1c9c:	08 95       	ret

00001c9e <__fp_cmp>:
    1c9e:	99 0f       	add	r25, r25
    1ca0:	00 08       	sbc	r0, r0
    1ca2:	55 0f       	add	r21, r21
    1ca4:	aa 0b       	sbc	r26, r26
    1ca6:	e0 e8       	ldi	r30, 0x80	; 128
    1ca8:	fe ef       	ldi	r31, 0xFE	; 254
    1caa:	16 16       	cp	r1, r22
    1cac:	17 06       	cpc	r1, r23
    1cae:	e8 07       	cpc	r30, r24
    1cb0:	f9 07       	cpc	r31, r25
    1cb2:	c0 f0       	brcs	.+48     	; 0x1ce4 <__fp_cmp+0x46>
    1cb4:	12 16       	cp	r1, r18
    1cb6:	13 06       	cpc	r1, r19
    1cb8:	e4 07       	cpc	r30, r20
    1cba:	f5 07       	cpc	r31, r21
    1cbc:	98 f0       	brcs	.+38     	; 0x1ce4 <__fp_cmp+0x46>
    1cbe:	62 1b       	sub	r22, r18
    1cc0:	73 0b       	sbc	r23, r19
    1cc2:	84 0b       	sbc	r24, r20
    1cc4:	95 0b       	sbc	r25, r21
    1cc6:	39 f4       	brne	.+14     	; 0x1cd6 <__fp_cmp+0x38>
    1cc8:	0a 26       	eor	r0, r26
    1cca:	61 f0       	breq	.+24     	; 0x1ce4 <__fp_cmp+0x46>
    1ccc:	23 2b       	or	r18, r19
    1cce:	24 2b       	or	r18, r20
    1cd0:	25 2b       	or	r18, r21
    1cd2:	21 f4       	brne	.+8      	; 0x1cdc <__fp_cmp+0x3e>
    1cd4:	08 95       	ret
    1cd6:	0a 26       	eor	r0, r26
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <__fp_cmp+0x3e>
    1cda:	a1 40       	sbci	r26, 0x01	; 1
    1cdc:	a6 95       	lsr	r26
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	81 1d       	adc	r24, r1
    1ce2:	81 1d       	adc	r24, r1
    1ce4:	08 95       	ret

00001ce6 <__fp_inf>:
    1ce6:	97 f9       	bld	r25, 7
    1ce8:	9f 67       	ori	r25, 0x7F	; 127
    1cea:	80 e8       	ldi	r24, 0x80	; 128
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	08 95       	ret

00001cf2 <__fp_nan>:
    1cf2:	9f ef       	ldi	r25, 0xFF	; 255
    1cf4:	80 ec       	ldi	r24, 0xC0	; 192
    1cf6:	08 95       	ret

00001cf8 <__fp_powser>:
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	1f 93       	push	r17
    1cfe:	0f 93       	push	r16
    1d00:	ff 92       	push	r15
    1d02:	ef 92       	push	r14
    1d04:	df 92       	push	r13
    1d06:	7b 01       	movw	r14, r22
    1d08:	8c 01       	movw	r16, r24
    1d0a:	68 94       	set
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <__fp_powser+0x20>
    1d0e:	da 2e       	mov	r13, r26
    1d10:	ef 01       	movw	r28, r30
    1d12:	af d0       	rcall	.+350    	; 0x1e72 <__mulsf3x>
    1d14:	fe 01       	movw	r30, r28
    1d16:	e8 94       	clt
    1d18:	a5 91       	lpm	r26, Z+
    1d1a:	25 91       	lpm	r18, Z+
    1d1c:	35 91       	lpm	r19, Z+
    1d1e:	45 91       	lpm	r20, Z+
    1d20:	55 91       	lpm	r21, Z+
    1d22:	ae f3       	brts	.-22     	; 0x1d0e <__fp_powser+0x16>
    1d24:	ef 01       	movw	r28, r30
    1d26:	63 de       	rcall	.-826    	; 0x19ee <__addsf3x>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	97 01       	movw	r18, r14
    1d2c:	a8 01       	movw	r20, r16
    1d2e:	da 94       	dec	r13
    1d30:	79 f7       	brne	.-34     	; 0x1d10 <__fp_powser+0x18>
    1d32:	df 90       	pop	r13
    1d34:	ef 90       	pop	r14
    1d36:	ff 90       	pop	r15
    1d38:	0f 91       	pop	r16
    1d3a:	1f 91       	pop	r17
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <__fp_pscA>:
    1d42:	00 24       	eor	r0, r0
    1d44:	0a 94       	dec	r0
    1d46:	16 16       	cp	r1, r22
    1d48:	17 06       	cpc	r1, r23
    1d4a:	18 06       	cpc	r1, r24
    1d4c:	09 06       	cpc	r0, r25
    1d4e:	08 95       	ret

00001d50 <__fp_pscB>:
    1d50:	00 24       	eor	r0, r0
    1d52:	0a 94       	dec	r0
    1d54:	12 16       	cp	r1, r18
    1d56:	13 06       	cpc	r1, r19
    1d58:	14 06       	cpc	r1, r20
    1d5a:	05 06       	cpc	r0, r21
    1d5c:	08 95       	ret
    1d5e:	c9 cf       	rjmp	.-110    	; 0x1cf2 <__fp_nan>

00001d60 <__fp_rempio2>:
    1d60:	50 d0       	rcall	.+160    	; 0x1e02 <__fp_splitA>
    1d62:	e8 f3       	brcs	.-6      	; 0x1d5e <__fp_pscB+0xe>
    1d64:	e8 94       	clt
    1d66:	e0 e0       	ldi	r30, 0x00	; 0
    1d68:	bb 27       	eor	r27, r27
    1d6a:	9f 57       	subi	r25, 0x7F	; 127
    1d6c:	f0 f0       	brcs	.+60     	; 0x1daa <__fp_rempio2+0x4a>
    1d6e:	2a ed       	ldi	r18, 0xDA	; 218
    1d70:	3f e0       	ldi	r19, 0x0F	; 15
    1d72:	49 ec       	ldi	r20, 0xC9	; 201
    1d74:	06 c0       	rjmp	.+12     	; 0x1d82 <__fp_rempio2+0x22>
    1d76:	ee 0f       	add	r30, r30
    1d78:	bb 0f       	add	r27, r27
    1d7a:	66 1f       	adc	r22, r22
    1d7c:	77 1f       	adc	r23, r23
    1d7e:	88 1f       	adc	r24, r24
    1d80:	28 f0       	brcs	.+10     	; 0x1d8c <__fp_rempio2+0x2c>
    1d82:	b2 3a       	cpi	r27, 0xA2	; 162
    1d84:	62 07       	cpc	r22, r18
    1d86:	73 07       	cpc	r23, r19
    1d88:	84 07       	cpc	r24, r20
    1d8a:	28 f0       	brcs	.+10     	; 0x1d96 <__fp_rempio2+0x36>
    1d8c:	b2 5a       	subi	r27, 0xA2	; 162
    1d8e:	62 0b       	sbc	r22, r18
    1d90:	73 0b       	sbc	r23, r19
    1d92:	84 0b       	sbc	r24, r20
    1d94:	e3 95       	inc	r30
    1d96:	9a 95       	dec	r25
    1d98:	72 f7       	brpl	.-36     	; 0x1d76 <__fp_rempio2+0x16>
    1d9a:	80 38       	cpi	r24, 0x80	; 128
    1d9c:	30 f4       	brcc	.+12     	; 0x1daa <__fp_rempio2+0x4a>
    1d9e:	9a 95       	dec	r25
    1da0:	bb 0f       	add	r27, r27
    1da2:	66 1f       	adc	r22, r22
    1da4:	77 1f       	adc	r23, r23
    1da6:	88 1f       	adc	r24, r24
    1da8:	d2 f7       	brpl	.-12     	; 0x1d9e <__fp_rempio2+0x3e>
    1daa:	90 48       	sbci	r25, 0x80	; 128
    1dac:	be c0       	rjmp	.+380    	; 0x1f2a <__fp_mpack_finite>

00001dae <__fp_round>:
    1dae:	09 2e       	mov	r0, r25
    1db0:	03 94       	inc	r0
    1db2:	00 0c       	add	r0, r0
    1db4:	11 f4       	brne	.+4      	; 0x1dba <__fp_round+0xc>
    1db6:	88 23       	and	r24, r24
    1db8:	52 f0       	brmi	.+20     	; 0x1dce <__fp_round+0x20>
    1dba:	bb 0f       	add	r27, r27
    1dbc:	40 f4       	brcc	.+16     	; 0x1dce <__fp_round+0x20>
    1dbe:	bf 2b       	or	r27, r31
    1dc0:	11 f4       	brne	.+4      	; 0x1dc6 <__fp_round+0x18>
    1dc2:	60 ff       	sbrs	r22, 0
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <__fp_round+0x20>
    1dc6:	6f 5f       	subi	r22, 0xFF	; 255
    1dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dca:	8f 4f       	sbci	r24, 0xFF	; 255
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	08 95       	ret

00001dd0 <__fp_sinus>:
    1dd0:	ef 93       	push	r30
    1dd2:	e0 ff       	sbrs	r30, 0
    1dd4:	06 c0       	rjmp	.+12     	; 0x1de2 <__fp_sinus+0x12>
    1dd6:	a2 ea       	ldi	r26, 0xA2	; 162
    1dd8:	2a ed       	ldi	r18, 0xDA	; 218
    1dda:	3f e0       	ldi	r19, 0x0F	; 15
    1ddc:	49 ec       	ldi	r20, 0xC9	; 201
    1dde:	5f eb       	ldi	r21, 0xBF	; 191
    1de0:	06 de       	rcall	.-1012   	; 0x19ee <__addsf3x>
    1de2:	e5 df       	rcall	.-54     	; 0x1dae <__fp_round>
    1de4:	0f 90       	pop	r0
    1de6:	03 94       	inc	r0
    1de8:	01 fc       	sbrc	r0, 1
    1dea:	90 58       	subi	r25, 0x80	; 128
    1dec:	e9 eb       	ldi	r30, 0xB9	; 185
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	a8 c0       	rjmp	.+336    	; 0x1f42 <__fp_powsodd>

00001df2 <__fp_split3>:
    1df2:	57 fd       	sbrc	r21, 7
    1df4:	90 58       	subi	r25, 0x80	; 128
    1df6:	44 0f       	add	r20, r20
    1df8:	55 1f       	adc	r21, r21
    1dfa:	59 f0       	breq	.+22     	; 0x1e12 <__fp_splitA+0x10>
    1dfc:	5f 3f       	cpi	r21, 0xFF	; 255
    1dfe:	71 f0       	breq	.+28     	; 0x1e1c <__fp_splitA+0x1a>
    1e00:	47 95       	ror	r20

00001e02 <__fp_splitA>:
    1e02:	88 0f       	add	r24, r24
    1e04:	97 fb       	bst	r25, 7
    1e06:	99 1f       	adc	r25, r25
    1e08:	61 f0       	breq	.+24     	; 0x1e22 <__fp_splitA+0x20>
    1e0a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e0c:	79 f0       	breq	.+30     	; 0x1e2c <__fp_splitA+0x2a>
    1e0e:	87 95       	ror	r24
    1e10:	08 95       	ret
    1e12:	12 16       	cp	r1, r18
    1e14:	13 06       	cpc	r1, r19
    1e16:	14 06       	cpc	r1, r20
    1e18:	55 1f       	adc	r21, r21
    1e1a:	f2 cf       	rjmp	.-28     	; 0x1e00 <__fp_split3+0xe>
    1e1c:	46 95       	lsr	r20
    1e1e:	f1 df       	rcall	.-30     	; 0x1e02 <__fp_splitA>
    1e20:	08 c0       	rjmp	.+16     	; 0x1e32 <__fp_splitA+0x30>
    1e22:	16 16       	cp	r1, r22
    1e24:	17 06       	cpc	r1, r23
    1e26:	18 06       	cpc	r1, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	f1 cf       	rjmp	.-30     	; 0x1e0e <__fp_splitA+0xc>
    1e2c:	86 95       	lsr	r24
    1e2e:	71 05       	cpc	r23, r1
    1e30:	61 05       	cpc	r22, r1
    1e32:	08 94       	sec
    1e34:	08 95       	ret

00001e36 <__fp_zero>:
    1e36:	e8 94       	clt

00001e38 <__fp_szero>:
    1e38:	bb 27       	eor	r27, r27
    1e3a:	66 27       	eor	r22, r22
    1e3c:	77 27       	eor	r23, r23
    1e3e:	cb 01       	movw	r24, r22
    1e40:	97 f9       	bld	r25, 7
    1e42:	08 95       	ret

00001e44 <__gesf2>:
    1e44:	2c df       	rcall	.-424    	; 0x1c9e <__fp_cmp>
    1e46:	08 f4       	brcc	.+2      	; 0x1e4a <__gesf2+0x6>
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	08 95       	ret

00001e4c <inverse>:
    1e4c:	9b 01       	movw	r18, r22
    1e4e:	ac 01       	movw	r20, r24
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	80 e8       	ldi	r24, 0x80	; 128
    1e56:	9f e3       	ldi	r25, 0x3F	; 63
    1e58:	4c ce       	rjmp	.-872    	; 0x1af2 <__divsf3>

00001e5a <__mulsf3>:
    1e5a:	0b d0       	rcall	.+22     	; 0x1e72 <__mulsf3x>
    1e5c:	a8 cf       	rjmp	.-176    	; 0x1dae <__fp_round>
    1e5e:	71 df       	rcall	.-286    	; 0x1d42 <__fp_pscA>
    1e60:	28 f0       	brcs	.+10     	; 0x1e6c <__mulsf3+0x12>
    1e62:	76 df       	rcall	.-276    	; 0x1d50 <__fp_pscB>
    1e64:	18 f0       	brcs	.+6      	; 0x1e6c <__mulsf3+0x12>
    1e66:	95 23       	and	r25, r21
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <__mulsf3+0x12>
    1e6a:	3d cf       	rjmp	.-390    	; 0x1ce6 <__fp_inf>
    1e6c:	42 cf       	rjmp	.-380    	; 0x1cf2 <__fp_nan>
    1e6e:	11 24       	eor	r1, r1
    1e70:	e3 cf       	rjmp	.-58     	; 0x1e38 <__fp_szero>

00001e72 <__mulsf3x>:
    1e72:	bf df       	rcall	.-130    	; 0x1df2 <__fp_split3>
    1e74:	a0 f3       	brcs	.-24     	; 0x1e5e <__mulsf3+0x4>

00001e76 <__mulsf3_pse>:
    1e76:	95 9f       	mul	r25, r21
    1e78:	d1 f3       	breq	.-12     	; 0x1e6e <__mulsf3+0x14>
    1e7a:	95 0f       	add	r25, r21
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	55 1f       	adc	r21, r21
    1e80:	62 9f       	mul	r22, r18
    1e82:	f0 01       	movw	r30, r0
    1e84:	72 9f       	mul	r23, r18
    1e86:	bb 27       	eor	r27, r27
    1e88:	f0 0d       	add	r31, r0
    1e8a:	b1 1d       	adc	r27, r1
    1e8c:	63 9f       	mul	r22, r19
    1e8e:	aa 27       	eor	r26, r26
    1e90:	f0 0d       	add	r31, r0
    1e92:	b1 1d       	adc	r27, r1
    1e94:	aa 1f       	adc	r26, r26
    1e96:	64 9f       	mul	r22, r20
    1e98:	66 27       	eor	r22, r22
    1e9a:	b0 0d       	add	r27, r0
    1e9c:	a1 1d       	adc	r26, r1
    1e9e:	66 1f       	adc	r22, r22
    1ea0:	82 9f       	mul	r24, r18
    1ea2:	22 27       	eor	r18, r18
    1ea4:	b0 0d       	add	r27, r0
    1ea6:	a1 1d       	adc	r26, r1
    1ea8:	62 1f       	adc	r22, r18
    1eaa:	73 9f       	mul	r23, r19
    1eac:	b0 0d       	add	r27, r0
    1eae:	a1 1d       	adc	r26, r1
    1eb0:	62 1f       	adc	r22, r18
    1eb2:	83 9f       	mul	r24, r19
    1eb4:	a0 0d       	add	r26, r0
    1eb6:	61 1d       	adc	r22, r1
    1eb8:	22 1f       	adc	r18, r18
    1eba:	74 9f       	mul	r23, r20
    1ebc:	33 27       	eor	r19, r19
    1ebe:	a0 0d       	add	r26, r0
    1ec0:	61 1d       	adc	r22, r1
    1ec2:	23 1f       	adc	r18, r19
    1ec4:	84 9f       	mul	r24, r20
    1ec6:	60 0d       	add	r22, r0
    1ec8:	21 1d       	adc	r18, r1
    1eca:	82 2f       	mov	r24, r18
    1ecc:	76 2f       	mov	r23, r22
    1ece:	6a 2f       	mov	r22, r26
    1ed0:	11 24       	eor	r1, r1
    1ed2:	9f 57       	subi	r25, 0x7F	; 127
    1ed4:	50 40       	sbci	r21, 0x00	; 0
    1ed6:	8a f0       	brmi	.+34     	; 0x1efa <__mulsf3_pse+0x84>
    1ed8:	e1 f0       	breq	.+56     	; 0x1f12 <__mulsf3_pse+0x9c>
    1eda:	88 23       	and	r24, r24
    1edc:	4a f0       	brmi	.+18     	; 0x1ef0 <__mulsf3_pse+0x7a>
    1ede:	ee 0f       	add	r30, r30
    1ee0:	ff 1f       	adc	r31, r31
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	66 1f       	adc	r22, r22
    1ee6:	77 1f       	adc	r23, r23
    1ee8:	88 1f       	adc	r24, r24
    1eea:	91 50       	subi	r25, 0x01	; 1
    1eec:	50 40       	sbci	r21, 0x00	; 0
    1eee:	a9 f7       	brne	.-22     	; 0x1eda <__mulsf3_pse+0x64>
    1ef0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ef2:	51 05       	cpc	r21, r1
    1ef4:	70 f0       	brcs	.+28     	; 0x1f12 <__mulsf3_pse+0x9c>
    1ef6:	f7 ce       	rjmp	.-530    	; 0x1ce6 <__fp_inf>
    1ef8:	9f cf       	rjmp	.-194    	; 0x1e38 <__fp_szero>
    1efa:	5f 3f       	cpi	r21, 0xFF	; 255
    1efc:	ec f3       	brlt	.-6      	; 0x1ef8 <__mulsf3_pse+0x82>
    1efe:	98 3e       	cpi	r25, 0xE8	; 232
    1f00:	dc f3       	brlt	.-10     	; 0x1ef8 <__mulsf3_pse+0x82>
    1f02:	86 95       	lsr	r24
    1f04:	77 95       	ror	r23
    1f06:	67 95       	ror	r22
    1f08:	b7 95       	ror	r27
    1f0a:	f7 95       	ror	r31
    1f0c:	e7 95       	ror	r30
    1f0e:	9f 5f       	subi	r25, 0xFF	; 255
    1f10:	c1 f7       	brne	.-16     	; 0x1f02 <__mulsf3_pse+0x8c>
    1f12:	fe 2b       	or	r31, r30
    1f14:	88 0f       	add	r24, r24
    1f16:	91 1d       	adc	r25, r1
    1f18:	96 95       	lsr	r25
    1f1a:	87 95       	ror	r24
    1f1c:	97 f9       	bld	r25, 7
    1f1e:	08 95       	ret

00001f20 <square>:
    1f20:	9b 01       	movw	r18, r22
    1f22:	ac 01       	movw	r20, r24
    1f24:	9a cf       	rjmp	.-204    	; 0x1e5a <__mulsf3>

00001f26 <__fp_mpack>:
    1f26:	9f 3f       	cpi	r25, 0xFF	; 255
    1f28:	31 f0       	breq	.+12     	; 0x1f36 <__fp_mpack_finite+0xc>

00001f2a <__fp_mpack_finite>:
    1f2a:	91 50       	subi	r25, 0x01	; 1
    1f2c:	20 f4       	brcc	.+8      	; 0x1f36 <__fp_mpack_finite+0xc>
    1f2e:	87 95       	ror	r24
    1f30:	77 95       	ror	r23
    1f32:	67 95       	ror	r22
    1f34:	b7 95       	ror	r27
    1f36:	88 0f       	add	r24, r24
    1f38:	91 1d       	adc	r25, r1
    1f3a:	96 95       	lsr	r25
    1f3c:	87 95       	ror	r24
    1f3e:	97 f9       	bld	r25, 7
    1f40:	08 95       	ret

00001f42 <__fp_powsodd>:
    1f42:	9f 93       	push	r25
    1f44:	8f 93       	push	r24
    1f46:	7f 93       	push	r23
    1f48:	6f 93       	push	r22
    1f4a:	ff 93       	push	r31
    1f4c:	ef 93       	push	r30
    1f4e:	9b 01       	movw	r18, r22
    1f50:	ac 01       	movw	r20, r24
    1f52:	83 df       	rcall	.-250    	; 0x1e5a <__mulsf3>
    1f54:	ef 91       	pop	r30
    1f56:	ff 91       	pop	r31
    1f58:	cf de       	rcall	.-610    	; 0x1cf8 <__fp_powser>
    1f5a:	2f 91       	pop	r18
    1f5c:	3f 91       	pop	r19
    1f5e:	4f 91       	pop	r20
    1f60:	5f 91       	pop	r21
    1f62:	7b cf       	rjmp	.-266    	; 0x1e5a <__mulsf3>

00001f64 <_exit>:
    1f64:	f8 94       	cli

00001f66 <__stop_program>:
    1f66:	ff cf       	rjmp	.-2      	; 0x1f66 <__stop_program>
