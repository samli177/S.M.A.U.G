
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001232  00800100  000022d0  00002364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000676  00801332  00801332  00003596  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  00003598  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  00006400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003e0  00000000  00000000  00007177  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a92  00000000  00000000  00007557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000faf  00000000  00000000  0000afe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024fb  00000000  00000000  0000bf98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c08  00000000  00000000  0000e494  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d31  00000000  00000000  0000f09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000024d9  00000000  00000000  0000fdcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000418  00000000  00000000  000122a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	d3 c6       	rjmp	.+3494   	; 0xdac <__vector_1>
       6:	00 00       	nop
       8:	fb c6       	rjmp	.+3574   	; 0xe00 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	93 c7       	rjmp	.+3878   	; 0xf38 <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	65 c7       	rjmp	.+3786   	; 0xf00 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c7       	rjmp	.+3738   	; 0xf1c <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e0 ed       	ldi	r30, 0xD0	; 208
      ec:	f2 e2       	ldi	r31, 0x22	; 34
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a2 33       	cpi	r26, 0x32	; 50
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	29 e1       	ldi	r18, 0x19	; 25
     100:	a2 e3       	ldi	r26, 0x32	; 50
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a8 3a       	cpi	r26, 0xA8	; 168
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	a2 d6       	rcall	.+3396   	; 0xe54 <main>
     110:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
	if(gStatus)
     11a:	80 91 00 01 	lds	r24, 0x0100
     11e:	88 23       	and	r24, r24
     120:	e1 f0       	breq	.+56     	; 0x15a <turn_around+0x44>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     122:	6b e1       	ldi	r22, 0x1B	; 27
     124:	71 e1       	ldi	r23, 0x11	; 17
     126:	80 e8       	ldi	r24, 0x80	; 128
     128:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TWI_send_string>
     12c:	16 c0       	rjmp	.+44     	; 0x15a <turn_around+0x44>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	6e e1       	ldi	r22, 0x1E	; 30
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_send_command_parameters>
		navigation_stepping_delay();
     138:	ca d2       	rcall	.+1428   	; 0x6ce <navigation_stepping_delay>
     13a:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
	}
	for(int i = 0; (i < 40 && TWI_get_autonom_settings() != 0); ++i)
     13c:	21 f0       	breq	.+8      	; 0x146 <turn_around+0x30>
     13e:	0e 94 b8 09 	call	0x1370	; 0x1370 <TWI_get_autonom_settings>
     142:	81 11       	cpse	r24, r1
     144:	f4 cf       	rjmp	.-24     	; 0x12e <turn_around+0x18>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	if(gStatus)
     146:	80 91 00 01 	lds	r24, 0x0100
     14a:	88 23       	and	r24, r24
     14c:	49 f0       	breq	.+18     	; 0x160 <turn_around+0x4a>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     14e:	64 e3       	ldi	r22, 0x34	; 52
     150:	71 e1       	ldi	r23, 0x11	; 17
     152:	80 e8       	ldi	r24, 0x80	; 128
     154:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TWI_send_string>
     158:	03 c0       	rjmp	.+6      	; 0x160 <turn_around+0x4a>
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     15a:	c8 e2       	ldi	r28, 0x28	; 40
     15c:	d0 e0       	ldi	r29, 0x00	; 0
     15e:	ef cf       	rjmp	.-34     	; 0x13e <turn_around+0x28>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
	}
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <walk_forward>:

void walk_forward()
{
     166:	8f 92       	push	r8
     168:	9f 92       	push	r9
     16a:	af 92       	push	r10
     16c:	bf 92       	push	r11
     16e:	cf 92       	push	r12
     170:	df 92       	push	r13
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     17a:	1e d5       	rcall	.+2620   	; 0xbb8 <navigation_angle_offset>
     17c:	6b 01       	movw	r12, r22
     17e:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     180:	7f d3       	rcall	.+1790   	; 0x880 <navigation_direction_regulation>
     182:	4b 01       	movw	r8, r22
     184:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	48 e4       	ldi	r20, 0x48	; 72
     18c:	52 e4       	ldi	r21, 0x42	; 66
     18e:	c7 01       	movw	r24, r14
     190:	b6 01       	movw	r22, r12
     192:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     196:	9b 01       	movw	r18, r22
     198:	ac 01       	movw	r20, r24
     19a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3>
     19e:	2b ed       	ldi	r18, 0xDB	; 219
     1a0:	3f e0       	ldi	r19, 0x0F	; 15
     1a2:	49 e4       	ldi	r20, 0x49	; 73
     1a4:	50 e4       	ldi	r21, 0x40	; 64
     1a6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divsf3>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	4c e4       	ldi	r20, 0x4C	; 76
     1b0:	52 e4       	ldi	r21, 0x42	; 66
     1b2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3>
     1b6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixsfsi>
	if (adjustmentRotation >= 100)
     1ba:	64 36       	cpi	r22, 0x64	; 100
     1bc:	71 05       	cpc	r23, r1
     1be:	34 f4       	brge	.+12     	; 0x1cc <walk_forward+0x66>
     1c0:	eb 01       	movw	r28, r22
     1c2:	dd 23       	and	r29, r29
     1c4:	2c f4       	brge	.+10     	; 0x1d0 <walk_forward+0x6a>
     1c6:	c0 e0       	ldi	r28, 0x00	; 0
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1cc:	c4 e6       	ldi	r28, 0x64	; 100
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	44 eb       	ldi	r20, 0xB4	; 180
     1d6:	52 e4       	ldi	r21, 0x42	; 66
     1d8:	c5 01       	movw	r24, r10
     1da:	b4 01       	movw	r22, r8
     1dc:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     1e0:	2b ed       	ldi	r18, 0xDB	; 219
     1e2:	3f e0       	ldi	r19, 0x0F	; 15
     1e4:	49 ec       	ldi	r20, 0xC9	; 201
     1e6:	50 e4       	ldi	r21, 0x40	; 64
     1e8:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divsf3>
     1ec:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixsfsi>
     1f0:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1f2:	40 91 01 01 	lds	r20, 0x0101
     1f6:	6c 2f       	mov	r22, r28
     1f8:	82 2f       	mov	r24, r18
     1fa:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1fe:	67 d2       	rcall	.+1230   	; 0x6ce <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	9f 90       	pop	r9
     212:	8f 90       	pop	r8
     214:	08 95       	ret

00000216 <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
	if(gStatus)
     21a:	80 91 00 01 	lds	r24, 0x0100
     21e:	88 23       	and	r24, r24
     220:	11 f1       	breq	.+68     	; 0x266 <turn_right+0x50>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     222:	69 e5       	ldi	r22, 0x59	; 89
     224:	71 e1       	ldi	r23, 0x11	; 17
     226:	80 e8       	ldi	r24, 0x80	; 128
     228:	c8 d7       	rcall	.+3984   	; 0x11ba <TWI_send_string>
     22a:	1d c0       	rjmp	.+58     	; 0x266 <turn_right+0x50>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
     22c:	40 e0       	ldi	r20, 0x00	; 0
     22e:	66 e4       	ldi	r22, 0x46	; 70
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_send_command_parameters>
		navigation_stepping_delay();
     236:	4b d2       	rcall	.+1174   	; 0x6ce <navigation_stepping_delay>
     238:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     23a:	c1 f0       	breq	.+48     	; 0x26c <turn_right+0x56>
     23c:	0e 94 b8 09 	call	0x1370	; 0x1370 <TWI_get_autonom_settings>
     240:	81 11       	cpse	r24, r1
     242:	f4 cf       	rjmp	.-24     	; 0x22c <turn_right+0x16>
     244:	13 c0       	rjmp	.+38     	; 0x26c <turn_right+0x56>
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 18 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     246:	8f df       	rcall	.-226    	; 0x166 <walk_forward>
     248:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 18 && TWI_get_autonom_settings() != 0); ++i)
     24a:	21 f0       	breq	.+8      	; 0x254 <turn_right+0x3e>
     24c:	0e 94 b8 09 	call	0x1370	; 0x1370 <TWI_get_autonom_settings>
     250:	81 11       	cpse	r24, r1
     252:	f9 cf       	rjmp	.-14     	; 0x246 <turn_right+0x30>
	{
		walk_forward();
	}
	if(gStatus)
     254:	80 91 00 01 	lds	r24, 0x0100
     258:	88 23       	and	r24, r24
     25a:	59 f0       	breq	.+22     	; 0x272 <turn_right+0x5c>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     25c:	61 e7       	ldi	r22, 0x71	; 113
     25e:	71 e1       	ldi	r23, 0x11	; 17
     260:	80 e8       	ldi	r24, 0x80	; 128
     262:	ab d7       	rcall	.+3926   	; 0x11ba <TWI_send_string>
     264:	06 c0       	rjmp	.+12     	; 0x272 <turn_right+0x5c>
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     266:	c4 e1       	ldi	r28, 0x14	; 20
     268:	d0 e0       	ldi	r29, 0x00	; 0
     26a:	e8 cf       	rjmp	.-48     	; 0x23c <turn_right+0x26>
     26c:	c2 e1       	ldi	r28, 0x12	; 18
     26e:	d0 e0       	ldi	r29, 0x00	; 0
     270:	ed cf       	rjmp	.-38     	; 0x24c <turn_right+0x36>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
	if(gStatus)
     27c:	80 91 00 01 	lds	r24, 0x0100
     280:	88 23       	and	r24, r24
     282:	11 f1       	breq	.+68     	; 0x2c8 <turn_left+0x50>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     284:	65 e8       	ldi	r22, 0x85	; 133
     286:	71 e1       	ldi	r23, 0x11	; 17
     288:	80 e8       	ldi	r24, 0x80	; 128
     28a:	97 d7       	rcall	.+3886   	; 0x11ba <TWI_send_string>
     28c:	1d c0       	rjmp	.+58     	; 0x2c8 <turn_left+0x50>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	6e e1       	ldi	r22, 0x1E	; 30
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_send_command_parameters>
		navigation_stepping_delay();
     298:	1a d2       	rcall	.+1076   	; 0x6ce <navigation_stepping_delay>
     29a:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     29c:	c1 f0       	breq	.+48     	; 0x2ce <turn_left+0x56>
     29e:	0e 94 b8 09 	call	0x1370	; 0x1370 <TWI_get_autonom_settings>
     2a2:	81 11       	cpse	r24, r1
     2a4:	f4 cf       	rjmp	.-24     	; 0x28e <turn_left+0x16>
     2a6:	13 c0       	rjmp	.+38     	; 0x2ce <turn_left+0x56>
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 18 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     2a8:	5e df       	rcall	.-324    	; 0x166 <walk_forward>
     2aa:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 18 && TWI_get_autonom_settings() != 0); ++i)
     2ac:	21 f0       	breq	.+8      	; 0x2b6 <turn_left+0x3e>
     2ae:	0e 94 b8 09 	call	0x1370	; 0x1370 <TWI_get_autonom_settings>
     2b2:	81 11       	cpse	r24, r1
     2b4:	f9 cf       	rjmp	.-14     	; 0x2a8 <turn_left+0x30>
	{
		walk_forward();
	}
	if(gStatus)
     2b6:	80 91 00 01 	lds	r24, 0x0100
     2ba:	88 23       	and	r24, r24
     2bc:	59 f0       	breq	.+22     	; 0x2d4 <turn_left+0x5c>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2be:	6c e9       	ldi	r22, 0x9C	; 156
     2c0:	71 e1       	ldi	r23, 0x11	; 17
     2c2:	80 e8       	ldi	r24, 0x80	; 128
     2c4:	7a d7       	rcall	.+3828   	; 0x11ba <TWI_send_string>
     2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <turn_left+0x5c>
{
	return gStatus;
}

void turn_left()
{
     2c8:	c4 e1       	ldi	r28, 0x14	; 20
     2ca:	d0 e0       	ldi	r29, 0x00	; 0
     2cc:	e8 cf       	rjmp	.-48     	; 0x29e <turn_left+0x26>
     2ce:	c2 e1       	ldi	r28, 0x12	; 18
     2d0:	d0 e0       	ldi	r29, 0x00	; 0
     2d2:	ed cf       	rjmp	.-38     	; 0x2ae <turn_left+0x36>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <walk_bakwards>:
	navigation_stepping_delay();
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void walk_bakwards()
{
     2da:	8f 92       	push	r8
     2dc:	9f 92       	push	r9
     2de:	af 92       	push	r10
     2e0:	bf 92       	push	r11
     2e2:	cf 92       	push	r12
     2e4:	df 92       	push	r13
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     2ee:	64 d4       	rcall	.+2248   	; 0xbb8 <navigation_angle_offset>
	angleOffset = -angleOffset;
     2f0:	6b 01       	movw	r12, r22
     2f2:	7c 01       	movw	r14, r24
     2f4:	f7 fa       	bst	r15, 7
     2f6:	f0 94       	com	r15
     2f8:	f7 f8       	bld	r15, 7
     2fa:	f0 94       	com	r15
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     2fc:	c7 01       	movw	r24, r14
     2fe:	b6 01       	movw	r22, r12
     300:	bf d2       	rcall	.+1406   	; 0x880 <navigation_direction_regulation>
     302:	4b 01       	movw	r8, r22
     304:	5c 01       	movw	r10, r24
	
	if(directionCompensationAngle>PI)
     306:	2b ed       	ldi	r18, 0xDB	; 219
     308:	3f e0       	ldi	r19, 0x0F	; 15
     30a:	49 e4       	ldi	r20, 0x49	; 73
     30c:	50 e4       	ldi	r21, 0x40	; 64
     30e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__gesf2>
     312:	18 16       	cp	r1, r24
     314:	bc f4       	brge	.+46     	; 0x344 <walk_bakwards+0x6a>
	{
		directionCompensationAngle = PI - (directionCompensationAngle - 2*PI);
     316:	2b ed       	ldi	r18, 0xDB	; 219
     318:	3f e0       	ldi	r19, 0x0F	; 15
     31a:	49 ec       	ldi	r20, 0xC9	; 201
     31c:	50 e4       	ldi	r21, 0x40	; 64
     31e:	c5 01       	movw	r24, r10
     320:	b4 01       	movw	r22, r8
     322:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__subsf3>
     326:	26 2f       	mov	r18, r22
     328:	37 2f       	mov	r19, r23
     32a:	48 2f       	mov	r20, r24
     32c:	59 2f       	mov	r21, r25
     32e:	6b ed       	ldi	r22, 0xDB	; 219
     330:	7f e0       	ldi	r23, 0x0F	; 15
     332:	89 e4       	ldi	r24, 0x49	; 73
     334:	90 e4       	ldi	r25, 0x40	; 64
     336:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__subsf3>
     33a:	86 2e       	mov	r8, r22
     33c:	97 2e       	mov	r9, r23
     33e:	a8 2e       	mov	r10, r24
     340:	b9 2e       	mov	r11, r25
     342:	0c c0       	rjmp	.+24     	; 0x35c <walk_bakwards+0x82>
	}
	else
	{
		directionCompensationAngle = PI - directionCompensationAngle;
     344:	a5 01       	movw	r20, r10
     346:	94 01       	movw	r18, r8
     348:	6b ed       	ldi	r22, 0xDB	; 219
     34a:	7f e0       	ldi	r23, 0x0F	; 15
     34c:	89 e4       	ldi	r24, 0x49	; 73
     34e:	90 e4       	ldi	r25, 0x40	; 64
     350:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__subsf3>
     354:	86 2e       	mov	r8, r22
     356:	97 2e       	mov	r9, r23
     358:	a8 2e       	mov	r10, r24
     35a:	b9 2e       	mov	r11, r25
	
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found 6t666regulation parameters.");
	}
	int adjustmentRotation = (49 - 50 * angleOffset * 2.0/PI);
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	48 e4       	ldi	r20, 0x48	; 72
     362:	52 e4       	ldi	r21, 0x42	; 66
     364:	c7 01       	movw	r24, r14
     366:	b6 01       	movw	r22, r12
     368:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     36c:	9b 01       	movw	r18, r22
     36e:	ac 01       	movw	r20, r24
     370:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3>
     374:	2b ed       	ldi	r18, 0xDB	; 219
     376:	3f e0       	ldi	r19, 0x0F	; 15
     378:	49 e4       	ldi	r20, 0x49	; 73
     37a:	50 e4       	ldi	r21, 0x40	; 64
     37c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divsf3>
     380:	9b 01       	movw	r18, r22
     382:	ac 01       	movw	r20, r24
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	84 e4       	ldi	r24, 0x44	; 68
     38a:	92 e4       	ldi	r25, 0x42	; 66
     38c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__subsf3>
     390:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixsfsi>
	if (adjustmentRotation >= 100)
     394:	64 36       	cpi	r22, 0x64	; 100
     396:	71 05       	cpc	r23, r1
     398:	34 f4       	brge	.+12     	; 0x3a6 <walk_bakwards+0xcc>
     39a:	eb 01       	movw	r28, r22
     39c:	dd 23       	and	r29, r29
     39e:	2c f4       	brge	.+10     	; 0x3aa <walk_bakwards+0xd0>
     3a0:	c0 e0       	ldi	r28, 0x00	; 0
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <walk_bakwards+0xd0>
	{
		adjustmentRotation = 100;
     3a6:	c4 e6       	ldi	r28, 0x64	; 100
     3a8:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	44 eb       	ldi	r20, 0xB4	; 180
     3b0:	52 e4       	ldi	r21, 0x42	; 66
     3b2:	68 2d       	mov	r22, r8
     3b4:	79 2d       	mov	r23, r9
     3b6:	8a 2d       	mov	r24, r10
     3b8:	9b 2d       	mov	r25, r11
     3ba:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     3be:	2b ed       	ldi	r18, 0xDB	; 219
     3c0:	3f e0       	ldi	r19, 0x0F	; 15
     3c2:	49 ec       	ldi	r20, 0xC9	; 201
     3c4:	50 e4       	ldi	r21, 0x40	; 64
     3c6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divsf3>
     3ca:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixsfsi>
     3ce:	26 2f       	mov	r18, r22
	
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     3d0:	40 91 01 01 	lds	r20, 0x0101
     3d4:	6c 2f       	mov	r22, r28
     3d6:	82 2f       	mov	r24, r18
     3d8:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     3dc:	78 d1       	rcall	.+752    	; 0x6ce <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	bf 90       	pop	r11
     3ec:	af 90       	pop	r10
     3ee:	9f 90       	pop	r9
     3f0:	8f 90       	pop	r8
     3f2:	08 95       	ret

000003f4 <dead_end>:

void dead_end()
{
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
			deadEndFlag = 0;
			turn_around();
		}
		else if(navigation_check_left_turn())
		{
			deadEndFlag = 0;
     3fc:	08 e0       	ldi	r16, 0x08	; 8
     3fe:	10 e0       	ldi	r17, 0x00	; 0
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void dead_end()
{
	while(deadEndFlag == 1 && TWI_get_autonom_settings() != 0)
     400:	3f c0       	rjmp	.+126    	; 0x480 <dead_end+0x8c>
	{
		if(navigation_left_algorithm() && navigation_check_right_turn())
     402:	59 d1       	rcall	.+690    	; 0x6b6 <navigation_left_algorithm>
     404:	88 23       	and	r24, r24
     406:	a9 f0       	breq	.+42     	; 0x432 <dead_end+0x3e>
     408:	11 d2       	rcall	.+1058   	; 0x82c <navigation_check_right_turn>
     40a:	88 23       	and	r24, r24
     40c:	91 f0       	breq	.+36     	; 0x432 <dead_end+0x3e>
		{
			deadEndFlag = 0;
     40e:	10 92 32 13 	sts	0x1332, r1
     412:	e8 01       	movw	r28, r16
     414:	09 c0       	rjmp	.+18     	; 0x428 <dead_end+0x34>
			for(int i = 0;(i < 8 && TWI_get_autonom_settings() != 0); ++i)
			{
				USART_send_command_parameters(90, 0, gSpeed);
     416:	40 91 01 01 	lds	r20, 0x0101
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	8a e5       	ldi	r24, 0x5A	; 90
     41e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_send_command_parameters>
				navigation_stepping_delay();
     422:	55 d1       	rcall	.+682    	; 0x6ce <navigation_stepping_delay>
     424:	21 97       	sbiw	r28, 0x01	; 1
	while(deadEndFlag == 1 && TWI_get_autonom_settings() != 0)
	{
		if(navigation_left_algorithm() && navigation_check_right_turn())
		{
			deadEndFlag = 0;
			for(int i = 0;(i < 8 && TWI_get_autonom_settings() != 0); ++i)
     426:	19 f0       	breq	.+6      	; 0x42e <dead_end+0x3a>
     428:	a3 d7       	rcall	.+3910   	; 0x1370 <TWI_get_autonom_settings>
     42a:	81 11       	cpse	r24, r1
     42c:	f4 cf       	rjmp	.-24     	; 0x416 <dead_end+0x22>
			{
				USART_send_command_parameters(90, 0, gSpeed);
				navigation_stepping_delay();
			}
			turn_right();
     42e:	f3 de       	rcall	.-538    	; 0x216 <turn_right>
     430:	27 c0       	rjmp	.+78     	; 0x480 <dead_end+0x8c>
		}
		else if(navigation_left_algorithm() && navigation_check_left_turn())
     432:	41 d1       	rcall	.+642    	; 0x6b6 <navigation_left_algorithm>
     434:	88 23       	and	r24, r24
     436:	39 f0       	breq	.+14     	; 0x446 <dead_end+0x52>
     438:	0e d2       	rcall	.+1052   	; 0x856 <navigation_check_left_turn>
     43a:	88 23       	and	r24, r24
     43c:	21 f0       	breq	.+8      	; 0x446 <dead_end+0x52>
		{
			deadEndFlag = 0;
     43e:	10 92 32 13 	sts	0x1332, r1
			turn_around();
     442:	69 de       	rcall	.-814    	; 0x116 <turn_around>
     444:	1d c0       	rjmp	.+58     	; 0x480 <dead_end+0x8c>
		}
		else if(navigation_check_left_turn())
     446:	07 d2       	rcall	.+1038   	; 0x856 <navigation_check_left_turn>
     448:	88 23       	and	r24, r24
     44a:	91 f0       	breq	.+36     	; 0x470 <dead_end+0x7c>
		{
			deadEndFlag = 0;
     44c:	10 92 32 13 	sts	0x1332, r1
     450:	e8 01       	movw	r28, r16
     452:	09 c0       	rjmp	.+18     	; 0x466 <dead_end+0x72>
			for(int i = 0;(i < 8 && TWI_get_autonom_settings() != 0); ++i)
			{
				USART_send_command_parameters(90, 0, gSpeed);
     454:	40 91 01 01 	lds	r20, 0x0101
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	8a e5       	ldi	r24, 0x5A	; 90
     45c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_send_command_parameters>
				navigation_stepping_delay();
     460:	36 d1       	rcall	.+620    	; 0x6ce <navigation_stepping_delay>
     462:	21 97       	sbiw	r28, 0x01	; 1
			turn_around();
		}
		else if(navigation_check_left_turn())
		{
			deadEndFlag = 0;
			for(int i = 0;(i < 8 && TWI_get_autonom_settings() != 0); ++i)
     464:	19 f0       	breq	.+6      	; 0x46c <dead_end+0x78>
     466:	84 d7       	rcall	.+3848   	; 0x1370 <TWI_get_autonom_settings>
     468:	81 11       	cpse	r24, r1
     46a:	f4 cf       	rjmp	.-24     	; 0x454 <dead_end+0x60>
			{
				USART_send_command_parameters(90, 0, gSpeed);
				navigation_stepping_delay();
			}
			turn_left();
     46c:	05 df       	rcall	.-502    	; 0x278 <turn_left>
     46e:	08 c0       	rjmp	.+16     	; 0x480 <dead_end+0x8c>
		}
		else if(navigation_check_right_turn())
     470:	dd d1       	rcall	.+954    	; 0x82c <navigation_check_right_turn>
     472:	88 23       	and	r24, r24
     474:	21 f0       	breq	.+8      	; 0x47e <dead_end+0x8a>
		{
			deadEndFlag = 0;
     476:	10 92 32 13 	sts	0x1332, r1
			turn_around();
     47a:	4d de       	rcall	.-870    	; 0x116 <turn_around>
     47c:	01 c0       	rjmp	.+2      	; 0x480 <dead_end+0x8c>
		}
		else
		{
			walk_bakwards();
     47e:	2d df       	rcall	.-422    	; 0x2da <walk_bakwards>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void dead_end()
{
	while(deadEndFlag == 1 && TWI_get_autonom_settings() != 0)
     480:	80 91 32 13 	lds	r24, 0x1332
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	19 f4       	brne	.+6      	; 0x48e <dead_end+0x9a>
     488:	73 d7       	rcall	.+3814   	; 0x1370 <TWI_get_autonom_settings>
     48a:	81 11       	cpse	r24, r1
     48c:	ba cf       	rjmp	.-140    	; 0x402 <dead_end+0xe>
		else
		{
			walk_bakwards();
		}
	}
	deadEndFlag = 0;
     48e:	10 92 32 13 	sts	0x1332, r1
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	08 95       	ret

0000049c <autonomouswalk_walk>:

void autonomouswalk_walk()
{
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
	navigation_low_pass_obstacle();
     4a0:	9f d1       	rcall	.+830    	; 0x7e0 <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     4a2:	09 d1       	rcall	.+530    	; 0x6b6 <navigation_left_algorithm>
     4a4:	88 23       	and	r24, r24
     4a6:	41 f1       	breq	.+80     	; 0x4f8 <autonomouswalk_walk+0x5c>
	{
		if(navigation_check_left_turn() == 2)
     4a8:	d6 d1       	rcall	.+940    	; 0x856 <navigation_check_left_turn>
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	61 f4       	brne	.+24     	; 0x4c6 <autonomouswalk_walk+0x2a>
     4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <autonomouswalk_walk+0x1c>
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     4b0:	5a de       	rcall	.-844    	; 0x166 <walk_forward>
     4b2:	21 97       	sbiw	r28, 0x01	; 1
	navigation_low_pass_obstacle();
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     4b4:	19 f4       	brne	.+6      	; 0x4bc <autonomouswalk_walk+0x20>
     4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <autonomouswalk_walk+0x26>
void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
     4b8:	c4 e0       	ldi	r28, 0x04	; 4
     4ba:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     4bc:	59 d7       	rcall	.+3762   	; 0x1370 <TWI_get_autonom_settings>
     4be:	81 11       	cpse	r24, r1
     4c0:	f7 cf       	rjmp	.-18     	; 0x4b0 <autonomouswalk_walk+0x14>
			{
				walk_forward();
			}
			turn_left();
     4c2:	da de       	rcall	.-588    	; 0x278 <turn_left>
     4c4:	54 c0       	rjmp	.+168    	; 0x56e <autonomouswalk_walk+0xd2>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	43 d1       	rcall	.+646    	; 0x752 <navigation_get_sensor>
     4cc:	89 32       	cpi	r24, 0x29	; 41
     4ce:	10 f0       	brcs	.+4      	; 0x4d4 <autonomouswalk_walk+0x38>
		{
			walk_forward();
     4d0:	4a de       	rcall	.-876    	; 0x166 <walk_forward>
     4d2:	4d c0       	rjmp	.+154    	; 0x56e <autonomouswalk_walk+0xd2>
		}
		else if(navigation_check_right_turn() == 2)
     4d4:	ab d1       	rcall	.+854    	; 0x82c <navigation_check_right_turn>
     4d6:	82 30       	cpi	r24, 0x02	; 2
     4d8:	11 f4       	brne	.+4      	; 0x4de <autonomouswalk_walk+0x42>
		{
			turn_right();
     4da:	9d de       	rcall	.-710    	; 0x216 <turn_right>
     4dc:	48 c0       	rjmp	.+144    	; 0x56e <autonomouswalk_walk+0xd2>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     4de:	bb d1       	rcall	.+886    	; 0x856 <navigation_check_left_turn>
     4e0:	81 11       	cpse	r24, r1
     4e2:	08 c0       	rjmp	.+16     	; 0x4f4 <autonomouswalk_walk+0x58>
     4e4:	a3 d1       	rcall	.+838    	; 0x82c <navigation_check_right_turn>
     4e6:	81 11       	cpse	r24, r1
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <autonomouswalk_walk+0x58>
		{
			deadEndFlag = 1;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 32 13 	sts	0x1332, r24
			dead_end();
     4f0:	81 df       	rcall	.-254    	; 0x3f4 <dead_end>
     4f2:	3d c0       	rjmp	.+122    	; 0x56e <autonomouswalk_walk+0xd2>
		}
		else
		{
			walk_forward();
     4f4:	38 de       	rcall	.-912    	; 0x166 <walk_forward>
     4f6:	3b c0       	rjmp	.+118    	; 0x56e <autonomouswalk_walk+0xd2>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     4f8:	99 d1       	rcall	.+818    	; 0x82c <navigation_check_right_turn>
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	61 f4       	brne	.+24     	; 0x516 <autonomouswalk_walk+0x7a>
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <autonomouswalk_walk+0x6c>
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     500:	32 de       	rcall	.-924    	; 0x166 <walk_forward>
     502:	21 97       	sbiw	r28, 0x01	; 1
	}
	else
	{
		if(navigation_check_right_turn() == 2)
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     504:	19 f4       	brne	.+6      	; 0x50c <autonomouswalk_walk+0x70>
     506:	05 c0       	rjmp	.+10     	; 0x512 <autonomouswalk_walk+0x76>
			walk_forward();
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     508:	c4 e0       	ldi	r28, 0x04	; 4
     50a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     50c:	31 d7       	rcall	.+3682   	; 0x1370 <TWI_get_autonom_settings>
     50e:	81 11       	cpse	r24, r1
     510:	f7 cf       	rjmp	.-18     	; 0x500 <autonomouswalk_walk+0x64>
			{
				walk_forward();
			}
			turn_right();
     512:	81 de       	rcall	.-766    	; 0x216 <turn_right>
     514:	2c c0       	rjmp	.+88     	; 0x56e <autonomouswalk_walk+0xd2>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	1b d1       	rcall	.+566    	; 0x752 <navigation_get_sensor>
     51c:	89 32       	cpi	r24, 0x29	; 41
     51e:	10 f0       	brcs	.+4      	; 0x524 <autonomouswalk_walk+0x88>
		{
			walk_forward();
     520:	22 de       	rcall	.-956    	; 0x166 <walk_forward>
     522:	25 c0       	rjmp	.+74     	; 0x56e <autonomouswalk_walk+0xd2>
		}
		else if(navigation_check_left_turn() == 2)
     524:	98 d1       	rcall	.+816    	; 0x856 <navigation_check_left_turn>
     526:	82 30       	cpi	r24, 0x02	; 2
     528:	11 f4       	brne	.+4      	; 0x52e <autonomouswalk_walk+0x92>
		{
			turn_left();
     52a:	a6 de       	rcall	.-692    	; 0x278 <turn_left>
     52c:	20 c0       	rjmp	.+64     	; 0x56e <autonomouswalk_walk+0xd2>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     52e:	93 d1       	rcall	.+806    	; 0x856 <navigation_check_left_turn>
     530:	81 11       	cpse	r24, r1
     532:	08 c0       	rjmp	.+16     	; 0x544 <autonomouswalk_walk+0xa8>
     534:	7b d1       	rcall	.+758    	; 0x82c <navigation_check_right_turn>
     536:	81 11       	cpse	r24, r1
     538:	05 c0       	rjmp	.+10     	; 0x544 <autonomouswalk_walk+0xa8>
		{
			deadEndFlag = 1;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	80 93 32 13 	sts	0x1332, r24
			dead_end();
     540:	59 df       	rcall	.-334    	; 0x3f4 <dead_end>
     542:	15 c0       	rjmp	.+42     	; 0x56e <autonomouswalk_walk+0xd2>
		}
		else if(decisionCounter < 4)
     544:	80 91 33 13 	lds	r24, 0x1333
     548:	84 30       	cpi	r24, 0x04	; 4
     54a:	38 f4       	brcc	.+14     	; 0x55a <autonomouswalk_walk+0xbe>
		{
			walk_forward();
     54c:	0c de       	rcall	.-1000   	; 0x166 <walk_forward>
			++decisionCounter;
     54e:	80 91 33 13 	lds	r24, 0x1333
     552:	8f 5f       	subi	r24, 0xFF	; 255
     554:	80 93 33 13 	sts	0x1333, r24
     558:	0a c0       	rjmp	.+20     	; 0x56e <autonomouswalk_walk+0xd2>
		}
		else
		{
			decisionCounter = 0;
     55a:	10 92 33 13 	sts	0x1333, r1
			navigation_set_autonomous_walk(0);
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	b3 d0       	rcall	.+358    	; 0x6c8 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     562:	49 e3       	ldi	r20, 0x39	; 57
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	6f ea       	ldi	r22, 0xAF	; 175
     568:	71 e1       	ldi	r23, 0x11	; 17
     56a:	80 e8       	ldi	r24, 0x80	; 128
     56c:	6c d6       	rcall	.+3288   	; 0x1246 <TWI_send_string_fixed_length>
		}
	}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <set_counter_1>:
     574:	bc 01       	movw	r22, r24
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatunsisf>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	4a e7       	ldi	r20, 0x7A	; 122
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     58a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__fixunssfsi>
     58e:	70 93 89 00 	sts	0x0089, r23
     592:	60 93 88 00 	sts	0x0088, r22
     596:	08 95       	ret

00000598 <set_counter_2>:
     598:	bc 01       	movw	r22, r24
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatunsisf>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	4a e7       	ldi	r20, 0x7A	; 122
     5a8:	51 e4       	ldi	r21, 0x41	; 65
     5aa:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     5ae:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__fixunssfsi>
     5b2:	70 93 99 00 	sts	0x0099, r23
     5b6:	60 93 98 00 	sts	0x0098, r22
     5ba:	08 95       	ret

000005bc <init_counters>:
     5bc:	e1 e8       	ldi	r30, 0x81	; 129
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	85 60       	ori	r24, 0x05	; 5
     5c4:	80 83       	st	Z, r24
     5c6:	e1 e9       	ldi	r30, 0x91	; 145
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	85 60       	ori	r24, 0x05	; 5
     5ce:	80 83       	st	Z, r24
     5d0:	88 ee       	ldi	r24, 0xE8	; 232
     5d2:	93 e0       	ldi	r25, 0x03	; 3
     5d4:	cf df       	rcall	.-98     	; 0x574 <set_counter_1>
     5d6:	88 ee       	ldi	r24, 0xE8	; 232
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	de df       	rcall	.-68     	; 0x598 <set_counter_2>
     5dc:	ef e6       	ldi	r30, 0x6F	; 111
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	82 60       	ori	r24, 0x02	; 2
     5e4:	80 83       	st	Z, r24
     5e6:	e1 e7       	ldi	r30, 0x71	; 113
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	82 60       	ori	r24, 0x02	; 2
     5ee:	80 83       	st	Z, r24
     5f0:	10 92 85 00 	sts	0x0085, r1
     5f4:	10 92 84 00 	sts	0x0084, r1
     5f8:	10 92 95 00 	sts	0x0095, r1
     5fc:	10 92 94 00 	sts	0x0094, r1
     600:	08 95       	ret

00000602 <FifoDataLength>:
     602:	fc 01       	movw	r30, r24
     604:	90 81       	ld	r25, Z
     606:	91 50       	subi	r25, 0x01	; 1
     608:	84 81       	ldd	r24, Z+4	; 0x04
     60a:	22 81       	ldd	r18, Z+2	; 0x02
     60c:	82 1b       	sub	r24, r18
     60e:	89 23       	and	r24, r25
     610:	08 95       	ret

00000612 <FifoWrite>:
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
     61a:	16 2f       	mov	r17, r22
     61c:	f2 df       	rcall	.-28     	; 0x602 <FifoDataLength>
     61e:	28 81       	ld	r18, Y
     620:	39 81       	ldd	r19, Y+1	; 0x01
     622:	21 50       	subi	r18, 0x01	; 1
     624:	31 09       	sbc	r19, r1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	69 f0       	breq	.+26     	; 0x648 <FifoWrite+0x36>
     62e:	8c 81       	ldd	r24, Y+4	; 0x04
     630:	9d 81       	ldd	r25, Y+5	; 0x05
     632:	fe 01       	movw	r30, r28
     634:	e8 0f       	add	r30, r24
     636:	f9 1f       	adc	r31, r25
     638:	16 83       	std	Z+6, r17	; 0x06
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	28 23       	and	r18, r24
     63e:	39 23       	and	r19, r25
     640:	3d 83       	std	Y+5, r19	; 0x05
     642:	2c 83       	std	Y+4, r18	; 0x04
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	01 c0       	rjmp	.+2      	; 0x64a <FifoWrite+0x38>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	08 95       	ret

00000652 <FifoRead>:
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	ec 01       	movw	r28, r24
     65c:	8b 01       	movw	r16, r22
     65e:	d1 df       	rcall	.-94     	; 0x602 <FifoDataLength>
     660:	88 23       	and	r24, r24
     662:	a1 f0       	breq	.+40     	; 0x68c <FifoRead+0x3a>
     664:	ea 81       	ldd	r30, Y+2	; 0x02
     666:	fb 81       	ldd	r31, Y+3	; 0x03
     668:	ec 0f       	add	r30, r28
     66a:	fd 1f       	adc	r31, r29
     66c:	86 81       	ldd	r24, Z+6	; 0x06
     66e:	f8 01       	movw	r30, r16
     670:	80 83       	st	Z, r24
     672:	28 81       	ld	r18, Y
     674:	39 81       	ldd	r19, Y+1	; 0x01
     676:	21 50       	subi	r18, 0x01	; 1
     678:	31 09       	sbc	r19, r1
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	9b 81       	ldd	r25, Y+3	; 0x03
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	82 23       	and	r24, r18
     682:	93 23       	and	r25, r19
     684:	9b 83       	std	Y+3, r25	; 0x03
     686:	8a 83       	std	Y+2, r24	; 0x02
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	01 c0       	rjmp	.+2      	; 0x68e <FifoRead+0x3c>
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	08 95       	ret

00000698 <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     698:	68 2f       	mov	r22, r24
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatunsisf>
     6a4:	60 93 03 01 	sts	0x0103, r22
     6a8:	70 93 04 01 	sts	0x0104, r23
     6ac:	80 93 05 01 	sts	0x0105, r24
     6b0:	90 93 06 01 	sts	0x0106, r25
     6b4:	08 95       	ret

000006b6 <navigation_left_algorithm>:
     6b6:	80 91 07 01 	lds	r24, 0x0107
     6ba:	08 95       	ret

000006bc <navigation_set_algorithm>:
     6bc:	80 93 07 01 	sts	0x0107, r24
     6c0:	08 95       	ret

000006c2 <navigation_autonomous_walk>:
     6c2:	80 91 02 01 	lds	r24, 0x0102
     6c6:	08 95       	ret

000006c8 <navigation_set_autonomous_walk>:
     6c8:	80 93 02 01 	sts	0x0102, r24
     6cc:	08 95       	ret

000006ce <navigation_stepping_delay>:
     6ce:	cf 93       	push	r28
     6d0:	c2 e0       	ldi	r28, 0x02	; 2
     6d2:	0e c0       	rjmp	.+28     	; 0x6f0 <navigation_stepping_delay+0x22>
     6d4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_DecodeRxFIFO>
     6d8:	2f ef       	ldi	r18, 0xFF	; 255
     6da:	89 ef       	ldi	r24, 0xF9	; 249
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	21 50       	subi	r18, 0x01	; 1
     6e0:	80 40       	sbci	r24, 0x00	; 0
     6e2:	90 40       	sbci	r25, 0x00	; 0
     6e4:	e1 f7       	brne	.-8      	; 0x6de <navigation_stepping_delay+0x10>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <navigation_stepping_delay+0x1a>
     6e8:	00 00       	nop
     6ea:	82 b1       	in	r24, 0x02	; 2
     6ec:	8c 27       	eor	r24, r28
     6ee:	82 b9       	out	0x02, r24	; 2
     6f0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <USART_ready>
     6f4:	88 23       	and	r24, r24
     6f6:	71 f3       	breq	.-36     	; 0x6d4 <navigation_stepping_delay+0x6>
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <navigation_fill_buffer>:
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	c0 e0       	ldi	r28, 0x00	; 0
     706:	d0 e0       	ldi	r29, 0x00	; 0
     708:	00 91 35 13 	lds	r16, 0x1335
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	ce 01       	movw	r24, r28
     710:	25 d6       	rcall	.+3146   	; 0x135c <TWI_get_sensor>
     712:	fe 01       	movw	r30, r28
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	ee 0f       	add	r30, r30
     71a:	ff 1f       	adc	r31, r31
     71c:	ec 0f       	add	r30, r28
     71e:	fd 1f       	adc	r31, r29
     720:	0e 0f       	add	r16, r30
     722:	1f 1f       	adc	r17, r31
     724:	f8 01       	movw	r30, r16
     726:	e7 5b       	subi	r30, 0xB7	; 183
     728:	fc 4e       	sbci	r31, 0xEC	; 236
     72a:	80 83       	st	Z, r24
     72c:	21 96       	adiw	r28, 0x01	; 1
     72e:	c8 30       	cpi	r28, 0x08	; 8
     730:	d1 05       	cpc	r29, r1
     732:	51 f7       	brne	.-44     	; 0x708 <navigation_fill_buffer+0xc>
     734:	80 91 35 13 	lds	r24, 0x1335
     738:	84 30       	cpi	r24, 0x04	; 4
     73a:	19 f4       	brne	.+6      	; 0x742 <navigation_fill_buffer+0x46>
     73c:	10 92 35 13 	sts	0x1335, r1
     740:	03 c0       	rjmp	.+6      	; 0x748 <navigation_fill_buffer+0x4c>
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	80 93 35 13 	sts	0x1335, r24
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <navigation_get_sensor>:
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	00 d0       	rcall	.+0      	; 0x758 <navigation_get_sensor+0x6>
     758:	00 d0       	rcall	.+0      	; 0x75a <navigation_get_sensor+0x8>
     75a:	1f 92       	push	r1
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	fc 01       	movw	r30, r24
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	8e 0f       	add	r24, r30
     76c:	9f 1f       	adc	r25, r31
     76e:	fc 01       	movw	r30, r24
     770:	e7 5b       	subi	r30, 0xB7	; 183
     772:	fc 4e       	sbci	r31, 0xEC	; 236
     774:	80 81       	ld	r24, Z
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	81 81       	ldd	r24, Z+1	; 0x01
     77a:	8a 83       	std	Y+2, r24	; 0x02
     77c:	82 81       	ldd	r24, Z+2	; 0x02
     77e:	8b 83       	std	Y+3, r24	; 0x03
     780:	83 81       	ldd	r24, Z+3	; 0x03
     782:	8c 83       	std	Y+4, r24	; 0x04
     784:	84 81       	ldd	r24, Z+4	; 0x04
     786:	8d 83       	std	Y+5, r24	; 0x05
     788:	24 e0       	ldi	r18, 0x04	; 4
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	0e c0       	rjmp	.+28     	; 0x7aa <navigation_get_sensor+0x58>
     78e:	41 91       	ld	r20, Z+
     790:	50 81       	ld	r21, Z
     792:	54 17       	cp	r21, r20
     794:	20 f4       	brcc	.+8      	; 0x79e <navigation_get_sensor+0x4c>
     796:	df 01       	movw	r26, r30
     798:	11 97       	sbiw	r26, 0x01	; 1
     79a:	5c 93       	st	X, r21
     79c:	40 83       	st	Z, r20
     79e:	8e 17       	cp	r24, r30
     7a0:	9f 07       	cpc	r25, r31
     7a2:	a9 f7       	brne	.-22     	; 0x78e <navigation_get_sensor+0x3c>
     7a4:	21 50       	subi	r18, 0x01	; 1
     7a6:	31 09       	sbc	r19, r1
     7a8:	49 f0       	breq	.+18     	; 0x7bc <navigation_get_sensor+0x6a>
     7aa:	12 16       	cp	r1, r18
     7ac:	13 06       	cpc	r1, r19
     7ae:	d4 f7       	brge	.-12     	; 0x7a4 <navigation_get_sensor+0x52>
     7b0:	fe 01       	movw	r30, r28
     7b2:	31 96       	adiw	r30, 0x01	; 1
     7b4:	cf 01       	movw	r24, r30
     7b6:	82 0f       	add	r24, r18
     7b8:	93 1f       	adc	r25, r19
     7ba:	e9 cf       	rjmp	.-46     	; 0x78e <navigation_get_sensor+0x3c>
     7bc:	8b 81       	ldd	r24, Y+3	; 0x03
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(sensorBufferSize) < HEIGHT_LIMIT)
     7ce:	85 e0       	ldi	r24, 0x05	; 5
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	bf df       	rcall	.-130    	; 0x752 <navigation_get_sensor>
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	84 36       	cpi	r24, 0x64	; 100
     7d8:	08 f0       	brcs	.+2      	; 0x7dc <navigation_detect_low_pass_obsticle+0xe>
     7da:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     7dc:	89 2f       	mov	r24, r25
     7de:	08 95       	ret

000007e0 <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     7e0:	f6 df       	rcall	.-20     	; 0x7ce <navigation_detect_low_pass_obsticle>
     7e2:	88 23       	and	r24, r24
     7e4:	e9 f0       	breq	.+58     	; 0x820 <navigation_low_pass_obstacle+0x40>
     7e6:	80 91 34 13 	lds	r24, 0x1334
     7ea:	81 11       	cpse	r24, r1
     7ec:	19 c0       	rjmp	.+50     	; 0x820 <navigation_low_pass_obstacle+0x40>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     7ee:	4b e1       	ldi	r20, 0x1B	; 27
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	69 ee       	ldi	r22, 0xE9	; 233
     7f4:	71 e1       	ldi	r23, 0x11	; 17
     7f6:	80 e4       	ldi	r24, 0x40	; 64
     7f8:	26 d5       	rcall	.+2636   	; 0x1246 <TWI_send_string_fixed_length>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fa:	2f ef       	ldi	r18, 0xFF	; 255
     7fc:	86 e7       	ldi	r24, 0x76	; 118
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	21 50       	subi	r18, 0x01	; 1
     802:	80 40       	sbci	r24, 0x00	; 0
     804:	90 40       	sbci	r25, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <navigation_low_pass_obstacle+0x20>
     808:	00 c0       	rjmp	.+0      	; 0x80a <navigation_low_pass_obstacle+0x2a>
     80a:	00 00       	nop
		_delay_ms(30);
		TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);
     80c:	4b e1       	ldi	r20, 0x1B	; 27
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	69 ee       	ldi	r22, 0xE9	; 233
     812:	71 e1       	ldi	r23, 0x11	; 17
     814:	80 e8       	ldi	r24, 0x80	; 128
     816:	17 d5       	rcall	.+2606   	; 0x1246 <TWI_send_string_fixed_length>
		lowPassObstacleFlag = 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 34 13 	sts	0x1334, r24
     81e:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     820:	d6 df       	rcall	.-84     	; 0x7ce <navigation_detect_low_pass_obsticle>
     822:	81 11       	cpse	r24, r1
     824:	02 c0       	rjmp	.+4      	; 0x82a <navigation_low_pass_obstacle+0x4a>
	{
		lowPassObstacleFlag = 0;
     826:	10 92 34 13 	sts	0x1334, r1
     82a:	08 95       	ret

0000082c <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	90 df       	rcall	.-224    	; 0x752 <navigation_get_sensor>
     832:	8c 33       	cpi	r24, 0x3C	; 60
     834:	28 f0       	brcs	.+10     	; 0x840 <navigation_check_right_turn+0x14>
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	8b df       	rcall	.-234    	; 0x752 <navigation_get_sensor>
     83c:	8c 33       	cpi	r24, 0x3C	; 60
     83e:	40 f4       	brcc	.+16     	; 0x850 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	86 df       	rcall	.-244    	; 0x752 <navigation_get_sensor>
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	86 34       	cpi	r24, 0x46	; 70
     84a:	18 f4       	brcc	.+6      	; 0x852 <navigation_check_right_turn+0x26>
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	01 c0       	rjmp	.+2      	; 0x852 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     850:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     852:	89 2f       	mov	r24, r25
     854:	08 95       	ret

00000856 <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	7b df       	rcall	.-266    	; 0x752 <navigation_get_sensor>
     85c:	8c 33       	cpi	r24, 0x3C	; 60
     85e:	28 f0       	brcs	.+10     	; 0x86a <navigation_check_left_turn+0x14>
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	76 df       	rcall	.-276    	; 0x752 <navigation_get_sensor>
     866:	8c 33       	cpi	r24, 0x3C	; 60
     868:	40 f4       	brcc	.+16     	; 0x87a <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	71 df       	rcall	.-286    	; 0x752 <navigation_get_sensor>
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	86 34       	cpi	r24, 0x46	; 70
     874:	18 f4       	brcc	.+6      	; 0x87c <navigation_check_left_turn+0x26>
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	01 c0       	rjmp	.+2      	; 0x87c <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     87a:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     87c:	89 2f       	mov	r24, r25
     87e:	08 95       	ret

00000880 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     880:	cf 92       	push	r12
     882:	df 92       	push	r13
     884:	ef 92       	push	r14
     886:	ff 92       	push	r15
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	6b 01       	movw	r12, r22
     88e:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     890:	80 91 07 01 	lds	r24, 0x0107
     894:	88 23       	and	r24, r24
     896:	09 f4       	brne	.+2      	; 0x89a <navigation_direction_regulation+0x1a>
     898:	98 c0       	rjmp	.+304    	; 0x9ca <navigation_direction_regulation+0x14a>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	59 df       	rcall	.-334    	; 0x752 <navigation_get_sensor>
     8a0:	c8 2f       	mov	r28, r24
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	55 df       	rcall	.-342    	; 0x752 <navigation_get_sensor>
     8a8:	2c 2f       	mov	r18, r28
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	a9 01       	movw	r20, r18
     8ae:	48 1b       	sub	r20, r24
     8b0:	51 09       	sbc	r21, r1
     8b2:	ca 01       	movw	r24, r20
     8b4:	99 23       	and	r25, r25
     8b6:	1c f4       	brge	.+6      	; 0x8be <navigation_direction_regulation+0x3e>
     8b8:	91 95       	neg	r25
     8ba:	81 95       	neg	r24
     8bc:	91 09       	sbc	r25, r1
     8be:	0a 97       	sbiw	r24, 0x0a	; 10
     8c0:	b4 f5       	brge	.+108    	; 0x92e <navigation_direction_regulation+0xae>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	45 df       	rcall	.-374    	; 0x752 <navigation_get_sensor>
     8c8:	82 33       	cpi	r24, 0x32	; 50
     8ca:	88 f5       	brcc	.+98     	; 0x92e <navigation_direction_regulation+0xae>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	40 df       	rcall	.-384    	; 0x752 <navigation_get_sensor>
     8d2:	c8 2f       	mov	r28, r24
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	3c df       	rcall	.-392    	; 0x752 <navigation_get_sensor>
     8da:	d8 2f       	mov	r29, r24
     8dc:	c7 01       	movw	r24, r14
     8de:	b6 01       	movw	r22, r12
     8e0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <cos>
     8e4:	6b 01       	movw	r12, r22
     8e6:	7c 01       	movw	r14, r24
     8e8:	6d 2f       	mov	r22, r29
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	6c 0f       	add	r22, r28
     8ee:	71 1d       	adc	r23, r1
     8f0:	88 27       	eor	r24, r24
     8f2:	77 fd       	sbrc	r23, 7
     8f4:	80 95       	com	r24
     8f6:	98 2f       	mov	r25, r24
     8f8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	5f e3       	ldi	r21, 0x3F	; 63
     904:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 ef       	ldi	r20, 0xF0	; 240
     90e:	50 e4       	ldi	r21, 0x40	; 64
     910:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3>
     914:	a7 01       	movw	r20, r14
     916:	96 01       	movw	r18, r12
     918:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e2       	ldi	r20, 0x20	; 32
     922:	52 e4       	ldi	r21, 0x42	; 66
     924:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__subsf3>
     928:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixsfsi>
     92c:	e5 c0       	rjmp	.+458    	; 0xaf8 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0f df       	rcall	.-482    	; 0x752 <navigation_get_sensor>
     934:	c8 2f       	mov	r28, r24
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0b df       	rcall	.-490    	; 0x752 <navigation_get_sensor>
     93c:	2c 2f       	mov	r18, r28
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	a9 01       	movw	r20, r18
     942:	48 1b       	sub	r20, r24
     944:	51 09       	sbc	r21, r1
     946:	ca 01       	movw	r24, r20
     948:	99 23       	and	r25, r25
     94a:	1c f4       	brge	.+6      	; 0x952 <navigation_direction_regulation+0xd2>
     94c:	91 95       	neg	r25
     94e:	81 95       	neg	r24
     950:	91 09       	sbc	r25, r1
     952:	0a 97       	sbiw	r24, 0x0a	; 10
     954:	0c f0       	brlt	.+2      	; 0x958 <navigation_direction_regulation+0xd8>
     956:	21 c1       	rjmp	.+578    	; 0xb9a <navigation_direction_regulation+0x31a>
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	fa de       	rcall	.-524    	; 0x752 <navigation_get_sensor>
     95e:	82 33       	cpi	r24, 0x32	; 50
     960:	08 f0       	brcs	.+2      	; 0x964 <navigation_direction_regulation+0xe4>
     962:	1b c1       	rjmp	.+566    	; 0xb9a <navigation_direction_regulation+0x31a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	f4 de       	rcall	.-536    	; 0x752 <navigation_get_sensor>
     96a:	c8 2f       	mov	r28, r24
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	f0 de       	rcall	.-544    	; 0x752 <navigation_get_sensor>
     972:	d8 2f       	mov	r29, r24
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
     978:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <cos>
     97c:	6b 01       	movw	r12, r22
     97e:	7c 01       	movw	r14, r24
     980:	6d 2f       	mov	r22, r29
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	6c 0f       	add	r22, r28
     986:	71 1d       	adc	r23, r1
     988:	88 27       	eor	r24, r24
     98a:	77 fd       	sbrc	r23, 7
     98c:	80 95       	com	r24
     98e:	98 2f       	mov	r25, r24
     990:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	5f e3       	ldi	r21, 0x3F	; 63
     99c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 ef       	ldi	r20, 0xF0	; 240
     9a6:	50 e4       	ldi	r21, 0x40	; 64
     9a8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3>
     9ac:	a7 01       	movw	r20, r14
     9ae:	96 01       	movw	r18, r12
     9b0:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	80 e2       	ldi	r24, 0x20	; 32
     9be:	92 e4       	ldi	r25, 0x42	; 66
     9c0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__subsf3>
     9c4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixsfsi>
     9c8:	97 c0       	rjmp	.+302    	; 0xaf8 <navigation_direction_regulation+0x278>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	c1 de       	rcall	.-638    	; 0x752 <navigation_get_sensor>
     9d0:	c8 2f       	mov	r28, r24
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	bd de       	rcall	.-646    	; 0x752 <navigation_get_sensor>
     9d8:	2c 2f       	mov	r18, r28
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	a9 01       	movw	r20, r18
     9de:	48 1b       	sub	r20, r24
     9e0:	51 09       	sbc	r21, r1
     9e2:	ca 01       	movw	r24, r20
     9e4:	99 23       	and	r25, r25
     9e6:	1c f4       	brge	.+6      	; 0x9ee <navigation_direction_regulation+0x16e>
     9e8:	91 95       	neg	r25
     9ea:	81 95       	neg	r24
     9ec:	91 09       	sbc	r25, r1
     9ee:	0a 97       	sbiw	r24, 0x0a	; 10
     9f0:	c4 f5       	brge	.+112    	; 0xa62 <navigation_direction_regulation+0x1e2>
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	ad de       	rcall	.-678    	; 0x752 <navigation_get_sensor>
     9f8:	82 33       	cpi	r24, 0x32	; 50
     9fa:	98 f5       	brcc	.+102    	; 0xa62 <navigation_direction_regulation+0x1e2>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a8 de       	rcall	.-688    	; 0x752 <navigation_get_sensor>
     a02:	c8 2f       	mov	r28, r24
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a4 de       	rcall	.-696    	; 0x752 <navigation_get_sensor>
     a0a:	d8 2f       	mov	r29, r24
     a0c:	c7 01       	movw	r24, r14
     a0e:	b6 01       	movw	r22, r12
     a10:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <cos>
     a14:	6b 01       	movw	r12, r22
     a16:	7c 01       	movw	r14, r24
     a18:	6d 2f       	mov	r22, r29
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	6c 0f       	add	r22, r28
     a1e:	71 1d       	adc	r23, r1
     a20:	88 27       	eor	r24, r24
     a22:	77 fd       	sbrc	r23, 7
     a24:	80 95       	com	r24
     a26:	98 2f       	mov	r25, r24
     a28:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 ef       	ldi	r20, 0xF0	; 240
     a3e:	50 e4       	ldi	r21, 0x40	; 64
     a40:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3>
     a44:	a7 01       	movw	r20, r14
     a46:	96 01       	movw	r18, r12
     a48:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	80 e2       	ldi	r24, 0x20	; 32
     a56:	92 e4       	ldi	r25, 0x42	; 66
     a58:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__subsf3>
     a5c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixsfsi>
     a60:	4b c0       	rjmp	.+150    	; 0xaf8 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	75 de       	rcall	.-790    	; 0x752 <navigation_get_sensor>
     a68:	c8 2f       	mov	r28, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	71 de       	rcall	.-798    	; 0x752 <navigation_get_sensor>
     a70:	2c 2f       	mov	r18, r28
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	a9 01       	movw	r20, r18
     a76:	48 1b       	sub	r20, r24
     a78:	51 09       	sbc	r21, r1
     a7a:	ca 01       	movw	r24, r20
     a7c:	99 23       	and	r25, r25
     a7e:	1c f4       	brge	.+6      	; 0xa86 <navigation_direction_regulation+0x206>
     a80:	91 95       	neg	r25
     a82:	81 95       	neg	r24
     a84:	91 09       	sbc	r25, r1
     a86:	0a 97       	sbiw	r24, 0x0a	; 10
     a88:	0c f0       	brlt	.+2      	; 0xa8c <navigation_direction_regulation+0x20c>
     a8a:	87 c0       	rjmp	.+270    	; 0xb9a <navigation_direction_regulation+0x31a>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	60 de       	rcall	.-832    	; 0x752 <navigation_get_sensor>
     a92:	82 33       	cpi	r24, 0x32	; 50
     a94:	08 f0       	brcs	.+2      	; 0xa98 <navigation_direction_regulation+0x218>
     a96:	81 c0       	rjmp	.+258    	; 0xb9a <navigation_direction_regulation+0x31a>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	5a de       	rcall	.-844    	; 0x752 <navigation_get_sensor>
     a9e:	c8 2f       	mov	r28, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	56 de       	rcall	.-852    	; 0x752 <navigation_get_sensor>
     aa6:	d8 2f       	mov	r29, r24
     aa8:	c7 01       	movw	r24, r14
     aaa:	b6 01       	movw	r22, r12
     aac:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <cos>
     ab0:	6b 01       	movw	r12, r22
     ab2:	7c 01       	movw	r14, r24
     ab4:	6d 2f       	mov	r22, r29
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	6c 0f       	add	r22, r28
     aba:	71 1d       	adc	r23, r1
     abc:	88 27       	eor	r24, r24
     abe:	77 fd       	sbrc	r23, 7
     ac0:	80 95       	com	r24
     ac2:	98 2f       	mov	r25, r24
     ac4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	5f e3       	ldi	r21, 0x3F	; 63
     ad0:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 ef       	ldi	r20, 0xF0	; 240
     ada:	50 e4       	ldi	r21, 0x40	; 64
     adc:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3>
     ae0:	a7 01       	movw	r20, r14
     ae2:	96 01       	movw	r18, r12
     ae4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e2       	ldi	r20, 0x20	; 32
     aee:	52 e4       	ldi	r21, 0x42	; 66
     af0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__subsf3>
     af4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     af8:	cb 01       	movw	r24, r22
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	03 97       	sbiw	r24, 0x03	; 3
     afe:	08 f4       	brcc	.+2      	; 0xb02 <navigation_direction_regulation+0x282>
     b00:	47 c0       	rjmp	.+142    	; 0xb90 <navigation_direction_regulation+0x310>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     b02:	88 27       	eor	r24, r24
     b04:	77 fd       	sbrc	r23, 7
     b06:	80 95       	com	r24
     b08:	98 2f       	mov	r25, r24
     b0a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
     b0e:	20 91 03 01 	lds	r18, 0x0103
     b12:	30 91 04 01 	lds	r19, 0x0104
     b16:	40 91 05 01 	lds	r20, 0x0105
     b1a:	50 91 06 01 	lds	r21, 0x0106
     b1e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulsf3>
     b22:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <atan>
     b26:	c6 2e       	mov	r12, r22
     b28:	d7 2e       	mov	r13, r23
     b2a:	e8 2e       	mov	r14, r24
     b2c:	f9 2e       	mov	r15, r25
		if(dir < 0)
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	a9 01       	movw	r20, r18
     b34:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__cmpsf2>
     b38:	88 23       	and	r24, r24
     b3a:	7c f4       	brge	.+30     	; 0xb5a <navigation_direction_regulation+0x2da>
		{
			dir += 2*PI;
     b3c:	2b ed       	ldi	r18, 0xDB	; 219
     b3e:	3f e0       	ldi	r19, 0x0F	; 15
     b40:	49 ec       	ldi	r20, 0xC9	; 201
     b42:	50 e4       	ldi	r21, 0x40	; 64
     b44:	6c 2d       	mov	r22, r12
     b46:	7d 2d       	mov	r23, r13
     b48:	8e 2d       	mov	r24, r14
     b4a:	9f 2d       	mov	r25, r15
     b4c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3>
     b50:	c6 2e       	mov	r12, r22
     b52:	d7 2e       	mov	r13, r23
     b54:	e8 2e       	mov	r14, r24
     b56:	f9 2e       	mov	r15, r25
     b58:	24 c0       	rjmp	.+72     	; 0xba2 <navigation_direction_regulation+0x322>
		} else if(dir >= 2*PI)
     b5a:	2b ed       	ldi	r18, 0xDB	; 219
     b5c:	3f e0       	ldi	r19, 0x0F	; 15
     b5e:	49 ec       	ldi	r20, 0xC9	; 201
     b60:	50 e4       	ldi	r21, 0x40	; 64
     b62:	6c 2d       	mov	r22, r12
     b64:	7d 2d       	mov	r23, r13
     b66:	8e 2d       	mov	r24, r14
     b68:	9f 2d       	mov	r25, r15
     b6a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__gesf2>
     b6e:	88 23       	and	r24, r24
     b70:	c4 f0       	brlt	.+48     	; 0xba2 <navigation_direction_regulation+0x322>
		{
			dir -= 2*PI;
     b72:	2b ed       	ldi	r18, 0xDB	; 219
     b74:	3f e0       	ldi	r19, 0x0F	; 15
     b76:	49 ec       	ldi	r20, 0xC9	; 201
     b78:	50 e4       	ldi	r21, 0x40	; 64
     b7a:	6c 2d       	mov	r22, r12
     b7c:	7d 2d       	mov	r23, r13
     b7e:	8e 2d       	mov	r24, r14
     b80:	9f 2d       	mov	r25, r15
     b82:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__subsf3>
     b86:	c6 2e       	mov	r12, r22
     b88:	d7 2e       	mov	r13, r23
     b8a:	e8 2e       	mov	r14, r24
     b8c:	f9 2e       	mov	r15, r25
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <navigation_direction_regulation+0x322>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     b90:	c1 2c       	mov	r12, r1
     b92:	d1 2c       	mov	r13, r1
     b94:	e1 2c       	mov	r14, r1
     b96:	f1 2c       	mov	r15, r1
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <navigation_direction_regulation+0x322>
     b9a:	c1 2c       	mov	r12, r1
     b9c:	d1 2c       	mov	r13, r1
     b9e:	e1 2c       	mov	r14, r1
     ba0:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     ba2:	6c 2d       	mov	r22, r12
     ba4:	7d 2d       	mov	r23, r13
     ba6:	8e 2d       	mov	r24, r14
     ba8:	9f 2d       	mov	r25, r15
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	08 95       	ret

00000bb8 <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     bc0:	80 91 07 01 	lds	r24, 0x0107
     bc4:	88 23       	and	r24, r24
     bc6:	09 f4       	brne	.+2      	; 0xbca <navigation_angle_offset+0x12>
     bc8:	6c c0       	rjmp	.+216    	; 0xca2 <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	c1 dd       	rcall	.-1150   	; 0x752 <navigation_get_sensor>
     bd0:	f8 2e       	mov	r15, r24
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	bd dd       	rcall	.-1158   	; 0x752 <navigation_get_sensor>
     bd8:	2f 2d       	mov	r18, r15
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	a9 01       	movw	r20, r18
     bde:	48 1b       	sub	r20, r24
     be0:	51 09       	sbc	r21, r1
     be2:	ca 01       	movw	r24, r20
     be4:	99 23       	and	r25, r25
     be6:	1c f4       	brge	.+6      	; 0xbee <navigation_angle_offset+0x36>
     be8:	91 95       	neg	r25
     bea:	81 95       	neg	r24
     bec:	91 09       	sbc	r25, r1
     bee:	0a 97       	sbiw	r24, 0x0a	; 10
     bf0:	0c f5       	brge	.+66     	; 0xc34 <navigation_angle_offset+0x7c>
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	ad dd       	rcall	.-1190   	; 0x752 <navigation_get_sensor>
     bf8:	82 33       	cpi	r24, 0x32	; 50
     bfa:	e0 f4       	brcc	.+56     	; 0xc34 <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	a8 dd       	rcall	.-1200   	; 0x752 <navigation_get_sensor>
     c02:	f8 2e       	mov	r15, r24
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	a4 dd       	rcall	.-1208   	; 0x752 <navigation_get_sensor>
     c0a:	6f 2d       	mov	r22, r15
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	68 1b       	sub	r22, r24
     c10:	71 09       	sbc	r23, r1
     c12:	88 27       	eor	r24, r24
     c14:	77 fd       	sbrc	r23, 7
     c16:	80 95       	com	r24
     c18:	98 2f       	mov	r25, r24
     c1a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	48 e6       	ldi	r20, 0x68	; 104
     c24:	51 e4       	ldi	r21, 0x41	; 65
     c26:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divsf3>
     c2a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <atan>
     c2e:	6b 01       	movw	r12, r22
     c30:	7c 01       	movw	r14, r24
     c32:	a0 c0       	rjmp	.+320    	; 0xd74 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	8c dd       	rcall	.-1256   	; 0x752 <navigation_get_sensor>
     c3a:	f8 2e       	mov	r15, r24
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	88 dd       	rcall	.-1264   	; 0x752 <navigation_get_sensor>
     c42:	2f 2d       	mov	r18, r15
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	a9 01       	movw	r20, r18
     c48:	48 1b       	sub	r20, r24
     c4a:	51 09       	sbc	r21, r1
     c4c:	ca 01       	movw	r24, r20
     c4e:	99 23       	and	r25, r25
     c50:	1c f4       	brge	.+6      	; 0xc58 <navigation_angle_offset+0xa0>
     c52:	91 95       	neg	r25
     c54:	81 95       	neg	r24
     c56:	91 09       	sbc	r25, r1
     c58:	0a 97       	sbiw	r24, 0x0a	; 10
     c5a:	0c f0       	brlt	.+2      	; 0xc5e <navigation_angle_offset+0xa6>
     c5c:	9a c0       	rjmp	.+308    	; 0xd92 <navigation_angle_offset+0x1da>
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	77 dd       	rcall	.-1298   	; 0x752 <navigation_get_sensor>
     c64:	82 33       	cpi	r24, 0x32	; 50
     c66:	08 f0       	brcs	.+2      	; 0xc6a <navigation_angle_offset+0xb2>
     c68:	94 c0       	rjmp	.+296    	; 0xd92 <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	71 dd       	rcall	.-1310   	; 0x752 <navigation_get_sensor>
     c70:	f8 2e       	mov	r15, r24
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	6d dd       	rcall	.-1318   	; 0x752 <navigation_get_sensor>
     c78:	6f 2d       	mov	r22, r15
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	68 1b       	sub	r22, r24
     c7e:	71 09       	sbc	r23, r1
     c80:	88 27       	eor	r24, r24
     c82:	77 fd       	sbrc	r23, 7
     c84:	80 95       	com	r24
     c86:	98 2f       	mov	r25, r24
     c88:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	48 e6       	ldi	r20, 0x68	; 104
     c92:	51 e4       	ldi	r21, 0x41	; 65
     c94:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divsf3>
     c98:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <atan>
     c9c:	6b 01       	movw	r12, r22
     c9e:	7c 01       	movw	r14, r24
     ca0:	69 c0       	rjmp	.+210    	; 0xd74 <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	55 dd       	rcall	.-1366   	; 0x752 <navigation_get_sensor>
     ca8:	f8 2e       	mov	r15, r24
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	51 dd       	rcall	.-1374   	; 0x752 <navigation_get_sensor>
     cb0:	2f 2d       	mov	r18, r15
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	a9 01       	movw	r20, r18
     cb6:	48 1b       	sub	r20, r24
     cb8:	51 09       	sbc	r21, r1
     cba:	ca 01       	movw	r24, r20
     cbc:	99 23       	and	r25, r25
     cbe:	1c f4       	brge	.+6      	; 0xcc6 <navigation_angle_offset+0x10e>
     cc0:	91 95       	neg	r25
     cc2:	81 95       	neg	r24
     cc4:	91 09       	sbc	r25, r1
     cc6:	0a 97       	sbiw	r24, 0x0a	; 10
     cc8:	0c f5       	brge	.+66     	; 0xd0c <navigation_angle_offset+0x154>
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	41 dd       	rcall	.-1406   	; 0x752 <navigation_get_sensor>
     cd0:	82 33       	cpi	r24, 0x32	; 50
     cd2:	e0 f4       	brcc	.+56     	; 0xd0c <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	3c dd       	rcall	.-1416   	; 0x752 <navigation_get_sensor>
     cda:	f8 2e       	mov	r15, r24
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	38 dd       	rcall	.-1424   	; 0x752 <navigation_get_sensor>
     ce2:	6f 2d       	mov	r22, r15
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	68 1b       	sub	r22, r24
     ce8:	71 09       	sbc	r23, r1
     cea:	88 27       	eor	r24, r24
     cec:	77 fd       	sbrc	r23, 7
     cee:	80 95       	com	r24
     cf0:	98 2f       	mov	r25, r24
     cf2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	48 e6       	ldi	r20, 0x68	; 104
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divsf3>
     d02:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <atan>
     d06:	6b 01       	movw	r12, r22
     d08:	7c 01       	movw	r14, r24
     d0a:	34 c0       	rjmp	.+104    	; 0xd74 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	20 dd       	rcall	.-1472   	; 0x752 <navigation_get_sensor>
     d12:	f8 2e       	mov	r15, r24
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	1c dd       	rcall	.-1480   	; 0x752 <navigation_get_sensor>
     d1a:	2f 2d       	mov	r18, r15
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	a9 01       	movw	r20, r18
     d20:	48 1b       	sub	r20, r24
     d22:	51 09       	sbc	r21, r1
     d24:	ca 01       	movw	r24, r20
     d26:	99 23       	and	r25, r25
     d28:	1c f4       	brge	.+6      	; 0xd30 <navigation_angle_offset+0x178>
     d2a:	91 95       	neg	r25
     d2c:	81 95       	neg	r24
     d2e:	91 09       	sbc	r25, r1
     d30:	0a 97       	sbiw	r24, 0x0a	; 10
     d32:	7c f5       	brge	.+94     	; 0xd92 <navigation_angle_offset+0x1da>
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0c dd       	rcall	.-1512   	; 0x752 <navigation_get_sensor>
     d3a:	82 33       	cpi	r24, 0x32	; 50
     d3c:	50 f5       	brcc	.+84     	; 0xd92 <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	07 dd       	rcall	.-1522   	; 0x752 <navigation_get_sensor>
     d44:	f8 2e       	mov	r15, r24
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	03 dd       	rcall	.-1530   	; 0x752 <navigation_get_sensor>
     d4c:	6f 2d       	mov	r22, r15
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	68 1b       	sub	r22, r24
     d52:	71 09       	sbc	r23, r1
     d54:	88 27       	eor	r24, r24
     d56:	77 fd       	sbrc	r23, 7
     d58:	80 95       	com	r24
     d5a:	98 2f       	mov	r25, r24
     d5c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	48 e6       	ldi	r20, 0x68	; 104
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divsf3>
     d6c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <atan>
     d70:	6b 01       	movw	r12, r22
     d72:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     d74:	c7 01       	movw	r24, r14
     d76:	b6 01       	movw	r22, r12
     d78:	9f 77       	andi	r25, 0x7F	; 127
     d7a:	29 e2       	ldi	r18, 0x29	; 41
     d7c:	3c e5       	ldi	r19, 0x5C	; 92
     d7e:	4f e8       	ldi	r20, 0x8F	; 143
     d80:	5d e3       	ldi	r21, 0x3D	; 61
     d82:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__gesf2>
     d86:	18 16       	cp	r1, r24
     d88:	3c f0       	brlt	.+14     	; 0xd98 <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     d8a:	c1 2c       	mov	r12, r1
     d8c:	d1 2c       	mov	r13, r1
     d8e:	76 01       	movw	r14, r12
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <navigation_angle_offset+0x1e0>
     d92:	c1 2c       	mov	r12, r1
     d94:	d1 2c       	mov	r13, r1
     d96:	76 01       	movw	r14, r12
     d98:	7c 2d       	mov	r23, r12
	}
}
     d9a:	67 2f       	mov	r22, r23
     d9c:	7d 2d       	mov	r23, r13
     d9e:	8e 2d       	mov	r24, r14
     da0:	9f 2d       	mov	r25, r15
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	cf 90       	pop	r12
     daa:	08 95       	ret

00000dac <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     dac:	1f 92       	push	r1
     dae:	0f 92       	push	r0
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	0f 92       	push	r0
     db4:	11 24       	eor	r1, r1
     db6:	0b b6       	in	r0, 0x3b	; 59
     db8:	0f 92       	push	r0
     dba:	2f 93       	push	r18
     dbc:	3f 93       	push	r19
     dbe:	4f 93       	push	r20
     dc0:	5f 93       	push	r21
     dc2:	6f 93       	push	r22
     dc4:	7f 93       	push	r23
     dc6:	8f 93       	push	r24
     dc8:	9f 93       	push	r25
     dca:	af 93       	push	r26
     dcc:	bf 93       	push	r27
     dce:	ef 93       	push	r30
     dd0:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	73 dc       	rcall	.-1818   	; 0x6bc <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	77 dc       	rcall	.-1810   	; 0x6c8 <navigation_set_autonomous_walk>
}
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0b be       	out	0x3b, r0	; 59
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	0b b6       	in	r0, 0x3b	; 59
     e0c:	0f 92       	push	r0
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	4f 93       	push	r20
     e14:	5f 93       	push	r21
     e16:	6f 93       	push	r22
     e18:	7f 93       	push	r23
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	af 93       	push	r26
     e20:	bf 93       	push	r27
     e22:	ef 93       	push	r30
     e24:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	49 dc       	rcall	.-1902   	; 0x6bc <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	4d dc       	rcall	.-1894   	; 0x6c8 <navigation_set_autonomous_walk>
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	bf 91       	pop	r27
     e34:	af 91       	pop	r26
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	7f 91       	pop	r23
     e3c:	6f 91       	pop	r22
     e3e:	5f 91       	pop	r21
     e40:	4f 91       	pop	r20
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0b be       	out	0x3b, r0	; 59
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <main>:
#include "Navigation.h"
#include "autonomouswalk.h"

int main(void)
{
	USART_init();
     e54:	7e d4       	rcall	.+2300   	; 0x1752 <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); // send messages from gang to the display, not the computer
     e56:	80 e8       	ldi	r24, 0x80	; 128
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	87 d4       	rcall	.+2318   	; 0x176a <USART_set_twi_message_destination>
	sei();
     e5c:	78 94       	sei
	TWI_init(ST_ADDRESS);
     e5e:	80 e2       	ldi	r24, 0x20	; 32
     e60:	41 d1       	rcall	.+642    	; 0x10e4 <TWI_init>
	init_counters();
     e62:	ac db       	rcall	.-2216   	; 0x5bc <init_counters>
	
	//LED
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
     e64:	81 b1       	in	r24, 0x01	; 1
     e66:	83 60       	ori	r24, 0x03	; 3
     e68:	81 b9       	out	0x01, r24	; 1
	DDRC |= (1<<PORTC6 | 1<<PORTC7);
     e6a:	87 b1       	in	r24, 0x07	; 7
     e6c:	80 6c       	ori	r24, 0xC0	; 192
     e6e:	87 b9       	out	0x07, r24	; 7
	
	//Buttons
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //For emphasize
     e70:	81 b1       	in	r24, 0x01	; 1
     e72:	8f 73       	andi	r24, 0x3F	; 63
     e74:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     e76:	e8 e6       	ldi	r30, 0x68	; 104
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //mask for porta6 and porta7
     e80:	eb e6       	ldi	r30, 0x6B	; 107
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 6c       	ori	r24, 0xC0	; 192
     e88:	80 83       	st	Z, r24
     e8a:	2f ef       	ldi	r18, 0xFF	; 255
     e8c:	83 e2       	ldi	r24, 0x23	; 35
     e8e:	94 ef       	ldi	r25, 0xF4	; 244
     e90:	21 50       	subi	r18, 0x01	; 1
     e92:	80 40       	sbci	r24, 0x00	; 0
     e94:	90 40       	sbci	r25, 0x00	; 0
     e96:	e1 f7       	brne	.-8      	; 0xe90 <main+0x3c>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <main+0x46>
     e9a:	00 00       	nop
	
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	14 dc       	rcall	.-2008   	; 0x6c8 <navigation_set_autonomous_walk>
		}
		else
		{
			if(TWI_command_flag())
			{
				PORTA ^= (1<<PORTA1);
     ea0:	c2 e0       	ldi	r28, 0x02	; 2
		/*if(TWI_sensor_flag())
		{
			PORTA ^= (1<<PORTA1);
			navigation_fill_buffer();
		}*/
		if(TWI_autonom_settings_flag())
     ea2:	80 d2       	rcall	.+1280   	; 0x13a4 <TWI_autonom_settings_flag>
     ea4:	88 23       	and	r24, r24
     ea6:	79 f0       	breq	.+30     	; 0xec6 <main+0x72>
		{
			uint8_t sett = TWI_get_autonom_settings();
     ea8:	63 d2       	rcall	.+1222   	; 0x1370 <TWI_get_autonom_settings>
			if(sett == 0)
     eaa:	81 11       	cpse	r24, r1
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <main+0x5e>
			{
				navigation_set_autonomous_walk(0);
     eae:	0c dc       	rcall	.-2024   	; 0x6c8 <navigation_set_autonomous_walk>
     eb0:	0a c0       	rjmp	.+20     	; 0xec6 <main+0x72>
			}
			else if(sett == 1)
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	21 f4       	brne	.+8      	; 0xebe <main+0x6a>
			{
				navigation_set_autonomous_walk(1);
     eb6:	08 dc       	rcall	.-2032   	; 0x6c8 <navigation_set_autonomous_walk>
				navigation_set_algorithm(1);
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	00 dc       	rcall	.-2048   	; 0x6bc <navigation_set_algorithm>
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <main+0x72>
			}
			else //sett == 2
			{
				navigation_set_autonomous_walk(1);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	03 dc       	rcall	.-2042   	; 0x6c8 <navigation_set_autonomous_walk>
				navigation_set_algorithm(0);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	fb db       	rcall	.-2058   	; 0x6bc <navigation_set_algorithm>
			}
		}
		
		if(navigation_autonomous_walk() == 1)
     ec6:	fd db       	rcall	.-2054   	; 0x6c2 <navigation_autonomous_walk>
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	49 f4       	brne	.+18     	; 0xede <main+0x8a>
		{
			if(TWI_control_settings_flag())
     ecc:	61 d2       	rcall	.+1218   	; 0x1390 <TWI_control_settings_flag>
     ece:	88 23       	and	r24, r24
     ed0:	21 f0       	breq	.+8      	; 0xeda <main+0x86>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	47 d2       	rcall	.+1166   	; 0x1366 <TWI_get_control_setting>
     ed8:	df db       	rcall	.-2114   	; 0x698 <navigation_set_Kp>
			}
			autonomouswalk_walk();
     eda:	e0 da       	rcall	.-2624   	; 0x49c <autonomouswalk_walk>
     edc:	07 c0       	rjmp	.+14     	; 0xeec <main+0x98>
		}
		else
		{
			if(TWI_command_flag())
     ede:	4e d2       	rcall	.+1180   	; 0x137c <TWI_command_flag>
     ee0:	88 23       	and	r24, r24
     ee2:	21 f0       	breq	.+8      	; 0xeec <main+0x98>
			{
				PORTA ^= (1<<PORTA1);
     ee4:	82 b1       	in	r24, 0x02	; 2
     ee6:	8c 27       	eor	r24, r28
     ee8:	82 b9       	out	0x02, r24	; 2
				USART_SendCommand();
     eea:	0a d5       	rcall	.+2580   	; 0x1900 <USART_SendCommand>
			}
		}
		
		if(TWI_elevation_flag())
     eec:	65 d2       	rcall	.+1226   	; 0x13b8 <TWI_elevation_flag>
     eee:	88 23       	and	r24, r24
     ef0:	29 f0       	breq	.+10     	; 0xefc <main+0xa8>
		{
			PORTA ^= (1<<PORTA0); 
     ef2:	92 b1       	in	r25, 0x02	; 2
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	89 27       	eor	r24, r25
     ef8:	82 b9       	out	0x02, r24	; 2
			USART_SendElevation();
     efa:	14 d5       	rcall	.+2600   	; 0x1924 <USART_SendElevation>
		}
		USART_DecodeRxFIFO();
     efc:	5d d6       	rcall	.+3258   	; 0x1bb8 <USART_DecodeRxFIFO>
    }
     efe:	d1 cf       	rjmp	.-94     	; 0xea2 <main+0x4e>

00000f00 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
	TCNT1 = 0;
     f0a:	10 92 85 00 	sts	0x0085, r1
     f0e:	10 92 84 00 	sts	0x0084, r1
}
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
	//TWI_send_float(C_ADDRESS, (float)navigation_get_sensor(0));
	TCNT3 = 0;
     f26:	10 92 95 00 	sts	0x0095, r1
     f2a:	10 92 94 00 	sts	0x0094, r1
}
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	0f 90       	pop	r0
     f34:	1f 90       	pop	r1
     f36:	18 95       	reti

00000f38 <__vector_4>:

//-------------------Buttons PinChange interrupt---------------------

ISR(PCINT0_vect)
{
     f38:	1f 92       	push	r1
     f3a:	0f 92       	push	r0
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	0f 92       	push	r0
     f40:	11 24       	eor	r1, r1
     f42:	0b b6       	in	r0, 0x3b	; 59
     f44:	0f 92       	push	r0
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     f5e:	06 9b       	sbis	0x00, 6	; 0
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	b1 db       	rcall	.-2206   	; 0x6c8 <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	a9 db       	rcall	.-2222   	; 0x6bc <navigation_set_algorithm>
		//test
		PORTC ^= (1<<PORTC6);
     f6a:	98 b1       	in	r25, 0x08	; 8
     f6c:	80 e4       	ldi	r24, 0x40	; 64
     f6e:	89 27       	eor	r24, r25
     f70:	88 b9       	out	0x08, r24	; 8
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <__vector_4+0x4e>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     f74:	07 9b       	sbis	0x00, 7	; 0
     f76:	07 c0       	rjmp	.+14     	; 0xf86 <__vector_4+0x4e>
	{
		navigation_set_autonomous_walk(1);
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	a6 db       	rcall	.-2228   	; 0x6c8 <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	9e db       	rcall	.-2244   	; 0x6bc <navigation_set_algorithm>
		//test
		PORTC ^= (1<<PORTC7);
     f80:	88 b1       	in	r24, 0x08	; 8
     f82:	80 58       	subi	r24, 0x80	; 128
     f84:	88 b9       	out	0x08, r24	; 8
	}	
     f86:	ff 91       	pop	r31
     f88:	ef 91       	pop	r30
     f8a:	bf 91       	pop	r27
     f8c:	af 91       	pop	r26
     f8e:	9f 91       	pop	r25
     f90:	8f 91       	pop	r24
     f92:	7f 91       	pop	r23
     f94:	6f 91       	pop	r22
     f96:	5f 91       	pop	r21
     f98:	4f 91       	pop	r20
     f9a:	3f 91       	pop	r19
     f9c:	2f 91       	pop	r18
     f9e:	0f 90       	pop	r0
     fa0:	0b be       	out	0x3b, r0	; 59
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <set_twi_reciever_enable>:
	
	//Do something with the message here... Send to display for now
	TWI_send_string_fixed_length(S_ADDRESS, msg, length);
	
	return 0;
}
     fac:	85 e4       	ldi	r24, 0x45	; 69
     fae:	80 93 bc 00 	sts	0x00BC, r24
     fb2:	08 95       	ret

00000fb4 <clear_int>:
     fb4:	81 ec       	ldi	r24, 0xC1	; 193
     fb6:	80 93 bc 00 	sts	0x00BC, r24
     fba:	08 95       	ret

00000fbc <start_bus>:
     fbc:	84 ea       	ldi	r24, 0xA4	; 164
     fbe:	80 93 bc 00 	sts	0x00BC, r24
     fc2:	08 95       	ret

00000fc4 <stop_bus>:
     fc4:	85 ed       	ldi	r24, 0xD5	; 213
     fc6:	80 93 bc 00 	sts	0x00BC, r24
     fca:	08 95       	ret

00000fcc <Error>:
     fcc:	80 91 b9 00 	lds	r24, 0x00B9
     fd0:	88 7f       	andi	r24, 0xF8	; 248
     fd2:	88 33       	cpi	r24, 0x38	; 56
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <Error+0xc>
     fd6:	f6 cf       	rjmp	.-20     	; 0xfc4 <stop_bus>
     fd8:	ed cf       	rjmp	.-38     	; 0xfb4 <clear_int>

00000fda <get_data>:
     fda:	80 91 bb 00 	lds	r24, 0x00BB
     fde:	08 95       	ret

00000fe0 <wait_for_bus>:
     fe0:	ec eb       	ldi	r30, 0xBC	; 188
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	88 23       	and	r24, r24
     fe8:	ec f7       	brge	.-6      	; 0xfe4 <wait_for_bus+0x4>
     fea:	08 95       	ret

00000fec <send_data_and_wait>:
     fec:	80 93 bb 00 	sts	0x00BB, r24
     ff0:	84 e8       	ldi	r24, 0x84	; 132
     ff2:	80 93 bc 00 	sts	0x00BC, r24
     ff6:	f4 cf       	rjmp	.-24     	; 0xfe0 <wait_for_bus>

00000ff8 <stop_twi>:
     ff8:	10 92 84 14 	sts	0x1484, r1
     ffc:	10 92 83 14 	sts	0x1483, r1
    1000:	10 92 8e 14 	sts	0x148E, r1
    1004:	10 92 8d 14 	sts	0x148D, r1
    1008:	10 92 79 14 	sts	0x1479, r1
    100c:	10 92 78 14 	sts	0x1478, r1
    1010:	10 92 7e 14 	sts	0x147E, r1
    1014:	10 92 7d 14 	sts	0x147D, r1
    1018:	10 92 81 14 	sts	0x1481, r1
    101c:	10 92 80 14 	sts	0x1480, r1
    1020:	08 95       	ret

00001022 <reset_TWI>:
    1022:	ec eb       	ldi	r30, 0xBC	; 188
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	80 6c       	ori	r24, 0xC0	; 192
    102a:	80 83       	st	Z, r24
    102c:	08 95       	ret

0000102e <get_control_settings_from_bus>:
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	c0 91 7d 14 	lds	r28, 0x147D
    1036:	d0 91 7e 14 	lds	r29, 0x147E
    103a:	cf df       	rcall	.-98     	; 0xfda <get_data>
    103c:	c6 58       	subi	r28, 0x86	; 134
    103e:	db 4e       	sbci	r29, 0xEB	; 235
    1040:	88 83       	st	Y, r24
    1042:	10 92 7e 14 	sts	0x147E, r1
    1046:	10 92 7d 14 	sts	0x147D, r1
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <get_autonom_settings_from_bus>:
    1050:	c4 df       	rcall	.-120    	; 0xfda <get_data>
    1052:	80 93 78 13 	sts	0x1378, r24
    1056:	08 95       	ret

00001058 <get_char_from_bus>:
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	c0 91 78 14 	lds	r28, 0x1478
    1060:	d0 91 79 14 	lds	r29, 0x1479
    1064:	ba df       	rcall	.-140    	; 0xfda <get_data>
    1066:	c7 58       	subi	r28, 0x87	; 135
    1068:	dc 4e       	sbci	r29, 0xEC	; 236
    106a:	88 83       	st	Y, r24
    106c:	80 91 78 14 	lds	r24, 0x1478
    1070:	90 91 79 14 	lds	r25, 0x1479
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	90 93 79 14 	sts	0x1479, r25
    107a:	80 93 78 14 	sts	0x1478, r24
    107e:	90 93 89 14 	sts	0x1489, r25
    1082:	80 93 88 14 	sts	0x1488, r24
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <get_sensor_from_bus>:
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	c0 91 8d 14 	lds	r28, 0x148D
    1094:	d0 91 8e 14 	lds	r29, 0x148E
    1098:	c8 30       	cpi	r28, 0x08	; 8
    109a:	d1 05       	cpc	r29, r1
    109c:	99 f4       	brne	.+38     	; 0x10c4 <get_sensor_from_bus+0x38>
    109e:	ef e8       	ldi	r30, 0x8F	; 143
    10a0:	f4 e1       	ldi	r31, 0x14	; 20
    10a2:	a7 e9       	ldi	r26, 0x97	; 151
    10a4:	b4 e1       	ldi	r27, 0x14	; 20
    10a6:	87 e9       	ldi	r24, 0x97	; 151
    10a8:	94 e1       	ldi	r25, 0x14	; 20
    10aa:	21 91       	ld	r18, Z+
    10ac:	2d 93       	st	X+, r18
    10ae:	e8 17       	cp	r30, r24
    10b0:	f9 07       	cpc	r31, r25
    10b2:	d9 f7       	brne	.-10     	; 0x10aa <get_sensor_from_bus+0x1e>
    10b4:	92 df       	rcall	.-220    	; 0xfda <get_data>
    10b6:	80 93 87 14 	sts	0x1487, r24
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 93 3b 13 	sts	0x133B, r24
    10c0:	1d db       	rcall	.-2502   	; 0x6fc <navigation_fill_buffer>
    10c2:	0d c0       	rjmp	.+26     	; 0x10de <get_sensor_from_bus+0x52>
    10c4:	8a df       	rcall	.-236    	; 0xfda <get_data>
    10c6:	c1 57       	subi	r28, 0x71	; 113
    10c8:	db 4e       	sbci	r29, 0xEB	; 235
    10ca:	88 83       	st	Y, r24
    10cc:	80 91 8d 14 	lds	r24, 0x148D
    10d0:	90 91 8e 14 	lds	r25, 0x148E
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	90 93 8e 14 	sts	0x148E, r25
    10da:	80 93 8d 14 	sts	0x148D, r24
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <TWI_init>:
    10e4:	80 93 7f 14 	sts	0x147F, r24
    10e8:	80 34       	cpi	r24, 0x40	; 64
    10ea:	79 f0       	breq	.+30     	; 0x110a <TWI_init+0x26>
    10ec:	80 38       	cpi	r24, 0x80	; 128
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <TWI_init+0x12>
    10f0:	80 32       	cpi	r24, 0x20	; 32
    10f2:	d1 f4       	brne	.+52     	; 0x1128 <TWI_init+0x44>
    10f4:	12 c0       	rjmp	.+36     	; 0x111a <TWI_init+0x36>
    10f6:	83 e0       	ldi	r24, 0x03	; 3
    10f8:	88 b9       	out	0x08, r24	; 8
    10fa:	58 df       	rcall	.-336    	; 0xfac <set_twi_reciever_enable>
    10fc:	8f e3       	ldi	r24, 0x3F	; 63
    10fe:	80 93 b8 00 	sts	0x00B8, r24
    1102:	81 e8       	ldi	r24, 0x81	; 129
    1104:	80 93 ba 00 	sts	0x00BA, r24
    1108:	08 95       	ret
    110a:	8f e3       	ldi	r24, 0x3F	; 63
    110c:	80 93 b8 00 	sts	0x00B8, r24
    1110:	4d df       	rcall	.-358    	; 0xfac <set_twi_reciever_enable>
    1112:	80 e4       	ldi	r24, 0x40	; 64
    1114:	80 93 ba 00 	sts	0x00BA, r24
    1118:	08 95       	ret
    111a:	8f e3       	ldi	r24, 0x3F	; 63
    111c:	80 93 b8 00 	sts	0x00B8, r24
    1120:	45 df       	rcall	.-374    	; 0xfac <set_twi_reciever_enable>
    1122:	81 e2       	ldi	r24, 0x21	; 33
    1124:	80 93 ba 00 	sts	0x00BA, r24
    1128:	08 95       	ret

0000112a <TWI_send_command>:
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	c8 2f       	mov	r28, r24
    1132:	d6 2f       	mov	r29, r22
    1134:	14 2f       	mov	r17, r20
    1136:	42 df       	rcall	.-380    	; 0xfbc <start_bus>
    1138:	53 df       	rcall	.-346    	; 0xfe0 <wait_for_bus>
    113a:	90 91 b9 00 	lds	r25, 0x00B9
    113e:	98 7f       	andi	r25, 0xF8	; 248
    1140:	98 30       	cpi	r25, 0x08	; 8
    1142:	19 f0       	breq	.+6      	; 0x114a <TWI_send_command+0x20>
    1144:	43 df       	rcall	.-378    	; 0xfcc <Error>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	34 c0       	rjmp	.+104    	; 0x11b2 <TWI_send_command+0x88>
    114a:	80 e2       	ldi	r24, 0x20	; 32
    114c:	4f df       	rcall	.-354    	; 0xfec <send_data_and_wait>
    114e:	80 91 b9 00 	lds	r24, 0x00B9
    1152:	88 7f       	andi	r24, 0xF8	; 248
    1154:	88 31       	cpi	r24, 0x18	; 24
    1156:	19 f0       	breq	.+6      	; 0x115e <TWI_send_command+0x34>
    1158:	39 df       	rcall	.-398    	; 0xfcc <Error>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	2a c0       	rjmp	.+84     	; 0x11b2 <TWI_send_command+0x88>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	45 df       	rcall	.-374    	; 0xfec <send_data_and_wait>
    1162:	80 91 b9 00 	lds	r24, 0x00B9
    1166:	88 7f       	andi	r24, 0xF8	; 248
    1168:	88 32       	cpi	r24, 0x28	; 40
    116a:	19 f0       	breq	.+6      	; 0x1172 <TWI_send_command+0x48>
    116c:	2f df       	rcall	.-418    	; 0xfcc <Error>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	20 c0       	rjmp	.+64     	; 0x11b2 <TWI_send_command+0x88>
    1172:	8c 2f       	mov	r24, r28
    1174:	3b df       	rcall	.-394    	; 0xfec <send_data_and_wait>
    1176:	80 91 b9 00 	lds	r24, 0x00B9
    117a:	88 7f       	andi	r24, 0xF8	; 248
    117c:	88 32       	cpi	r24, 0x28	; 40
    117e:	19 f0       	breq	.+6      	; 0x1186 <TWI_send_command+0x5c>
    1180:	25 df       	rcall	.-438    	; 0xfcc <Error>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	16 c0       	rjmp	.+44     	; 0x11b2 <TWI_send_command+0x88>
    1186:	8d 2f       	mov	r24, r29
    1188:	31 df       	rcall	.-414    	; 0xfec <send_data_and_wait>
    118a:	80 91 b9 00 	lds	r24, 0x00B9
    118e:	88 7f       	andi	r24, 0xF8	; 248
    1190:	88 32       	cpi	r24, 0x28	; 40
    1192:	19 f0       	breq	.+6      	; 0x119a <TWI_send_command+0x70>
    1194:	1b df       	rcall	.-458    	; 0xfcc <Error>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0c c0       	rjmp	.+24     	; 0x11b2 <TWI_send_command+0x88>
    119a:	81 2f       	mov	r24, r17
    119c:	27 df       	rcall	.-434    	; 0xfec <send_data_and_wait>
    119e:	80 91 b9 00 	lds	r24, 0x00B9
    11a2:	88 7f       	andi	r24, 0xF8	; 248
    11a4:	88 32       	cpi	r24, 0x28	; 40
    11a6:	19 f0       	breq	.+6      	; 0x11ae <TWI_send_command+0x84>
    11a8:	11 df       	rcall	.-478    	; 0xfcc <Error>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <TWI_send_command+0x88>
    11ae:	0a df       	rcall	.-492    	; 0xfc4 <stop_bus>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	08 95       	ret

000011ba <TWI_send_string>:
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	c8 2f       	mov	r28, r24
    11c8:	e6 2e       	mov	r14, r22
    11ca:	f7 2e       	mov	r15, r23
    11cc:	f7 de       	rcall	.-530    	; 0xfbc <start_bus>
    11ce:	08 df       	rcall	.-496    	; 0xfe0 <wait_for_bus>
    11d0:	90 91 b9 00 	lds	r25, 0x00B9
    11d4:	98 7f       	andi	r25, 0xF8	; 248
    11d6:	98 30       	cpi	r25, 0x08	; 8
    11d8:	19 f0       	breq	.+6      	; 0x11e0 <TWI_send_string+0x26>
    11da:	f8 de       	rcall	.-528    	; 0xfcc <Error>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	2c c0       	rjmp	.+88     	; 0x1238 <TWI_send_string+0x7e>
    11e0:	8c 2f       	mov	r24, r28
    11e2:	04 df       	rcall	.-504    	; 0xfec <send_data_and_wait>
    11e4:	80 91 b9 00 	lds	r24, 0x00B9
    11e8:	88 7f       	andi	r24, 0xF8	; 248
    11ea:	88 31       	cpi	r24, 0x18	; 24
    11ec:	19 f0       	breq	.+6      	; 0x11f4 <TWI_send_string+0x3a>
    11ee:	ee de       	rcall	.-548    	; 0xfcc <Error>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	22 c0       	rjmp	.+68     	; 0x1238 <TWI_send_string+0x7e>
    11f4:	89 e1       	ldi	r24, 0x19	; 25
    11f6:	fa de       	rcall	.-524    	; 0xfec <send_data_and_wait>
    11f8:	80 91 b9 00 	lds	r24, 0x00B9
    11fc:	88 7f       	andi	r24, 0xF8	; 248
    11fe:	88 32       	cpi	r24, 0x28	; 40
    1200:	29 f4       	brne	.+10     	; 0x120c <TWI_send_string+0x52>
    1202:	0e 2d       	mov	r16, r14
    1204:	1f 2d       	mov	r17, r15
    1206:	c0 e0       	ldi	r28, 0x00	; 0
    1208:	d0 e0       	ldi	r29, 0x00	; 0
    120a:	08 c0       	rjmp	.+16     	; 0x121c <TWI_send_string+0x62>
    120c:	df de       	rcall	.-578    	; 0xfcc <Error>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	13 c0       	rjmp	.+38     	; 0x1238 <TWI_send_string+0x7e>
    1212:	f8 01       	movw	r30, r16
    1214:	81 91       	ld	r24, Z+
    1216:	8f 01       	movw	r16, r30
    1218:	e9 de       	rcall	.-558    	; 0xfec <send_data_and_wait>
    121a:	21 96       	adiw	r28, 0x01	; 1
    121c:	ee 2d       	mov	r30, r14
    121e:	ff 2d       	mov	r31, r15
    1220:	df 01       	movw	r26, r30
    1222:	0d 90       	ld	r0, X+
    1224:	00 20       	and	r0, r0
    1226:	e9 f7       	brne	.-6      	; 0x1222 <TWI_send_string+0x68>
    1228:	11 97       	sbiw	r26, 0x01	; 1
    122a:	ae 1b       	sub	r26, r30
    122c:	bf 0b       	sbc	r27, r31
    122e:	ca 17       	cp	r28, r26
    1230:	db 07       	cpc	r29, r27
    1232:	78 f3       	brcs	.-34     	; 0x1212 <TWI_send_string+0x58>
    1234:	c7 de       	rcall	.-626    	; 0xfc4 <stop_bus>
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	08 95       	ret

00001246 <TWI_send_string_fixed_length>:
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	c8 2f       	mov	r28, r24
    1254:	e6 2e       	mov	r14, r22
    1256:	f7 2e       	mov	r15, r23
    1258:	8a 01       	movw	r16, r20
    125a:	b0 de       	rcall	.-672    	; 0xfbc <start_bus>
    125c:	c1 de       	rcall	.-638    	; 0xfe0 <wait_for_bus>
    125e:	90 91 b9 00 	lds	r25, 0x00B9
    1262:	98 7f       	andi	r25, 0xF8	; 248
    1264:	98 30       	cpi	r25, 0x08	; 8
    1266:	19 f0       	breq	.+6      	; 0x126e <TWI_send_string_fixed_length+0x28>
    1268:	b1 de       	rcall	.-670    	; 0xfcc <Error>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	23 c0       	rjmp	.+70     	; 0x12b4 <TWI_send_string_fixed_length+0x6e>
    126e:	8c 2f       	mov	r24, r28
    1270:	bd de       	rcall	.-646    	; 0xfec <send_data_and_wait>
    1272:	80 91 b9 00 	lds	r24, 0x00B9
    1276:	88 7f       	andi	r24, 0xF8	; 248
    1278:	88 31       	cpi	r24, 0x18	; 24
    127a:	19 f0       	breq	.+6      	; 0x1282 <TWI_send_string_fixed_length+0x3c>
    127c:	a7 de       	rcall	.-690    	; 0xfcc <Error>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	19 c0       	rjmp	.+50     	; 0x12b4 <TWI_send_string_fixed_length+0x6e>
    1282:	89 e1       	ldi	r24, 0x19	; 25
    1284:	b3 de       	rcall	.-666    	; 0xfec <send_data_and_wait>
    1286:	80 91 b9 00 	lds	r24, 0x00B9
    128a:	88 7f       	andi	r24, 0xF8	; 248
    128c:	88 32       	cpi	r24, 0x28	; 40
    128e:	21 f4       	brne	.+8      	; 0x1298 <TWI_send_string_fixed_length+0x52>
    1290:	10 16       	cp	r1, r16
    1292:	11 06       	cpc	r1, r17
    1294:	24 f0       	brlt	.+8      	; 0x129e <TWI_send_string_fixed_length+0x58>
    1296:	0c c0       	rjmp	.+24     	; 0x12b0 <TWI_send_string_fixed_length+0x6a>
    1298:	99 de       	rcall	.-718    	; 0xfcc <Error>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	0b c0       	rjmp	.+22     	; 0x12b4 <TWI_send_string_fixed_length+0x6e>
    129e:	ce 2d       	mov	r28, r14
    12a0:	df 2d       	mov	r29, r15
    12a2:	0c 0f       	add	r16, r28
    12a4:	1d 1f       	adc	r17, r29
    12a6:	89 91       	ld	r24, Y+
    12a8:	a1 de       	rcall	.-702    	; 0xfec <send_data_and_wait>
    12aa:	c0 17       	cp	r28, r16
    12ac:	d1 07       	cpc	r29, r17
    12ae:	d9 f7       	brne	.-10     	; 0x12a6 <TWI_send_string_fixed_length+0x60>
    12b0:	89 de       	rcall	.-750    	; 0xfc4 <stop_bus>
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	08 95       	ret

000012c2 <TWI_send_float>:
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <TWI_send_float+0xe>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <TWI_send_float+0x10>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	18 2f       	mov	r17, r24
    12d8:	49 83       	std	Y+1, r20	; 0x01
    12da:	5a 83       	std	Y+2, r21	; 0x02
    12dc:	6b 83       	std	Y+3, r22	; 0x03
    12de:	7c 83       	std	Y+4, r23	; 0x04
    12e0:	6d de       	rcall	.-806    	; 0xfbc <start_bus>
    12e2:	7e de       	rcall	.-772    	; 0xfe0 <wait_for_bus>
    12e4:	90 91 b9 00 	lds	r25, 0x00B9
    12e8:	98 7f       	andi	r25, 0xF8	; 248
    12ea:	98 30       	cpi	r25, 0x08	; 8
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <TWI_send_float+0x32>
    12ee:	6e de       	rcall	.-804    	; 0xfcc <Error>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	24 c0       	rjmp	.+72     	; 0x133c <TWI_send_float+0x7a>
    12f4:	81 2f       	mov	r24, r17
    12f6:	7a de       	rcall	.-780    	; 0xfec <send_data_and_wait>
    12f8:	80 91 b9 00 	lds	r24, 0x00B9
    12fc:	88 7f       	andi	r24, 0xF8	; 248
    12fe:	88 31       	cpi	r24, 0x18	; 24
    1300:	19 f0       	breq	.+6      	; 0x1308 <TWI_send_float+0x46>
    1302:	64 de       	rcall	.-824    	; 0xfcc <Error>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	1a c0       	rjmp	.+52     	; 0x133c <TWI_send_float+0x7a>
    1308:	86 e0       	ldi	r24, 0x06	; 6
    130a:	70 de       	rcall	.-800    	; 0xfec <send_data_and_wait>
    130c:	80 91 b9 00 	lds	r24, 0x00B9
    1310:	88 7f       	andi	r24, 0xF8	; 248
    1312:	88 32       	cpi	r24, 0x28	; 40
    1314:	19 f0       	breq	.+6      	; 0x131c <TWI_send_float+0x5a>
    1316:	5a de       	rcall	.-844    	; 0xfcc <Error>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	10 c0       	rjmp	.+32     	; 0x133c <TWI_send_float+0x7a>
    131c:	8e 01       	movw	r16, r28
    131e:	0f 5f       	subi	r16, 0xFF	; 255
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	7e 01       	movw	r14, r28
    1324:	85 e0       	ldi	r24, 0x05	; 5
    1326:	e8 0e       	add	r14, r24
    1328:	f1 1c       	adc	r15, r1
    132a:	f8 01       	movw	r30, r16
    132c:	81 91       	ld	r24, Z+
    132e:	8f 01       	movw	r16, r30
    1330:	5d de       	rcall	.-838    	; 0xfec <send_data_and_wait>
    1332:	0e 15       	cp	r16, r14
    1334:	1f 05       	cpc	r17, r15
    1336:	c9 f7       	brne	.-14     	; 0x132a <TWI_send_float+0x68>
    1338:	45 de       	rcall	.-886    	; 0xfc4 <stop_bus>
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	08 95       	ret

00001352 <TWI_get_command>:
    1352:	8b 58       	subi	r24, 0x8B	; 139
    1354:	9c 4e       	sbci	r25, 0xEC	; 236
    1356:	fc 01       	movw	r30, r24
    1358:	80 81       	ld	r24, Z
    135a:	08 95       	ret

0000135c <TWI_get_sensor>:
    135c:	89 56       	subi	r24, 0x69	; 105
    135e:	9b 4e       	sbci	r25, 0xEB	; 235
    1360:	fc 01       	movw	r30, r24
    1362:	80 81       	ld	r24, Z
    1364:	08 95       	ret

00001366 <TWI_get_control_setting>:
    1366:	86 58       	subi	r24, 0x86	; 134
    1368:	9b 4e       	sbci	r25, 0xEB	; 235
    136a:	fc 01       	movw	r30, r24
    136c:	80 81       	ld	r24, Z
    136e:	08 95       	ret

00001370 <TWI_get_autonom_settings>:
    1370:	80 91 78 13 	lds	r24, 0x1378
    1374:	08 95       	ret

00001376 <TWI_get_elevation>:
    1376:	80 91 85 14 	lds	r24, 0x1485
    137a:	08 95       	ret

0000137c <TWI_command_flag>:
    137c:	80 91 3a 13 	lds	r24, 0x133A
    1380:	88 23       	and	r24, r24
    1382:	21 f0       	breq	.+8      	; 0x138c <TWI_command_flag+0x10>
    1384:	10 92 3a 13 	sts	0x133A, r1
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	08 95       	ret
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	08 95       	ret

00001390 <TWI_control_settings_flag>:
    1390:	80 91 39 13 	lds	r24, 0x1339
    1394:	88 23       	and	r24, r24
    1396:	21 f0       	breq	.+8      	; 0x13a0 <TWI_control_settings_flag+0x10>
    1398:	10 92 39 13 	sts	0x1339, r1
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	08 95       	ret
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	08 95       	ret

000013a4 <TWI_autonom_settings_flag>:
    13a4:	80 91 38 13 	lds	r24, 0x1338
    13a8:	88 23       	and	r24, r24
    13aa:	21 f0       	breq	.+8      	; 0x13b4 <TWI_autonom_settings_flag+0x10>
    13ac:	10 92 38 13 	sts	0x1338, r1
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	08 95       	ret
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	08 95       	ret

000013b8 <TWI_elevation_flag>:
    13b8:	80 91 37 13 	lds	r24, 0x1337
    13bc:	88 23       	and	r24, r24
    13be:	21 f0       	breq	.+8      	; 0x13c8 <TWI_elevation_flag+0x10>
    13c0:	10 92 37 13 	sts	0x1337, r1
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	08 95       	ret
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	08 95       	ret

000013cc <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	d8 2f       	mov	r29, r24
    13d6:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
    13d8:	60 91 88 14 	lds	r22, 0x1488
    13dc:	80 91 08 01 	lds	r24, 0x0108
    13e0:	90 91 09 01 	lds	r25, 0x0109
    13e4:	16 d9       	rcall	.-3540   	; 0x612 <FifoWrite>
    13e6:	81 11       	cpse	r24, r1
    13e8:	1f c0       	rjmp	.+62     	; 0x1428 <write_to_TwiFIFO+0x5c>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    13ea:	20 91 88 14 	lds	r18, 0x1488
    13ee:	30 91 89 14 	lds	r19, 0x1489
    13f2:	12 16       	cp	r1, r18
    13f4:	13 06       	cpc	r1, r19
    13f6:	d4 f4       	brge	.+52     	; 0x142c <write_to_TwiFIFO+0x60>
    13f8:	0d 2f       	mov	r16, r29
    13fa:	1c 2f       	mov	r17, r28
    13fc:	c0 e0       	ldi	r28, 0x00	; 0
    13fe:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    1400:	f8 01       	movw	r30, r16
    1402:	61 91       	ld	r22, Z+
    1404:	8f 01       	movw	r16, r30
    1406:	80 91 08 01 	lds	r24, 0x0108
    140a:	90 91 09 01 	lds	r25, 0x0109
    140e:	01 d9       	rcall	.-3582   	; 0x612 <FifoWrite>
    1410:	81 11       	cpse	r24, r1
    1412:	0e c0       	rjmp	.+28     	; 0x1430 <write_to_TwiFIFO+0x64>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    1414:	21 96       	adiw	r28, 0x01	; 1
    1416:	80 91 88 14 	lds	r24, 0x1488
    141a:	90 91 89 14 	lds	r25, 0x1489
    141e:	c8 17       	cp	r28, r24
    1420:	d9 07       	cpc	r29, r25
    1422:	74 f3       	brlt	.-36     	; 0x1400 <write_to_TwiFIFO+0x34>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	05 c0       	rjmp	.+10     	; 0x1432 <write_to_TwiFIFO+0x66>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//Can't add length!?
		return 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <write_to_TwiFIFO+0x66>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <write_to_TwiFIFO+0x66>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//Can't add chars!?
			return 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	08 95       	ret

0000143c <__vector_26>:

//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	0b b6       	in	r0, 0x3b	; 59
    1448:	0f 92       	push	r0
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	ef 93       	push	r30
    1464:	ff 93       	push	r31
	switch(myAdress)
    1466:	80 91 7f 14 	lds	r24, 0x147F
    146a:	80 34       	cpi	r24, 0x40	; 64
    146c:	09 f4       	brne	.+2      	; 0x1470 <__vector_26+0x34>
    146e:	87 c0       	rjmp	.+270    	; 0x157e <__vector_26+0x142>
    1470:	80 38       	cpi	r24, 0x80	; 128
    1472:	21 f0       	breq	.+8      	; 0x147c <__vector_26+0x40>
    1474:	80 32       	cpi	r24, 0x20	; 32
    1476:	09 f0       	breq	.+2      	; 0x147a <__vector_26+0x3e>
    1478:	57 c1       	rjmp	.+686    	; 0x1728 <__vector_26+0x2ec>
    147a:	c9 c0       	rjmp	.+402    	; 0x160e <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    147c:	80 91 b9 00 	lds	r24, 0x00B9
    1480:	88 7f       	andi	r24, 0xF8	; 248
    1482:	80 36       	cpi	r24, 0x60	; 96
    1484:	29 f0       	breq	.+10     	; 0x1490 <__vector_26+0x54>
    1486:	80 91 b9 00 	lds	r24, 0x00B9
    148a:	88 7f       	andi	r24, 0xF8	; 248
    148c:	88 36       	cpi	r24, 0x68	; 104
    148e:	21 f4       	brne	.+8      	; 0x1498 <__vector_26+0x5c>
			{
				instruction = 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	80 93 82 14 	sts	0x1482, r24
    1496:	71 c0       	rjmp	.+226    	; 0x157a <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1498:	80 91 b9 00 	lds	r24, 0x00B9
    149c:	88 7f       	andi	r24, 0xF8	; 248
    149e:	80 37       	cpi	r24, 0x70	; 112
    14a0:	29 f0       	breq	.+10     	; 0x14ac <__vector_26+0x70>
    14a2:	80 91 b9 00 	lds	r24, 0x00B9
    14a6:	88 7f       	andi	r24, 0xF8	; 248
    14a8:	88 37       	cpi	r24, 0x78	; 120
    14aa:	39 f4       	brne	.+14     	; 0x14ba <__vector_26+0x7e>
			{
				currentInstruction = 255;
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	90 93 8c 14 	sts	0x148C, r25
    14b4:	80 93 8b 14 	sts	0x148B, r24
    14b8:	60 c0       	rjmp	.+192    	; 0x157a <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    14ba:	80 91 b9 00 	lds	r24, 0x00B9
    14be:	88 7f       	andi	r24, 0xF8	; 248
    14c0:	80 38       	cpi	r24, 0x80	; 128
    14c2:	b9 f5       	brne	.+110    	; 0x1532 <__vector_26+0xf6>
			{
				if(instruction)
    14c4:	80 91 82 14 	lds	r24, 0x1482
    14c8:	88 23       	and	r24, r24
    14ca:	41 f0       	breq	.+16     	; 0x14dc <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    14cc:	86 dd       	rcall	.-1268   	; 0xfda <get_data>
    14ce:	80 93 8b 14 	sts	0x148B, r24
    14d2:	10 92 8c 14 	sts	0x148C, r1
					instruction = 0;
    14d6:	10 92 82 14 	sts	0x1482, r1
    14da:	4f c0       	rjmp	.+158    	; 0x157a <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    14dc:	80 91 8b 14 	lds	r24, 0x148B
    14e0:	90 91 8c 14 	lds	r25, 0x148C
    14e4:	85 30       	cpi	r24, 0x05	; 5
    14e6:	91 05       	cpc	r25, r1
    14e8:	71 f0       	breq	.+28     	; 0x1506 <__vector_26+0xca>
    14ea:	24 f4       	brge	.+8      	; 0x14f4 <__vector_26+0xb8>
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <__vector_26+0xb6>
    14f0:	44 c0       	rjmp	.+136    	; 0x157a <__vector_26+0x13e>
    14f2:	07 c0       	rjmp	.+14     	; 0x1502 <__vector_26+0xc6>
    14f4:	86 30       	cpi	r24, 0x06	; 6
    14f6:	91 05       	cpc	r25, r1
    14f8:	51 f0       	breq	.+20     	; 0x150e <__vector_26+0xd2>
    14fa:	49 97       	sbiw	r24, 0x19	; 25
    14fc:	09 f0       	breq	.+2      	; 0x1500 <__vector_26+0xc4>
    14fe:	3d c0       	rjmp	.+122    	; 0x157a <__vector_26+0x13e>
    1500:	04 c0       	rjmp	.+8      	; 0x150a <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    1502:	95 dd       	rcall	.-1238   	; 0x102e <get_control_settings_from_bus>
							break;
    1504:	3a c0       	rjmp	.+116    	; 0x157a <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1506:	a4 dd       	rcall	.-1208   	; 0x1050 <get_autonom_settings_from_bus>
							break;
    1508:	38 c0       	rjmp	.+112    	; 0x157a <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    150a:	a6 dd       	rcall	.-1204   	; 0x1058 <get_char_from_bus>
							break;
    150c:	36 c0       	rjmp	.+108    	; 0x157a <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    150e:	c0 91 80 14 	lds	r28, 0x1480
    1512:	d0 91 81 14 	lds	r29, 0x1481
    1516:	61 dd       	rcall	.-1342   	; 0xfda <get_data>
    1518:	cf 58       	subi	r28, 0x8F	; 143
    151a:	dc 4e       	sbci	r29, 0xEC	; 236
    151c:	88 83       	st	Y, r24
	floatCounter += 1;
    151e:	80 91 80 14 	lds	r24, 0x1480
    1522:	90 91 81 14 	lds	r25, 0x1481
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	90 93 81 14 	sts	0x1481, r25
    152c:	80 93 80 14 	sts	0x1480, r24
    1530:	24 c0       	rjmp	.+72     	; 0x157a <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    1532:	80 91 b9 00 	lds	r24, 0x00B9
    1536:	88 7f       	andi	r24, 0xF8	; 248
    1538:	80 39       	cpi	r24, 0x90	; 144
    153a:	11 f4       	brne	.+4      	; 0x1540 <__vector_26+0x104>
			{
				get_sensor_from_bus();
    153c:	a7 dd       	rcall	.-1202   	; 0x108c <get_sensor_from_bus>
    153e:	1d c0       	rjmp	.+58     	; 0x157a <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    1540:	80 91 b9 00 	lds	r24, 0x00B9
    1544:	88 7f       	andi	r24, 0xF8	; 248
    1546:	80 3a       	cpi	r24, 0xA0	; 160
    1548:	c1 f4       	brne	.+48     	; 0x157a <__vector_26+0x13e>
			{
				stop_twi();
    154a:	56 dd       	rcall	.-1364   	; 0xff8 <stop_twi>
				switch(currentInstruction)
    154c:	80 91 8b 14 	lds	r24, 0x148B
    1550:	90 91 8c 14 	lds	r25, 0x148C
    1554:	85 30       	cpi	r24, 0x05	; 5
    1556:	91 05       	cpc	r25, r1
    1558:	49 f0       	breq	.+18     	; 0x156c <__vector_26+0x130>
    155a:	89 31       	cpi	r24, 0x19	; 25
    155c:	91 05       	cpc	r25, r1
    155e:	51 f0       	breq	.+20     	; 0x1574 <__vector_26+0x138>
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	59 f4       	brne	.+22     	; 0x157a <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	80 93 39 13 	sts	0x1339, r24
						break;
    156a:	07 c0       	rjmp	.+14     	; 0x157a <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 38 13 	sts	0x1338, r24
						break;
    1572:	03 c0       	rjmp	.+6      	; 0x157a <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1574:	89 e7       	ldi	r24, 0x79	; 121
    1576:	93 e1       	ldi	r25, 0x13	; 19
    1578:	29 df       	rcall	.-430    	; 0x13cc <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    157a:	53 dd       	rcall	.-1370   	; 0x1022 <reset_TWI>
			break;
    157c:	d5 c0       	rjmp	.+426    	; 0x1728 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    157e:	80 91 b9 00 	lds	r24, 0x00B9
    1582:	88 7f       	andi	r24, 0xF8	; 248
    1584:	80 36       	cpi	r24, 0x60	; 96
    1586:	29 f0       	breq	.+10     	; 0x1592 <__vector_26+0x156>
    1588:	80 91 b9 00 	lds	r24, 0x00B9
    158c:	88 7f       	andi	r24, 0xF8	; 248
    158e:	88 36       	cpi	r24, 0x68	; 104
    1590:	21 f4       	brne	.+8      	; 0x159a <__vector_26+0x15e>
			{
				instruction = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	80 93 82 14 	sts	0x1482, r24
    1598:	38 c0       	rjmp	.+112    	; 0x160a <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    159a:	80 91 b9 00 	lds	r24, 0x00B9
    159e:	88 7f       	andi	r24, 0xF8	; 248
    15a0:	80 38       	cpi	r24, 0x80	; 128
    15a2:	e1 f4       	brne	.+56     	; 0x15dc <__vector_26+0x1a0>
			{
				if(instruction)
    15a4:	80 91 82 14 	lds	r24, 0x1482
    15a8:	88 23       	and	r24, r24
    15aa:	41 f0       	breq	.+16     	; 0x15bc <__vector_26+0x180>
				{
					currentInstruction = get_data();
    15ac:	16 dd       	rcall	.-1492   	; 0xfda <get_data>
    15ae:	80 93 8b 14 	sts	0x148B, r24
    15b2:	10 92 8c 14 	sts	0x148C, r1
					instruction = 0;
    15b6:	10 92 82 14 	sts	0x1482, r1
    15ba:	27 c0       	rjmp	.+78     	; 0x160a <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    15bc:	80 91 8b 14 	lds	r24, 0x148B
    15c0:	90 91 8c 14 	lds	r25, 0x148C
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	91 05       	cpc	r25, r1
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <__vector_26+0x194>
    15ca:	49 97       	sbiw	r24, 0x19	; 25
    15cc:	f1 f4       	brne	.+60     	; 0x160a <__vector_26+0x1ce>
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    15d0:	04 dd       	rcall	.-1528   	; 0xfda <get_data>
    15d2:	80 93 8a 14 	sts	0x148A, r24
    15d6:	19 c0       	rjmp	.+50     	; 0x160a <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    15d8:	3f dd       	rcall	.-1410   	; 0x1058 <get_char_from_bus>
							break;
    15da:	17 c0       	rjmp	.+46     	; 0x160a <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    15dc:	80 91 b9 00 	lds	r24, 0x00B9
    15e0:	88 7f       	andi	r24, 0xF8	; 248
    15e2:	80 3a       	cpi	r24, 0xA0	; 160
    15e4:	91 f4       	brne	.+36     	; 0x160a <__vector_26+0x1ce>
			{
				stop_twi();
    15e6:	08 dd       	rcall	.-1520   	; 0xff8 <stop_twi>
				switch(currentInstruction)
    15e8:	80 91 8b 14 	lds	r24, 0x148B
    15ec:	90 91 8c 14 	lds	r25, 0x148C
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	91 05       	cpc	r25, r1
    15f4:	19 f0       	breq	.+6      	; 0x15fc <__vector_26+0x1c0>
    15f6:	49 97       	sbiw	r24, 0x19	; 25
    15f8:	41 f4       	brne	.+16     	; 0x160a <__vector_26+0x1ce>
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	80 93 36 13 	sts	0x1336, r24
						break;
    1602:	03 c0       	rjmp	.+6      	; 0x160a <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1604:	89 e7       	ldi	r24, 0x79	; 121
    1606:	93 e1       	ldi	r25, 0x13	; 19
    1608:	e1 de       	rcall	.-574    	; 0x13cc <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    160a:	0b dd       	rcall	.-1514   	; 0x1022 <reset_TWI>
			break;
    160c:	8d c0       	rjmp	.+282    	; 0x1728 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    160e:	80 91 b9 00 	lds	r24, 0x00B9
    1612:	88 7f       	andi	r24, 0xF8	; 248
    1614:	80 36       	cpi	r24, 0x60	; 96
    1616:	29 f0       	breq	.+10     	; 0x1622 <__vector_26+0x1e6>
    1618:	80 91 b9 00 	lds	r24, 0x00B9
    161c:	88 7f       	andi	r24, 0xF8	; 248
    161e:	88 36       	cpi	r24, 0x68	; 104
    1620:	21 f4       	brne	.+8      	; 0x162a <__vector_26+0x1ee>
			{
				instruction = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	80 93 82 14 	sts	0x1482, r24
    1628:	7e c0       	rjmp	.+252    	; 0x1726 <__vector_26+0x2ea>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    162a:	80 91 b9 00 	lds	r24, 0x00B9
    162e:	88 7f       	andi	r24, 0xF8	; 248
    1630:	80 37       	cpi	r24, 0x70	; 112
    1632:	29 f0       	breq	.+10     	; 0x163e <__vector_26+0x202>
    1634:	80 91 b9 00 	lds	r24, 0x00B9
    1638:	88 7f       	andi	r24, 0xF8	; 248
    163a:	88 37       	cpi	r24, 0x78	; 120
    163c:	39 f4       	brne	.+14     	; 0x164c <__vector_26+0x210>
			{
				currentInstruction = 255;
    163e:	8f ef       	ldi	r24, 0xFF	; 255
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	90 93 8c 14 	sts	0x148C, r25
    1646:	80 93 8b 14 	sts	0x148B, r24
    164a:	6d c0       	rjmp	.+218    	; 0x1726 <__vector_26+0x2ea>
			}
			else if(CONTROL == DATA_SLAW)
    164c:	80 91 b9 00 	lds	r24, 0x00B9
    1650:	88 7f       	andi	r24, 0xF8	; 248
    1652:	80 38       	cpi	r24, 0x80	; 128
    1654:	09 f0       	breq	.+2      	; 0x1658 <__vector_26+0x21c>
    1656:	3a c0       	rjmp	.+116    	; 0x16cc <__vector_26+0x290>
			{
				if(instruction)
    1658:	80 91 82 14 	lds	r24, 0x1482
    165c:	88 23       	and	r24, r24
    165e:	41 f0       	breq	.+16     	; 0x1670 <__vector_26+0x234>
				{
					currentInstruction = get_data();
    1660:	bc dc       	rcall	.-1672   	; 0xfda <get_data>
    1662:	80 93 8b 14 	sts	0x148B, r24
    1666:	10 92 8c 14 	sts	0x148C, r1
					instruction = 0;
    166a:	10 92 82 14 	sts	0x1482, r1
    166e:	5b c0       	rjmp	.+182    	; 0x1726 <__vector_26+0x2ea>
				}
				else
				{
					switch(currentInstruction)
    1670:	80 91 8b 14 	lds	r24, 0x148B
    1674:	90 91 8c 14 	lds	r25, 0x148C
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	19 f1       	breq	.+70     	; 0x16c4 <__vector_26+0x288>
    167e:	1c f4       	brge	.+6      	; 0x1686 <__vector_26+0x24a>
    1680:	89 2b       	or	r24, r25
    1682:	41 f0       	breq	.+16     	; 0x1694 <__vector_26+0x258>
    1684:	50 c0       	rjmp	.+160    	; 0x1726 <__vector_26+0x2ea>
    1686:	84 30       	cpi	r24, 0x04	; 4
    1688:	91 05       	cpc	r25, r1
    168a:	b1 f0       	breq	.+44     	; 0x16b8 <__vector_26+0x27c>
    168c:	05 97       	sbiw	r24, 0x05	; 5
    168e:	09 f0       	breq	.+2      	; 0x1692 <__vector_26+0x256>
    1690:	4a c0       	rjmp	.+148    	; 0x1726 <__vector_26+0x2ea>
    1692:	1a c0       	rjmp	.+52     	; 0x16c8 <__vector_26+0x28c>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    1694:	c0 91 83 14 	lds	r28, 0x1483
    1698:	d0 91 84 14 	lds	r29, 0x1484
    169c:	9e dc       	rcall	.-1732   	; 0xfda <get_data>
    169e:	cb 58       	subi	r28, 0x8B	; 139
    16a0:	dc 4e       	sbci	r29, 0xEC	; 236
    16a2:	88 83       	st	Y, r24
	currentCommand += 1;
    16a4:	80 91 83 14 	lds	r24, 0x1483
    16a8:	90 91 84 14 	lds	r25, 0x1484
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	90 93 84 14 	sts	0x1484, r25
    16b2:	80 93 83 14 	sts	0x1483, r24
    16b6:	37 c0       	rjmp	.+110    	; 0x1726 <__vector_26+0x2ea>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation = get_data();
    16b8:	90 dc       	rcall	.-1760   	; 0xfda <get_data>
    16ba:	80 93 85 14 	sts	0x1485, r24
    16be:	10 92 86 14 	sts	0x1486, r1
    16c2:	31 c0       	rjmp	.+98     	; 0x1726 <__vector_26+0x2ea>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    16c4:	b4 dc       	rcall	.-1688   	; 0x102e <get_control_settings_from_bus>
							break;
    16c6:	2f c0       	rjmp	.+94     	; 0x1726 <__vector_26+0x2ea>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    16c8:	c3 dc       	rcall	.-1658   	; 0x1050 <get_autonom_settings_from_bus>
							break;
    16ca:	2d c0       	rjmp	.+90     	; 0x1726 <__vector_26+0x2ea>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    16cc:	80 91 b9 00 	lds	r24, 0x00B9
    16d0:	88 7f       	andi	r24, 0xF8	; 248
    16d2:	80 39       	cpi	r24, 0x90	; 144
    16d4:	11 f4       	brne	.+4      	; 0x16da <__vector_26+0x29e>
			{
				get_sensor_from_bus();
    16d6:	da dc       	rcall	.-1612   	; 0x108c <get_sensor_from_bus>
    16d8:	26 c0       	rjmp	.+76     	; 0x1726 <__vector_26+0x2ea>
			}
			else if (CONTROL == STOP)
    16da:	80 91 b9 00 	lds	r24, 0x00B9
    16de:	88 7f       	andi	r24, 0xF8	; 248
    16e0:	80 3a       	cpi	r24, 0xA0	; 160
    16e2:	09 f5       	brne	.+66     	; 0x1726 <__vector_26+0x2ea>
			{
				stop_twi();
    16e4:	89 dc       	rcall	.-1774   	; 0xff8 <stop_twi>
				switch(currentInstruction)
    16e6:	80 91 8b 14 	lds	r24, 0x148B
    16ea:	90 91 8c 14 	lds	r25, 0x148C
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	91 05       	cpc	r25, r1
    16f2:	91 f0       	breq	.+36     	; 0x1718 <__vector_26+0x2dc>
    16f4:	1c f4       	brge	.+6      	; 0x16fc <__vector_26+0x2c0>
    16f6:	89 2b       	or	r24, r25
    16f8:	39 f0       	breq	.+14     	; 0x1708 <__vector_26+0x2cc>
    16fa:	15 c0       	rjmp	.+42     	; 0x1726 <__vector_26+0x2ea>
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	91 05       	cpc	r25, r1
    1700:	39 f0       	breq	.+14     	; 0x1710 <__vector_26+0x2d4>
    1702:	05 97       	sbiw	r24, 0x05	; 5
    1704:	81 f4       	brne	.+32     	; 0x1726 <__vector_26+0x2ea>
    1706:	0c c0       	rjmp	.+24     	; 0x1720 <__vector_26+0x2e4>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	80 93 3a 13 	sts	0x133A, r24
						break;
    170e:	0b c0       	rjmp	.+22     	; 0x1726 <__vector_26+0x2ea>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 37 13 	sts	0x1337, r24
						break;
    1716:	07 c0       	rjmp	.+14     	; 0x1726 <__vector_26+0x2ea>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	80 93 39 13 	sts	0x1339, r24
						break;
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <__vector_26+0x2ea>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	80 93 38 13 	sts	0x1338, r24
						break;
					}
				}
			}
			reset_TWI();
    1726:	7d dc       	rcall	.-1798   	; 0x1022 <reset_TWI>
			break;
		}
	}
    1728:	ff 91       	pop	r31
    172a:	ef 91       	pop	r30
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	0b be       	out	0x3b, r0	; 59
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
    1752:	10 92 c5 00 	sts	0x00C5, r1
    1756:	87 e0       	ldi	r24, 0x07	; 7
    1758:	80 93 c4 00 	sts	0x00C4, r24
    175c:	88 e9       	ldi	r24, 0x98	; 152
    175e:	80 93 c1 00 	sts	0x00C1, r24
    1762:	86 e0       	ldi	r24, 0x06	; 6
    1764:	80 93 c2 00 	sts	0x00C2, r24
    1768:	08 95       	ret

0000176a <USART_set_twi_message_destination>:
    176a:	90 93 1a 11 	sts	0x111A, r25
    176e:	80 93 19 11 	sts	0x1119, r24
    1772:	08 95       	ret

00001774 <USART_CheckTxReady>:
    1774:	80 91 c0 00 	lds	r24, 0x00C0
    1778:	80 72       	andi	r24, 0x20	; 32
    177a:	08 95       	ret

0000177c <USART_WriteByte>:
    177c:	cf 93       	push	r28
    177e:	c8 2f       	mov	r28, r24
    1780:	f9 df       	rcall	.-14     	; 0x1774 <USART_CheckTxReady>
    1782:	88 23       	and	r24, r24
    1784:	e9 f3       	breq	.-6      	; 0x1780 <USART_WriteByte+0x4>
    1786:	c0 93 c6 00 	sts	0x00C6, r28
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <USART_crc16>:
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	66 23       	and	r22, r22
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <USART_crc16+0x16>
    17a2:	3e c0       	rjmp	.+124    	; 0x1820 <USART_crc16+0x92>
    17a4:	06 2f       	mov	r16, r22
    17a6:	10 e0       	ldi	r17, 0x00	; 0
    17a8:	4f ef       	ldi	r20, 0xFF	; 255
    17aa:	5f ef       	ldi	r21, 0xFF	; 255
    17ac:	ee ef       	ldi	r30, 0xFE	; 254
    17ae:	ff ef       	ldi	r31, 0xFF	; 255
    17b0:	c6 2e       	mov	r12, r22
    17b2:	d1 2c       	mov	r13, r1
    17b4:	e8 2e       	mov	r14, r24
    17b6:	f1 2c       	mov	r15, r1
    17b8:	c8 e0       	ldi	r28, 0x08	; 8
    17ba:	d0 e0       	ldi	r29, 0x00	; 0
    17bc:	ee 3f       	cpi	r30, 0xFE	; 254
    17be:	6f ef       	ldi	r22, 0xFF	; 255
    17c0:	f6 07       	cpc	r31, r22
    17c2:	19 f4       	brne	.+6      	; 0x17ca <USART_crc16+0x3c>
    17c4:	8e 2d       	mov	r24, r14
    17c6:	9f 2d       	mov	r25, r15
    17c8:	30 c0       	rjmp	.+96     	; 0x182a <USART_crc16+0x9c>
    17ca:	ef 3f       	cpi	r30, 0xFF	; 255
    17cc:	8f ef       	ldi	r24, 0xFF	; 255
    17ce:	f8 07       	cpc	r31, r24
    17d0:	19 f4       	brne	.+6      	; 0x17d8 <USART_crc16+0x4a>
    17d2:	8c 2d       	mov	r24, r12
    17d4:	9d 2d       	mov	r25, r13
    17d6:	29 c0       	rjmp	.+82     	; 0x182a <USART_crc16+0x9c>
    17d8:	df 01       	movw	r26, r30
    17da:	ac 55       	subi	r26, 0x5C	; 92
    17dc:	b9 4e       	sbci	r27, 0xE9	; 233
    17de:	8c 91       	ld	r24, X
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	23 c0       	rjmp	.+70     	; 0x182a <USART_crc16+0x9c>
    17e4:	ba 01       	movw	r22, r20
    17e6:	68 27       	eor	r22, r24
    17e8:	79 27       	eor	r23, r25
    17ea:	60 ff       	sbrs	r22, 0
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <USART_crc16+0x6e>
    17ee:	56 95       	lsr	r21
    17f0:	47 95       	ror	r20
    17f2:	68 e0       	ldi	r22, 0x08	; 8
    17f4:	46 27       	eor	r20, r22
    17f6:	64 e8       	ldi	r22, 0x84	; 132
    17f8:	56 27       	eor	r21, r22
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <USART_crc16+0x72>
    17fc:	56 95       	lsr	r21
    17fe:	47 95       	ror	r20
    1800:	96 95       	lsr	r25
    1802:	87 95       	ror	r24
    1804:	21 50       	subi	r18, 0x01	; 1
    1806:	31 09       	sbc	r19, r1
    1808:	69 f7       	brne	.-38     	; 0x17e4 <USART_crc16+0x56>
    180a:	31 96       	adiw	r30, 0x01	; 1
    180c:	e0 17       	cp	r30, r16
    180e:	f1 07       	cpc	r31, r17
    1810:	a9 f6       	brne	.-86     	; 0x17bc <USART_crc16+0x2e>
    1812:	9a 01       	movw	r18, r20
    1814:	20 95       	com	r18
    1816:	30 95       	com	r19
    1818:	32 27       	eor	r19, r18
    181a:	23 27       	eor	r18, r19
    181c:	32 27       	eor	r19, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <USART_crc16+0x96>
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	82 2f       	mov	r24, r18
    1826:	93 2f       	mov	r25, r19
    1828:	02 c0       	rjmp	.+4      	; 0x182e <USART_crc16+0xa0>
    182a:	9e 01       	movw	r18, r28
    182c:	db cf       	rjmp	.-74     	; 0x17e4 <USART_crc16+0x56>
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	df 90       	pop	r13
    183c:	cf 90       	pop	r12
    183e:	08 95       	ret

00001840 <USART_SendPacket>:
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	9e e7       	ldi	r25, 0x7E	; 126
    184a:	90 93 a3 17 	sts	0x17A3, r25
    184e:	80 93 a4 17 	sts	0x17A4, r24
    1852:	60 93 a5 17 	sts	0x17A5, r22
    1856:	26 2f       	mov	r18, r22
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	12 16       	cp	r1, r18
    185c:	13 06       	cpc	r1, r19
    185e:	4c f5       	brge	.+82     	; 0x18b2 <USART_SendPacket+0x72>
    1860:	e4 ea       	ldi	r30, 0xA4	; 164
    1862:	f6 e1       	ldi	r31, 0x16	; 22
    1864:	03 e0       	ldi	r16, 0x03	; 3
    1866:	10 e0       	ldi	r17, 0x00	; 0
    1868:	c0 e0       	ldi	r28, 0x00	; 0
    186a:	d0 e0       	ldi	r29, 0x00	; 0
    186c:	7d e7       	ldi	r23, 0x7D	; 125
    186e:	50 e2       	ldi	r21, 0x20	; 32
    1870:	90 81       	ld	r25, Z
    1872:	49 2f       	mov	r20, r25
    1874:	4d 57       	subi	r20, 0x7D	; 125
    1876:	42 30       	cpi	r20, 0x02	; 2
    1878:	80 f4       	brcc	.+32     	; 0x189a <USART_SendPacket+0x5a>
    187a:	d8 01       	movw	r26, r16
    187c:	ad 55       	subi	r26, 0x5D	; 93
    187e:	b8 4e       	sbci	r27, 0xE8	; 232
    1880:	ac 0f       	add	r26, r28
    1882:	bd 1f       	adc	r27, r29
    1884:	7c 93       	st	X, r23
    1886:	0f 5f       	subi	r16, 0xFF	; 255
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	d8 01       	movw	r26, r16
    188c:	ad 55       	subi	r26, 0x5D	; 93
    188e:	b8 4e       	sbci	r27, 0xE8	; 232
    1890:	ac 0f       	add	r26, r28
    1892:	bd 1f       	adc	r27, r29
    1894:	95 27       	eor	r25, r21
    1896:	9c 93       	st	X, r25
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <USART_SendPacket+0x66>
    189a:	d8 01       	movw	r26, r16
    189c:	ad 55       	subi	r26, 0x5D	; 93
    189e:	b8 4e       	sbci	r27, 0xE8	; 232
    18a0:	ac 0f       	add	r26, r28
    18a2:	bd 1f       	adc	r27, r29
    18a4:	9c 93       	st	X, r25
    18a6:	21 96       	adiw	r28, 0x01	; 1
    18a8:	31 96       	adiw	r30, 0x01	; 1
    18aa:	c2 17       	cp	r28, r18
    18ac:	d3 07       	cpc	r29, r19
    18ae:	01 f7       	brne	.-64     	; 0x1870 <USART_SendPacket+0x30>
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <USART_SendPacket+0x7a>
    18b2:	03 e0       	ldi	r16, 0x03	; 3
    18b4:	10 e0       	ldi	r17, 0x00	; 0
    18b6:	c0 e0       	ldi	r28, 0x00	; 0
    18b8:	d0 e0       	ldi	r29, 0x00	; 0
    18ba:	69 df       	rcall	.-302    	; 0x178e <USART_crc16>
    18bc:	f8 01       	movw	r30, r16
    18be:	ed 55       	subi	r30, 0x5D	; 93
    18c0:	f8 4e       	sbci	r31, 0xE8	; 232
    18c2:	ec 0f       	add	r30, r28
    18c4:	fd 1f       	adc	r31, r29
    18c6:	90 83       	st	Z, r25
    18c8:	81 83       	std	Z+1, r24	; 0x01
    18ca:	22 96       	adiw	r28, 0x02	; 2
    18cc:	0c 0f       	add	r16, r28
    18ce:	1d 1f       	adc	r17, r29
    18d0:	f8 01       	movw	r30, r16
    18d2:	ed 55       	subi	r30, 0x5D	; 93
    18d4:	f8 4e       	sbci	r31, 0xE8	; 232
    18d6:	8e e7       	ldi	r24, 0x7E	; 126
    18d8:	80 83       	st	Z, r24
    18da:	c8 01       	movw	r24, r16
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	18 16       	cp	r1, r24
    18e0:	19 06       	cpc	r1, r25
    18e2:	4c f4       	brge	.+18     	; 0x18f6 <USART_SendPacket+0xb6>
    18e4:	c3 ea       	ldi	r28, 0xA3	; 163
    18e6:	d7 e1       	ldi	r29, 0x17	; 23
    18e8:	0c 55       	subi	r16, 0x5C	; 92
    18ea:	18 4e       	sbci	r17, 0xE8	; 232
    18ec:	89 91       	ld	r24, Y+
    18ee:	46 df       	rcall	.-372    	; 0x177c <USART_WriteByte>
    18f0:	c0 17       	cp	r28, r16
    18f2:	d1 07       	cpc	r29, r17
    18f4:	d9 f7       	brne	.-10     	; 0x18ec <USART_SendPacket+0xac>
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	08 95       	ret

00001900 <USART_SendCommand>:
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	26 dd       	rcall	.-1460   	; 0x1352 <TWI_get_command>
    1906:	80 93 a4 16 	sts	0x16A4, r24
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	21 dd       	rcall	.-1470   	; 0x1352 <TWI_get_command>
    1910:	80 93 a5 16 	sts	0x16A5, r24
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	1c dd       	rcall	.-1480   	; 0x1352 <TWI_get_command>
    191a:	80 93 a6 16 	sts	0x16A6, r24
    191e:	63 e0       	ldi	r22, 0x03	; 3
    1920:	83 e4       	ldi	r24, 0x43	; 67
    1922:	8e cf       	rjmp	.-228    	; 0x1840 <USART_SendPacket>

00001924 <USART_SendElevation>:
    1924:	28 dd       	rcall	.-1456   	; 0x1376 <TWI_get_elevation>
    1926:	80 93 a4 16 	sts	0x16A4, r24
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	85 e4       	ldi	r24, 0x45	; 69
    192e:	88 cf       	rjmp	.-240    	; 0x1840 <USART_SendPacket>

00001930 <USART_DecodeMessageRxFIFO>:
    1930:	8f 92       	push	r8
    1932:	9f 92       	push	r9
    1934:	af 92       	push	r10
    1936:	bf 92       	push	r11
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	ad b6       	in	r10, 0x3d	; 61
    194e:	be b6       	in	r11, 0x3e	; 62
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	80 91 11 01 	lds	r24, 0x0111
    1958:	90 91 12 01 	lds	r25, 0x0112
    195c:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    1960:	88 23       	and	r24, r24
    1962:	31 f0       	breq	.+12     	; 0x1970 <USART_DecodeMessageRxFIFO+0x40>
    1964:	65 e0       	ldi	r22, 0x05	; 5
    1966:	72 e1       	ldi	r23, 0x12	; 18
    1968:	80 e4       	ldi	r24, 0x40	; 64
    196a:	27 dc       	rcall	.-1970   	; 0x11ba <TWI_send_string>
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	45 c0       	rjmp	.+138    	; 0x19fa <USART_DecodeMessageRxFIFO+0xca>
    1970:	c0 90 00 00 	lds	r12, 0x0000
    1974:	d1 2c       	mov	r13, r1
    1976:	96 01       	movw	r18, r12
    1978:	21 50       	subi	r18, 0x01	; 1
    197a:	31 09       	sbc	r19, r1
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	c1 14       	cp	r12, r1
    1982:	d1 04       	cpc	r13, r1
    1984:	11 f0       	breq	.+4      	; 0x198a <USART_DecodeMessageRxFIFO+0x5a>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	2d b7       	in	r18, 0x3d	; 61
    1990:	3e b7       	in	r19, 0x3e	; 62
    1992:	28 1b       	sub	r18, r24
    1994:	39 0b       	sbc	r19, r25
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	3e bf       	out	0x3e, r19	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	2d bf       	out	0x3d, r18	; 61
    19a0:	8d b7       	in	r24, 0x3d	; 61
    19a2:	9e b7       	in	r25, 0x3e	; 62
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	88 2e       	mov	r8, r24
    19a8:	99 2e       	mov	r9, r25
    19aa:	1c 14       	cp	r1, r12
    19ac:	1d 04       	cpc	r1, r13
    19ae:	f4 f4       	brge	.+60     	; 0x19ec <USART_DecodeMessageRxFIFO+0xbc>
    19b0:	e8 2e       	mov	r14, r24
    19b2:	f9 2e       	mov	r15, r25
    19b4:	00 e0       	ldi	r16, 0x00	; 0
    19b6:	10 e0       	ldi	r17, 0x00	; 0
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	80 91 11 01 	lds	r24, 0x0111
    19c0:	90 91 12 01 	lds	r25, 0x0112
    19c4:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    19c8:	88 23       	and	r24, r24
    19ca:	31 f0       	breq	.+12     	; 0x19d8 <USART_DecodeMessageRxFIFO+0xa8>
    19cc:	67 e2       	ldi	r22, 0x27	; 39
    19ce:	72 e1       	ldi	r23, 0x12	; 18
    19d0:	80 e4       	ldi	r24, 0x40	; 64
    19d2:	f3 db       	rcall	.-2074   	; 0x11ba <TWI_send_string>
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	11 c0       	rjmp	.+34     	; 0x19fa <USART_DecodeMessageRxFIFO+0xca>
    19d8:	80 91 00 00 	lds	r24, 0x0000
    19dc:	f7 01       	movw	r30, r14
    19de:	81 93       	st	Z+, r24
    19e0:	7f 01       	movw	r14, r30
    19e2:	0f 5f       	subi	r16, 0xFF	; 255
    19e4:	1f 4f       	sbci	r17, 0xFF	; 255
    19e6:	0c 15       	cp	r16, r12
    19e8:	1d 05       	cpc	r17, r13
    19ea:	34 f3       	brlt	.-52     	; 0x19b8 <USART_DecodeMessageRxFIFO+0x88>
    19ec:	a6 01       	movw	r20, r12
    19ee:	68 2d       	mov	r22, r8
    19f0:	79 2d       	mov	r23, r9
    19f2:	80 91 19 11 	lds	r24, 0x1119
    19f6:	27 dc       	rcall	.-1970   	; 0x1246 <TWI_send_string_fixed_length>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	be be       	out	0x3e, r11	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	ad be       	out	0x3d, r10	; 61
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	bf 90       	pop	r11
    1a16:	af 90       	pop	r10
    1a18:	9f 90       	pop	r9
    1a1a:	8f 90       	pop	r8
    1a1c:	08 95       	ret

00001a1e <USART_DecodeCommandRxFIFO>:
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	80 91 11 01 	lds	r24, 0x0111
    1a2a:	90 91 12 01 	lds	r25, 0x0112
    1a2e:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    1a32:	88 23       	and	r24, r24
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <USART_DecodeCommandRxFIFO+0x24>
    1a36:	6a e4       	ldi	r22, 0x4A	; 74
    1a38:	72 e1       	ldi	r23, 0x12	; 18
    1a3a:	80 e4       	ldi	r24, 0x40	; 64
    1a3c:	be db       	rcall	.-2180   	; 0x11ba <TWI_send_string>
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	45 c0       	rjmp	.+138    	; 0x1acc <USART_DecodeCommandRxFIFO+0xae>
    1a42:	80 91 00 00 	lds	r24, 0x0000
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <USART_DecodeCommandRxFIFO+0x2e>
    1a4a:	3b c0       	rjmp	.+118    	; 0x1ac2 <USART_DecodeCommandRxFIFO+0xa4>
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	80 91 11 01 	lds	r24, 0x0111
    1a54:	90 91 12 01 	lds	r25, 0x0112
    1a58:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    1a5c:	88 23       	and	r24, r24
    1a5e:	31 f0       	breq	.+12     	; 0x1a6c <USART_DecodeCommandRxFIFO+0x4e>
    1a60:	6c e6       	ldi	r22, 0x6C	; 108
    1a62:	72 e1       	ldi	r23, 0x12	; 18
    1a64:	80 e4       	ldi	r24, 0x40	; 64
    1a66:	a9 db       	rcall	.-2222   	; 0x11ba <TWI_send_string>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	30 c0       	rjmp	.+96     	; 0x1acc <USART_DecodeCommandRxFIFO+0xae>
    1a6c:	c0 91 00 00 	lds	r28, 0x0000
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	80 91 11 01 	lds	r24, 0x0111
    1a78:	90 91 12 01 	lds	r25, 0x0112
    1a7c:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    1a80:	88 23       	and	r24, r24
    1a82:	31 f0       	breq	.+12     	; 0x1a90 <USART_DecodeCommandRxFIFO+0x72>
    1a84:	64 e9       	ldi	r22, 0x94	; 148
    1a86:	72 e1       	ldi	r23, 0x12	; 18
    1a88:	80 e4       	ldi	r24, 0x40	; 64
    1a8a:	97 db       	rcall	.-2258   	; 0x11ba <TWI_send_string>
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	1e c0       	rjmp	.+60     	; 0x1acc <USART_DecodeCommandRxFIFO+0xae>
    1a90:	d0 91 00 00 	lds	r29, 0x0000
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	80 91 11 01 	lds	r24, 0x0111
    1a9c:	90 91 12 01 	lds	r25, 0x0112
    1aa0:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    1aa4:	88 23       	and	r24, r24
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <USART_DecodeCommandRxFIFO+0x96>
    1aa8:	6b eb       	ldi	r22, 0xBB	; 187
    1aaa:	72 e1       	ldi	r23, 0x12	; 18
    1aac:	80 e4       	ldi	r24, 0x40	; 64
    1aae:	85 db       	rcall	.-2294   	; 0x11ba <TWI_send_string>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	0c c0       	rjmp	.+24     	; 0x1acc <USART_DecodeCommandRxFIFO+0xae>
    1ab4:	40 91 00 00 	lds	r20, 0x0000
    1ab8:	6d 2f       	mov	r22, r29
    1aba:	8c 2f       	mov	r24, r28
    1abc:	36 db       	rcall	.-2452   	; 0x112a <TWI_send_command>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <USART_DecodeCommandRxFIFO+0xae>
    1ac2:	6f ed       	ldi	r22, 0xDF	; 223
    1ac4:	72 e1       	ldi	r23, 0x12	; 18
    1ac6:	80 e4       	ldi	r24, 0x40	; 64
    1ac8:	78 db       	rcall	.-2320   	; 0x11ba <TWI_send_string>
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	08 95       	ret

00001ad2 <USART_DecodeValueFIFO>:
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <USART_DecodeValueFIFO+0xe>
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <USART_DecodeValueFIFO+0x10>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	80 91 11 01 	lds	r24, 0x0111
    1aee:	90 91 12 01 	lds	r25, 0x0112
    1af2:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    1af6:	88 23       	and	r24, r24
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <USART_DecodeValueFIFO+0x34>
    1afa:	66 e0       	ldi	r22, 0x06	; 6
    1afc:	73 e1       	ldi	r23, 0x13	; 19
    1afe:	80 e4       	ldi	r24, 0x40	; 64
    1b00:	5c db       	rcall	.-2376   	; 0x11ba <TWI_send_string>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	29 c0       	rjmp	.+82     	; 0x1b58 <USART_DecodeValueFIFO+0x86>
    1b06:	80 91 00 00 	lds	r24, 0x0000
    1b0a:	84 30       	cpi	r24, 0x04	; 4
    1b0c:	11 f5       	brne	.+68     	; 0x1b52 <USART_DecodeValueFIFO+0x80>
    1b0e:	8e 01       	movw	r16, r28
    1b10:	0f 5f       	subi	r16, 0xFF	; 255
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	7e 01       	movw	r14, r28
    1b16:	85 e0       	ldi	r24, 0x05	; 5
    1b18:	e8 0e       	add	r14, r24
    1b1a:	f1 1c       	adc	r15, r1
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	80 91 11 01 	lds	r24, 0x0111
    1b24:	90 91 12 01 	lds	r25, 0x0112
    1b28:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	13 c0       	rjmp	.+38     	; 0x1b56 <USART_DecodeValueFIFO+0x84>
    1b30:	80 91 00 00 	lds	r24, 0x0000
    1b34:	f8 01       	movw	r30, r16
    1b36:	81 93       	st	Z+, r24
    1b38:	8f 01       	movw	r16, r30
    1b3a:	ee 15       	cp	r30, r14
    1b3c:	ff 05       	cpc	r31, r15
    1b3e:	71 f7       	brne	.-36     	; 0x1b1c <USART_DecodeValueFIFO+0x4a>
    1b40:	49 81       	ldd	r20, Y+1	; 0x01
    1b42:	5a 81       	ldd	r21, Y+2	; 0x02
    1b44:	6b 81       	ldd	r22, Y+3	; 0x03
    1b46:	7c 81       	ldd	r23, Y+4	; 0x04
    1b48:	80 91 19 11 	lds	r24, 0x1119
    1b4c:	ba db       	rcall	.-2188   	; 0x12c2 <TWI_send_float>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <USART_DecodeValueFIFO+0x86>
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <USART_DecodeValueFIFO+0x86>
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	08 95       	ret

00001b6e <USART_DecodeReadyFIFO>:
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	80 91 11 01 	lds	r24, 0x0111
    1b76:	90 91 12 01 	lds	r25, 0x0112
    1b7a:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    1b7e:	88 23       	and	r24, r24
    1b80:	31 f0       	breq	.+12     	; 0x1b8e <USART_DecodeReadyFIFO+0x20>
    1b82:	6a e4       	ldi	r22, 0x4A	; 74
    1b84:	72 e1       	ldi	r23, 0x12	; 18
    1b86:	80 e4       	ldi	r24, 0x40	; 64
    1b88:	18 db       	rcall	.-2512   	; 0x11ba <TWI_send_string>
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	08 95       	ret
    1b8e:	80 91 00 00 	lds	r24, 0x0000
    1b92:	81 11       	cpse	r24, r1
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <USART_DecodeReadyFIFO+0x32>
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	80 93 3c 13 	sts	0x133C, r24
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	08 95       	ret
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	08 95       	ret

00001ba4 <USART_ready>:
    1ba4:	80 91 3c 13 	lds	r24, 0x133C
    1ba8:	88 23       	and	r24, r24
    1baa:	21 f0       	breq	.+8      	; 0x1bb4 <USART_ready+0x10>
    1bac:	10 92 3c 13 	sts	0x133C, r1
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	08 95       	ret
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	08 95       	ret

00001bb8 <USART_DecodeRxFIFO>:
    1bb8:	1c c0       	rjmp	.+56     	; 0x1bf2 <USART_DecodeRxFIFO+0x3a>
    1bba:	80 91 00 00 	lds	r24, 0x0000
    1bbe:	8d 34       	cpi	r24, 0x4D	; 77
    1bc0:	49 f0       	breq	.+18     	; 0x1bd4 <USART_DecodeRxFIFO+0x1c>
    1bc2:	18 f4       	brcc	.+6      	; 0x1bca <USART_DecodeRxFIFO+0x12>
    1bc4:	83 34       	cpi	r24, 0x43	; 67
    1bc6:	a9 f4       	brne	.+42     	; 0x1bf2 <USART_DecodeRxFIFO+0x3a>
    1bc8:	09 c0       	rjmp	.+18     	; 0x1bdc <USART_DecodeRxFIFO+0x24>
    1bca:	82 35       	cpi	r24, 0x52	; 82
    1bcc:	79 f0       	breq	.+30     	; 0x1bec <USART_DecodeRxFIFO+0x34>
    1bce:	86 35       	cpi	r24, 0x56	; 86
    1bd0:	81 f4       	brne	.+32     	; 0x1bf2 <USART_DecodeRxFIFO+0x3a>
    1bd2:	08 c0       	rjmp	.+16     	; 0x1be4 <USART_DecodeRxFIFO+0x2c>
    1bd4:	ad de       	rcall	.-678    	; 0x1930 <USART_DecodeMessageRxFIFO>
    1bd6:	88 23       	and	r24, r24
    1bd8:	61 f0       	breq	.+24     	; 0x1bf2 <USART_DecodeRxFIFO+0x3a>
    1bda:	08 95       	ret
    1bdc:	20 df       	rcall	.-448    	; 0x1a1e <USART_DecodeCommandRxFIFO>
    1bde:	88 23       	and	r24, r24
    1be0:	41 f0       	breq	.+16     	; 0x1bf2 <USART_DecodeRxFIFO+0x3a>
    1be2:	08 95       	ret
    1be4:	76 df       	rcall	.-276    	; 0x1ad2 <USART_DecodeValueFIFO>
    1be6:	88 23       	and	r24, r24
    1be8:	21 f0       	breq	.+8      	; 0x1bf2 <USART_DecodeRxFIFO+0x3a>
    1bea:	08 95       	ret
    1bec:	c0 df       	rcall	.-128    	; 0x1b6e <USART_DecodeReadyFIFO>
    1bee:	81 11       	cpse	r24, r1
    1bf0:	0a c0       	rjmp	.+20     	; 0x1c06 <USART_DecodeRxFIFO+0x4e>
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	80 91 11 01 	lds	r24, 0x0111
    1bfa:	90 91 12 01 	lds	r25, 0x0112
    1bfe:	0e 94 29 03 	call	0x652	; 0x652 <FifoRead>
    1c02:	88 23       	and	r24, r24
    1c04:	d1 f2       	breq	.-76     	; 0x1bba <USART_DecodeRxFIFO+0x2>
    1c06:	08 95       	ret

00001c08 <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	0b b6       	in	r0, 0x3b	; 59
    1c14:	0f 92       	push	r0
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	2f 93       	push	r18
    1c20:	3f 93       	push	r19
    1c22:	4f 93       	push	r20
    1c24:	5f 93       	push	r21
    1c26:	6f 93       	push	r22
    1c28:	7f 93       	push	r23
    1c2a:	8f 93       	push	r24
    1c2c:	9f 93       	push	r25
    1c2e:	af 93       	push	r26
    1c30:	bf 93       	push	r27
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	ef 93       	push	r30
    1c38:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1c3a:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1c3e:	2e 37       	cpi	r18, 0x7E	; 126
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <__vector_20+0x3c>
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1c44:	80 91 3f 13 	lds	r24, 0x133F
    1c48:	90 91 40 13 	lds	r25, 0x1340
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	91 05       	cpc	r25, r1
    1c50:	40 f4       	brcc	.+16     	; 0x1c62 <__vector_20+0x5a>
    1c52:	20 91 a0 14 	lds	r18, 0x14A0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	2c 5f       	subi	r18, 0xFC	; 252
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	82 17       	cp	r24, r18
    1c5e:	93 07       	cpc	r25, r19
    1c60:	59 f5       	brne	.+86     	; 0x1cb8 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1c62:	80 91 3d 13 	lds	r24, 0x133D
    1c66:	90 91 3e 13 	lds	r25, 0x133E
    1c6a:	89 2b       	or	r24, r25
    1c6c:	21 f0       	breq	.+8      	; 0x1c76 <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1c6e:	10 92 3e 13 	sts	0x133E, r1
    1c72:	10 92 3d 13 	sts	0x133D, r1
    1c76:	0f e9       	ldi	r16, 0x9F	; 159
    1c78:	14 e1       	ldi	r17, 0x14	; 20
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1c7a:	c0 e0       	ldi	r28, 0x00	; 0
    1c7c:	d0 e0       	ldi	r29, 0x00	; 0
    1c7e:	0f 2e       	mov	r0, r31
    1c80:	f0 ea       	ldi	r31, 0xA0	; 160
    1c82:	ef 2e       	mov	r14, r31
    1c84:	f4 e1       	ldi	r31, 0x14	; 20
    1c86:	ff 2e       	mov	r15, r31
    1c88:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	61 91       	ld	r22, Z+
    1c8e:	8f 01       	movw	r16, r30
    1c90:	80 91 11 01 	lds	r24, 0x0111
    1c94:	90 91 12 01 	lds	r25, 0x0112
    1c98:	0e 94 09 03 	call	0x612	; 0x612 <FifoWrite>
    1c9c:	88 23       	and	r24, r24
    1c9e:	21 f0       	breq	.+8      	; 0x1ca8 <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1ca0:	66 e2       	ldi	r22, 0x26	; 38
    1ca2:	73 e1       	ldi	r23, 0x13	; 19
    1ca4:	80 e4       	ldi	r24, 0x40	; 64
    1ca6:	89 da       	rcall	.-2798   	; 0x11ba <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1ca8:	21 96       	adiw	r28, 0x01	; 1
    1caa:	f7 01       	movw	r30, r14
    1cac:	80 81       	ld	r24, Z
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 96       	adiw	r24, 0x02	; 2
    1cb2:	c8 17       	cp	r28, r24
    1cb4:	d9 07       	cpc	r29, r25
    1cb6:	4c f3       	brlt	.-46     	; 0x1c8a <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1cb8:	10 92 40 13 	sts	0x1340, r1
    1cbc:	10 92 3f 13 	sts	0x133F, r1
    1cc0:	16 c0       	rjmp	.+44     	; 0x1cee <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1cc2:	2d 37       	cpi	r18, 0x7D	; 125
    1cc4:	39 f4       	brne	.+14     	; 0x1cd4 <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	90 93 3e 13 	sts	0x133E, r25
    1cce:	80 93 3d 13 	sts	0x133D, r24
    1cd2:	0d c0       	rjmp	.+26     	; 0x1cee <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1cd4:	80 91 3f 13 	lds	r24, 0x133F
    1cd8:	90 91 40 13 	lds	r25, 0x1340
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e1 56       	subi	r30, 0x61	; 97
    1ce0:	fb 4e       	sbci	r31, 0xEB	; 235
    1ce2:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	90 93 40 13 	sts	0x1340, r25
    1cea:	80 93 3f 13 	sts	0x133F, r24
	}
	
	
}
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	bf 91       	pop	r27
    1cf8:	af 91       	pop	r26
    1cfa:	9f 91       	pop	r25
    1cfc:	8f 91       	pop	r24
    1cfe:	7f 91       	pop	r23
    1d00:	6f 91       	pop	r22
    1d02:	5f 91       	pop	r21
    1d04:	4f 91       	pop	r20
    1d06:	3f 91       	pop	r19
    1d08:	2f 91       	pop	r18
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	0f 90       	pop	r0
    1d14:	0b be       	out	0x3b, r0	; 59
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	0f 90       	pop	r0
    1d1c:	1f 90       	pop	r1
    1d1e:	18 95       	reti

00001d20 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1d20:	80 93 a4 16 	sts	0x16A4, r24
	gTxPayload[1] = rotation;
    1d24:	60 93 a5 16 	sts	0x16A5, r22
	gTxPayload[2] = speed;
    1d28:	40 93 a6 16 	sts	0x16A6, r20
	
	
	USART_SendPacket('C', 3);
    1d2c:	63 e0       	ldi	r22, 0x03	; 3
    1d2e:	83 e4       	ldi	r24, 0x43	; 67
    1d30:	87 cd       	rjmp	.-1266   	; 0x1840 <USART_SendPacket>

00001d32 <__subsf3>:
    1d32:	50 58       	subi	r21, 0x80	; 128

00001d34 <__addsf3>:
    1d34:	bb 27       	eor	r27, r27
    1d36:	aa 27       	eor	r26, r26
    1d38:	0e d0       	rcall	.+28     	; 0x1d56 <__addsf3x>
    1d3a:	ed c1       	rjmp	.+986    	; 0x2116 <__fp_round>
    1d3c:	b6 d1       	rcall	.+876    	; 0x20aa <__fp_pscA>
    1d3e:	30 f0       	brcs	.+12     	; 0x1d4c <__addsf3+0x18>
    1d40:	bb d1       	rcall	.+886    	; 0x20b8 <__fp_pscB>
    1d42:	20 f0       	brcs	.+8      	; 0x1d4c <__addsf3+0x18>
    1d44:	31 f4       	brne	.+12     	; 0x1d52 <__addsf3+0x1e>
    1d46:	9f 3f       	cpi	r25, 0xFF	; 255
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <__addsf3+0x1a>
    1d4a:	1e f4       	brtc	.+6      	; 0x1d52 <__addsf3+0x1e>
    1d4c:	86 c1       	rjmp	.+780    	; 0x205a <__fp_nan>
    1d4e:	0e f4       	brtc	.+2      	; 0x1d52 <__addsf3+0x1e>
    1d50:	e0 95       	com	r30
    1d52:	e7 fb       	bst	r30, 7
    1d54:	7c c1       	rjmp	.+760    	; 0x204e <__fp_inf>

00001d56 <__addsf3x>:
    1d56:	e9 2f       	mov	r30, r25
    1d58:	00 d2       	rcall	.+1024   	; 0x215a <__fp_split3>
    1d5a:	80 f3       	brcs	.-32     	; 0x1d3c <__addsf3+0x8>
    1d5c:	ba 17       	cp	r27, r26
    1d5e:	62 07       	cpc	r22, r18
    1d60:	73 07       	cpc	r23, r19
    1d62:	84 07       	cpc	r24, r20
    1d64:	95 07       	cpc	r25, r21
    1d66:	18 f0       	brcs	.+6      	; 0x1d6e <__addsf3x+0x18>
    1d68:	71 f4       	brne	.+28     	; 0x1d86 <__addsf3x+0x30>
    1d6a:	9e f5       	brtc	.+102    	; 0x1dd2 <__addsf3x+0x7c>
    1d6c:	18 c2       	rjmp	.+1072   	; 0x219e <__fp_zero>
    1d6e:	0e f4       	brtc	.+2      	; 0x1d72 <__addsf3x+0x1c>
    1d70:	e0 95       	com	r30
    1d72:	0b 2e       	mov	r0, r27
    1d74:	ba 2f       	mov	r27, r26
    1d76:	a0 2d       	mov	r26, r0
    1d78:	0b 01       	movw	r0, r22
    1d7a:	b9 01       	movw	r22, r18
    1d7c:	90 01       	movw	r18, r0
    1d7e:	0c 01       	movw	r0, r24
    1d80:	ca 01       	movw	r24, r20
    1d82:	a0 01       	movw	r20, r0
    1d84:	11 24       	eor	r1, r1
    1d86:	ff 27       	eor	r31, r31
    1d88:	59 1b       	sub	r21, r25
    1d8a:	99 f0       	breq	.+38     	; 0x1db2 <__addsf3x+0x5c>
    1d8c:	59 3f       	cpi	r21, 0xF9	; 249
    1d8e:	50 f4       	brcc	.+20     	; 0x1da4 <__addsf3x+0x4e>
    1d90:	50 3e       	cpi	r21, 0xE0	; 224
    1d92:	68 f1       	brcs	.+90     	; 0x1dee <__addsf3x+0x98>
    1d94:	1a 16       	cp	r1, r26
    1d96:	f0 40       	sbci	r31, 0x00	; 0
    1d98:	a2 2f       	mov	r26, r18
    1d9a:	23 2f       	mov	r18, r19
    1d9c:	34 2f       	mov	r19, r20
    1d9e:	44 27       	eor	r20, r20
    1da0:	58 5f       	subi	r21, 0xF8	; 248
    1da2:	f3 cf       	rjmp	.-26     	; 0x1d8a <__addsf3x+0x34>
    1da4:	46 95       	lsr	r20
    1da6:	37 95       	ror	r19
    1da8:	27 95       	ror	r18
    1daa:	a7 95       	ror	r26
    1dac:	f0 40       	sbci	r31, 0x00	; 0
    1dae:	53 95       	inc	r21
    1db0:	c9 f7       	brne	.-14     	; 0x1da4 <__addsf3x+0x4e>
    1db2:	7e f4       	brtc	.+30     	; 0x1dd2 <__addsf3x+0x7c>
    1db4:	1f 16       	cp	r1, r31
    1db6:	ba 0b       	sbc	r27, r26
    1db8:	62 0b       	sbc	r22, r18
    1dba:	73 0b       	sbc	r23, r19
    1dbc:	84 0b       	sbc	r24, r20
    1dbe:	ba f0       	brmi	.+46     	; 0x1dee <__addsf3x+0x98>
    1dc0:	91 50       	subi	r25, 0x01	; 1
    1dc2:	a1 f0       	breq	.+40     	; 0x1dec <__addsf3x+0x96>
    1dc4:	ff 0f       	add	r31, r31
    1dc6:	bb 1f       	adc	r27, r27
    1dc8:	66 1f       	adc	r22, r22
    1dca:	77 1f       	adc	r23, r23
    1dcc:	88 1f       	adc	r24, r24
    1dce:	c2 f7       	brpl	.-16     	; 0x1dc0 <__addsf3x+0x6a>
    1dd0:	0e c0       	rjmp	.+28     	; 0x1dee <__addsf3x+0x98>
    1dd2:	ba 0f       	add	r27, r26
    1dd4:	62 1f       	adc	r22, r18
    1dd6:	73 1f       	adc	r23, r19
    1dd8:	84 1f       	adc	r24, r20
    1dda:	48 f4       	brcc	.+18     	; 0x1dee <__addsf3x+0x98>
    1ddc:	87 95       	ror	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	b7 95       	ror	r27
    1de4:	f7 95       	ror	r31
    1de6:	9e 3f       	cpi	r25, 0xFE	; 254
    1de8:	08 f0       	brcs	.+2      	; 0x1dec <__addsf3x+0x96>
    1dea:	b3 cf       	rjmp	.-154    	; 0x1d52 <__addsf3+0x1e>
    1dec:	93 95       	inc	r25
    1dee:	88 0f       	add	r24, r24
    1df0:	08 f0       	brcs	.+2      	; 0x1df4 <__addsf3x+0x9e>
    1df2:	99 27       	eor	r25, r25
    1df4:	ee 0f       	add	r30, r30
    1df6:	97 95       	ror	r25
    1df8:	87 95       	ror	r24
    1dfa:	08 95       	ret

00001dfc <atan>:
    1dfc:	df 93       	push	r29
    1dfe:	dd 27       	eor	r29, r29
    1e00:	b9 2f       	mov	r27, r25
    1e02:	bf 77       	andi	r27, 0x7F	; 127
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	5f e3       	ldi	r21, 0x3F	; 63
    1e08:	16 16       	cp	r1, r22
    1e0a:	17 06       	cpc	r1, r23
    1e0c:	48 07       	cpc	r20, r24
    1e0e:	5b 07       	cpc	r21, r27
    1e10:	10 f4       	brcc	.+4      	; 0x1e16 <atan+0x1a>
    1e12:	d9 2f       	mov	r29, r25
    1e14:	cf d1       	rcall	.+926    	; 0x21b4 <inverse>
    1e16:	9f 93       	push	r25
    1e18:	8f 93       	push	r24
    1e1a:	7f 93       	push	r23
    1e1c:	6f 93       	push	r22
    1e1e:	34 d2       	rcall	.+1128   	; 0x2288 <square>
    1e20:	ec e8       	ldi	r30, 0x8C	; 140
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	1d d1       	rcall	.+570    	; 0x2060 <__fp_powser>
    1e26:	77 d1       	rcall	.+750    	; 0x2116 <__fp_round>
    1e28:	2f 91       	pop	r18
    1e2a:	3f 91       	pop	r19
    1e2c:	4f 91       	pop	r20
    1e2e:	5f 91       	pop	r21
    1e30:	d4 d1       	rcall	.+936    	; 0x21da <__mulsf3x>
    1e32:	dd 23       	and	r29, r29
    1e34:	49 f0       	breq	.+18     	; 0x1e48 <atan+0x4c>
    1e36:	90 58       	subi	r25, 0x80	; 128
    1e38:	a2 ea       	ldi	r26, 0xA2	; 162
    1e3a:	2a ed       	ldi	r18, 0xDA	; 218
    1e3c:	3f e0       	ldi	r19, 0x0F	; 15
    1e3e:	49 ec       	ldi	r20, 0xC9	; 201
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	d0 78       	andi	r29, 0x80	; 128
    1e44:	5d 27       	eor	r21, r29
    1e46:	87 df       	rcall	.-242    	; 0x1d56 <__addsf3x>
    1e48:	df 91       	pop	r29
    1e4a:	65 c1       	rjmp	.+714    	; 0x2116 <__fp_round>

00001e4c <__cmpsf2>:
    1e4c:	dc d0       	rcall	.+440    	; 0x2006 <__fp_cmp>
    1e4e:	08 f4       	brcc	.+2      	; 0x1e52 <__cmpsf2+0x6>
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	08 95       	ret

00001e54 <cos>:
    1e54:	39 d1       	rcall	.+626    	; 0x20c8 <__fp_rempio2>
    1e56:	e3 95       	inc	r30
    1e58:	6f c1       	rjmp	.+734    	; 0x2138 <__fp_sinus>

00001e5a <__divsf3>:
    1e5a:	0c d0       	rcall	.+24     	; 0x1e74 <__divsf3x>
    1e5c:	5c c1       	rjmp	.+696    	; 0x2116 <__fp_round>
    1e5e:	2c d1       	rcall	.+600    	; 0x20b8 <__fp_pscB>
    1e60:	40 f0       	brcs	.+16     	; 0x1e72 <__divsf3+0x18>
    1e62:	23 d1       	rcall	.+582    	; 0x20aa <__fp_pscA>
    1e64:	30 f0       	brcs	.+12     	; 0x1e72 <__divsf3+0x18>
    1e66:	21 f4       	brne	.+8      	; 0x1e70 <__divsf3+0x16>
    1e68:	5f 3f       	cpi	r21, 0xFF	; 255
    1e6a:	19 f0       	breq	.+6      	; 0x1e72 <__divsf3+0x18>
    1e6c:	f0 c0       	rjmp	.+480    	; 0x204e <__fp_inf>
    1e6e:	51 11       	cpse	r21, r1
    1e70:	97 c1       	rjmp	.+814    	; 0x21a0 <__fp_szero>
    1e72:	f3 c0       	rjmp	.+486    	; 0x205a <__fp_nan>

00001e74 <__divsf3x>:
    1e74:	72 d1       	rcall	.+740    	; 0x215a <__fp_split3>
    1e76:	98 f3       	brcs	.-26     	; 0x1e5e <__divsf3+0x4>

00001e78 <__divsf3_pse>:
    1e78:	99 23       	and	r25, r25
    1e7a:	c9 f3       	breq	.-14     	; 0x1e6e <__divsf3+0x14>
    1e7c:	55 23       	and	r21, r21
    1e7e:	b1 f3       	breq	.-20     	; 0x1e6c <__divsf3+0x12>
    1e80:	95 1b       	sub	r25, r21
    1e82:	55 0b       	sbc	r21, r21
    1e84:	bb 27       	eor	r27, r27
    1e86:	aa 27       	eor	r26, r26
    1e88:	62 17       	cp	r22, r18
    1e8a:	73 07       	cpc	r23, r19
    1e8c:	84 07       	cpc	r24, r20
    1e8e:	38 f0       	brcs	.+14     	; 0x1e9e <__divsf3_pse+0x26>
    1e90:	9f 5f       	subi	r25, 0xFF	; 255
    1e92:	5f 4f       	sbci	r21, 0xFF	; 255
    1e94:	22 0f       	add	r18, r18
    1e96:	33 1f       	adc	r19, r19
    1e98:	44 1f       	adc	r20, r20
    1e9a:	aa 1f       	adc	r26, r26
    1e9c:	a9 f3       	breq	.-22     	; 0x1e88 <__divsf3_pse+0x10>
    1e9e:	33 d0       	rcall	.+102    	; 0x1f06 <__divsf3_pse+0x8e>
    1ea0:	0e 2e       	mov	r0, r30
    1ea2:	3a f0       	brmi	.+14     	; 0x1eb2 <__divsf3_pse+0x3a>
    1ea4:	e0 e8       	ldi	r30, 0x80	; 128
    1ea6:	30 d0       	rcall	.+96     	; 0x1f08 <__divsf3_pse+0x90>
    1ea8:	91 50       	subi	r25, 0x01	; 1
    1eaa:	50 40       	sbci	r21, 0x00	; 0
    1eac:	e6 95       	lsr	r30
    1eae:	00 1c       	adc	r0, r0
    1eb0:	ca f7       	brpl	.-14     	; 0x1ea4 <__divsf3_pse+0x2c>
    1eb2:	29 d0       	rcall	.+82     	; 0x1f06 <__divsf3_pse+0x8e>
    1eb4:	fe 2f       	mov	r31, r30
    1eb6:	27 d0       	rcall	.+78     	; 0x1f06 <__divsf3_pse+0x8e>
    1eb8:	66 0f       	add	r22, r22
    1eba:	77 1f       	adc	r23, r23
    1ebc:	88 1f       	adc	r24, r24
    1ebe:	bb 1f       	adc	r27, r27
    1ec0:	26 17       	cp	r18, r22
    1ec2:	37 07       	cpc	r19, r23
    1ec4:	48 07       	cpc	r20, r24
    1ec6:	ab 07       	cpc	r26, r27
    1ec8:	b0 e8       	ldi	r27, 0x80	; 128
    1eca:	09 f0       	breq	.+2      	; 0x1ece <__divsf3_pse+0x56>
    1ecc:	bb 0b       	sbc	r27, r27
    1ece:	80 2d       	mov	r24, r0
    1ed0:	bf 01       	movw	r22, r30
    1ed2:	ff 27       	eor	r31, r31
    1ed4:	93 58       	subi	r25, 0x83	; 131
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	2a f0       	brmi	.+10     	; 0x1ee4 <__divsf3_pse+0x6c>
    1eda:	9e 3f       	cpi	r25, 0xFE	; 254
    1edc:	51 05       	cpc	r21, r1
    1ede:	68 f0       	brcs	.+26     	; 0x1efa <__divsf3_pse+0x82>
    1ee0:	b6 c0       	rjmp	.+364    	; 0x204e <__fp_inf>
    1ee2:	5e c1       	rjmp	.+700    	; 0x21a0 <__fp_szero>
    1ee4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee6:	ec f3       	brlt	.-6      	; 0x1ee2 <__divsf3_pse+0x6a>
    1ee8:	98 3e       	cpi	r25, 0xE8	; 232
    1eea:	dc f3       	brlt	.-10     	; 0x1ee2 <__divsf3_pse+0x6a>
    1eec:	86 95       	lsr	r24
    1eee:	77 95       	ror	r23
    1ef0:	67 95       	ror	r22
    1ef2:	b7 95       	ror	r27
    1ef4:	f7 95       	ror	r31
    1ef6:	9f 5f       	subi	r25, 0xFF	; 255
    1ef8:	c9 f7       	brne	.-14     	; 0x1eec <__divsf3_pse+0x74>
    1efa:	88 0f       	add	r24, r24
    1efc:	91 1d       	adc	r25, r1
    1efe:	96 95       	lsr	r25
    1f00:	87 95       	ror	r24
    1f02:	97 f9       	bld	r25, 7
    1f04:	08 95       	ret
    1f06:	e1 e0       	ldi	r30, 0x01	; 1
    1f08:	66 0f       	add	r22, r22
    1f0a:	77 1f       	adc	r23, r23
    1f0c:	88 1f       	adc	r24, r24
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	62 17       	cp	r22, r18
    1f12:	73 07       	cpc	r23, r19
    1f14:	84 07       	cpc	r24, r20
    1f16:	ba 07       	cpc	r27, r26
    1f18:	20 f0       	brcs	.+8      	; 0x1f22 <__divsf3_pse+0xaa>
    1f1a:	62 1b       	sub	r22, r18
    1f1c:	73 0b       	sbc	r23, r19
    1f1e:	84 0b       	sbc	r24, r20
    1f20:	ba 0b       	sbc	r27, r26
    1f22:	ee 1f       	adc	r30, r30
    1f24:	88 f7       	brcc	.-30     	; 0x1f08 <__divsf3_pse+0x90>
    1f26:	e0 95       	com	r30
    1f28:	08 95       	ret

00001f2a <__fixsfsi>:
    1f2a:	04 d0       	rcall	.+8      	; 0x1f34 <__fixunssfsi>
    1f2c:	68 94       	set
    1f2e:	b1 11       	cpse	r27, r1
    1f30:	37 c1       	rjmp	.+622    	; 0x21a0 <__fp_szero>
    1f32:	08 95       	ret

00001f34 <__fixunssfsi>:
    1f34:	1a d1       	rcall	.+564    	; 0x216a <__fp_splitA>
    1f36:	88 f0       	brcs	.+34     	; 0x1f5a <__fixunssfsi+0x26>
    1f38:	9f 57       	subi	r25, 0x7F	; 127
    1f3a:	90 f0       	brcs	.+36     	; 0x1f60 <__fixunssfsi+0x2c>
    1f3c:	b9 2f       	mov	r27, r25
    1f3e:	99 27       	eor	r25, r25
    1f40:	b7 51       	subi	r27, 0x17	; 23
    1f42:	a0 f0       	brcs	.+40     	; 0x1f6c <__fixunssfsi+0x38>
    1f44:	d1 f0       	breq	.+52     	; 0x1f7a <__fixunssfsi+0x46>
    1f46:	66 0f       	add	r22, r22
    1f48:	77 1f       	adc	r23, r23
    1f4a:	88 1f       	adc	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	1a f0       	brmi	.+6      	; 0x1f56 <__fixunssfsi+0x22>
    1f50:	ba 95       	dec	r27
    1f52:	c9 f7       	brne	.-14     	; 0x1f46 <__fixunssfsi+0x12>
    1f54:	12 c0       	rjmp	.+36     	; 0x1f7a <__fixunssfsi+0x46>
    1f56:	b1 30       	cpi	r27, 0x01	; 1
    1f58:	81 f0       	breq	.+32     	; 0x1f7a <__fixunssfsi+0x46>
    1f5a:	21 d1       	rcall	.+578    	; 0x219e <__fp_zero>
    1f5c:	b1 e0       	ldi	r27, 0x01	; 1
    1f5e:	08 95       	ret
    1f60:	1e c1       	rjmp	.+572    	; 0x219e <__fp_zero>
    1f62:	67 2f       	mov	r22, r23
    1f64:	78 2f       	mov	r23, r24
    1f66:	88 27       	eor	r24, r24
    1f68:	b8 5f       	subi	r27, 0xF8	; 248
    1f6a:	39 f0       	breq	.+14     	; 0x1f7a <__fixunssfsi+0x46>
    1f6c:	b9 3f       	cpi	r27, 0xF9	; 249
    1f6e:	cc f3       	brlt	.-14     	; 0x1f62 <__fixunssfsi+0x2e>
    1f70:	86 95       	lsr	r24
    1f72:	77 95       	ror	r23
    1f74:	67 95       	ror	r22
    1f76:	b3 95       	inc	r27
    1f78:	d9 f7       	brne	.-10     	; 0x1f70 <__fixunssfsi+0x3c>
    1f7a:	3e f4       	brtc	.+14     	; 0x1f8a <__fixunssfsi+0x56>
    1f7c:	90 95       	com	r25
    1f7e:	80 95       	com	r24
    1f80:	70 95       	com	r23
    1f82:	61 95       	neg	r22
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255
    1f86:	8f 4f       	sbci	r24, 0xFF	; 255
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	08 95       	ret

00001f8c <__floatunsisf>:
    1f8c:	e8 94       	clt
    1f8e:	09 c0       	rjmp	.+18     	; 0x1fa2 <__floatsisf+0x12>

00001f90 <__floatsisf>:
    1f90:	97 fb       	bst	r25, 7
    1f92:	3e f4       	brtc	.+14     	; 0x1fa2 <__floatsisf+0x12>
    1f94:	90 95       	com	r25
    1f96:	80 95       	com	r24
    1f98:	70 95       	com	r23
    1f9a:	61 95       	neg	r22
    1f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa2:	99 23       	and	r25, r25
    1fa4:	a9 f0       	breq	.+42     	; 0x1fd0 <__floatsisf+0x40>
    1fa6:	f9 2f       	mov	r31, r25
    1fa8:	96 e9       	ldi	r25, 0x96	; 150
    1faa:	bb 27       	eor	r27, r27
    1fac:	93 95       	inc	r25
    1fae:	f6 95       	lsr	r31
    1fb0:	87 95       	ror	r24
    1fb2:	77 95       	ror	r23
    1fb4:	67 95       	ror	r22
    1fb6:	b7 95       	ror	r27
    1fb8:	f1 11       	cpse	r31, r1
    1fba:	f8 cf       	rjmp	.-16     	; 0x1fac <__floatsisf+0x1c>
    1fbc:	fa f4       	brpl	.+62     	; 0x1ffc <__floatsisf+0x6c>
    1fbe:	bb 0f       	add	r27, r27
    1fc0:	11 f4       	brne	.+4      	; 0x1fc6 <__floatsisf+0x36>
    1fc2:	60 ff       	sbrs	r22, 0
    1fc4:	1b c0       	rjmp	.+54     	; 0x1ffc <__floatsisf+0x6c>
    1fc6:	6f 5f       	subi	r22, 0xFF	; 255
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	8f 4f       	sbci	r24, 0xFF	; 255
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	16 c0       	rjmp	.+44     	; 0x1ffc <__floatsisf+0x6c>
    1fd0:	88 23       	and	r24, r24
    1fd2:	11 f0       	breq	.+4      	; 0x1fd8 <__floatsisf+0x48>
    1fd4:	96 e9       	ldi	r25, 0x96	; 150
    1fd6:	11 c0       	rjmp	.+34     	; 0x1ffa <__floatsisf+0x6a>
    1fd8:	77 23       	and	r23, r23
    1fda:	21 f0       	breq	.+8      	; 0x1fe4 <__floatsisf+0x54>
    1fdc:	9e e8       	ldi	r25, 0x8E	; 142
    1fde:	87 2f       	mov	r24, r23
    1fe0:	76 2f       	mov	r23, r22
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <__floatsisf+0x5e>
    1fe4:	66 23       	and	r22, r22
    1fe6:	71 f0       	breq	.+28     	; 0x2004 <__floatsisf+0x74>
    1fe8:	96 e8       	ldi	r25, 0x86	; 134
    1fea:	86 2f       	mov	r24, r22
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	2a f0       	brmi	.+10     	; 0x1ffc <__floatsisf+0x6c>
    1ff2:	9a 95       	dec	r25
    1ff4:	66 0f       	add	r22, r22
    1ff6:	77 1f       	adc	r23, r23
    1ff8:	88 1f       	adc	r24, r24
    1ffa:	da f7       	brpl	.-10     	; 0x1ff2 <__floatsisf+0x62>
    1ffc:	88 0f       	add	r24, r24
    1ffe:	96 95       	lsr	r25
    2000:	87 95       	ror	r24
    2002:	97 f9       	bld	r25, 7
    2004:	08 95       	ret

00002006 <__fp_cmp>:
    2006:	99 0f       	add	r25, r25
    2008:	00 08       	sbc	r0, r0
    200a:	55 0f       	add	r21, r21
    200c:	aa 0b       	sbc	r26, r26
    200e:	e0 e8       	ldi	r30, 0x80	; 128
    2010:	fe ef       	ldi	r31, 0xFE	; 254
    2012:	16 16       	cp	r1, r22
    2014:	17 06       	cpc	r1, r23
    2016:	e8 07       	cpc	r30, r24
    2018:	f9 07       	cpc	r31, r25
    201a:	c0 f0       	brcs	.+48     	; 0x204c <__fp_cmp+0x46>
    201c:	12 16       	cp	r1, r18
    201e:	13 06       	cpc	r1, r19
    2020:	e4 07       	cpc	r30, r20
    2022:	f5 07       	cpc	r31, r21
    2024:	98 f0       	brcs	.+38     	; 0x204c <__fp_cmp+0x46>
    2026:	62 1b       	sub	r22, r18
    2028:	73 0b       	sbc	r23, r19
    202a:	84 0b       	sbc	r24, r20
    202c:	95 0b       	sbc	r25, r21
    202e:	39 f4       	brne	.+14     	; 0x203e <__fp_cmp+0x38>
    2030:	0a 26       	eor	r0, r26
    2032:	61 f0       	breq	.+24     	; 0x204c <__fp_cmp+0x46>
    2034:	23 2b       	or	r18, r19
    2036:	24 2b       	or	r18, r20
    2038:	25 2b       	or	r18, r21
    203a:	21 f4       	brne	.+8      	; 0x2044 <__fp_cmp+0x3e>
    203c:	08 95       	ret
    203e:	0a 26       	eor	r0, r26
    2040:	09 f4       	brne	.+2      	; 0x2044 <__fp_cmp+0x3e>
    2042:	a1 40       	sbci	r26, 0x01	; 1
    2044:	a6 95       	lsr	r26
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	81 1d       	adc	r24, r1
    204a:	81 1d       	adc	r24, r1
    204c:	08 95       	ret

0000204e <__fp_inf>:
    204e:	97 f9       	bld	r25, 7
    2050:	9f 67       	ori	r25, 0x7F	; 127
    2052:	80 e8       	ldi	r24, 0x80	; 128
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	08 95       	ret

0000205a <__fp_nan>:
    205a:	9f ef       	ldi	r25, 0xFF	; 255
    205c:	80 ec       	ldi	r24, 0xC0	; 192
    205e:	08 95       	ret

00002060 <__fp_powser>:
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	1f 93       	push	r17
    2066:	0f 93       	push	r16
    2068:	ff 92       	push	r15
    206a:	ef 92       	push	r14
    206c:	df 92       	push	r13
    206e:	7b 01       	movw	r14, r22
    2070:	8c 01       	movw	r16, r24
    2072:	68 94       	set
    2074:	05 c0       	rjmp	.+10     	; 0x2080 <__fp_powser+0x20>
    2076:	da 2e       	mov	r13, r26
    2078:	ef 01       	movw	r28, r30
    207a:	af d0       	rcall	.+350    	; 0x21da <__mulsf3x>
    207c:	fe 01       	movw	r30, r28
    207e:	e8 94       	clt
    2080:	a5 91       	lpm	r26, Z+
    2082:	25 91       	lpm	r18, Z+
    2084:	35 91       	lpm	r19, Z+
    2086:	45 91       	lpm	r20, Z+
    2088:	55 91       	lpm	r21, Z+
    208a:	ae f3       	brts	.-22     	; 0x2076 <__fp_powser+0x16>
    208c:	ef 01       	movw	r28, r30
    208e:	63 de       	rcall	.-826    	; 0x1d56 <__addsf3x>
    2090:	fe 01       	movw	r30, r28
    2092:	97 01       	movw	r18, r14
    2094:	a8 01       	movw	r20, r16
    2096:	da 94       	dec	r13
    2098:	79 f7       	brne	.-34     	; 0x2078 <__fp_powser+0x18>
    209a:	df 90       	pop	r13
    209c:	ef 90       	pop	r14
    209e:	ff 90       	pop	r15
    20a0:	0f 91       	pop	r16
    20a2:	1f 91       	pop	r17
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <__fp_pscA>:
    20aa:	00 24       	eor	r0, r0
    20ac:	0a 94       	dec	r0
    20ae:	16 16       	cp	r1, r22
    20b0:	17 06       	cpc	r1, r23
    20b2:	18 06       	cpc	r1, r24
    20b4:	09 06       	cpc	r0, r25
    20b6:	08 95       	ret

000020b8 <__fp_pscB>:
    20b8:	00 24       	eor	r0, r0
    20ba:	0a 94       	dec	r0
    20bc:	12 16       	cp	r1, r18
    20be:	13 06       	cpc	r1, r19
    20c0:	14 06       	cpc	r1, r20
    20c2:	05 06       	cpc	r0, r21
    20c4:	08 95       	ret
    20c6:	c9 cf       	rjmp	.-110    	; 0x205a <__fp_nan>

000020c8 <__fp_rempio2>:
    20c8:	50 d0       	rcall	.+160    	; 0x216a <__fp_splitA>
    20ca:	e8 f3       	brcs	.-6      	; 0x20c6 <__fp_pscB+0xe>
    20cc:	e8 94       	clt
    20ce:	e0 e0       	ldi	r30, 0x00	; 0
    20d0:	bb 27       	eor	r27, r27
    20d2:	9f 57       	subi	r25, 0x7F	; 127
    20d4:	f0 f0       	brcs	.+60     	; 0x2112 <__fp_rempio2+0x4a>
    20d6:	2a ed       	ldi	r18, 0xDA	; 218
    20d8:	3f e0       	ldi	r19, 0x0F	; 15
    20da:	49 ec       	ldi	r20, 0xC9	; 201
    20dc:	06 c0       	rjmp	.+12     	; 0x20ea <__fp_rempio2+0x22>
    20de:	ee 0f       	add	r30, r30
    20e0:	bb 0f       	add	r27, r27
    20e2:	66 1f       	adc	r22, r22
    20e4:	77 1f       	adc	r23, r23
    20e6:	88 1f       	adc	r24, r24
    20e8:	28 f0       	brcs	.+10     	; 0x20f4 <__fp_rempio2+0x2c>
    20ea:	b2 3a       	cpi	r27, 0xA2	; 162
    20ec:	62 07       	cpc	r22, r18
    20ee:	73 07       	cpc	r23, r19
    20f0:	84 07       	cpc	r24, r20
    20f2:	28 f0       	brcs	.+10     	; 0x20fe <__fp_rempio2+0x36>
    20f4:	b2 5a       	subi	r27, 0xA2	; 162
    20f6:	62 0b       	sbc	r22, r18
    20f8:	73 0b       	sbc	r23, r19
    20fa:	84 0b       	sbc	r24, r20
    20fc:	e3 95       	inc	r30
    20fe:	9a 95       	dec	r25
    2100:	72 f7       	brpl	.-36     	; 0x20de <__fp_rempio2+0x16>
    2102:	80 38       	cpi	r24, 0x80	; 128
    2104:	30 f4       	brcc	.+12     	; 0x2112 <__fp_rempio2+0x4a>
    2106:	9a 95       	dec	r25
    2108:	bb 0f       	add	r27, r27
    210a:	66 1f       	adc	r22, r22
    210c:	77 1f       	adc	r23, r23
    210e:	88 1f       	adc	r24, r24
    2110:	d2 f7       	brpl	.-12     	; 0x2106 <__fp_rempio2+0x3e>
    2112:	90 48       	sbci	r25, 0x80	; 128
    2114:	be c0       	rjmp	.+380    	; 0x2292 <__fp_mpack_finite>

00002116 <__fp_round>:
    2116:	09 2e       	mov	r0, r25
    2118:	03 94       	inc	r0
    211a:	00 0c       	add	r0, r0
    211c:	11 f4       	brne	.+4      	; 0x2122 <__fp_round+0xc>
    211e:	88 23       	and	r24, r24
    2120:	52 f0       	brmi	.+20     	; 0x2136 <__fp_round+0x20>
    2122:	bb 0f       	add	r27, r27
    2124:	40 f4       	brcc	.+16     	; 0x2136 <__fp_round+0x20>
    2126:	bf 2b       	or	r27, r31
    2128:	11 f4       	brne	.+4      	; 0x212e <__fp_round+0x18>
    212a:	60 ff       	sbrs	r22, 0
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <__fp_round+0x20>
    212e:	6f 5f       	subi	r22, 0xFF	; 255
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	8f 4f       	sbci	r24, 0xFF	; 255
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	08 95       	ret

00002138 <__fp_sinus>:
    2138:	ef 93       	push	r30
    213a:	e0 ff       	sbrs	r30, 0
    213c:	06 c0       	rjmp	.+12     	; 0x214a <__fp_sinus+0x12>
    213e:	a2 ea       	ldi	r26, 0xA2	; 162
    2140:	2a ed       	ldi	r18, 0xDA	; 218
    2142:	3f e0       	ldi	r19, 0x0F	; 15
    2144:	49 ec       	ldi	r20, 0xC9	; 201
    2146:	5f eb       	ldi	r21, 0xBF	; 191
    2148:	06 de       	rcall	.-1012   	; 0x1d56 <__addsf3x>
    214a:	e5 df       	rcall	.-54     	; 0x2116 <__fp_round>
    214c:	0f 90       	pop	r0
    214e:	03 94       	inc	r0
    2150:	01 fc       	sbrc	r0, 1
    2152:	90 58       	subi	r25, 0x80	; 128
    2154:	e9 eb       	ldi	r30, 0xB9	; 185
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	a8 c0       	rjmp	.+336    	; 0x22aa <__fp_powsodd>

0000215a <__fp_split3>:
    215a:	57 fd       	sbrc	r21, 7
    215c:	90 58       	subi	r25, 0x80	; 128
    215e:	44 0f       	add	r20, r20
    2160:	55 1f       	adc	r21, r21
    2162:	59 f0       	breq	.+22     	; 0x217a <__fp_splitA+0x10>
    2164:	5f 3f       	cpi	r21, 0xFF	; 255
    2166:	71 f0       	breq	.+28     	; 0x2184 <__fp_splitA+0x1a>
    2168:	47 95       	ror	r20

0000216a <__fp_splitA>:
    216a:	88 0f       	add	r24, r24
    216c:	97 fb       	bst	r25, 7
    216e:	99 1f       	adc	r25, r25
    2170:	61 f0       	breq	.+24     	; 0x218a <__fp_splitA+0x20>
    2172:	9f 3f       	cpi	r25, 0xFF	; 255
    2174:	79 f0       	breq	.+30     	; 0x2194 <__fp_splitA+0x2a>
    2176:	87 95       	ror	r24
    2178:	08 95       	ret
    217a:	12 16       	cp	r1, r18
    217c:	13 06       	cpc	r1, r19
    217e:	14 06       	cpc	r1, r20
    2180:	55 1f       	adc	r21, r21
    2182:	f2 cf       	rjmp	.-28     	; 0x2168 <__fp_split3+0xe>
    2184:	46 95       	lsr	r20
    2186:	f1 df       	rcall	.-30     	; 0x216a <__fp_splitA>
    2188:	08 c0       	rjmp	.+16     	; 0x219a <__fp_splitA+0x30>
    218a:	16 16       	cp	r1, r22
    218c:	17 06       	cpc	r1, r23
    218e:	18 06       	cpc	r1, r24
    2190:	99 1f       	adc	r25, r25
    2192:	f1 cf       	rjmp	.-30     	; 0x2176 <__fp_splitA+0xc>
    2194:	86 95       	lsr	r24
    2196:	71 05       	cpc	r23, r1
    2198:	61 05       	cpc	r22, r1
    219a:	08 94       	sec
    219c:	08 95       	ret

0000219e <__fp_zero>:
    219e:	e8 94       	clt

000021a0 <__fp_szero>:
    21a0:	bb 27       	eor	r27, r27
    21a2:	66 27       	eor	r22, r22
    21a4:	77 27       	eor	r23, r23
    21a6:	cb 01       	movw	r24, r22
    21a8:	97 f9       	bld	r25, 7
    21aa:	08 95       	ret

000021ac <__gesf2>:
    21ac:	2c df       	rcall	.-424    	; 0x2006 <__fp_cmp>
    21ae:	08 f4       	brcc	.+2      	; 0x21b2 <__gesf2+0x6>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	08 95       	ret

000021b4 <inverse>:
    21b4:	9b 01       	movw	r18, r22
    21b6:	ac 01       	movw	r20, r24
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	80 e8       	ldi	r24, 0x80	; 128
    21be:	9f e3       	ldi	r25, 0x3F	; 63
    21c0:	4c ce       	rjmp	.-872    	; 0x1e5a <__divsf3>

000021c2 <__mulsf3>:
    21c2:	0b d0       	rcall	.+22     	; 0x21da <__mulsf3x>
    21c4:	a8 cf       	rjmp	.-176    	; 0x2116 <__fp_round>
    21c6:	71 df       	rcall	.-286    	; 0x20aa <__fp_pscA>
    21c8:	28 f0       	brcs	.+10     	; 0x21d4 <__mulsf3+0x12>
    21ca:	76 df       	rcall	.-276    	; 0x20b8 <__fp_pscB>
    21cc:	18 f0       	brcs	.+6      	; 0x21d4 <__mulsf3+0x12>
    21ce:	95 23       	and	r25, r21
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <__mulsf3+0x12>
    21d2:	3d cf       	rjmp	.-390    	; 0x204e <__fp_inf>
    21d4:	42 cf       	rjmp	.-380    	; 0x205a <__fp_nan>
    21d6:	11 24       	eor	r1, r1
    21d8:	e3 cf       	rjmp	.-58     	; 0x21a0 <__fp_szero>

000021da <__mulsf3x>:
    21da:	bf df       	rcall	.-130    	; 0x215a <__fp_split3>
    21dc:	a0 f3       	brcs	.-24     	; 0x21c6 <__mulsf3+0x4>

000021de <__mulsf3_pse>:
    21de:	95 9f       	mul	r25, r21
    21e0:	d1 f3       	breq	.-12     	; 0x21d6 <__mulsf3+0x14>
    21e2:	95 0f       	add	r25, r21
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	55 1f       	adc	r21, r21
    21e8:	62 9f       	mul	r22, r18
    21ea:	f0 01       	movw	r30, r0
    21ec:	72 9f       	mul	r23, r18
    21ee:	bb 27       	eor	r27, r27
    21f0:	f0 0d       	add	r31, r0
    21f2:	b1 1d       	adc	r27, r1
    21f4:	63 9f       	mul	r22, r19
    21f6:	aa 27       	eor	r26, r26
    21f8:	f0 0d       	add	r31, r0
    21fa:	b1 1d       	adc	r27, r1
    21fc:	aa 1f       	adc	r26, r26
    21fe:	64 9f       	mul	r22, r20
    2200:	66 27       	eor	r22, r22
    2202:	b0 0d       	add	r27, r0
    2204:	a1 1d       	adc	r26, r1
    2206:	66 1f       	adc	r22, r22
    2208:	82 9f       	mul	r24, r18
    220a:	22 27       	eor	r18, r18
    220c:	b0 0d       	add	r27, r0
    220e:	a1 1d       	adc	r26, r1
    2210:	62 1f       	adc	r22, r18
    2212:	73 9f       	mul	r23, r19
    2214:	b0 0d       	add	r27, r0
    2216:	a1 1d       	adc	r26, r1
    2218:	62 1f       	adc	r22, r18
    221a:	83 9f       	mul	r24, r19
    221c:	a0 0d       	add	r26, r0
    221e:	61 1d       	adc	r22, r1
    2220:	22 1f       	adc	r18, r18
    2222:	74 9f       	mul	r23, r20
    2224:	33 27       	eor	r19, r19
    2226:	a0 0d       	add	r26, r0
    2228:	61 1d       	adc	r22, r1
    222a:	23 1f       	adc	r18, r19
    222c:	84 9f       	mul	r24, r20
    222e:	60 0d       	add	r22, r0
    2230:	21 1d       	adc	r18, r1
    2232:	82 2f       	mov	r24, r18
    2234:	76 2f       	mov	r23, r22
    2236:	6a 2f       	mov	r22, r26
    2238:	11 24       	eor	r1, r1
    223a:	9f 57       	subi	r25, 0x7F	; 127
    223c:	50 40       	sbci	r21, 0x00	; 0
    223e:	8a f0       	brmi	.+34     	; 0x2262 <__mulsf3_pse+0x84>
    2240:	e1 f0       	breq	.+56     	; 0x227a <__mulsf3_pse+0x9c>
    2242:	88 23       	and	r24, r24
    2244:	4a f0       	brmi	.+18     	; 0x2258 <__mulsf3_pse+0x7a>
    2246:	ee 0f       	add	r30, r30
    2248:	ff 1f       	adc	r31, r31
    224a:	bb 1f       	adc	r27, r27
    224c:	66 1f       	adc	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	88 1f       	adc	r24, r24
    2252:	91 50       	subi	r25, 0x01	; 1
    2254:	50 40       	sbci	r21, 0x00	; 0
    2256:	a9 f7       	brne	.-22     	; 0x2242 <__mulsf3_pse+0x64>
    2258:	9e 3f       	cpi	r25, 0xFE	; 254
    225a:	51 05       	cpc	r21, r1
    225c:	70 f0       	brcs	.+28     	; 0x227a <__mulsf3_pse+0x9c>
    225e:	f7 ce       	rjmp	.-530    	; 0x204e <__fp_inf>
    2260:	9f cf       	rjmp	.-194    	; 0x21a0 <__fp_szero>
    2262:	5f 3f       	cpi	r21, 0xFF	; 255
    2264:	ec f3       	brlt	.-6      	; 0x2260 <__mulsf3_pse+0x82>
    2266:	98 3e       	cpi	r25, 0xE8	; 232
    2268:	dc f3       	brlt	.-10     	; 0x2260 <__mulsf3_pse+0x82>
    226a:	86 95       	lsr	r24
    226c:	77 95       	ror	r23
    226e:	67 95       	ror	r22
    2270:	b7 95       	ror	r27
    2272:	f7 95       	ror	r31
    2274:	e7 95       	ror	r30
    2276:	9f 5f       	subi	r25, 0xFF	; 255
    2278:	c1 f7       	brne	.-16     	; 0x226a <__mulsf3_pse+0x8c>
    227a:	fe 2b       	or	r31, r30
    227c:	88 0f       	add	r24, r24
    227e:	91 1d       	adc	r25, r1
    2280:	96 95       	lsr	r25
    2282:	87 95       	ror	r24
    2284:	97 f9       	bld	r25, 7
    2286:	08 95       	ret

00002288 <square>:
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
    228c:	9a cf       	rjmp	.-204    	; 0x21c2 <__mulsf3>

0000228e <__fp_mpack>:
    228e:	9f 3f       	cpi	r25, 0xFF	; 255
    2290:	31 f0       	breq	.+12     	; 0x229e <__fp_mpack_finite+0xc>

00002292 <__fp_mpack_finite>:
    2292:	91 50       	subi	r25, 0x01	; 1
    2294:	20 f4       	brcc	.+8      	; 0x229e <__fp_mpack_finite+0xc>
    2296:	87 95       	ror	r24
    2298:	77 95       	ror	r23
    229a:	67 95       	ror	r22
    229c:	b7 95       	ror	r27
    229e:	88 0f       	add	r24, r24
    22a0:	91 1d       	adc	r25, r1
    22a2:	96 95       	lsr	r25
    22a4:	87 95       	ror	r24
    22a6:	97 f9       	bld	r25, 7
    22a8:	08 95       	ret

000022aa <__fp_powsodd>:
    22aa:	9f 93       	push	r25
    22ac:	8f 93       	push	r24
    22ae:	7f 93       	push	r23
    22b0:	6f 93       	push	r22
    22b2:	ff 93       	push	r31
    22b4:	ef 93       	push	r30
    22b6:	9b 01       	movw	r18, r22
    22b8:	ac 01       	movw	r20, r24
    22ba:	83 df       	rcall	.-250    	; 0x21c2 <__mulsf3>
    22bc:	ef 91       	pop	r30
    22be:	ff 91       	pop	r31
    22c0:	cf de       	rcall	.-610    	; 0x2060 <__fp_powser>
    22c2:	2f 91       	pop	r18
    22c4:	3f 91       	pop	r19
    22c6:	4f 91       	pop	r20
    22c8:	5f 91       	pop	r21
    22ca:	7b cf       	rjmp	.-266    	; 0x21c2 <__mulsf3>

000022cc <_exit>:
    22cc:	f8 94       	cli

000022ce <__stop_program>:
    22ce:	ff cf       	rjmp	.-2      	; 0x22ce <__stop_program>
