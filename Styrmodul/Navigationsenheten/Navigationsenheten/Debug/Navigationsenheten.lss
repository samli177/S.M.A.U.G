
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001232  00800100  00002072  00002106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000675  00801332  00801332  00003338  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  000061a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006ee8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c8  00000000  00000000  00006f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000388c  00000000  00000000  000072df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f74  00000000  00000000  0000ab6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000233e  00000000  00000000  0000badf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b48  00000000  00000000  0000de20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000cae  00000000  00000000  0000e968  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000225a  00000000  00000000  0000f616  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000400  00000000  00000000  00011870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	e5 c5       	rjmp	.+3018   	; 0xbd0 <__vector_1>
       6:	00 00       	nop
       8:	0d c6       	rjmp	.+3098   	; 0xc24 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	81 c0       	rjmp	.+258    	; 0x114 <__bad_interrupt>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	67 c6       	rjmp	.+3278   	; 0xd04 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c6       	rjmp	.+3230   	; 0xd20 <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e2 e7       	ldi	r30, 0x72	; 114
      ec:	f0 e2       	ldi	r31, 0x20	; 32
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a2 33       	cpi	r26, 0x32	; 50
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	29 e1       	ldi	r18, 0x19	; 25
     100:	a2 e3       	ldi	r26, 0x32	; 50
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a7 3a       	cpi	r26, 0xA7	; 167
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	b4 d5       	rcall	.+2920   	; 0xc78 <main>
     110:	0c 94 37 10 	jmp	0x206e	; 0x206e <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
	if(gStatus)
     11a:	80 91 00 01 	lds	r24, 0x0100
     11e:	88 23       	and	r24, r24
     120:	c9 f0       	breq	.+50     	; 0x154 <turn_around+0x3e>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     122:	6b e1       	ldi	r22, 0x1B	; 27
     124:	71 e1       	ldi	r23, 0x11	; 17
     126:	80 e8       	ldi	r24, 0x80	; 128
     128:	10 d7       	rcall	.+3616   	; 0xf4a <TWI_send_string>
     12a:	14 c0       	rjmp	.+40     	; 0x154 <turn_around+0x3e>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	6e e1       	ldi	r22, 0x1E	; 30
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <USART_send_command_parameters>
		navigation_stepping_delay();
     136:	dd d1       	rcall	.+954    	; 0x4f2 <navigation_stepping_delay>
     138:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
	}
	for(int i = 0; (i < 40 && TWI_get_autonom_settings() != 0); ++i)
     13a:	19 f0       	breq	.+6      	; 0x142 <turn_around+0x2c>
     13c:	e1 d7       	rcall	.+4034   	; 0x1100 <TWI_get_autonom_settings>
     13e:	81 11       	cpse	r24, r1
     140:	f5 cf       	rjmp	.-22     	; 0x12c <turn_around+0x16>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	if(gStatus)
     142:	80 91 00 01 	lds	r24, 0x0100
     146:	88 23       	and	r24, r24
     148:	41 f0       	breq	.+16     	; 0x15a <turn_around+0x44>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     14a:	64 e3       	ldi	r22, 0x34	; 52
     14c:	71 e1       	ldi	r23, 0x11	; 17
     14e:	80 e8       	ldi	r24, 0x80	; 128
     150:	fc d6       	rcall	.+3576   	; 0xf4a <TWI_send_string>
     152:	03 c0       	rjmp	.+6      	; 0x15a <turn_around+0x44>
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     154:	c8 e2       	ldi	r28, 0x28	; 40
     156:	d0 e0       	ldi	r29, 0x00	; 0
     158:	f1 cf       	rjmp	.-30     	; 0x13c <turn_around+0x26>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
	}
}
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <walk_forward>:

void walk_forward()
{
     160:	8f 92       	push	r8
     162:	9f 92       	push	r9
     164:	af 92       	push	r10
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     174:	33 d4       	rcall	.+2150   	; 0x9dc <navigation_angle_offset>
     176:	6b 01       	movw	r12, r22
     178:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     17a:	94 d2       	rcall	.+1320   	; 0x6a4 <navigation_direction_regulation>
     17c:	4b 01       	movw	r8, r22
     17e:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	48 e4       	ldi	r20, 0x48	; 72
     186:	52 e4       	ldi	r21, 0x42	; 66
     188:	c7 01       	movw	r24, r14
     18a:	b6 01       	movw	r22, r12
     18c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     190:	9b 01       	movw	r18, r22
     192:	ac 01       	movw	r20, r24
     194:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__addsf3>
     198:	2b ed       	ldi	r18, 0xDB	; 219
     19a:	3f e0       	ldi	r19, 0x0F	; 15
     19c:	49 e4       	ldi	r20, 0x49	; 73
     19e:	50 e4       	ldi	r21, 0x40	; 64
     1a0:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divsf3>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	4c e4       	ldi	r20, 0x4C	; 76
     1aa:	52 e4       	ldi	r21, 0x42	; 66
     1ac:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__addsf3>
     1b0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__fixsfsi>
	if (adjustmentRotation >= 100)
     1b4:	64 36       	cpi	r22, 0x64	; 100
     1b6:	71 05       	cpc	r23, r1
     1b8:	34 f4       	brge	.+12     	; 0x1c6 <walk_forward+0x66>
     1ba:	eb 01       	movw	r28, r22
     1bc:	dd 23       	and	r29, r29
     1be:	2c f4       	brge	.+10     	; 0x1ca <walk_forward+0x6a>
     1c0:	c0 e0       	ldi	r28, 0x00	; 0
     1c2:	d0 e0       	ldi	r29, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1c6:	c4 e6       	ldi	r28, 0x64	; 100
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	44 eb       	ldi	r20, 0xB4	; 180
     1d0:	52 e4       	ldi	r21, 0x42	; 66
     1d2:	c5 01       	movw	r24, r10
     1d4:	b4 01       	movw	r22, r8
     1d6:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     1da:	2b ed       	ldi	r18, 0xDB	; 219
     1dc:	3f e0       	ldi	r19, 0x0F	; 15
     1de:	49 ec       	ldi	r20, 0xC9	; 201
     1e0:	50 e4       	ldi	r21, 0x40	; 64
     1e2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divsf3>
     1e6:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__fixsfsi>
     1ea:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1ec:	40 91 01 01 	lds	r20, 0x0101
     1f0:	6c 2f       	mov	r22, r28
     1f2:	82 2f       	mov	r24, r18
     1f4:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1f8:	7c d1       	rcall	.+760    	; 0x4f2 <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	ff 90       	pop	r15
     200:	ef 90       	pop	r14
     202:	df 90       	pop	r13
     204:	cf 90       	pop	r12
     206:	bf 90       	pop	r11
     208:	af 90       	pop	r10
     20a:	9f 90       	pop	r9
     20c:	8f 90       	pop	r8
     20e:	08 95       	ret

00000210 <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
	if(gStatus)
     214:	80 91 00 01 	lds	r24, 0x0100
     218:	88 23       	and	r24, r24
     21a:	01 f1       	breq	.+64     	; 0x25c <turn_right+0x4c>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     21c:	69 e5       	ldi	r22, 0x59	; 89
     21e:	71 e1       	ldi	r23, 0x11	; 17
     220:	80 e8       	ldi	r24, 0x80	; 128
     222:	93 d6       	rcall	.+3366   	; 0xf4a <TWI_send_string>
     224:	1b c0       	rjmp	.+54     	; 0x25c <turn_right+0x4c>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	66 e4       	ldi	r22, 0x46	; 70
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <USART_send_command_parameters>
		navigation_stepping_delay();
     230:	60 d1       	rcall	.+704    	; 0x4f2 <navigation_stepping_delay>
     232:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     234:	b1 f0       	breq	.+44     	; 0x262 <turn_right+0x52>
     236:	64 d7       	rcall	.+3784   	; 0x1100 <TWI_get_autonom_settings>
     238:	81 11       	cpse	r24, r1
     23a:	f5 cf       	rjmp	.-22     	; 0x226 <turn_right+0x16>
     23c:	12 c0       	rjmp	.+36     	; 0x262 <turn_right+0x52>
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     23e:	90 df       	rcall	.-224    	; 0x160 <walk_forward>
     240:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     242:	19 f0       	breq	.+6      	; 0x24a <turn_right+0x3a>
     244:	5d d7       	rcall	.+3770   	; 0x1100 <TWI_get_autonom_settings>
     246:	81 11       	cpse	r24, r1
     248:	fa cf       	rjmp	.-12     	; 0x23e <turn_right+0x2e>
	{
		walk_forward();
	}
	if(gStatus)
     24a:	80 91 00 01 	lds	r24, 0x0100
     24e:	88 23       	and	r24, r24
     250:	59 f0       	breq	.+22     	; 0x268 <turn_right+0x58>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     252:	61 e7       	ldi	r22, 0x71	; 113
     254:	71 e1       	ldi	r23, 0x11	; 17
     256:	80 e8       	ldi	r24, 0x80	; 128
     258:	78 d6       	rcall	.+3312   	; 0xf4a <TWI_send_string>
     25a:	06 c0       	rjmp	.+12     	; 0x268 <turn_right+0x58>
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     25c:	c4 e1       	ldi	r28, 0x14	; 20
     25e:	d0 e0       	ldi	r29, 0x00	; 0
     260:	ea cf       	rjmp	.-44     	; 0x236 <turn_right+0x26>
     262:	cc e0       	ldi	r28, 0x0C	; 12
     264:	d0 e0       	ldi	r29, 0x00	; 0
     266:	ee cf       	rjmp	.-36     	; 0x244 <turn_right+0x34>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
	if(gStatus)
     272:	80 91 00 01 	lds	r24, 0x0100
     276:	88 23       	and	r24, r24
     278:	01 f1       	breq	.+64     	; 0x2ba <turn_left+0x4c>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     27a:	65 e8       	ldi	r22, 0x85	; 133
     27c:	71 e1       	ldi	r23, 0x11	; 17
     27e:	80 e8       	ldi	r24, 0x80	; 128
     280:	64 d6       	rcall	.+3272   	; 0xf4a <TWI_send_string>
     282:	1b c0       	rjmp	.+54     	; 0x2ba <turn_left+0x4c>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	6e e1       	ldi	r22, 0x1E	; 30
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <USART_send_command_parameters>
		navigation_stepping_delay();
     28e:	31 d1       	rcall	.+610    	; 0x4f2 <navigation_stepping_delay>
     290:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     292:	b1 f0       	breq	.+44     	; 0x2c0 <turn_left+0x52>
     294:	35 d7       	rcall	.+3690   	; 0x1100 <TWI_get_autonom_settings>
     296:	81 11       	cpse	r24, r1
     298:	f5 cf       	rjmp	.-22     	; 0x284 <turn_left+0x16>
     29a:	12 c0       	rjmp	.+36     	; 0x2c0 <turn_left+0x52>
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     29c:	61 df       	rcall	.-318    	; 0x160 <walk_forward>
     29e:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <turn_left+0x3a>
     2a2:	2e d7       	rcall	.+3676   	; 0x1100 <TWI_get_autonom_settings>
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <turn_left+0x2e>
	{
		walk_forward();
	}
	if(gStatus)
     2a8:	80 91 00 01 	lds	r24, 0x0100
     2ac:	88 23       	and	r24, r24
     2ae:	59 f0       	breq	.+22     	; 0x2c6 <turn_left+0x58>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2b0:	6c e9       	ldi	r22, 0x9C	; 156
     2b2:	71 e1       	ldi	r23, 0x11	; 17
     2b4:	80 e8       	ldi	r24, 0x80	; 128
     2b6:	49 d6       	rcall	.+3218   	; 0xf4a <TWI_send_string>
     2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <turn_left+0x58>
{
	return gStatus;
}

void turn_left()
{
     2ba:	c4 e1       	ldi	r28, 0x14	; 20
     2bc:	d0 e0       	ldi	r29, 0x00	; 0
     2be:	ea cf       	rjmp	.-44     	; 0x294 <turn_left+0x26>
     2c0:	cc e0       	ldi	r28, 0x0C	; 12
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
     2c4:	ee cf       	rjmp	.-36     	; 0x2a2 <turn_left+0x34>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <autonomouswalk_walk>:
	navigation_stepping_delay();
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void autonomouswalk_walk()
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
	navigation_low_pass_obstacle();
     2d0:	99 d1       	rcall	.+818    	; 0x604 <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     2d2:	03 d1       	rcall	.+518    	; 0x4da <navigation_left_algorithm>
     2d4:	88 23       	and	r24, r24
     2d6:	29 f1       	breq	.+74     	; 0x322 <autonomouswalk_walk+0x56>
	{
		if(navigation_check_left_turn() == 2)
     2d8:	d0 d1       	rcall	.+928    	; 0x67a <navigation_check_left_turn>
     2da:	82 30       	cpi	r24, 0x02	; 2
     2dc:	61 f4       	brne	.+24     	; 0x2f6 <autonomouswalk_walk+0x2a>
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <autonomouswalk_walk+0x1c>
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     2e0:	3f df       	rcall	.-386    	; 0x160 <walk_forward>
     2e2:	21 97       	sbiw	r28, 0x01	; 1
	navigation_low_pass_obstacle();
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     2e4:	19 f4       	brne	.+6      	; 0x2ec <autonomouswalk_walk+0x20>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <autonomouswalk_walk+0x26>
void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
     2e8:	c4 e0       	ldi	r28, 0x04	; 4
     2ea:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     2ec:	09 d7       	rcall	.+3602   	; 0x1100 <TWI_get_autonom_settings>
     2ee:	81 11       	cpse	r24, r1
     2f0:	f7 cf       	rjmp	.-18     	; 0x2e0 <autonomouswalk_walk+0x14>
			{
				walk_forward();
			}
			turn_left();
     2f2:	bd df       	rcall	.-134    	; 0x26e <turn_left>
     2f4:	4e c0       	rjmp	.+156    	; 0x392 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     2f6:	84 e0       	ldi	r24, 0x04	; 4
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	3d d1       	rcall	.+634    	; 0x576 <navigation_get_sensor>
     2fc:	89 32       	cpi	r24, 0x29	; 41
     2fe:	10 f0       	brcs	.+4      	; 0x304 <autonomouswalk_walk+0x38>
		{
			walk_forward();
     300:	2f df       	rcall	.-418    	; 0x160 <walk_forward>
     302:	47 c0       	rjmp	.+142    	; 0x392 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_check_right_turn() == 2)
     304:	a5 d1       	rcall	.+842    	; 0x650 <navigation_check_right_turn>
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	11 f4       	brne	.+4      	; 0x30e <autonomouswalk_walk+0x42>
		{
			turn_right();
     30a:	82 df       	rcall	.-252    	; 0x210 <turn_right>
     30c:	42 c0       	rjmp	.+132    	; 0x392 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     30e:	b5 d1       	rcall	.+874    	; 0x67a <navigation_check_left_turn>
     310:	81 11       	cpse	r24, r1
     312:	05 c0       	rjmp	.+10     	; 0x31e <autonomouswalk_walk+0x52>
     314:	9d d1       	rcall	.+826    	; 0x650 <navigation_check_right_turn>
     316:	81 11       	cpse	r24, r1
     318:	02 c0       	rjmp	.+4      	; 0x31e <autonomouswalk_walk+0x52>
		{
			turn_around();
     31a:	fd de       	rcall	.-518    	; 0x116 <turn_around>
     31c:	3a c0       	rjmp	.+116    	; 0x392 <autonomouswalk_walk+0xc6>
		}
		else
		{
			walk_forward();
     31e:	20 df       	rcall	.-448    	; 0x160 <walk_forward>
     320:	38 c0       	rjmp	.+112    	; 0x392 <autonomouswalk_walk+0xc6>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     322:	96 d1       	rcall	.+812    	; 0x650 <navigation_check_right_turn>
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	61 f4       	brne	.+24     	; 0x340 <autonomouswalk_walk+0x74>
     328:	04 c0       	rjmp	.+8      	; 0x332 <autonomouswalk_walk+0x66>
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     32a:	1a df       	rcall	.-460    	; 0x160 <walk_forward>
     32c:	21 97       	sbiw	r28, 0x01	; 1
	}
	else
	{
		if(navigation_check_right_turn() == 2)
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     32e:	19 f4       	brne	.+6      	; 0x336 <autonomouswalk_walk+0x6a>
     330:	05 c0       	rjmp	.+10     	; 0x33c <autonomouswalk_walk+0x70>
			walk_forward();
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     332:	c4 e0       	ldi	r28, 0x04	; 4
     334:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 4 && TWI_get_autonom_settings() != 0); ++i)
     336:	e4 d6       	rcall	.+3528   	; 0x1100 <TWI_get_autonom_settings>
     338:	81 11       	cpse	r24, r1
     33a:	f7 cf       	rjmp	.-18     	; 0x32a <autonomouswalk_walk+0x5e>
			{
				walk_forward();
			}
			turn_right();
     33c:	69 df       	rcall	.-302    	; 0x210 <turn_right>
     33e:	29 c0       	rjmp	.+82     	; 0x392 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     340:	84 e0       	ldi	r24, 0x04	; 4
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	18 d1       	rcall	.+560    	; 0x576 <navigation_get_sensor>
     346:	89 32       	cpi	r24, 0x29	; 41
     348:	10 f0       	brcs	.+4      	; 0x34e <autonomouswalk_walk+0x82>
		{
			walk_forward();
     34a:	0a df       	rcall	.-492    	; 0x160 <walk_forward>
     34c:	22 c0       	rjmp	.+68     	; 0x392 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_check_left_turn() == 2)
     34e:	95 d1       	rcall	.+810    	; 0x67a <navigation_check_left_turn>
     350:	82 30       	cpi	r24, 0x02	; 2
     352:	11 f4       	brne	.+4      	; 0x358 <autonomouswalk_walk+0x8c>
		{
			turn_left();
     354:	8c df       	rcall	.-232    	; 0x26e <turn_left>
     356:	1d c0       	rjmp	.+58     	; 0x392 <autonomouswalk_walk+0xc6>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     358:	90 d1       	rcall	.+800    	; 0x67a <navigation_check_left_turn>
     35a:	81 11       	cpse	r24, r1
     35c:	05 c0       	rjmp	.+10     	; 0x368 <autonomouswalk_walk+0x9c>
     35e:	78 d1       	rcall	.+752    	; 0x650 <navigation_check_right_turn>
     360:	81 11       	cpse	r24, r1
     362:	02 c0       	rjmp	.+4      	; 0x368 <autonomouswalk_walk+0x9c>
		{
			turn_around();
     364:	d8 de       	rcall	.-592    	; 0x116 <turn_around>
     366:	15 c0       	rjmp	.+42     	; 0x392 <autonomouswalk_walk+0xc6>
		}
		else if(decisionCounter < 4)
     368:	80 91 32 13 	lds	r24, 0x1332
     36c:	84 30       	cpi	r24, 0x04	; 4
     36e:	38 f4       	brcc	.+14     	; 0x37e <autonomouswalk_walk+0xb2>
		{
			walk_forward();
     370:	f7 de       	rcall	.-530    	; 0x160 <walk_forward>
			++decisionCounter;
     372:	80 91 32 13 	lds	r24, 0x1332
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	80 93 32 13 	sts	0x1332, r24
     37c:	0a c0       	rjmp	.+20     	; 0x392 <autonomouswalk_walk+0xc6>
		}
		else
		{
			decisionCounter = 0;
     37e:	10 92 32 13 	sts	0x1332, r1
			navigation_set_autonomous_walk(0);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	b3 d0       	rcall	.+358    	; 0x4ec <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     386:	49 e3       	ldi	r20, 0x39	; 57
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	6f ea       	ldi	r22, 0xAF	; 175
     38c:	71 e1       	ldi	r23, 0x11	; 17
     38e:	80 e8       	ldi	r24, 0x80	; 128
     390:	22 d6       	rcall	.+3140   	; 0xfd6 <TWI_send_string_fixed_length>
		}
	}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     398:	bc 01       	movw	r22, r24
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatunsisf>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	4a e7       	ldi	r20, 0x7A	; 122
     3a8:	51 e4       	ldi	r21, 0x41	; 65
     3aa:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     3ae:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__fixunssfsi>
	OCR1A = delay;
     3b2:	70 93 89 00 	sts	0x0089, r23
     3b6:	60 93 88 00 	sts	0x0088, r22
     3ba:	08 95       	ret

000003bc <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     3bc:	bc 01       	movw	r22, r24
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatunsisf>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	4a e7       	ldi	r20, 0x7A	; 122
     3cc:	51 e4       	ldi	r21, 0x41	; 65
     3ce:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     3d2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__fixunssfsi>
	OCR3A = delay;
     3d6:	70 93 99 00 	sts	0x0099, r23
     3da:	60 93 98 00 	sts	0x0098, r22
     3de:	08 95       	ret

000003e0 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     3e0:	e1 e8       	ldi	r30, 0x81	; 129
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	85 60       	ori	r24, 0x05	; 5
     3e8:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     3ea:	e1 e9       	ldi	r30, 0x91	; 145
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	85 60       	ori	r24, 0x05	; 5
     3f2:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     3f4:	88 ee       	ldi	r24, 0xE8	; 232
     3f6:	93 e0       	ldi	r25, 0x03	; 3
     3f8:	cf df       	rcall	.-98     	; 0x398 <set_counter_1>
	set_counter_2(1000);
     3fa:	88 ee       	ldi	r24, 0xE8	; 232
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	de df       	rcall	.-68     	; 0x3bc <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     400:	ef e6       	ldi	r30, 0x6F	; 111
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	82 60       	ori	r24, 0x02	; 2
     408:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     40a:	e1 e7       	ldi	r30, 0x71	; 113
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	82 60       	ori	r24, 0x02	; 2
     412:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     414:	10 92 85 00 	sts	0x0085, r1
     418:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     41c:	10 92 95 00 	sts	0x0095, r1
     420:	10 92 94 00 	sts	0x0094, r1
     424:	08 95       	ret

00000426 <FifoDataLength>:
     426:	fc 01       	movw	r30, r24
     428:	90 81       	ld	r25, Z
     42a:	91 50       	subi	r25, 0x01	; 1
     42c:	84 81       	ldd	r24, Z+4	; 0x04
     42e:	22 81       	ldd	r18, Z+2	; 0x02
     430:	82 1b       	sub	r24, r18
     432:	89 23       	and	r24, r25
     434:	08 95       	ret

00000436 <FifoWrite>:
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	ec 01       	movw	r28, r24
     43e:	16 2f       	mov	r17, r22
     440:	f2 df       	rcall	.-28     	; 0x426 <FifoDataLength>
     442:	28 81       	ld	r18, Y
     444:	39 81       	ldd	r19, Y+1	; 0x01
     446:	21 50       	subi	r18, 0x01	; 1
     448:	31 09       	sbc	r19, r1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	82 17       	cp	r24, r18
     44e:	93 07       	cpc	r25, r19
     450:	69 f0       	breq	.+26     	; 0x46c <FifoWrite+0x36>
     452:	8c 81       	ldd	r24, Y+4	; 0x04
     454:	9d 81       	ldd	r25, Y+5	; 0x05
     456:	fe 01       	movw	r30, r28
     458:	e8 0f       	add	r30, r24
     45a:	f9 1f       	adc	r31, r25
     45c:	16 83       	std	Z+6, r17	; 0x06
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	28 23       	and	r18, r24
     462:	39 23       	and	r19, r25
     464:	3d 83       	std	Y+5, r19	; 0x05
     466:	2c 83       	std	Y+4, r18	; 0x04
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	01 c0       	rjmp	.+2      	; 0x46e <FifoWrite+0x38>
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	08 95       	ret

00000476 <FifoRead>:
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	ec 01       	movw	r28, r24
     480:	8b 01       	movw	r16, r22
     482:	d1 df       	rcall	.-94     	; 0x426 <FifoDataLength>
     484:	88 23       	and	r24, r24
     486:	a1 f0       	breq	.+40     	; 0x4b0 <FifoRead+0x3a>
     488:	ea 81       	ldd	r30, Y+2	; 0x02
     48a:	fb 81       	ldd	r31, Y+3	; 0x03
     48c:	ec 0f       	add	r30, r28
     48e:	fd 1f       	adc	r31, r29
     490:	86 81       	ldd	r24, Z+6	; 0x06
     492:	f8 01       	movw	r30, r16
     494:	80 83       	st	Z, r24
     496:	28 81       	ld	r18, Y
     498:	39 81       	ldd	r19, Y+1	; 0x01
     49a:	21 50       	subi	r18, 0x01	; 1
     49c:	31 09       	sbc	r19, r1
     49e:	8a 81       	ldd	r24, Y+2	; 0x02
     4a0:	9b 81       	ldd	r25, Y+3	; 0x03
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	82 23       	and	r24, r18
     4a6:	93 23       	and	r25, r19
     4a8:	9b 83       	std	Y+3, r25	; 0x03
     4aa:	8a 83       	std	Y+2, r24	; 0x02
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <FifoRead+0x3c>
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     4bc:	68 2f       	mov	r22, r24
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatunsisf>
     4c8:	60 93 03 01 	sts	0x0103, r22
     4cc:	70 93 04 01 	sts	0x0104, r23
     4d0:	80 93 05 01 	sts	0x0105, r24
     4d4:	90 93 06 01 	sts	0x0106, r25
     4d8:	08 95       	ret

000004da <navigation_left_algorithm>:
     4da:	80 91 07 01 	lds	r24, 0x0107
     4de:	08 95       	ret

000004e0 <navigation_set_algorithm>:
     4e0:	80 93 07 01 	sts	0x0107, r24
     4e4:	08 95       	ret

000004e6 <navigation_autonomous_walk>:
     4e6:	80 91 02 01 	lds	r24, 0x0102
     4ea:	08 95       	ret

000004ec <navigation_set_autonomous_walk>:
     4ec:	80 93 02 01 	sts	0x0102, r24
     4f0:	08 95       	ret

000004f2 <navigation_stepping_delay>:
     4f2:	cf 93       	push	r28
     4f4:	c2 e0       	ldi	r28, 0x02	; 2
     4f6:	0e c0       	rjmp	.+28     	; 0x514 <navigation_stepping_delay+0x22>
     4f8:	0e 94 ad 0c 	call	0x195a	; 0x195a <USART_DecodeRxFIFO>
     4fc:	2f ef       	ldi	r18, 0xFF	; 255
     4fe:	89 ef       	ldi	r24, 0xF9	; 249
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	21 50       	subi	r18, 0x01	; 1
     504:	80 40       	sbci	r24, 0x00	; 0
     506:	90 40       	sbci	r25, 0x00	; 0
     508:	e1 f7       	brne	.-8      	; 0x502 <navigation_stepping_delay+0x10>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <navigation_stepping_delay+0x1a>
     50c:	00 00       	nop
     50e:	82 b1       	in	r24, 0x02	; 2
     510:	8c 27       	eor	r24, r28
     512:	82 b9       	out	0x02, r24	; 2
     514:	0e 94 a3 0c 	call	0x1946	; 0x1946 <USART_ready>
     518:	88 23       	and	r24, r24
     51a:	71 f3       	breq	.-36     	; 0x4f8 <navigation_stepping_delay+0x6>
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <navigation_fill_buffer>:
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	c0 e0       	ldi	r28, 0x00	; 0
     52a:	d0 e0       	ldi	r29, 0x00	; 0
     52c:	00 91 34 13 	lds	r16, 0x1334
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	ce 01       	movw	r24, r28
     534:	db d5       	rcall	.+2998   	; 0x10ec <TWI_get_sensor>
     536:	fe 01       	movw	r30, r28
     538:	ee 0f       	add	r30, r30
     53a:	ff 1f       	adc	r31, r31
     53c:	ee 0f       	add	r30, r30
     53e:	ff 1f       	adc	r31, r31
     540:	ec 0f       	add	r30, r28
     542:	fd 1f       	adc	r31, r29
     544:	0e 0f       	add	r16, r30
     546:	1f 1f       	adc	r17, r31
     548:	f8 01       	movw	r30, r16
     54a:	e8 5b       	subi	r30, 0xB8	; 184
     54c:	fc 4e       	sbci	r31, 0xEC	; 236
     54e:	80 83       	st	Z, r24
     550:	21 96       	adiw	r28, 0x01	; 1
     552:	c8 30       	cpi	r28, 0x08	; 8
     554:	d1 05       	cpc	r29, r1
     556:	51 f7       	brne	.-44     	; 0x52c <navigation_fill_buffer+0xc>
     558:	80 91 34 13 	lds	r24, 0x1334
     55c:	84 30       	cpi	r24, 0x04	; 4
     55e:	19 f4       	brne	.+6      	; 0x566 <navigation_fill_buffer+0x46>
     560:	10 92 34 13 	sts	0x1334, r1
     564:	03 c0       	rjmp	.+6      	; 0x56c <navigation_fill_buffer+0x4c>
     566:	8f 5f       	subi	r24, 0xFF	; 255
     568:	80 93 34 13 	sts	0x1334, r24
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	08 95       	ret

00000576 <navigation_get_sensor>:
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	00 d0       	rcall	.+0      	; 0x57c <navigation_get_sensor+0x6>
     57c:	00 d0       	rcall	.+0      	; 0x57e <navigation_get_sensor+0x8>
     57e:	1f 92       	push	r1
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	fc 01       	movw	r30, r24
     586:	ee 0f       	add	r30, r30
     588:	ff 1f       	adc	r31, r31
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	8e 0f       	add	r24, r30
     590:	9f 1f       	adc	r25, r31
     592:	fc 01       	movw	r30, r24
     594:	e8 5b       	subi	r30, 0xB8	; 184
     596:	fc 4e       	sbci	r31, 0xEC	; 236
     598:	80 81       	ld	r24, Z
     59a:	89 83       	std	Y+1, r24	; 0x01
     59c:	81 81       	ldd	r24, Z+1	; 0x01
     59e:	8a 83       	std	Y+2, r24	; 0x02
     5a0:	82 81       	ldd	r24, Z+2	; 0x02
     5a2:	8b 83       	std	Y+3, r24	; 0x03
     5a4:	83 81       	ldd	r24, Z+3	; 0x03
     5a6:	8c 83       	std	Y+4, r24	; 0x04
     5a8:	84 81       	ldd	r24, Z+4	; 0x04
     5aa:	8d 83       	std	Y+5, r24	; 0x05
     5ac:	24 e0       	ldi	r18, 0x04	; 4
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	0e c0       	rjmp	.+28     	; 0x5ce <navigation_get_sensor+0x58>
     5b2:	41 91       	ld	r20, Z+
     5b4:	50 81       	ld	r21, Z
     5b6:	54 17       	cp	r21, r20
     5b8:	20 f4       	brcc	.+8      	; 0x5c2 <navigation_get_sensor+0x4c>
     5ba:	df 01       	movw	r26, r30
     5bc:	11 97       	sbiw	r26, 0x01	; 1
     5be:	5c 93       	st	X, r21
     5c0:	40 83       	st	Z, r20
     5c2:	8e 17       	cp	r24, r30
     5c4:	9f 07       	cpc	r25, r31
     5c6:	a9 f7       	brne	.-22     	; 0x5b2 <navigation_get_sensor+0x3c>
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	31 09       	sbc	r19, r1
     5cc:	49 f0       	breq	.+18     	; 0x5e0 <navigation_get_sensor+0x6a>
     5ce:	12 16       	cp	r1, r18
     5d0:	13 06       	cpc	r1, r19
     5d2:	d4 f7       	brge	.-12     	; 0x5c8 <navigation_get_sensor+0x52>
     5d4:	fe 01       	movw	r30, r28
     5d6:	31 96       	adiw	r30, 0x01	; 1
     5d8:	cf 01       	movw	r24, r30
     5da:	82 0f       	add	r24, r18
     5dc:	93 1f       	adc	r25, r19
     5de:	e9 cf       	rjmp	.-46     	; 0x5b2 <navigation_get_sensor+0x3c>
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(sensorBufferSize) < HEIGHT_LIMIT)
     5f2:	85 e0       	ldi	r24, 0x05	; 5
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	bf df       	rcall	.-130    	; 0x576 <navigation_get_sensor>
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	84 36       	cpi	r24, 0x64	; 100
     5fc:	08 f0       	brcs	.+2      	; 0x600 <navigation_detect_low_pass_obsticle+0xe>
     5fe:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     600:	89 2f       	mov	r24, r25
     602:	08 95       	ret

00000604 <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     604:	f6 df       	rcall	.-20     	; 0x5f2 <navigation_detect_low_pass_obsticle>
     606:	88 23       	and	r24, r24
     608:	e9 f0       	breq	.+58     	; 0x644 <navigation_low_pass_obstacle+0x40>
     60a:	80 91 33 13 	lds	r24, 0x1333
     60e:	81 11       	cpse	r24, r1
     610:	19 c0       	rjmp	.+50     	; 0x644 <navigation_low_pass_obstacle+0x40>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     612:	4b e1       	ldi	r20, 0x1B	; 27
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	69 ee       	ldi	r22, 0xE9	; 233
     618:	71 e1       	ldi	r23, 0x11	; 17
     61a:	80 e4       	ldi	r24, 0x40	; 64
     61c:	dc d4       	rcall	.+2488   	; 0xfd6 <TWI_send_string_fixed_length>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61e:	2f ef       	ldi	r18, 0xFF	; 255
     620:	86 e7       	ldi	r24, 0x76	; 118
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	21 50       	subi	r18, 0x01	; 1
     626:	80 40       	sbci	r24, 0x00	; 0
     628:	90 40       	sbci	r25, 0x00	; 0
     62a:	e1 f7       	brne	.-8      	; 0x624 <navigation_low_pass_obstacle+0x20>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <navigation_low_pass_obstacle+0x2a>
     62e:	00 00       	nop
		_delay_ms(30);
		TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);
     630:	4b e1       	ldi	r20, 0x1B	; 27
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	69 ee       	ldi	r22, 0xE9	; 233
     636:	71 e1       	ldi	r23, 0x11	; 17
     638:	80 e8       	ldi	r24, 0x80	; 128
     63a:	cd d4       	rcall	.+2458   	; 0xfd6 <TWI_send_string_fixed_length>
		lowPassObstacleFlag = 1;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 33 13 	sts	0x1333, r24
     642:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     644:	d6 df       	rcall	.-84     	; 0x5f2 <navigation_detect_low_pass_obsticle>
     646:	81 11       	cpse	r24, r1
     648:	02 c0       	rjmp	.+4      	; 0x64e <navigation_low_pass_obstacle+0x4a>
	{
		lowPassObstacleFlag = 0;
     64a:	10 92 33 13 	sts	0x1333, r1
     64e:	08 95       	ret

00000650 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	90 df       	rcall	.-224    	; 0x576 <navigation_get_sensor>
     656:	8c 33       	cpi	r24, 0x3C	; 60
     658:	28 f0       	brcs	.+10     	; 0x664 <navigation_check_right_turn+0x14>
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	8b df       	rcall	.-234    	; 0x576 <navigation_get_sensor>
     660:	8c 33       	cpi	r24, 0x3C	; 60
     662:	40 f4       	brcc	.+16     	; 0x674 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	86 df       	rcall	.-244    	; 0x576 <navigation_get_sensor>
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	86 34       	cpi	r24, 0x46	; 70
     66e:	18 f4       	brcc	.+6      	; 0x676 <navigation_check_right_turn+0x26>
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	01 c0       	rjmp	.+2      	; 0x676 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     674:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     676:	89 2f       	mov	r24, r25
     678:	08 95       	ret

0000067a <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	7b df       	rcall	.-266    	; 0x576 <navigation_get_sensor>
     680:	8c 33       	cpi	r24, 0x3C	; 60
     682:	28 f0       	brcs	.+10     	; 0x68e <navigation_check_left_turn+0x14>
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	76 df       	rcall	.-276    	; 0x576 <navigation_get_sensor>
     68a:	8c 33       	cpi	r24, 0x3C	; 60
     68c:	40 f4       	brcc	.+16     	; 0x69e <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	71 df       	rcall	.-286    	; 0x576 <navigation_get_sensor>
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	86 34       	cpi	r24, 0x46	; 70
     698:	18 f4       	brcc	.+6      	; 0x6a0 <navigation_check_left_turn+0x26>
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     69e:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     6a0:	89 2f       	mov	r24, r25
     6a2:	08 95       	ret

000006a4 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	6b 01       	movw	r12, r22
     6b2:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     6b4:	80 91 07 01 	lds	r24, 0x0107
     6b8:	88 23       	and	r24, r24
     6ba:	09 f4       	brne	.+2      	; 0x6be <navigation_direction_regulation+0x1a>
     6bc:	98 c0       	rjmp	.+304    	; 0x7ee <navigation_direction_regulation+0x14a>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	59 df       	rcall	.-334    	; 0x576 <navigation_get_sensor>
     6c4:	c8 2f       	mov	r28, r24
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	55 df       	rcall	.-342    	; 0x576 <navigation_get_sensor>
     6cc:	2c 2f       	mov	r18, r28
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	a9 01       	movw	r20, r18
     6d2:	48 1b       	sub	r20, r24
     6d4:	51 09       	sbc	r21, r1
     6d6:	ca 01       	movw	r24, r20
     6d8:	99 23       	and	r25, r25
     6da:	1c f4       	brge	.+6      	; 0x6e2 <navigation_direction_regulation+0x3e>
     6dc:	91 95       	neg	r25
     6de:	81 95       	neg	r24
     6e0:	91 09       	sbc	r25, r1
     6e2:	0a 97       	sbiw	r24, 0x0a	; 10
     6e4:	b4 f5       	brge	.+108    	; 0x752 <navigation_direction_regulation+0xae>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	45 df       	rcall	.-374    	; 0x576 <navigation_get_sensor>
     6ec:	82 33       	cpi	r24, 0x32	; 50
     6ee:	88 f5       	brcc	.+98     	; 0x752 <navigation_direction_regulation+0xae>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	40 df       	rcall	.-384    	; 0x576 <navigation_get_sensor>
     6f6:	c8 2f       	mov	r28, r24
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	3c df       	rcall	.-392    	; 0x576 <navigation_get_sensor>
     6fe:	d8 2f       	mov	r29, r24
     700:	c7 01       	movw	r24, r14
     702:	b6 01       	movw	r22, r12
     704:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <cos>
     708:	6b 01       	movw	r12, r22
     70a:	7c 01       	movw	r14, r24
     70c:	6d 2f       	mov	r22, r29
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	6c 0f       	add	r22, r28
     712:	71 1d       	adc	r23, r1
     714:	88 27       	eor	r24, r24
     716:	77 fd       	sbrc	r23, 7
     718:	80 95       	com	r24
     71a:	98 2f       	mov	r25, r24
     71c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__floatsisf>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	5f e3       	ldi	r21, 0x3F	; 63
     728:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 ef       	ldi	r20, 0xF0	; 240
     732:	50 e4       	ldi	r21, 0x40	; 64
     734:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__addsf3>
     738:	a7 01       	movw	r20, r14
     73a:	96 01       	movw	r18, r12
     73c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e2       	ldi	r20, 0x20	; 32
     746:	52 e4       	ldi	r21, 0x42	; 66
     748:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__subsf3>
     74c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__fixsfsi>
     750:	e5 c0       	rjmp	.+458    	; 0x91c <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0f df       	rcall	.-482    	; 0x576 <navigation_get_sensor>
     758:	c8 2f       	mov	r28, r24
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0b df       	rcall	.-490    	; 0x576 <navigation_get_sensor>
     760:	2c 2f       	mov	r18, r28
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	a9 01       	movw	r20, r18
     766:	48 1b       	sub	r20, r24
     768:	51 09       	sbc	r21, r1
     76a:	ca 01       	movw	r24, r20
     76c:	99 23       	and	r25, r25
     76e:	1c f4       	brge	.+6      	; 0x776 <navigation_direction_regulation+0xd2>
     770:	91 95       	neg	r25
     772:	81 95       	neg	r24
     774:	91 09       	sbc	r25, r1
     776:	0a 97       	sbiw	r24, 0x0a	; 10
     778:	0c f0       	brlt	.+2      	; 0x77c <navigation_direction_regulation+0xd8>
     77a:	21 c1       	rjmp	.+578    	; 0x9be <navigation_direction_regulation+0x31a>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fa de       	rcall	.-524    	; 0x576 <navigation_get_sensor>
     782:	82 33       	cpi	r24, 0x32	; 50
     784:	08 f0       	brcs	.+2      	; 0x788 <navigation_direction_regulation+0xe4>
     786:	1b c1       	rjmp	.+566    	; 0x9be <navigation_direction_regulation+0x31a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	f4 de       	rcall	.-536    	; 0x576 <navigation_get_sensor>
     78e:	c8 2f       	mov	r28, r24
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	f0 de       	rcall	.-544    	; 0x576 <navigation_get_sensor>
     796:	d8 2f       	mov	r29, r24
     798:	c7 01       	movw	r24, r14
     79a:	b6 01       	movw	r22, r12
     79c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <cos>
     7a0:	6b 01       	movw	r12, r22
     7a2:	7c 01       	movw	r14, r24
     7a4:	6d 2f       	mov	r22, r29
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	6c 0f       	add	r22, r28
     7aa:	71 1d       	adc	r23, r1
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__floatsisf>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	5f e3       	ldi	r21, 0x3F	; 63
     7c0:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 ef       	ldi	r20, 0xF0	; 240
     7ca:	50 e4       	ldi	r21, 0x40	; 64
     7cc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__addsf3>
     7d0:	a7 01       	movw	r20, r14
     7d2:	96 01       	movw	r18, r12
     7d4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     7d8:	9b 01       	movw	r18, r22
     7da:	ac 01       	movw	r20, r24
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	80 e2       	ldi	r24, 0x20	; 32
     7e2:	92 e4       	ldi	r25, 0x42	; 66
     7e4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__subsf3>
     7e8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__fixsfsi>
     7ec:	97 c0       	rjmp	.+302    	; 0x91c <navigation_direction_regulation+0x278>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	c1 de       	rcall	.-638    	; 0x576 <navigation_get_sensor>
     7f4:	c8 2f       	mov	r28, r24
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	bd de       	rcall	.-646    	; 0x576 <navigation_get_sensor>
     7fc:	2c 2f       	mov	r18, r28
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	a9 01       	movw	r20, r18
     802:	48 1b       	sub	r20, r24
     804:	51 09       	sbc	r21, r1
     806:	ca 01       	movw	r24, r20
     808:	99 23       	and	r25, r25
     80a:	1c f4       	brge	.+6      	; 0x812 <navigation_direction_regulation+0x16e>
     80c:	91 95       	neg	r25
     80e:	81 95       	neg	r24
     810:	91 09       	sbc	r25, r1
     812:	0a 97       	sbiw	r24, 0x0a	; 10
     814:	c4 f5       	brge	.+112    	; 0x886 <navigation_direction_regulation+0x1e2>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	ad de       	rcall	.-678    	; 0x576 <navigation_get_sensor>
     81c:	82 33       	cpi	r24, 0x32	; 50
     81e:	98 f5       	brcc	.+102    	; 0x886 <navigation_direction_regulation+0x1e2>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	a8 de       	rcall	.-688    	; 0x576 <navigation_get_sensor>
     826:	c8 2f       	mov	r28, r24
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	a4 de       	rcall	.-696    	; 0x576 <navigation_get_sensor>
     82e:	d8 2f       	mov	r29, r24
     830:	c7 01       	movw	r24, r14
     832:	b6 01       	movw	r22, r12
     834:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <cos>
     838:	6b 01       	movw	r12, r22
     83a:	7c 01       	movw	r14, r24
     83c:	6d 2f       	mov	r22, r29
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	6c 0f       	add	r22, r28
     842:	71 1d       	adc	r23, r1
     844:	88 27       	eor	r24, r24
     846:	77 fd       	sbrc	r23, 7
     848:	80 95       	com	r24
     84a:	98 2f       	mov	r25, r24
     84c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__floatsisf>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	5f e3       	ldi	r21, 0x3F	; 63
     858:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 ef       	ldi	r20, 0xF0	; 240
     862:	50 e4       	ldi	r21, 0x40	; 64
     864:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__addsf3>
     868:	a7 01       	movw	r20, r14
     86a:	96 01       	movw	r18, r12
     86c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     870:	9b 01       	movw	r18, r22
     872:	ac 01       	movw	r20, r24
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	80 e2       	ldi	r24, 0x20	; 32
     87a:	92 e4       	ldi	r25, 0x42	; 66
     87c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__subsf3>
     880:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__fixsfsi>
     884:	4b c0       	rjmp	.+150    	; 0x91c <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	75 de       	rcall	.-790    	; 0x576 <navigation_get_sensor>
     88c:	c8 2f       	mov	r28, r24
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	71 de       	rcall	.-798    	; 0x576 <navigation_get_sensor>
     894:	2c 2f       	mov	r18, r28
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	a9 01       	movw	r20, r18
     89a:	48 1b       	sub	r20, r24
     89c:	51 09       	sbc	r21, r1
     89e:	ca 01       	movw	r24, r20
     8a0:	99 23       	and	r25, r25
     8a2:	1c f4       	brge	.+6      	; 0x8aa <navigation_direction_regulation+0x206>
     8a4:	91 95       	neg	r25
     8a6:	81 95       	neg	r24
     8a8:	91 09       	sbc	r25, r1
     8aa:	0a 97       	sbiw	r24, 0x0a	; 10
     8ac:	0c f0       	brlt	.+2      	; 0x8b0 <navigation_direction_regulation+0x20c>
     8ae:	87 c0       	rjmp	.+270    	; 0x9be <navigation_direction_regulation+0x31a>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	60 de       	rcall	.-832    	; 0x576 <navigation_get_sensor>
     8b6:	82 33       	cpi	r24, 0x32	; 50
     8b8:	08 f0       	brcs	.+2      	; 0x8bc <navigation_direction_regulation+0x218>
     8ba:	81 c0       	rjmp	.+258    	; 0x9be <navigation_direction_regulation+0x31a>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	5a de       	rcall	.-844    	; 0x576 <navigation_get_sensor>
     8c2:	c8 2f       	mov	r28, r24
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	56 de       	rcall	.-852    	; 0x576 <navigation_get_sensor>
     8ca:	d8 2f       	mov	r29, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <cos>
     8d4:	6b 01       	movw	r12, r22
     8d6:	7c 01       	movw	r14, r24
     8d8:	6d 2f       	mov	r22, r29
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	6c 0f       	add	r22, r28
     8de:	71 1d       	adc	r23, r1
     8e0:	88 27       	eor	r24, r24
     8e2:	77 fd       	sbrc	r23, 7
     8e4:	80 95       	com	r24
     8e6:	98 2f       	mov	r25, r24
     8e8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__floatsisf>
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	40 ef       	ldi	r20, 0xF0	; 240
     8fe:	50 e4       	ldi	r21, 0x40	; 64
     900:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__addsf3>
     904:	a7 01       	movw	r20, r14
     906:	96 01       	movw	r18, r12
     908:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e2       	ldi	r20, 0x20	; 32
     912:	52 e4       	ldi	r21, 0x42	; 66
     914:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__subsf3>
     918:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     91c:	cb 01       	movw	r24, r22
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	03 97       	sbiw	r24, 0x03	; 3
     922:	08 f4       	brcc	.+2      	; 0x926 <navigation_direction_regulation+0x282>
     924:	47 c0       	rjmp	.+142    	; 0x9b4 <navigation_direction_regulation+0x310>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     926:	88 27       	eor	r24, r24
     928:	77 fd       	sbrc	r23, 7
     92a:	80 95       	com	r24
     92c:	98 2f       	mov	r25, r24
     92e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__floatsisf>
     932:	20 91 03 01 	lds	r18, 0x0103
     936:	30 91 04 01 	lds	r19, 0x0104
     93a:	40 91 05 01 	lds	r20, 0x0105
     93e:	50 91 06 01 	lds	r21, 0x0106
     942:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     946:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <atan>
     94a:	c6 2e       	mov	r12, r22
     94c:	d7 2e       	mov	r13, r23
     94e:	e8 2e       	mov	r14, r24
     950:	f9 2e       	mov	r15, r25
		if(dir < 0)
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	a9 01       	movw	r20, r18
     958:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__cmpsf2>
     95c:	88 23       	and	r24, r24
     95e:	7c f4       	brge	.+30     	; 0x97e <navigation_direction_regulation+0x2da>
		{
			dir += 2*PI;
     960:	2b ed       	ldi	r18, 0xDB	; 219
     962:	3f e0       	ldi	r19, 0x0F	; 15
     964:	49 ec       	ldi	r20, 0xC9	; 201
     966:	50 e4       	ldi	r21, 0x40	; 64
     968:	6c 2d       	mov	r22, r12
     96a:	7d 2d       	mov	r23, r13
     96c:	8e 2d       	mov	r24, r14
     96e:	9f 2d       	mov	r25, r15
     970:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__addsf3>
     974:	c6 2e       	mov	r12, r22
     976:	d7 2e       	mov	r13, r23
     978:	e8 2e       	mov	r14, r24
     97a:	f9 2e       	mov	r15, r25
     97c:	24 c0       	rjmp	.+72     	; 0x9c6 <navigation_direction_regulation+0x322>
		} else if(dir >= 2*PI)
     97e:	2b ed       	ldi	r18, 0xDB	; 219
     980:	3f e0       	ldi	r19, 0x0F	; 15
     982:	49 ec       	ldi	r20, 0xC9	; 201
     984:	50 e4       	ldi	r21, 0x40	; 64
     986:	6c 2d       	mov	r22, r12
     988:	7d 2d       	mov	r23, r13
     98a:	8e 2d       	mov	r24, r14
     98c:	9f 2d       	mov	r25, r15
     98e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gesf2>
     992:	88 23       	and	r24, r24
     994:	c4 f0       	brlt	.+48     	; 0x9c6 <navigation_direction_regulation+0x322>
		{
			dir -= 2*PI;
     996:	2b ed       	ldi	r18, 0xDB	; 219
     998:	3f e0       	ldi	r19, 0x0F	; 15
     99a:	49 ec       	ldi	r20, 0xC9	; 201
     99c:	50 e4       	ldi	r21, 0x40	; 64
     99e:	6c 2d       	mov	r22, r12
     9a0:	7d 2d       	mov	r23, r13
     9a2:	8e 2d       	mov	r24, r14
     9a4:	9f 2d       	mov	r25, r15
     9a6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__subsf3>
     9aa:	c6 2e       	mov	r12, r22
     9ac:	d7 2e       	mov	r13, r23
     9ae:	e8 2e       	mov	r14, r24
     9b0:	f9 2e       	mov	r15, r25
     9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <navigation_direction_regulation+0x322>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     9b4:	c1 2c       	mov	r12, r1
     9b6:	d1 2c       	mov	r13, r1
     9b8:	e1 2c       	mov	r14, r1
     9ba:	f1 2c       	mov	r15, r1
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <navigation_direction_regulation+0x322>
     9be:	c1 2c       	mov	r12, r1
     9c0:	d1 2c       	mov	r13, r1
     9c2:	e1 2c       	mov	r14, r1
     9c4:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     9c6:	6c 2d       	mov	r22, r12
     9c8:	7d 2d       	mov	r23, r13
     9ca:	8e 2d       	mov	r24, r14
     9cc:	9f 2d       	mov	r25, r15
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	08 95       	ret

000009dc <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     9e4:	80 91 07 01 	lds	r24, 0x0107
     9e8:	88 23       	and	r24, r24
     9ea:	09 f4       	brne	.+2      	; 0x9ee <navigation_angle_offset+0x12>
     9ec:	6c c0       	rjmp	.+216    	; 0xac6 <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	c1 dd       	rcall	.-1150   	; 0x576 <navigation_get_sensor>
     9f4:	f8 2e       	mov	r15, r24
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	bd dd       	rcall	.-1158   	; 0x576 <navigation_get_sensor>
     9fc:	2f 2d       	mov	r18, r15
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	a9 01       	movw	r20, r18
     a02:	48 1b       	sub	r20, r24
     a04:	51 09       	sbc	r21, r1
     a06:	ca 01       	movw	r24, r20
     a08:	99 23       	and	r25, r25
     a0a:	1c f4       	brge	.+6      	; 0xa12 <navigation_angle_offset+0x36>
     a0c:	91 95       	neg	r25
     a0e:	81 95       	neg	r24
     a10:	91 09       	sbc	r25, r1
     a12:	0a 97       	sbiw	r24, 0x0a	; 10
     a14:	0c f5       	brge	.+66     	; 0xa58 <navigation_angle_offset+0x7c>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	ad dd       	rcall	.-1190   	; 0x576 <navigation_get_sensor>
     a1c:	82 33       	cpi	r24, 0x32	; 50
     a1e:	e0 f4       	brcc	.+56     	; 0xa58 <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	a8 dd       	rcall	.-1200   	; 0x576 <navigation_get_sensor>
     a26:	f8 2e       	mov	r15, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a4 dd       	rcall	.-1208   	; 0x576 <navigation_get_sensor>
     a2e:	6f 2d       	mov	r22, r15
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	68 1b       	sub	r22, r24
     a34:	71 09       	sbc	r23, r1
     a36:	88 27       	eor	r24, r24
     a38:	77 fd       	sbrc	r23, 7
     a3a:	80 95       	com	r24
     a3c:	98 2f       	mov	r25, r24
     a3e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__floatsisf>
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	48 e6       	ldi	r20, 0x68	; 104
     a48:	51 e4       	ldi	r21, 0x41	; 65
     a4a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divsf3>
     a4e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <atan>
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
     a56:	a0 c0       	rjmp	.+320    	; 0xb98 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	8c dd       	rcall	.-1256   	; 0x576 <navigation_get_sensor>
     a5e:	f8 2e       	mov	r15, r24
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	88 dd       	rcall	.-1264   	; 0x576 <navigation_get_sensor>
     a66:	2f 2d       	mov	r18, r15
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	a9 01       	movw	r20, r18
     a6c:	48 1b       	sub	r20, r24
     a6e:	51 09       	sbc	r21, r1
     a70:	ca 01       	movw	r24, r20
     a72:	99 23       	and	r25, r25
     a74:	1c f4       	brge	.+6      	; 0xa7c <navigation_angle_offset+0xa0>
     a76:	91 95       	neg	r25
     a78:	81 95       	neg	r24
     a7a:	91 09       	sbc	r25, r1
     a7c:	0a 97       	sbiw	r24, 0x0a	; 10
     a7e:	0c f0       	brlt	.+2      	; 0xa82 <navigation_angle_offset+0xa6>
     a80:	9a c0       	rjmp	.+308    	; 0xbb6 <navigation_angle_offset+0x1da>
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	77 dd       	rcall	.-1298   	; 0x576 <navigation_get_sensor>
     a88:	82 33       	cpi	r24, 0x32	; 50
     a8a:	08 f0       	brcs	.+2      	; 0xa8e <navigation_angle_offset+0xb2>
     a8c:	94 c0       	rjmp	.+296    	; 0xbb6 <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	71 dd       	rcall	.-1310   	; 0x576 <navigation_get_sensor>
     a94:	f8 2e       	mov	r15, r24
     a96:	83 e0       	ldi	r24, 0x03	; 3
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	6d dd       	rcall	.-1318   	; 0x576 <navigation_get_sensor>
     a9c:	6f 2d       	mov	r22, r15
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	68 1b       	sub	r22, r24
     aa2:	71 09       	sbc	r23, r1
     aa4:	88 27       	eor	r24, r24
     aa6:	77 fd       	sbrc	r23, 7
     aa8:	80 95       	com	r24
     aaa:	98 2f       	mov	r25, r24
     aac:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__floatsisf>
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	48 e6       	ldi	r20, 0x68	; 104
     ab6:	51 e4       	ldi	r21, 0x41	; 65
     ab8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divsf3>
     abc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <atan>
     ac0:	6b 01       	movw	r12, r22
     ac2:	7c 01       	movw	r14, r24
     ac4:	69 c0       	rjmp	.+210    	; 0xb98 <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	55 dd       	rcall	.-1366   	; 0x576 <navigation_get_sensor>
     acc:	f8 2e       	mov	r15, r24
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	51 dd       	rcall	.-1374   	; 0x576 <navigation_get_sensor>
     ad4:	2f 2d       	mov	r18, r15
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	a9 01       	movw	r20, r18
     ada:	48 1b       	sub	r20, r24
     adc:	51 09       	sbc	r21, r1
     ade:	ca 01       	movw	r24, r20
     ae0:	99 23       	and	r25, r25
     ae2:	1c f4       	brge	.+6      	; 0xaea <navigation_angle_offset+0x10e>
     ae4:	91 95       	neg	r25
     ae6:	81 95       	neg	r24
     ae8:	91 09       	sbc	r25, r1
     aea:	0a 97       	sbiw	r24, 0x0a	; 10
     aec:	0c f5       	brge	.+66     	; 0xb30 <navigation_angle_offset+0x154>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	41 dd       	rcall	.-1406   	; 0x576 <navigation_get_sensor>
     af4:	82 33       	cpi	r24, 0x32	; 50
     af6:	e0 f4       	brcc	.+56     	; 0xb30 <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	3c dd       	rcall	.-1416   	; 0x576 <navigation_get_sensor>
     afe:	f8 2e       	mov	r15, r24
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	38 dd       	rcall	.-1424   	; 0x576 <navigation_get_sensor>
     b06:	6f 2d       	mov	r22, r15
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	68 1b       	sub	r22, r24
     b0c:	71 09       	sbc	r23, r1
     b0e:	88 27       	eor	r24, r24
     b10:	77 fd       	sbrc	r23, 7
     b12:	80 95       	com	r24
     b14:	98 2f       	mov	r25, r24
     b16:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__floatsisf>
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	48 e6       	ldi	r20, 0x68	; 104
     b20:	51 e4       	ldi	r21, 0x41	; 65
     b22:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divsf3>
     b26:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <atan>
     b2a:	6b 01       	movw	r12, r22
     b2c:	7c 01       	movw	r14, r24
     b2e:	34 c0       	rjmp	.+104    	; 0xb98 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	20 dd       	rcall	.-1472   	; 0x576 <navigation_get_sensor>
     b36:	f8 2e       	mov	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	1c dd       	rcall	.-1480   	; 0x576 <navigation_get_sensor>
     b3e:	2f 2d       	mov	r18, r15
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	a9 01       	movw	r20, r18
     b44:	48 1b       	sub	r20, r24
     b46:	51 09       	sbc	r21, r1
     b48:	ca 01       	movw	r24, r20
     b4a:	99 23       	and	r25, r25
     b4c:	1c f4       	brge	.+6      	; 0xb54 <navigation_angle_offset+0x178>
     b4e:	91 95       	neg	r25
     b50:	81 95       	neg	r24
     b52:	91 09       	sbc	r25, r1
     b54:	0a 97       	sbiw	r24, 0x0a	; 10
     b56:	7c f5       	brge	.+94     	; 0xbb6 <navigation_angle_offset+0x1da>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0c dd       	rcall	.-1512   	; 0x576 <navigation_get_sensor>
     b5e:	82 33       	cpi	r24, 0x32	; 50
     b60:	50 f5       	brcc	.+84     	; 0xbb6 <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	07 dd       	rcall	.-1522   	; 0x576 <navigation_get_sensor>
     b68:	f8 2e       	mov	r15, r24
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	03 dd       	rcall	.-1530   	; 0x576 <navigation_get_sensor>
     b70:	6f 2d       	mov	r22, r15
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	68 1b       	sub	r22, r24
     b76:	71 09       	sbc	r23, r1
     b78:	88 27       	eor	r24, r24
     b7a:	77 fd       	sbrc	r23, 7
     b7c:	80 95       	com	r24
     b7e:	98 2f       	mov	r25, r24
     b80:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__floatsisf>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	48 e6       	ldi	r20, 0x68	; 104
     b8a:	51 e4       	ldi	r21, 0x41	; 65
     b8c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divsf3>
     b90:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <atan>
     b94:	6b 01       	movw	r12, r22
     b96:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     b98:	c7 01       	movw	r24, r14
     b9a:	b6 01       	movw	r22, r12
     b9c:	9f 77       	andi	r25, 0x7F	; 127
     b9e:	29 e2       	ldi	r18, 0x29	; 41
     ba0:	3c e5       	ldi	r19, 0x5C	; 92
     ba2:	4f e8       	ldi	r20, 0x8F	; 143
     ba4:	5d e3       	ldi	r21, 0x3D	; 61
     ba6:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gesf2>
     baa:	18 16       	cp	r1, r24
     bac:	3c f0       	brlt	.+14     	; 0xbbc <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     bae:	c1 2c       	mov	r12, r1
     bb0:	d1 2c       	mov	r13, r1
     bb2:	76 01       	movw	r14, r12
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <navigation_angle_offset+0x1e0>
     bb6:	c1 2c       	mov	r12, r1
     bb8:	d1 2c       	mov	r13, r1
     bba:	76 01       	movw	r14, r12
     bbc:	7c 2d       	mov	r23, r12
	}
}
     bbe:	67 2f       	mov	r22, r23
     bc0:	7d 2d       	mov	r23, r13
     bc2:	8e 2d       	mov	r24, r14
     bc4:	9f 2d       	mov	r25, r15
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	cf 90       	pop	r12
     bce:	08 95       	ret

00000bd0 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	0b b6       	in	r0, 0x3b	; 59
     bdc:	0f 92       	push	r0
     bde:	2f 93       	push	r18
     be0:	3f 93       	push	r19
     be2:	4f 93       	push	r20
     be4:	5f 93       	push	r21
     be6:	6f 93       	push	r22
     be8:	7f 93       	push	r23
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	ef 93       	push	r30
     bf4:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	73 dc       	rcall	.-1818   	; 0x4e0 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	77 dc       	rcall	.-1810   	; 0x4ec <navigation_set_autonomous_walk>
}
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	0f 90       	pop	r0
     c18:	0b be       	out	0x3b, r0	; 59
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     c24:	1f 92       	push	r1
     c26:	0f 92       	push	r0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	0f 92       	push	r0
     c2c:	11 24       	eor	r1, r1
     c2e:	0b b6       	in	r0, 0x3b	; 59
     c30:	0f 92       	push	r0
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	49 dc       	rcall	.-1902   	; 0x4e0 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	4d dc       	rcall	.-1894   	; 0x4ec <navigation_set_autonomous_walk>
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	0b be       	out	0x3b, r0	; 59
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <main>:
#include "Navigation.h"
#include "autonomouswalk.h"

int main(void)
{
	USART_init();
     c78:	34 d4       	rcall	.+2152   	; 0x14e2 <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); // send messages from gang to the display, not the computer
     c7a:	80 e8       	ldi	r24, 0x80	; 128
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	3d d4       	rcall	.+2170   	; 0x14fa <USART_set_twi_message_destination>
	sei();
     c80:	78 94       	sei
	TWI_init(ST_ADDRESS);
     c82:	80 e2       	ldi	r24, 0x20	; 32
     c84:	f7 d0       	rcall	.+494    	; 0xe74 <TWI_init>
	init_counters();
     c86:	ac db       	rcall	.-2216   	; 0x3e0 <init_counters>
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
     c88:	81 b1       	in	r24, 0x01	; 1
     c8a:	83 60       	ori	r24, 0x03	; 3
     c8c:	81 b9       	out	0x01, r24	; 1
     c8e:	2f ef       	ldi	r18, 0xFF	; 255
     c90:	83 e2       	ldi	r24, 0x23	; 35
     c92:	94 ef       	ldi	r25, 0xF4	; 244
     c94:	21 50       	subi	r18, 0x01	; 1
     c96:	80 40       	sbci	r24, 0x00	; 0
     c98:	90 40       	sbci	r25, 0x00	; 0
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <main+0x1c>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <main+0x26>
     c9e:	00 00       	nop
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	24 dc       	rcall	.-1976   	; 0x4ec <navigation_set_autonomous_walk>
		}
		else
		{
			if(TWI_command_flag())
			{
				PORTA ^= (1<<PORTA1);
     ca4:	c2 e0       	ldi	r28, 0x02	; 2
		/*if(TWI_sensor_flag())
		{
			PORTA ^= (1<<PORTA1);
			navigation_fill_buffer();
		}*/
		if(TWI_autonom_settings_flag())
     ca6:	46 d2       	rcall	.+1164   	; 0x1134 <TWI_autonom_settings_flag>
     ca8:	88 23       	and	r24, r24
     caa:	79 f0       	breq	.+30     	; 0xcca <main+0x52>
		{
			uint8_t sett = TWI_get_autonom_settings();
     cac:	29 d2       	rcall	.+1106   	; 0x1100 <TWI_get_autonom_settings>
			if(sett == 0)
     cae:	81 11       	cpse	r24, r1
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <main+0x3e>
			{
				navigation_set_autonomous_walk(0);
     cb2:	1c dc       	rcall	.-1992   	; 0x4ec <navigation_set_autonomous_walk>
     cb4:	0a c0       	rjmp	.+20     	; 0xcca <main+0x52>
			}
			else if(sett == 1)
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <main+0x4a>
			{
				navigation_set_autonomous_walk(1);
     cba:	18 dc       	rcall	.-2000   	; 0x4ec <navigation_set_autonomous_walk>
				navigation_set_algorithm(1);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	10 dc       	rcall	.-2016   	; 0x4e0 <navigation_set_algorithm>
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <main+0x52>
			}
			else //sett == 2
			{
				navigation_set_autonomous_walk(1);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	13 dc       	rcall	.-2010   	; 0x4ec <navigation_set_autonomous_walk>
				navigation_set_algorithm(0);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0b dc       	rcall	.-2026   	; 0x4e0 <navigation_set_algorithm>
			}
		}
		
		if(navigation_autonomous_walk() == 1)
     cca:	0d dc       	rcall	.-2022   	; 0x4e6 <navigation_autonomous_walk>
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	49 f4       	brne	.+18     	; 0xce2 <main+0x6a>
		{
			if(TWI_control_settings_flag())
     cd0:	27 d2       	rcall	.+1102   	; 0x1120 <TWI_control_settings_flag>
     cd2:	88 23       	and	r24, r24
     cd4:	21 f0       	breq	.+8      	; 0xcde <main+0x66>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0d d2       	rcall	.+1050   	; 0x10f6 <TWI_get_control_setting>
     cdc:	ef db       	rcall	.-2082   	; 0x4bc <navigation_set_Kp>
			}
			autonomouswalk_walk();
     cde:	f6 da       	rcall	.-2580   	; 0x2cc <autonomouswalk_walk>
     ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <main+0x78>
		}
		else
		{
			if(TWI_command_flag())
     ce2:	14 d2       	rcall	.+1064   	; 0x110c <TWI_command_flag>
     ce4:	88 23       	and	r24, r24
     ce6:	21 f0       	breq	.+8      	; 0xcf0 <main+0x78>
			{
				PORTA ^= (1<<PORTA1);
     ce8:	82 b1       	in	r24, 0x02	; 2
     cea:	8c 27       	eor	r24, r28
     cec:	82 b9       	out	0x02, r24	; 2
				USART_SendCommand();
     cee:	d0 d4       	rcall	.+2464   	; 0x1690 <USART_SendCommand>
			}
		}
		
		if(TWI_elevation_flag())
     cf0:	2b d2       	rcall	.+1110   	; 0x1148 <TWI_elevation_flag>
     cf2:	88 23       	and	r24, r24
     cf4:	29 f0       	breq	.+10     	; 0xd00 <main+0x88>
		{
			PORTA ^= (1<<PORTA0); 
     cf6:	92 b1       	in	r25, 0x02	; 2
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 27       	eor	r24, r25
     cfc:	82 b9       	out	0x02, r24	; 2
			USART_SendElevation();
     cfe:	da d4       	rcall	.+2484   	; 0x16b4 <USART_SendElevation>
		}
		USART_DecodeRxFIFO();
     d00:	2c d6       	rcall	.+3160   	; 0x195a <USART_DecodeRxFIFO>
    }
     d02:	d1 cf       	rjmp	.-94     	; 0xca6 <main+0x2e>

00000d04 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     d04:	1f 92       	push	r1
     d06:	0f 92       	push	r0
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	0f 92       	push	r0
     d0c:	11 24       	eor	r1, r1
	TCNT1 = 0;
     d0e:	10 92 85 00 	sts	0x0085, r1
     d12:	10 92 84 00 	sts	0x0084, r1
}
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
	//TWI_send_float(C_ADDRESS, (float)navigation_get_sensor(0));
	TCNT3 = 0;
     d2a:	10 92 95 00 	sts	0x0095, r1
     d2e:	10 92 94 00 	sts	0x0094, r1
}
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <set_twi_reciever_enable>:
	
	//Do something with the message here... Send to display for now
	TWI_send_string_fixed_length(S_ADDRESS, msg, length);
	
	return 0;
}
     d3c:	85 e4       	ldi	r24, 0x45	; 69
     d3e:	80 93 bc 00 	sts	0x00BC, r24
     d42:	08 95       	ret

00000d44 <clear_int>:
     d44:	81 ec       	ldi	r24, 0xC1	; 193
     d46:	80 93 bc 00 	sts	0x00BC, r24
     d4a:	08 95       	ret

00000d4c <start_bus>:
     d4c:	84 ea       	ldi	r24, 0xA4	; 164
     d4e:	80 93 bc 00 	sts	0x00BC, r24
     d52:	08 95       	ret

00000d54 <stop_bus>:
     d54:	85 ed       	ldi	r24, 0xD5	; 213
     d56:	80 93 bc 00 	sts	0x00BC, r24
     d5a:	08 95       	ret

00000d5c <Error>:
     d5c:	80 91 b9 00 	lds	r24, 0x00B9
     d60:	88 7f       	andi	r24, 0xF8	; 248
     d62:	88 33       	cpi	r24, 0x38	; 56
     d64:	09 f0       	breq	.+2      	; 0xd68 <Error+0xc>
     d66:	f6 cf       	rjmp	.-20     	; 0xd54 <stop_bus>
     d68:	ed cf       	rjmp	.-38     	; 0xd44 <clear_int>

00000d6a <get_data>:
     d6a:	80 91 bb 00 	lds	r24, 0x00BB
     d6e:	08 95       	ret

00000d70 <wait_for_bus>:
     d70:	ec eb       	ldi	r30, 0xBC	; 188
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 23       	and	r24, r24
     d78:	ec f7       	brge	.-6      	; 0xd74 <wait_for_bus+0x4>
     d7a:	08 95       	ret

00000d7c <send_data_and_wait>:
     d7c:	80 93 bb 00 	sts	0x00BB, r24
     d80:	84 e8       	ldi	r24, 0x84	; 132
     d82:	80 93 bc 00 	sts	0x00BC, r24
     d86:	f4 cf       	rjmp	.-24     	; 0xd70 <wait_for_bus>

00000d88 <stop_twi>:
     d88:	10 92 83 14 	sts	0x1483, r1
     d8c:	10 92 82 14 	sts	0x1482, r1
     d90:	10 92 8d 14 	sts	0x148D, r1
     d94:	10 92 8c 14 	sts	0x148C, r1
     d98:	10 92 78 14 	sts	0x1478, r1
     d9c:	10 92 77 14 	sts	0x1477, r1
     da0:	10 92 7d 14 	sts	0x147D, r1
     da4:	10 92 7c 14 	sts	0x147C, r1
     da8:	10 92 80 14 	sts	0x1480, r1
     dac:	10 92 7f 14 	sts	0x147F, r1
     db0:	08 95       	ret

00000db2 <reset_TWI>:
     db2:	ec eb       	ldi	r30, 0xBC	; 188
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	80 6c       	ori	r24, 0xC0	; 192
     dba:	80 83       	st	Z, r24
     dbc:	08 95       	ret

00000dbe <get_control_settings_from_bus>:
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	c0 91 7c 14 	lds	r28, 0x147C
     dc6:	d0 91 7d 14 	lds	r29, 0x147D
     dca:	cf df       	rcall	.-98     	; 0xd6a <get_data>
     dcc:	c7 58       	subi	r28, 0x87	; 135
     dce:	db 4e       	sbci	r29, 0xEB	; 235
     dd0:	88 83       	st	Y, r24
     dd2:	10 92 7d 14 	sts	0x147D, r1
     dd6:	10 92 7c 14 	sts	0x147C, r1
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <get_autonom_settings_from_bus>:
     de0:	c4 df       	rcall	.-120    	; 0xd6a <get_data>
     de2:	80 93 77 13 	sts	0x1377, r24
     de6:	08 95       	ret

00000de8 <get_char_from_bus>:
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	c0 91 77 14 	lds	r28, 0x1477
     df0:	d0 91 78 14 	lds	r29, 0x1478
     df4:	ba df       	rcall	.-140    	; 0xd6a <get_data>
     df6:	c8 58       	subi	r28, 0x88	; 136
     df8:	dc 4e       	sbci	r29, 0xEC	; 236
     dfa:	88 83       	st	Y, r24
     dfc:	80 91 77 14 	lds	r24, 0x1477
     e00:	90 91 78 14 	lds	r25, 0x1478
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	90 93 78 14 	sts	0x1478, r25
     e0a:	80 93 77 14 	sts	0x1477, r24
     e0e:	90 93 88 14 	sts	0x1488, r25
     e12:	80 93 87 14 	sts	0x1487, r24
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <get_sensor_from_bus>:
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	c0 91 8c 14 	lds	r28, 0x148C
     e24:	d0 91 8d 14 	lds	r29, 0x148D
     e28:	c8 30       	cpi	r28, 0x08	; 8
     e2a:	d1 05       	cpc	r29, r1
     e2c:	99 f4       	brne	.+38     	; 0xe54 <get_sensor_from_bus+0x38>
     e2e:	ee e8       	ldi	r30, 0x8E	; 142
     e30:	f4 e1       	ldi	r31, 0x14	; 20
     e32:	a6 e9       	ldi	r26, 0x96	; 150
     e34:	b4 e1       	ldi	r27, 0x14	; 20
     e36:	86 e9       	ldi	r24, 0x96	; 150
     e38:	94 e1       	ldi	r25, 0x14	; 20
     e3a:	21 91       	ld	r18, Z+
     e3c:	2d 93       	st	X+, r18
     e3e:	e8 17       	cp	r30, r24
     e40:	f9 07       	cpc	r31, r25
     e42:	d9 f7       	brne	.-10     	; 0xe3a <get_sensor_from_bus+0x1e>
     e44:	92 df       	rcall	.-220    	; 0xd6a <get_data>
     e46:	80 93 86 14 	sts	0x1486, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 3a 13 	sts	0x133A, r24
     e50:	67 db       	rcall	.-2354   	; 0x520 <navigation_fill_buffer>
     e52:	0d c0       	rjmp	.+26     	; 0xe6e <get_sensor_from_bus+0x52>
     e54:	8a df       	rcall	.-236    	; 0xd6a <get_data>
     e56:	c2 57       	subi	r28, 0x72	; 114
     e58:	db 4e       	sbci	r29, 0xEB	; 235
     e5a:	88 83       	st	Y, r24
     e5c:	80 91 8c 14 	lds	r24, 0x148C
     e60:	90 91 8d 14 	lds	r25, 0x148D
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	90 93 8d 14 	sts	0x148D, r25
     e6a:	80 93 8c 14 	sts	0x148C, r24
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	08 95       	ret

00000e74 <TWI_init>:
     e74:	80 93 7e 14 	sts	0x147E, r24
     e78:	80 34       	cpi	r24, 0x40	; 64
     e7a:	79 f0       	breq	.+30     	; 0xe9a <TWI_init+0x26>
     e7c:	80 38       	cpi	r24, 0x80	; 128
     e7e:	19 f0       	breq	.+6      	; 0xe86 <TWI_init+0x12>
     e80:	80 32       	cpi	r24, 0x20	; 32
     e82:	d1 f4       	brne	.+52     	; 0xeb8 <TWI_init+0x44>
     e84:	12 c0       	rjmp	.+36     	; 0xeaa <TWI_init+0x36>
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	88 b9       	out	0x08, r24	; 8
     e8a:	58 df       	rcall	.-336    	; 0xd3c <set_twi_reciever_enable>
     e8c:	8f e3       	ldi	r24, 0x3F	; 63
     e8e:	80 93 b8 00 	sts	0x00B8, r24
     e92:	81 e8       	ldi	r24, 0x81	; 129
     e94:	80 93 ba 00 	sts	0x00BA, r24
     e98:	08 95       	ret
     e9a:	8f e3       	ldi	r24, 0x3F	; 63
     e9c:	80 93 b8 00 	sts	0x00B8, r24
     ea0:	4d df       	rcall	.-358    	; 0xd3c <set_twi_reciever_enable>
     ea2:	80 e4       	ldi	r24, 0x40	; 64
     ea4:	80 93 ba 00 	sts	0x00BA, r24
     ea8:	08 95       	ret
     eaa:	8f e3       	ldi	r24, 0x3F	; 63
     eac:	80 93 b8 00 	sts	0x00B8, r24
     eb0:	45 df       	rcall	.-374    	; 0xd3c <set_twi_reciever_enable>
     eb2:	81 e2       	ldi	r24, 0x21	; 33
     eb4:	80 93 ba 00 	sts	0x00BA, r24
     eb8:	08 95       	ret

00000eba <TWI_send_command>:
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	c8 2f       	mov	r28, r24
     ec2:	d6 2f       	mov	r29, r22
     ec4:	14 2f       	mov	r17, r20
     ec6:	42 df       	rcall	.-380    	; 0xd4c <start_bus>
     ec8:	53 df       	rcall	.-346    	; 0xd70 <wait_for_bus>
     eca:	90 91 b9 00 	lds	r25, 0x00B9
     ece:	98 7f       	andi	r25, 0xF8	; 248
     ed0:	98 30       	cpi	r25, 0x08	; 8
     ed2:	19 f0       	breq	.+6      	; 0xeda <TWI_send_command+0x20>
     ed4:	43 df       	rcall	.-378    	; 0xd5c <Error>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	34 c0       	rjmp	.+104    	; 0xf42 <TWI_send_command+0x88>
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	4f df       	rcall	.-354    	; 0xd7c <send_data_and_wait>
     ede:	80 91 b9 00 	lds	r24, 0x00B9
     ee2:	88 7f       	andi	r24, 0xF8	; 248
     ee4:	88 31       	cpi	r24, 0x18	; 24
     ee6:	19 f0       	breq	.+6      	; 0xeee <TWI_send_command+0x34>
     ee8:	39 df       	rcall	.-398    	; 0xd5c <Error>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	2a c0       	rjmp	.+84     	; 0xf42 <TWI_send_command+0x88>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	45 df       	rcall	.-374    	; 0xd7c <send_data_and_wait>
     ef2:	80 91 b9 00 	lds	r24, 0x00B9
     ef6:	88 7f       	andi	r24, 0xF8	; 248
     ef8:	88 32       	cpi	r24, 0x28	; 40
     efa:	19 f0       	breq	.+6      	; 0xf02 <TWI_send_command+0x48>
     efc:	2f df       	rcall	.-418    	; 0xd5c <Error>
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	20 c0       	rjmp	.+64     	; 0xf42 <TWI_send_command+0x88>
     f02:	8c 2f       	mov	r24, r28
     f04:	3b df       	rcall	.-394    	; 0xd7c <send_data_and_wait>
     f06:	80 91 b9 00 	lds	r24, 0x00B9
     f0a:	88 7f       	andi	r24, 0xF8	; 248
     f0c:	88 32       	cpi	r24, 0x28	; 40
     f0e:	19 f0       	breq	.+6      	; 0xf16 <TWI_send_command+0x5c>
     f10:	25 df       	rcall	.-438    	; 0xd5c <Error>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <TWI_send_command+0x88>
     f16:	8d 2f       	mov	r24, r29
     f18:	31 df       	rcall	.-414    	; 0xd7c <send_data_and_wait>
     f1a:	80 91 b9 00 	lds	r24, 0x00B9
     f1e:	88 7f       	andi	r24, 0xF8	; 248
     f20:	88 32       	cpi	r24, 0x28	; 40
     f22:	19 f0       	breq	.+6      	; 0xf2a <TWI_send_command+0x70>
     f24:	1b df       	rcall	.-458    	; 0xd5c <Error>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	0c c0       	rjmp	.+24     	; 0xf42 <TWI_send_command+0x88>
     f2a:	81 2f       	mov	r24, r17
     f2c:	27 df       	rcall	.-434    	; 0xd7c <send_data_and_wait>
     f2e:	80 91 b9 00 	lds	r24, 0x00B9
     f32:	88 7f       	andi	r24, 0xF8	; 248
     f34:	88 32       	cpi	r24, 0x28	; 40
     f36:	19 f0       	breq	.+6      	; 0xf3e <TWI_send_command+0x84>
     f38:	11 df       	rcall	.-478    	; 0xd5c <Error>
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <TWI_send_command+0x88>
     f3e:	0a df       	rcall	.-492    	; 0xd54 <stop_bus>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <TWI_send_string>:
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	c8 2f       	mov	r28, r24
     f58:	e6 2e       	mov	r14, r22
     f5a:	f7 2e       	mov	r15, r23
     f5c:	f7 de       	rcall	.-530    	; 0xd4c <start_bus>
     f5e:	08 df       	rcall	.-496    	; 0xd70 <wait_for_bus>
     f60:	90 91 b9 00 	lds	r25, 0x00B9
     f64:	98 7f       	andi	r25, 0xF8	; 248
     f66:	98 30       	cpi	r25, 0x08	; 8
     f68:	19 f0       	breq	.+6      	; 0xf70 <TWI_send_string+0x26>
     f6a:	f8 de       	rcall	.-528    	; 0xd5c <Error>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	2c c0       	rjmp	.+88     	; 0xfc8 <TWI_send_string+0x7e>
     f70:	8c 2f       	mov	r24, r28
     f72:	04 df       	rcall	.-504    	; 0xd7c <send_data_and_wait>
     f74:	80 91 b9 00 	lds	r24, 0x00B9
     f78:	88 7f       	andi	r24, 0xF8	; 248
     f7a:	88 31       	cpi	r24, 0x18	; 24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <TWI_send_string+0x3a>
     f7e:	ee de       	rcall	.-548    	; 0xd5c <Error>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	22 c0       	rjmp	.+68     	; 0xfc8 <TWI_send_string+0x7e>
     f84:	89 e1       	ldi	r24, 0x19	; 25
     f86:	fa de       	rcall	.-524    	; 0xd7c <send_data_and_wait>
     f88:	80 91 b9 00 	lds	r24, 0x00B9
     f8c:	88 7f       	andi	r24, 0xF8	; 248
     f8e:	88 32       	cpi	r24, 0x28	; 40
     f90:	29 f4       	brne	.+10     	; 0xf9c <TWI_send_string+0x52>
     f92:	0e 2d       	mov	r16, r14
     f94:	1f 2d       	mov	r17, r15
     f96:	c0 e0       	ldi	r28, 0x00	; 0
     f98:	d0 e0       	ldi	r29, 0x00	; 0
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <TWI_send_string+0x62>
     f9c:	df de       	rcall	.-578    	; 0xd5c <Error>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	13 c0       	rjmp	.+38     	; 0xfc8 <TWI_send_string+0x7e>
     fa2:	f8 01       	movw	r30, r16
     fa4:	81 91       	ld	r24, Z+
     fa6:	8f 01       	movw	r16, r30
     fa8:	e9 de       	rcall	.-558    	; 0xd7c <send_data_and_wait>
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	ee 2d       	mov	r30, r14
     fae:	ff 2d       	mov	r31, r15
     fb0:	df 01       	movw	r26, r30
     fb2:	0d 90       	ld	r0, X+
     fb4:	00 20       	and	r0, r0
     fb6:	e9 f7       	brne	.-6      	; 0xfb2 <TWI_send_string+0x68>
     fb8:	11 97       	sbiw	r26, 0x01	; 1
     fba:	ae 1b       	sub	r26, r30
     fbc:	bf 0b       	sbc	r27, r31
     fbe:	ca 17       	cp	r28, r26
     fc0:	db 07       	cpc	r29, r27
     fc2:	78 f3       	brcs	.-34     	; 0xfa2 <TWI_send_string+0x58>
     fc4:	c7 de       	rcall	.-626    	; 0xd54 <stop_bus>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	08 95       	ret

00000fd6 <TWI_send_string_fixed_length>:
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	c8 2f       	mov	r28, r24
     fe4:	e6 2e       	mov	r14, r22
     fe6:	f7 2e       	mov	r15, r23
     fe8:	8a 01       	movw	r16, r20
     fea:	b0 de       	rcall	.-672    	; 0xd4c <start_bus>
     fec:	c1 de       	rcall	.-638    	; 0xd70 <wait_for_bus>
     fee:	90 91 b9 00 	lds	r25, 0x00B9
     ff2:	98 7f       	andi	r25, 0xF8	; 248
     ff4:	98 30       	cpi	r25, 0x08	; 8
     ff6:	19 f0       	breq	.+6      	; 0xffe <TWI_send_string_fixed_length+0x28>
     ff8:	b1 de       	rcall	.-670    	; 0xd5c <Error>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	23 c0       	rjmp	.+70     	; 0x1044 <TWI_send_string_fixed_length+0x6e>
     ffe:	8c 2f       	mov	r24, r28
    1000:	bd de       	rcall	.-646    	; 0xd7c <send_data_and_wait>
    1002:	80 91 b9 00 	lds	r24, 0x00B9
    1006:	88 7f       	andi	r24, 0xF8	; 248
    1008:	88 31       	cpi	r24, 0x18	; 24
    100a:	19 f0       	breq	.+6      	; 0x1012 <TWI_send_string_fixed_length+0x3c>
    100c:	a7 de       	rcall	.-690    	; 0xd5c <Error>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	19 c0       	rjmp	.+50     	; 0x1044 <TWI_send_string_fixed_length+0x6e>
    1012:	89 e1       	ldi	r24, 0x19	; 25
    1014:	b3 de       	rcall	.-666    	; 0xd7c <send_data_and_wait>
    1016:	80 91 b9 00 	lds	r24, 0x00B9
    101a:	88 7f       	andi	r24, 0xF8	; 248
    101c:	88 32       	cpi	r24, 0x28	; 40
    101e:	21 f4       	brne	.+8      	; 0x1028 <TWI_send_string_fixed_length+0x52>
    1020:	10 16       	cp	r1, r16
    1022:	11 06       	cpc	r1, r17
    1024:	24 f0       	brlt	.+8      	; 0x102e <TWI_send_string_fixed_length+0x58>
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <TWI_send_string_fixed_length+0x6a>
    1028:	99 de       	rcall	.-718    	; 0xd5c <Error>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0b c0       	rjmp	.+22     	; 0x1044 <TWI_send_string_fixed_length+0x6e>
    102e:	ce 2d       	mov	r28, r14
    1030:	df 2d       	mov	r29, r15
    1032:	0c 0f       	add	r16, r28
    1034:	1d 1f       	adc	r17, r29
    1036:	89 91       	ld	r24, Y+
    1038:	a1 de       	rcall	.-702    	; 0xd7c <send_data_and_wait>
    103a:	c0 17       	cp	r28, r16
    103c:	d1 07       	cpc	r29, r17
    103e:	d9 f7       	brne	.-10     	; 0x1036 <TWI_send_string_fixed_length+0x60>
    1040:	89 de       	rcall	.-750    	; 0xd54 <stop_bus>
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	08 95       	ret

00001052 <TWI_send_float>:
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	00 d0       	rcall	.+0      	; 0x1060 <TWI_send_float+0xe>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <TWI_send_float+0x10>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	18 2f       	mov	r17, r24
    1068:	49 83       	std	Y+1, r20	; 0x01
    106a:	5a 83       	std	Y+2, r21	; 0x02
    106c:	6b 83       	std	Y+3, r22	; 0x03
    106e:	7c 83       	std	Y+4, r23	; 0x04
    1070:	6d de       	rcall	.-806    	; 0xd4c <start_bus>
    1072:	7e de       	rcall	.-772    	; 0xd70 <wait_for_bus>
    1074:	90 91 b9 00 	lds	r25, 0x00B9
    1078:	98 7f       	andi	r25, 0xF8	; 248
    107a:	98 30       	cpi	r25, 0x08	; 8
    107c:	19 f0       	breq	.+6      	; 0x1084 <TWI_send_float+0x32>
    107e:	6e de       	rcall	.-804    	; 0xd5c <Error>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	24 c0       	rjmp	.+72     	; 0x10cc <TWI_send_float+0x7a>
    1084:	81 2f       	mov	r24, r17
    1086:	7a de       	rcall	.-780    	; 0xd7c <send_data_and_wait>
    1088:	80 91 b9 00 	lds	r24, 0x00B9
    108c:	88 7f       	andi	r24, 0xF8	; 248
    108e:	88 31       	cpi	r24, 0x18	; 24
    1090:	19 f0       	breq	.+6      	; 0x1098 <TWI_send_float+0x46>
    1092:	64 de       	rcall	.-824    	; 0xd5c <Error>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	1a c0       	rjmp	.+52     	; 0x10cc <TWI_send_float+0x7a>
    1098:	86 e0       	ldi	r24, 0x06	; 6
    109a:	70 de       	rcall	.-800    	; 0xd7c <send_data_and_wait>
    109c:	80 91 b9 00 	lds	r24, 0x00B9
    10a0:	88 7f       	andi	r24, 0xF8	; 248
    10a2:	88 32       	cpi	r24, 0x28	; 40
    10a4:	19 f0       	breq	.+6      	; 0x10ac <TWI_send_float+0x5a>
    10a6:	5a de       	rcall	.-844    	; 0xd5c <Error>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	10 c0       	rjmp	.+32     	; 0x10cc <TWI_send_float+0x7a>
    10ac:	8e 01       	movw	r16, r28
    10ae:	0f 5f       	subi	r16, 0xFF	; 255
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	7e 01       	movw	r14, r28
    10b4:	85 e0       	ldi	r24, 0x05	; 5
    10b6:	e8 0e       	add	r14, r24
    10b8:	f1 1c       	adc	r15, r1
    10ba:	f8 01       	movw	r30, r16
    10bc:	81 91       	ld	r24, Z+
    10be:	8f 01       	movw	r16, r30
    10c0:	5d de       	rcall	.-838    	; 0xd7c <send_data_and_wait>
    10c2:	0e 15       	cp	r16, r14
    10c4:	1f 05       	cpc	r17, r15
    10c6:	c9 f7       	brne	.-14     	; 0x10ba <TWI_send_float+0x68>
    10c8:	45 de       	rcall	.-886    	; 0xd54 <stop_bus>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	08 95       	ret

000010e2 <TWI_get_command>:
    10e2:	8c 58       	subi	r24, 0x8C	; 140
    10e4:	9c 4e       	sbci	r25, 0xEC	; 236
    10e6:	fc 01       	movw	r30, r24
    10e8:	80 81       	ld	r24, Z
    10ea:	08 95       	ret

000010ec <TWI_get_sensor>:
    10ec:	8a 56       	subi	r24, 0x6A	; 106
    10ee:	9b 4e       	sbci	r25, 0xEB	; 235
    10f0:	fc 01       	movw	r30, r24
    10f2:	80 81       	ld	r24, Z
    10f4:	08 95       	ret

000010f6 <TWI_get_control_setting>:
    10f6:	87 58       	subi	r24, 0x87	; 135
    10f8:	9b 4e       	sbci	r25, 0xEB	; 235
    10fa:	fc 01       	movw	r30, r24
    10fc:	80 81       	ld	r24, Z
    10fe:	08 95       	ret

00001100 <TWI_get_autonom_settings>:
    1100:	80 91 77 13 	lds	r24, 0x1377
    1104:	08 95       	ret

00001106 <TWI_get_elevation>:
    1106:	80 91 84 14 	lds	r24, 0x1484
    110a:	08 95       	ret

0000110c <TWI_command_flag>:
    110c:	80 91 39 13 	lds	r24, 0x1339
    1110:	88 23       	and	r24, r24
    1112:	21 f0       	breq	.+8      	; 0x111c <TWI_command_flag+0x10>
    1114:	10 92 39 13 	sts	0x1339, r1
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	08 95       	ret
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	08 95       	ret

00001120 <TWI_control_settings_flag>:
    1120:	80 91 38 13 	lds	r24, 0x1338
    1124:	88 23       	and	r24, r24
    1126:	21 f0       	breq	.+8      	; 0x1130 <TWI_control_settings_flag+0x10>
    1128:	10 92 38 13 	sts	0x1338, r1
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	08 95       	ret
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	08 95       	ret

00001134 <TWI_autonom_settings_flag>:
    1134:	80 91 37 13 	lds	r24, 0x1337
    1138:	88 23       	and	r24, r24
    113a:	21 f0       	breq	.+8      	; 0x1144 <TWI_autonom_settings_flag+0x10>
    113c:	10 92 37 13 	sts	0x1337, r1
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	08 95       	ret
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	08 95       	ret

00001148 <TWI_elevation_flag>:
    1148:	80 91 36 13 	lds	r24, 0x1336
    114c:	88 23       	and	r24, r24
    114e:	21 f0       	breq	.+8      	; 0x1158 <TWI_elevation_flag+0x10>
    1150:	10 92 36 13 	sts	0x1336, r1
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	08 95       	ret
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	08 95       	ret

0000115c <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	d8 2f       	mov	r29, r24
    1166:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
    1168:	60 91 87 14 	lds	r22, 0x1487
    116c:	80 91 08 01 	lds	r24, 0x0108
    1170:	90 91 09 01 	lds	r25, 0x0109
    1174:	60 d9       	rcall	.-3392   	; 0x436 <FifoWrite>
    1176:	81 11       	cpse	r24, r1
    1178:	1f c0       	rjmp	.+62     	; 0x11b8 <write_to_TwiFIFO+0x5c>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    117a:	20 91 87 14 	lds	r18, 0x1487
    117e:	30 91 88 14 	lds	r19, 0x1488
    1182:	12 16       	cp	r1, r18
    1184:	13 06       	cpc	r1, r19
    1186:	d4 f4       	brge	.+52     	; 0x11bc <write_to_TwiFIFO+0x60>
    1188:	0d 2f       	mov	r16, r29
    118a:	1c 2f       	mov	r17, r28
    118c:	c0 e0       	ldi	r28, 0x00	; 0
    118e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    1190:	f8 01       	movw	r30, r16
    1192:	61 91       	ld	r22, Z+
    1194:	8f 01       	movw	r16, r30
    1196:	80 91 08 01 	lds	r24, 0x0108
    119a:	90 91 09 01 	lds	r25, 0x0109
    119e:	4b d9       	rcall	.-3434   	; 0x436 <FifoWrite>
    11a0:	81 11       	cpse	r24, r1
    11a2:	0e c0       	rjmp	.+28     	; 0x11c0 <write_to_TwiFIFO+0x64>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    11a4:	21 96       	adiw	r28, 0x01	; 1
    11a6:	80 91 87 14 	lds	r24, 0x1487
    11aa:	90 91 88 14 	lds	r25, 0x1488
    11ae:	c8 17       	cp	r28, r24
    11b0:	d9 07       	cpc	r29, r25
    11b2:	74 f3       	brlt	.-36     	; 0x1190 <write_to_TwiFIFO+0x34>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <write_to_TwiFIFO+0x66>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//Can't add length!?
		return 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <write_to_TwiFIFO+0x66>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <write_to_TwiFIFO+0x66>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//Can't add chars!?
			return 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <__vector_26>:

//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	0b b6       	in	r0, 0x3b	; 59
    11d8:	0f 92       	push	r0
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	ef 93       	push	r30
    11f4:	ff 93       	push	r31
	switch(myAdress)
    11f6:	80 91 7e 14 	lds	r24, 0x147E
    11fa:	80 34       	cpi	r24, 0x40	; 64
    11fc:	09 f4       	brne	.+2      	; 0x1200 <__vector_26+0x34>
    11fe:	87 c0       	rjmp	.+270    	; 0x130e <__vector_26+0x142>
    1200:	80 38       	cpi	r24, 0x80	; 128
    1202:	21 f0       	breq	.+8      	; 0x120c <__vector_26+0x40>
    1204:	80 32       	cpi	r24, 0x20	; 32
    1206:	09 f0       	breq	.+2      	; 0x120a <__vector_26+0x3e>
    1208:	57 c1       	rjmp	.+686    	; 0x14b8 <__vector_26+0x2ec>
    120a:	c9 c0       	rjmp	.+402    	; 0x139e <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    120c:	80 91 b9 00 	lds	r24, 0x00B9
    1210:	88 7f       	andi	r24, 0xF8	; 248
    1212:	80 36       	cpi	r24, 0x60	; 96
    1214:	29 f0       	breq	.+10     	; 0x1220 <__vector_26+0x54>
    1216:	80 91 b9 00 	lds	r24, 0x00B9
    121a:	88 7f       	andi	r24, 0xF8	; 248
    121c:	88 36       	cpi	r24, 0x68	; 104
    121e:	21 f4       	brne	.+8      	; 0x1228 <__vector_26+0x5c>
			{
				instruction = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 81 14 	sts	0x1481, r24
    1226:	71 c0       	rjmp	.+226    	; 0x130a <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1228:	80 91 b9 00 	lds	r24, 0x00B9
    122c:	88 7f       	andi	r24, 0xF8	; 248
    122e:	80 37       	cpi	r24, 0x70	; 112
    1230:	29 f0       	breq	.+10     	; 0x123c <__vector_26+0x70>
    1232:	80 91 b9 00 	lds	r24, 0x00B9
    1236:	88 7f       	andi	r24, 0xF8	; 248
    1238:	88 37       	cpi	r24, 0x78	; 120
    123a:	39 f4       	brne	.+14     	; 0x124a <__vector_26+0x7e>
			{
				currentInstruction = 255;
    123c:	8f ef       	ldi	r24, 0xFF	; 255
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	90 93 8b 14 	sts	0x148B, r25
    1244:	80 93 8a 14 	sts	0x148A, r24
    1248:	60 c0       	rjmp	.+192    	; 0x130a <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    124a:	80 91 b9 00 	lds	r24, 0x00B9
    124e:	88 7f       	andi	r24, 0xF8	; 248
    1250:	80 38       	cpi	r24, 0x80	; 128
    1252:	b9 f5       	brne	.+110    	; 0x12c2 <__vector_26+0xf6>
			{
				if(instruction)
    1254:	80 91 81 14 	lds	r24, 0x1481
    1258:	88 23       	and	r24, r24
    125a:	41 f0       	breq	.+16     	; 0x126c <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    125c:	86 dd       	rcall	.-1268   	; 0xd6a <get_data>
    125e:	80 93 8a 14 	sts	0x148A, r24
    1262:	10 92 8b 14 	sts	0x148B, r1
					instruction = 0;
    1266:	10 92 81 14 	sts	0x1481, r1
    126a:	4f c0       	rjmp	.+158    	; 0x130a <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    126c:	80 91 8a 14 	lds	r24, 0x148A
    1270:	90 91 8b 14 	lds	r25, 0x148B
    1274:	85 30       	cpi	r24, 0x05	; 5
    1276:	91 05       	cpc	r25, r1
    1278:	71 f0       	breq	.+28     	; 0x1296 <__vector_26+0xca>
    127a:	24 f4       	brge	.+8      	; 0x1284 <__vector_26+0xb8>
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	09 f0       	breq	.+2      	; 0x1282 <__vector_26+0xb6>
    1280:	44 c0       	rjmp	.+136    	; 0x130a <__vector_26+0x13e>
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <__vector_26+0xc6>
    1284:	86 30       	cpi	r24, 0x06	; 6
    1286:	91 05       	cpc	r25, r1
    1288:	51 f0       	breq	.+20     	; 0x129e <__vector_26+0xd2>
    128a:	49 97       	sbiw	r24, 0x19	; 25
    128c:	09 f0       	breq	.+2      	; 0x1290 <__vector_26+0xc4>
    128e:	3d c0       	rjmp	.+122    	; 0x130a <__vector_26+0x13e>
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    1292:	95 dd       	rcall	.-1238   	; 0xdbe <get_control_settings_from_bus>
							break;
    1294:	3a c0       	rjmp	.+116    	; 0x130a <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1296:	a4 dd       	rcall	.-1208   	; 0xde0 <get_autonom_settings_from_bus>
							break;
    1298:	38 c0       	rjmp	.+112    	; 0x130a <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    129a:	a6 dd       	rcall	.-1204   	; 0xde8 <get_char_from_bus>
							break;
    129c:	36 c0       	rjmp	.+108    	; 0x130a <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    129e:	c0 91 7f 14 	lds	r28, 0x147F
    12a2:	d0 91 80 14 	lds	r29, 0x1480
    12a6:	61 dd       	rcall	.-1342   	; 0xd6a <get_data>
    12a8:	c0 59       	subi	r28, 0x90	; 144
    12aa:	dc 4e       	sbci	r29, 0xEC	; 236
    12ac:	88 83       	st	Y, r24
	floatCounter += 1;
    12ae:	80 91 7f 14 	lds	r24, 0x147F
    12b2:	90 91 80 14 	lds	r25, 0x1480
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	90 93 80 14 	sts	0x1480, r25
    12bc:	80 93 7f 14 	sts	0x147F, r24
    12c0:	24 c0       	rjmp	.+72     	; 0x130a <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    12c2:	80 91 b9 00 	lds	r24, 0x00B9
    12c6:	88 7f       	andi	r24, 0xF8	; 248
    12c8:	80 39       	cpi	r24, 0x90	; 144
    12ca:	11 f4       	brne	.+4      	; 0x12d0 <__vector_26+0x104>
			{
				get_sensor_from_bus();
    12cc:	a7 dd       	rcall	.-1202   	; 0xe1c <get_sensor_from_bus>
    12ce:	1d c0       	rjmp	.+58     	; 0x130a <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    12d0:	80 91 b9 00 	lds	r24, 0x00B9
    12d4:	88 7f       	andi	r24, 0xF8	; 248
    12d6:	80 3a       	cpi	r24, 0xA0	; 160
    12d8:	c1 f4       	brne	.+48     	; 0x130a <__vector_26+0x13e>
			{
				stop_twi();
    12da:	56 dd       	rcall	.-1364   	; 0xd88 <stop_twi>
				switch(currentInstruction)
    12dc:	80 91 8a 14 	lds	r24, 0x148A
    12e0:	90 91 8b 14 	lds	r25, 0x148B
    12e4:	85 30       	cpi	r24, 0x05	; 5
    12e6:	91 05       	cpc	r25, r1
    12e8:	49 f0       	breq	.+18     	; 0x12fc <__vector_26+0x130>
    12ea:	89 31       	cpi	r24, 0x19	; 25
    12ec:	91 05       	cpc	r25, r1
    12ee:	51 f0       	breq	.+20     	; 0x1304 <__vector_26+0x138>
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	59 f4       	brne	.+22     	; 0x130a <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 38 13 	sts	0x1338, r24
						break;
    12fa:	07 c0       	rjmp	.+14     	; 0x130a <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	80 93 37 13 	sts	0x1337, r24
						break;
    1302:	03 c0       	rjmp	.+6      	; 0x130a <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1304:	88 e7       	ldi	r24, 0x78	; 120
    1306:	93 e1       	ldi	r25, 0x13	; 19
    1308:	29 df       	rcall	.-430    	; 0x115c <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    130a:	53 dd       	rcall	.-1370   	; 0xdb2 <reset_TWI>
			break;
    130c:	d5 c0       	rjmp	.+426    	; 0x14b8 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    130e:	80 91 b9 00 	lds	r24, 0x00B9
    1312:	88 7f       	andi	r24, 0xF8	; 248
    1314:	80 36       	cpi	r24, 0x60	; 96
    1316:	29 f0       	breq	.+10     	; 0x1322 <__vector_26+0x156>
    1318:	80 91 b9 00 	lds	r24, 0x00B9
    131c:	88 7f       	andi	r24, 0xF8	; 248
    131e:	88 36       	cpi	r24, 0x68	; 104
    1320:	21 f4       	brne	.+8      	; 0x132a <__vector_26+0x15e>
			{
				instruction = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 81 14 	sts	0x1481, r24
    1328:	38 c0       	rjmp	.+112    	; 0x139a <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    132a:	80 91 b9 00 	lds	r24, 0x00B9
    132e:	88 7f       	andi	r24, 0xF8	; 248
    1330:	80 38       	cpi	r24, 0x80	; 128
    1332:	e1 f4       	brne	.+56     	; 0x136c <__vector_26+0x1a0>
			{
				if(instruction)
    1334:	80 91 81 14 	lds	r24, 0x1481
    1338:	88 23       	and	r24, r24
    133a:	41 f0       	breq	.+16     	; 0x134c <__vector_26+0x180>
				{
					currentInstruction = get_data();
    133c:	16 dd       	rcall	.-1492   	; 0xd6a <get_data>
    133e:	80 93 8a 14 	sts	0x148A, r24
    1342:	10 92 8b 14 	sts	0x148B, r1
					instruction = 0;
    1346:	10 92 81 14 	sts	0x1481, r1
    134a:	27 c0       	rjmp	.+78     	; 0x139a <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    134c:	80 91 8a 14 	lds	r24, 0x148A
    1350:	90 91 8b 14 	lds	r25, 0x148B
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	91 05       	cpc	r25, r1
    1358:	19 f0       	breq	.+6      	; 0x1360 <__vector_26+0x194>
    135a:	49 97       	sbiw	r24, 0x19	; 25
    135c:	f1 f4       	brne	.+60     	; 0x139a <__vector_26+0x1ce>
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    1360:	04 dd       	rcall	.-1528   	; 0xd6a <get_data>
    1362:	80 93 89 14 	sts	0x1489, r24
    1366:	19 c0       	rjmp	.+50     	; 0x139a <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    1368:	3f dd       	rcall	.-1410   	; 0xde8 <get_char_from_bus>
							break;
    136a:	17 c0       	rjmp	.+46     	; 0x139a <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    136c:	80 91 b9 00 	lds	r24, 0x00B9
    1370:	88 7f       	andi	r24, 0xF8	; 248
    1372:	80 3a       	cpi	r24, 0xA0	; 160
    1374:	91 f4       	brne	.+36     	; 0x139a <__vector_26+0x1ce>
			{
				stop_twi();
    1376:	08 dd       	rcall	.-1520   	; 0xd88 <stop_twi>
				switch(currentInstruction)
    1378:	80 91 8a 14 	lds	r24, 0x148A
    137c:	90 91 8b 14 	lds	r25, 0x148B
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	91 05       	cpc	r25, r1
    1384:	19 f0       	breq	.+6      	; 0x138c <__vector_26+0x1c0>
    1386:	49 97       	sbiw	r24, 0x19	; 25
    1388:	41 f4       	brne	.+16     	; 0x139a <__vector_26+0x1ce>
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	80 93 35 13 	sts	0x1335, r24
						break;
    1392:	03 c0       	rjmp	.+6      	; 0x139a <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1394:	88 e7       	ldi	r24, 0x78	; 120
    1396:	93 e1       	ldi	r25, 0x13	; 19
    1398:	e1 de       	rcall	.-574    	; 0x115c <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    139a:	0b dd       	rcall	.-1514   	; 0xdb2 <reset_TWI>
			break;
    139c:	8d c0       	rjmp	.+282    	; 0x14b8 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    139e:	80 91 b9 00 	lds	r24, 0x00B9
    13a2:	88 7f       	andi	r24, 0xF8	; 248
    13a4:	80 36       	cpi	r24, 0x60	; 96
    13a6:	29 f0       	breq	.+10     	; 0x13b2 <__vector_26+0x1e6>
    13a8:	80 91 b9 00 	lds	r24, 0x00B9
    13ac:	88 7f       	andi	r24, 0xF8	; 248
    13ae:	88 36       	cpi	r24, 0x68	; 104
    13b0:	21 f4       	brne	.+8      	; 0x13ba <__vector_26+0x1ee>
			{
				instruction = 1;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	80 93 81 14 	sts	0x1481, r24
    13b8:	7e c0       	rjmp	.+252    	; 0x14b6 <__vector_26+0x2ea>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    13ba:	80 91 b9 00 	lds	r24, 0x00B9
    13be:	88 7f       	andi	r24, 0xF8	; 248
    13c0:	80 37       	cpi	r24, 0x70	; 112
    13c2:	29 f0       	breq	.+10     	; 0x13ce <__vector_26+0x202>
    13c4:	80 91 b9 00 	lds	r24, 0x00B9
    13c8:	88 7f       	andi	r24, 0xF8	; 248
    13ca:	88 37       	cpi	r24, 0x78	; 120
    13cc:	39 f4       	brne	.+14     	; 0x13dc <__vector_26+0x210>
			{
				currentInstruction = 255;
    13ce:	8f ef       	ldi	r24, 0xFF	; 255
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	90 93 8b 14 	sts	0x148B, r25
    13d6:	80 93 8a 14 	sts	0x148A, r24
    13da:	6d c0       	rjmp	.+218    	; 0x14b6 <__vector_26+0x2ea>
			}
			else if(CONTROL == DATA_SLAW)
    13dc:	80 91 b9 00 	lds	r24, 0x00B9
    13e0:	88 7f       	andi	r24, 0xF8	; 248
    13e2:	80 38       	cpi	r24, 0x80	; 128
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <__vector_26+0x21c>
    13e6:	3a c0       	rjmp	.+116    	; 0x145c <__vector_26+0x290>
			{
				if(instruction)
    13e8:	80 91 81 14 	lds	r24, 0x1481
    13ec:	88 23       	and	r24, r24
    13ee:	41 f0       	breq	.+16     	; 0x1400 <__vector_26+0x234>
				{
					currentInstruction = get_data();
    13f0:	bc dc       	rcall	.-1672   	; 0xd6a <get_data>
    13f2:	80 93 8a 14 	sts	0x148A, r24
    13f6:	10 92 8b 14 	sts	0x148B, r1
					instruction = 0;
    13fa:	10 92 81 14 	sts	0x1481, r1
    13fe:	5b c0       	rjmp	.+182    	; 0x14b6 <__vector_26+0x2ea>
				}
				else
				{
					switch(currentInstruction)
    1400:	80 91 8a 14 	lds	r24, 0x148A
    1404:	90 91 8b 14 	lds	r25, 0x148B
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	19 f1       	breq	.+70     	; 0x1454 <__vector_26+0x288>
    140e:	1c f4       	brge	.+6      	; 0x1416 <__vector_26+0x24a>
    1410:	89 2b       	or	r24, r25
    1412:	41 f0       	breq	.+16     	; 0x1424 <__vector_26+0x258>
    1414:	50 c0       	rjmp	.+160    	; 0x14b6 <__vector_26+0x2ea>
    1416:	84 30       	cpi	r24, 0x04	; 4
    1418:	91 05       	cpc	r25, r1
    141a:	b1 f0       	breq	.+44     	; 0x1448 <__vector_26+0x27c>
    141c:	05 97       	sbiw	r24, 0x05	; 5
    141e:	09 f0       	breq	.+2      	; 0x1422 <__vector_26+0x256>
    1420:	4a c0       	rjmp	.+148    	; 0x14b6 <__vector_26+0x2ea>
    1422:	1a c0       	rjmp	.+52     	; 0x1458 <__vector_26+0x28c>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    1424:	c0 91 82 14 	lds	r28, 0x1482
    1428:	d0 91 83 14 	lds	r29, 0x1483
    142c:	9e dc       	rcall	.-1732   	; 0xd6a <get_data>
    142e:	cc 58       	subi	r28, 0x8C	; 140
    1430:	dc 4e       	sbci	r29, 0xEC	; 236
    1432:	88 83       	st	Y, r24
	currentCommand += 1;
    1434:	80 91 82 14 	lds	r24, 0x1482
    1438:	90 91 83 14 	lds	r25, 0x1483
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	90 93 83 14 	sts	0x1483, r25
    1442:	80 93 82 14 	sts	0x1482, r24
    1446:	37 c0       	rjmp	.+110    	; 0x14b6 <__vector_26+0x2ea>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation = get_data();
    1448:	90 dc       	rcall	.-1760   	; 0xd6a <get_data>
    144a:	80 93 84 14 	sts	0x1484, r24
    144e:	10 92 85 14 	sts	0x1485, r1
    1452:	31 c0       	rjmp	.+98     	; 0x14b6 <__vector_26+0x2ea>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    1454:	b4 dc       	rcall	.-1688   	; 0xdbe <get_control_settings_from_bus>
							break;
    1456:	2f c0       	rjmp	.+94     	; 0x14b6 <__vector_26+0x2ea>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1458:	c3 dc       	rcall	.-1658   	; 0xde0 <get_autonom_settings_from_bus>
							break;
    145a:	2d c0       	rjmp	.+90     	; 0x14b6 <__vector_26+0x2ea>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    145c:	80 91 b9 00 	lds	r24, 0x00B9
    1460:	88 7f       	andi	r24, 0xF8	; 248
    1462:	80 39       	cpi	r24, 0x90	; 144
    1464:	11 f4       	brne	.+4      	; 0x146a <__vector_26+0x29e>
			{
				get_sensor_from_bus();
    1466:	da dc       	rcall	.-1612   	; 0xe1c <get_sensor_from_bus>
    1468:	26 c0       	rjmp	.+76     	; 0x14b6 <__vector_26+0x2ea>
			}
			else if (CONTROL == STOP)
    146a:	80 91 b9 00 	lds	r24, 0x00B9
    146e:	88 7f       	andi	r24, 0xF8	; 248
    1470:	80 3a       	cpi	r24, 0xA0	; 160
    1472:	09 f5       	brne	.+66     	; 0x14b6 <__vector_26+0x2ea>
			{
				stop_twi();
    1474:	89 dc       	rcall	.-1774   	; 0xd88 <stop_twi>
				switch(currentInstruction)
    1476:	80 91 8a 14 	lds	r24, 0x148A
    147a:	90 91 8b 14 	lds	r25, 0x148B
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	91 f0       	breq	.+36     	; 0x14a8 <__vector_26+0x2dc>
    1484:	1c f4       	brge	.+6      	; 0x148c <__vector_26+0x2c0>
    1486:	89 2b       	or	r24, r25
    1488:	39 f0       	breq	.+14     	; 0x1498 <__vector_26+0x2cc>
    148a:	15 c0       	rjmp	.+42     	; 0x14b6 <__vector_26+0x2ea>
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	91 05       	cpc	r25, r1
    1490:	39 f0       	breq	.+14     	; 0x14a0 <__vector_26+0x2d4>
    1492:	05 97       	sbiw	r24, 0x05	; 5
    1494:	81 f4       	brne	.+32     	; 0x14b6 <__vector_26+0x2ea>
    1496:	0c c0       	rjmp	.+24     	; 0x14b0 <__vector_26+0x2e4>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 39 13 	sts	0x1339, r24
						break;
    149e:	0b c0       	rjmp	.+22     	; 0x14b6 <__vector_26+0x2ea>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	80 93 36 13 	sts	0x1336, r24
						break;
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <__vector_26+0x2ea>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 38 13 	sts	0x1338, r24
						break;
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <__vector_26+0x2ea>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 93 37 13 	sts	0x1337, r24
						break;
					}
				}
			}
			reset_TWI();
    14b6:	7d dc       	rcall	.-1798   	; 0xdb2 <reset_TWI>
			break;
		}
	}
    14b8:	ff 91       	pop	r31
    14ba:	ef 91       	pop	r30
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	bf 91       	pop	r27
    14c2:	af 91       	pop	r26
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	7f 91       	pop	r23
    14ca:	6f 91       	pop	r22
    14cc:	5f 91       	pop	r21
    14ce:	4f 91       	pop	r20
    14d0:	3f 91       	pop	r19
    14d2:	2f 91       	pop	r18
    14d4:	0f 90       	pop	r0
    14d6:	0b be       	out	0x3b, r0	; 59
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	0f 90       	pop	r0
    14de:	1f 90       	pop	r1
    14e0:	18 95       	reti

000014e2 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
    14e2:	10 92 c5 00 	sts	0x00C5, r1
    14e6:	87 e0       	ldi	r24, 0x07	; 7
    14e8:	80 93 c4 00 	sts	0x00C4, r24
    14ec:	88 e9       	ldi	r24, 0x98	; 152
    14ee:	80 93 c1 00 	sts	0x00C1, r24
    14f2:	86 e0       	ldi	r24, 0x06	; 6
    14f4:	80 93 c2 00 	sts	0x00C2, r24
    14f8:	08 95       	ret

000014fa <USART_set_twi_message_destination>:
    14fa:	90 93 1a 11 	sts	0x111A, r25
    14fe:	80 93 19 11 	sts	0x1119, r24
    1502:	08 95       	ret

00001504 <USART_CheckTxReady>:
    1504:	80 91 c0 00 	lds	r24, 0x00C0
    1508:	80 72       	andi	r24, 0x20	; 32
    150a:	08 95       	ret

0000150c <USART_WriteByte>:
    150c:	cf 93       	push	r28
    150e:	c8 2f       	mov	r28, r24
    1510:	f9 df       	rcall	.-14     	; 0x1504 <USART_CheckTxReady>
    1512:	88 23       	and	r24, r24
    1514:	e9 f3       	breq	.-6      	; 0x1510 <USART_WriteByte+0x4>
    1516:	c0 93 c6 00 	sts	0x00C6, r28
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <USART_crc16>:
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	66 23       	and	r22, r22
    1530:	09 f4       	brne	.+2      	; 0x1534 <USART_crc16+0x16>
    1532:	3e c0       	rjmp	.+124    	; 0x15b0 <USART_crc16+0x92>
    1534:	06 2f       	mov	r16, r22
    1536:	10 e0       	ldi	r17, 0x00	; 0
    1538:	4f ef       	ldi	r20, 0xFF	; 255
    153a:	5f ef       	ldi	r21, 0xFF	; 255
    153c:	ee ef       	ldi	r30, 0xFE	; 254
    153e:	ff ef       	ldi	r31, 0xFF	; 255
    1540:	c6 2e       	mov	r12, r22
    1542:	d1 2c       	mov	r13, r1
    1544:	e8 2e       	mov	r14, r24
    1546:	f1 2c       	mov	r15, r1
    1548:	c8 e0       	ldi	r28, 0x08	; 8
    154a:	d0 e0       	ldi	r29, 0x00	; 0
    154c:	ee 3f       	cpi	r30, 0xFE	; 254
    154e:	6f ef       	ldi	r22, 0xFF	; 255
    1550:	f6 07       	cpc	r31, r22
    1552:	19 f4       	brne	.+6      	; 0x155a <USART_crc16+0x3c>
    1554:	8e 2d       	mov	r24, r14
    1556:	9f 2d       	mov	r25, r15
    1558:	30 c0       	rjmp	.+96     	; 0x15ba <USART_crc16+0x9c>
    155a:	ef 3f       	cpi	r30, 0xFF	; 255
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	f8 07       	cpc	r31, r24
    1560:	19 f4       	brne	.+6      	; 0x1568 <USART_crc16+0x4a>
    1562:	8c 2d       	mov	r24, r12
    1564:	9d 2d       	mov	r25, r13
    1566:	29 c0       	rjmp	.+82     	; 0x15ba <USART_crc16+0x9c>
    1568:	df 01       	movw	r26, r30
    156a:	ad 55       	subi	r26, 0x5D	; 93
    156c:	b9 4e       	sbci	r27, 0xE9	; 233
    156e:	8c 91       	ld	r24, X
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	23 c0       	rjmp	.+70     	; 0x15ba <USART_crc16+0x9c>
    1574:	ba 01       	movw	r22, r20
    1576:	68 27       	eor	r22, r24
    1578:	79 27       	eor	r23, r25
    157a:	60 ff       	sbrs	r22, 0
    157c:	07 c0       	rjmp	.+14     	; 0x158c <USART_crc16+0x6e>
    157e:	56 95       	lsr	r21
    1580:	47 95       	ror	r20
    1582:	68 e0       	ldi	r22, 0x08	; 8
    1584:	46 27       	eor	r20, r22
    1586:	64 e8       	ldi	r22, 0x84	; 132
    1588:	56 27       	eor	r21, r22
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <USART_crc16+0x72>
    158c:	56 95       	lsr	r21
    158e:	47 95       	ror	r20
    1590:	96 95       	lsr	r25
    1592:	87 95       	ror	r24
    1594:	21 50       	subi	r18, 0x01	; 1
    1596:	31 09       	sbc	r19, r1
    1598:	69 f7       	brne	.-38     	; 0x1574 <USART_crc16+0x56>
    159a:	31 96       	adiw	r30, 0x01	; 1
    159c:	e0 17       	cp	r30, r16
    159e:	f1 07       	cpc	r31, r17
    15a0:	a9 f6       	brne	.-86     	; 0x154c <USART_crc16+0x2e>
    15a2:	9a 01       	movw	r18, r20
    15a4:	20 95       	com	r18
    15a6:	30 95       	com	r19
    15a8:	32 27       	eor	r19, r18
    15aa:	23 27       	eor	r18, r19
    15ac:	32 27       	eor	r19, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <USART_crc16+0x96>
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	82 2f       	mov	r24, r18
    15b6:	93 2f       	mov	r25, r19
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <USART_crc16+0xa0>
    15ba:	9e 01       	movw	r18, r28
    15bc:	db cf       	rjmp	.-74     	; 0x1574 <USART_crc16+0x56>
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	df 90       	pop	r13
    15cc:	cf 90       	pop	r12
    15ce:	08 95       	ret

000015d0 <USART_SendPacket>:
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	9e e7       	ldi	r25, 0x7E	; 126
    15da:	90 93 a2 17 	sts	0x17A2, r25
    15de:	80 93 a3 17 	sts	0x17A3, r24
    15e2:	60 93 a4 17 	sts	0x17A4, r22
    15e6:	26 2f       	mov	r18, r22
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	12 16       	cp	r1, r18
    15ec:	13 06       	cpc	r1, r19
    15ee:	4c f5       	brge	.+82     	; 0x1642 <USART_SendPacket+0x72>
    15f0:	e3 ea       	ldi	r30, 0xA3	; 163
    15f2:	f6 e1       	ldi	r31, 0x16	; 22
    15f4:	03 e0       	ldi	r16, 0x03	; 3
    15f6:	10 e0       	ldi	r17, 0x00	; 0
    15f8:	c0 e0       	ldi	r28, 0x00	; 0
    15fa:	d0 e0       	ldi	r29, 0x00	; 0
    15fc:	7d e7       	ldi	r23, 0x7D	; 125
    15fe:	50 e2       	ldi	r21, 0x20	; 32
    1600:	90 81       	ld	r25, Z
    1602:	49 2f       	mov	r20, r25
    1604:	4d 57       	subi	r20, 0x7D	; 125
    1606:	42 30       	cpi	r20, 0x02	; 2
    1608:	80 f4       	brcc	.+32     	; 0x162a <USART_SendPacket+0x5a>
    160a:	d8 01       	movw	r26, r16
    160c:	ae 55       	subi	r26, 0x5E	; 94
    160e:	b8 4e       	sbci	r27, 0xE8	; 232
    1610:	ac 0f       	add	r26, r28
    1612:	bd 1f       	adc	r27, r29
    1614:	7c 93       	st	X, r23
    1616:	0f 5f       	subi	r16, 0xFF	; 255
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	d8 01       	movw	r26, r16
    161c:	ae 55       	subi	r26, 0x5E	; 94
    161e:	b8 4e       	sbci	r27, 0xE8	; 232
    1620:	ac 0f       	add	r26, r28
    1622:	bd 1f       	adc	r27, r29
    1624:	95 27       	eor	r25, r21
    1626:	9c 93       	st	X, r25
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <USART_SendPacket+0x66>
    162a:	d8 01       	movw	r26, r16
    162c:	ae 55       	subi	r26, 0x5E	; 94
    162e:	b8 4e       	sbci	r27, 0xE8	; 232
    1630:	ac 0f       	add	r26, r28
    1632:	bd 1f       	adc	r27, r29
    1634:	9c 93       	st	X, r25
    1636:	21 96       	adiw	r28, 0x01	; 1
    1638:	31 96       	adiw	r30, 0x01	; 1
    163a:	c2 17       	cp	r28, r18
    163c:	d3 07       	cpc	r29, r19
    163e:	01 f7       	brne	.-64     	; 0x1600 <USART_SendPacket+0x30>
    1640:	04 c0       	rjmp	.+8      	; 0x164a <USART_SendPacket+0x7a>
    1642:	03 e0       	ldi	r16, 0x03	; 3
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	c0 e0       	ldi	r28, 0x00	; 0
    1648:	d0 e0       	ldi	r29, 0x00	; 0
    164a:	69 df       	rcall	.-302    	; 0x151e <USART_crc16>
    164c:	f8 01       	movw	r30, r16
    164e:	ee 55       	subi	r30, 0x5E	; 94
    1650:	f8 4e       	sbci	r31, 0xE8	; 232
    1652:	ec 0f       	add	r30, r28
    1654:	fd 1f       	adc	r31, r29
    1656:	90 83       	st	Z, r25
    1658:	81 83       	std	Z+1, r24	; 0x01
    165a:	22 96       	adiw	r28, 0x02	; 2
    165c:	0c 0f       	add	r16, r28
    165e:	1d 1f       	adc	r17, r29
    1660:	f8 01       	movw	r30, r16
    1662:	ee 55       	subi	r30, 0x5E	; 94
    1664:	f8 4e       	sbci	r31, 0xE8	; 232
    1666:	8e e7       	ldi	r24, 0x7E	; 126
    1668:	80 83       	st	Z, r24
    166a:	c8 01       	movw	r24, r16
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	18 16       	cp	r1, r24
    1670:	19 06       	cpc	r1, r25
    1672:	4c f4       	brge	.+18     	; 0x1686 <USART_SendPacket+0xb6>
    1674:	c2 ea       	ldi	r28, 0xA2	; 162
    1676:	d7 e1       	ldi	r29, 0x17	; 23
    1678:	0d 55       	subi	r16, 0x5D	; 93
    167a:	18 4e       	sbci	r17, 0xE8	; 232
    167c:	89 91       	ld	r24, Y+
    167e:	46 df       	rcall	.-372    	; 0x150c <USART_WriteByte>
    1680:	c0 17       	cp	r28, r16
    1682:	d1 07       	cpc	r29, r17
    1684:	d9 f7       	brne	.-10     	; 0x167c <USART_SendPacket+0xac>
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	08 95       	ret

00001690 <USART_SendCommand>:
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	26 dd       	rcall	.-1460   	; 0x10e2 <TWI_get_command>
    1696:	80 93 a3 16 	sts	0x16A3, r24
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	21 dd       	rcall	.-1470   	; 0x10e2 <TWI_get_command>
    16a0:	80 93 a4 16 	sts	0x16A4, r24
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	1c dd       	rcall	.-1480   	; 0x10e2 <TWI_get_command>
    16aa:	80 93 a5 16 	sts	0x16A5, r24
    16ae:	63 e0       	ldi	r22, 0x03	; 3
    16b0:	83 e4       	ldi	r24, 0x43	; 67
    16b2:	8e cf       	rjmp	.-228    	; 0x15d0 <USART_SendPacket>

000016b4 <USART_SendElevation>:
    16b4:	28 dd       	rcall	.-1456   	; 0x1106 <TWI_get_elevation>
    16b6:	80 93 a3 16 	sts	0x16A3, r24
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	85 e4       	ldi	r24, 0x45	; 69
    16be:	88 cf       	rjmp	.-240    	; 0x15d0 <USART_SendPacket>

000016c0 <USART_DecodeMessageRxFIFO>:
    16c0:	8f 92       	push	r8
    16c2:	9f 92       	push	r9
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	ad b6       	in	r10, 0x3d	; 61
    16de:	be b6       	in	r11, 0x3e	; 62
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	80 91 11 01 	lds	r24, 0x0111
    16e8:	90 91 12 01 	lds	r25, 0x0112
    16ec:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    16f0:	88 23       	and	r24, r24
    16f2:	31 f0       	breq	.+12     	; 0x1700 <USART_DecodeMessageRxFIFO+0x40>
    16f4:	65 e0       	ldi	r22, 0x05	; 5
    16f6:	72 e1       	ldi	r23, 0x12	; 18
    16f8:	80 e4       	ldi	r24, 0x40	; 64
    16fa:	27 dc       	rcall	.-1970   	; 0xf4a <TWI_send_string>
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	45 c0       	rjmp	.+138    	; 0x178a <USART_DecodeMessageRxFIFO+0xca>
    1700:	c0 90 00 00 	lds	r12, 0x0000
    1704:	d1 2c       	mov	r13, r1
    1706:	96 01       	movw	r18, r12
    1708:	21 50       	subi	r18, 0x01	; 1
    170a:	31 09       	sbc	r19, r1
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	c1 14       	cp	r12, r1
    1712:	d1 04       	cpc	r13, r1
    1714:	11 f0       	breq	.+4      	; 0x171a <USART_DecodeMessageRxFIFO+0x5a>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	82 0f       	add	r24, r18
    171c:	93 1f       	adc	r25, r19
    171e:	2d b7       	in	r18, 0x3d	; 61
    1720:	3e b7       	in	r19, 0x3e	; 62
    1722:	28 1b       	sub	r18, r24
    1724:	39 0b       	sbc	r19, r25
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	3e bf       	out	0x3e, r19	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	2d bf       	out	0x3d, r18	; 61
    1730:	8d b7       	in	r24, 0x3d	; 61
    1732:	9e b7       	in	r25, 0x3e	; 62
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	88 2e       	mov	r8, r24
    1738:	99 2e       	mov	r9, r25
    173a:	1c 14       	cp	r1, r12
    173c:	1d 04       	cpc	r1, r13
    173e:	f4 f4       	brge	.+60     	; 0x177c <USART_DecodeMessageRxFIFO+0xbc>
    1740:	e8 2e       	mov	r14, r24
    1742:	f9 2e       	mov	r15, r25
    1744:	00 e0       	ldi	r16, 0x00	; 0
    1746:	10 e0       	ldi	r17, 0x00	; 0
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	80 91 11 01 	lds	r24, 0x0111
    1750:	90 91 12 01 	lds	r25, 0x0112
    1754:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    1758:	88 23       	and	r24, r24
    175a:	31 f0       	breq	.+12     	; 0x1768 <USART_DecodeMessageRxFIFO+0xa8>
    175c:	67 e2       	ldi	r22, 0x27	; 39
    175e:	72 e1       	ldi	r23, 0x12	; 18
    1760:	80 e4       	ldi	r24, 0x40	; 64
    1762:	f3 db       	rcall	.-2074   	; 0xf4a <TWI_send_string>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	11 c0       	rjmp	.+34     	; 0x178a <USART_DecodeMessageRxFIFO+0xca>
    1768:	80 91 00 00 	lds	r24, 0x0000
    176c:	f7 01       	movw	r30, r14
    176e:	81 93       	st	Z+, r24
    1770:	7f 01       	movw	r14, r30
    1772:	0f 5f       	subi	r16, 0xFF	; 255
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	0c 15       	cp	r16, r12
    1778:	1d 05       	cpc	r17, r13
    177a:	34 f3       	brlt	.-52     	; 0x1748 <USART_DecodeMessageRxFIFO+0x88>
    177c:	a6 01       	movw	r20, r12
    177e:	68 2d       	mov	r22, r8
    1780:	79 2d       	mov	r23, r9
    1782:	80 91 19 11 	lds	r24, 0x1119
    1786:	27 dc       	rcall	.-1970   	; 0xfd6 <TWI_send_string_fixed_length>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	be be       	out	0x3e, r11	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	ad be       	out	0x3d, r10	; 61
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	bf 90       	pop	r11
    17a6:	af 90       	pop	r10
    17a8:	9f 90       	pop	r9
    17aa:	8f 90       	pop	r8
    17ac:	08 95       	ret

000017ae <USART_DecodeCommandRxFIFO>:
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	80 91 11 01 	lds	r24, 0x0111
    17ba:	90 91 12 01 	lds	r25, 0x0112
    17be:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    17c2:	88 23       	and	r24, r24
    17c4:	31 f0       	breq	.+12     	; 0x17d2 <USART_DecodeCommandRxFIFO+0x24>
    17c6:	6a e4       	ldi	r22, 0x4A	; 74
    17c8:	72 e1       	ldi	r23, 0x12	; 18
    17ca:	80 e4       	ldi	r24, 0x40	; 64
    17cc:	be db       	rcall	.-2180   	; 0xf4a <TWI_send_string>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	45 c0       	rjmp	.+138    	; 0x185c <USART_DecodeCommandRxFIFO+0xae>
    17d2:	80 91 00 00 	lds	r24, 0x0000
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	09 f0       	breq	.+2      	; 0x17dc <USART_DecodeCommandRxFIFO+0x2e>
    17da:	3b c0       	rjmp	.+118    	; 0x1852 <USART_DecodeCommandRxFIFO+0xa4>
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	80 91 11 01 	lds	r24, 0x0111
    17e4:	90 91 12 01 	lds	r25, 0x0112
    17e8:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    17ec:	88 23       	and	r24, r24
    17ee:	31 f0       	breq	.+12     	; 0x17fc <USART_DecodeCommandRxFIFO+0x4e>
    17f0:	6c e6       	ldi	r22, 0x6C	; 108
    17f2:	72 e1       	ldi	r23, 0x12	; 18
    17f4:	80 e4       	ldi	r24, 0x40	; 64
    17f6:	a9 db       	rcall	.-2222   	; 0xf4a <TWI_send_string>
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	30 c0       	rjmp	.+96     	; 0x185c <USART_DecodeCommandRxFIFO+0xae>
    17fc:	c0 91 00 00 	lds	r28, 0x0000
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	80 91 11 01 	lds	r24, 0x0111
    1808:	90 91 12 01 	lds	r25, 0x0112
    180c:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    1810:	88 23       	and	r24, r24
    1812:	31 f0       	breq	.+12     	; 0x1820 <USART_DecodeCommandRxFIFO+0x72>
    1814:	64 e9       	ldi	r22, 0x94	; 148
    1816:	72 e1       	ldi	r23, 0x12	; 18
    1818:	80 e4       	ldi	r24, 0x40	; 64
    181a:	97 db       	rcall	.-2258   	; 0xf4a <TWI_send_string>
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	1e c0       	rjmp	.+60     	; 0x185c <USART_DecodeCommandRxFIFO+0xae>
    1820:	d0 91 00 00 	lds	r29, 0x0000
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	80 91 11 01 	lds	r24, 0x0111
    182c:	90 91 12 01 	lds	r25, 0x0112
    1830:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    1834:	88 23       	and	r24, r24
    1836:	31 f0       	breq	.+12     	; 0x1844 <USART_DecodeCommandRxFIFO+0x96>
    1838:	6b eb       	ldi	r22, 0xBB	; 187
    183a:	72 e1       	ldi	r23, 0x12	; 18
    183c:	80 e4       	ldi	r24, 0x40	; 64
    183e:	85 db       	rcall	.-2294   	; 0xf4a <TWI_send_string>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	0c c0       	rjmp	.+24     	; 0x185c <USART_DecodeCommandRxFIFO+0xae>
    1844:	40 91 00 00 	lds	r20, 0x0000
    1848:	6d 2f       	mov	r22, r29
    184a:	8c 2f       	mov	r24, r28
    184c:	36 db       	rcall	.-2452   	; 0xeba <TWI_send_command>
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	05 c0       	rjmp	.+10     	; 0x185c <USART_DecodeCommandRxFIFO+0xae>
    1852:	6f ed       	ldi	r22, 0xDF	; 223
    1854:	72 e1       	ldi	r23, 0x12	; 18
    1856:	80 e4       	ldi	r24, 0x40	; 64
    1858:	78 db       	rcall	.-2320   	; 0xf4a <TWI_send_string>
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <USART_DecodeValueFIFO>:
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	00 d0       	rcall	.+0      	; 0x1870 <USART_DecodeValueFIFO+0xe>
    1870:	00 d0       	rcall	.+0      	; 0x1872 <USART_DecodeValueFIFO+0x10>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	80 91 11 01 	lds	r24, 0x0111
    187e:	90 91 12 01 	lds	r25, 0x0112
    1882:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    1886:	88 23       	and	r24, r24
    1888:	31 f0       	breq	.+12     	; 0x1896 <USART_DecodeValueFIFO+0x34>
    188a:	66 e0       	ldi	r22, 0x06	; 6
    188c:	73 e1       	ldi	r23, 0x13	; 19
    188e:	80 e4       	ldi	r24, 0x40	; 64
    1890:	5c db       	rcall	.-2376   	; 0xf4a <TWI_send_string>
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	32 c0       	rjmp	.+100    	; 0x18fa <USART_DecodeValueFIFO+0x98>
    1896:	80 91 00 00 	lds	r24, 0x0000
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	59 f5       	brne	.+86     	; 0x18f4 <USART_DecodeValueFIFO+0x92>
    189e:	8e 01       	movw	r16, r28
    18a0:	0f 5f       	subi	r16, 0xFF	; 255
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	7e 01       	movw	r14, r28
    18a6:	85 e0       	ldi	r24, 0x05	; 5
    18a8:	e8 0e       	add	r14, r24
    18aa:	f1 1c       	adc	r15, r1
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	80 91 11 01 	lds	r24, 0x0111
    18b4:	90 91 12 01 	lds	r25, 0x0112
    18b8:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    18bc:	81 11       	cpse	r24, r1
    18be:	1c c0       	rjmp	.+56     	; 0x18f8 <USART_DecodeValueFIFO+0x96>
    18c0:	e0 e0       	ldi	r30, 0x00	; 0
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	d8 01       	movw	r26, r16
    18c8:	8d 93       	st	X+, r24
    18ca:	8d 01       	movw	r16, r26
    18cc:	60 81       	ld	r22, Z
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	2c d2       	rcall	.+1112   	; 0x1d2e <__floatunsisf>
    18d6:	ab 01       	movw	r20, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	80 e8       	ldi	r24, 0x80	; 128
    18dc:	ba db       	rcall	.-2188   	; 0x1052 <TWI_send_float>
    18de:	0e 15       	cp	r16, r14
    18e0:	1f 05       	cpc	r17, r15
    18e2:	21 f7       	brne	.-56     	; 0x18ac <USART_DecodeValueFIFO+0x4a>
    18e4:	49 81       	ldd	r20, Y+1	; 0x01
    18e6:	5a 81       	ldd	r21, Y+2	; 0x02
    18e8:	6b 81       	ldd	r22, Y+3	; 0x03
    18ea:	7c 81       	ldd	r23, Y+4	; 0x04
    18ec:	80 e8       	ldi	r24, 0x80	; 128
    18ee:	b1 db       	rcall	.-2206   	; 0x1052 <TWI_send_float>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <USART_DecodeValueFIFO+0x98>
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <USART_DecodeValueFIFO+0x98>
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	ff 90       	pop	r15
    190c:	ef 90       	pop	r14
    190e:	08 95       	ret

00001910 <USART_DecodeReadyFIFO>:
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	80 91 11 01 	lds	r24, 0x0111
    1918:	90 91 12 01 	lds	r25, 0x0112
    191c:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    1920:	88 23       	and	r24, r24
    1922:	31 f0       	breq	.+12     	; 0x1930 <USART_DecodeReadyFIFO+0x20>
    1924:	6a e4       	ldi	r22, 0x4A	; 74
    1926:	72 e1       	ldi	r23, 0x12	; 18
    1928:	80 e4       	ldi	r24, 0x40	; 64
    192a:	0f db       	rcall	.-2530   	; 0xf4a <TWI_send_string>
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	08 95       	ret
    1930:	80 91 00 00 	lds	r24, 0x0000
    1934:	81 11       	cpse	r24, r1
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <USART_DecodeReadyFIFO+0x32>
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 3b 13 	sts	0x133B, r24
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	08 95       	ret
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	08 95       	ret

00001946 <USART_ready>:
    1946:	80 91 3b 13 	lds	r24, 0x133B
    194a:	88 23       	and	r24, r24
    194c:	21 f0       	breq	.+8      	; 0x1956 <USART_ready+0x10>
    194e:	10 92 3b 13 	sts	0x133B, r1
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	08 95       	ret
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	08 95       	ret

0000195a <USART_DecodeRxFIFO>:
    195a:	1c c0       	rjmp	.+56     	; 0x1994 <USART_DecodeRxFIFO+0x3a>
    195c:	80 91 00 00 	lds	r24, 0x0000
    1960:	8d 34       	cpi	r24, 0x4D	; 77
    1962:	49 f0       	breq	.+18     	; 0x1976 <USART_DecodeRxFIFO+0x1c>
    1964:	18 f4       	brcc	.+6      	; 0x196c <USART_DecodeRxFIFO+0x12>
    1966:	83 34       	cpi	r24, 0x43	; 67
    1968:	a9 f4       	brne	.+42     	; 0x1994 <USART_DecodeRxFIFO+0x3a>
    196a:	09 c0       	rjmp	.+18     	; 0x197e <USART_DecodeRxFIFO+0x24>
    196c:	82 35       	cpi	r24, 0x52	; 82
    196e:	79 f0       	breq	.+30     	; 0x198e <USART_DecodeRxFIFO+0x34>
    1970:	86 35       	cpi	r24, 0x56	; 86
    1972:	81 f4       	brne	.+32     	; 0x1994 <USART_DecodeRxFIFO+0x3a>
    1974:	08 c0       	rjmp	.+16     	; 0x1986 <USART_DecodeRxFIFO+0x2c>
    1976:	a4 de       	rcall	.-696    	; 0x16c0 <USART_DecodeMessageRxFIFO>
    1978:	88 23       	and	r24, r24
    197a:	61 f0       	breq	.+24     	; 0x1994 <USART_DecodeRxFIFO+0x3a>
    197c:	08 95       	ret
    197e:	17 df       	rcall	.-466    	; 0x17ae <USART_DecodeCommandRxFIFO>
    1980:	88 23       	and	r24, r24
    1982:	41 f0       	breq	.+16     	; 0x1994 <USART_DecodeRxFIFO+0x3a>
    1984:	08 95       	ret
    1986:	6d df       	rcall	.-294    	; 0x1862 <USART_DecodeValueFIFO>
    1988:	88 23       	and	r24, r24
    198a:	21 f0       	breq	.+8      	; 0x1994 <USART_DecodeRxFIFO+0x3a>
    198c:	08 95       	ret
    198e:	c0 df       	rcall	.-128    	; 0x1910 <USART_DecodeReadyFIFO>
    1990:	81 11       	cpse	r24, r1
    1992:	0a c0       	rjmp	.+20     	; 0x19a8 <USART_DecodeRxFIFO+0x4e>
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	80 91 11 01 	lds	r24, 0x0111
    199c:	90 91 12 01 	lds	r25, 0x0112
    19a0:	0e 94 3b 02 	call	0x476	; 0x476 <FifoRead>
    19a4:	88 23       	and	r24, r24
    19a6:	d1 f2       	breq	.-76     	; 0x195c <USART_DecodeRxFIFO+0x2>
    19a8:	08 95       	ret

000019aa <__vector_20>:
}


ISR (USART0_RX_vect)
{
    19aa:	1f 92       	push	r1
    19ac:	0f 92       	push	r0
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	0f 92       	push	r0
    19b2:	11 24       	eor	r1, r1
    19b4:	0b b6       	in	r0, 0x3b	; 59
    19b6:	0f 92       	push	r0
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	2f 93       	push	r18
    19c2:	3f 93       	push	r19
    19c4:	4f 93       	push	r20
    19c6:	5f 93       	push	r21
    19c8:	6f 93       	push	r22
    19ca:	7f 93       	push	r23
    19cc:	8f 93       	push	r24
    19ce:	9f 93       	push	r25
    19d0:	af 93       	push	r26
    19d2:	bf 93       	push	r27
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	ef 93       	push	r30
    19da:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    19dc:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    19e0:	2e 37       	cpi	r18, 0x7E	; 126
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <__vector_20+0x3c>
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    19e6:	80 91 3e 13 	lds	r24, 0x133E
    19ea:	90 91 3f 13 	lds	r25, 0x133F
    19ee:	84 30       	cpi	r24, 0x04	; 4
    19f0:	91 05       	cpc	r25, r1
    19f2:	40 f4       	brcc	.+16     	; 0x1a04 <__vector_20+0x5a>
    19f4:	20 91 9f 14 	lds	r18, 0x149F
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	2c 5f       	subi	r18, 0xFC	; 252
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
    19fe:	82 17       	cp	r24, r18
    1a00:	93 07       	cpc	r25, r19
    1a02:	59 f5       	brne	.+86     	; 0x1a5a <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1a04:	80 91 3c 13 	lds	r24, 0x133C
    1a08:	90 91 3d 13 	lds	r25, 0x133D
    1a0c:	89 2b       	or	r24, r25
    1a0e:	21 f0       	breq	.+8      	; 0x1a18 <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1a10:	10 92 3d 13 	sts	0x133D, r1
    1a14:	10 92 3c 13 	sts	0x133C, r1
    1a18:	0e e9       	ldi	r16, 0x9E	; 158
    1a1a:	14 e1       	ldi	r17, 0x14	; 20
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1a1c:	c0 e0       	ldi	r28, 0x00	; 0
    1a1e:	d0 e0       	ldi	r29, 0x00	; 0
    1a20:	0f 2e       	mov	r0, r31
    1a22:	ff e9       	ldi	r31, 0x9F	; 159
    1a24:	ef 2e       	mov	r14, r31
    1a26:	f4 e1       	ldi	r31, 0x14	; 20
    1a28:	ff 2e       	mov	r15, r31
    1a2a:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	61 91       	ld	r22, Z+
    1a30:	8f 01       	movw	r16, r30
    1a32:	80 91 11 01 	lds	r24, 0x0111
    1a36:	90 91 12 01 	lds	r25, 0x0112
    1a3a:	0e 94 1b 02 	call	0x436	; 0x436 <FifoWrite>
    1a3e:	88 23       	and	r24, r24
    1a40:	21 f0       	breq	.+8      	; 0x1a4a <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1a42:	66 e2       	ldi	r22, 0x26	; 38
    1a44:	73 e1       	ldi	r23, 0x13	; 19
    1a46:	80 e4       	ldi	r24, 0x40	; 64
    1a48:	80 da       	rcall	.-2816   	; 0xf4a <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1a4a:	21 96       	adiw	r28, 0x01	; 1
    1a4c:	f7 01       	movw	r30, r14
    1a4e:	80 81       	ld	r24, Z
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 96       	adiw	r24, 0x02	; 2
    1a54:	c8 17       	cp	r28, r24
    1a56:	d9 07       	cpc	r29, r25
    1a58:	4c f3       	brlt	.-46     	; 0x1a2c <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1a5a:	10 92 3f 13 	sts	0x133F, r1
    1a5e:	10 92 3e 13 	sts	0x133E, r1
    1a62:	16 c0       	rjmp	.+44     	; 0x1a90 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1a64:	2d 37       	cpi	r18, 0x7D	; 125
    1a66:	39 f4       	brne	.+14     	; 0x1a76 <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	90 93 3d 13 	sts	0x133D, r25
    1a70:	80 93 3c 13 	sts	0x133C, r24
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1a76:	80 91 3e 13 	lds	r24, 0x133E
    1a7a:	90 91 3f 13 	lds	r25, 0x133F
    1a7e:	fc 01       	movw	r30, r24
    1a80:	e2 56       	subi	r30, 0x62	; 98
    1a82:	fb 4e       	sbci	r31, 0xEB	; 235
    1a84:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	90 93 3f 13 	sts	0x133F, r25
    1a8c:	80 93 3e 13 	sts	0x133E, r24
	}
	
	
}
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	bf 91       	pop	r27
    1a9a:	af 91       	pop	r26
    1a9c:	9f 91       	pop	r25
    1a9e:	8f 91       	pop	r24
    1aa0:	7f 91       	pop	r23
    1aa2:	6f 91       	pop	r22
    1aa4:	5f 91       	pop	r21
    1aa6:	4f 91       	pop	r20
    1aa8:	3f 91       	pop	r19
    1aaa:	2f 91       	pop	r18
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	0f 90       	pop	r0
    1ab6:	0b be       	out	0x3b, r0	; 59
    1ab8:	0f 90       	pop	r0
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	0f 90       	pop	r0
    1abe:	1f 90       	pop	r1
    1ac0:	18 95       	reti

00001ac2 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1ac2:	80 93 a3 16 	sts	0x16A3, r24
	gTxPayload[1] = rotation;
    1ac6:	60 93 a4 16 	sts	0x16A4, r22
	gTxPayload[2] = speed;
    1aca:	40 93 a5 16 	sts	0x16A5, r20
	
	
	USART_SendPacket('C', 3);
    1ace:	63 e0       	ldi	r22, 0x03	; 3
    1ad0:	83 e4       	ldi	r24, 0x43	; 67
    1ad2:	7e cd       	rjmp	.-1284   	; 0x15d0 <USART_SendPacket>

00001ad4 <__subsf3>:
    1ad4:	50 58       	subi	r21, 0x80	; 128

00001ad6 <__addsf3>:
    1ad6:	bb 27       	eor	r27, r27
    1ad8:	aa 27       	eor	r26, r26
    1ada:	0e d0       	rcall	.+28     	; 0x1af8 <__addsf3x>
    1adc:	ed c1       	rjmp	.+986    	; 0x1eb8 <__fp_round>
    1ade:	b6 d1       	rcall	.+876    	; 0x1e4c <__fp_pscA>
    1ae0:	30 f0       	brcs	.+12     	; 0x1aee <__addsf3+0x18>
    1ae2:	bb d1       	rcall	.+886    	; 0x1e5a <__fp_pscB>
    1ae4:	20 f0       	brcs	.+8      	; 0x1aee <__addsf3+0x18>
    1ae6:	31 f4       	brne	.+12     	; 0x1af4 <__addsf3+0x1e>
    1ae8:	9f 3f       	cpi	r25, 0xFF	; 255
    1aea:	11 f4       	brne	.+4      	; 0x1af0 <__addsf3+0x1a>
    1aec:	1e f4       	brtc	.+6      	; 0x1af4 <__addsf3+0x1e>
    1aee:	86 c1       	rjmp	.+780    	; 0x1dfc <__fp_nan>
    1af0:	0e f4       	brtc	.+2      	; 0x1af4 <__addsf3+0x1e>
    1af2:	e0 95       	com	r30
    1af4:	e7 fb       	bst	r30, 7
    1af6:	7c c1       	rjmp	.+760    	; 0x1df0 <__fp_inf>

00001af8 <__addsf3x>:
    1af8:	e9 2f       	mov	r30, r25
    1afa:	00 d2       	rcall	.+1024   	; 0x1efc <__fp_split3>
    1afc:	80 f3       	brcs	.-32     	; 0x1ade <__addsf3+0x8>
    1afe:	ba 17       	cp	r27, r26
    1b00:	62 07       	cpc	r22, r18
    1b02:	73 07       	cpc	r23, r19
    1b04:	84 07       	cpc	r24, r20
    1b06:	95 07       	cpc	r25, r21
    1b08:	18 f0       	brcs	.+6      	; 0x1b10 <__addsf3x+0x18>
    1b0a:	71 f4       	brne	.+28     	; 0x1b28 <__addsf3x+0x30>
    1b0c:	9e f5       	brtc	.+102    	; 0x1b74 <__addsf3x+0x7c>
    1b0e:	18 c2       	rjmp	.+1072   	; 0x1f40 <__fp_zero>
    1b10:	0e f4       	brtc	.+2      	; 0x1b14 <__addsf3x+0x1c>
    1b12:	e0 95       	com	r30
    1b14:	0b 2e       	mov	r0, r27
    1b16:	ba 2f       	mov	r27, r26
    1b18:	a0 2d       	mov	r26, r0
    1b1a:	0b 01       	movw	r0, r22
    1b1c:	b9 01       	movw	r22, r18
    1b1e:	90 01       	movw	r18, r0
    1b20:	0c 01       	movw	r0, r24
    1b22:	ca 01       	movw	r24, r20
    1b24:	a0 01       	movw	r20, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	ff 27       	eor	r31, r31
    1b2a:	59 1b       	sub	r21, r25
    1b2c:	99 f0       	breq	.+38     	; 0x1b54 <__addsf3x+0x5c>
    1b2e:	59 3f       	cpi	r21, 0xF9	; 249
    1b30:	50 f4       	brcc	.+20     	; 0x1b46 <__addsf3x+0x4e>
    1b32:	50 3e       	cpi	r21, 0xE0	; 224
    1b34:	68 f1       	brcs	.+90     	; 0x1b90 <__addsf3x+0x98>
    1b36:	1a 16       	cp	r1, r26
    1b38:	f0 40       	sbci	r31, 0x00	; 0
    1b3a:	a2 2f       	mov	r26, r18
    1b3c:	23 2f       	mov	r18, r19
    1b3e:	34 2f       	mov	r19, r20
    1b40:	44 27       	eor	r20, r20
    1b42:	58 5f       	subi	r21, 0xF8	; 248
    1b44:	f3 cf       	rjmp	.-26     	; 0x1b2c <__addsf3x+0x34>
    1b46:	46 95       	lsr	r20
    1b48:	37 95       	ror	r19
    1b4a:	27 95       	ror	r18
    1b4c:	a7 95       	ror	r26
    1b4e:	f0 40       	sbci	r31, 0x00	; 0
    1b50:	53 95       	inc	r21
    1b52:	c9 f7       	brne	.-14     	; 0x1b46 <__addsf3x+0x4e>
    1b54:	7e f4       	brtc	.+30     	; 0x1b74 <__addsf3x+0x7c>
    1b56:	1f 16       	cp	r1, r31
    1b58:	ba 0b       	sbc	r27, r26
    1b5a:	62 0b       	sbc	r22, r18
    1b5c:	73 0b       	sbc	r23, r19
    1b5e:	84 0b       	sbc	r24, r20
    1b60:	ba f0       	brmi	.+46     	; 0x1b90 <__addsf3x+0x98>
    1b62:	91 50       	subi	r25, 0x01	; 1
    1b64:	a1 f0       	breq	.+40     	; 0x1b8e <__addsf3x+0x96>
    1b66:	ff 0f       	add	r31, r31
    1b68:	bb 1f       	adc	r27, r27
    1b6a:	66 1f       	adc	r22, r22
    1b6c:	77 1f       	adc	r23, r23
    1b6e:	88 1f       	adc	r24, r24
    1b70:	c2 f7       	brpl	.-16     	; 0x1b62 <__addsf3x+0x6a>
    1b72:	0e c0       	rjmp	.+28     	; 0x1b90 <__addsf3x+0x98>
    1b74:	ba 0f       	add	r27, r26
    1b76:	62 1f       	adc	r22, r18
    1b78:	73 1f       	adc	r23, r19
    1b7a:	84 1f       	adc	r24, r20
    1b7c:	48 f4       	brcc	.+18     	; 0x1b90 <__addsf3x+0x98>
    1b7e:	87 95       	ror	r24
    1b80:	77 95       	ror	r23
    1b82:	67 95       	ror	r22
    1b84:	b7 95       	ror	r27
    1b86:	f7 95       	ror	r31
    1b88:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <__addsf3x+0x96>
    1b8c:	b3 cf       	rjmp	.-154    	; 0x1af4 <__addsf3+0x1e>
    1b8e:	93 95       	inc	r25
    1b90:	88 0f       	add	r24, r24
    1b92:	08 f0       	brcs	.+2      	; 0x1b96 <__addsf3x+0x9e>
    1b94:	99 27       	eor	r25, r25
    1b96:	ee 0f       	add	r30, r30
    1b98:	97 95       	ror	r25
    1b9a:	87 95       	ror	r24
    1b9c:	08 95       	ret

00001b9e <atan>:
    1b9e:	df 93       	push	r29
    1ba0:	dd 27       	eor	r29, r29
    1ba2:	b9 2f       	mov	r27, r25
    1ba4:	bf 77       	andi	r27, 0x7F	; 127
    1ba6:	40 e8       	ldi	r20, 0x80	; 128
    1ba8:	5f e3       	ldi	r21, 0x3F	; 63
    1baa:	16 16       	cp	r1, r22
    1bac:	17 06       	cpc	r1, r23
    1bae:	48 07       	cpc	r20, r24
    1bb0:	5b 07       	cpc	r21, r27
    1bb2:	10 f4       	brcc	.+4      	; 0x1bb8 <atan+0x1a>
    1bb4:	d9 2f       	mov	r29, r25
    1bb6:	cf d1       	rcall	.+926    	; 0x1f56 <inverse>
    1bb8:	9f 93       	push	r25
    1bba:	8f 93       	push	r24
    1bbc:	7f 93       	push	r23
    1bbe:	6f 93       	push	r22
    1bc0:	34 d2       	rcall	.+1128   	; 0x202a <square>
    1bc2:	ec e8       	ldi	r30, 0x8C	; 140
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	1d d1       	rcall	.+570    	; 0x1e02 <__fp_powser>
    1bc8:	77 d1       	rcall	.+750    	; 0x1eb8 <__fp_round>
    1bca:	2f 91       	pop	r18
    1bcc:	3f 91       	pop	r19
    1bce:	4f 91       	pop	r20
    1bd0:	5f 91       	pop	r21
    1bd2:	d4 d1       	rcall	.+936    	; 0x1f7c <__mulsf3x>
    1bd4:	dd 23       	and	r29, r29
    1bd6:	49 f0       	breq	.+18     	; 0x1bea <atan+0x4c>
    1bd8:	90 58       	subi	r25, 0x80	; 128
    1bda:	a2 ea       	ldi	r26, 0xA2	; 162
    1bdc:	2a ed       	ldi	r18, 0xDA	; 218
    1bde:	3f e0       	ldi	r19, 0x0F	; 15
    1be0:	49 ec       	ldi	r20, 0xC9	; 201
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	d0 78       	andi	r29, 0x80	; 128
    1be6:	5d 27       	eor	r21, r29
    1be8:	87 df       	rcall	.-242    	; 0x1af8 <__addsf3x>
    1bea:	df 91       	pop	r29
    1bec:	65 c1       	rjmp	.+714    	; 0x1eb8 <__fp_round>

00001bee <__cmpsf2>:
    1bee:	dc d0       	rcall	.+440    	; 0x1da8 <__fp_cmp>
    1bf0:	08 f4       	brcc	.+2      	; 0x1bf4 <__cmpsf2+0x6>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	08 95       	ret

00001bf6 <cos>:
    1bf6:	39 d1       	rcall	.+626    	; 0x1e6a <__fp_rempio2>
    1bf8:	e3 95       	inc	r30
    1bfa:	6f c1       	rjmp	.+734    	; 0x1eda <__fp_sinus>

00001bfc <__divsf3>:
    1bfc:	0c d0       	rcall	.+24     	; 0x1c16 <__divsf3x>
    1bfe:	5c c1       	rjmp	.+696    	; 0x1eb8 <__fp_round>
    1c00:	2c d1       	rcall	.+600    	; 0x1e5a <__fp_pscB>
    1c02:	40 f0       	brcs	.+16     	; 0x1c14 <__divsf3+0x18>
    1c04:	23 d1       	rcall	.+582    	; 0x1e4c <__fp_pscA>
    1c06:	30 f0       	brcs	.+12     	; 0x1c14 <__divsf3+0x18>
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <__divsf3+0x16>
    1c0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c0c:	19 f0       	breq	.+6      	; 0x1c14 <__divsf3+0x18>
    1c0e:	f0 c0       	rjmp	.+480    	; 0x1df0 <__fp_inf>
    1c10:	51 11       	cpse	r21, r1
    1c12:	97 c1       	rjmp	.+814    	; 0x1f42 <__fp_szero>
    1c14:	f3 c0       	rjmp	.+486    	; 0x1dfc <__fp_nan>

00001c16 <__divsf3x>:
    1c16:	72 d1       	rcall	.+740    	; 0x1efc <__fp_split3>
    1c18:	98 f3       	brcs	.-26     	; 0x1c00 <__divsf3+0x4>

00001c1a <__divsf3_pse>:
    1c1a:	99 23       	and	r25, r25
    1c1c:	c9 f3       	breq	.-14     	; 0x1c10 <__divsf3+0x14>
    1c1e:	55 23       	and	r21, r21
    1c20:	b1 f3       	breq	.-20     	; 0x1c0e <__divsf3+0x12>
    1c22:	95 1b       	sub	r25, r21
    1c24:	55 0b       	sbc	r21, r21
    1c26:	bb 27       	eor	r27, r27
    1c28:	aa 27       	eor	r26, r26
    1c2a:	62 17       	cp	r22, r18
    1c2c:	73 07       	cpc	r23, r19
    1c2e:	84 07       	cpc	r24, r20
    1c30:	38 f0       	brcs	.+14     	; 0x1c40 <__divsf3_pse+0x26>
    1c32:	9f 5f       	subi	r25, 0xFF	; 255
    1c34:	5f 4f       	sbci	r21, 0xFF	; 255
    1c36:	22 0f       	add	r18, r18
    1c38:	33 1f       	adc	r19, r19
    1c3a:	44 1f       	adc	r20, r20
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	a9 f3       	breq	.-22     	; 0x1c2a <__divsf3_pse+0x10>
    1c40:	33 d0       	rcall	.+102    	; 0x1ca8 <__divsf3_pse+0x8e>
    1c42:	0e 2e       	mov	r0, r30
    1c44:	3a f0       	brmi	.+14     	; 0x1c54 <__divsf3_pse+0x3a>
    1c46:	e0 e8       	ldi	r30, 0x80	; 128
    1c48:	30 d0       	rcall	.+96     	; 0x1caa <__divsf3_pse+0x90>
    1c4a:	91 50       	subi	r25, 0x01	; 1
    1c4c:	50 40       	sbci	r21, 0x00	; 0
    1c4e:	e6 95       	lsr	r30
    1c50:	00 1c       	adc	r0, r0
    1c52:	ca f7       	brpl	.-14     	; 0x1c46 <__divsf3_pse+0x2c>
    1c54:	29 d0       	rcall	.+82     	; 0x1ca8 <__divsf3_pse+0x8e>
    1c56:	fe 2f       	mov	r31, r30
    1c58:	27 d0       	rcall	.+78     	; 0x1ca8 <__divsf3_pse+0x8e>
    1c5a:	66 0f       	add	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	88 1f       	adc	r24, r24
    1c60:	bb 1f       	adc	r27, r27
    1c62:	26 17       	cp	r18, r22
    1c64:	37 07       	cpc	r19, r23
    1c66:	48 07       	cpc	r20, r24
    1c68:	ab 07       	cpc	r26, r27
    1c6a:	b0 e8       	ldi	r27, 0x80	; 128
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <__divsf3_pse+0x56>
    1c6e:	bb 0b       	sbc	r27, r27
    1c70:	80 2d       	mov	r24, r0
    1c72:	bf 01       	movw	r22, r30
    1c74:	ff 27       	eor	r31, r31
    1c76:	93 58       	subi	r25, 0x83	; 131
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7a:	2a f0       	brmi	.+10     	; 0x1c86 <__divsf3_pse+0x6c>
    1c7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c7e:	51 05       	cpc	r21, r1
    1c80:	68 f0       	brcs	.+26     	; 0x1c9c <__divsf3_pse+0x82>
    1c82:	b6 c0       	rjmp	.+364    	; 0x1df0 <__fp_inf>
    1c84:	5e c1       	rjmp	.+700    	; 0x1f42 <__fp_szero>
    1c86:	5f 3f       	cpi	r21, 0xFF	; 255
    1c88:	ec f3       	brlt	.-6      	; 0x1c84 <__divsf3_pse+0x6a>
    1c8a:	98 3e       	cpi	r25, 0xE8	; 232
    1c8c:	dc f3       	brlt	.-10     	; 0x1c84 <__divsf3_pse+0x6a>
    1c8e:	86 95       	lsr	r24
    1c90:	77 95       	ror	r23
    1c92:	67 95       	ror	r22
    1c94:	b7 95       	ror	r27
    1c96:	f7 95       	ror	r31
    1c98:	9f 5f       	subi	r25, 0xFF	; 255
    1c9a:	c9 f7       	brne	.-14     	; 0x1c8e <__divsf3_pse+0x74>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	91 1d       	adc	r25, r1
    1ca0:	96 95       	lsr	r25
    1ca2:	87 95       	ror	r24
    1ca4:	97 f9       	bld	r25, 7
    1ca6:	08 95       	ret
    1ca8:	e1 e0       	ldi	r30, 0x01	; 1
    1caa:	66 0f       	add	r22, r22
    1cac:	77 1f       	adc	r23, r23
    1cae:	88 1f       	adc	r24, r24
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	62 17       	cp	r22, r18
    1cb4:	73 07       	cpc	r23, r19
    1cb6:	84 07       	cpc	r24, r20
    1cb8:	ba 07       	cpc	r27, r26
    1cba:	20 f0       	brcs	.+8      	; 0x1cc4 <__divsf3_pse+0xaa>
    1cbc:	62 1b       	sub	r22, r18
    1cbe:	73 0b       	sbc	r23, r19
    1cc0:	84 0b       	sbc	r24, r20
    1cc2:	ba 0b       	sbc	r27, r26
    1cc4:	ee 1f       	adc	r30, r30
    1cc6:	88 f7       	brcc	.-30     	; 0x1caa <__divsf3_pse+0x90>
    1cc8:	e0 95       	com	r30
    1cca:	08 95       	ret

00001ccc <__fixsfsi>:
    1ccc:	04 d0       	rcall	.+8      	; 0x1cd6 <__fixunssfsi>
    1cce:	68 94       	set
    1cd0:	b1 11       	cpse	r27, r1
    1cd2:	37 c1       	rjmp	.+622    	; 0x1f42 <__fp_szero>
    1cd4:	08 95       	ret

00001cd6 <__fixunssfsi>:
    1cd6:	1a d1       	rcall	.+564    	; 0x1f0c <__fp_splitA>
    1cd8:	88 f0       	brcs	.+34     	; 0x1cfc <__fixunssfsi+0x26>
    1cda:	9f 57       	subi	r25, 0x7F	; 127
    1cdc:	90 f0       	brcs	.+36     	; 0x1d02 <__fixunssfsi+0x2c>
    1cde:	b9 2f       	mov	r27, r25
    1ce0:	99 27       	eor	r25, r25
    1ce2:	b7 51       	subi	r27, 0x17	; 23
    1ce4:	a0 f0       	brcs	.+40     	; 0x1d0e <__fixunssfsi+0x38>
    1ce6:	d1 f0       	breq	.+52     	; 0x1d1c <__fixunssfsi+0x46>
    1ce8:	66 0f       	add	r22, r22
    1cea:	77 1f       	adc	r23, r23
    1cec:	88 1f       	adc	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	1a f0       	brmi	.+6      	; 0x1cf8 <__fixunssfsi+0x22>
    1cf2:	ba 95       	dec	r27
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__fixunssfsi+0x12>
    1cf6:	12 c0       	rjmp	.+36     	; 0x1d1c <__fixunssfsi+0x46>
    1cf8:	b1 30       	cpi	r27, 0x01	; 1
    1cfa:	81 f0       	breq	.+32     	; 0x1d1c <__fixunssfsi+0x46>
    1cfc:	21 d1       	rcall	.+578    	; 0x1f40 <__fp_zero>
    1cfe:	b1 e0       	ldi	r27, 0x01	; 1
    1d00:	08 95       	ret
    1d02:	1e c1       	rjmp	.+572    	; 0x1f40 <__fp_zero>
    1d04:	67 2f       	mov	r22, r23
    1d06:	78 2f       	mov	r23, r24
    1d08:	88 27       	eor	r24, r24
    1d0a:	b8 5f       	subi	r27, 0xF8	; 248
    1d0c:	39 f0       	breq	.+14     	; 0x1d1c <__fixunssfsi+0x46>
    1d0e:	b9 3f       	cpi	r27, 0xF9	; 249
    1d10:	cc f3       	brlt	.-14     	; 0x1d04 <__fixunssfsi+0x2e>
    1d12:	86 95       	lsr	r24
    1d14:	77 95       	ror	r23
    1d16:	67 95       	ror	r22
    1d18:	b3 95       	inc	r27
    1d1a:	d9 f7       	brne	.-10     	; 0x1d12 <__fixunssfsi+0x3c>
    1d1c:	3e f4       	brtc	.+14     	; 0x1d2c <__fixunssfsi+0x56>
    1d1e:	90 95       	com	r25
    1d20:	80 95       	com	r24
    1d22:	70 95       	com	r23
    1d24:	61 95       	neg	r22
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2c:	08 95       	ret

00001d2e <__floatunsisf>:
    1d2e:	e8 94       	clt
    1d30:	09 c0       	rjmp	.+18     	; 0x1d44 <__floatsisf+0x12>

00001d32 <__floatsisf>:
    1d32:	97 fb       	bst	r25, 7
    1d34:	3e f4       	brtc	.+14     	; 0x1d44 <__floatsisf+0x12>
    1d36:	90 95       	com	r25
    1d38:	80 95       	com	r24
    1d3a:	70 95       	com	r23
    1d3c:	61 95       	neg	r22
    1d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d40:	8f 4f       	sbci	r24, 0xFF	; 255
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	99 23       	and	r25, r25
    1d46:	a9 f0       	breq	.+42     	; 0x1d72 <__floatsisf+0x40>
    1d48:	f9 2f       	mov	r31, r25
    1d4a:	96 e9       	ldi	r25, 0x96	; 150
    1d4c:	bb 27       	eor	r27, r27
    1d4e:	93 95       	inc	r25
    1d50:	f6 95       	lsr	r31
    1d52:	87 95       	ror	r24
    1d54:	77 95       	ror	r23
    1d56:	67 95       	ror	r22
    1d58:	b7 95       	ror	r27
    1d5a:	f1 11       	cpse	r31, r1
    1d5c:	f8 cf       	rjmp	.-16     	; 0x1d4e <__floatsisf+0x1c>
    1d5e:	fa f4       	brpl	.+62     	; 0x1d9e <__floatsisf+0x6c>
    1d60:	bb 0f       	add	r27, r27
    1d62:	11 f4       	brne	.+4      	; 0x1d68 <__floatsisf+0x36>
    1d64:	60 ff       	sbrs	r22, 0
    1d66:	1b c0       	rjmp	.+54     	; 0x1d9e <__floatsisf+0x6c>
    1d68:	6f 5f       	subi	r22, 0xFF	; 255
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	16 c0       	rjmp	.+44     	; 0x1d9e <__floatsisf+0x6c>
    1d72:	88 23       	and	r24, r24
    1d74:	11 f0       	breq	.+4      	; 0x1d7a <__floatsisf+0x48>
    1d76:	96 e9       	ldi	r25, 0x96	; 150
    1d78:	11 c0       	rjmp	.+34     	; 0x1d9c <__floatsisf+0x6a>
    1d7a:	77 23       	and	r23, r23
    1d7c:	21 f0       	breq	.+8      	; 0x1d86 <__floatsisf+0x54>
    1d7e:	9e e8       	ldi	r25, 0x8E	; 142
    1d80:	87 2f       	mov	r24, r23
    1d82:	76 2f       	mov	r23, r22
    1d84:	05 c0       	rjmp	.+10     	; 0x1d90 <__floatsisf+0x5e>
    1d86:	66 23       	and	r22, r22
    1d88:	71 f0       	breq	.+28     	; 0x1da6 <__floatsisf+0x74>
    1d8a:	96 e8       	ldi	r25, 0x86	; 134
    1d8c:	86 2f       	mov	r24, r22
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	2a f0       	brmi	.+10     	; 0x1d9e <__floatsisf+0x6c>
    1d94:	9a 95       	dec	r25
    1d96:	66 0f       	add	r22, r22
    1d98:	77 1f       	adc	r23, r23
    1d9a:	88 1f       	adc	r24, r24
    1d9c:	da f7       	brpl	.-10     	; 0x1d94 <__floatsisf+0x62>
    1d9e:	88 0f       	add	r24, r24
    1da0:	96 95       	lsr	r25
    1da2:	87 95       	ror	r24
    1da4:	97 f9       	bld	r25, 7
    1da6:	08 95       	ret

00001da8 <__fp_cmp>:
    1da8:	99 0f       	add	r25, r25
    1daa:	00 08       	sbc	r0, r0
    1dac:	55 0f       	add	r21, r21
    1dae:	aa 0b       	sbc	r26, r26
    1db0:	e0 e8       	ldi	r30, 0x80	; 128
    1db2:	fe ef       	ldi	r31, 0xFE	; 254
    1db4:	16 16       	cp	r1, r22
    1db6:	17 06       	cpc	r1, r23
    1db8:	e8 07       	cpc	r30, r24
    1dba:	f9 07       	cpc	r31, r25
    1dbc:	c0 f0       	brcs	.+48     	; 0x1dee <__fp_cmp+0x46>
    1dbe:	12 16       	cp	r1, r18
    1dc0:	13 06       	cpc	r1, r19
    1dc2:	e4 07       	cpc	r30, r20
    1dc4:	f5 07       	cpc	r31, r21
    1dc6:	98 f0       	brcs	.+38     	; 0x1dee <__fp_cmp+0x46>
    1dc8:	62 1b       	sub	r22, r18
    1dca:	73 0b       	sbc	r23, r19
    1dcc:	84 0b       	sbc	r24, r20
    1dce:	95 0b       	sbc	r25, r21
    1dd0:	39 f4       	brne	.+14     	; 0x1de0 <__fp_cmp+0x38>
    1dd2:	0a 26       	eor	r0, r26
    1dd4:	61 f0       	breq	.+24     	; 0x1dee <__fp_cmp+0x46>
    1dd6:	23 2b       	or	r18, r19
    1dd8:	24 2b       	or	r18, r20
    1dda:	25 2b       	or	r18, r21
    1ddc:	21 f4       	brne	.+8      	; 0x1de6 <__fp_cmp+0x3e>
    1dde:	08 95       	ret
    1de0:	0a 26       	eor	r0, r26
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <__fp_cmp+0x3e>
    1de4:	a1 40       	sbci	r26, 0x01	; 1
    1de6:	a6 95       	lsr	r26
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	81 1d       	adc	r24, r1
    1dec:	81 1d       	adc	r24, r1
    1dee:	08 95       	ret

00001df0 <__fp_inf>:
    1df0:	97 f9       	bld	r25, 7
    1df2:	9f 67       	ori	r25, 0x7F	; 127
    1df4:	80 e8       	ldi	r24, 0x80	; 128
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	08 95       	ret

00001dfc <__fp_nan>:
    1dfc:	9f ef       	ldi	r25, 0xFF	; 255
    1dfe:	80 ec       	ldi	r24, 0xC0	; 192
    1e00:	08 95       	ret

00001e02 <__fp_powser>:
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	1f 93       	push	r17
    1e08:	0f 93       	push	r16
    1e0a:	ff 92       	push	r15
    1e0c:	ef 92       	push	r14
    1e0e:	df 92       	push	r13
    1e10:	7b 01       	movw	r14, r22
    1e12:	8c 01       	movw	r16, r24
    1e14:	68 94       	set
    1e16:	05 c0       	rjmp	.+10     	; 0x1e22 <__fp_powser+0x20>
    1e18:	da 2e       	mov	r13, r26
    1e1a:	ef 01       	movw	r28, r30
    1e1c:	af d0       	rcall	.+350    	; 0x1f7c <__mulsf3x>
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e8 94       	clt
    1e22:	a5 91       	lpm	r26, Z+
    1e24:	25 91       	lpm	r18, Z+
    1e26:	35 91       	lpm	r19, Z+
    1e28:	45 91       	lpm	r20, Z+
    1e2a:	55 91       	lpm	r21, Z+
    1e2c:	ae f3       	brts	.-22     	; 0x1e18 <__fp_powser+0x16>
    1e2e:	ef 01       	movw	r28, r30
    1e30:	63 de       	rcall	.-826    	; 0x1af8 <__addsf3x>
    1e32:	fe 01       	movw	r30, r28
    1e34:	97 01       	movw	r18, r14
    1e36:	a8 01       	movw	r20, r16
    1e38:	da 94       	dec	r13
    1e3a:	79 f7       	brne	.-34     	; 0x1e1a <__fp_powser+0x18>
    1e3c:	df 90       	pop	r13
    1e3e:	ef 90       	pop	r14
    1e40:	ff 90       	pop	r15
    1e42:	0f 91       	pop	r16
    1e44:	1f 91       	pop	r17
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <__fp_pscA>:
    1e4c:	00 24       	eor	r0, r0
    1e4e:	0a 94       	dec	r0
    1e50:	16 16       	cp	r1, r22
    1e52:	17 06       	cpc	r1, r23
    1e54:	18 06       	cpc	r1, r24
    1e56:	09 06       	cpc	r0, r25
    1e58:	08 95       	ret

00001e5a <__fp_pscB>:
    1e5a:	00 24       	eor	r0, r0
    1e5c:	0a 94       	dec	r0
    1e5e:	12 16       	cp	r1, r18
    1e60:	13 06       	cpc	r1, r19
    1e62:	14 06       	cpc	r1, r20
    1e64:	05 06       	cpc	r0, r21
    1e66:	08 95       	ret
    1e68:	c9 cf       	rjmp	.-110    	; 0x1dfc <__fp_nan>

00001e6a <__fp_rempio2>:
    1e6a:	50 d0       	rcall	.+160    	; 0x1f0c <__fp_splitA>
    1e6c:	e8 f3       	brcs	.-6      	; 0x1e68 <__fp_pscB+0xe>
    1e6e:	e8 94       	clt
    1e70:	e0 e0       	ldi	r30, 0x00	; 0
    1e72:	bb 27       	eor	r27, r27
    1e74:	9f 57       	subi	r25, 0x7F	; 127
    1e76:	f0 f0       	brcs	.+60     	; 0x1eb4 <__fp_rempio2+0x4a>
    1e78:	2a ed       	ldi	r18, 0xDA	; 218
    1e7a:	3f e0       	ldi	r19, 0x0F	; 15
    1e7c:	49 ec       	ldi	r20, 0xC9	; 201
    1e7e:	06 c0       	rjmp	.+12     	; 0x1e8c <__fp_rempio2+0x22>
    1e80:	ee 0f       	add	r30, r30
    1e82:	bb 0f       	add	r27, r27
    1e84:	66 1f       	adc	r22, r22
    1e86:	77 1f       	adc	r23, r23
    1e88:	88 1f       	adc	r24, r24
    1e8a:	28 f0       	brcs	.+10     	; 0x1e96 <__fp_rempio2+0x2c>
    1e8c:	b2 3a       	cpi	r27, 0xA2	; 162
    1e8e:	62 07       	cpc	r22, r18
    1e90:	73 07       	cpc	r23, r19
    1e92:	84 07       	cpc	r24, r20
    1e94:	28 f0       	brcs	.+10     	; 0x1ea0 <__fp_rempio2+0x36>
    1e96:	b2 5a       	subi	r27, 0xA2	; 162
    1e98:	62 0b       	sbc	r22, r18
    1e9a:	73 0b       	sbc	r23, r19
    1e9c:	84 0b       	sbc	r24, r20
    1e9e:	e3 95       	inc	r30
    1ea0:	9a 95       	dec	r25
    1ea2:	72 f7       	brpl	.-36     	; 0x1e80 <__fp_rempio2+0x16>
    1ea4:	80 38       	cpi	r24, 0x80	; 128
    1ea6:	30 f4       	brcc	.+12     	; 0x1eb4 <__fp_rempio2+0x4a>
    1ea8:	9a 95       	dec	r25
    1eaa:	bb 0f       	add	r27, r27
    1eac:	66 1f       	adc	r22, r22
    1eae:	77 1f       	adc	r23, r23
    1eb0:	88 1f       	adc	r24, r24
    1eb2:	d2 f7       	brpl	.-12     	; 0x1ea8 <__fp_rempio2+0x3e>
    1eb4:	90 48       	sbci	r25, 0x80	; 128
    1eb6:	be c0       	rjmp	.+380    	; 0x2034 <__fp_mpack_finite>

00001eb8 <__fp_round>:
    1eb8:	09 2e       	mov	r0, r25
    1eba:	03 94       	inc	r0
    1ebc:	00 0c       	add	r0, r0
    1ebe:	11 f4       	brne	.+4      	; 0x1ec4 <__fp_round+0xc>
    1ec0:	88 23       	and	r24, r24
    1ec2:	52 f0       	brmi	.+20     	; 0x1ed8 <__fp_round+0x20>
    1ec4:	bb 0f       	add	r27, r27
    1ec6:	40 f4       	brcc	.+16     	; 0x1ed8 <__fp_round+0x20>
    1ec8:	bf 2b       	or	r27, r31
    1eca:	11 f4       	brne	.+4      	; 0x1ed0 <__fp_round+0x18>
    1ecc:	60 ff       	sbrs	r22, 0
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <__fp_round+0x20>
    1ed0:	6f 5f       	subi	r22, 0xFF	; 255
    1ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed8:	08 95       	ret

00001eda <__fp_sinus>:
    1eda:	ef 93       	push	r30
    1edc:	e0 ff       	sbrs	r30, 0
    1ede:	06 c0       	rjmp	.+12     	; 0x1eec <__fp_sinus+0x12>
    1ee0:	a2 ea       	ldi	r26, 0xA2	; 162
    1ee2:	2a ed       	ldi	r18, 0xDA	; 218
    1ee4:	3f e0       	ldi	r19, 0x0F	; 15
    1ee6:	49 ec       	ldi	r20, 0xC9	; 201
    1ee8:	5f eb       	ldi	r21, 0xBF	; 191
    1eea:	06 de       	rcall	.-1012   	; 0x1af8 <__addsf3x>
    1eec:	e5 df       	rcall	.-54     	; 0x1eb8 <__fp_round>
    1eee:	0f 90       	pop	r0
    1ef0:	03 94       	inc	r0
    1ef2:	01 fc       	sbrc	r0, 1
    1ef4:	90 58       	subi	r25, 0x80	; 128
    1ef6:	e9 eb       	ldi	r30, 0xB9	; 185
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	a8 c0       	rjmp	.+336    	; 0x204c <__fp_powsodd>

00001efc <__fp_split3>:
    1efc:	57 fd       	sbrc	r21, 7
    1efe:	90 58       	subi	r25, 0x80	; 128
    1f00:	44 0f       	add	r20, r20
    1f02:	55 1f       	adc	r21, r21
    1f04:	59 f0       	breq	.+22     	; 0x1f1c <__fp_splitA+0x10>
    1f06:	5f 3f       	cpi	r21, 0xFF	; 255
    1f08:	71 f0       	breq	.+28     	; 0x1f26 <__fp_splitA+0x1a>
    1f0a:	47 95       	ror	r20

00001f0c <__fp_splitA>:
    1f0c:	88 0f       	add	r24, r24
    1f0e:	97 fb       	bst	r25, 7
    1f10:	99 1f       	adc	r25, r25
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <__fp_splitA+0x20>
    1f14:	9f 3f       	cpi	r25, 0xFF	; 255
    1f16:	79 f0       	breq	.+30     	; 0x1f36 <__fp_splitA+0x2a>
    1f18:	87 95       	ror	r24
    1f1a:	08 95       	ret
    1f1c:	12 16       	cp	r1, r18
    1f1e:	13 06       	cpc	r1, r19
    1f20:	14 06       	cpc	r1, r20
    1f22:	55 1f       	adc	r21, r21
    1f24:	f2 cf       	rjmp	.-28     	; 0x1f0a <__fp_split3+0xe>
    1f26:	46 95       	lsr	r20
    1f28:	f1 df       	rcall	.-30     	; 0x1f0c <__fp_splitA>
    1f2a:	08 c0       	rjmp	.+16     	; 0x1f3c <__fp_splitA+0x30>
    1f2c:	16 16       	cp	r1, r22
    1f2e:	17 06       	cpc	r1, r23
    1f30:	18 06       	cpc	r1, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	f1 cf       	rjmp	.-30     	; 0x1f18 <__fp_splitA+0xc>
    1f36:	86 95       	lsr	r24
    1f38:	71 05       	cpc	r23, r1
    1f3a:	61 05       	cpc	r22, r1
    1f3c:	08 94       	sec
    1f3e:	08 95       	ret

00001f40 <__fp_zero>:
    1f40:	e8 94       	clt

00001f42 <__fp_szero>:
    1f42:	bb 27       	eor	r27, r27
    1f44:	66 27       	eor	r22, r22
    1f46:	77 27       	eor	r23, r23
    1f48:	cb 01       	movw	r24, r22
    1f4a:	97 f9       	bld	r25, 7
    1f4c:	08 95       	ret

00001f4e <__gesf2>:
    1f4e:	2c df       	rcall	.-424    	; 0x1da8 <__fp_cmp>
    1f50:	08 f4       	brcc	.+2      	; 0x1f54 <__gesf2+0x6>
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	08 95       	ret

00001f56 <inverse>:
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	80 e8       	ldi	r24, 0x80	; 128
    1f60:	9f e3       	ldi	r25, 0x3F	; 63
    1f62:	4c ce       	rjmp	.-872    	; 0x1bfc <__divsf3>

00001f64 <__mulsf3>:
    1f64:	0b d0       	rcall	.+22     	; 0x1f7c <__mulsf3x>
    1f66:	a8 cf       	rjmp	.-176    	; 0x1eb8 <__fp_round>
    1f68:	71 df       	rcall	.-286    	; 0x1e4c <__fp_pscA>
    1f6a:	28 f0       	brcs	.+10     	; 0x1f76 <__mulsf3+0x12>
    1f6c:	76 df       	rcall	.-276    	; 0x1e5a <__fp_pscB>
    1f6e:	18 f0       	brcs	.+6      	; 0x1f76 <__mulsf3+0x12>
    1f70:	95 23       	and	r25, r21
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <__mulsf3+0x12>
    1f74:	3d cf       	rjmp	.-390    	; 0x1df0 <__fp_inf>
    1f76:	42 cf       	rjmp	.-380    	; 0x1dfc <__fp_nan>
    1f78:	11 24       	eor	r1, r1
    1f7a:	e3 cf       	rjmp	.-58     	; 0x1f42 <__fp_szero>

00001f7c <__mulsf3x>:
    1f7c:	bf df       	rcall	.-130    	; 0x1efc <__fp_split3>
    1f7e:	a0 f3       	brcs	.-24     	; 0x1f68 <__mulsf3+0x4>

00001f80 <__mulsf3_pse>:
    1f80:	95 9f       	mul	r25, r21
    1f82:	d1 f3       	breq	.-12     	; 0x1f78 <__mulsf3+0x14>
    1f84:	95 0f       	add	r25, r21
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	55 1f       	adc	r21, r21
    1f8a:	62 9f       	mul	r22, r18
    1f8c:	f0 01       	movw	r30, r0
    1f8e:	72 9f       	mul	r23, r18
    1f90:	bb 27       	eor	r27, r27
    1f92:	f0 0d       	add	r31, r0
    1f94:	b1 1d       	adc	r27, r1
    1f96:	63 9f       	mul	r22, r19
    1f98:	aa 27       	eor	r26, r26
    1f9a:	f0 0d       	add	r31, r0
    1f9c:	b1 1d       	adc	r27, r1
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	64 9f       	mul	r22, r20
    1fa2:	66 27       	eor	r22, r22
    1fa4:	b0 0d       	add	r27, r0
    1fa6:	a1 1d       	adc	r26, r1
    1fa8:	66 1f       	adc	r22, r22
    1faa:	82 9f       	mul	r24, r18
    1fac:	22 27       	eor	r18, r18
    1fae:	b0 0d       	add	r27, r0
    1fb0:	a1 1d       	adc	r26, r1
    1fb2:	62 1f       	adc	r22, r18
    1fb4:	73 9f       	mul	r23, r19
    1fb6:	b0 0d       	add	r27, r0
    1fb8:	a1 1d       	adc	r26, r1
    1fba:	62 1f       	adc	r22, r18
    1fbc:	83 9f       	mul	r24, r19
    1fbe:	a0 0d       	add	r26, r0
    1fc0:	61 1d       	adc	r22, r1
    1fc2:	22 1f       	adc	r18, r18
    1fc4:	74 9f       	mul	r23, r20
    1fc6:	33 27       	eor	r19, r19
    1fc8:	a0 0d       	add	r26, r0
    1fca:	61 1d       	adc	r22, r1
    1fcc:	23 1f       	adc	r18, r19
    1fce:	84 9f       	mul	r24, r20
    1fd0:	60 0d       	add	r22, r0
    1fd2:	21 1d       	adc	r18, r1
    1fd4:	82 2f       	mov	r24, r18
    1fd6:	76 2f       	mov	r23, r22
    1fd8:	6a 2f       	mov	r22, r26
    1fda:	11 24       	eor	r1, r1
    1fdc:	9f 57       	subi	r25, 0x7F	; 127
    1fde:	50 40       	sbci	r21, 0x00	; 0
    1fe0:	8a f0       	brmi	.+34     	; 0x2004 <__mulsf3_pse+0x84>
    1fe2:	e1 f0       	breq	.+56     	; 0x201c <__mulsf3_pse+0x9c>
    1fe4:	88 23       	and	r24, r24
    1fe6:	4a f0       	brmi	.+18     	; 0x1ffa <__mulsf3_pse+0x7a>
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	bb 1f       	adc	r27, r27
    1fee:	66 1f       	adc	r22, r22
    1ff0:	77 1f       	adc	r23, r23
    1ff2:	88 1f       	adc	r24, r24
    1ff4:	91 50       	subi	r25, 0x01	; 1
    1ff6:	50 40       	sbci	r21, 0x00	; 0
    1ff8:	a9 f7       	brne	.-22     	; 0x1fe4 <__mulsf3_pse+0x64>
    1ffa:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	70 f0       	brcs	.+28     	; 0x201c <__mulsf3_pse+0x9c>
    2000:	f7 ce       	rjmp	.-530    	; 0x1df0 <__fp_inf>
    2002:	9f cf       	rjmp	.-194    	; 0x1f42 <__fp_szero>
    2004:	5f 3f       	cpi	r21, 0xFF	; 255
    2006:	ec f3       	brlt	.-6      	; 0x2002 <__mulsf3_pse+0x82>
    2008:	98 3e       	cpi	r25, 0xE8	; 232
    200a:	dc f3       	brlt	.-10     	; 0x2002 <__mulsf3_pse+0x82>
    200c:	86 95       	lsr	r24
    200e:	77 95       	ror	r23
    2010:	67 95       	ror	r22
    2012:	b7 95       	ror	r27
    2014:	f7 95       	ror	r31
    2016:	e7 95       	ror	r30
    2018:	9f 5f       	subi	r25, 0xFF	; 255
    201a:	c1 f7       	brne	.-16     	; 0x200c <__mulsf3_pse+0x8c>
    201c:	fe 2b       	or	r31, r30
    201e:	88 0f       	add	r24, r24
    2020:	91 1d       	adc	r25, r1
    2022:	96 95       	lsr	r25
    2024:	87 95       	ror	r24
    2026:	97 f9       	bld	r25, 7
    2028:	08 95       	ret

0000202a <square>:
    202a:	9b 01       	movw	r18, r22
    202c:	ac 01       	movw	r20, r24
    202e:	9a cf       	rjmp	.-204    	; 0x1f64 <__mulsf3>

00002030 <__fp_mpack>:
    2030:	9f 3f       	cpi	r25, 0xFF	; 255
    2032:	31 f0       	breq	.+12     	; 0x2040 <__fp_mpack_finite+0xc>

00002034 <__fp_mpack_finite>:
    2034:	91 50       	subi	r25, 0x01	; 1
    2036:	20 f4       	brcc	.+8      	; 0x2040 <__fp_mpack_finite+0xc>
    2038:	87 95       	ror	r24
    203a:	77 95       	ror	r23
    203c:	67 95       	ror	r22
    203e:	b7 95       	ror	r27
    2040:	88 0f       	add	r24, r24
    2042:	91 1d       	adc	r25, r1
    2044:	96 95       	lsr	r25
    2046:	87 95       	ror	r24
    2048:	97 f9       	bld	r25, 7
    204a:	08 95       	ret

0000204c <__fp_powsodd>:
    204c:	9f 93       	push	r25
    204e:	8f 93       	push	r24
    2050:	7f 93       	push	r23
    2052:	6f 93       	push	r22
    2054:	ff 93       	push	r31
    2056:	ef 93       	push	r30
    2058:	9b 01       	movw	r18, r22
    205a:	ac 01       	movw	r20, r24
    205c:	83 df       	rcall	.-250    	; 0x1f64 <__mulsf3>
    205e:	ef 91       	pop	r30
    2060:	ff 91       	pop	r31
    2062:	cf de       	rcall	.-610    	; 0x1e02 <__fp_powser>
    2064:	2f 91       	pop	r18
    2066:	3f 91       	pop	r19
    2068:	4f 91       	pop	r20
    206a:	5f 91       	pop	r21
    206c:	7b cf       	rjmp	.-266    	; 0x1f64 <__mulsf3>

0000206e <_exit>:
    206e:	f8 94       	cli

00002070 <__stop_program>:
    2070:	ff cf       	rjmp	.-2      	; 0x2070 <__stop_program>
