
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000012d8  00800100  00002466  000024fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000684  008013d8  008013d8  000037d2  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  000037d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  0000663c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007384  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000438  00000000  00000000  000073b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003f92  00000000  00000000  000077eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f93  00000000  00000000  0000b77d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000274d  00000000  00000000  0000c710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ccc  00000000  00000000  0000ee60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000dcc  00000000  00000000  0000fb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000026ac  00000000  00000000  000108f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000490  00000000  00000000  00012fa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	33 c6       	rjmp	.+3174   	; 0xc6c <__vector_1>
       6:	00 00       	nop
       8:	5b c6       	rjmp	.+3254   	; 0xcc0 <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	1f c7       	rjmp	.+3646   	; 0xe50 <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	c0 c6       	rjmp	.+3456   	; 0xdb6 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c6       	rjmp	.+3408   	; 0xdd2 <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e6 e6       	ldi	r30, 0x66	; 102
      ec:	f4 e2       	ldi	r31, 0x24	; 36
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a8 3d       	cpi	r26, 0xD8	; 216
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	2a e1       	ldi	r18, 0x1A	; 26
     100:	a8 ed       	ldi	r26, 0xD8	; 216
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	ac 35       	cpi	r26, 0x5C	; 92
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	02 d6       	rcall	.+3076   	; 0xd14 <main>
     110:	0c 94 31 12 	jmp	0x2462	; 0x2462 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
	}
}

void turn_around()
{
	if(gStatus)
     116:	80 91 00 01 	lds	r24, 0x0100
     11a:	88 23       	and	r24, r24
     11c:	29 f0       	breq	.+10     	; 0x128 <turn_around+0x12>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     11e:	6c e1       	ldi	r22, 0x1C	; 28
     120:	71 e1       	ldi	r23, 0x11	; 17
     122:	80 e8       	ldi	r24, 0x80	; 128
     124:	0e 94 9d 08 	call	0x113a	; 0x113a <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(180, 0);
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	84 eb       	ldi	r24, 0xB4	; 180
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <USART_SendTurn>
	while(USART_turn_done() == 0)
     132:	08 c0       	rjmp	.+16     	; 0x144 <turn_around+0x2e>
	{
		USART_DecodeRxFIFO();
     134:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <USART_DecodeRxFIFO>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	8f e3       	ldi	r24, 0x3F	; 63
     13a:	9c e9       	ldi	r25, 0x9C	; 156
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <turn_around+0x26>
     140:	00 c0       	rjmp	.+0      	; 0x142 <turn_around+0x2c>
     142:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(180, 0);
	while(USART_turn_done() == 0)
     144:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <USART_turn_done>
     148:	88 23       	and	r24, r24
     14a:	a1 f3       	breq	.-24     	; 0x134 <turn_around+0x1e>
	{
		USART_DecodeRxFIFO();
		_delay_ms(10);
	}
	
	if(gStatus)
     14c:	80 91 00 01 	lds	r24, 0x0100
     150:	88 23       	and	r24, r24
     152:	21 f0       	breq	.+8      	; 0x15c <turn_around+0x46>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     154:	65 e3       	ldi	r22, 0x35	; 53
     156:	71 e1       	ldi	r23, 0x11	; 17
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	ef c7       	rjmp	.+4062   	; 0x113a <TWI_send_string>
     15c:	08 95       	ret

0000015e <walk_forward>:
	}
}

void walk_forward()
{
     15e:	8f 92       	push	r8
     160:	9f 92       	push	r9
     162:	af 92       	push	r10
     164:	bf 92       	push	r11
     166:	cf 92       	push	r12
     168:	df 92       	push	r13
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     172:	82 d4       	rcall	.+2308   	; 0xa78 <navigation_angle_offset>
     174:	6b 01       	movw	r12, r22
     176:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     178:	e3 d2       	rcall	.+1478   	; 0x740 <navigation_direction_regulation>
     17a:	4b 01       	movw	r8, r22
     17c:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	48 e4       	ldi	r20, 0x48	; 72
     184:	52 e4       	ldi	r21, 0x42	; 66
     186:	c7 01       	movw	r24, r14
     188:	b6 01       	movw	r22, r12
     18a:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     18e:	9b 01       	movw	r18, r22
     190:	ac 01       	movw	r20, r24
     192:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__addsf3>
     196:	2b ed       	ldi	r18, 0xDB	; 219
     198:	3f e0       	ldi	r19, 0x0F	; 15
     19a:	49 e4       	ldi	r20, 0x49	; 73
     19c:	50 e4       	ldi	r21, 0x40	; 64
     19e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__divsf3>
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	4c e4       	ldi	r20, 0x4C	; 76
     1a8:	52 e4       	ldi	r21, 0x42	; 66
     1aa:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__addsf3>
     1ae:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1b2:	64 36       	cpi	r22, 0x64	; 100
     1b4:	71 05       	cpc	r23, r1
     1b6:	34 f4       	brge	.+12     	; 0x1c4 <walk_forward+0x66>
     1b8:	eb 01       	movw	r28, r22
     1ba:	dd 23       	and	r29, r29
     1bc:	2c f4       	brge	.+10     	; 0x1c8 <walk_forward+0x6a>
     1be:	c0 e0       	ldi	r28, 0x00	; 0
     1c0:	d0 e0       	ldi	r29, 0x00	; 0
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1c4:	c4 e6       	ldi	r28, 0x64	; 100
     1c6:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	44 eb       	ldi	r20, 0xB4	; 180
     1ce:	52 e4       	ldi	r21, 0x42	; 66
     1d0:	c5 01       	movw	r24, r10
     1d2:	b4 01       	movw	r22, r8
     1d4:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     1d8:	2b ed       	ldi	r18, 0xDB	; 219
     1da:	3f e0       	ldi	r19, 0x0F	; 15
     1dc:	49 ec       	ldi	r20, 0xC9	; 201
     1de:	50 e4       	ldi	r21, 0x40	; 64
     1e0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__divsf3>
     1e4:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fixsfsi>
     1e8:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1ea:	40 91 01 01 	lds	r20, 0x0101
     1ee:	6c 2f       	mov	r22, r28
     1f0:	82 2f       	mov	r24, r18
     1f2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1f6:	d1 d1       	rcall	.+930    	; 0x59a <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	bf 90       	pop	r11
     206:	af 90       	pop	r10
     208:	9f 90       	pop	r9
     20a:	8f 90       	pop	r8
     20c:	08 95       	ret

0000020e <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
	if(gStatus)
     212:	80 91 00 01 	lds	r24, 0x0100
     216:	88 23       	and	r24, r24
     218:	21 f0       	breq	.+8      	; 0x222 <turn_right+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     21a:	6a e5       	ldi	r22, 0x5A	; 90
     21c:	71 e1       	ldi	r23, 0x11	; 17
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	8c d7       	rcall	.+3864   	; 0x113a <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 1);
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	8a e5       	ldi	r24, 0x5A	; 90
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <USART_SendTurn>
	while(USART_turn_done() == 0)
     22c:	08 c0       	rjmp	.+16     	; 0x23e <turn_right+0x30>
	{
		USART_DecodeRxFIFO();
     22e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <USART_DecodeRxFIFO>
     232:	8f e3       	ldi	r24, 0x3F	; 63
     234:	9c e9       	ldi	r25, 0x9C	; 156
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <turn_right+0x28>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <turn_right+0x2e>
     23c:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 1);
	while(USART_turn_done() == 0)
     23e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <USART_turn_done>
     242:	88 23       	and	r24, r24
     244:	a1 f3       	breq	.-24     	; 0x22e <turn_right+0x20>
     246:	cc e0       	ldi	r28, 0x0C	; 12
     248:	d0 e0       	ldi	r29, 0x00	; 0
     24a:	03 c0       	rjmp	.+6      	; 0x252 <turn_right+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     24c:	88 df       	rcall	.-240    	; 0x15e <walk_forward>
     24e:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_DecodeRxFIFO();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
     250:	19 f0       	breq	.+6      	; 0x258 <turn_right+0x4a>
     252:	9d d1       	rcall	.+826    	; 0x58e <navigation_autonomous_walk>
     254:	81 11       	cpse	r24, r1
     256:	fa cf       	rjmp	.-12     	; 0x24c <turn_right+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     258:	80 91 00 01 	lds	r24, 0x0100
     25c:	88 23       	and	r24, r24
     25e:	21 f0       	breq	.+8      	; 0x268 <turn_right+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     260:	62 e7       	ldi	r22, 0x72	; 114
     262:	71 e1       	ldi	r23, 0x11	; 17
     264:	80 e8       	ldi	r24, 0x80	; 128
     266:	69 d7       	rcall	.+3794   	; 0x113a <TWI_send_string>
	}
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
	if(gStatus)
     272:	80 91 00 01 	lds	r24, 0x0100
     276:	88 23       	and	r24, r24
     278:	21 f0       	breq	.+8      	; 0x282 <turn_left+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     27a:	66 e8       	ldi	r22, 0x86	; 134
     27c:	71 e1       	ldi	r23, 0x11	; 17
     27e:	80 e8       	ldi	r24, 0x80	; 128
     280:	5c d7       	rcall	.+3768   	; 0x113a <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 0);
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	8a e5       	ldi	r24, 0x5A	; 90
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <USART_SendTurn>
	while(USART_turn_done() == 0)
     28c:	08 c0       	rjmp	.+16     	; 0x29e <turn_left+0x30>
	{
		USART_DecodeRxFIFO();
     28e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <USART_DecodeRxFIFO>
     292:	8f e3       	ldi	r24, 0x3F	; 63
     294:	9c e9       	ldi	r25, 0x9C	; 156
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <turn_left+0x28>
     29a:	00 c0       	rjmp	.+0      	; 0x29c <turn_left+0x2e>
     29c:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 0);
	while(USART_turn_done() == 0)
     29e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <USART_turn_done>
     2a2:	88 23       	and	r24, r24
     2a4:	a1 f3       	breq	.-24     	; 0x28e <turn_left+0x20>
     2a6:	cc e0       	ldi	r28, 0x0C	; 12
     2a8:	d0 e0       	ldi	r29, 0x00	; 0
     2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <turn_left+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     2ac:	58 df       	rcall	.-336    	; 0x15e <walk_forward>
     2ae:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_DecodeRxFIFO();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
     2b0:	19 f0       	breq	.+6      	; 0x2b8 <turn_left+0x4a>
     2b2:	6d d1       	rcall	.+730    	; 0x58e <navigation_autonomous_walk>
     2b4:	81 11       	cpse	r24, r1
     2b6:	fa cf       	rjmp	.-12     	; 0x2ac <turn_left+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     2b8:	80 91 00 01 	lds	r24, 0x0100
     2bc:	88 23       	and	r24, r24
     2be:	21 f0       	breq	.+8      	; 0x2c8 <turn_left+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2c0:	6d e9       	ldi	r22, 0x9D	; 157
     2c2:	71 e1       	ldi	r23, 0x11	; 17
     2c4:	80 e8       	ldi	r24, 0x80	; 128
     2c6:	39 d7       	rcall	.+3698   	; 0x113a <TWI_send_string>
	}
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <climb>:
	navigation_stepping_delay();
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void climb()
{
     2ce:	cf 93       	push	r28
	if(gStatus)
     2d0:	80 91 00 01 	lds	r24, 0x0100
     2d4:	88 23       	and	r24, r24
     2d6:	31 f0       	breq	.+12     	; 0x2e4 <climb+0x16>
	{
		TWI_send_string_fixed_length(C_ADDRESS, "Starting climb", 14);
     2d8:	4e e0       	ldi	r20, 0x0E	; 14
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	60 eb       	ldi	r22, 0xB0	; 176
     2de:	71 e1       	ldi	r23, 0x11	; 17
     2e0:	80 e8       	ldi	r24, 0x80	; 128
     2e2:	71 d7       	rcall	.+3810   	; 0x11c6 <TWI_send_string_fixed_length>
	}
	
	LED1_TOGGLE;
     2e4:	92 b1       	in	r25, 0x02	; 2
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	89 27       	eor	r24, r25
     2ea:	82 b9       	out	0x02, r24	; 2
	USART_send_climb();
     2ec:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <USART_send_climb>
	while(USART_climb_done() == 0)
	{
		LED0_TOGGLE;
     2f0:	c1 e0       	ldi	r28, 0x01	; 1
		TWI_send_string_fixed_length(C_ADDRESS, "Starting climb", 14);
	}
	
	LED1_TOGGLE;
	USART_send_climb();
	while(USART_climb_done() == 0)
     2f2:	0e c0       	rjmp	.+28     	; 0x310 <climb+0x42>
	{
		LED0_TOGGLE;
     2f4:	82 b1       	in	r24, 0x02	; 2
     2f6:	8c 27       	eor	r24, r28
     2f8:	82 b9       	out	0x02, r24	; 2
		USART_DecodeRxFIFO();
     2fa:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <USART_DecodeRxFIFO>
     2fe:	2f ef       	ldi	r18, 0xFF	; 255
     300:	81 ee       	ldi	r24, 0xE1	; 225
     302:	94 e0       	ldi	r25, 0x04	; 4
     304:	21 50       	subi	r18, 0x01	; 1
     306:	80 40       	sbci	r24, 0x00	; 0
     308:	90 40       	sbci	r25, 0x00	; 0
     30a:	e1 f7       	brne	.-8      	; 0x304 <climb+0x36>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <climb+0x40>
     30e:	00 00       	nop
		TWI_send_string_fixed_length(C_ADDRESS, "Starting climb", 14);
	}
	
	LED1_TOGGLE;
	USART_send_climb();
	while(USART_climb_done() == 0)
     310:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <USART_climb_done>
     314:	88 23       	and	r24, r24
     316:	71 f3       	breq	.-36     	; 0x2f4 <climb+0x26>
	{
		LED0_TOGGLE;
		USART_DecodeRxFIFO();
		_delay_ms(100);
	}
	LED1_TOGGLE;
     318:	92 b1       	in	r25, 0x02	; 2
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	89 27       	eor	r24, r25
     31e:	82 b9       	out	0x02, r24	; 2
	
	if(gStatus)
     320:	80 91 00 01 	lds	r24, 0x0100
     324:	88 23       	and	r24, r24
     326:	31 f0       	breq	.+12     	; 0x334 <climb+0x66>
	{
		TWI_send_string_fixed_length(C_ADDRESS, "Climbing done", 13);
     328:	4d e0       	ldi	r20, 0x0D	; 13
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	6f eb       	ldi	r22, 0xBF	; 191
     32e:	71 e1       	ldi	r23, 0x11	; 17
     330:	80 e8       	ldi	r24, 0x80	; 128
     332:	49 d7       	rcall	.+3730   	; 0x11c6 <TWI_send_string_fixed_length>
	}
}
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <autonomouswalk_walk>:

void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
     338:	b3 d1       	rcall	.+870    	; 0x6a0 <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     33a:	23 d1       	rcall	.+582    	; 0x582 <navigation_left_algorithm>
     33c:	88 23       	and	r24, r24
     33e:	09 f4       	brne	.+2      	; 0x342 <autonomouswalk_walk+0xa>
     340:	40 c0       	rjmp	.+128    	; 0x3c2 <autonomouswalk_walk+0x8a>
	{
		if(navigation_check_left_turn() == 2)
     342:	e9 d1       	rcall	.+978    	; 0x716 <navigation_check_left_turn>
     344:	82 30       	cpi	r24, 0x02	; 2
     346:	39 f4       	brne	.+14     	; 0x356 <autonomouswalk_walk+0x1e>
		{
			for(int i = 0;i < 3; ++i)
			{
				walk_forward();
     348:	0a df       	rcall	.-492    	; 0x15e <walk_forward>
     34a:	09 df       	rcall	.-494    	; 0x15e <walk_forward>
     34c:	08 df       	rcall	.-496    	; 0x15e <walk_forward>
			}
			turn_left();
     34e:	8f df       	rcall	.-226    	; 0x26e <turn_left>
			decisionCounter = 0;
     350:	10 92 d8 13 	sts	0x13D8, r1
     354:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	5b d1       	rcall	.+694    	; 0x612 <navigation_get_sensor>
     35c:	89 32       	cpi	r24, 0x29	; 41
     35e:	58 f0       	brcs	.+22     	; 0x376 <autonomouswalk_walk+0x3e>
		{
			if(navigation_get_sensor(6) < 38)
     360:	86 e0       	ldi	r24, 0x06	; 6
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	56 d1       	rcall	.+684    	; 0x612 <navigation_get_sensor>
     366:	86 32       	cpi	r24, 0x26	; 38
     368:	10 f4       	brcc	.+4      	; 0x36e <autonomouswalk_walk+0x36>
			{
				climb();
     36a:	b1 df       	rcall	.-158    	; 0x2ce <climb>
     36c:	01 c0       	rjmp	.+2      	; 0x370 <autonomouswalk_walk+0x38>
			} else {
				walk_forward();	
     36e:	f7 de       	rcall	.-530    	; 0x15e <walk_forward>
			}
			decisionCounter = 0;
     370:	10 92 d8 13 	sts	0x13D8, r1
     374:	08 95       	ret
		}
		else if(navigation_check_right_turn() == 2)
     376:	ba d1       	rcall	.+884    	; 0x6ec <navigation_check_right_turn>
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	21 f4       	brne	.+8      	; 0x384 <autonomouswalk_walk+0x4c>
		{
			turn_right();
     37c:	48 df       	rcall	.-368    	; 0x20e <turn_right>
			decisionCounter = 0;
     37e:	10 92 d8 13 	sts	0x13D8, r1
     382:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     384:	c8 d1       	rcall	.+912    	; 0x716 <navigation_check_left_turn>
     386:	81 11       	cpse	r24, r1
     388:	07 c0       	rjmp	.+14     	; 0x398 <autonomouswalk_walk+0x60>
     38a:	b0 d1       	rcall	.+864    	; 0x6ec <navigation_check_right_turn>
     38c:	81 11       	cpse	r24, r1
     38e:	04 c0       	rjmp	.+8      	; 0x398 <autonomouswalk_walk+0x60>
		{
			turn_around();
     390:	c2 de       	rcall	.-636    	; 0x116 <turn_around>
			decisionCounter = 0;
     392:	10 92 d8 13 	sts	0x13D8, r1
     396:	08 95       	ret
		}
		else if(decisionCounter < 4)
     398:	80 91 d8 13 	lds	r24, 0x13D8
     39c:	84 30       	cpi	r24, 0x04	; 4
     39e:	38 f4       	brcc	.+14     	; 0x3ae <autonomouswalk_walk+0x76>
		{
			walk_forward();
     3a0:	de de       	rcall	.-580    	; 0x15e <walk_forward>
			++decisionCounter;
     3a2:	80 91 d8 13 	lds	r24, 0x13D8
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	80 93 d8 13 	sts	0x13D8, r24
     3ac:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     3ae:	10 92 d8 13 	sts	0x13D8, r1
			navigation_set_autonomous_walk(0);
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	ef d0       	rcall	.+478    	; 0x594 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     3b6:	49 e3       	ldi	r20, 0x39	; 57
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	6d ec       	ldi	r22, 0xCD	; 205
     3bc:	71 e1       	ldi	r23, 0x11	; 17
     3be:	80 e8       	ldi	r24, 0x80	; 128
     3c0:	02 c7       	rjmp	.+3588   	; 0x11c6 <TWI_send_string_fixed_length>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     3c2:	94 d1       	rcall	.+808    	; 0x6ec <navigation_check_right_turn>
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	31 f4       	brne	.+12     	; 0x3d4 <autonomouswalk_walk+0x9c>
		{
			for(int i = 0;i < 2; ++i)
			{
				walk_forward();
     3c8:	ca de       	rcall	.-620    	; 0x15e <walk_forward>
     3ca:	c9 de       	rcall	.-622    	; 0x15e <walk_forward>
			}
			turn_right();
     3cc:	20 df       	rcall	.-448    	; 0x20e <turn_right>
			decisionCounter = 0;
     3ce:	10 92 d8 13 	sts	0x13D8, r1
     3d2:	08 95       	ret
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     3d4:	84 e0       	ldi	r24, 0x04	; 4
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	1c d1       	rcall	.+568    	; 0x612 <navigation_get_sensor>
     3da:	89 32       	cpi	r24, 0x29	; 41
     3dc:	58 f0       	brcs	.+22     	; 0x3f4 <autonomouswalk_walk+0xbc>
		{
			if(navigation_get_sensor(6) < 38)
     3de:	86 e0       	ldi	r24, 0x06	; 6
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	17 d1       	rcall	.+558    	; 0x612 <navigation_get_sensor>
     3e4:	86 32       	cpi	r24, 0x26	; 38
     3e6:	10 f4       	brcc	.+4      	; 0x3ec <autonomouswalk_walk+0xb4>
			{
				climb();
     3e8:	72 df       	rcall	.-284    	; 0x2ce <climb>
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <autonomouswalk_walk+0xb6>
			} else {
				walk_forward();
     3ec:	b8 de       	rcall	.-656    	; 0x15e <walk_forward>
			}
			decisionCounter = 0;
     3ee:	10 92 d8 13 	sts	0x13D8, r1
     3f2:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 2)
     3f4:	90 d1       	rcall	.+800    	; 0x716 <navigation_check_left_turn>
     3f6:	82 30       	cpi	r24, 0x02	; 2
     3f8:	21 f4       	brne	.+8      	; 0x402 <autonomouswalk_walk+0xca>
		{
			turn_left();
     3fa:	39 df       	rcall	.-398    	; 0x26e <turn_left>
			decisionCounter = 0;
     3fc:	10 92 d8 13 	sts	0x13D8, r1
     400:	08 95       	ret
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     402:	89 d1       	rcall	.+786    	; 0x716 <navigation_check_left_turn>
     404:	81 11       	cpse	r24, r1
     406:	07 c0       	rjmp	.+14     	; 0x416 <autonomouswalk_walk+0xde>
     408:	71 d1       	rcall	.+738    	; 0x6ec <navigation_check_right_turn>
     40a:	81 11       	cpse	r24, r1
     40c:	04 c0       	rjmp	.+8      	; 0x416 <autonomouswalk_walk+0xde>
		{
			turn_around();
     40e:	83 de       	rcall	.-762    	; 0x116 <turn_around>
			decisionCounter = 0;
     410:	10 92 d8 13 	sts	0x13D8, r1
     414:	08 95       	ret
		}
		else if(decisionCounter < 4)
     416:	80 91 d8 13 	lds	r24, 0x13D8
     41a:	84 30       	cpi	r24, 0x04	; 4
     41c:	38 f4       	brcc	.+14     	; 0x42c <autonomouswalk_walk+0xf4>
		{
			walk_forward();
     41e:	9f de       	rcall	.-706    	; 0x15e <walk_forward>
			++decisionCounter;
     420:	80 91 d8 13 	lds	r24, 0x13D8
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	80 93 d8 13 	sts	0x13D8, r24
     42a:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     42c:	10 92 d8 13 	sts	0x13D8, r1
			navigation_set_autonomous_walk(0);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	b0 d0       	rcall	.+352    	; 0x594 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     434:	49 e3       	ldi	r20, 0x39	; 57
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	6d ec       	ldi	r22, 0xCD	; 205
     43a:	71 e1       	ldi	r23, 0x11	; 17
     43c:	80 e8       	ldi	r24, 0x80	; 128
     43e:	c3 c6       	rjmp	.+3462   	; 0x11c6 <TWI_send_string_fixed_length>

00000440 <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     440:	bc 01       	movw	r22, r24
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 91 10 	call	0x2122	; 0x2122 <__floatunsisf>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	4a e7       	ldi	r20, 0x7A	; 122
     450:	51 e4       	ldi	r21, 0x41	; 65
     452:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     456:	0e 94 65 10 	call	0x20ca	; 0x20ca <__fixunssfsi>
	OCR1A = delay;
     45a:	70 93 89 00 	sts	0x0089, r23
     45e:	60 93 88 00 	sts	0x0088, r22
     462:	08 95       	ret

00000464 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     464:	bc 01       	movw	r22, r24
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 91 10 	call	0x2122	; 0x2122 <__floatunsisf>
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	4a e7       	ldi	r20, 0x7A	; 122
     474:	51 e4       	ldi	r21, 0x41	; 65
     476:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     47a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__fixunssfsi>
	OCR3A = delay;
     47e:	70 93 99 00 	sts	0x0099, r23
     482:	60 93 98 00 	sts	0x0098, r22
     486:	08 95       	ret

00000488 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     488:	e1 e8       	ldi	r30, 0x81	; 129
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	85 60       	ori	r24, 0x05	; 5
     490:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     492:	e1 e9       	ldi	r30, 0x91	; 145
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	85 60       	ori	r24, 0x05	; 5
     49a:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     49c:	88 ee       	ldi	r24, 0xE8	; 232
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	cf df       	rcall	.-98     	; 0x440 <set_counter_1>
	set_counter_2(1000);
     4a2:	88 ee       	ldi	r24, 0xE8	; 232
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	de df       	rcall	.-68     	; 0x464 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     4a8:	ef e6       	ldi	r30, 0x6F	; 111
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	82 60       	ori	r24, 0x02	; 2
     4b0:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     4b2:	e1 e7       	ldi	r30, 0x71	; 113
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	82 60       	ori	r24, 0x02	; 2
     4ba:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     4bc:	10 92 85 00 	sts	0x0085, r1
     4c0:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     4c4:	10 92 95 00 	sts	0x0095, r1
     4c8:	10 92 94 00 	sts	0x0094, r1
     4cc:	08 95       	ret

000004ce <FifoDataLength>:
     4ce:	fc 01       	movw	r30, r24
     4d0:	90 81       	ld	r25, Z
     4d2:	91 50       	subi	r25, 0x01	; 1
     4d4:	84 81       	ldd	r24, Z+4	; 0x04
     4d6:	22 81       	ldd	r18, Z+2	; 0x02
     4d8:	82 1b       	sub	r24, r18
     4da:	89 23       	and	r24, r25
     4dc:	08 95       	ret

000004de <FifoWrite>:
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	ec 01       	movw	r28, r24
     4e6:	16 2f       	mov	r17, r22
     4e8:	f2 df       	rcall	.-28     	; 0x4ce <FifoDataLength>
     4ea:	28 81       	ld	r18, Y
     4ec:	39 81       	ldd	r19, Y+1	; 0x01
     4ee:	21 50       	subi	r18, 0x01	; 1
     4f0:	31 09       	sbc	r19, r1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	82 17       	cp	r24, r18
     4f6:	93 07       	cpc	r25, r19
     4f8:	69 f0       	breq	.+26     	; 0x514 <FifoWrite+0x36>
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	9d 81       	ldd	r25, Y+5	; 0x05
     4fe:	fe 01       	movw	r30, r28
     500:	e8 0f       	add	r30, r24
     502:	f9 1f       	adc	r31, r25
     504:	16 83       	std	Z+6, r17	; 0x06
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	28 23       	and	r18, r24
     50a:	39 23       	and	r19, r25
     50c:	3d 83       	std	Y+5, r19	; 0x05
     50e:	2c 83       	std	Y+4, r18	; 0x04
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	01 c0       	rjmp	.+2      	; 0x516 <FifoWrite+0x38>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	08 95       	ret

0000051e <FifoRead>:
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
     528:	8b 01       	movw	r16, r22
     52a:	d1 df       	rcall	.-94     	; 0x4ce <FifoDataLength>
     52c:	88 23       	and	r24, r24
     52e:	a1 f0       	breq	.+40     	; 0x558 <FifoRead+0x3a>
     530:	ea 81       	ldd	r30, Y+2	; 0x02
     532:	fb 81       	ldd	r31, Y+3	; 0x03
     534:	ec 0f       	add	r30, r28
     536:	fd 1f       	adc	r31, r29
     538:	86 81       	ldd	r24, Z+6	; 0x06
     53a:	f8 01       	movw	r30, r16
     53c:	80 83       	st	Z, r24
     53e:	28 81       	ld	r18, Y
     540:	39 81       	ldd	r19, Y+1	; 0x01
     542:	21 50       	subi	r18, 0x01	; 1
     544:	31 09       	sbc	r19, r1
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	9b 81       	ldd	r25, Y+3	; 0x03
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	82 23       	and	r24, r18
     54e:	93 23       	and	r25, r19
     550:	9b 83       	std	Y+3, r25	; 0x03
     552:	8a 83       	std	Y+2, r24	; 0x02
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	01 c0       	rjmp	.+2      	; 0x55a <FifoRead+0x3c>
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	08 95       	ret

00000564 <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     564:	68 2f       	mov	r22, r24
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 91 10 	call	0x2122	; 0x2122 <__floatunsisf>
     570:	60 93 03 01 	sts	0x0103, r22
     574:	70 93 04 01 	sts	0x0104, r23
     578:	80 93 05 01 	sts	0x0105, r24
     57c:	90 93 06 01 	sts	0x0106, r25
     580:	08 95       	ret

00000582 <navigation_left_algorithm>:
     582:	80 91 07 01 	lds	r24, 0x0107
     586:	08 95       	ret

00000588 <navigation_set_algorithm>:
     588:	80 93 07 01 	sts	0x0107, r24
     58c:	08 95       	ret

0000058e <navigation_autonomous_walk>:
     58e:	80 91 02 01 	lds	r24, 0x0102
     592:	08 95       	ret

00000594 <navigation_set_autonomous_walk>:
     594:	80 93 02 01 	sts	0x0102, r24
     598:	08 95       	ret

0000059a <navigation_stepping_delay>:
     59a:	0b c0       	rjmp	.+22     	; 0x5b2 <navigation_stepping_delay+0x18>
     59c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <USART_DecodeRxFIFO>
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	89 ef       	ldi	r24, 0xF9	; 249
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <navigation_stepping_delay+0xc>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <navigation_stepping_delay+0x16>
     5b0:	00 00       	nop
     5b2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <USART_ready>
     5b6:	88 23       	and	r24, r24
     5b8:	89 f3       	breq	.-30     	; 0x59c <navigation_stepping_delay+0x2>
     5ba:	08 95       	ret

000005bc <navigation_fill_buffer>:
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	c0 e0       	ldi	r28, 0x00	; 0
     5c6:	d0 e0       	ldi	r29, 0x00	; 0
     5c8:	00 91 da 13 	lds	r16, 0x13DA
     5cc:	10 e0       	ldi	r17, 0x00	; 0
     5ce:	ce 01       	movw	r24, r28
     5d0:	85 d6       	rcall	.+3338   	; 0x12dc <TWI_get_sensor>
     5d2:	fe 01       	movw	r30, r28
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	ee 0f       	add	r30, r30
     5da:	ff 1f       	adc	r31, r31
     5dc:	ec 0f       	add	r30, r28
     5de:	fd 1f       	adc	r31, r29
     5e0:	0e 0f       	add	r16, r30
     5e2:	1f 1f       	adc	r17, r31
     5e4:	f8 01       	movw	r30, r16
     5e6:	e3 50       	subi	r30, 0x03	; 3
     5e8:	fc 4e       	sbci	r31, 0xEC	; 236
     5ea:	80 83       	st	Z, r24
     5ec:	21 96       	adiw	r28, 0x01	; 1
     5ee:	c8 30       	cpi	r28, 0x08	; 8
     5f0:	d1 05       	cpc	r29, r1
     5f2:	51 f7       	brne	.-44     	; 0x5c8 <navigation_fill_buffer+0xc>
     5f4:	80 91 da 13 	lds	r24, 0x13DA
     5f8:	84 30       	cpi	r24, 0x04	; 4
     5fa:	19 f4       	brne	.+6      	; 0x602 <navigation_fill_buffer+0x46>
     5fc:	10 92 da 13 	sts	0x13DA, r1
     600:	03 c0       	rjmp	.+6      	; 0x608 <navigation_fill_buffer+0x4c>
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	80 93 da 13 	sts	0x13DA, r24
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	08 95       	ret

00000612 <navigation_get_sensor>:
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	00 d0       	rcall	.+0      	; 0x618 <navigation_get_sensor+0x6>
     618:	00 d0       	rcall	.+0      	; 0x61a <navigation_get_sensor+0x8>
     61a:	1f 92       	push	r1
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	fc 01       	movw	r30, r24
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	8e 0f       	add	r24, r30
     62c:	9f 1f       	adc	r25, r31
     62e:	fc 01       	movw	r30, r24
     630:	e3 50       	subi	r30, 0x03	; 3
     632:	fc 4e       	sbci	r31, 0xEC	; 236
     634:	80 81       	ld	r24, Z
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	81 81       	ldd	r24, Z+1	; 0x01
     63a:	8a 83       	std	Y+2, r24	; 0x02
     63c:	82 81       	ldd	r24, Z+2	; 0x02
     63e:	8b 83       	std	Y+3, r24	; 0x03
     640:	83 81       	ldd	r24, Z+3	; 0x03
     642:	8c 83       	std	Y+4, r24	; 0x04
     644:	84 81       	ldd	r24, Z+4	; 0x04
     646:	8d 83       	std	Y+5, r24	; 0x05
     648:	24 e0       	ldi	r18, 0x04	; 4
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	0e c0       	rjmp	.+28     	; 0x66a <navigation_get_sensor+0x58>
     64e:	41 91       	ld	r20, Z+
     650:	50 81       	ld	r21, Z
     652:	54 17       	cp	r21, r20
     654:	20 f4       	brcc	.+8      	; 0x65e <navigation_get_sensor+0x4c>
     656:	df 01       	movw	r26, r30
     658:	11 97       	sbiw	r26, 0x01	; 1
     65a:	5c 93       	st	X, r21
     65c:	40 83       	st	Z, r20
     65e:	8e 17       	cp	r24, r30
     660:	9f 07       	cpc	r25, r31
     662:	a9 f7       	brne	.-22     	; 0x64e <navigation_get_sensor+0x3c>
     664:	21 50       	subi	r18, 0x01	; 1
     666:	31 09       	sbc	r19, r1
     668:	49 f0       	breq	.+18     	; 0x67c <navigation_get_sensor+0x6a>
     66a:	12 16       	cp	r1, r18
     66c:	13 06       	cpc	r1, r19
     66e:	d4 f7       	brge	.-12     	; 0x664 <navigation_get_sensor+0x52>
     670:	fe 01       	movw	r30, r28
     672:	31 96       	adiw	r30, 0x01	; 1
     674:	cf 01       	movw	r24, r30
     676:	82 0f       	add	r24, r18
     678:	93 1f       	adc	r25, r19
     67a:	e9 cf       	rjmp	.-46     	; 0x64e <navigation_get_sensor+0x3c>
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(7) < HEIGHT_LIMIT)
     68e:	87 e0       	ldi	r24, 0x07	; 7
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	bf df       	rcall	.-130    	; 0x612 <navigation_get_sensor>
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	88 32       	cpi	r24, 0x28	; 40
     698:	08 f0       	brcs	.+2      	; 0x69c <navigation_detect_low_pass_obsticle+0xe>
     69a:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     69c:	89 2f       	mov	r24, r25
     69e:	08 95       	ret

000006a0 <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     6a0:	f6 df       	rcall	.-20     	; 0x68e <navigation_detect_low_pass_obsticle>
     6a2:	88 23       	and	r24, r24
     6a4:	e9 f0       	breq	.+58     	; 0x6e0 <navigation_low_pass_obstacle+0x40>
     6a6:	80 91 d9 13 	lds	r24, 0x13D9
     6aa:	81 11       	cpse	r24, r1
     6ac:	19 c0       	rjmp	.+50     	; 0x6e0 <navigation_low_pass_obstacle+0x40>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     6ae:	4b e1       	ldi	r20, 0x1B	; 27
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	67 e0       	ldi	r22, 0x07	; 7
     6b4:	72 e1       	ldi	r23, 0x12	; 18
     6b6:	80 e4       	ldi	r24, 0x40	; 64
     6b8:	86 d5       	rcall	.+2828   	; 0x11c6 <TWI_send_string_fixed_length>
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	86 e7       	ldi	r24, 0x76	; 118
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	80 40       	sbci	r24, 0x00	; 0
     6c4:	90 40       	sbci	r25, 0x00	; 0
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <navigation_low_pass_obstacle+0x20>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <navigation_low_pass_obstacle+0x2a>
     6ca:	00 00       	nop
		_delay_ms(30);
		TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);
     6cc:	4b e1       	ldi	r20, 0x1B	; 27
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	67 e0       	ldi	r22, 0x07	; 7
     6d2:	72 e1       	ldi	r23, 0x12	; 18
     6d4:	80 e8       	ldi	r24, 0x80	; 128
     6d6:	77 d5       	rcall	.+2798   	; 0x11c6 <TWI_send_string_fixed_length>
		lowPassObstacleFlag = 1;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	80 93 d9 13 	sts	0x13D9, r24
     6de:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     6e0:	d6 df       	rcall	.-84     	; 0x68e <navigation_detect_low_pass_obsticle>
     6e2:	81 11       	cpse	r24, r1
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <navigation_low_pass_obstacle+0x4a>
	{
		lowPassObstacleFlag = 0;
     6e6:	10 92 d9 13 	sts	0x13D9, r1
     6ea:	08 95       	ret

000006ec <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	90 df       	rcall	.-224    	; 0x612 <navigation_get_sensor>
     6f2:	8c 33       	cpi	r24, 0x3C	; 60
     6f4:	28 f0       	brcs	.+10     	; 0x700 <navigation_check_right_turn+0x14>
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	8b df       	rcall	.-234    	; 0x612 <navigation_get_sensor>
     6fc:	8c 33       	cpi	r24, 0x3C	; 60
     6fe:	40 f4       	brcc	.+16     	; 0x710 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	86 df       	rcall	.-244    	; 0x612 <navigation_get_sensor>
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	86 34       	cpi	r24, 0x46	; 70
     70a:	18 f4       	brcc	.+6      	; 0x712 <navigation_check_right_turn+0x26>
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	01 c0       	rjmp	.+2      	; 0x712 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     710:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     712:	89 2f       	mov	r24, r25
     714:	08 95       	ret

00000716 <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	7b df       	rcall	.-266    	; 0x612 <navigation_get_sensor>
     71c:	8c 33       	cpi	r24, 0x3C	; 60
     71e:	28 f0       	brcs	.+10     	; 0x72a <navigation_check_left_turn+0x14>
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	76 df       	rcall	.-276    	; 0x612 <navigation_get_sensor>
     726:	8c 33       	cpi	r24, 0x3C	; 60
     728:	40 f4       	brcc	.+16     	; 0x73a <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	71 df       	rcall	.-286    	; 0x612 <navigation_get_sensor>
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	86 34       	cpi	r24, 0x46	; 70
     734:	18 f4       	brcc	.+6      	; 0x73c <navigation_check_left_turn+0x26>
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	01 c0       	rjmp	.+2      	; 0x73c <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     73a:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     73c:	89 2f       	mov	r24, r25
     73e:	08 95       	ret

00000740 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     750:	80 91 07 01 	lds	r24, 0x0107
     754:	88 23       	and	r24, r24
     756:	09 f4       	brne	.+2      	; 0x75a <navigation_direction_regulation+0x1a>
     758:	98 c0       	rjmp	.+304    	; 0x88a <navigation_direction_regulation+0x14a>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	59 df       	rcall	.-334    	; 0x612 <navigation_get_sensor>
     760:	c8 2f       	mov	r28, r24
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	55 df       	rcall	.-342    	; 0x612 <navigation_get_sensor>
     768:	2c 2f       	mov	r18, r28
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	a9 01       	movw	r20, r18
     76e:	48 1b       	sub	r20, r24
     770:	51 09       	sbc	r21, r1
     772:	ca 01       	movw	r24, r20
     774:	99 23       	and	r25, r25
     776:	1c f4       	brge	.+6      	; 0x77e <navigation_direction_regulation+0x3e>
     778:	91 95       	neg	r25
     77a:	81 95       	neg	r24
     77c:	91 09       	sbc	r25, r1
     77e:	0a 97       	sbiw	r24, 0x0a	; 10
     780:	b4 f5       	brge	.+108    	; 0x7ee <navigation_direction_regulation+0xae>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	45 df       	rcall	.-374    	; 0x612 <navigation_get_sensor>
     788:	82 33       	cpi	r24, 0x32	; 50
     78a:	88 f5       	brcc	.+98     	; 0x7ee <navigation_direction_regulation+0xae>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	40 df       	rcall	.-384    	; 0x612 <navigation_get_sensor>
     792:	c8 2f       	mov	r28, r24
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	3c df       	rcall	.-392    	; 0x612 <navigation_get_sensor>
     79a:	d8 2f       	mov	r29, r24
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <cos>
     7a4:	6b 01       	movw	r12, r22
     7a6:	7c 01       	movw	r14, r24
     7a8:	6d 2f       	mov	r22, r29
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	6c 0f       	add	r22, r28
     7ae:	71 1d       	adc	r23, r1
     7b0:	88 27       	eor	r24, r24
     7b2:	77 fd       	sbrc	r23, 7
     7b4:	80 95       	com	r24
     7b6:	98 2f       	mov	r25, r24
     7b8:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatsisf>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	5f e3       	ldi	r21, 0x3F	; 63
     7c4:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     7c8:	26 e6       	ldi	r18, 0x66	; 102
     7ca:	36 e6       	ldi	r19, 0x66	; 102
     7cc:	46 ed       	ldi	r20, 0xD6	; 214
     7ce:	50 e4       	ldi	r21, 0x40	; 64
     7d0:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__addsf3>
     7d4:	a7 01       	movw	r20, r14
     7d6:	96 01       	movw	r18, r12
     7d8:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e2       	ldi	r20, 0x20	; 32
     7e2:	52 e4       	ldi	r21, 0x42	; 66
     7e4:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__subsf3>
     7e8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fixsfsi>
     7ec:	e5 c0       	rjmp	.+458    	; 0x9b8 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0f df       	rcall	.-482    	; 0x612 <navigation_get_sensor>
     7f4:	c8 2f       	mov	r28, r24
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0b df       	rcall	.-490    	; 0x612 <navigation_get_sensor>
     7fc:	2c 2f       	mov	r18, r28
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	a9 01       	movw	r20, r18
     802:	48 1b       	sub	r20, r24
     804:	51 09       	sbc	r21, r1
     806:	ca 01       	movw	r24, r20
     808:	99 23       	and	r25, r25
     80a:	1c f4       	brge	.+6      	; 0x812 <navigation_direction_regulation+0xd2>
     80c:	91 95       	neg	r25
     80e:	81 95       	neg	r24
     810:	91 09       	sbc	r25, r1
     812:	0a 97       	sbiw	r24, 0x0a	; 10
     814:	0c f0       	brlt	.+2      	; 0x818 <navigation_direction_regulation+0xd8>
     816:	21 c1       	rjmp	.+578    	; 0xa5a <navigation_direction_regulation+0x31a>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	fa de       	rcall	.-524    	; 0x612 <navigation_get_sensor>
     81e:	82 33       	cpi	r24, 0x32	; 50
     820:	08 f0       	brcs	.+2      	; 0x824 <navigation_direction_regulation+0xe4>
     822:	1b c1       	rjmp	.+566    	; 0xa5a <navigation_direction_regulation+0x31a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	f4 de       	rcall	.-536    	; 0x612 <navigation_get_sensor>
     82a:	c8 2f       	mov	r28, r24
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	f0 de       	rcall	.-544    	; 0x612 <navigation_get_sensor>
     832:	d8 2f       	mov	r29, r24
     834:	c7 01       	movw	r24, r14
     836:	b6 01       	movw	r22, r12
     838:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <cos>
     83c:	6b 01       	movw	r12, r22
     83e:	7c 01       	movw	r14, r24
     840:	6d 2f       	mov	r22, r29
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	6c 0f       	add	r22, r28
     846:	71 1d       	adc	r23, r1
     848:	88 27       	eor	r24, r24
     84a:	77 fd       	sbrc	r23, 7
     84c:	80 95       	com	r24
     84e:	98 2f       	mov	r25, r24
     850:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatsisf>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	5f e3       	ldi	r21, 0x3F	; 63
     85c:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     860:	26 e6       	ldi	r18, 0x66	; 102
     862:	36 e6       	ldi	r19, 0x66	; 102
     864:	46 ed       	ldi	r20, 0xD6	; 214
     866:	50 e4       	ldi	r21, 0x40	; 64
     868:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__addsf3>
     86c:	a7 01       	movw	r20, r14
     86e:	96 01       	movw	r18, r12
     870:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	80 e2       	ldi	r24, 0x20	; 32
     87e:	92 e4       	ldi	r25, 0x42	; 66
     880:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__subsf3>
     884:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fixsfsi>
     888:	97 c0       	rjmp	.+302    	; 0x9b8 <navigation_direction_regulation+0x278>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	c1 de       	rcall	.-638    	; 0x612 <navigation_get_sensor>
     890:	c8 2f       	mov	r28, r24
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	bd de       	rcall	.-646    	; 0x612 <navigation_get_sensor>
     898:	2c 2f       	mov	r18, r28
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	a9 01       	movw	r20, r18
     89e:	48 1b       	sub	r20, r24
     8a0:	51 09       	sbc	r21, r1
     8a2:	ca 01       	movw	r24, r20
     8a4:	99 23       	and	r25, r25
     8a6:	1c f4       	brge	.+6      	; 0x8ae <navigation_direction_regulation+0x16e>
     8a8:	91 95       	neg	r25
     8aa:	81 95       	neg	r24
     8ac:	91 09       	sbc	r25, r1
     8ae:	0a 97       	sbiw	r24, 0x0a	; 10
     8b0:	c4 f5       	brge	.+112    	; 0x922 <navigation_direction_regulation+0x1e2>
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	ad de       	rcall	.-678    	; 0x612 <navigation_get_sensor>
     8b8:	82 33       	cpi	r24, 0x32	; 50
     8ba:	98 f5       	brcc	.+102    	; 0x922 <navigation_direction_regulation+0x1e2>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	a8 de       	rcall	.-688    	; 0x612 <navigation_get_sensor>
     8c2:	c8 2f       	mov	r28, r24
     8c4:	83 e0       	ldi	r24, 0x03	; 3
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a4 de       	rcall	.-696    	; 0x612 <navigation_get_sensor>
     8ca:	d8 2f       	mov	r29, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <cos>
     8d4:	6b 01       	movw	r12, r22
     8d6:	7c 01       	movw	r14, r24
     8d8:	6d 2f       	mov	r22, r29
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	6c 0f       	add	r22, r28
     8de:	71 1d       	adc	r23, r1
     8e0:	88 27       	eor	r24, r24
     8e2:	77 fd       	sbrc	r23, 7
     8e4:	80 95       	com	r24
     8e6:	98 2f       	mov	r25, r24
     8e8:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatsisf>
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     8f8:	26 e6       	ldi	r18, 0x66	; 102
     8fa:	36 e6       	ldi	r19, 0x66	; 102
     8fc:	46 ed       	ldi	r20, 0xD6	; 214
     8fe:	50 e4       	ldi	r21, 0x40	; 64
     900:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__addsf3>
     904:	a7 01       	movw	r20, r14
     906:	96 01       	movw	r18, r12
     908:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     90c:	9b 01       	movw	r18, r22
     90e:	ac 01       	movw	r20, r24
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 e2       	ldi	r24, 0x20	; 32
     916:	92 e4       	ldi	r25, 0x42	; 66
     918:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__subsf3>
     91c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fixsfsi>
     920:	4b c0       	rjmp	.+150    	; 0x9b8 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	75 de       	rcall	.-790    	; 0x612 <navigation_get_sensor>
     928:	c8 2f       	mov	r28, r24
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	71 de       	rcall	.-798    	; 0x612 <navigation_get_sensor>
     930:	2c 2f       	mov	r18, r28
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	a9 01       	movw	r20, r18
     936:	48 1b       	sub	r20, r24
     938:	51 09       	sbc	r21, r1
     93a:	ca 01       	movw	r24, r20
     93c:	99 23       	and	r25, r25
     93e:	1c f4       	brge	.+6      	; 0x946 <navigation_direction_regulation+0x206>
     940:	91 95       	neg	r25
     942:	81 95       	neg	r24
     944:	91 09       	sbc	r25, r1
     946:	0a 97       	sbiw	r24, 0x0a	; 10
     948:	0c f0       	brlt	.+2      	; 0x94c <navigation_direction_regulation+0x20c>
     94a:	87 c0       	rjmp	.+270    	; 0xa5a <navigation_direction_regulation+0x31a>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	60 de       	rcall	.-832    	; 0x612 <navigation_get_sensor>
     952:	82 33       	cpi	r24, 0x32	; 50
     954:	08 f0       	brcs	.+2      	; 0x958 <navigation_direction_regulation+0x218>
     956:	81 c0       	rjmp	.+258    	; 0xa5a <navigation_direction_regulation+0x31a>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	5a de       	rcall	.-844    	; 0x612 <navigation_get_sensor>
     95e:	c8 2f       	mov	r28, r24
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	56 de       	rcall	.-852    	; 0x612 <navigation_get_sensor>
     966:	d8 2f       	mov	r29, r24
     968:	c7 01       	movw	r24, r14
     96a:	b6 01       	movw	r22, r12
     96c:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <cos>
     970:	6b 01       	movw	r12, r22
     972:	7c 01       	movw	r14, r24
     974:	6d 2f       	mov	r22, r29
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	6c 0f       	add	r22, r28
     97a:	71 1d       	adc	r23, r1
     97c:	88 27       	eor	r24, r24
     97e:	77 fd       	sbrc	r23, 7
     980:	80 95       	com	r24
     982:	98 2f       	mov	r25, r24
     984:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatsisf>
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	5f e3       	ldi	r21, 0x3F	; 63
     990:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     994:	26 e6       	ldi	r18, 0x66	; 102
     996:	36 e6       	ldi	r19, 0x66	; 102
     998:	46 ed       	ldi	r20, 0xD6	; 214
     99a:	50 e4       	ldi	r21, 0x40	; 64
     99c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__addsf3>
     9a0:	a7 01       	movw	r20, r14
     9a2:	96 01       	movw	r18, r12
     9a4:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e2       	ldi	r20, 0x20	; 32
     9ae:	52 e4       	ldi	r21, 0x42	; 66
     9b0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__subsf3>
     9b4:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     9b8:	cb 01       	movw	r24, r22
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	03 97       	sbiw	r24, 0x03	; 3
     9be:	08 f4       	brcc	.+2      	; 0x9c2 <navigation_direction_regulation+0x282>
     9c0:	47 c0       	rjmp	.+142    	; 0xa50 <navigation_direction_regulation+0x310>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     9c2:	88 27       	eor	r24, r24
     9c4:	77 fd       	sbrc	r23, 7
     9c6:	80 95       	com	r24
     9c8:	98 2f       	mov	r25, r24
     9ca:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatsisf>
     9ce:	20 91 03 01 	lds	r18, 0x0103
     9d2:	30 91 04 01 	lds	r19, 0x0104
     9d6:	40 91 05 01 	lds	r20, 0x0105
     9da:	50 91 06 01 	lds	r21, 0x0106
     9de:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     9e2:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <atan>
     9e6:	c6 2e       	mov	r12, r22
     9e8:	d7 2e       	mov	r13, r23
     9ea:	e8 2e       	mov	r14, r24
     9ec:	f9 2e       	mov	r15, r25
		if(dir < 0)
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	a9 01       	movw	r20, r18
     9f4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__cmpsf2>
     9f8:	88 23       	and	r24, r24
     9fa:	7c f4       	brge	.+30     	; 0xa1a <navigation_direction_regulation+0x2da>
		{
			dir += 2*PI;
     9fc:	2b ed       	ldi	r18, 0xDB	; 219
     9fe:	3f e0       	ldi	r19, 0x0F	; 15
     a00:	49 ec       	ldi	r20, 0xC9	; 201
     a02:	50 e4       	ldi	r21, 0x40	; 64
     a04:	6c 2d       	mov	r22, r12
     a06:	7d 2d       	mov	r23, r13
     a08:	8e 2d       	mov	r24, r14
     a0a:	9f 2d       	mov	r25, r15
     a0c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__addsf3>
     a10:	c6 2e       	mov	r12, r22
     a12:	d7 2e       	mov	r13, r23
     a14:	e8 2e       	mov	r14, r24
     a16:	f9 2e       	mov	r15, r25
     a18:	24 c0       	rjmp	.+72     	; 0xa62 <navigation_direction_regulation+0x322>
		} else if(dir >= 2*PI)
     a1a:	2b ed       	ldi	r18, 0xDB	; 219
     a1c:	3f e0       	ldi	r19, 0x0F	; 15
     a1e:	49 ec       	ldi	r20, 0xC9	; 201
     a20:	50 e4       	ldi	r21, 0x40	; 64
     a22:	6c 2d       	mov	r22, r12
     a24:	7d 2d       	mov	r23, r13
     a26:	8e 2d       	mov	r24, r14
     a28:	9f 2d       	mov	r25, r15
     a2a:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     a2e:	88 23       	and	r24, r24
     a30:	c4 f0       	brlt	.+48     	; 0xa62 <navigation_direction_regulation+0x322>
		{
			dir -= 2*PI;
     a32:	2b ed       	ldi	r18, 0xDB	; 219
     a34:	3f e0       	ldi	r19, 0x0F	; 15
     a36:	49 ec       	ldi	r20, 0xC9	; 201
     a38:	50 e4       	ldi	r21, 0x40	; 64
     a3a:	6c 2d       	mov	r22, r12
     a3c:	7d 2d       	mov	r23, r13
     a3e:	8e 2d       	mov	r24, r14
     a40:	9f 2d       	mov	r25, r15
     a42:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__subsf3>
     a46:	c6 2e       	mov	r12, r22
     a48:	d7 2e       	mov	r13, r23
     a4a:	e8 2e       	mov	r14, r24
     a4c:	f9 2e       	mov	r15, r25
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <navigation_direction_regulation+0x322>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     a50:	c1 2c       	mov	r12, r1
     a52:	d1 2c       	mov	r13, r1
     a54:	e1 2c       	mov	r14, r1
     a56:	f1 2c       	mov	r15, r1
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <navigation_direction_regulation+0x322>
     a5a:	c1 2c       	mov	r12, r1
     a5c:	d1 2c       	mov	r13, r1
     a5e:	e1 2c       	mov	r14, r1
     a60:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     a62:	6c 2d       	mov	r22, r12
     a64:	7d 2d       	mov	r23, r13
     a66:	8e 2d       	mov	r24, r14
     a68:	9f 2d       	mov	r25, r15
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	cf 90       	pop	r12
     a76:	08 95       	ret

00000a78 <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     a80:	80 91 07 01 	lds	r24, 0x0107
     a84:	88 23       	and	r24, r24
     a86:	09 f4       	brne	.+2      	; 0xa8a <navigation_angle_offset+0x12>
     a88:	6c c0       	rjmp	.+216    	; 0xb62 <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	c1 dd       	rcall	.-1150   	; 0x612 <navigation_get_sensor>
     a90:	f8 2e       	mov	r15, r24
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	bd dd       	rcall	.-1158   	; 0x612 <navigation_get_sensor>
     a98:	2f 2d       	mov	r18, r15
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	a9 01       	movw	r20, r18
     a9e:	48 1b       	sub	r20, r24
     aa0:	51 09       	sbc	r21, r1
     aa2:	ca 01       	movw	r24, r20
     aa4:	99 23       	and	r25, r25
     aa6:	1c f4       	brge	.+6      	; 0xaae <navigation_angle_offset+0x36>
     aa8:	91 95       	neg	r25
     aaa:	81 95       	neg	r24
     aac:	91 09       	sbc	r25, r1
     aae:	0a 97       	sbiw	r24, 0x0a	; 10
     ab0:	0c f5       	brge	.+66     	; 0xaf4 <navigation_angle_offset+0x7c>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	ad dd       	rcall	.-1190   	; 0x612 <navigation_get_sensor>
     ab8:	82 33       	cpi	r24, 0x32	; 50
     aba:	e0 f4       	brcc	.+56     	; 0xaf4 <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a8 dd       	rcall	.-1200   	; 0x612 <navigation_get_sensor>
     ac2:	f8 2e       	mov	r15, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a4 dd       	rcall	.-1208   	; 0x612 <navigation_get_sensor>
     aca:	6f 2d       	mov	r22, r15
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	68 1b       	sub	r22, r24
     ad0:	71 09       	sbc	r23, r1
     ad2:	88 27       	eor	r24, r24
     ad4:	77 fd       	sbrc	r23, 7
     ad6:	80 95       	com	r24
     ad8:	98 2f       	mov	r25, r24
     ada:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatsisf>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e8       	ldi	r20, 0x80	; 128
     ae4:	5d e3       	ldi	r21, 0x3D	; 61
     ae6:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     aea:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <atan>
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24
     af2:	a0 c0       	rjmp	.+320    	; 0xc34 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	8c dd       	rcall	.-1256   	; 0x612 <navigation_get_sensor>
     afa:	f8 2e       	mov	r15, r24
     afc:	83 e0       	ldi	r24, 0x03	; 3
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	88 dd       	rcall	.-1264   	; 0x612 <navigation_get_sensor>
     b02:	2f 2d       	mov	r18, r15
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	a9 01       	movw	r20, r18
     b08:	48 1b       	sub	r20, r24
     b0a:	51 09       	sbc	r21, r1
     b0c:	ca 01       	movw	r24, r20
     b0e:	99 23       	and	r25, r25
     b10:	1c f4       	brge	.+6      	; 0xb18 <navigation_angle_offset+0xa0>
     b12:	91 95       	neg	r25
     b14:	81 95       	neg	r24
     b16:	91 09       	sbc	r25, r1
     b18:	0a 97       	sbiw	r24, 0x0a	; 10
     b1a:	0c f0       	brlt	.+2      	; 0xb1e <navigation_angle_offset+0xa6>
     b1c:	9a c0       	rjmp	.+308    	; 0xc52 <navigation_angle_offset+0x1da>
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	77 dd       	rcall	.-1298   	; 0x612 <navigation_get_sensor>
     b24:	82 33       	cpi	r24, 0x32	; 50
     b26:	08 f0       	brcs	.+2      	; 0xb2a <navigation_angle_offset+0xb2>
     b28:	94 c0       	rjmp	.+296    	; 0xc52 <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	71 dd       	rcall	.-1310   	; 0x612 <navigation_get_sensor>
     b30:	f8 2e       	mov	r15, r24
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	6d dd       	rcall	.-1318   	; 0x612 <navigation_get_sensor>
     b38:	6f 2d       	mov	r22, r15
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	68 1b       	sub	r22, r24
     b3e:	71 09       	sbc	r23, r1
     b40:	88 27       	eor	r24, r24
     b42:	77 fd       	sbrc	r23, 7
     b44:	80 95       	com	r24
     b46:	98 2f       	mov	r25, r24
     b48:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatsisf>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e8       	ldi	r20, 0x80	; 128
     b52:	5d e3       	ldi	r21, 0x3D	; 61
     b54:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     b58:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <atan>
     b5c:	6b 01       	movw	r12, r22
     b5e:	7c 01       	movw	r14, r24
     b60:	69 c0       	rjmp	.+210    	; 0xc34 <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	55 dd       	rcall	.-1366   	; 0x612 <navigation_get_sensor>
     b68:	f8 2e       	mov	r15, r24
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	51 dd       	rcall	.-1374   	; 0x612 <navigation_get_sensor>
     b70:	2f 2d       	mov	r18, r15
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	a9 01       	movw	r20, r18
     b76:	48 1b       	sub	r20, r24
     b78:	51 09       	sbc	r21, r1
     b7a:	ca 01       	movw	r24, r20
     b7c:	99 23       	and	r25, r25
     b7e:	1c f4       	brge	.+6      	; 0xb86 <navigation_angle_offset+0x10e>
     b80:	91 95       	neg	r25
     b82:	81 95       	neg	r24
     b84:	91 09       	sbc	r25, r1
     b86:	0a 97       	sbiw	r24, 0x0a	; 10
     b88:	0c f5       	brge	.+66     	; 0xbcc <navigation_angle_offset+0x154>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	41 dd       	rcall	.-1406   	; 0x612 <navigation_get_sensor>
     b90:	82 33       	cpi	r24, 0x32	; 50
     b92:	e0 f4       	brcc	.+56     	; 0xbcc <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	3c dd       	rcall	.-1416   	; 0x612 <navigation_get_sensor>
     b9a:	f8 2e       	mov	r15, r24
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	38 dd       	rcall	.-1424   	; 0x612 <navigation_get_sensor>
     ba2:	6f 2d       	mov	r22, r15
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	68 1b       	sub	r22, r24
     ba8:	71 09       	sbc	r23, r1
     baa:	88 27       	eor	r24, r24
     bac:	77 fd       	sbrc	r23, 7
     bae:	80 95       	com	r24
     bb0:	98 2f       	mov	r25, r24
     bb2:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatsisf>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e8       	ldi	r20, 0x80	; 128
     bbc:	5d e3       	ldi	r21, 0x3D	; 61
     bbe:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     bc2:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <atan>
     bc6:	6b 01       	movw	r12, r22
     bc8:	7c 01       	movw	r14, r24
     bca:	34 c0       	rjmp	.+104    	; 0xc34 <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	20 dd       	rcall	.-1472   	; 0x612 <navigation_get_sensor>
     bd2:	f8 2e       	mov	r15, r24
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	1c dd       	rcall	.-1480   	; 0x612 <navigation_get_sensor>
     bda:	2f 2d       	mov	r18, r15
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	a9 01       	movw	r20, r18
     be0:	48 1b       	sub	r20, r24
     be2:	51 09       	sbc	r21, r1
     be4:	ca 01       	movw	r24, r20
     be6:	99 23       	and	r25, r25
     be8:	1c f4       	brge	.+6      	; 0xbf0 <navigation_angle_offset+0x178>
     bea:	91 95       	neg	r25
     bec:	81 95       	neg	r24
     bee:	91 09       	sbc	r25, r1
     bf0:	0a 97       	sbiw	r24, 0x0a	; 10
     bf2:	7c f5       	brge	.+94     	; 0xc52 <navigation_angle_offset+0x1da>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0c dd       	rcall	.-1512   	; 0x612 <navigation_get_sensor>
     bfa:	82 33       	cpi	r24, 0x32	; 50
     bfc:	50 f5       	brcc	.+84     	; 0xc52 <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	07 dd       	rcall	.-1522   	; 0x612 <navigation_get_sensor>
     c04:	f8 2e       	mov	r15, r24
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	03 dd       	rcall	.-1530   	; 0x612 <navigation_get_sensor>
     c0c:	6f 2d       	mov	r22, r15
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	68 1b       	sub	r22, r24
     c12:	71 09       	sbc	r23, r1
     c14:	88 27       	eor	r24, r24
     c16:	77 fd       	sbrc	r23, 7
     c18:	80 95       	com	r24
     c1a:	98 2f       	mov	r25, r24
     c1c:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatsisf>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e8       	ldi	r20, 0x80	; 128
     c26:	5d e3       	ldi	r21, 0x3D	; 61
     c28:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     c2c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <atan>
     c30:	6b 01       	movw	r12, r22
     c32:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	9f 77       	andi	r25, 0x7F	; 127
     c3a:	29 e2       	ldi	r18, 0x29	; 41
     c3c:	3c e5       	ldi	r19, 0x5C	; 92
     c3e:	4f e8       	ldi	r20, 0x8F	; 143
     c40:	5d e3       	ldi	r21, 0x3D	; 61
     c42:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     c46:	18 16       	cp	r1, r24
     c48:	3c f0       	brlt	.+14     	; 0xc58 <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     c4a:	c1 2c       	mov	r12, r1
     c4c:	d1 2c       	mov	r13, r1
     c4e:	76 01       	movw	r14, r12
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <navigation_angle_offset+0x1e0>
     c52:	c1 2c       	mov	r12, r1
     c54:	d1 2c       	mov	r13, r1
     c56:	76 01       	movw	r14, r12
     c58:	7c 2d       	mov	r23, r12
	}
}
     c5a:	67 2f       	mov	r22, r23
     c5c:	7d 2d       	mov	r23, r13
     c5e:	8e 2d       	mov	r24, r14
     c60:	9f 2d       	mov	r25, r15
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	08 95       	ret

00000c6c <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	0b b6       	in	r0, 0x3b	; 59
     c78:	0f 92       	push	r0
     c7a:	2f 93       	push	r18
     c7c:	3f 93       	push	r19
     c7e:	4f 93       	push	r20
     c80:	5f 93       	push	r21
     c82:	6f 93       	push	r22
     c84:	7f 93       	push	r23
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	af 93       	push	r26
     c8c:	bf 93       	push	r27
     c8e:	ef 93       	push	r30
     c90:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	79 dc       	rcall	.-1806   	; 0x588 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	7d dc       	rcall	.-1798   	; 0x594 <navigation_set_autonomous_walk>
}
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0b be       	out	0x3b, r0	; 59
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	0b b6       	in	r0, 0x3b	; 59
     ccc:	0f 92       	push	r0
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	4f dc       	rcall	.-1890   	; 0x588 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	53 dc       	rcall	.-1882   	; 0x594 <navigation_set_autonomous_walk>
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0b be       	out	0x3b, r0	; 59
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
     d10:	1f 90       	pop	r1
     d12:	18 95       	reti

00000d14 <main>:
//Flag to know if to send the autonom settings to the computer.
uint8_t autonom_flag = 1;

int main(void)
{
	USART_init();
     d14:	de d4       	rcall	.+2492   	; 0x16d2 <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); //<<<????>>> send messages from gang to the display, not the computer
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	e7 d4       	rcall	.+2510   	; 0x16ea <USART_set_twi_message_destination>
	sei();
     d1c:	78 94       	sei
	TWI_init(ST_ADDRESS);
     d1e:	80 e2       	ldi	r24, 0x20	; 32
     d20:	70 d1       	rcall	.+736    	; 0x1002 <TWI_init>
	init_counters();
     d22:	b2 db       	rcall	.-2204   	; 0x488 <init_counters>
	
	LED_INIT;
     d24:	81 b1       	in	r24, 0x01	; 1
     d26:	83 60       	ori	r24, 0x03	; 3
     d28:	81 b9       	out	0x01, r24	; 1
     d2a:	87 b1       	in	r24, 0x07	; 7
     d2c:	80 6c       	ori	r24, 0xC0	; 192
     d2e:	87 b9       	out	0x07, r24	; 7
	
	//Buttons
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //For emphasize
     d30:	81 b1       	in	r24, 0x01	; 1
     d32:	8f 73       	andi	r24, 0x3F	; 63
     d34:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     d36:	e8 e6       	ldi	r30, 0x68	; 104
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //mask for porta6 and porta7
     d40:	eb e6       	ldi	r30, 0x6B	; 107
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	80 6c       	ori	r24, 0xC0	; 192
     d48:	80 83       	st	Z, r24
     d4a:	2f ef       	ldi	r18, 0xFF	; 255
     d4c:	83 e2       	ldi	r24, 0x23	; 35
     d4e:	94 ef       	ldi	r25, 0xF4	; 244
     d50:	21 50       	subi	r18, 0x01	; 1
     d52:	80 40       	sbci	r24, 0x00	; 0
     d54:	90 40       	sbci	r25, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <main+0x3c>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <main+0x46>
     d5a:	00 00       	nop
	
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	1a dc       	rcall	.-1996   	; 0x594 <navigation_set_autonomous_walk>
	//set_counter_1(100);
	set_counter_2(200);
     d60:	88 ec       	ldi	r24, 0xC8	; 200
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	7f db       	rcall	.-2306   	; 0x464 <set_counter_2>
				USART_SendCommand();
			}
			
			if(TWI_elevation_flag())
			{
				LED0_TOGGLE;
     d66:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else
		{
			if(TWI_command_flag())
			{
				LED1_TOGGLE;
     d68:	c2 e0       	ldi	r28, 0x02	; 2
			LED1_TOGGLE;
			navigation_fill_buffer();
		}*/
		
		
		if(autonom_flag)
     d6a:	80 91 08 01 	lds	r24, 0x0108
     d6e:	88 23       	and	r24, r24
     d70:	31 f0       	breq	.+12     	; 0xd7e <main+0x6a>
		{
			TWI_send_autonom_settings(C_ADDRESS, navigation_left_algorithm());
     d72:	07 dc       	rcall	.-2034   	; 0x582 <navigation_left_algorithm>
     d74:	68 2f       	mov	r22, r24
     d76:	80 e8       	ldi	r24, 0x80	; 128
     d78:	67 d1       	rcall	.+718    	; 0x1048 <TWI_send_autonom_settings>
			autonom_flag = 0;
     d7a:	10 92 08 01 	sts	0x0108, r1
		}
		
		if(navigation_autonomous_walk() == 1)
     d7e:	07 dc       	rcall	.-2034   	; 0x58e <navigation_autonomous_walk>
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	49 f4       	brne	.+18     	; 0xd96 <main+0x82>
		{
			if(TWI_control_settings_flag())
     d84:	c5 d2       	rcall	.+1418   	; 0x1310 <TWI_control_settings_flag>
     d86:	88 23       	and	r24, r24
     d88:	21 f0       	breq	.+8      	; 0xd92 <main+0x7e>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	ab d2       	rcall	.+1366   	; 0x12e6 <TWI_get_control_setting>
     d90:	e9 db       	rcall	.-2094   	; 0x564 <navigation_set_Kp>
			}
			autonomouswalk_walk();
     d92:	d2 da       	rcall	.-2652   	; 0x338 <autonomouswalk_walk>
     d94:	ea cf       	rjmp	.-44     	; 0xd6a <main+0x56>
		}
		else
		{
			if(TWI_command_flag())
     d96:	b2 d2       	rcall	.+1380   	; 0x12fc <TWI_command_flag>
     d98:	88 23       	and	r24, r24
     d9a:	21 f0       	breq	.+8      	; 0xda4 <main+0x90>
			{
				LED1_TOGGLE;
     d9c:	82 b1       	in	r24, 0x02	; 2
     d9e:	8c 27       	eor	r24, r28
     da0:	82 b9       	out	0x02, r24	; 2
				USART_SendCommand();
     da2:	6e d5       	rcall	.+2780   	; 0x1880 <USART_SendCommand>
			}
			
			if(TWI_elevation_flag())
     da4:	c9 d2       	rcall	.+1426   	; 0x1338 <TWI_elevation_flag>
     da6:	88 23       	and	r24, r24
     da8:	21 f0       	breq	.+8      	; 0xdb2 <main+0x9e>
			{
				LED0_TOGGLE;
     daa:	82 b1       	in	r24, 0x02	; 2
     dac:	8d 27       	eor	r24, r29
     dae:	82 b9       	out	0x02, r24	; 2
				USART_SendElevation();
     db0:	79 d5       	rcall	.+2802   	; 0x18a4 <USART_SendElevation>
			}
		USART_DecodeRxFIFO();
     db2:	bb d7       	rcall	.+3958   	; 0x1d2a <USART_DecodeRxFIFO>
     db4:	da cf       	rjmp	.-76     	; 0xd6a <main+0x56>

00000db6 <__vector_13>:
	}
}
//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
	//USART_RequestGyro();
	TCNT1 = 0;
     dc0:	10 92 85 00 	sts	0x0085, r1
     dc4:	10 92 84 00 	sts	0x0084, r1
}
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	0b b6       	in	r0, 0x3b	; 59
     dde:	0f 92       	push	r0
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
	if(TWI_autonom_settings_flag())
     df8:	95 d2       	rcall	.+1322   	; 0x1324 <TWI_autonom_settings_flag>
     dfa:	88 23       	and	r24, r24
     dfc:	91 f0       	breq	.+36     	; 0xe22 <__vector_32+0x50>
	{
		uint8_t sett = TWI_get_autonom_settings();
     dfe:	78 d2       	rcall	.+1264   	; 0x12f0 <TWI_get_autonom_settings>
		if(sett == 0)
     e00:	81 11       	cpse	r24, r1
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <__vector_32+0x36>
		{
			navigation_set_autonomous_walk(0);
     e04:	c7 db       	rcall	.-2162   	; 0x594 <navigation_set_autonomous_walk>
     e06:	0a c0       	rjmp	.+20     	; 0xe1c <__vector_32+0x4a>
		}
		else if(sett == 1)
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	21 f4       	brne	.+8      	; 0xe14 <__vector_32+0x42>
		{
			navigation_set_autonomous_walk(1);
     e0c:	c3 db       	rcall	.-2170   	; 0x594 <navigation_set_autonomous_walk>
			navigation_set_algorithm(1);
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	bb db       	rcall	.-2186   	; 0x588 <navigation_set_algorithm>
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <__vector_32+0x4a>
		}
		else //sett == 2
		{
			navigation_set_autonomous_walk(1);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	be db       	rcall	.-2180   	; 0x594 <navigation_set_autonomous_walk>
			navigation_set_algorithm(0);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	b6 db       	rcall	.-2196   	; 0x588 <navigation_set_algorithm>
		}
		autonom_flag = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	80 93 08 01 	sts	0x0108, r24
	}
	TCNT3 = 0;
     e22:	10 92 95 00 	sts	0x0095, r1
     e26:	10 92 94 00 	sts	0x0094, r1
}
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	0f 90       	pop	r0
     e44:	0b be       	out	0x3b, r0	; 59
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_4>:

//-------------------Buttons PinChange interrupt---------------------

ISR(PCINT0_vect)
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	0b b6       	in	r0, 0x3b	; 59
     e5c:	0f 92       	push	r0
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     e76:	06 9b       	sbis	0x00, 6	; 0
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	8b db       	rcall	.-2282   	; 0x594 <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	83 db       	rcall	.-2298   	; 0x588 <navigation_set_algorithm>
		//test
		LED2_TOGGLE;
     e82:	98 b1       	in	r25, 0x08	; 8
     e84:	80 e4       	ldi	r24, 0x40	; 64
     e86:	89 27       	eor	r24, r25
     e88:	88 b9       	out	0x08, r24	; 8
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <__vector_4+0x4e>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     e8c:	07 9b       	sbis	0x00, 7	; 0
     e8e:	07 c0       	rjmp	.+14     	; 0xe9e <__vector_4+0x4e>
	{
		navigation_set_autonomous_walk(1);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 db       	rcall	.-2304   	; 0x594 <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	78 db       	rcall	.-2320   	; 0x588 <navigation_set_algorithm>
		//test
		LED3_TOGGLE;
     e98:	88 b1       	in	r24, 0x08	; 8
     e9a:	80 58       	subi	r24, 0x80	; 128
     e9c:	88 b9       	out	0x08, r24	; 8
	}
	autonom_flag = 1;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	80 93 08 01 	sts	0x0108, r24
}
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0b be       	out	0x3b, r0	; 59
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <set_twi_reciever_enable>:
	
	//Do something with the message here... Send to display for now
	TWI_send_string_fixed_length(S_ADDRESS, msg, length);
	
	return 0;
}
     eca:	85 e4       	ldi	r24, 0x45	; 69
     ecc:	80 93 bc 00 	sts	0x00BC, r24
     ed0:	08 95       	ret

00000ed2 <clear_int>:
     ed2:	81 ec       	ldi	r24, 0xC1	; 193
     ed4:	80 93 bc 00 	sts	0x00BC, r24
     ed8:	08 95       	ret

00000eda <start_bus>:
     eda:	84 ea       	ldi	r24, 0xA4	; 164
     edc:	80 93 bc 00 	sts	0x00BC, r24
     ee0:	08 95       	ret

00000ee2 <stop_bus>:
     ee2:	85 ed       	ldi	r24, 0xD5	; 213
     ee4:	80 93 bc 00 	sts	0x00BC, r24
     ee8:	08 95       	ret

00000eea <Error>:
     eea:	80 91 b9 00 	lds	r24, 0x00B9
     eee:	88 7f       	andi	r24, 0xF8	; 248
     ef0:	88 33       	cpi	r24, 0x38	; 56
     ef2:	09 f0       	breq	.+2      	; 0xef6 <Error+0xc>
     ef4:	f6 cf       	rjmp	.-20     	; 0xee2 <stop_bus>
     ef6:	ed cf       	rjmp	.-38     	; 0xed2 <clear_int>

00000ef8 <get_data>:
     ef8:	80 91 bb 00 	lds	r24, 0x00BB
     efc:	08 95       	ret

00000efe <wait_for_bus>:
     efe:	ec eb       	ldi	r30, 0xBC	; 188
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	88 23       	and	r24, r24
     f06:	ec f7       	brge	.-6      	; 0xf02 <wait_for_bus+0x4>
     f08:	08 95       	ret

00000f0a <send_data_and_wait>:
     f0a:	80 93 bb 00 	sts	0x00BB, r24
     f0e:	84 e8       	ldi	r24, 0x84	; 132
     f10:	80 93 bc 00 	sts	0x00BC, r24
     f14:	f4 cf       	rjmp	.-24     	; 0xefe <wait_for_bus>

00000f16 <stop_twi>:
     f16:	10 92 38 15 	sts	0x1538, r1
     f1a:	10 92 37 15 	sts	0x1537, r1
     f1e:	10 92 42 15 	sts	0x1542, r1
     f22:	10 92 41 15 	sts	0x1541, r1
     f26:	10 92 2d 15 	sts	0x152D, r1
     f2a:	10 92 2c 15 	sts	0x152C, r1
     f2e:	10 92 32 15 	sts	0x1532, r1
     f32:	10 92 31 15 	sts	0x1531, r1
     f36:	10 92 35 15 	sts	0x1535, r1
     f3a:	10 92 34 15 	sts	0x1534, r1
     f3e:	08 95       	ret

00000f40 <reset_TWI>:
     f40:	ec eb       	ldi	r30, 0xBC	; 188
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 6c       	ori	r24, 0xC0	; 192
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <get_control_settings_from_bus>:
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	c0 91 31 15 	lds	r28, 0x1531
     f54:	d0 91 32 15 	lds	r29, 0x1532
     f58:	cf df       	rcall	.-98     	; 0xef8 <get_data>
     f5a:	c2 5d       	subi	r28, 0xD2	; 210
     f5c:	da 4e       	sbci	r29, 0xEA	; 234
     f5e:	88 83       	st	Y, r24
     f60:	10 92 32 15 	sts	0x1532, r1
     f64:	10 92 31 15 	sts	0x1531, r1
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <get_autonom_settings_from_bus>:
     f6e:	c4 df       	rcall	.-120    	; 0xef8 <get_data>
     f70:	80 93 2c 14 	sts	0x142C, r24
     f74:	08 95       	ret

00000f76 <get_char_from_bus>:
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	c0 91 2c 15 	lds	r28, 0x152C
     f7e:	d0 91 2d 15 	lds	r29, 0x152D
     f82:	ba df       	rcall	.-140    	; 0xef8 <get_data>
     f84:	c3 5d       	subi	r28, 0xD3	; 211
     f86:	db 4e       	sbci	r29, 0xEB	; 235
     f88:	88 83       	st	Y, r24
     f8a:	80 91 2c 15 	lds	r24, 0x152C
     f8e:	90 91 2d 15 	lds	r25, 0x152D
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	90 93 2d 15 	sts	0x152D, r25
     f98:	80 93 2c 15 	sts	0x152C, r24
     f9c:	90 93 3d 15 	sts	0x153D, r25
     fa0:	80 93 3c 15 	sts	0x153C, r24
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <get_sensor_from_bus>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	c0 91 41 15 	lds	r28, 0x1541
     fb2:	d0 91 42 15 	lds	r29, 0x1542
     fb6:	c8 30       	cpi	r28, 0x08	; 8
     fb8:	d1 05       	cpc	r29, r1
     fba:	99 f4       	brne	.+38     	; 0xfe2 <get_sensor_from_bus+0x38>
     fbc:	e3 e4       	ldi	r30, 0x43	; 67
     fbe:	f5 e1       	ldi	r31, 0x15	; 21
     fc0:	ab e4       	ldi	r26, 0x4B	; 75
     fc2:	b5 e1       	ldi	r27, 0x15	; 21
     fc4:	8b e4       	ldi	r24, 0x4B	; 75
     fc6:	95 e1       	ldi	r25, 0x15	; 21
     fc8:	21 91       	ld	r18, Z+
     fca:	2d 93       	st	X+, r18
     fcc:	e8 17       	cp	r30, r24
     fce:	f9 07       	cpc	r31, r25
     fd0:	d9 f7       	brne	.-10     	; 0xfc8 <get_sensor_from_bus+0x1e>
     fd2:	92 df       	rcall	.-220    	; 0xef8 <get_data>
     fd4:	80 93 3b 15 	sts	0x153B, r24
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	80 93 e0 13 	sts	0x13E0, r24
     fde:	ee da       	rcall	.-2596   	; 0x5bc <navigation_fill_buffer>
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <get_sensor_from_bus+0x52>
     fe2:	8a df       	rcall	.-236    	; 0xef8 <get_data>
     fe4:	cd 5b       	subi	r28, 0xBD	; 189
     fe6:	da 4e       	sbci	r29, 0xEA	; 234
     fe8:	88 83       	st	Y, r24
     fea:	80 91 41 15 	lds	r24, 0x1541
     fee:	90 91 42 15 	lds	r25, 0x1542
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	90 93 42 15 	sts	0x1542, r25
     ff8:	80 93 41 15 	sts	0x1541, r24
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <TWI_init>:
    1002:	80 93 33 15 	sts	0x1533, r24
    1006:	80 34       	cpi	r24, 0x40	; 64
    1008:	79 f0       	breq	.+30     	; 0x1028 <TWI_init+0x26>
    100a:	80 38       	cpi	r24, 0x80	; 128
    100c:	19 f0       	breq	.+6      	; 0x1014 <TWI_init+0x12>
    100e:	80 32       	cpi	r24, 0x20	; 32
    1010:	d1 f4       	brne	.+52     	; 0x1046 <TWI_init+0x44>
    1012:	12 c0       	rjmp	.+36     	; 0x1038 <TWI_init+0x36>
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	88 b9       	out	0x08, r24	; 8
    1018:	58 df       	rcall	.-336    	; 0xeca <set_twi_reciever_enable>
    101a:	8f e3       	ldi	r24, 0x3F	; 63
    101c:	80 93 b8 00 	sts	0x00B8, r24
    1020:	81 e8       	ldi	r24, 0x81	; 129
    1022:	80 93 ba 00 	sts	0x00BA, r24
    1026:	08 95       	ret
    1028:	8f e3       	ldi	r24, 0x3F	; 63
    102a:	80 93 b8 00 	sts	0x00B8, r24
    102e:	4d df       	rcall	.-358    	; 0xeca <set_twi_reciever_enable>
    1030:	80 e4       	ldi	r24, 0x40	; 64
    1032:	80 93 ba 00 	sts	0x00BA, r24
    1036:	08 95       	ret
    1038:	8f e3       	ldi	r24, 0x3F	; 63
    103a:	80 93 b8 00 	sts	0x00B8, r24
    103e:	45 df       	rcall	.-374    	; 0xeca <set_twi_reciever_enable>
    1040:	81 e2       	ldi	r24, 0x21	; 33
    1042:	80 93 ba 00 	sts	0x00BA, r24
    1046:	08 95       	ret

00001048 <TWI_send_autonom_settings>:
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	c8 2f       	mov	r28, r24
    104e:	d6 2f       	mov	r29, r22
    1050:	44 df       	rcall	.-376    	; 0xeda <start_bus>
    1052:	55 df       	rcall	.-342    	; 0xefe <wait_for_bus>
    1054:	90 91 b9 00 	lds	r25, 0x00B9
    1058:	98 7f       	andi	r25, 0xF8	; 248
    105a:	98 30       	cpi	r25, 0x08	; 8
    105c:	19 f0       	breq	.+6      	; 0x1064 <TWI_send_autonom_settings+0x1c>
    105e:	45 df       	rcall	.-374    	; 0xeea <Error>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	20 c0       	rjmp	.+64     	; 0x10a4 <TWI_send_autonom_settings+0x5c>
    1064:	8c 2f       	mov	r24, r28
    1066:	51 df       	rcall	.-350    	; 0xf0a <send_data_and_wait>
    1068:	80 91 b9 00 	lds	r24, 0x00B9
    106c:	88 7f       	andi	r24, 0xF8	; 248
    106e:	88 31       	cpi	r24, 0x18	; 24
    1070:	19 f0       	breq	.+6      	; 0x1078 <TWI_send_autonom_settings+0x30>
    1072:	3b df       	rcall	.-394    	; 0xeea <Error>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	16 c0       	rjmp	.+44     	; 0x10a4 <TWI_send_autonom_settings+0x5c>
    1078:	85 e0       	ldi	r24, 0x05	; 5
    107a:	47 df       	rcall	.-370    	; 0xf0a <send_data_and_wait>
    107c:	80 91 b9 00 	lds	r24, 0x00B9
    1080:	88 7f       	andi	r24, 0xF8	; 248
    1082:	88 32       	cpi	r24, 0x28	; 40
    1084:	19 f0       	breq	.+6      	; 0x108c <TWI_send_autonom_settings+0x44>
    1086:	31 df       	rcall	.-414    	; 0xeea <Error>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0c c0       	rjmp	.+24     	; 0x10a4 <TWI_send_autonom_settings+0x5c>
    108c:	8d 2f       	mov	r24, r29
    108e:	3d df       	rcall	.-390    	; 0xf0a <send_data_and_wait>
    1090:	80 91 b9 00 	lds	r24, 0x00B9
    1094:	88 7f       	andi	r24, 0xF8	; 248
    1096:	88 32       	cpi	r24, 0x28	; 40
    1098:	19 f0       	breq	.+6      	; 0x10a0 <TWI_send_autonom_settings+0x58>
    109a:	27 df       	rcall	.-434    	; 0xeea <Error>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <TWI_send_autonom_settings+0x5c>
    10a0:	20 df       	rcall	.-448    	; 0xee2 <stop_bus>
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <TWI_send_command>:
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	c8 2f       	mov	r28, r24
    10b2:	d6 2f       	mov	r29, r22
    10b4:	14 2f       	mov	r17, r20
    10b6:	11 df       	rcall	.-478    	; 0xeda <start_bus>
    10b8:	22 df       	rcall	.-444    	; 0xefe <wait_for_bus>
    10ba:	90 91 b9 00 	lds	r25, 0x00B9
    10be:	98 7f       	andi	r25, 0xF8	; 248
    10c0:	98 30       	cpi	r25, 0x08	; 8
    10c2:	19 f0       	breq	.+6      	; 0x10ca <TWI_send_command+0x20>
    10c4:	12 df       	rcall	.-476    	; 0xeea <Error>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	34 c0       	rjmp	.+104    	; 0x1132 <TWI_send_command+0x88>
    10ca:	80 e2       	ldi	r24, 0x20	; 32
    10cc:	1e df       	rcall	.-452    	; 0xf0a <send_data_and_wait>
    10ce:	80 91 b9 00 	lds	r24, 0x00B9
    10d2:	88 7f       	andi	r24, 0xF8	; 248
    10d4:	88 31       	cpi	r24, 0x18	; 24
    10d6:	19 f0       	breq	.+6      	; 0x10de <TWI_send_command+0x34>
    10d8:	08 df       	rcall	.-496    	; 0xeea <Error>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	2a c0       	rjmp	.+84     	; 0x1132 <TWI_send_command+0x88>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	14 df       	rcall	.-472    	; 0xf0a <send_data_and_wait>
    10e2:	80 91 b9 00 	lds	r24, 0x00B9
    10e6:	88 7f       	andi	r24, 0xF8	; 248
    10e8:	88 32       	cpi	r24, 0x28	; 40
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <TWI_send_command+0x48>
    10ec:	fe de       	rcall	.-516    	; 0xeea <Error>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	20 c0       	rjmp	.+64     	; 0x1132 <TWI_send_command+0x88>
    10f2:	8c 2f       	mov	r24, r28
    10f4:	0a df       	rcall	.-492    	; 0xf0a <send_data_and_wait>
    10f6:	80 91 b9 00 	lds	r24, 0x00B9
    10fa:	88 7f       	andi	r24, 0xF8	; 248
    10fc:	88 32       	cpi	r24, 0x28	; 40
    10fe:	19 f0       	breq	.+6      	; 0x1106 <TWI_send_command+0x5c>
    1100:	f4 de       	rcall	.-536    	; 0xeea <Error>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	16 c0       	rjmp	.+44     	; 0x1132 <TWI_send_command+0x88>
    1106:	8d 2f       	mov	r24, r29
    1108:	00 df       	rcall	.-512    	; 0xf0a <send_data_and_wait>
    110a:	80 91 b9 00 	lds	r24, 0x00B9
    110e:	88 7f       	andi	r24, 0xF8	; 248
    1110:	88 32       	cpi	r24, 0x28	; 40
    1112:	19 f0       	breq	.+6      	; 0x111a <TWI_send_command+0x70>
    1114:	ea de       	rcall	.-556    	; 0xeea <Error>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	0c c0       	rjmp	.+24     	; 0x1132 <TWI_send_command+0x88>
    111a:	81 2f       	mov	r24, r17
    111c:	f6 de       	rcall	.-532    	; 0xf0a <send_data_and_wait>
    111e:	80 91 b9 00 	lds	r24, 0x00B9
    1122:	88 7f       	andi	r24, 0xF8	; 248
    1124:	88 32       	cpi	r24, 0x28	; 40
    1126:	19 f0       	breq	.+6      	; 0x112e <TWI_send_command+0x84>
    1128:	e0 de       	rcall	.-576    	; 0xeea <Error>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <TWI_send_command+0x88>
    112e:	d9 de       	rcall	.-590    	; 0xee2 <stop_bus>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	08 95       	ret

0000113a <TWI_send_string>:
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	c8 2f       	mov	r28, r24
    1148:	e6 2e       	mov	r14, r22
    114a:	f7 2e       	mov	r15, r23
    114c:	c6 de       	rcall	.-628    	; 0xeda <start_bus>
    114e:	d7 de       	rcall	.-594    	; 0xefe <wait_for_bus>
    1150:	90 91 b9 00 	lds	r25, 0x00B9
    1154:	98 7f       	andi	r25, 0xF8	; 248
    1156:	98 30       	cpi	r25, 0x08	; 8
    1158:	19 f0       	breq	.+6      	; 0x1160 <TWI_send_string+0x26>
    115a:	c7 de       	rcall	.-626    	; 0xeea <Error>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	2c c0       	rjmp	.+88     	; 0x11b8 <TWI_send_string+0x7e>
    1160:	8c 2f       	mov	r24, r28
    1162:	d3 de       	rcall	.-602    	; 0xf0a <send_data_and_wait>
    1164:	80 91 b9 00 	lds	r24, 0x00B9
    1168:	88 7f       	andi	r24, 0xF8	; 248
    116a:	88 31       	cpi	r24, 0x18	; 24
    116c:	19 f0       	breq	.+6      	; 0x1174 <TWI_send_string+0x3a>
    116e:	bd de       	rcall	.-646    	; 0xeea <Error>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	22 c0       	rjmp	.+68     	; 0x11b8 <TWI_send_string+0x7e>
    1174:	89 e1       	ldi	r24, 0x19	; 25
    1176:	c9 de       	rcall	.-622    	; 0xf0a <send_data_and_wait>
    1178:	80 91 b9 00 	lds	r24, 0x00B9
    117c:	88 7f       	andi	r24, 0xF8	; 248
    117e:	88 32       	cpi	r24, 0x28	; 40
    1180:	29 f4       	brne	.+10     	; 0x118c <TWI_send_string+0x52>
    1182:	0e 2d       	mov	r16, r14
    1184:	1f 2d       	mov	r17, r15
    1186:	c0 e0       	ldi	r28, 0x00	; 0
    1188:	d0 e0       	ldi	r29, 0x00	; 0
    118a:	08 c0       	rjmp	.+16     	; 0x119c <TWI_send_string+0x62>
    118c:	ae de       	rcall	.-676    	; 0xeea <Error>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	13 c0       	rjmp	.+38     	; 0x11b8 <TWI_send_string+0x7e>
    1192:	f8 01       	movw	r30, r16
    1194:	81 91       	ld	r24, Z+
    1196:	8f 01       	movw	r16, r30
    1198:	b8 de       	rcall	.-656    	; 0xf0a <send_data_and_wait>
    119a:	21 96       	adiw	r28, 0x01	; 1
    119c:	ee 2d       	mov	r30, r14
    119e:	ff 2d       	mov	r31, r15
    11a0:	df 01       	movw	r26, r30
    11a2:	0d 90       	ld	r0, X+
    11a4:	00 20       	and	r0, r0
    11a6:	e9 f7       	brne	.-6      	; 0x11a2 <TWI_send_string+0x68>
    11a8:	11 97       	sbiw	r26, 0x01	; 1
    11aa:	ae 1b       	sub	r26, r30
    11ac:	bf 0b       	sbc	r27, r31
    11ae:	ca 17       	cp	r28, r26
    11b0:	db 07       	cpc	r29, r27
    11b2:	78 f3       	brcs	.-34     	; 0x1192 <TWI_send_string+0x58>
    11b4:	96 de       	rcall	.-724    	; 0xee2 <stop_bus>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	08 95       	ret

000011c6 <TWI_send_string_fixed_length>:
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	c8 2f       	mov	r28, r24
    11d4:	e6 2e       	mov	r14, r22
    11d6:	f7 2e       	mov	r15, r23
    11d8:	8a 01       	movw	r16, r20
    11da:	7f de       	rcall	.-770    	; 0xeda <start_bus>
    11dc:	90 de       	rcall	.-736    	; 0xefe <wait_for_bus>
    11de:	90 91 b9 00 	lds	r25, 0x00B9
    11e2:	98 7f       	andi	r25, 0xF8	; 248
    11e4:	98 30       	cpi	r25, 0x08	; 8
    11e6:	19 f0       	breq	.+6      	; 0x11ee <TWI_send_string_fixed_length+0x28>
    11e8:	80 de       	rcall	.-768    	; 0xeea <Error>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	23 c0       	rjmp	.+70     	; 0x1234 <TWI_send_string_fixed_length+0x6e>
    11ee:	8c 2f       	mov	r24, r28
    11f0:	8c de       	rcall	.-744    	; 0xf0a <send_data_and_wait>
    11f2:	80 91 b9 00 	lds	r24, 0x00B9
    11f6:	88 7f       	andi	r24, 0xF8	; 248
    11f8:	88 31       	cpi	r24, 0x18	; 24
    11fa:	19 f0       	breq	.+6      	; 0x1202 <TWI_send_string_fixed_length+0x3c>
    11fc:	76 de       	rcall	.-788    	; 0xeea <Error>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	19 c0       	rjmp	.+50     	; 0x1234 <TWI_send_string_fixed_length+0x6e>
    1202:	89 e1       	ldi	r24, 0x19	; 25
    1204:	82 de       	rcall	.-764    	; 0xf0a <send_data_and_wait>
    1206:	80 91 b9 00 	lds	r24, 0x00B9
    120a:	88 7f       	andi	r24, 0xF8	; 248
    120c:	88 32       	cpi	r24, 0x28	; 40
    120e:	21 f4       	brne	.+8      	; 0x1218 <TWI_send_string_fixed_length+0x52>
    1210:	10 16       	cp	r1, r16
    1212:	11 06       	cpc	r1, r17
    1214:	24 f0       	brlt	.+8      	; 0x121e <TWI_send_string_fixed_length+0x58>
    1216:	0c c0       	rjmp	.+24     	; 0x1230 <TWI_send_string_fixed_length+0x6a>
    1218:	68 de       	rcall	.-816    	; 0xeea <Error>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	0b c0       	rjmp	.+22     	; 0x1234 <TWI_send_string_fixed_length+0x6e>
    121e:	ce 2d       	mov	r28, r14
    1220:	df 2d       	mov	r29, r15
    1222:	0c 0f       	add	r16, r28
    1224:	1d 1f       	adc	r17, r29
    1226:	89 91       	ld	r24, Y+
    1228:	70 de       	rcall	.-800    	; 0xf0a <send_data_and_wait>
    122a:	c0 17       	cp	r28, r16
    122c:	d1 07       	cpc	r29, r17
    122e:	d9 f7       	brne	.-10     	; 0x1226 <TWI_send_string_fixed_length+0x60>
    1230:	58 de       	rcall	.-848    	; 0xee2 <stop_bus>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	08 95       	ret

00001242 <TWI_send_float>:
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	00 d0       	rcall	.+0      	; 0x1250 <TWI_send_float+0xe>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <TWI_send_float+0x10>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	18 2f       	mov	r17, r24
    1258:	49 83       	std	Y+1, r20	; 0x01
    125a:	5a 83       	std	Y+2, r21	; 0x02
    125c:	6b 83       	std	Y+3, r22	; 0x03
    125e:	7c 83       	std	Y+4, r23	; 0x04
    1260:	3c de       	rcall	.-904    	; 0xeda <start_bus>
    1262:	4d de       	rcall	.-870    	; 0xefe <wait_for_bus>
    1264:	90 91 b9 00 	lds	r25, 0x00B9
    1268:	98 7f       	andi	r25, 0xF8	; 248
    126a:	98 30       	cpi	r25, 0x08	; 8
    126c:	19 f0       	breq	.+6      	; 0x1274 <TWI_send_float+0x32>
    126e:	3d de       	rcall	.-902    	; 0xeea <Error>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	24 c0       	rjmp	.+72     	; 0x12bc <TWI_send_float+0x7a>
    1274:	81 2f       	mov	r24, r17
    1276:	49 de       	rcall	.-878    	; 0xf0a <send_data_and_wait>
    1278:	80 91 b9 00 	lds	r24, 0x00B9
    127c:	88 7f       	andi	r24, 0xF8	; 248
    127e:	88 31       	cpi	r24, 0x18	; 24
    1280:	19 f0       	breq	.+6      	; 0x1288 <TWI_send_float+0x46>
    1282:	33 de       	rcall	.-922    	; 0xeea <Error>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	1a c0       	rjmp	.+52     	; 0x12bc <TWI_send_float+0x7a>
    1288:	86 e0       	ldi	r24, 0x06	; 6
    128a:	3f de       	rcall	.-898    	; 0xf0a <send_data_and_wait>
    128c:	80 91 b9 00 	lds	r24, 0x00B9
    1290:	88 7f       	andi	r24, 0xF8	; 248
    1292:	88 32       	cpi	r24, 0x28	; 40
    1294:	19 f0       	breq	.+6      	; 0x129c <TWI_send_float+0x5a>
    1296:	29 de       	rcall	.-942    	; 0xeea <Error>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	10 c0       	rjmp	.+32     	; 0x12bc <TWI_send_float+0x7a>
    129c:	8e 01       	movw	r16, r28
    129e:	0f 5f       	subi	r16, 0xFF	; 255
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	7e 01       	movw	r14, r28
    12a4:	85 e0       	ldi	r24, 0x05	; 5
    12a6:	e8 0e       	add	r14, r24
    12a8:	f1 1c       	adc	r15, r1
    12aa:	f8 01       	movw	r30, r16
    12ac:	81 91       	ld	r24, Z+
    12ae:	8f 01       	movw	r16, r30
    12b0:	2c de       	rcall	.-936    	; 0xf0a <send_data_and_wait>
    12b2:	0e 15       	cp	r16, r14
    12b4:	1f 05       	cpc	r17, r15
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <TWI_send_float+0x68>
    12b8:	14 de       	rcall	.-984    	; 0xee2 <stop_bus>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	08 95       	ret

000012d2 <TWI_get_command>:
    12d2:	87 5d       	subi	r24, 0xD7	; 215
    12d4:	9b 4e       	sbci	r25, 0xEB	; 235
    12d6:	fc 01       	movw	r30, r24
    12d8:	80 81       	ld	r24, Z
    12da:	08 95       	ret

000012dc <TWI_get_sensor>:
    12dc:	85 5b       	subi	r24, 0xB5	; 181
    12de:	9a 4e       	sbci	r25, 0xEA	; 234
    12e0:	fc 01       	movw	r30, r24
    12e2:	80 81       	ld	r24, Z
    12e4:	08 95       	ret

000012e6 <TWI_get_control_setting>:
    12e6:	82 5d       	subi	r24, 0xD2	; 210
    12e8:	9a 4e       	sbci	r25, 0xEA	; 234
    12ea:	fc 01       	movw	r30, r24
    12ec:	80 81       	ld	r24, Z
    12ee:	08 95       	ret

000012f0 <TWI_get_autonom_settings>:
    12f0:	80 91 2c 14 	lds	r24, 0x142C
    12f4:	08 95       	ret

000012f6 <TWI_get_elevation>:
    12f6:	80 91 39 15 	lds	r24, 0x1539
    12fa:	08 95       	ret

000012fc <TWI_command_flag>:
    12fc:	80 91 df 13 	lds	r24, 0x13DF
    1300:	88 23       	and	r24, r24
    1302:	21 f0       	breq	.+8      	; 0x130c <TWI_command_flag+0x10>
    1304:	10 92 df 13 	sts	0x13DF, r1
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	08 95       	ret
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	08 95       	ret

00001310 <TWI_control_settings_flag>:
    1310:	80 91 de 13 	lds	r24, 0x13DE
    1314:	88 23       	and	r24, r24
    1316:	21 f0       	breq	.+8      	; 0x1320 <TWI_control_settings_flag+0x10>
    1318:	10 92 de 13 	sts	0x13DE, r1
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	08 95       	ret
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	08 95       	ret

00001324 <TWI_autonom_settings_flag>:
    1324:	80 91 dd 13 	lds	r24, 0x13DD
    1328:	88 23       	and	r24, r24
    132a:	21 f0       	breq	.+8      	; 0x1334 <TWI_autonom_settings_flag+0x10>
    132c:	10 92 dd 13 	sts	0x13DD, r1
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	08 95       	ret
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 95       	ret

00001338 <TWI_elevation_flag>:
    1338:	80 91 dc 13 	lds	r24, 0x13DC
    133c:	88 23       	and	r24, r24
    133e:	21 f0       	breq	.+8      	; 0x1348 <TWI_elevation_flag+0x10>
    1340:	10 92 dc 13 	sts	0x13DC, r1
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	08 95       	ret
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	08 95       	ret

0000134c <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	d8 2f       	mov	r29, r24
    1356:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
    1358:	60 91 3c 15 	lds	r22, 0x153C
    135c:	80 91 09 01 	lds	r24, 0x0109
    1360:	90 91 0a 01 	lds	r25, 0x010A
    1364:	bc d8       	rcall	.-3720   	; 0x4de <FifoWrite>
    1366:	81 11       	cpse	r24, r1
    1368:	1f c0       	rjmp	.+62     	; 0x13a8 <write_to_TwiFIFO+0x5c>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    136a:	20 91 3c 15 	lds	r18, 0x153C
    136e:	30 91 3d 15 	lds	r19, 0x153D
    1372:	12 16       	cp	r1, r18
    1374:	13 06       	cpc	r1, r19
    1376:	d4 f4       	brge	.+52     	; 0x13ac <write_to_TwiFIFO+0x60>
    1378:	0d 2f       	mov	r16, r29
    137a:	1c 2f       	mov	r17, r28
    137c:	c0 e0       	ldi	r28, 0x00	; 0
    137e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    1380:	f8 01       	movw	r30, r16
    1382:	61 91       	ld	r22, Z+
    1384:	8f 01       	movw	r16, r30
    1386:	80 91 09 01 	lds	r24, 0x0109
    138a:	90 91 0a 01 	lds	r25, 0x010A
    138e:	a7 d8       	rcall	.-3762   	; 0x4de <FifoWrite>
    1390:	81 11       	cpse	r24, r1
    1392:	0e c0       	rjmp	.+28     	; 0x13b0 <write_to_TwiFIFO+0x64>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    1394:	21 96       	adiw	r28, 0x01	; 1
    1396:	80 91 3c 15 	lds	r24, 0x153C
    139a:	90 91 3d 15 	lds	r25, 0x153D
    139e:	c8 17       	cp	r28, r24
    13a0:	d9 07       	cpc	r29, r25
    13a2:	74 f3       	brlt	.-36     	; 0x1380 <write_to_TwiFIFO+0x34>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <write_to_TwiFIFO+0x66>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//Can't add length!?
		return 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <write_to_TwiFIFO+0x66>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <write_to_TwiFIFO+0x66>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//Can't add chars!?
			return 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	08 95       	ret

000013bc <__vector_26>:

//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	0b b6       	in	r0, 0x3b	; 59
    13c8:	0f 92       	push	r0
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	6f 93       	push	r22
    13d4:	7f 93       	push	r23
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
	switch(myAdress)
    13e6:	80 91 33 15 	lds	r24, 0x1533
    13ea:	80 34       	cpi	r24, 0x40	; 64
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <__vector_26+0x34>
    13ee:	87 c0       	rjmp	.+270    	; 0x14fe <__vector_26+0x142>
    13f0:	80 38       	cpi	r24, 0x80	; 128
    13f2:	21 f0       	breq	.+8      	; 0x13fc <__vector_26+0x40>
    13f4:	80 32       	cpi	r24, 0x20	; 32
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__vector_26+0x3e>
    13f8:	57 c1       	rjmp	.+686    	; 0x16a8 <__vector_26+0x2ec>
    13fa:	c9 c0       	rjmp	.+402    	; 0x158e <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    13fc:	80 91 b9 00 	lds	r24, 0x00B9
    1400:	88 7f       	andi	r24, 0xF8	; 248
    1402:	80 36       	cpi	r24, 0x60	; 96
    1404:	29 f0       	breq	.+10     	; 0x1410 <__vector_26+0x54>
    1406:	80 91 b9 00 	lds	r24, 0x00B9
    140a:	88 7f       	andi	r24, 0xF8	; 248
    140c:	88 36       	cpi	r24, 0x68	; 104
    140e:	21 f4       	brne	.+8      	; 0x1418 <__vector_26+0x5c>
			{
				instruction = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 36 15 	sts	0x1536, r24
    1416:	71 c0       	rjmp	.+226    	; 0x14fa <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1418:	80 91 b9 00 	lds	r24, 0x00B9
    141c:	88 7f       	andi	r24, 0xF8	; 248
    141e:	80 37       	cpi	r24, 0x70	; 112
    1420:	29 f0       	breq	.+10     	; 0x142c <__vector_26+0x70>
    1422:	80 91 b9 00 	lds	r24, 0x00B9
    1426:	88 7f       	andi	r24, 0xF8	; 248
    1428:	88 37       	cpi	r24, 0x78	; 120
    142a:	39 f4       	brne	.+14     	; 0x143a <__vector_26+0x7e>
			{
				currentInstruction = 255;
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	90 93 40 15 	sts	0x1540, r25
    1434:	80 93 3f 15 	sts	0x153F, r24
    1438:	60 c0       	rjmp	.+192    	; 0x14fa <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    143a:	80 91 b9 00 	lds	r24, 0x00B9
    143e:	88 7f       	andi	r24, 0xF8	; 248
    1440:	80 38       	cpi	r24, 0x80	; 128
    1442:	b9 f5       	brne	.+110    	; 0x14b2 <__vector_26+0xf6>
			{
				if(instruction)
    1444:	80 91 36 15 	lds	r24, 0x1536
    1448:	88 23       	and	r24, r24
    144a:	41 f0       	breq	.+16     	; 0x145c <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    144c:	55 dd       	rcall	.-1366   	; 0xef8 <get_data>
    144e:	80 93 3f 15 	sts	0x153F, r24
    1452:	10 92 40 15 	sts	0x1540, r1
					instruction = 0;
    1456:	10 92 36 15 	sts	0x1536, r1
    145a:	4f c0       	rjmp	.+158    	; 0x14fa <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    145c:	80 91 3f 15 	lds	r24, 0x153F
    1460:	90 91 40 15 	lds	r25, 0x1540
    1464:	85 30       	cpi	r24, 0x05	; 5
    1466:	91 05       	cpc	r25, r1
    1468:	71 f0       	breq	.+28     	; 0x1486 <__vector_26+0xca>
    146a:	24 f4       	brge	.+8      	; 0x1474 <__vector_26+0xb8>
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	09 f0       	breq	.+2      	; 0x1472 <__vector_26+0xb6>
    1470:	44 c0       	rjmp	.+136    	; 0x14fa <__vector_26+0x13e>
    1472:	07 c0       	rjmp	.+14     	; 0x1482 <__vector_26+0xc6>
    1474:	86 30       	cpi	r24, 0x06	; 6
    1476:	91 05       	cpc	r25, r1
    1478:	51 f0       	breq	.+20     	; 0x148e <__vector_26+0xd2>
    147a:	49 97       	sbiw	r24, 0x19	; 25
    147c:	09 f0       	breq	.+2      	; 0x1480 <__vector_26+0xc4>
    147e:	3d c0       	rjmp	.+122    	; 0x14fa <__vector_26+0x13e>
    1480:	04 c0       	rjmp	.+8      	; 0x148a <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    1482:	64 dd       	rcall	.-1336   	; 0xf4c <get_control_settings_from_bus>
							break;
    1484:	3a c0       	rjmp	.+116    	; 0x14fa <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1486:	73 dd       	rcall	.-1306   	; 0xf6e <get_autonom_settings_from_bus>
							break;
    1488:	38 c0       	rjmp	.+112    	; 0x14fa <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    148a:	75 dd       	rcall	.-1302   	; 0xf76 <get_char_from_bus>
							break;
    148c:	36 c0       	rjmp	.+108    	; 0x14fa <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    148e:	c0 91 34 15 	lds	r28, 0x1534
    1492:	d0 91 35 15 	lds	r29, 0x1535
    1496:	30 dd       	rcall	.-1440   	; 0xef8 <get_data>
    1498:	cb 5d       	subi	r28, 0xDB	; 219
    149a:	db 4e       	sbci	r29, 0xEB	; 235
    149c:	88 83       	st	Y, r24
	floatCounter += 1;
    149e:	80 91 34 15 	lds	r24, 0x1534
    14a2:	90 91 35 15 	lds	r25, 0x1535
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	90 93 35 15 	sts	0x1535, r25
    14ac:	80 93 34 15 	sts	0x1534, r24
    14b0:	24 c0       	rjmp	.+72     	; 0x14fa <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    14b2:	80 91 b9 00 	lds	r24, 0x00B9
    14b6:	88 7f       	andi	r24, 0xF8	; 248
    14b8:	80 39       	cpi	r24, 0x90	; 144
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <__vector_26+0x104>
			{
				get_sensor_from_bus();
    14bc:	76 dd       	rcall	.-1300   	; 0xfaa <get_sensor_from_bus>
    14be:	1d c0       	rjmp	.+58     	; 0x14fa <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    14c0:	80 91 b9 00 	lds	r24, 0x00B9
    14c4:	88 7f       	andi	r24, 0xF8	; 248
    14c6:	80 3a       	cpi	r24, 0xA0	; 160
    14c8:	c1 f4       	brne	.+48     	; 0x14fa <__vector_26+0x13e>
			{
				stop_twi();
    14ca:	25 dd       	rcall	.-1462   	; 0xf16 <stop_twi>
				switch(currentInstruction)
    14cc:	80 91 3f 15 	lds	r24, 0x153F
    14d0:	90 91 40 15 	lds	r25, 0x1540
    14d4:	85 30       	cpi	r24, 0x05	; 5
    14d6:	91 05       	cpc	r25, r1
    14d8:	49 f0       	breq	.+18     	; 0x14ec <__vector_26+0x130>
    14da:	89 31       	cpi	r24, 0x19	; 25
    14dc:	91 05       	cpc	r25, r1
    14de:	51 f0       	breq	.+20     	; 0x14f4 <__vector_26+0x138>
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	59 f4       	brne	.+22     	; 0x14fa <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 de 13 	sts	0x13DE, r24
						break;
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 dd 13 	sts	0x13DD, r24
						break;
    14f2:	03 c0       	rjmp	.+6      	; 0x14fa <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    14f4:	8d e2       	ldi	r24, 0x2D	; 45
    14f6:	94 e1       	ldi	r25, 0x14	; 20
    14f8:	29 df       	rcall	.-430    	; 0x134c <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    14fa:	22 dd       	rcall	.-1468   	; 0xf40 <reset_TWI>
			break;
    14fc:	d5 c0       	rjmp	.+426    	; 0x16a8 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    14fe:	80 91 b9 00 	lds	r24, 0x00B9
    1502:	88 7f       	andi	r24, 0xF8	; 248
    1504:	80 36       	cpi	r24, 0x60	; 96
    1506:	29 f0       	breq	.+10     	; 0x1512 <__vector_26+0x156>
    1508:	80 91 b9 00 	lds	r24, 0x00B9
    150c:	88 7f       	andi	r24, 0xF8	; 248
    150e:	88 36       	cpi	r24, 0x68	; 104
    1510:	21 f4       	brne	.+8      	; 0x151a <__vector_26+0x15e>
			{
				instruction = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 36 15 	sts	0x1536, r24
    1518:	38 c0       	rjmp	.+112    	; 0x158a <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    151a:	80 91 b9 00 	lds	r24, 0x00B9
    151e:	88 7f       	andi	r24, 0xF8	; 248
    1520:	80 38       	cpi	r24, 0x80	; 128
    1522:	e1 f4       	brne	.+56     	; 0x155c <__vector_26+0x1a0>
			{
				if(instruction)
    1524:	80 91 36 15 	lds	r24, 0x1536
    1528:	88 23       	and	r24, r24
    152a:	41 f0       	breq	.+16     	; 0x153c <__vector_26+0x180>
				{
					currentInstruction = get_data();
    152c:	e5 dc       	rcall	.-1590   	; 0xef8 <get_data>
    152e:	80 93 3f 15 	sts	0x153F, r24
    1532:	10 92 40 15 	sts	0x1540, r1
					instruction = 0;
    1536:	10 92 36 15 	sts	0x1536, r1
    153a:	27 c0       	rjmp	.+78     	; 0x158a <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    153c:	80 91 3f 15 	lds	r24, 0x153F
    1540:	90 91 40 15 	lds	r25, 0x1540
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	91 05       	cpc	r25, r1
    1548:	19 f0       	breq	.+6      	; 0x1550 <__vector_26+0x194>
    154a:	49 97       	sbiw	r24, 0x19	; 25
    154c:	f1 f4       	brne	.+60     	; 0x158a <__vector_26+0x1ce>
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    1550:	d3 dc       	rcall	.-1626   	; 0xef8 <get_data>
    1552:	80 93 3e 15 	sts	0x153E, r24
    1556:	19 c0       	rjmp	.+50     	; 0x158a <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    1558:	0e dd       	rcall	.-1508   	; 0xf76 <get_char_from_bus>
							break;
    155a:	17 c0       	rjmp	.+46     	; 0x158a <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    155c:	80 91 b9 00 	lds	r24, 0x00B9
    1560:	88 7f       	andi	r24, 0xF8	; 248
    1562:	80 3a       	cpi	r24, 0xA0	; 160
    1564:	91 f4       	brne	.+36     	; 0x158a <__vector_26+0x1ce>
			{
				stop_twi();
    1566:	d7 dc       	rcall	.-1618   	; 0xf16 <stop_twi>
				switch(currentInstruction)
    1568:	80 91 3f 15 	lds	r24, 0x153F
    156c:	90 91 40 15 	lds	r25, 0x1540
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	91 05       	cpc	r25, r1
    1574:	19 f0       	breq	.+6      	; 0x157c <__vector_26+0x1c0>
    1576:	49 97       	sbiw	r24, 0x19	; 25
    1578:	41 f4       	brne	.+16     	; 0x158a <__vector_26+0x1ce>
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 db 13 	sts	0x13DB, r24
						break;
    1582:	03 c0       	rjmp	.+6      	; 0x158a <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1584:	8d e2       	ldi	r24, 0x2D	; 45
    1586:	94 e1       	ldi	r25, 0x14	; 20
    1588:	e1 de       	rcall	.-574    	; 0x134c <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    158a:	da dc       	rcall	.-1612   	; 0xf40 <reset_TWI>
			break;
    158c:	8d c0       	rjmp	.+282    	; 0x16a8 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    158e:	80 91 b9 00 	lds	r24, 0x00B9
    1592:	88 7f       	andi	r24, 0xF8	; 248
    1594:	80 36       	cpi	r24, 0x60	; 96
    1596:	29 f0       	breq	.+10     	; 0x15a2 <__vector_26+0x1e6>
    1598:	80 91 b9 00 	lds	r24, 0x00B9
    159c:	88 7f       	andi	r24, 0xF8	; 248
    159e:	88 36       	cpi	r24, 0x68	; 104
    15a0:	21 f4       	brne	.+8      	; 0x15aa <__vector_26+0x1ee>
			{
				instruction = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	80 93 36 15 	sts	0x1536, r24
    15a8:	7e c0       	rjmp	.+252    	; 0x16a6 <__vector_26+0x2ea>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    15aa:	80 91 b9 00 	lds	r24, 0x00B9
    15ae:	88 7f       	andi	r24, 0xF8	; 248
    15b0:	80 37       	cpi	r24, 0x70	; 112
    15b2:	29 f0       	breq	.+10     	; 0x15be <__vector_26+0x202>
    15b4:	80 91 b9 00 	lds	r24, 0x00B9
    15b8:	88 7f       	andi	r24, 0xF8	; 248
    15ba:	88 37       	cpi	r24, 0x78	; 120
    15bc:	39 f4       	brne	.+14     	; 0x15cc <__vector_26+0x210>
			{
				currentInstruction = 255;
    15be:	8f ef       	ldi	r24, 0xFF	; 255
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	90 93 40 15 	sts	0x1540, r25
    15c6:	80 93 3f 15 	sts	0x153F, r24
    15ca:	6d c0       	rjmp	.+218    	; 0x16a6 <__vector_26+0x2ea>
			}
			else if(CONTROL == DATA_SLAW)
    15cc:	80 91 b9 00 	lds	r24, 0x00B9
    15d0:	88 7f       	andi	r24, 0xF8	; 248
    15d2:	80 38       	cpi	r24, 0x80	; 128
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <__vector_26+0x21c>
    15d6:	3a c0       	rjmp	.+116    	; 0x164c <__vector_26+0x290>
			{
				if(instruction)
    15d8:	80 91 36 15 	lds	r24, 0x1536
    15dc:	88 23       	and	r24, r24
    15de:	41 f0       	breq	.+16     	; 0x15f0 <__vector_26+0x234>
				{
					currentInstruction = get_data();
    15e0:	8b dc       	rcall	.-1770   	; 0xef8 <get_data>
    15e2:	80 93 3f 15 	sts	0x153F, r24
    15e6:	10 92 40 15 	sts	0x1540, r1
					instruction = 0;
    15ea:	10 92 36 15 	sts	0x1536, r1
    15ee:	5b c0       	rjmp	.+182    	; 0x16a6 <__vector_26+0x2ea>
				}
				else
				{
					switch(currentInstruction)
    15f0:	80 91 3f 15 	lds	r24, 0x153F
    15f4:	90 91 40 15 	lds	r25, 0x1540
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	91 05       	cpc	r25, r1
    15fc:	19 f1       	breq	.+70     	; 0x1644 <__vector_26+0x288>
    15fe:	1c f4       	brge	.+6      	; 0x1606 <__vector_26+0x24a>
    1600:	89 2b       	or	r24, r25
    1602:	41 f0       	breq	.+16     	; 0x1614 <__vector_26+0x258>
    1604:	50 c0       	rjmp	.+160    	; 0x16a6 <__vector_26+0x2ea>
    1606:	84 30       	cpi	r24, 0x04	; 4
    1608:	91 05       	cpc	r25, r1
    160a:	b1 f0       	breq	.+44     	; 0x1638 <__vector_26+0x27c>
    160c:	05 97       	sbiw	r24, 0x05	; 5
    160e:	09 f0       	breq	.+2      	; 0x1612 <__vector_26+0x256>
    1610:	4a c0       	rjmp	.+148    	; 0x16a6 <__vector_26+0x2ea>
    1612:	1a c0       	rjmp	.+52     	; 0x1648 <__vector_26+0x28c>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    1614:	c0 91 37 15 	lds	r28, 0x1537
    1618:	d0 91 38 15 	lds	r29, 0x1538
    161c:	6d dc       	rcall	.-1830   	; 0xef8 <get_data>
    161e:	c7 5d       	subi	r28, 0xD7	; 215
    1620:	db 4e       	sbci	r29, 0xEB	; 235
    1622:	88 83       	st	Y, r24
	currentCommand += 1;
    1624:	80 91 37 15 	lds	r24, 0x1537
    1628:	90 91 38 15 	lds	r25, 0x1538
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	90 93 38 15 	sts	0x1538, r25
    1632:	80 93 37 15 	sts	0x1537, r24
    1636:	37 c0       	rjmp	.+110    	; 0x16a6 <__vector_26+0x2ea>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation = get_data();
    1638:	5f dc       	rcall	.-1858   	; 0xef8 <get_data>
    163a:	80 93 39 15 	sts	0x1539, r24
    163e:	10 92 3a 15 	sts	0x153A, r1
    1642:	31 c0       	rjmp	.+98     	; 0x16a6 <__vector_26+0x2ea>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    1644:	83 dc       	rcall	.-1786   	; 0xf4c <get_control_settings_from_bus>
							break;
    1646:	2f c0       	rjmp	.+94     	; 0x16a6 <__vector_26+0x2ea>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1648:	92 dc       	rcall	.-1756   	; 0xf6e <get_autonom_settings_from_bus>
							break;
    164a:	2d c0       	rjmp	.+90     	; 0x16a6 <__vector_26+0x2ea>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    164c:	80 91 b9 00 	lds	r24, 0x00B9
    1650:	88 7f       	andi	r24, 0xF8	; 248
    1652:	80 39       	cpi	r24, 0x90	; 144
    1654:	11 f4       	brne	.+4      	; 0x165a <__vector_26+0x29e>
			{
				get_sensor_from_bus();
    1656:	a9 dc       	rcall	.-1710   	; 0xfaa <get_sensor_from_bus>
    1658:	26 c0       	rjmp	.+76     	; 0x16a6 <__vector_26+0x2ea>
			}
			else if (CONTROL == STOP)
    165a:	80 91 b9 00 	lds	r24, 0x00B9
    165e:	88 7f       	andi	r24, 0xF8	; 248
    1660:	80 3a       	cpi	r24, 0xA0	; 160
    1662:	09 f5       	brne	.+66     	; 0x16a6 <__vector_26+0x2ea>
			{
				stop_twi();
    1664:	58 dc       	rcall	.-1872   	; 0xf16 <stop_twi>
				switch(currentInstruction)
    1666:	80 91 3f 15 	lds	r24, 0x153F
    166a:	90 91 40 15 	lds	r25, 0x1540
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	91 f0       	breq	.+36     	; 0x1698 <__vector_26+0x2dc>
    1674:	1c f4       	brge	.+6      	; 0x167c <__vector_26+0x2c0>
    1676:	89 2b       	or	r24, r25
    1678:	39 f0       	breq	.+14     	; 0x1688 <__vector_26+0x2cc>
    167a:	15 c0       	rjmp	.+42     	; 0x16a6 <__vector_26+0x2ea>
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	91 05       	cpc	r25, r1
    1680:	39 f0       	breq	.+14     	; 0x1690 <__vector_26+0x2d4>
    1682:	05 97       	sbiw	r24, 0x05	; 5
    1684:	81 f4       	brne	.+32     	; 0x16a6 <__vector_26+0x2ea>
    1686:	0c c0       	rjmp	.+24     	; 0x16a0 <__vector_26+0x2e4>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 df 13 	sts	0x13DF, r24
						break;
    168e:	0b c0       	rjmp	.+22     	; 0x16a6 <__vector_26+0x2ea>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	80 93 dc 13 	sts	0x13DC, r24
						break;
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <__vector_26+0x2ea>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 de 13 	sts	0x13DE, r24
						break;
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <__vector_26+0x2ea>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	80 93 dd 13 	sts	0x13DD, r24
						break;
					}
				}
			}
			reset_TWI();
    16a6:	4c dc       	rcall	.-1896   	; 0xf40 <reset_TWI>
			break;
		}
	}
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	bf 91       	pop	r27
    16b2:	af 91       	pop	r26
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	7f 91       	pop	r23
    16ba:	6f 91       	pop	r22
    16bc:	5f 91       	pop	r21
    16be:	4f 91       	pop	r20
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	0f 90       	pop	r0
    16c6:	0b be       	out	0x3b, r0	; 59
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
    16d2:	10 92 c5 00 	sts	0x00C5, r1
    16d6:	87 e0       	ldi	r24, 0x07	; 7
    16d8:	80 93 c4 00 	sts	0x00C4, r24
    16dc:	88 e9       	ldi	r24, 0x98	; 152
    16de:	80 93 c1 00 	sts	0x00C1, r24
    16e2:	86 e0       	ldi	r24, 0x06	; 6
    16e4:	80 93 c2 00 	sts	0x00C2, r24
    16e8:	08 95       	ret

000016ea <USART_set_twi_message_destination>:
    16ea:	90 93 1b 11 	sts	0x111B, r25
    16ee:	80 93 1a 11 	sts	0x111A, r24
    16f2:	08 95       	ret

000016f4 <USART_CheckTxReady>:
    16f4:	80 91 c0 00 	lds	r24, 0x00C0
    16f8:	80 72       	andi	r24, 0x20	; 32
    16fa:	08 95       	ret

000016fc <USART_WriteByte>:
    16fc:	cf 93       	push	r28
    16fe:	c8 2f       	mov	r28, r24
    1700:	f9 df       	rcall	.-14     	; 0x16f4 <USART_CheckTxReady>
    1702:	88 23       	and	r24, r24
    1704:	e9 f3       	breq	.-6      	; 0x1700 <USART_WriteByte+0x4>
    1706:	c0 93 c6 00 	sts	0x00C6, r28
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <USART_crc16>:
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	66 23       	and	r22, r22
    1720:	09 f4       	brne	.+2      	; 0x1724 <USART_crc16+0x16>
    1722:	3e c0       	rjmp	.+124    	; 0x17a0 <USART_crc16+0x92>
    1724:	06 2f       	mov	r16, r22
    1726:	10 e0       	ldi	r17, 0x00	; 0
    1728:	4f ef       	ldi	r20, 0xFF	; 255
    172a:	5f ef       	ldi	r21, 0xFF	; 255
    172c:	ee ef       	ldi	r30, 0xFE	; 254
    172e:	ff ef       	ldi	r31, 0xFF	; 255
    1730:	c6 2e       	mov	r12, r22
    1732:	d1 2c       	mov	r13, r1
    1734:	e8 2e       	mov	r14, r24
    1736:	f1 2c       	mov	r15, r1
    1738:	c8 e0       	ldi	r28, 0x08	; 8
    173a:	d0 e0       	ldi	r29, 0x00	; 0
    173c:	ee 3f       	cpi	r30, 0xFE	; 254
    173e:	6f ef       	ldi	r22, 0xFF	; 255
    1740:	f6 07       	cpc	r31, r22
    1742:	19 f4       	brne	.+6      	; 0x174a <USART_crc16+0x3c>
    1744:	8e 2d       	mov	r24, r14
    1746:	9f 2d       	mov	r25, r15
    1748:	30 c0       	rjmp	.+96     	; 0x17aa <USART_crc16+0x9c>
    174a:	ef 3f       	cpi	r30, 0xFF	; 255
    174c:	8f ef       	ldi	r24, 0xFF	; 255
    174e:	f8 07       	cpc	r31, r24
    1750:	19 f4       	brne	.+6      	; 0x1758 <USART_crc16+0x4a>
    1752:	8c 2d       	mov	r24, r12
    1754:	9d 2d       	mov	r25, r13
    1756:	29 c0       	rjmp	.+82     	; 0x17aa <USART_crc16+0x9c>
    1758:	df 01       	movw	r26, r30
    175a:	a8 5a       	subi	r26, 0xA8	; 168
    175c:	b8 4e       	sbci	r27, 0xE8	; 232
    175e:	8c 91       	ld	r24, X
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	23 c0       	rjmp	.+70     	; 0x17aa <USART_crc16+0x9c>
    1764:	ba 01       	movw	r22, r20
    1766:	68 27       	eor	r22, r24
    1768:	79 27       	eor	r23, r25
    176a:	60 ff       	sbrs	r22, 0
    176c:	07 c0       	rjmp	.+14     	; 0x177c <USART_crc16+0x6e>
    176e:	56 95       	lsr	r21
    1770:	47 95       	ror	r20
    1772:	68 e0       	ldi	r22, 0x08	; 8
    1774:	46 27       	eor	r20, r22
    1776:	64 e8       	ldi	r22, 0x84	; 132
    1778:	56 27       	eor	r21, r22
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <USART_crc16+0x72>
    177c:	56 95       	lsr	r21
    177e:	47 95       	ror	r20
    1780:	96 95       	lsr	r25
    1782:	87 95       	ror	r24
    1784:	21 50       	subi	r18, 0x01	; 1
    1786:	31 09       	sbc	r19, r1
    1788:	69 f7       	brne	.-38     	; 0x1764 <USART_crc16+0x56>
    178a:	31 96       	adiw	r30, 0x01	; 1
    178c:	e0 17       	cp	r30, r16
    178e:	f1 07       	cpc	r31, r17
    1790:	a9 f6       	brne	.-86     	; 0x173c <USART_crc16+0x2e>
    1792:	9a 01       	movw	r18, r20
    1794:	20 95       	com	r18
    1796:	30 95       	com	r19
    1798:	32 27       	eor	r19, r18
    179a:	23 27       	eor	r18, r19
    179c:	32 27       	eor	r19, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <USART_crc16+0x96>
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	82 2f       	mov	r24, r18
    17a6:	93 2f       	mov	r25, r19
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <USART_crc16+0xa0>
    17aa:	9e 01       	movw	r18, r28
    17ac:	db cf       	rjmp	.-74     	; 0x1764 <USART_crc16+0x56>
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	08 95       	ret

000017c0 <USART_SendPacket>:
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	9e e7       	ldi	r25, 0x7E	; 126
    17ca:	90 93 57 18 	sts	0x1857, r25
    17ce:	80 93 58 18 	sts	0x1858, r24
    17d2:	60 93 59 18 	sts	0x1859, r22
    17d6:	26 2f       	mov	r18, r22
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	12 16       	cp	r1, r18
    17dc:	13 06       	cpc	r1, r19
    17de:	4c f5       	brge	.+82     	; 0x1832 <USART_SendPacket+0x72>
    17e0:	e8 e5       	ldi	r30, 0x58	; 88
    17e2:	f7 e1       	ldi	r31, 0x17	; 23
    17e4:	03 e0       	ldi	r16, 0x03	; 3
    17e6:	10 e0       	ldi	r17, 0x00	; 0
    17e8:	c0 e0       	ldi	r28, 0x00	; 0
    17ea:	d0 e0       	ldi	r29, 0x00	; 0
    17ec:	7d e7       	ldi	r23, 0x7D	; 125
    17ee:	50 e2       	ldi	r21, 0x20	; 32
    17f0:	90 81       	ld	r25, Z
    17f2:	49 2f       	mov	r20, r25
    17f4:	4d 57       	subi	r20, 0x7D	; 125
    17f6:	42 30       	cpi	r20, 0x02	; 2
    17f8:	80 f4       	brcc	.+32     	; 0x181a <USART_SendPacket+0x5a>
    17fa:	d8 01       	movw	r26, r16
    17fc:	a9 5a       	subi	r26, 0xA9	; 169
    17fe:	b7 4e       	sbci	r27, 0xE7	; 231
    1800:	ac 0f       	add	r26, r28
    1802:	bd 1f       	adc	r27, r29
    1804:	7c 93       	st	X, r23
    1806:	0f 5f       	subi	r16, 0xFF	; 255
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	d8 01       	movw	r26, r16
    180c:	a9 5a       	subi	r26, 0xA9	; 169
    180e:	b7 4e       	sbci	r27, 0xE7	; 231
    1810:	ac 0f       	add	r26, r28
    1812:	bd 1f       	adc	r27, r29
    1814:	95 27       	eor	r25, r21
    1816:	9c 93       	st	X, r25
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <USART_SendPacket+0x66>
    181a:	d8 01       	movw	r26, r16
    181c:	a9 5a       	subi	r26, 0xA9	; 169
    181e:	b7 4e       	sbci	r27, 0xE7	; 231
    1820:	ac 0f       	add	r26, r28
    1822:	bd 1f       	adc	r27, r29
    1824:	9c 93       	st	X, r25
    1826:	21 96       	adiw	r28, 0x01	; 1
    1828:	31 96       	adiw	r30, 0x01	; 1
    182a:	c2 17       	cp	r28, r18
    182c:	d3 07       	cpc	r29, r19
    182e:	01 f7       	brne	.-64     	; 0x17f0 <USART_SendPacket+0x30>
    1830:	04 c0       	rjmp	.+8      	; 0x183a <USART_SendPacket+0x7a>
    1832:	03 e0       	ldi	r16, 0x03	; 3
    1834:	10 e0       	ldi	r17, 0x00	; 0
    1836:	c0 e0       	ldi	r28, 0x00	; 0
    1838:	d0 e0       	ldi	r29, 0x00	; 0
    183a:	69 df       	rcall	.-302    	; 0x170e <USART_crc16>
    183c:	f8 01       	movw	r30, r16
    183e:	e9 5a       	subi	r30, 0xA9	; 169
    1840:	f7 4e       	sbci	r31, 0xE7	; 231
    1842:	ec 0f       	add	r30, r28
    1844:	fd 1f       	adc	r31, r29
    1846:	90 83       	st	Z, r25
    1848:	81 83       	std	Z+1, r24	; 0x01
    184a:	22 96       	adiw	r28, 0x02	; 2
    184c:	0c 0f       	add	r16, r28
    184e:	1d 1f       	adc	r17, r29
    1850:	f8 01       	movw	r30, r16
    1852:	e9 5a       	subi	r30, 0xA9	; 169
    1854:	f7 4e       	sbci	r31, 0xE7	; 231
    1856:	8e e7       	ldi	r24, 0x7E	; 126
    1858:	80 83       	st	Z, r24
    185a:	c8 01       	movw	r24, r16
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	18 16       	cp	r1, r24
    1860:	19 06       	cpc	r1, r25
    1862:	4c f4       	brge	.+18     	; 0x1876 <USART_SendPacket+0xb6>
    1864:	c7 e5       	ldi	r28, 0x57	; 87
    1866:	d8 e1       	ldi	r29, 0x18	; 24
    1868:	08 5a       	subi	r16, 0xA8	; 168
    186a:	17 4e       	sbci	r17, 0xE7	; 231
    186c:	89 91       	ld	r24, Y+
    186e:	46 df       	rcall	.-372    	; 0x16fc <USART_WriteByte>
    1870:	c0 17       	cp	r28, r16
    1872:	d1 07       	cpc	r29, r17
    1874:	d9 f7       	brne	.-10     	; 0x186c <USART_SendPacket+0xac>
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	08 95       	ret

00001880 <USART_SendCommand>:
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	26 dd       	rcall	.-1460   	; 0x12d2 <TWI_get_command>
    1886:	80 93 58 17 	sts	0x1758, r24
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	21 dd       	rcall	.-1470   	; 0x12d2 <TWI_get_command>
    1890:	80 93 59 17 	sts	0x1759, r24
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	1c dd       	rcall	.-1480   	; 0x12d2 <TWI_get_command>
    189a:	80 93 5a 17 	sts	0x175A, r24
    189e:	63 e0       	ldi	r22, 0x03	; 3
    18a0:	83 e4       	ldi	r24, 0x43	; 67
    18a2:	8e cf       	rjmp	.-228    	; 0x17c0 <USART_SendPacket>

000018a4 <USART_SendElevation>:
    18a4:	28 dd       	rcall	.-1456   	; 0x12f6 <TWI_get_elevation>
    18a6:	80 93 58 17 	sts	0x1758, r24
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	85 e4       	ldi	r24, 0x45	; 69
    18ae:	88 cf       	rjmp	.-240    	; 0x17c0 <USART_SendPacket>

000018b0 <USART_SendTurn>:
    18b0:	90 93 58 17 	sts	0x1758, r25
    18b4:	80 93 59 17 	sts	0x1759, r24
    18b8:	60 93 5a 17 	sts	0x175A, r22
    18bc:	63 e0       	ldi	r22, 0x03	; 3
    18be:	84 e5       	ldi	r24, 0x54	; 84
    18c0:	7f cf       	rjmp	.-258    	; 0x17c0 <USART_SendPacket>

000018c2 <USART_send_climb>:
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	8f e4       	ldi	r24, 0x4F	; 79
    18c6:	7c cf       	rjmp	.-264    	; 0x17c0 <USART_SendPacket>

000018c8 <USART_DecodeMessageRxFIFO>:
    18c8:	8f 92       	push	r8
    18ca:	9f 92       	push	r9
    18cc:	af 92       	push	r10
    18ce:	bf 92       	push	r11
    18d0:	cf 92       	push	r12
    18d2:	df 92       	push	r13
    18d4:	ef 92       	push	r14
    18d6:	ff 92       	push	r15
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	ad b6       	in	r10, 0x3d	; 61
    18e6:	be b6       	in	r11, 0x3e	; 62
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	80 91 12 01 	lds	r24, 0x0112
    18f0:	90 91 13 01 	lds	r25, 0x0113
    18f4:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    18f8:	88 23       	and	r24, r24
    18fa:	31 f0       	breq	.+12     	; 0x1908 <USART_DecodeMessageRxFIFO+0x40>
    18fc:	63 e2       	ldi	r22, 0x23	; 35
    18fe:	72 e1       	ldi	r23, 0x12	; 18
    1900:	80 e4       	ldi	r24, 0x40	; 64
    1902:	1b dc       	rcall	.-1994   	; 0x113a <TWI_send_string>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	45 c0       	rjmp	.+138    	; 0x1992 <USART_DecodeMessageRxFIFO+0xca>
    1908:	c0 90 00 00 	lds	r12, 0x0000
    190c:	d1 2c       	mov	r13, r1
    190e:	96 01       	movw	r18, r12
    1910:	21 50       	subi	r18, 0x01	; 1
    1912:	31 09       	sbc	r19, r1
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	c1 14       	cp	r12, r1
    191a:	d1 04       	cpc	r13, r1
    191c:	11 f0       	breq	.+4      	; 0x1922 <USART_DecodeMessageRxFIFO+0x5a>
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	2d b7       	in	r18, 0x3d	; 61
    1928:	3e b7       	in	r19, 0x3e	; 62
    192a:	28 1b       	sub	r18, r24
    192c:	39 0b       	sbc	r19, r25
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	3e bf       	out	0x3e, r19	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	2d bf       	out	0x3d, r18	; 61
    1938:	8d b7       	in	r24, 0x3d	; 61
    193a:	9e b7       	in	r25, 0x3e	; 62
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	88 2e       	mov	r8, r24
    1940:	99 2e       	mov	r9, r25
    1942:	1c 14       	cp	r1, r12
    1944:	1d 04       	cpc	r1, r13
    1946:	f4 f4       	brge	.+60     	; 0x1984 <USART_DecodeMessageRxFIFO+0xbc>
    1948:	e8 2e       	mov	r14, r24
    194a:	f9 2e       	mov	r15, r25
    194c:	00 e0       	ldi	r16, 0x00	; 0
    194e:	10 e0       	ldi	r17, 0x00	; 0
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	80 91 12 01 	lds	r24, 0x0112
    1958:	90 91 13 01 	lds	r25, 0x0113
    195c:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1960:	88 23       	and	r24, r24
    1962:	31 f0       	breq	.+12     	; 0x1970 <USART_DecodeMessageRxFIFO+0xa8>
    1964:	65 e4       	ldi	r22, 0x45	; 69
    1966:	72 e1       	ldi	r23, 0x12	; 18
    1968:	80 e4       	ldi	r24, 0x40	; 64
    196a:	e7 db       	rcall	.-2098   	; 0x113a <TWI_send_string>
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	11 c0       	rjmp	.+34     	; 0x1992 <USART_DecodeMessageRxFIFO+0xca>
    1970:	80 91 00 00 	lds	r24, 0x0000
    1974:	f7 01       	movw	r30, r14
    1976:	81 93       	st	Z+, r24
    1978:	7f 01       	movw	r14, r30
    197a:	0f 5f       	subi	r16, 0xFF	; 255
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	0c 15       	cp	r16, r12
    1980:	1d 05       	cpc	r17, r13
    1982:	34 f3       	brlt	.-52     	; 0x1950 <USART_DecodeMessageRxFIFO+0x88>
    1984:	a6 01       	movw	r20, r12
    1986:	68 2d       	mov	r22, r8
    1988:	79 2d       	mov	r23, r9
    198a:	80 91 1a 11 	lds	r24, 0x111A
    198e:	1b dc       	rcall	.-1994   	; 0x11c6 <TWI_send_string_fixed_length>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	be be       	out	0x3e, r11	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	ad be       	out	0x3d, r10	; 61
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	bf 90       	pop	r11
    19ae:	af 90       	pop	r10
    19b0:	9f 90       	pop	r9
    19b2:	8f 90       	pop	r8
    19b4:	08 95       	ret

000019b6 <USART_DecodeGyroFIFO>:
    19b6:	af 92       	push	r10
    19b8:	bf 92       	push	r11
    19ba:	cf 92       	push	r12
    19bc:	df 92       	push	r13
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <USART_DecodeGyroFIFO+0x16>
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <USART_DecodeGyroFIFO+0x18>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	80 93 ee 13 	sts	0x13EE, r24
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	80 91 12 01 	lds	r24, 0x0112
    19e0:	90 91 13 01 	lds	r25, 0x0113
    19e4:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    19e8:	88 23       	and	r24, r24
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <USART_DecodeGyroFIFO+0x42>
    19ec:	68 e6       	ldi	r22, 0x68	; 104
    19ee:	72 e1       	ldi	r23, 0x12	; 18
    19f0:	80 e4       	ldi	r24, 0x40	; 64
    19f2:	a3 db       	rcall	.-2234   	; 0x113a <TWI_send_string>
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	73 c0       	rjmp	.+230    	; 0x1ade <USART_DecodeGyroFIFO+0x128>
    19f8:	80 91 00 00 	lds	r24, 0x0000
    19fc:	8c 30       	cpi	r24, 0x0C	; 12
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <USART_DecodeGyroFIFO+0x4c>
    1a00:	53 c0       	rjmp	.+166    	; 0x1aa8 <USART_DecodeGyroFIFO+0xf2>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	6c c0       	rjmp	.+216    	; 0x1ade <USART_DecodeGyroFIFO+0x128>
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	80 91 12 01 	lds	r24, 0x0112
    1a0e:	90 91 13 01 	lds	r25, 0x0113
    1a12:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1a16:	88 23       	and	r24, r24
    1a18:	31 f0       	breq	.+12     	; 0x1a26 <USART_DecodeGyroFIFO+0x70>
    1a1a:	67 e8       	ldi	r22, 0x87	; 135
    1a1c:	72 e1       	ldi	r23, 0x12	; 18
    1a1e:	80 e4       	ldi	r24, 0x40	; 64
    1a20:	8c db       	rcall	.-2280   	; 0x113a <TWI_send_string>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	5c c0       	rjmp	.+184    	; 0x1ade <USART_DecodeGyroFIFO+0x128>
    1a26:	80 91 00 00 	lds	r24, 0x0000
    1a2a:	f6 01       	movw	r30, r12
    1a2c:	81 93       	st	Z+, r24
    1a2e:	6f 01       	movw	r12, r30
    1a30:	e0 17       	cp	r30, r16
    1a32:	f1 07       	cpc	r31, r17
    1a34:	41 f7       	brne	.-48     	; 0x1a06 <USART_DecodeGyroFIFO+0x50>
    1a36:	f1 e0       	ldi	r31, 0x01	; 1
    1a38:	af 16       	cp	r10, r31
    1a3a:	b1 04       	cpc	r11, r1
    1a3c:	99 f0       	breq	.+38     	; 0x1a64 <USART_DecodeGyroFIFO+0xae>
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	a8 16       	cp	r10, r24
    1a42:	b1 04       	cpc	r11, r1
    1a44:	e1 f0       	breq	.+56     	; 0x1a7e <USART_DecodeGyroFIFO+0xc8>
    1a46:	ab 28       	or	r10, r11
    1a48:	39 f5       	brne	.+78     	; 0x1a98 <USART_DecodeGyroFIFO+0xe2>
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	ab 81       	ldd	r26, Y+3	; 0x03
    1a50:	bc 81       	ldd	r27, Y+4	; 0x04
    1a52:	80 93 ea 13 	sts	0x13EA, r24
    1a56:	90 93 eb 13 	sts	0x13EB, r25
    1a5a:	a0 93 ec 13 	sts	0x13EC, r26
    1a5e:	b0 93 ed 13 	sts	0x13ED, r27
    1a62:	1e c0       	rjmp	.+60     	; 0x1aa0 <USART_DecodeGyroFIFO+0xea>
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	ab 81       	ldd	r26, Y+3	; 0x03
    1a6a:	bc 81       	ldd	r27, Y+4	; 0x04
    1a6c:	80 93 e6 13 	sts	0x13E6, r24
    1a70:	90 93 e7 13 	sts	0x13E7, r25
    1a74:	a0 93 e8 13 	sts	0x13E8, r26
    1a78:	b0 93 e9 13 	sts	0x13E9, r27
    1a7c:	11 c0       	rjmp	.+34     	; 0x1aa0 <USART_DecodeGyroFIFO+0xea>
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	ab 81       	ldd	r26, Y+3	; 0x03
    1a84:	bc 81       	ldd	r27, Y+4	; 0x04
    1a86:	80 93 e2 13 	sts	0x13E2, r24
    1a8a:	90 93 e3 13 	sts	0x13E3, r25
    1a8e:	a0 93 e4 13 	sts	0x13E4, r26
    1a92:	b0 93 e5 13 	sts	0x13E5, r27
    1a96:	18 c0       	rjmp	.+48     	; 0x1ac8 <USART_DecodeGyroFIFO+0x112>
    1a98:	e3 e0       	ldi	r30, 0x03	; 3
    1a9a:	ee 16       	cp	r14, r30
    1a9c:	f1 04       	cpc	r15, r1
    1a9e:	a4 f4       	brge	.+40     	; 0x1ac8 <USART_DecodeGyroFIFO+0x112>
    1aa0:	ff ef       	ldi	r31, 0xFF	; 255
    1aa2:	ef 1a       	sub	r14, r31
    1aa4:	ff 0a       	sbc	r15, r31
    1aa6:	06 c0       	rjmp	.+12     	; 0x1ab4 <USART_DecodeGyroFIFO+0xfe>
    1aa8:	ee 24       	eor	r14, r14
    1aaa:	e3 94       	inc	r14
    1aac:	f1 2c       	mov	r15, r1
    1aae:	8e 01       	movw	r16, r28
    1ab0:	0b 5f       	subi	r16, 0xFB	; 251
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	57 01       	movw	r10, r14
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	a8 1a       	sub	r10, r24
    1aba:	b1 08       	sbc	r11, r1
    1abc:	cc 24       	eor	r12, r12
    1abe:	c3 94       	inc	r12
    1ac0:	d1 2c       	mov	r13, r1
    1ac2:	cc 0e       	add	r12, r28
    1ac4:	dd 1e       	adc	r13, r29
    1ac6:	9f cf       	rjmp	.-194    	; 0x1a06 <USART_DecodeGyroFIFO+0x50>
    1ac8:	40 91 e2 13 	lds	r20, 0x13E2
    1acc:	50 91 e3 13 	lds	r21, 0x13E3
    1ad0:	60 91 e4 13 	lds	r22, 0x13E4
    1ad4:	70 91 e5 13 	lds	r23, 0x13E5
    1ad8:	80 e8       	ldi	r24, 0x80	; 128
    1ada:	b3 db       	rcall	.-2202   	; 0x1242 <TWI_send_float>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	df 90       	pop	r13
    1af4:	cf 90       	pop	r12
    1af6:	bf 90       	pop	r11
    1af8:	af 90       	pop	r10
    1afa:	08 95       	ret

00001afc <USART_DecodeCommandRxFIFO>:
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	80 91 12 01 	lds	r24, 0x0112
    1b08:	90 91 13 01 	lds	r25, 0x0113
    1b0c:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1b10:	88 23       	and	r24, r24
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <USART_DecodeCommandRxFIFO+0x24>
    1b14:	67 ea       	ldi	r22, 0xA7	; 167
    1b16:	72 e1       	ldi	r23, 0x12	; 18
    1b18:	80 e4       	ldi	r24, 0x40	; 64
    1b1a:	0f db       	rcall	.-2530   	; 0x113a <TWI_send_string>
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	45 c0       	rjmp	.+138    	; 0x1baa <USART_DecodeCommandRxFIFO+0xae>
    1b20:	80 91 00 00 	lds	r24, 0x0000
    1b24:	83 30       	cpi	r24, 0x03	; 3
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <USART_DecodeCommandRxFIFO+0x2e>
    1b28:	3b c0       	rjmp	.+118    	; 0x1ba0 <USART_DecodeCommandRxFIFO+0xa4>
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	80 91 12 01 	lds	r24, 0x0112
    1b32:	90 91 13 01 	lds	r25, 0x0113
    1b36:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1b3a:	88 23       	and	r24, r24
    1b3c:	31 f0       	breq	.+12     	; 0x1b4a <USART_DecodeCommandRxFIFO+0x4e>
    1b3e:	69 ec       	ldi	r22, 0xC9	; 201
    1b40:	72 e1       	ldi	r23, 0x12	; 18
    1b42:	80 e4       	ldi	r24, 0x40	; 64
    1b44:	fa da       	rcall	.-2572   	; 0x113a <TWI_send_string>
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	30 c0       	rjmp	.+96     	; 0x1baa <USART_DecodeCommandRxFIFO+0xae>
    1b4a:	c0 91 00 00 	lds	r28, 0x0000
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	80 91 12 01 	lds	r24, 0x0112
    1b56:	90 91 13 01 	lds	r25, 0x0113
    1b5a:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1b5e:	88 23       	and	r24, r24
    1b60:	31 f0       	breq	.+12     	; 0x1b6e <USART_DecodeCommandRxFIFO+0x72>
    1b62:	61 ef       	ldi	r22, 0xF1	; 241
    1b64:	72 e1       	ldi	r23, 0x12	; 18
    1b66:	80 e4       	ldi	r24, 0x40	; 64
    1b68:	e8 da       	rcall	.-2608   	; 0x113a <TWI_send_string>
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	1e c0       	rjmp	.+60     	; 0x1baa <USART_DecodeCommandRxFIFO+0xae>
    1b6e:	d0 91 00 00 	lds	r29, 0x0000
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	80 91 12 01 	lds	r24, 0x0112
    1b7a:	90 91 13 01 	lds	r25, 0x0113
    1b7e:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1b82:	88 23       	and	r24, r24
    1b84:	31 f0       	breq	.+12     	; 0x1b92 <USART_DecodeCommandRxFIFO+0x96>
    1b86:	68 e1       	ldi	r22, 0x18	; 24
    1b88:	73 e1       	ldi	r23, 0x13	; 19
    1b8a:	80 e4       	ldi	r24, 0x40	; 64
    1b8c:	d6 da       	rcall	.-2644   	; 0x113a <TWI_send_string>
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	0c c0       	rjmp	.+24     	; 0x1baa <USART_DecodeCommandRxFIFO+0xae>
    1b92:	40 91 00 00 	lds	r20, 0x0000
    1b96:	6d 2f       	mov	r22, r29
    1b98:	8c 2f       	mov	r24, r28
    1b9a:	87 da       	rcall	.-2802   	; 0x10aa <TWI_send_command>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	05 c0       	rjmp	.+10     	; 0x1baa <USART_DecodeCommandRxFIFO+0xae>
    1ba0:	6c e3       	ldi	r22, 0x3C	; 60
    1ba2:	73 e1       	ldi	r23, 0x13	; 19
    1ba4:	80 e4       	ldi	r24, 0x40	; 64
    1ba6:	c9 da       	rcall	.-2670   	; 0x113a <TWI_send_string>
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <USART_DecodeValueFIFO>:
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <USART_DecodeValueFIFO+0xe>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <USART_DecodeValueFIFO+0x10>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	80 91 12 01 	lds	r24, 0x0112
    1bcc:	90 91 13 01 	lds	r25, 0x0113
    1bd0:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1bd4:	88 23       	and	r24, r24
    1bd6:	31 f0       	breq	.+12     	; 0x1be4 <USART_DecodeValueFIFO+0x34>
    1bd8:	63 e6       	ldi	r22, 0x63	; 99
    1bda:	73 e1       	ldi	r23, 0x13	; 19
    1bdc:	80 e4       	ldi	r24, 0x40	; 64
    1bde:	ad da       	rcall	.-2726   	; 0x113a <TWI_send_string>
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	29 c0       	rjmp	.+82     	; 0x1c36 <USART_DecodeValueFIFO+0x86>
    1be4:	80 91 00 00 	lds	r24, 0x0000
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	11 f5       	brne	.+68     	; 0x1c30 <USART_DecodeValueFIFO+0x80>
    1bec:	8e 01       	movw	r16, r28
    1bee:	0f 5f       	subi	r16, 0xFF	; 255
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	7e 01       	movw	r14, r28
    1bf4:	85 e0       	ldi	r24, 0x05	; 5
    1bf6:	e8 0e       	add	r14, r24
    1bf8:	f1 1c       	adc	r15, r1
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	80 91 12 01 	lds	r24, 0x0112
    1c02:	90 91 13 01 	lds	r25, 0x0113
    1c06:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1c0a:	81 11       	cpse	r24, r1
    1c0c:	13 c0       	rjmp	.+38     	; 0x1c34 <USART_DecodeValueFIFO+0x84>
    1c0e:	80 91 00 00 	lds	r24, 0x0000
    1c12:	f8 01       	movw	r30, r16
    1c14:	81 93       	st	Z+, r24
    1c16:	8f 01       	movw	r16, r30
    1c18:	ee 15       	cp	r30, r14
    1c1a:	ff 05       	cpc	r31, r15
    1c1c:	71 f7       	brne	.-36     	; 0x1bfa <USART_DecodeValueFIFO+0x4a>
    1c1e:	49 81       	ldd	r20, Y+1	; 0x01
    1c20:	5a 81       	ldd	r21, Y+2	; 0x02
    1c22:	6b 81       	ldd	r22, Y+3	; 0x03
    1c24:	7c 81       	ldd	r23, Y+4	; 0x04
    1c26:	80 91 1a 11 	lds	r24, 0x111A
    1c2a:	0b db       	rcall	.-2538   	; 0x1242 <TWI_send_float>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <USART_DecodeValueFIFO+0x86>
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <USART_DecodeValueFIFO+0x86>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	08 95       	ret

00001c4c <USART_DecodeReadyFIFO>:
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	80 91 12 01 	lds	r24, 0x0112
    1c54:	90 91 13 01 	lds	r25, 0x0113
    1c58:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1c5c:	88 23       	and	r24, r24
    1c5e:	31 f0       	breq	.+12     	; 0x1c6c <USART_DecodeReadyFIFO+0x20>
    1c60:	67 ea       	ldi	r22, 0xA7	; 167
    1c62:	72 e1       	ldi	r23, 0x12	; 18
    1c64:	80 e4       	ldi	r24, 0x40	; 64
    1c66:	69 da       	rcall	.-2862   	; 0x113a <TWI_send_string>
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	08 95       	ret
    1c6c:	80 91 00 00 	lds	r24, 0x0000
    1c70:	81 11       	cpse	r24, r1
    1c72:	05 c0       	rjmp	.+10     	; 0x1c7e <USART_DecodeReadyFIFO+0x32>
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	80 93 f0 13 	sts	0x13F0, r24
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	08 95       	ret
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	08 95       	ret

00001c82 <USART_DecodeTurnDoneRxFIFO>:
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	80 91 12 01 	lds	r24, 0x0112
    1c8a:	90 91 13 01 	lds	r25, 0x0113
    1c8e:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1c92:	88 23       	and	r24, r24
    1c94:	31 f0       	breq	.+12     	; 0x1ca2 <USART_DecodeTurnDoneRxFIFO+0x20>
    1c96:	63 e8       	ldi	r22, 0x83	; 131
    1c98:	73 e1       	ldi	r23, 0x13	; 19
    1c9a:	80 e4       	ldi	r24, 0x40	; 64
    1c9c:	4e da       	rcall	.-2916   	; 0x113a <TWI_send_string>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	08 95       	ret
    1ca2:	80 91 00 00 	lds	r24, 0x0000
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <USART_DecodeTurnDoneRxFIFO+0x32>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	80 93 ef 13 	sts	0x13EF, r24
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	08 95       	ret
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	08 95       	ret

00001cb8 <USART_DecodeClimbDoneRxFIFO>:
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	80 91 12 01 	lds	r24, 0x0112
    1cc0:	90 91 13 01 	lds	r25, 0x0113
    1cc4:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1cc8:	88 23       	and	r24, r24
    1cca:	31 f0       	breq	.+12     	; 0x1cd8 <USART_DecodeClimbDoneRxFIFO+0x20>
    1ccc:	67 ea       	ldi	r22, 0xA7	; 167
    1cce:	73 e1       	ldi	r23, 0x13	; 19
    1cd0:	80 e4       	ldi	r24, 0x40	; 64
    1cd2:	33 da       	rcall	.-2970   	; 0x113a <TWI_send_string>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	08 95       	ret
    1cd8:	80 91 00 00 	lds	r24, 0x0000
    1cdc:	81 11       	cpse	r24, r1
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <USART_DecodeClimbDoneRxFIFO+0x32>
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	80 93 e1 13 	sts	0x13E1, r24
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	08 95       	ret
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	08 95       	ret

00001cee <USART_ready>:
    1cee:	80 91 f0 13 	lds	r24, 0x13F0
    1cf2:	88 23       	and	r24, r24
    1cf4:	21 f0       	breq	.+8      	; 0x1cfe <USART_ready+0x10>
    1cf6:	10 92 f0 13 	sts	0x13F0, r1
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	08 95       	ret
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	08 95       	ret

00001d02 <USART_turn_done>:
    1d02:	80 91 ef 13 	lds	r24, 0x13EF
    1d06:	88 23       	and	r24, r24
    1d08:	21 f0       	breq	.+8      	; 0x1d12 <USART_turn_done+0x10>
    1d0a:	10 92 ef 13 	sts	0x13EF, r1
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	08 95       	ret
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	08 95       	ret

00001d16 <USART_climb_done>:
    1d16:	80 91 e1 13 	lds	r24, 0x13E1
    1d1a:	88 23       	and	r24, r24
    1d1c:	21 f0       	breq	.+8      	; 0x1d26 <USART_climb_done+0x10>
    1d1e:	10 92 e1 13 	sts	0x13E1, r1
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	08 95       	ret
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	08 95       	ret

00001d2a <USART_DecodeRxFIFO>:
    1d2a:	2e c0       	rjmp	.+92     	; 0x1d88 <USART_DecodeRxFIFO+0x5e>
    1d2c:	80 91 00 00 	lds	r24, 0x0000
    1d30:	8f 34       	cpi	r24, 0x4F	; 79
    1d32:	39 f1       	breq	.+78     	; 0x1d82 <USART_DecodeRxFIFO+0x58>
    1d34:	38 f4       	brcc	.+14     	; 0x1d44 <USART_DecodeRxFIFO+0x1a>
    1d36:	87 34       	cpi	r24, 0x47	; 71
    1d38:	e1 f0       	breq	.+56     	; 0x1d72 <USART_DecodeRxFIFO+0x48>
    1d3a:	8d 34       	cpi	r24, 0x4D	; 77
    1d3c:	51 f0       	breq	.+20     	; 0x1d52 <USART_DecodeRxFIFO+0x28>
    1d3e:	83 34       	cpi	r24, 0x43	; 67
    1d40:	19 f5       	brne	.+70     	; 0x1d88 <USART_DecodeRxFIFO+0x5e>
    1d42:	0b c0       	rjmp	.+22     	; 0x1d5a <USART_DecodeRxFIFO+0x30>
    1d44:	84 35       	cpi	r24, 0x54	; 84
    1d46:	c9 f0       	breq	.+50     	; 0x1d7a <USART_DecodeRxFIFO+0x50>
    1d48:	86 35       	cpi	r24, 0x56	; 86
    1d4a:	59 f0       	breq	.+22     	; 0x1d62 <USART_DecodeRxFIFO+0x38>
    1d4c:	82 35       	cpi	r24, 0x52	; 82
    1d4e:	e1 f4       	brne	.+56     	; 0x1d88 <USART_DecodeRxFIFO+0x5e>
    1d50:	0c c0       	rjmp	.+24     	; 0x1d6a <USART_DecodeRxFIFO+0x40>
    1d52:	ba dd       	rcall	.-1164   	; 0x18c8 <USART_DecodeMessageRxFIFO>
    1d54:	88 23       	and	r24, r24
    1d56:	c1 f0       	breq	.+48     	; 0x1d88 <USART_DecodeRxFIFO+0x5e>
    1d58:	08 95       	ret
    1d5a:	d0 de       	rcall	.-608    	; 0x1afc <USART_DecodeCommandRxFIFO>
    1d5c:	88 23       	and	r24, r24
    1d5e:	a1 f0       	breq	.+40     	; 0x1d88 <USART_DecodeRxFIFO+0x5e>
    1d60:	08 95       	ret
    1d62:	26 df       	rcall	.-436    	; 0x1bb0 <USART_DecodeValueFIFO>
    1d64:	88 23       	and	r24, r24
    1d66:	81 f0       	breq	.+32     	; 0x1d88 <USART_DecodeRxFIFO+0x5e>
    1d68:	08 95       	ret
    1d6a:	70 df       	rcall	.-288    	; 0x1c4c <USART_DecodeReadyFIFO>
    1d6c:	88 23       	and	r24, r24
    1d6e:	61 f0       	breq	.+24     	; 0x1d88 <USART_DecodeRxFIFO+0x5e>
    1d70:	08 95       	ret
    1d72:	21 de       	rcall	.-958    	; 0x19b6 <USART_DecodeGyroFIFO>
    1d74:	88 23       	and	r24, r24
    1d76:	41 f0       	breq	.+16     	; 0x1d88 <USART_DecodeRxFIFO+0x5e>
    1d78:	08 95       	ret
    1d7a:	83 df       	rcall	.-250    	; 0x1c82 <USART_DecodeTurnDoneRxFIFO>
    1d7c:	88 23       	and	r24, r24
    1d7e:	21 f0       	breq	.+8      	; 0x1d88 <USART_DecodeRxFIFO+0x5e>
    1d80:	08 95       	ret
    1d82:	9a df       	rcall	.-204    	; 0x1cb8 <USART_DecodeClimbDoneRxFIFO>
    1d84:	81 11       	cpse	r24, r1
    1d86:	0a c0       	rjmp	.+20     	; 0x1d9c <USART_DecodeRxFIFO+0x72>
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	80 91 12 01 	lds	r24, 0x0112
    1d90:	90 91 13 01 	lds	r25, 0x0113
    1d94:	0e 94 8f 02 	call	0x51e	; 0x51e <FifoRead>
    1d98:	88 23       	and	r24, r24
    1d9a:	41 f2       	breq	.-112    	; 0x1d2c <USART_DecodeRxFIFO+0x2>
    1d9c:	08 95       	ret

00001d9e <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1d9e:	1f 92       	push	r1
    1da0:	0f 92       	push	r0
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	0f 92       	push	r0
    1da6:	11 24       	eor	r1, r1
    1da8:	0b b6       	in	r0, 0x3b	; 59
    1daa:	0f 92       	push	r0
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	2f 93       	push	r18
    1db6:	3f 93       	push	r19
    1db8:	4f 93       	push	r20
    1dba:	5f 93       	push	r21
    1dbc:	6f 93       	push	r22
    1dbe:	7f 93       	push	r23
    1dc0:	8f 93       	push	r24
    1dc2:	9f 93       	push	r25
    1dc4:	af 93       	push	r26
    1dc6:	bf 93       	push	r27
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1dd0:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1dd4:	2e 37       	cpi	r18, 0x7E	; 126
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <__vector_20+0x3c>
    1dd8:	3f c0       	rjmp	.+126    	; 0x1e58 <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1dda:	80 91 f3 13 	lds	r24, 0x13F3
    1dde:	90 91 f4 13 	lds	r25, 0x13F4
    1de2:	84 30       	cpi	r24, 0x04	; 4
    1de4:	91 05       	cpc	r25, r1
    1de6:	40 f4       	brcc	.+16     	; 0x1df8 <__vector_20+0x5a>
    1de8:	20 91 54 15 	lds	r18, 0x1554
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	2c 5f       	subi	r18, 0xFC	; 252
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	82 17       	cp	r24, r18
    1df4:	93 07       	cpc	r25, r19
    1df6:	59 f5       	brne	.+86     	; 0x1e4e <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1df8:	80 91 f1 13 	lds	r24, 0x13F1
    1dfc:	90 91 f2 13 	lds	r25, 0x13F2
    1e00:	89 2b       	or	r24, r25
    1e02:	21 f0       	breq	.+8      	; 0x1e0c <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1e04:	10 92 f2 13 	sts	0x13F2, r1
    1e08:	10 92 f1 13 	sts	0x13F1, r1
    1e0c:	03 e5       	ldi	r16, 0x53	; 83
    1e0e:	15 e1       	ldi	r17, 0x15	; 21
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1e10:	c0 e0       	ldi	r28, 0x00	; 0
    1e12:	d0 e0       	ldi	r29, 0x00	; 0
    1e14:	0f 2e       	mov	r0, r31
    1e16:	f4 e5       	ldi	r31, 0x54	; 84
    1e18:	ef 2e       	mov	r14, r31
    1e1a:	f5 e1       	ldi	r31, 0x15	; 21
    1e1c:	ff 2e       	mov	r15, r31
    1e1e:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1e20:	f8 01       	movw	r30, r16
    1e22:	61 91       	ld	r22, Z+
    1e24:	8f 01       	movw	r16, r30
    1e26:	80 91 12 01 	lds	r24, 0x0112
    1e2a:	90 91 13 01 	lds	r25, 0x0113
    1e2e:	0e 94 6f 02 	call	0x4de	; 0x4de <FifoWrite>
    1e32:	88 23       	and	r24, r24
    1e34:	21 f0       	breq	.+8      	; 0x1e3e <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1e36:	6c ec       	ldi	r22, 0xCC	; 204
    1e38:	73 e1       	ldi	r23, 0x13	; 19
    1e3a:	80 e4       	ldi	r24, 0x40	; 64
    1e3c:	7e d9       	rcall	.-3332   	; 0x113a <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1e3e:	21 96       	adiw	r28, 0x01	; 1
    1e40:	f7 01       	movw	r30, r14
    1e42:	80 81       	ld	r24, Z
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 96       	adiw	r24, 0x02	; 2
    1e48:	c8 17       	cp	r28, r24
    1e4a:	d9 07       	cpc	r29, r25
    1e4c:	4c f3       	brlt	.-46     	; 0x1e20 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1e4e:	10 92 f4 13 	sts	0x13F4, r1
    1e52:	10 92 f3 13 	sts	0x13F3, r1
    1e56:	16 c0       	rjmp	.+44     	; 0x1e84 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1e58:	2d 37       	cpi	r18, 0x7D	; 125
    1e5a:	39 f4       	brne	.+14     	; 0x1e6a <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	90 93 f2 13 	sts	0x13F2, r25
    1e64:	80 93 f1 13 	sts	0x13F1, r24
    1e68:	0d c0       	rjmp	.+26     	; 0x1e84 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1e6a:	80 91 f3 13 	lds	r24, 0x13F3
    1e6e:	90 91 f4 13 	lds	r25, 0x13F4
    1e72:	fc 01       	movw	r30, r24
    1e74:	ed 5a       	subi	r30, 0xAD	; 173
    1e76:	fa 4e       	sbci	r31, 0xEA	; 234
    1e78:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	90 93 f4 13 	sts	0x13F4, r25
    1e80:	80 93 f3 13 	sts	0x13F3, r24
	}
	
	
}
    1e84:	ff 91       	pop	r31
    1e86:	ef 91       	pop	r30
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	bf 91       	pop	r27
    1e8e:	af 91       	pop	r26
    1e90:	9f 91       	pop	r25
    1e92:	8f 91       	pop	r24
    1e94:	7f 91       	pop	r23
    1e96:	6f 91       	pop	r22
    1e98:	5f 91       	pop	r21
    1e9a:	4f 91       	pop	r20
    1e9c:	3f 91       	pop	r19
    1e9e:	2f 91       	pop	r18
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	ff 90       	pop	r15
    1ea6:	ef 90       	pop	r14
    1ea8:	0f 90       	pop	r0
    1eaa:	0b be       	out	0x3b, r0	; 59
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	0f 90       	pop	r0
    1eb2:	1f 90       	pop	r1
    1eb4:	18 95       	reti

00001eb6 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1eb6:	80 93 58 17 	sts	0x1758, r24
	gTxPayload[1] = rotation;
    1eba:	60 93 59 17 	sts	0x1759, r22
	gTxPayload[2] = speed;
    1ebe:	40 93 5a 17 	sts	0x175A, r20
	
	
	USART_SendPacket('C', 3);
    1ec2:	63 e0       	ldi	r22, 0x03	; 3
    1ec4:	83 e4       	ldi	r24, 0x43	; 67
    1ec6:	7c cc       	rjmp	.-1800   	; 0x17c0 <USART_SendPacket>

00001ec8 <__subsf3>:
    1ec8:	50 58       	subi	r21, 0x80	; 128

00001eca <__addsf3>:
    1eca:	bb 27       	eor	r27, r27
    1ecc:	aa 27       	eor	r26, r26
    1ece:	0e d0       	rcall	.+28     	; 0x1eec <__addsf3x>
    1ed0:	ed c1       	rjmp	.+986    	; 0x22ac <__fp_round>
    1ed2:	b6 d1       	rcall	.+876    	; 0x2240 <__fp_pscA>
    1ed4:	30 f0       	brcs	.+12     	; 0x1ee2 <__addsf3+0x18>
    1ed6:	bb d1       	rcall	.+886    	; 0x224e <__fp_pscB>
    1ed8:	20 f0       	brcs	.+8      	; 0x1ee2 <__addsf3+0x18>
    1eda:	31 f4       	brne	.+12     	; 0x1ee8 <__addsf3+0x1e>
    1edc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ede:	11 f4       	brne	.+4      	; 0x1ee4 <__addsf3+0x1a>
    1ee0:	1e f4       	brtc	.+6      	; 0x1ee8 <__addsf3+0x1e>
    1ee2:	86 c1       	rjmp	.+780    	; 0x21f0 <__fp_nan>
    1ee4:	0e f4       	brtc	.+2      	; 0x1ee8 <__addsf3+0x1e>
    1ee6:	e0 95       	com	r30
    1ee8:	e7 fb       	bst	r30, 7
    1eea:	7c c1       	rjmp	.+760    	; 0x21e4 <__fp_inf>

00001eec <__addsf3x>:
    1eec:	e9 2f       	mov	r30, r25
    1eee:	00 d2       	rcall	.+1024   	; 0x22f0 <__fp_split3>
    1ef0:	80 f3       	brcs	.-32     	; 0x1ed2 <__addsf3+0x8>
    1ef2:	ba 17       	cp	r27, r26
    1ef4:	62 07       	cpc	r22, r18
    1ef6:	73 07       	cpc	r23, r19
    1ef8:	84 07       	cpc	r24, r20
    1efa:	95 07       	cpc	r25, r21
    1efc:	18 f0       	brcs	.+6      	; 0x1f04 <__addsf3x+0x18>
    1efe:	71 f4       	brne	.+28     	; 0x1f1c <__addsf3x+0x30>
    1f00:	9e f5       	brtc	.+102    	; 0x1f68 <__addsf3x+0x7c>
    1f02:	18 c2       	rjmp	.+1072   	; 0x2334 <__fp_zero>
    1f04:	0e f4       	brtc	.+2      	; 0x1f08 <__addsf3x+0x1c>
    1f06:	e0 95       	com	r30
    1f08:	0b 2e       	mov	r0, r27
    1f0a:	ba 2f       	mov	r27, r26
    1f0c:	a0 2d       	mov	r26, r0
    1f0e:	0b 01       	movw	r0, r22
    1f10:	b9 01       	movw	r22, r18
    1f12:	90 01       	movw	r18, r0
    1f14:	0c 01       	movw	r0, r24
    1f16:	ca 01       	movw	r24, r20
    1f18:	a0 01       	movw	r20, r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	ff 27       	eor	r31, r31
    1f1e:	59 1b       	sub	r21, r25
    1f20:	99 f0       	breq	.+38     	; 0x1f48 <__addsf3x+0x5c>
    1f22:	59 3f       	cpi	r21, 0xF9	; 249
    1f24:	50 f4       	brcc	.+20     	; 0x1f3a <__addsf3x+0x4e>
    1f26:	50 3e       	cpi	r21, 0xE0	; 224
    1f28:	68 f1       	brcs	.+90     	; 0x1f84 <__addsf3x+0x98>
    1f2a:	1a 16       	cp	r1, r26
    1f2c:	f0 40       	sbci	r31, 0x00	; 0
    1f2e:	a2 2f       	mov	r26, r18
    1f30:	23 2f       	mov	r18, r19
    1f32:	34 2f       	mov	r19, r20
    1f34:	44 27       	eor	r20, r20
    1f36:	58 5f       	subi	r21, 0xF8	; 248
    1f38:	f3 cf       	rjmp	.-26     	; 0x1f20 <__addsf3x+0x34>
    1f3a:	46 95       	lsr	r20
    1f3c:	37 95       	ror	r19
    1f3e:	27 95       	ror	r18
    1f40:	a7 95       	ror	r26
    1f42:	f0 40       	sbci	r31, 0x00	; 0
    1f44:	53 95       	inc	r21
    1f46:	c9 f7       	brne	.-14     	; 0x1f3a <__addsf3x+0x4e>
    1f48:	7e f4       	brtc	.+30     	; 0x1f68 <__addsf3x+0x7c>
    1f4a:	1f 16       	cp	r1, r31
    1f4c:	ba 0b       	sbc	r27, r26
    1f4e:	62 0b       	sbc	r22, r18
    1f50:	73 0b       	sbc	r23, r19
    1f52:	84 0b       	sbc	r24, r20
    1f54:	ba f0       	brmi	.+46     	; 0x1f84 <__addsf3x+0x98>
    1f56:	91 50       	subi	r25, 0x01	; 1
    1f58:	a1 f0       	breq	.+40     	; 0x1f82 <__addsf3x+0x96>
    1f5a:	ff 0f       	add	r31, r31
    1f5c:	bb 1f       	adc	r27, r27
    1f5e:	66 1f       	adc	r22, r22
    1f60:	77 1f       	adc	r23, r23
    1f62:	88 1f       	adc	r24, r24
    1f64:	c2 f7       	brpl	.-16     	; 0x1f56 <__addsf3x+0x6a>
    1f66:	0e c0       	rjmp	.+28     	; 0x1f84 <__addsf3x+0x98>
    1f68:	ba 0f       	add	r27, r26
    1f6a:	62 1f       	adc	r22, r18
    1f6c:	73 1f       	adc	r23, r19
    1f6e:	84 1f       	adc	r24, r20
    1f70:	48 f4       	brcc	.+18     	; 0x1f84 <__addsf3x+0x98>
    1f72:	87 95       	ror	r24
    1f74:	77 95       	ror	r23
    1f76:	67 95       	ror	r22
    1f78:	b7 95       	ror	r27
    1f7a:	f7 95       	ror	r31
    1f7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f7e:	08 f0       	brcs	.+2      	; 0x1f82 <__addsf3x+0x96>
    1f80:	b3 cf       	rjmp	.-154    	; 0x1ee8 <__addsf3+0x1e>
    1f82:	93 95       	inc	r25
    1f84:	88 0f       	add	r24, r24
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <__addsf3x+0x9e>
    1f88:	99 27       	eor	r25, r25
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	97 95       	ror	r25
    1f8e:	87 95       	ror	r24
    1f90:	08 95       	ret

00001f92 <atan>:
    1f92:	df 93       	push	r29
    1f94:	dd 27       	eor	r29, r29
    1f96:	b9 2f       	mov	r27, r25
    1f98:	bf 77       	andi	r27, 0x7F	; 127
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	16 16       	cp	r1, r22
    1fa0:	17 06       	cpc	r1, r23
    1fa2:	48 07       	cpc	r20, r24
    1fa4:	5b 07       	cpc	r21, r27
    1fa6:	10 f4       	brcc	.+4      	; 0x1fac <atan+0x1a>
    1fa8:	d9 2f       	mov	r29, r25
    1faa:	cf d1       	rcall	.+926    	; 0x234a <inverse>
    1fac:	9f 93       	push	r25
    1fae:	8f 93       	push	r24
    1fb0:	7f 93       	push	r23
    1fb2:	6f 93       	push	r22
    1fb4:	34 d2       	rcall	.+1128   	; 0x241e <square>
    1fb6:	ec e8       	ldi	r30, 0x8C	; 140
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	1d d1       	rcall	.+570    	; 0x21f6 <__fp_powser>
    1fbc:	77 d1       	rcall	.+750    	; 0x22ac <__fp_round>
    1fbe:	2f 91       	pop	r18
    1fc0:	3f 91       	pop	r19
    1fc2:	4f 91       	pop	r20
    1fc4:	5f 91       	pop	r21
    1fc6:	d4 d1       	rcall	.+936    	; 0x2370 <__mulsf3x>
    1fc8:	dd 23       	and	r29, r29
    1fca:	49 f0       	breq	.+18     	; 0x1fde <atan+0x4c>
    1fcc:	90 58       	subi	r25, 0x80	; 128
    1fce:	a2 ea       	ldi	r26, 0xA2	; 162
    1fd0:	2a ed       	ldi	r18, 0xDA	; 218
    1fd2:	3f e0       	ldi	r19, 0x0F	; 15
    1fd4:	49 ec       	ldi	r20, 0xC9	; 201
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	d0 78       	andi	r29, 0x80	; 128
    1fda:	5d 27       	eor	r21, r29
    1fdc:	87 df       	rcall	.-242    	; 0x1eec <__addsf3x>
    1fde:	df 91       	pop	r29
    1fe0:	65 c1       	rjmp	.+714    	; 0x22ac <__fp_round>

00001fe2 <__cmpsf2>:
    1fe2:	dc d0       	rcall	.+440    	; 0x219c <__fp_cmp>
    1fe4:	08 f4       	brcc	.+2      	; 0x1fe8 <__cmpsf2+0x6>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	08 95       	ret

00001fea <cos>:
    1fea:	39 d1       	rcall	.+626    	; 0x225e <__fp_rempio2>
    1fec:	e3 95       	inc	r30
    1fee:	6f c1       	rjmp	.+734    	; 0x22ce <__fp_sinus>

00001ff0 <__divsf3>:
    1ff0:	0c d0       	rcall	.+24     	; 0x200a <__divsf3x>
    1ff2:	5c c1       	rjmp	.+696    	; 0x22ac <__fp_round>
    1ff4:	2c d1       	rcall	.+600    	; 0x224e <__fp_pscB>
    1ff6:	40 f0       	brcs	.+16     	; 0x2008 <__divsf3+0x18>
    1ff8:	23 d1       	rcall	.+582    	; 0x2240 <__fp_pscA>
    1ffa:	30 f0       	brcs	.+12     	; 0x2008 <__divsf3+0x18>
    1ffc:	21 f4       	brne	.+8      	; 0x2006 <__divsf3+0x16>
    1ffe:	5f 3f       	cpi	r21, 0xFF	; 255
    2000:	19 f0       	breq	.+6      	; 0x2008 <__divsf3+0x18>
    2002:	f0 c0       	rjmp	.+480    	; 0x21e4 <__fp_inf>
    2004:	51 11       	cpse	r21, r1
    2006:	97 c1       	rjmp	.+814    	; 0x2336 <__fp_szero>
    2008:	f3 c0       	rjmp	.+486    	; 0x21f0 <__fp_nan>

0000200a <__divsf3x>:
    200a:	72 d1       	rcall	.+740    	; 0x22f0 <__fp_split3>
    200c:	98 f3       	brcs	.-26     	; 0x1ff4 <__divsf3+0x4>

0000200e <__divsf3_pse>:
    200e:	99 23       	and	r25, r25
    2010:	c9 f3       	breq	.-14     	; 0x2004 <__divsf3+0x14>
    2012:	55 23       	and	r21, r21
    2014:	b1 f3       	breq	.-20     	; 0x2002 <__divsf3+0x12>
    2016:	95 1b       	sub	r25, r21
    2018:	55 0b       	sbc	r21, r21
    201a:	bb 27       	eor	r27, r27
    201c:	aa 27       	eor	r26, r26
    201e:	62 17       	cp	r22, r18
    2020:	73 07       	cpc	r23, r19
    2022:	84 07       	cpc	r24, r20
    2024:	38 f0       	brcs	.+14     	; 0x2034 <__divsf3_pse+0x26>
    2026:	9f 5f       	subi	r25, 0xFF	; 255
    2028:	5f 4f       	sbci	r21, 0xFF	; 255
    202a:	22 0f       	add	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	44 1f       	adc	r20, r20
    2030:	aa 1f       	adc	r26, r26
    2032:	a9 f3       	breq	.-22     	; 0x201e <__divsf3_pse+0x10>
    2034:	33 d0       	rcall	.+102    	; 0x209c <__divsf3_pse+0x8e>
    2036:	0e 2e       	mov	r0, r30
    2038:	3a f0       	brmi	.+14     	; 0x2048 <__divsf3_pse+0x3a>
    203a:	e0 e8       	ldi	r30, 0x80	; 128
    203c:	30 d0       	rcall	.+96     	; 0x209e <__divsf3_pse+0x90>
    203e:	91 50       	subi	r25, 0x01	; 1
    2040:	50 40       	sbci	r21, 0x00	; 0
    2042:	e6 95       	lsr	r30
    2044:	00 1c       	adc	r0, r0
    2046:	ca f7       	brpl	.-14     	; 0x203a <__divsf3_pse+0x2c>
    2048:	29 d0       	rcall	.+82     	; 0x209c <__divsf3_pse+0x8e>
    204a:	fe 2f       	mov	r31, r30
    204c:	27 d0       	rcall	.+78     	; 0x209c <__divsf3_pse+0x8e>
    204e:	66 0f       	add	r22, r22
    2050:	77 1f       	adc	r23, r23
    2052:	88 1f       	adc	r24, r24
    2054:	bb 1f       	adc	r27, r27
    2056:	26 17       	cp	r18, r22
    2058:	37 07       	cpc	r19, r23
    205a:	48 07       	cpc	r20, r24
    205c:	ab 07       	cpc	r26, r27
    205e:	b0 e8       	ldi	r27, 0x80	; 128
    2060:	09 f0       	breq	.+2      	; 0x2064 <__divsf3_pse+0x56>
    2062:	bb 0b       	sbc	r27, r27
    2064:	80 2d       	mov	r24, r0
    2066:	bf 01       	movw	r22, r30
    2068:	ff 27       	eor	r31, r31
    206a:	93 58       	subi	r25, 0x83	; 131
    206c:	5f 4f       	sbci	r21, 0xFF	; 255
    206e:	2a f0       	brmi	.+10     	; 0x207a <__divsf3_pse+0x6c>
    2070:	9e 3f       	cpi	r25, 0xFE	; 254
    2072:	51 05       	cpc	r21, r1
    2074:	68 f0       	brcs	.+26     	; 0x2090 <__divsf3_pse+0x82>
    2076:	b6 c0       	rjmp	.+364    	; 0x21e4 <__fp_inf>
    2078:	5e c1       	rjmp	.+700    	; 0x2336 <__fp_szero>
    207a:	5f 3f       	cpi	r21, 0xFF	; 255
    207c:	ec f3       	brlt	.-6      	; 0x2078 <__divsf3_pse+0x6a>
    207e:	98 3e       	cpi	r25, 0xE8	; 232
    2080:	dc f3       	brlt	.-10     	; 0x2078 <__divsf3_pse+0x6a>
    2082:	86 95       	lsr	r24
    2084:	77 95       	ror	r23
    2086:	67 95       	ror	r22
    2088:	b7 95       	ror	r27
    208a:	f7 95       	ror	r31
    208c:	9f 5f       	subi	r25, 0xFF	; 255
    208e:	c9 f7       	brne	.-14     	; 0x2082 <__divsf3_pse+0x74>
    2090:	88 0f       	add	r24, r24
    2092:	91 1d       	adc	r25, r1
    2094:	96 95       	lsr	r25
    2096:	87 95       	ror	r24
    2098:	97 f9       	bld	r25, 7
    209a:	08 95       	ret
    209c:	e1 e0       	ldi	r30, 0x01	; 1
    209e:	66 0f       	add	r22, r22
    20a0:	77 1f       	adc	r23, r23
    20a2:	88 1f       	adc	r24, r24
    20a4:	bb 1f       	adc	r27, r27
    20a6:	62 17       	cp	r22, r18
    20a8:	73 07       	cpc	r23, r19
    20aa:	84 07       	cpc	r24, r20
    20ac:	ba 07       	cpc	r27, r26
    20ae:	20 f0       	brcs	.+8      	; 0x20b8 <__divsf3_pse+0xaa>
    20b0:	62 1b       	sub	r22, r18
    20b2:	73 0b       	sbc	r23, r19
    20b4:	84 0b       	sbc	r24, r20
    20b6:	ba 0b       	sbc	r27, r26
    20b8:	ee 1f       	adc	r30, r30
    20ba:	88 f7       	brcc	.-30     	; 0x209e <__divsf3_pse+0x90>
    20bc:	e0 95       	com	r30
    20be:	08 95       	ret

000020c0 <__fixsfsi>:
    20c0:	04 d0       	rcall	.+8      	; 0x20ca <__fixunssfsi>
    20c2:	68 94       	set
    20c4:	b1 11       	cpse	r27, r1
    20c6:	37 c1       	rjmp	.+622    	; 0x2336 <__fp_szero>
    20c8:	08 95       	ret

000020ca <__fixunssfsi>:
    20ca:	1a d1       	rcall	.+564    	; 0x2300 <__fp_splitA>
    20cc:	88 f0       	brcs	.+34     	; 0x20f0 <__fixunssfsi+0x26>
    20ce:	9f 57       	subi	r25, 0x7F	; 127
    20d0:	90 f0       	brcs	.+36     	; 0x20f6 <__fixunssfsi+0x2c>
    20d2:	b9 2f       	mov	r27, r25
    20d4:	99 27       	eor	r25, r25
    20d6:	b7 51       	subi	r27, 0x17	; 23
    20d8:	a0 f0       	brcs	.+40     	; 0x2102 <__fixunssfsi+0x38>
    20da:	d1 f0       	breq	.+52     	; 0x2110 <__fixunssfsi+0x46>
    20dc:	66 0f       	add	r22, r22
    20de:	77 1f       	adc	r23, r23
    20e0:	88 1f       	adc	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	1a f0       	brmi	.+6      	; 0x20ec <__fixunssfsi+0x22>
    20e6:	ba 95       	dec	r27
    20e8:	c9 f7       	brne	.-14     	; 0x20dc <__fixunssfsi+0x12>
    20ea:	12 c0       	rjmp	.+36     	; 0x2110 <__fixunssfsi+0x46>
    20ec:	b1 30       	cpi	r27, 0x01	; 1
    20ee:	81 f0       	breq	.+32     	; 0x2110 <__fixunssfsi+0x46>
    20f0:	21 d1       	rcall	.+578    	; 0x2334 <__fp_zero>
    20f2:	b1 e0       	ldi	r27, 0x01	; 1
    20f4:	08 95       	ret
    20f6:	1e c1       	rjmp	.+572    	; 0x2334 <__fp_zero>
    20f8:	67 2f       	mov	r22, r23
    20fa:	78 2f       	mov	r23, r24
    20fc:	88 27       	eor	r24, r24
    20fe:	b8 5f       	subi	r27, 0xF8	; 248
    2100:	39 f0       	breq	.+14     	; 0x2110 <__fixunssfsi+0x46>
    2102:	b9 3f       	cpi	r27, 0xF9	; 249
    2104:	cc f3       	brlt	.-14     	; 0x20f8 <__fixunssfsi+0x2e>
    2106:	86 95       	lsr	r24
    2108:	77 95       	ror	r23
    210a:	67 95       	ror	r22
    210c:	b3 95       	inc	r27
    210e:	d9 f7       	brne	.-10     	; 0x2106 <__fixunssfsi+0x3c>
    2110:	3e f4       	brtc	.+14     	; 0x2120 <__fixunssfsi+0x56>
    2112:	90 95       	com	r25
    2114:	80 95       	com	r24
    2116:	70 95       	com	r23
    2118:	61 95       	neg	r22
    211a:	7f 4f       	sbci	r23, 0xFF	; 255
    211c:	8f 4f       	sbci	r24, 0xFF	; 255
    211e:	9f 4f       	sbci	r25, 0xFF	; 255
    2120:	08 95       	ret

00002122 <__floatunsisf>:
    2122:	e8 94       	clt
    2124:	09 c0       	rjmp	.+18     	; 0x2138 <__floatsisf+0x12>

00002126 <__floatsisf>:
    2126:	97 fb       	bst	r25, 7
    2128:	3e f4       	brtc	.+14     	; 0x2138 <__floatsisf+0x12>
    212a:	90 95       	com	r25
    212c:	80 95       	com	r24
    212e:	70 95       	com	r23
    2130:	61 95       	neg	r22
    2132:	7f 4f       	sbci	r23, 0xFF	; 255
    2134:	8f 4f       	sbci	r24, 0xFF	; 255
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	99 23       	and	r25, r25
    213a:	a9 f0       	breq	.+42     	; 0x2166 <__floatsisf+0x40>
    213c:	f9 2f       	mov	r31, r25
    213e:	96 e9       	ldi	r25, 0x96	; 150
    2140:	bb 27       	eor	r27, r27
    2142:	93 95       	inc	r25
    2144:	f6 95       	lsr	r31
    2146:	87 95       	ror	r24
    2148:	77 95       	ror	r23
    214a:	67 95       	ror	r22
    214c:	b7 95       	ror	r27
    214e:	f1 11       	cpse	r31, r1
    2150:	f8 cf       	rjmp	.-16     	; 0x2142 <__floatsisf+0x1c>
    2152:	fa f4       	brpl	.+62     	; 0x2192 <__floatsisf+0x6c>
    2154:	bb 0f       	add	r27, r27
    2156:	11 f4       	brne	.+4      	; 0x215c <__floatsisf+0x36>
    2158:	60 ff       	sbrs	r22, 0
    215a:	1b c0       	rjmp	.+54     	; 0x2192 <__floatsisf+0x6c>
    215c:	6f 5f       	subi	r22, 0xFF	; 255
    215e:	7f 4f       	sbci	r23, 0xFF	; 255
    2160:	8f 4f       	sbci	r24, 0xFF	; 255
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	16 c0       	rjmp	.+44     	; 0x2192 <__floatsisf+0x6c>
    2166:	88 23       	and	r24, r24
    2168:	11 f0       	breq	.+4      	; 0x216e <__floatsisf+0x48>
    216a:	96 e9       	ldi	r25, 0x96	; 150
    216c:	11 c0       	rjmp	.+34     	; 0x2190 <__floatsisf+0x6a>
    216e:	77 23       	and	r23, r23
    2170:	21 f0       	breq	.+8      	; 0x217a <__floatsisf+0x54>
    2172:	9e e8       	ldi	r25, 0x8E	; 142
    2174:	87 2f       	mov	r24, r23
    2176:	76 2f       	mov	r23, r22
    2178:	05 c0       	rjmp	.+10     	; 0x2184 <__floatsisf+0x5e>
    217a:	66 23       	and	r22, r22
    217c:	71 f0       	breq	.+28     	; 0x219a <__floatsisf+0x74>
    217e:	96 e8       	ldi	r25, 0x86	; 134
    2180:	86 2f       	mov	r24, r22
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	2a f0       	brmi	.+10     	; 0x2192 <__floatsisf+0x6c>
    2188:	9a 95       	dec	r25
    218a:	66 0f       	add	r22, r22
    218c:	77 1f       	adc	r23, r23
    218e:	88 1f       	adc	r24, r24
    2190:	da f7       	brpl	.-10     	; 0x2188 <__floatsisf+0x62>
    2192:	88 0f       	add	r24, r24
    2194:	96 95       	lsr	r25
    2196:	87 95       	ror	r24
    2198:	97 f9       	bld	r25, 7
    219a:	08 95       	ret

0000219c <__fp_cmp>:
    219c:	99 0f       	add	r25, r25
    219e:	00 08       	sbc	r0, r0
    21a0:	55 0f       	add	r21, r21
    21a2:	aa 0b       	sbc	r26, r26
    21a4:	e0 e8       	ldi	r30, 0x80	; 128
    21a6:	fe ef       	ldi	r31, 0xFE	; 254
    21a8:	16 16       	cp	r1, r22
    21aa:	17 06       	cpc	r1, r23
    21ac:	e8 07       	cpc	r30, r24
    21ae:	f9 07       	cpc	r31, r25
    21b0:	c0 f0       	brcs	.+48     	; 0x21e2 <__fp_cmp+0x46>
    21b2:	12 16       	cp	r1, r18
    21b4:	13 06       	cpc	r1, r19
    21b6:	e4 07       	cpc	r30, r20
    21b8:	f5 07       	cpc	r31, r21
    21ba:	98 f0       	brcs	.+38     	; 0x21e2 <__fp_cmp+0x46>
    21bc:	62 1b       	sub	r22, r18
    21be:	73 0b       	sbc	r23, r19
    21c0:	84 0b       	sbc	r24, r20
    21c2:	95 0b       	sbc	r25, r21
    21c4:	39 f4       	brne	.+14     	; 0x21d4 <__fp_cmp+0x38>
    21c6:	0a 26       	eor	r0, r26
    21c8:	61 f0       	breq	.+24     	; 0x21e2 <__fp_cmp+0x46>
    21ca:	23 2b       	or	r18, r19
    21cc:	24 2b       	or	r18, r20
    21ce:	25 2b       	or	r18, r21
    21d0:	21 f4       	brne	.+8      	; 0x21da <__fp_cmp+0x3e>
    21d2:	08 95       	ret
    21d4:	0a 26       	eor	r0, r26
    21d6:	09 f4       	brne	.+2      	; 0x21da <__fp_cmp+0x3e>
    21d8:	a1 40       	sbci	r26, 0x01	; 1
    21da:	a6 95       	lsr	r26
    21dc:	8f ef       	ldi	r24, 0xFF	; 255
    21de:	81 1d       	adc	r24, r1
    21e0:	81 1d       	adc	r24, r1
    21e2:	08 95       	ret

000021e4 <__fp_inf>:
    21e4:	97 f9       	bld	r25, 7
    21e6:	9f 67       	ori	r25, 0x7F	; 127
    21e8:	80 e8       	ldi	r24, 0x80	; 128
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	08 95       	ret

000021f0 <__fp_nan>:
    21f0:	9f ef       	ldi	r25, 0xFF	; 255
    21f2:	80 ec       	ldi	r24, 0xC0	; 192
    21f4:	08 95       	ret

000021f6 <__fp_powser>:
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	1f 93       	push	r17
    21fc:	0f 93       	push	r16
    21fe:	ff 92       	push	r15
    2200:	ef 92       	push	r14
    2202:	df 92       	push	r13
    2204:	7b 01       	movw	r14, r22
    2206:	8c 01       	movw	r16, r24
    2208:	68 94       	set
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <__fp_powser+0x20>
    220c:	da 2e       	mov	r13, r26
    220e:	ef 01       	movw	r28, r30
    2210:	af d0       	rcall	.+350    	; 0x2370 <__mulsf3x>
    2212:	fe 01       	movw	r30, r28
    2214:	e8 94       	clt
    2216:	a5 91       	lpm	r26, Z+
    2218:	25 91       	lpm	r18, Z+
    221a:	35 91       	lpm	r19, Z+
    221c:	45 91       	lpm	r20, Z+
    221e:	55 91       	lpm	r21, Z+
    2220:	ae f3       	brts	.-22     	; 0x220c <__fp_powser+0x16>
    2222:	ef 01       	movw	r28, r30
    2224:	63 de       	rcall	.-826    	; 0x1eec <__addsf3x>
    2226:	fe 01       	movw	r30, r28
    2228:	97 01       	movw	r18, r14
    222a:	a8 01       	movw	r20, r16
    222c:	da 94       	dec	r13
    222e:	79 f7       	brne	.-34     	; 0x220e <__fp_powser+0x18>
    2230:	df 90       	pop	r13
    2232:	ef 90       	pop	r14
    2234:	ff 90       	pop	r15
    2236:	0f 91       	pop	r16
    2238:	1f 91       	pop	r17
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <__fp_pscA>:
    2240:	00 24       	eor	r0, r0
    2242:	0a 94       	dec	r0
    2244:	16 16       	cp	r1, r22
    2246:	17 06       	cpc	r1, r23
    2248:	18 06       	cpc	r1, r24
    224a:	09 06       	cpc	r0, r25
    224c:	08 95       	ret

0000224e <__fp_pscB>:
    224e:	00 24       	eor	r0, r0
    2250:	0a 94       	dec	r0
    2252:	12 16       	cp	r1, r18
    2254:	13 06       	cpc	r1, r19
    2256:	14 06       	cpc	r1, r20
    2258:	05 06       	cpc	r0, r21
    225a:	08 95       	ret
    225c:	c9 cf       	rjmp	.-110    	; 0x21f0 <__fp_nan>

0000225e <__fp_rempio2>:
    225e:	50 d0       	rcall	.+160    	; 0x2300 <__fp_splitA>
    2260:	e8 f3       	brcs	.-6      	; 0x225c <__fp_pscB+0xe>
    2262:	e8 94       	clt
    2264:	e0 e0       	ldi	r30, 0x00	; 0
    2266:	bb 27       	eor	r27, r27
    2268:	9f 57       	subi	r25, 0x7F	; 127
    226a:	f0 f0       	brcs	.+60     	; 0x22a8 <__fp_rempio2+0x4a>
    226c:	2a ed       	ldi	r18, 0xDA	; 218
    226e:	3f e0       	ldi	r19, 0x0F	; 15
    2270:	49 ec       	ldi	r20, 0xC9	; 201
    2272:	06 c0       	rjmp	.+12     	; 0x2280 <__fp_rempio2+0x22>
    2274:	ee 0f       	add	r30, r30
    2276:	bb 0f       	add	r27, r27
    2278:	66 1f       	adc	r22, r22
    227a:	77 1f       	adc	r23, r23
    227c:	88 1f       	adc	r24, r24
    227e:	28 f0       	brcs	.+10     	; 0x228a <__fp_rempio2+0x2c>
    2280:	b2 3a       	cpi	r27, 0xA2	; 162
    2282:	62 07       	cpc	r22, r18
    2284:	73 07       	cpc	r23, r19
    2286:	84 07       	cpc	r24, r20
    2288:	28 f0       	brcs	.+10     	; 0x2294 <__fp_rempio2+0x36>
    228a:	b2 5a       	subi	r27, 0xA2	; 162
    228c:	62 0b       	sbc	r22, r18
    228e:	73 0b       	sbc	r23, r19
    2290:	84 0b       	sbc	r24, r20
    2292:	e3 95       	inc	r30
    2294:	9a 95       	dec	r25
    2296:	72 f7       	brpl	.-36     	; 0x2274 <__fp_rempio2+0x16>
    2298:	80 38       	cpi	r24, 0x80	; 128
    229a:	30 f4       	brcc	.+12     	; 0x22a8 <__fp_rempio2+0x4a>
    229c:	9a 95       	dec	r25
    229e:	bb 0f       	add	r27, r27
    22a0:	66 1f       	adc	r22, r22
    22a2:	77 1f       	adc	r23, r23
    22a4:	88 1f       	adc	r24, r24
    22a6:	d2 f7       	brpl	.-12     	; 0x229c <__fp_rempio2+0x3e>
    22a8:	90 48       	sbci	r25, 0x80	; 128
    22aa:	be c0       	rjmp	.+380    	; 0x2428 <__fp_mpack_finite>

000022ac <__fp_round>:
    22ac:	09 2e       	mov	r0, r25
    22ae:	03 94       	inc	r0
    22b0:	00 0c       	add	r0, r0
    22b2:	11 f4       	brne	.+4      	; 0x22b8 <__fp_round+0xc>
    22b4:	88 23       	and	r24, r24
    22b6:	52 f0       	brmi	.+20     	; 0x22cc <__fp_round+0x20>
    22b8:	bb 0f       	add	r27, r27
    22ba:	40 f4       	brcc	.+16     	; 0x22cc <__fp_round+0x20>
    22bc:	bf 2b       	or	r27, r31
    22be:	11 f4       	brne	.+4      	; 0x22c4 <__fp_round+0x18>
    22c0:	60 ff       	sbrs	r22, 0
    22c2:	04 c0       	rjmp	.+8      	; 0x22cc <__fp_round+0x20>
    22c4:	6f 5f       	subi	r22, 0xFF	; 255
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	08 95       	ret

000022ce <__fp_sinus>:
    22ce:	ef 93       	push	r30
    22d0:	e0 ff       	sbrs	r30, 0
    22d2:	06 c0       	rjmp	.+12     	; 0x22e0 <__fp_sinus+0x12>
    22d4:	a2 ea       	ldi	r26, 0xA2	; 162
    22d6:	2a ed       	ldi	r18, 0xDA	; 218
    22d8:	3f e0       	ldi	r19, 0x0F	; 15
    22da:	49 ec       	ldi	r20, 0xC9	; 201
    22dc:	5f eb       	ldi	r21, 0xBF	; 191
    22de:	06 de       	rcall	.-1012   	; 0x1eec <__addsf3x>
    22e0:	e5 df       	rcall	.-54     	; 0x22ac <__fp_round>
    22e2:	0f 90       	pop	r0
    22e4:	03 94       	inc	r0
    22e6:	01 fc       	sbrc	r0, 1
    22e8:	90 58       	subi	r25, 0x80	; 128
    22ea:	e9 eb       	ldi	r30, 0xB9	; 185
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	a8 c0       	rjmp	.+336    	; 0x2440 <__fp_powsodd>

000022f0 <__fp_split3>:
    22f0:	57 fd       	sbrc	r21, 7
    22f2:	90 58       	subi	r25, 0x80	; 128
    22f4:	44 0f       	add	r20, r20
    22f6:	55 1f       	adc	r21, r21
    22f8:	59 f0       	breq	.+22     	; 0x2310 <__fp_splitA+0x10>
    22fa:	5f 3f       	cpi	r21, 0xFF	; 255
    22fc:	71 f0       	breq	.+28     	; 0x231a <__fp_splitA+0x1a>
    22fe:	47 95       	ror	r20

00002300 <__fp_splitA>:
    2300:	88 0f       	add	r24, r24
    2302:	97 fb       	bst	r25, 7
    2304:	99 1f       	adc	r25, r25
    2306:	61 f0       	breq	.+24     	; 0x2320 <__fp_splitA+0x20>
    2308:	9f 3f       	cpi	r25, 0xFF	; 255
    230a:	79 f0       	breq	.+30     	; 0x232a <__fp_splitA+0x2a>
    230c:	87 95       	ror	r24
    230e:	08 95       	ret
    2310:	12 16       	cp	r1, r18
    2312:	13 06       	cpc	r1, r19
    2314:	14 06       	cpc	r1, r20
    2316:	55 1f       	adc	r21, r21
    2318:	f2 cf       	rjmp	.-28     	; 0x22fe <__fp_split3+0xe>
    231a:	46 95       	lsr	r20
    231c:	f1 df       	rcall	.-30     	; 0x2300 <__fp_splitA>
    231e:	08 c0       	rjmp	.+16     	; 0x2330 <__fp_splitA+0x30>
    2320:	16 16       	cp	r1, r22
    2322:	17 06       	cpc	r1, r23
    2324:	18 06       	cpc	r1, r24
    2326:	99 1f       	adc	r25, r25
    2328:	f1 cf       	rjmp	.-30     	; 0x230c <__fp_splitA+0xc>
    232a:	86 95       	lsr	r24
    232c:	71 05       	cpc	r23, r1
    232e:	61 05       	cpc	r22, r1
    2330:	08 94       	sec
    2332:	08 95       	ret

00002334 <__fp_zero>:
    2334:	e8 94       	clt

00002336 <__fp_szero>:
    2336:	bb 27       	eor	r27, r27
    2338:	66 27       	eor	r22, r22
    233a:	77 27       	eor	r23, r23
    233c:	cb 01       	movw	r24, r22
    233e:	97 f9       	bld	r25, 7
    2340:	08 95       	ret

00002342 <__gesf2>:
    2342:	2c df       	rcall	.-424    	; 0x219c <__fp_cmp>
    2344:	08 f4       	brcc	.+2      	; 0x2348 <__gesf2+0x6>
    2346:	8f ef       	ldi	r24, 0xFF	; 255
    2348:	08 95       	ret

0000234a <inverse>:
    234a:	9b 01       	movw	r18, r22
    234c:	ac 01       	movw	r20, r24
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	80 e8       	ldi	r24, 0x80	; 128
    2354:	9f e3       	ldi	r25, 0x3F	; 63
    2356:	4c ce       	rjmp	.-872    	; 0x1ff0 <__divsf3>

00002358 <__mulsf3>:
    2358:	0b d0       	rcall	.+22     	; 0x2370 <__mulsf3x>
    235a:	a8 cf       	rjmp	.-176    	; 0x22ac <__fp_round>
    235c:	71 df       	rcall	.-286    	; 0x2240 <__fp_pscA>
    235e:	28 f0       	brcs	.+10     	; 0x236a <__mulsf3+0x12>
    2360:	76 df       	rcall	.-276    	; 0x224e <__fp_pscB>
    2362:	18 f0       	brcs	.+6      	; 0x236a <__mulsf3+0x12>
    2364:	95 23       	and	r25, r21
    2366:	09 f0       	breq	.+2      	; 0x236a <__mulsf3+0x12>
    2368:	3d cf       	rjmp	.-390    	; 0x21e4 <__fp_inf>
    236a:	42 cf       	rjmp	.-380    	; 0x21f0 <__fp_nan>
    236c:	11 24       	eor	r1, r1
    236e:	e3 cf       	rjmp	.-58     	; 0x2336 <__fp_szero>

00002370 <__mulsf3x>:
    2370:	bf df       	rcall	.-130    	; 0x22f0 <__fp_split3>
    2372:	a0 f3       	brcs	.-24     	; 0x235c <__mulsf3+0x4>

00002374 <__mulsf3_pse>:
    2374:	95 9f       	mul	r25, r21
    2376:	d1 f3       	breq	.-12     	; 0x236c <__mulsf3+0x14>
    2378:	95 0f       	add	r25, r21
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	55 1f       	adc	r21, r21
    237e:	62 9f       	mul	r22, r18
    2380:	f0 01       	movw	r30, r0
    2382:	72 9f       	mul	r23, r18
    2384:	bb 27       	eor	r27, r27
    2386:	f0 0d       	add	r31, r0
    2388:	b1 1d       	adc	r27, r1
    238a:	63 9f       	mul	r22, r19
    238c:	aa 27       	eor	r26, r26
    238e:	f0 0d       	add	r31, r0
    2390:	b1 1d       	adc	r27, r1
    2392:	aa 1f       	adc	r26, r26
    2394:	64 9f       	mul	r22, r20
    2396:	66 27       	eor	r22, r22
    2398:	b0 0d       	add	r27, r0
    239a:	a1 1d       	adc	r26, r1
    239c:	66 1f       	adc	r22, r22
    239e:	82 9f       	mul	r24, r18
    23a0:	22 27       	eor	r18, r18
    23a2:	b0 0d       	add	r27, r0
    23a4:	a1 1d       	adc	r26, r1
    23a6:	62 1f       	adc	r22, r18
    23a8:	73 9f       	mul	r23, r19
    23aa:	b0 0d       	add	r27, r0
    23ac:	a1 1d       	adc	r26, r1
    23ae:	62 1f       	adc	r22, r18
    23b0:	83 9f       	mul	r24, r19
    23b2:	a0 0d       	add	r26, r0
    23b4:	61 1d       	adc	r22, r1
    23b6:	22 1f       	adc	r18, r18
    23b8:	74 9f       	mul	r23, r20
    23ba:	33 27       	eor	r19, r19
    23bc:	a0 0d       	add	r26, r0
    23be:	61 1d       	adc	r22, r1
    23c0:	23 1f       	adc	r18, r19
    23c2:	84 9f       	mul	r24, r20
    23c4:	60 0d       	add	r22, r0
    23c6:	21 1d       	adc	r18, r1
    23c8:	82 2f       	mov	r24, r18
    23ca:	76 2f       	mov	r23, r22
    23cc:	6a 2f       	mov	r22, r26
    23ce:	11 24       	eor	r1, r1
    23d0:	9f 57       	subi	r25, 0x7F	; 127
    23d2:	50 40       	sbci	r21, 0x00	; 0
    23d4:	8a f0       	brmi	.+34     	; 0x23f8 <__mulsf3_pse+0x84>
    23d6:	e1 f0       	breq	.+56     	; 0x2410 <__mulsf3_pse+0x9c>
    23d8:	88 23       	and	r24, r24
    23da:	4a f0       	brmi	.+18     	; 0x23ee <__mulsf3_pse+0x7a>
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	bb 1f       	adc	r27, r27
    23e2:	66 1f       	adc	r22, r22
    23e4:	77 1f       	adc	r23, r23
    23e6:	88 1f       	adc	r24, r24
    23e8:	91 50       	subi	r25, 0x01	; 1
    23ea:	50 40       	sbci	r21, 0x00	; 0
    23ec:	a9 f7       	brne	.-22     	; 0x23d8 <__mulsf3_pse+0x64>
    23ee:	9e 3f       	cpi	r25, 0xFE	; 254
    23f0:	51 05       	cpc	r21, r1
    23f2:	70 f0       	brcs	.+28     	; 0x2410 <__mulsf3_pse+0x9c>
    23f4:	f7 ce       	rjmp	.-530    	; 0x21e4 <__fp_inf>
    23f6:	9f cf       	rjmp	.-194    	; 0x2336 <__fp_szero>
    23f8:	5f 3f       	cpi	r21, 0xFF	; 255
    23fa:	ec f3       	brlt	.-6      	; 0x23f6 <__mulsf3_pse+0x82>
    23fc:	98 3e       	cpi	r25, 0xE8	; 232
    23fe:	dc f3       	brlt	.-10     	; 0x23f6 <__mulsf3_pse+0x82>
    2400:	86 95       	lsr	r24
    2402:	77 95       	ror	r23
    2404:	67 95       	ror	r22
    2406:	b7 95       	ror	r27
    2408:	f7 95       	ror	r31
    240a:	e7 95       	ror	r30
    240c:	9f 5f       	subi	r25, 0xFF	; 255
    240e:	c1 f7       	brne	.-16     	; 0x2400 <__mulsf3_pse+0x8c>
    2410:	fe 2b       	or	r31, r30
    2412:	88 0f       	add	r24, r24
    2414:	91 1d       	adc	r25, r1
    2416:	96 95       	lsr	r25
    2418:	87 95       	ror	r24
    241a:	97 f9       	bld	r25, 7
    241c:	08 95       	ret

0000241e <square>:
    241e:	9b 01       	movw	r18, r22
    2420:	ac 01       	movw	r20, r24
    2422:	9a cf       	rjmp	.-204    	; 0x2358 <__mulsf3>

00002424 <__fp_mpack>:
    2424:	9f 3f       	cpi	r25, 0xFF	; 255
    2426:	31 f0       	breq	.+12     	; 0x2434 <__fp_mpack_finite+0xc>

00002428 <__fp_mpack_finite>:
    2428:	91 50       	subi	r25, 0x01	; 1
    242a:	20 f4       	brcc	.+8      	; 0x2434 <__fp_mpack_finite+0xc>
    242c:	87 95       	ror	r24
    242e:	77 95       	ror	r23
    2430:	67 95       	ror	r22
    2432:	b7 95       	ror	r27
    2434:	88 0f       	add	r24, r24
    2436:	91 1d       	adc	r25, r1
    2438:	96 95       	lsr	r25
    243a:	87 95       	ror	r24
    243c:	97 f9       	bld	r25, 7
    243e:	08 95       	ret

00002440 <__fp_powsodd>:
    2440:	9f 93       	push	r25
    2442:	8f 93       	push	r24
    2444:	7f 93       	push	r23
    2446:	6f 93       	push	r22
    2448:	ff 93       	push	r31
    244a:	ef 93       	push	r30
    244c:	9b 01       	movw	r18, r22
    244e:	ac 01       	movw	r20, r24
    2450:	83 df       	rcall	.-250    	; 0x2358 <__mulsf3>
    2452:	ef 91       	pop	r30
    2454:	ff 91       	pop	r31
    2456:	cf de       	rcall	.-610    	; 0x21f6 <__fp_powser>
    2458:	2f 91       	pop	r18
    245a:	3f 91       	pop	r19
    245c:	4f 91       	pop	r20
    245e:	5f 91       	pop	r21
    2460:	7b cf       	rjmp	.-266    	; 0x2358 <__mulsf3>

00002462 <_exit>:
    2462:	f8 94       	cli

00002464 <__stop_program>:
    2464:	ff cf       	rjmp	.-2      	; 0x2464 <__stop_program>
