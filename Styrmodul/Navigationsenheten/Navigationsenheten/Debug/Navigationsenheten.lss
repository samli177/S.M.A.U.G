
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001296  00800100  00002334  000023c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000683  00801396  00801396  0000365e  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  00003660  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  000064c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007210  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000418  00000000  00000000  0000723f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d53  00000000  00000000  00007657  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fe3  00000000  00000000  0000b3aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000025ff  00000000  00000000  0000c38d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c8c  00000000  00000000  0000e98c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d2b  00000000  00000000  0000f618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000262a  00000000  00000000  00010343  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000470  00000000  00000000  0001296d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	c8 c5       	rjmp	.+2960   	; 0xb96 <__vector_1>
       6:	00 00       	nop
       8:	f0 c5       	rjmp	.+3040   	; 0xbea <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	b4 c6       	rjmp	.+3432   	; 0xd7a <__vector_4>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c6       	rjmp	.+3242   	; 0xce0 <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__vector_26>
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c6       	rjmp	.+3194   	; 0xcfc <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e1       	ldi	r17, 0x13	; 19
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e4 e3       	ldi	r30, 0x34	; 52
      ec:	f3 e2       	ldi	r31, 0x23	; 35
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a6 39       	cpi	r26, 0x96	; 150
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	2a e1       	ldi	r18, 0x1A	; 26
     100:	a6 e9       	ldi	r26, 0x96	; 150
     102:	b3 e1       	ldi	r27, 0x13	; 19
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a9 31       	cpi	r26, 0x19	; 25
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	97 d5       	rcall	.+2862   	; 0xc3e <main>
     110:	0c 94 98 11 	jmp	0x2330	; 0x2330 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
	}
}

void turn_around()
{
	if(gStatus)
     116:	80 91 00 01 	lds	r24, 0x0100
     11a:	88 23       	and	r24, r24
     11c:	21 f0       	breq	.+8      	; 0x126 <turn_around+0x10>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     11e:	6c e1       	ldi	r22, 0x1C	; 28
     120:	71 e1       	ldi	r23, 0x11	; 17
     122:	80 e8       	ldi	r24, 0x80	; 128
     124:	9f d7       	rcall	.+3902   	; 0x1064 <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(180, 0);
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	84 eb       	ldi	r24, 0xB4	; 180
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 ed 0b 	call	0x17da	; 0x17da <USART_SendTurn>
	while(USART_turn_done() == 0)
     130:	08 c0       	rjmp	.+16     	; 0x142 <turn_around+0x2c>
	{
		USART_DecodeRxFIFO();
     132:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <USART_DecodeRxFIFO>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     136:	8f e3       	ldi	r24, 0x3F	; 63
     138:	9c e9       	ldi	r25, 0x9C	; 156
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <turn_around+0x24>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <turn_around+0x2a>
     140:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(180, 0);
	while(USART_turn_done() == 0)
     142:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <USART_turn_done>
     146:	88 23       	and	r24, r24
     148:	a1 f3       	breq	.-24     	; 0x132 <turn_around+0x1c>
	{
		USART_DecodeRxFIFO();
		_delay_ms(10);
	}
	
	if(gStatus)
     14a:	80 91 00 01 	lds	r24, 0x0100
     14e:	88 23       	and	r24, r24
     150:	21 f0       	breq	.+8      	; 0x15a <turn_around+0x44>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     152:	65 e3       	ldi	r22, 0x35	; 53
     154:	71 e1       	ldi	r23, 0x11	; 17
     156:	80 e8       	ldi	r24, 0x80	; 128
     158:	85 c7       	rjmp	.+3850   	; 0x1064 <TWI_send_string>
     15a:	08 95       	ret

0000015c <walk_forward>:
	}
}

void walk_forward()
{
     15c:	8f 92       	push	r8
     15e:	9f 92       	push	r9
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	cf 92       	push	r12
     166:	df 92       	push	r13
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     170:	18 d4       	rcall	.+2096   	; 0x9a2 <navigation_angle_offset>
     172:	6b 01       	movw	r12, r22
     174:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     176:	79 d2       	rcall	.+1266   	; 0x66a <navigation_direction_regulation>
     178:	4b 01       	movw	r8, r22
     17a:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	48 e4       	ldi	r20, 0x48	; 72
     182:	52 e4       	ldi	r21, 0x42	; 66
     184:	c7 01       	movw	r24, r14
     186:	b6 01       	movw	r22, r12
     188:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     18c:	9b 01       	movw	r18, r22
     18e:	ac 01       	movw	r20, r24
     190:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__addsf3>
     194:	2b ed       	ldi	r18, 0xDB	; 219
     196:	3f e0       	ldi	r19, 0x0F	; 15
     198:	49 e4       	ldi	r20, 0x49	; 73
     19a:	50 e4       	ldi	r21, 0x40	; 64
     19c:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	4c e4       	ldi	r20, 0x4C	; 76
     1a6:	52 e4       	ldi	r21, 0x42	; 66
     1a8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__addsf3>
     1ac:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fixsfsi>
	if (adjustmentRotation >= 100)
     1b0:	64 36       	cpi	r22, 0x64	; 100
     1b2:	71 05       	cpc	r23, r1
     1b4:	34 f4       	brge	.+12     	; 0x1c2 <walk_forward+0x66>
     1b6:	eb 01       	movw	r28, r22
     1b8:	dd 23       	and	r29, r29
     1ba:	2c f4       	brge	.+10     	; 0x1c6 <walk_forward+0x6a>
     1bc:	c0 e0       	ldi	r28, 0x00	; 0
     1be:	d0 e0       	ldi	r29, 0x00	; 0
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1c2:	c4 e6       	ldi	r28, 0x64	; 100
     1c4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	44 eb       	ldi	r20, 0xB4	; 180
     1cc:	52 e4       	ldi	r21, 0x42	; 66
     1ce:	c5 01       	movw	r24, r10
     1d0:	b4 01       	movw	r22, r8
     1d2:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     1d6:	2b ed       	ldi	r18, 0xDB	; 219
     1d8:	3f e0       	ldi	r19, 0x0F	; 15
     1da:	49 ec       	ldi	r20, 0xC9	; 201
     1dc:	50 e4       	ldi	r21, 0x40	; 64
     1de:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     1e2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fixsfsi>
     1e6:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1e8:	40 91 01 01 	lds	r20, 0x0101
     1ec:	6c 2f       	mov	r22, r28
     1ee:	82 2f       	mov	r24, r18
     1f0:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1f4:	61 d1       	rcall	.+706    	; 0x4b8 <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	bf 90       	pop	r11
     204:	af 90       	pop	r10
     206:	9f 90       	pop	r9
     208:	8f 90       	pop	r8
     20a:	08 95       	ret

0000020c <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
	if(gStatus)
     210:	80 91 00 01 	lds	r24, 0x0100
     214:	88 23       	and	r24, r24
     216:	21 f0       	breq	.+8      	; 0x220 <turn_right+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     218:	6a e5       	ldi	r22, 0x5A	; 90
     21a:	71 e1       	ldi	r23, 0x11	; 17
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	22 d7       	rcall	.+3652   	; 0x1064 <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 1);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	8a e5       	ldi	r24, 0x5A	; 90
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 ed 0b 	call	0x17da	; 0x17da <USART_SendTurn>
	while(USART_turn_done() == 0)
     22a:	08 c0       	rjmp	.+16     	; 0x23c <turn_right+0x30>
	{
		USART_DecodeRxFIFO();
     22c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <USART_DecodeRxFIFO>
     230:	8f e3       	ldi	r24, 0x3F	; 63
     232:	9c e9       	ldi	r25, 0x9C	; 156
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <turn_right+0x28>
     238:	00 c0       	rjmp	.+0      	; 0x23a <turn_right+0x2e>
     23a:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 1);
	while(USART_turn_done() == 0)
     23c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <USART_turn_done>
     240:	88 23       	and	r24, r24
     242:	a1 f3       	breq	.-24     	; 0x22c <turn_right+0x20>
     244:	cc e0       	ldi	r28, 0x0C	; 12
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	03 c0       	rjmp	.+6      	; 0x250 <turn_right+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     24a:	88 df       	rcall	.-240    	; 0x15c <walk_forward>
     24c:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_DecodeRxFIFO();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
     24e:	19 f0       	breq	.+6      	; 0x256 <turn_right+0x4a>
     250:	2d d1       	rcall	.+602    	; 0x4ac <navigation_autonomous_walk>
     252:	81 11       	cpse	r24, r1
     254:	fa cf       	rjmp	.-12     	; 0x24a <turn_right+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     256:	80 91 00 01 	lds	r24, 0x0100
     25a:	88 23       	and	r24, r24
     25c:	21 f0       	breq	.+8      	; 0x266 <turn_right+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     25e:	62 e7       	ldi	r22, 0x72	; 114
     260:	71 e1       	ldi	r23, 0x11	; 17
     262:	80 e8       	ldi	r24, 0x80	; 128
     264:	ff d6       	rcall	.+3582   	; 0x1064 <TWI_send_string>
	}
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
	if(gStatus)
     270:	80 91 00 01 	lds	r24, 0x0100
     274:	88 23       	and	r24, r24
     276:	21 f0       	breq	.+8      	; 0x280 <turn_left+0x14>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     278:	66 e8       	ldi	r22, 0x86	; 134
     27a:	71 e1       	ldi	r23, 0x11	; 17
     27c:	80 e8       	ldi	r24, 0x80	; 128
     27e:	f2 d6       	rcall	.+3556   	; 0x1064 <TWI_send_string>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 0);
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	8a e5       	ldi	r24, 0x5A	; 90
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 ed 0b 	call	0x17da	; 0x17da <USART_SendTurn>
	while(USART_turn_done() == 0)
     28a:	08 c0       	rjmp	.+16     	; 0x29c <turn_left+0x30>
	{
		USART_DecodeRxFIFO();
     28c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <USART_DecodeRxFIFO>
     290:	8f e3       	ldi	r24, 0x3F	; 63
     292:	9c e9       	ldi	r25, 0x9C	; 156
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <turn_left+0x28>
     298:	00 c0       	rjmp	.+0      	; 0x29a <turn_left+0x2e>
     29a:	00 00       	nop
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}*/
	USART_SendTurn(90, 0);
	while(USART_turn_done() == 0)
     29c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <USART_turn_done>
     2a0:	88 23       	and	r24, r24
     2a2:	a1 f3       	breq	.-24     	; 0x28c <turn_left+0x20>
     2a4:	cc e0       	ldi	r28, 0x0C	; 12
     2a6:	d0 e0       	ldi	r29, 0x00	; 0
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <turn_left+0x44>
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
	{
		walk_forward();
     2aa:	58 df       	rcall	.-336    	; 0x15c <walk_forward>
     2ac:	21 97       	sbiw	r28, 0x01	; 1
	{
		USART_DecodeRxFIFO();
		_delay_ms(10);
	}
	
	for(int i = 0; (i < 12 && navigation_autonomous_walk() != 0); ++i)
     2ae:	19 f0       	breq	.+6      	; 0x2b6 <turn_left+0x4a>
     2b0:	fd d0       	rcall	.+506    	; 0x4ac <navigation_autonomous_walk>
     2b2:	81 11       	cpse	r24, r1
     2b4:	fa cf       	rjmp	.-12     	; 0x2aa <turn_left+0x3e>
	{
		walk_forward();
	}
	if(gStatus)
     2b6:	80 91 00 01 	lds	r24, 0x0100
     2ba:	88 23       	and	r24, r24
     2bc:	21 f0       	breq	.+8      	; 0x2c6 <turn_left+0x5a>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2be:	6d e9       	ldi	r22, 0x9D	; 157
     2c0:	71 e1       	ldi	r23, 0x11	; 17
     2c2:	80 e8       	ldi	r24, 0x80	; 128
     2c4:	cf d6       	rcall	.+3486   	; 0x1064 <TWI_send_string>
	}
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <autonomouswalk_walk>:
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void autonomouswalk_walk()
{
	navigation_low_pass_obstacle();
     2cc:	7e d1       	rcall	.+764    	; 0x5ca <navigation_low_pass_obstacle>
	if(navigation_left_algorithm())
     2ce:	e8 d0       	rcall	.+464    	; 0x4a0 <navigation_left_algorithm>
     2d0:	88 23       	and	r24, r24
     2d2:	c9 f0       	breq	.+50     	; 0x306 <autonomouswalk_walk+0x3a>
	{
		if(navigation_check_left_turn() == 2)
     2d4:	b5 d1       	rcall	.+874    	; 0x640 <navigation_check_left_turn>
     2d6:	82 30       	cpi	r24, 0x02	; 2
     2d8:	21 f4       	brne	.+8      	; 0x2e2 <autonomouswalk_walk+0x16>
		{
			for(int i = 0;i < 3; ++i)
			{
				walk_forward();
     2da:	40 df       	rcall	.-384    	; 0x15c <walk_forward>
     2dc:	3f df       	rcall	.-386    	; 0x15c <walk_forward>
     2de:	3e df       	rcall	.-388    	; 0x15c <walk_forward>
			}
			turn_left();
     2e0:	c5 cf       	rjmp	.-118    	; 0x26c <turn_left>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     2e2:	84 e0       	ldi	r24, 0x04	; 4
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	2a d1       	rcall	.+596    	; 0x53c <navigation_get_sensor>
     2e8:	89 32       	cpi	r24, 0x29	; 41
     2ea:	08 f0       	brcs	.+2      	; 0x2ee <autonomouswalk_walk+0x22>
		{
			walk_forward();
     2ec:	37 cf       	rjmp	.-402    	; 0x15c <walk_forward>
		}
		else if(navigation_check_right_turn() == 2)
     2ee:	93 d1       	rcall	.+806    	; 0x616 <navigation_check_right_turn>
     2f0:	82 30       	cpi	r24, 0x02	; 2
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <autonomouswalk_walk+0x2a>
		{
			turn_right();
     2f4:	8b cf       	rjmp	.-234    	; 0x20c <turn_right>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     2f6:	a4 d1       	rcall	.+840    	; 0x640 <navigation_check_left_turn>
     2f8:	81 11       	cpse	r24, r1
     2fa:	04 c0       	rjmp	.+8      	; 0x304 <autonomouswalk_walk+0x38>
     2fc:	8c d1       	rcall	.+792    	; 0x616 <navigation_check_right_turn>
     2fe:	81 11       	cpse	r24, r1
     300:	01 c0       	rjmp	.+2      	; 0x304 <autonomouswalk_walk+0x38>
		{
			turn_around();
     302:	09 cf       	rjmp	.-494    	; 0x116 <turn_around>
		}
		else
		{
			walk_forward();
     304:	2b cf       	rjmp	.-426    	; 0x15c <walk_forward>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     306:	87 d1       	rcall	.+782    	; 0x616 <navigation_check_right_turn>
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	19 f4       	brne	.+6      	; 0x312 <autonomouswalk_walk+0x46>
		{
			for(int i = 0;i < 2; ++i)
			{
				walk_forward();
     30c:	27 df       	rcall	.-434    	; 0x15c <walk_forward>
     30e:	26 df       	rcall	.-436    	; 0x15c <walk_forward>
			}
			turn_right();
     310:	7d cf       	rjmp	.-262    	; 0x20c <turn_right>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     312:	84 e0       	ldi	r24, 0x04	; 4
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	12 d1       	rcall	.+548    	; 0x53c <navigation_get_sensor>
     318:	89 32       	cpi	r24, 0x29	; 41
     31a:	08 f0       	brcs	.+2      	; 0x31e <autonomouswalk_walk+0x52>
		{
			walk_forward();
     31c:	1f cf       	rjmp	.-450    	; 0x15c <walk_forward>
		}
		else if(navigation_check_left_turn() == 2)
     31e:	90 d1       	rcall	.+800    	; 0x640 <navigation_check_left_turn>
     320:	82 30       	cpi	r24, 0x02	; 2
     322:	09 f4       	brne	.+2      	; 0x326 <autonomouswalk_walk+0x5a>
		{
			turn_left();
     324:	a3 cf       	rjmp	.-186    	; 0x26c <turn_left>
		}
		else if(navigation_check_left_turn() == 0 && navigation_check_right_turn() == 0)
     326:	8c d1       	rcall	.+792    	; 0x640 <navigation_check_left_turn>
     328:	81 11       	cpse	r24, r1
     32a:	04 c0       	rjmp	.+8      	; 0x334 <autonomouswalk_walk+0x68>
     32c:	74 d1       	rcall	.+744    	; 0x616 <navigation_check_right_turn>
     32e:	81 11       	cpse	r24, r1
     330:	01 c0       	rjmp	.+2      	; 0x334 <autonomouswalk_walk+0x68>
		{
			turn_around();
     332:	f1 ce       	rjmp	.-542    	; 0x116 <turn_around>
		}
		else if(decisionCounter < 4)
     334:	80 91 96 13 	lds	r24, 0x1396
     338:	84 30       	cpi	r24, 0x04	; 4
     33a:	38 f4       	brcc	.+14     	; 0x34a <autonomouswalk_walk+0x7e>
		{
			walk_forward();
     33c:	0f df       	rcall	.-482    	; 0x15c <walk_forward>
			++decisionCounter;
     33e:	80 91 96 13 	lds	r24, 0x1396
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 96 13 	sts	0x1396, r24
     348:	08 95       	ret
		}
		else
		{
			decisionCounter = 0;
     34a:	10 92 96 13 	sts	0x1396, r1
			navigation_set_autonomous_walk(0);
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	b0 d0       	rcall	.+352    	; 0x4b2 <navigation_set_autonomous_walk>
			TWI_send_string_fixed_length(C_ADDRESS, "ERROR: Can't make a decision, turning off autonomous mode", 57);
     352:	49 e3       	ldi	r20, 0x39	; 57
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	60 eb       	ldi	r22, 0xB0	; 176
     358:	71 e1       	ldi	r23, 0x11	; 17
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	c9 c6       	rjmp	.+3474   	; 0x10f0 <TWI_send_string_fixed_length>

0000035e <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     35e:	bc 01       	movw	r22, r24
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatunsisf>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	4a e7       	ldi	r20, 0x7A	; 122
     36e:	51 e4       	ldi	r21, 0x41	; 65
     370:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     374:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
	OCR1A = delay;
     378:	70 93 89 00 	sts	0x0089, r23
     37c:	60 93 88 00 	sts	0x0088, r22
     380:	08 95       	ret

00000382 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     382:	bc 01       	movw	r22, r24
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatunsisf>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	4a e7       	ldi	r20, 0x7A	; 122
     392:	51 e4       	ldi	r21, 0x41	; 65
     394:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     398:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__fixunssfsi>
	OCR3A = delay;
     39c:	70 93 99 00 	sts	0x0099, r23
     3a0:	60 93 98 00 	sts	0x0098, r22
     3a4:	08 95       	ret

000003a6 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     3a6:	e1 e8       	ldi	r30, 0x81	; 129
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	85 60       	ori	r24, 0x05	; 5
     3ae:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     3b0:	e1 e9       	ldi	r30, 0x91	; 145
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	85 60       	ori	r24, 0x05	; 5
     3b8:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     3ba:	88 ee       	ldi	r24, 0xE8	; 232
     3bc:	93 e0       	ldi	r25, 0x03	; 3
     3be:	cf df       	rcall	.-98     	; 0x35e <set_counter_1>
	set_counter_2(1000);
     3c0:	88 ee       	ldi	r24, 0xE8	; 232
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	de df       	rcall	.-68     	; 0x382 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     3c6:	ef e6       	ldi	r30, 0x6F	; 111
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     3d0:	e1 e7       	ldi	r30, 0x71	; 113
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     3da:	10 92 85 00 	sts	0x0085, r1
     3de:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     3e2:	10 92 95 00 	sts	0x0095, r1
     3e6:	10 92 94 00 	sts	0x0094, r1
     3ea:	08 95       	ret

000003ec <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     3ec:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     3ee:	90 81       	ld	r25, Z
     3f0:	91 50       	subi	r25, 0x01	; 1
     3f2:	84 81       	ldd	r24, Z+4	; 0x04
     3f4:	22 81       	ldd	r18, Z+2	; 0x02
     3f6:	82 1b       	sub	r24, r18
};
     3f8:	89 23       	and	r24, r25
     3fa:	08 95       	ret

000003fc <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ec 01       	movw	r28, r24
     404:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     406:	f2 df       	rcall	.-28     	; 0x3ec <FifoDataLength>
     408:	28 81       	ld	r18, Y
     40a:	39 81       	ldd	r19, Y+1	; 0x01
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	31 09       	sbc	r19, r1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	82 17       	cp	r24, r18
     414:	93 07       	cpc	r25, r19
     416:	69 f0       	breq	.+26     	; 0x432 <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     418:	8c 81       	ldd	r24, Y+4	; 0x04
     41a:	9d 81       	ldd	r25, Y+5	; 0x05
     41c:	fe 01       	movw	r30, r28
     41e:	e8 0f       	add	r30, r24
     420:	f9 1f       	adc	r31, r25
     422:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	28 23       	and	r18, r24
     428:	39 23       	and	r19, r25
     42a:	3d 83       	std	Y+5, r19	; 0x05
     42c:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	01 c0       	rjmp	.+2      	; 0x434 <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     432:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	08 95       	ret

0000043c <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ec 01       	movw	r28, r24
     446:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     448:	d1 df       	rcall	.-94     	; 0x3ec <FifoDataLength>
     44a:	88 23       	and	r24, r24
     44c:	a1 f0       	breq	.+40     	; 0x476 <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     44e:	ea 81       	ldd	r30, Y+2	; 0x02
     450:	fb 81       	ldd	r31, Y+3	; 0x03
     452:	ec 0f       	add	r30, r28
     454:	fd 1f       	adc	r31, r29
     456:	86 81       	ldd	r24, Z+6	; 0x06
     458:	f8 01       	movw	r30, r16
     45a:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     45c:	28 81       	ld	r18, Y
     45e:	39 81       	ldd	r19, Y+1	; 0x01
     460:	21 50       	subi	r18, 0x01	; 1
     462:	31 09       	sbc	r19, r1
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	9b 81       	ldd	r25, Y+3	; 0x03
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	82 23       	and	r24, r18
     46c:	93 23       	and	r25, r19
     46e:	9b 83       	std	Y+3, r25	; 0x03
     470:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	01 c0       	rjmp	.+2      	; 0x478 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     482:	68 2f       	mov	r22, r24
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatunsisf>
     48e:	60 93 03 01 	sts	0x0103, r22
     492:	70 93 04 01 	sts	0x0104, r23
     496:	80 93 05 01 	sts	0x0105, r24
     49a:	90 93 06 01 	sts	0x0106, r25
     49e:	08 95       	ret

000004a0 <navigation_left_algorithm>:
     4a0:	80 91 07 01 	lds	r24, 0x0107
     4a4:	08 95       	ret

000004a6 <navigation_set_algorithm>:
     4a6:	80 93 07 01 	sts	0x0107, r24
     4aa:	08 95       	ret

000004ac <navigation_autonomous_walk>:
     4ac:	80 91 02 01 	lds	r24, 0x0102
     4b0:	08 95       	ret

000004b2 <navigation_set_autonomous_walk>:
     4b2:	80 93 02 01 	sts	0x0102, r24
     4b6:	08 95       	ret

000004b8 <navigation_stepping_delay>:
     4b8:	cf 93       	push	r28
     4ba:	c2 e0       	ldi	r28, 0x02	; 2
     4bc:	0e c0       	rjmp	.+28     	; 0x4da <navigation_stepping_delay+0x22>
     4be:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <USART_DecodeRxFIFO>
     4c2:	2f ef       	ldi	r18, 0xFF	; 255
     4c4:	89 ef       	ldi	r24, 0xF9	; 249
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	80 40       	sbci	r24, 0x00	; 0
     4cc:	90 40       	sbci	r25, 0x00	; 0
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <navigation_stepping_delay+0x10>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <navigation_stepping_delay+0x1a>
     4d2:	00 00       	nop
     4d4:	82 b1       	in	r24, 0x02	; 2
     4d6:	8c 27       	eor	r24, r28
     4d8:	82 b9       	out	0x02, r24	; 2
     4da:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <USART_ready>
     4de:	88 23       	and	r24, r24
     4e0:	71 f3       	breq	.-36     	; 0x4be <navigation_stepping_delay+0x6>
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <navigation_fill_buffer>:
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	c0 e0       	ldi	r28, 0x00	; 0
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
     4f2:	00 91 98 13 	lds	r16, 0x1398
     4f6:	10 e0       	ldi	r17, 0x00	; 0
     4f8:	ce 01       	movw	r24, r28
     4fa:	85 d6       	rcall	.+3338   	; 0x1206 <TWI_get_sensor>
     4fc:	fe 01       	movw	r30, r28
     4fe:	ee 0f       	add	r30, r30
     500:	ff 1f       	adc	r31, r31
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	ec 0f       	add	r30, r28
     508:	fd 1f       	adc	r31, r29
     50a:	0e 0f       	add	r16, r30
     50c:	1f 1f       	adc	r17, r31
     50e:	f8 01       	movw	r30, r16
     510:	e6 54       	subi	r30, 0x46	; 70
     512:	fc 4e       	sbci	r31, 0xEC	; 236
     514:	80 83       	st	Z, r24
     516:	21 96       	adiw	r28, 0x01	; 1
     518:	c8 30       	cpi	r28, 0x08	; 8
     51a:	d1 05       	cpc	r29, r1
     51c:	51 f7       	brne	.-44     	; 0x4f2 <navigation_fill_buffer+0xc>
     51e:	80 91 98 13 	lds	r24, 0x1398
     522:	84 30       	cpi	r24, 0x04	; 4
     524:	19 f4       	brne	.+6      	; 0x52c <navigation_fill_buffer+0x46>
     526:	10 92 98 13 	sts	0x1398, r1
     52a:	03 c0       	rjmp	.+6      	; 0x532 <navigation_fill_buffer+0x4c>
     52c:	8f 5f       	subi	r24, 0xFF	; 255
     52e:	80 93 98 13 	sts	0x1398, r24
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret

0000053c <navigation_get_sensor>:
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	00 d0       	rcall	.+0      	; 0x542 <navigation_get_sensor+0x6>
     542:	00 d0       	rcall	.+0      	; 0x544 <navigation_get_sensor+0x8>
     544:	1f 92       	push	r1
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	fc 01       	movw	r30, r24
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	ee 0f       	add	r30, r30
     552:	ff 1f       	adc	r31, r31
     554:	8e 0f       	add	r24, r30
     556:	9f 1f       	adc	r25, r31
     558:	fc 01       	movw	r30, r24
     55a:	e6 54       	subi	r30, 0x46	; 70
     55c:	fc 4e       	sbci	r31, 0xEC	; 236
     55e:	80 81       	ld	r24, Z
     560:	89 83       	std	Y+1, r24	; 0x01
     562:	81 81       	ldd	r24, Z+1	; 0x01
     564:	8a 83       	std	Y+2, r24	; 0x02
     566:	82 81       	ldd	r24, Z+2	; 0x02
     568:	8b 83       	std	Y+3, r24	; 0x03
     56a:	83 81       	ldd	r24, Z+3	; 0x03
     56c:	8c 83       	std	Y+4, r24	; 0x04
     56e:	84 81       	ldd	r24, Z+4	; 0x04
     570:	8d 83       	std	Y+5, r24	; 0x05
     572:	24 e0       	ldi	r18, 0x04	; 4
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	0e c0       	rjmp	.+28     	; 0x594 <navigation_get_sensor+0x58>
     578:	41 91       	ld	r20, Z+
     57a:	50 81       	ld	r21, Z
     57c:	54 17       	cp	r21, r20
     57e:	20 f4       	brcc	.+8      	; 0x588 <navigation_get_sensor+0x4c>
     580:	df 01       	movw	r26, r30
     582:	11 97       	sbiw	r26, 0x01	; 1
     584:	5c 93       	st	X, r21
     586:	40 83       	st	Z, r20
     588:	8e 17       	cp	r24, r30
     58a:	9f 07       	cpc	r25, r31
     58c:	a9 f7       	brne	.-22     	; 0x578 <navigation_get_sensor+0x3c>
     58e:	21 50       	subi	r18, 0x01	; 1
     590:	31 09       	sbc	r19, r1
     592:	49 f0       	breq	.+18     	; 0x5a6 <navigation_get_sensor+0x6a>
     594:	12 16       	cp	r1, r18
     596:	13 06       	cpc	r1, r19
     598:	d4 f7       	brge	.-12     	; 0x58e <navigation_get_sensor+0x52>
     59a:	fe 01       	movw	r30, r28
     59c:	31 96       	adiw	r30, 0x01	; 1
     59e:	cf 01       	movw	r24, r30
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
     5a4:	e9 cf       	rjmp	.-46     	; 0x578 <navigation_get_sensor+0x3c>
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <navigation_detect_low_pass_obsticle>:
	}
}

uint8_t navigation_detect_low_pass_obsticle()
{
	if (navigation_get_sensor(7) < HEIGHT_LIMIT)
     5b8:	87 e0       	ldi	r24, 0x07	; 7
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	bf df       	rcall	.-130    	; 0x53c <navigation_get_sensor>
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	88 32       	cpi	r24, 0x28	; 40
     5c2:	08 f0       	brcs	.+2      	; 0x5c6 <navigation_detect_low_pass_obsticle+0xe>
     5c4:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     5c6:	89 2f       	mov	r24, r25
     5c8:	08 95       	ret

000005ca <navigation_low_pass_obstacle>:
	}
}

void navigation_low_pass_obstacle()
{
	if(navigation_detect_low_pass_obsticle() && !(lowPassObstacleFlag))
     5ca:	f6 df       	rcall	.-20     	; 0x5b8 <navigation_detect_low_pass_obsticle>
     5cc:	88 23       	and	r24, r24
     5ce:	e9 f0       	breq	.+58     	; 0x60a <navigation_low_pass_obstacle+0x40>
     5d0:	80 91 97 13 	lds	r24, 0x1397
     5d4:	81 11       	cpse	r24, r1
     5d6:	19 c0       	rjmp	.+50     	; 0x60a <navigation_low_pass_obstacle+0x40>
	{
		TWI_send_string_fixed_length(S_ADDRESS,"Low pass obstacle detected.", 27);
     5d8:	4b e1       	ldi	r20, 0x1B	; 27
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	6a ee       	ldi	r22, 0xEA	; 234
     5de:	71 e1       	ldi	r23, 0x11	; 17
     5e0:	80 e4       	ldi	r24, 0x40	; 64
     5e2:	86 d5       	rcall	.+2828   	; 0x10f0 <TWI_send_string_fixed_length>
     5e4:	2f ef       	ldi	r18, 0xFF	; 255
     5e6:	86 e7       	ldi	r24, 0x76	; 118
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	21 50       	subi	r18, 0x01	; 1
     5ec:	80 40       	sbci	r24, 0x00	; 0
     5ee:	90 40       	sbci	r25, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <navigation_low_pass_obstacle+0x20>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <navigation_low_pass_obstacle+0x2a>
     5f4:	00 00       	nop
		_delay_ms(30);
		TWI_send_string_fixed_length(C_ADDRESS,"Low pass obstacle detected.", 27);
     5f6:	4b e1       	ldi	r20, 0x1B	; 27
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	6a ee       	ldi	r22, 0xEA	; 234
     5fc:	71 e1       	ldi	r23, 0x11	; 17
     5fe:	80 e8       	ldi	r24, 0x80	; 128
     600:	77 d5       	rcall	.+2798   	; 0x10f0 <TWI_send_string_fixed_length>
		lowPassObstacleFlag = 1;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	80 93 97 13 	sts	0x1397, r24
     608:	08 95       	ret
	}
	else if(!(navigation_detect_low_pass_obsticle()))
     60a:	d6 df       	rcall	.-84     	; 0x5b8 <navigation_detect_low_pass_obsticle>
     60c:	81 11       	cpse	r24, r1
     60e:	02 c0       	rjmp	.+4      	; 0x614 <navigation_low_pass_obstacle+0x4a>
	{
		lowPassObstacleFlag = 0;
     610:	10 92 97 13 	sts	0x1397, r1
     614:	08 95       	ret

00000616 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	90 df       	rcall	.-224    	; 0x53c <navigation_get_sensor>
     61c:	8c 33       	cpi	r24, 0x3C	; 60
     61e:	28 f0       	brcs	.+10     	; 0x62a <navigation_check_right_turn+0x14>
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	8b df       	rcall	.-234    	; 0x53c <navigation_get_sensor>
     626:	8c 33       	cpi	r24, 0x3C	; 60
     628:	40 f4       	brcc	.+16     	; 0x63a <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	86 df       	rcall	.-244    	; 0x53c <navigation_get_sensor>
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	86 34       	cpi	r24, 0x46	; 70
     634:	18 f4       	brcc	.+6      	; 0x63c <navigation_check_right_turn+0x26>
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	01 c0       	rjmp	.+2      	; 0x63c <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     63a:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     63c:	89 2f       	mov	r24, r25
     63e:	08 95       	ret

00000640 <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	7b df       	rcall	.-266    	; 0x53c <navigation_get_sensor>
     646:	8c 33       	cpi	r24, 0x3C	; 60
     648:	28 f0       	brcs	.+10     	; 0x654 <navigation_check_left_turn+0x14>
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	76 df       	rcall	.-276    	; 0x53c <navigation_get_sensor>
     650:	8c 33       	cpi	r24, 0x3C	; 60
     652:	40 f4       	brcc	.+16     	; 0x664 <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	71 df       	rcall	.-286    	; 0x53c <navigation_get_sensor>
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	86 34       	cpi	r24, 0x46	; 70
     65e:	18 f4       	brcc	.+6      	; 0x666 <navigation_check_left_turn+0x26>
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	01 c0       	rjmp	.+2      	; 0x666 <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 20) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 20))
	{
		return 2;
     664:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     666:	89 2f       	mov	r24, r25
     668:	08 95       	ret

0000066a <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	6b 01       	movw	r12, r22
     678:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     67a:	80 91 07 01 	lds	r24, 0x0107
     67e:	88 23       	and	r24, r24
     680:	09 f4       	brne	.+2      	; 0x684 <navigation_direction_regulation+0x1a>
     682:	98 c0       	rjmp	.+304    	; 0x7b4 <navigation_direction_regulation+0x14a>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	59 df       	rcall	.-334    	; 0x53c <navigation_get_sensor>
     68a:	c8 2f       	mov	r28, r24
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	55 df       	rcall	.-342    	; 0x53c <navigation_get_sensor>
     692:	2c 2f       	mov	r18, r28
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	a9 01       	movw	r20, r18
     698:	48 1b       	sub	r20, r24
     69a:	51 09       	sbc	r21, r1
     69c:	ca 01       	movw	r24, r20
     69e:	99 23       	and	r25, r25
     6a0:	1c f4       	brge	.+6      	; 0x6a8 <navigation_direction_regulation+0x3e>
     6a2:	91 95       	neg	r25
     6a4:	81 95       	neg	r24
     6a6:	91 09       	sbc	r25, r1
     6a8:	0a 97       	sbiw	r24, 0x0a	; 10
     6aa:	b4 f5       	brge	.+108    	; 0x718 <navigation_direction_regulation+0xae>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	45 df       	rcall	.-374    	; 0x53c <navigation_get_sensor>
     6b2:	82 33       	cpi	r24, 0x32	; 50
     6b4:	88 f5       	brcc	.+98     	; 0x718 <navigation_direction_regulation+0xae>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	40 df       	rcall	.-384    	; 0x53c <navigation_get_sensor>
     6bc:	c8 2f       	mov	r28, r24
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	3c df       	rcall	.-392    	; 0x53c <navigation_get_sensor>
     6c4:	d8 2f       	mov	r29, r24
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <cos>
     6ce:	6b 01       	movw	r12, r22
     6d0:	7c 01       	movw	r14, r24
     6d2:	6d 2f       	mov	r22, r29
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	6c 0f       	add	r22, r28
     6d8:	71 1d       	adc	r23, r1
     6da:	88 27       	eor	r24, r24
     6dc:	77 fd       	sbrc	r23, 7
     6de:	80 95       	com	r24
     6e0:	98 2f       	mov	r25, r24
     6e2:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatsisf>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	5f e3       	ldi	r21, 0x3F	; 63
     6ee:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     6f2:	26 e6       	ldi	r18, 0x66	; 102
     6f4:	36 e6       	ldi	r19, 0x66	; 102
     6f6:	46 ed       	ldi	r20, 0xD6	; 214
     6f8:	50 e4       	ldi	r21, 0x40	; 64
     6fa:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__addsf3>
     6fe:	a7 01       	movw	r20, r14
     700:	96 01       	movw	r18, r12
     702:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e2       	ldi	r20, 0x20	; 32
     70c:	52 e4       	ldi	r21, 0x42	; 66
     70e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__subsf3>
     712:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fixsfsi>
     716:	e5 c0       	rjmp	.+458    	; 0x8e2 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0f df       	rcall	.-482    	; 0x53c <navigation_get_sensor>
     71e:	c8 2f       	mov	r28, r24
     720:	83 e0       	ldi	r24, 0x03	; 3
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0b df       	rcall	.-490    	; 0x53c <navigation_get_sensor>
     726:	2c 2f       	mov	r18, r28
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	a9 01       	movw	r20, r18
     72c:	48 1b       	sub	r20, r24
     72e:	51 09       	sbc	r21, r1
     730:	ca 01       	movw	r24, r20
     732:	99 23       	and	r25, r25
     734:	1c f4       	brge	.+6      	; 0x73c <navigation_direction_regulation+0xd2>
     736:	91 95       	neg	r25
     738:	81 95       	neg	r24
     73a:	91 09       	sbc	r25, r1
     73c:	0a 97       	sbiw	r24, 0x0a	; 10
     73e:	0c f0       	brlt	.+2      	; 0x742 <navigation_direction_regulation+0xd8>
     740:	21 c1       	rjmp	.+578    	; 0x984 <navigation_direction_regulation+0x31a>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	fa de       	rcall	.-524    	; 0x53c <navigation_get_sensor>
     748:	82 33       	cpi	r24, 0x32	; 50
     74a:	08 f0       	brcs	.+2      	; 0x74e <navigation_direction_regulation+0xe4>
     74c:	1b c1       	rjmp	.+566    	; 0x984 <navigation_direction_regulation+0x31a>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	f4 de       	rcall	.-536    	; 0x53c <navigation_get_sensor>
     754:	c8 2f       	mov	r28, r24
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	f0 de       	rcall	.-544    	; 0x53c <navigation_get_sensor>
     75c:	d8 2f       	mov	r29, r24
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <cos>
     766:	6b 01       	movw	r12, r22
     768:	7c 01       	movw	r14, r24
     76a:	6d 2f       	mov	r22, r29
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	6c 0f       	add	r22, r28
     770:	71 1d       	adc	r23, r1
     772:	88 27       	eor	r24, r24
     774:	77 fd       	sbrc	r23, 7
     776:	80 95       	com	r24
     778:	98 2f       	mov	r25, r24
     77a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatsisf>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	5f e3       	ldi	r21, 0x3F	; 63
     786:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     78a:	26 e6       	ldi	r18, 0x66	; 102
     78c:	36 e6       	ldi	r19, 0x66	; 102
     78e:	46 ed       	ldi	r20, 0xD6	; 214
     790:	50 e4       	ldi	r21, 0x40	; 64
     792:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__addsf3>
     796:	a7 01       	movw	r20, r14
     798:	96 01       	movw	r18, r12
     79a:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	80 e2       	ldi	r24, 0x20	; 32
     7a8:	92 e4       	ldi	r25, 0x42	; 66
     7aa:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__subsf3>
     7ae:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fixsfsi>
     7b2:	97 c0       	rjmp	.+302    	; 0x8e2 <navigation_direction_regulation+0x278>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	c1 de       	rcall	.-638    	; 0x53c <navigation_get_sensor>
     7ba:	c8 2f       	mov	r28, r24
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	bd de       	rcall	.-646    	; 0x53c <navigation_get_sensor>
     7c2:	2c 2f       	mov	r18, r28
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	a9 01       	movw	r20, r18
     7c8:	48 1b       	sub	r20, r24
     7ca:	51 09       	sbc	r21, r1
     7cc:	ca 01       	movw	r24, r20
     7ce:	99 23       	and	r25, r25
     7d0:	1c f4       	brge	.+6      	; 0x7d8 <navigation_direction_regulation+0x16e>
     7d2:	91 95       	neg	r25
     7d4:	81 95       	neg	r24
     7d6:	91 09       	sbc	r25, r1
     7d8:	0a 97       	sbiw	r24, 0x0a	; 10
     7da:	c4 f5       	brge	.+112    	; 0x84c <navigation_direction_regulation+0x1e2>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	ad de       	rcall	.-678    	; 0x53c <navigation_get_sensor>
     7e2:	82 33       	cpi	r24, 0x32	; 50
     7e4:	98 f5       	brcc	.+102    	; 0x84c <navigation_direction_regulation+0x1e2>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	a8 de       	rcall	.-688    	; 0x53c <navigation_get_sensor>
     7ec:	c8 2f       	mov	r28, r24
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	a4 de       	rcall	.-696    	; 0x53c <navigation_get_sensor>
     7f4:	d8 2f       	mov	r29, r24
     7f6:	c7 01       	movw	r24, r14
     7f8:	b6 01       	movw	r22, r12
     7fa:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <cos>
     7fe:	6b 01       	movw	r12, r22
     800:	7c 01       	movw	r14, r24
     802:	6d 2f       	mov	r22, r29
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	6c 0f       	add	r22, r28
     808:	71 1d       	adc	r23, r1
     80a:	88 27       	eor	r24, r24
     80c:	77 fd       	sbrc	r23, 7
     80e:	80 95       	com	r24
     810:	98 2f       	mov	r25, r24
     812:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatsisf>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     822:	26 e6       	ldi	r18, 0x66	; 102
     824:	36 e6       	ldi	r19, 0x66	; 102
     826:	46 ed       	ldi	r20, 0xD6	; 214
     828:	50 e4       	ldi	r21, 0x40	; 64
     82a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__addsf3>
     82e:	a7 01       	movw	r20, r14
     830:	96 01       	movw	r18, r12
     832:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     836:	9b 01       	movw	r18, r22
     838:	ac 01       	movw	r20, r24
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e2       	ldi	r24, 0x20	; 32
     840:	92 e4       	ldi	r25, 0x42	; 66
     842:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__subsf3>
     846:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fixsfsi>
     84a:	4b c0       	rjmp	.+150    	; 0x8e2 <navigation_direction_regulation+0x278>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	75 de       	rcall	.-790    	; 0x53c <navigation_get_sensor>
     852:	c8 2f       	mov	r28, r24
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	71 de       	rcall	.-798    	; 0x53c <navigation_get_sensor>
     85a:	2c 2f       	mov	r18, r28
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	a9 01       	movw	r20, r18
     860:	48 1b       	sub	r20, r24
     862:	51 09       	sbc	r21, r1
     864:	ca 01       	movw	r24, r20
     866:	99 23       	and	r25, r25
     868:	1c f4       	brge	.+6      	; 0x870 <navigation_direction_regulation+0x206>
     86a:	91 95       	neg	r25
     86c:	81 95       	neg	r24
     86e:	91 09       	sbc	r25, r1
     870:	0a 97       	sbiw	r24, 0x0a	; 10
     872:	0c f0       	brlt	.+2      	; 0x876 <navigation_direction_regulation+0x20c>
     874:	87 c0       	rjmp	.+270    	; 0x984 <navigation_direction_regulation+0x31a>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	60 de       	rcall	.-832    	; 0x53c <navigation_get_sensor>
     87c:	82 33       	cpi	r24, 0x32	; 50
     87e:	08 f0       	brcs	.+2      	; 0x882 <navigation_direction_regulation+0x218>
     880:	81 c0       	rjmp	.+258    	; 0x984 <navigation_direction_regulation+0x31a>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	5a de       	rcall	.-844    	; 0x53c <navigation_get_sensor>
     888:	c8 2f       	mov	r28, r24
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	56 de       	rcall	.-852    	; 0x53c <navigation_get_sensor>
     890:	d8 2f       	mov	r29, r24
     892:	c7 01       	movw	r24, r14
     894:	b6 01       	movw	r22, r12
     896:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <cos>
     89a:	6b 01       	movw	r12, r22
     89c:	7c 01       	movw	r14, r24
     89e:	6d 2f       	mov	r22, r29
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	6c 0f       	add	r22, r28
     8a4:	71 1d       	adc	r23, r1
     8a6:	88 27       	eor	r24, r24
     8a8:	77 fd       	sbrc	r23, 7
     8aa:	80 95       	com	r24
     8ac:	98 2f       	mov	r25, r24
     8ae:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatsisf>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	5f e3       	ldi	r21, 0x3F	; 63
     8ba:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     8be:	26 e6       	ldi	r18, 0x66	; 102
     8c0:	36 e6       	ldi	r19, 0x66	; 102
     8c2:	46 ed       	ldi	r20, 0xD6	; 214
     8c4:	50 e4       	ldi	r21, 0x40	; 64
     8c6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__addsf3>
     8ca:	a7 01       	movw	r20, r14
     8cc:	96 01       	movw	r18, r12
     8ce:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e2       	ldi	r20, 0x20	; 32
     8d8:	52 e4       	ldi	r21, 0x42	; 66
     8da:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__subsf3>
     8de:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     8e2:	cb 01       	movw	r24, r22
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	03 97       	sbiw	r24, 0x03	; 3
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <navigation_direction_regulation+0x282>
     8ea:	47 c0       	rjmp	.+142    	; 0x97a <navigation_direction_regulation+0x310>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     8ec:	88 27       	eor	r24, r24
     8ee:	77 fd       	sbrc	r23, 7
     8f0:	80 95       	com	r24
     8f2:	98 2f       	mov	r25, r24
     8f4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatsisf>
     8f8:	20 91 03 01 	lds	r18, 0x0103
     8fc:	30 91 04 01 	lds	r19, 0x0104
     900:	40 91 05 01 	lds	r20, 0x0105
     904:	50 91 06 01 	lds	r21, 0x0106
     908:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     90c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <atan>
     910:	c6 2e       	mov	r12, r22
     912:	d7 2e       	mov	r13, r23
     914:	e8 2e       	mov	r14, r24
     916:	f9 2e       	mov	r15, r25
		if(dir < 0)
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	a9 01       	movw	r20, r18
     91e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__cmpsf2>
     922:	88 23       	and	r24, r24
     924:	7c f4       	brge	.+30     	; 0x944 <navigation_direction_regulation+0x2da>
		{
			dir += 2*PI;
     926:	2b ed       	ldi	r18, 0xDB	; 219
     928:	3f e0       	ldi	r19, 0x0F	; 15
     92a:	49 ec       	ldi	r20, 0xC9	; 201
     92c:	50 e4       	ldi	r21, 0x40	; 64
     92e:	6c 2d       	mov	r22, r12
     930:	7d 2d       	mov	r23, r13
     932:	8e 2d       	mov	r24, r14
     934:	9f 2d       	mov	r25, r15
     936:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__addsf3>
     93a:	c6 2e       	mov	r12, r22
     93c:	d7 2e       	mov	r13, r23
     93e:	e8 2e       	mov	r14, r24
     940:	f9 2e       	mov	r15, r25
     942:	24 c0       	rjmp	.+72     	; 0x98c <navigation_direction_regulation+0x322>
		} else if(dir >= 2*PI)
     944:	2b ed       	ldi	r18, 0xDB	; 219
     946:	3f e0       	ldi	r19, 0x0F	; 15
     948:	49 ec       	ldi	r20, 0xC9	; 201
     94a:	50 e4       	ldi	r21, 0x40	; 64
     94c:	6c 2d       	mov	r22, r12
     94e:	7d 2d       	mov	r23, r13
     950:	8e 2d       	mov	r24, r14
     952:	9f 2d       	mov	r25, r15
     954:	0e 94 08 11 	call	0x2210	; 0x2210 <__gesf2>
     958:	88 23       	and	r24, r24
     95a:	c4 f0       	brlt	.+48     	; 0x98c <navigation_direction_regulation+0x322>
		{
			dir -= 2*PI;
     95c:	2b ed       	ldi	r18, 0xDB	; 219
     95e:	3f e0       	ldi	r19, 0x0F	; 15
     960:	49 ec       	ldi	r20, 0xC9	; 201
     962:	50 e4       	ldi	r21, 0x40	; 64
     964:	6c 2d       	mov	r22, r12
     966:	7d 2d       	mov	r23, r13
     968:	8e 2d       	mov	r24, r14
     96a:	9f 2d       	mov	r25, r15
     96c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__subsf3>
     970:	c6 2e       	mov	r12, r22
     972:	d7 2e       	mov	r13, r23
     974:	e8 2e       	mov	r14, r24
     976:	f9 2e       	mov	r15, r25
     978:	09 c0       	rjmp	.+18     	; 0x98c <navigation_direction_regulation+0x322>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     97a:	c1 2c       	mov	r12, r1
     97c:	d1 2c       	mov	r13, r1
     97e:	e1 2c       	mov	r14, r1
     980:	f1 2c       	mov	r15, r1
     982:	04 c0       	rjmp	.+8      	; 0x98c <navigation_direction_regulation+0x322>
     984:	c1 2c       	mov	r12, r1
     986:	d1 2c       	mov	r13, r1
     988:	e1 2c       	mov	r14, r1
     98a:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     98c:	6c 2d       	mov	r22, r12
     98e:	7d 2d       	mov	r23, r13
     990:	8e 2d       	mov	r24, r14
     992:	9f 2d       	mov	r25, r15
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	08 95       	ret

000009a2 <navigation_angle_offset>:
	}
	
}

float navigation_angle_offset()
{
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     9aa:	80 91 07 01 	lds	r24, 0x0107
     9ae:	88 23       	and	r24, r24
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <navigation_angle_offset+0x12>
     9b2:	6c c0       	rjmp	.+216    	; 0xa8c <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	c1 dd       	rcall	.-1150   	; 0x53c <navigation_get_sensor>
     9ba:	f8 2e       	mov	r15, r24
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	bd dd       	rcall	.-1158   	; 0x53c <navigation_get_sensor>
     9c2:	2f 2d       	mov	r18, r15
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	a9 01       	movw	r20, r18
     9c8:	48 1b       	sub	r20, r24
     9ca:	51 09       	sbc	r21, r1
     9cc:	ca 01       	movw	r24, r20
     9ce:	99 23       	and	r25, r25
     9d0:	1c f4       	brge	.+6      	; 0x9d8 <navigation_angle_offset+0x36>
     9d2:	91 95       	neg	r25
     9d4:	81 95       	neg	r24
     9d6:	91 09       	sbc	r25, r1
     9d8:	0a 97       	sbiw	r24, 0x0a	; 10
     9da:	0c f5       	brge	.+66     	; 0xa1e <navigation_angle_offset+0x7c>
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	ad dd       	rcall	.-1190   	; 0x53c <navigation_get_sensor>
     9e2:	82 33       	cpi	r24, 0x32	; 50
     9e4:	e0 f4       	brcc	.+56     	; 0xa1e <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	a8 dd       	rcall	.-1200   	; 0x53c <navigation_get_sensor>
     9ec:	f8 2e       	mov	r15, r24
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	a4 dd       	rcall	.-1208   	; 0x53c <navigation_get_sensor>
     9f4:	6f 2d       	mov	r22, r15
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	68 1b       	sub	r22, r24
     9fa:	71 09       	sbc	r23, r1
     9fc:	88 27       	eor	r24, r24
     9fe:	77 fd       	sbrc	r23, 7
     a00:	80 95       	com	r24
     a02:	98 2f       	mov	r25, r24
     a04:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatsisf>
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e8       	ldi	r20, 0x80	; 128
     a0e:	5d e3       	ldi	r21, 0x3D	; 61
     a10:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     a14:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <atan>
     a18:	6b 01       	movw	r12, r22
     a1a:	7c 01       	movw	r14, r24
     a1c:	a0 c0       	rjmp	.+320    	; 0xb5e <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	8c dd       	rcall	.-1256   	; 0x53c <navigation_get_sensor>
     a24:	f8 2e       	mov	r15, r24
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	88 dd       	rcall	.-1264   	; 0x53c <navigation_get_sensor>
     a2c:	2f 2d       	mov	r18, r15
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	a9 01       	movw	r20, r18
     a32:	48 1b       	sub	r20, r24
     a34:	51 09       	sbc	r21, r1
     a36:	ca 01       	movw	r24, r20
     a38:	99 23       	and	r25, r25
     a3a:	1c f4       	brge	.+6      	; 0xa42 <navigation_angle_offset+0xa0>
     a3c:	91 95       	neg	r25
     a3e:	81 95       	neg	r24
     a40:	91 09       	sbc	r25, r1
     a42:	0a 97       	sbiw	r24, 0x0a	; 10
     a44:	0c f0       	brlt	.+2      	; 0xa48 <navigation_angle_offset+0xa6>
     a46:	9a c0       	rjmp	.+308    	; 0xb7c <navigation_angle_offset+0x1da>
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	77 dd       	rcall	.-1298   	; 0x53c <navigation_get_sensor>
     a4e:	82 33       	cpi	r24, 0x32	; 50
     a50:	08 f0       	brcs	.+2      	; 0xa54 <navigation_angle_offset+0xb2>
     a52:	94 c0       	rjmp	.+296    	; 0xb7c <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	71 dd       	rcall	.-1310   	; 0x53c <navigation_get_sensor>
     a5a:	f8 2e       	mov	r15, r24
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	6d dd       	rcall	.-1318   	; 0x53c <navigation_get_sensor>
     a62:	6f 2d       	mov	r22, r15
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	68 1b       	sub	r22, r24
     a68:	71 09       	sbc	r23, r1
     a6a:	88 27       	eor	r24, r24
     a6c:	77 fd       	sbrc	r23, 7
     a6e:	80 95       	com	r24
     a70:	98 2f       	mov	r25, r24
     a72:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatsisf>
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e8       	ldi	r20, 0x80	; 128
     a7c:	5d e3       	ldi	r21, 0x3D	; 61
     a7e:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     a82:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <atan>
     a86:	6b 01       	movw	r12, r22
     a88:	7c 01       	movw	r14, r24
     a8a:	69 c0       	rjmp	.+210    	; 0xb5e <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	55 dd       	rcall	.-1366   	; 0x53c <navigation_get_sensor>
     a92:	f8 2e       	mov	r15, r24
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	51 dd       	rcall	.-1374   	; 0x53c <navigation_get_sensor>
     a9a:	2f 2d       	mov	r18, r15
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	a9 01       	movw	r20, r18
     aa0:	48 1b       	sub	r20, r24
     aa2:	51 09       	sbc	r21, r1
     aa4:	ca 01       	movw	r24, r20
     aa6:	99 23       	and	r25, r25
     aa8:	1c f4       	brge	.+6      	; 0xab0 <navigation_angle_offset+0x10e>
     aaa:	91 95       	neg	r25
     aac:	81 95       	neg	r24
     aae:	91 09       	sbc	r25, r1
     ab0:	0a 97       	sbiw	r24, 0x0a	; 10
     ab2:	0c f5       	brge	.+66     	; 0xaf6 <navigation_angle_offset+0x154>
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	41 dd       	rcall	.-1406   	; 0x53c <navigation_get_sensor>
     aba:	82 33       	cpi	r24, 0x32	; 50
     abc:	e0 f4       	brcc	.+56     	; 0xaf6 <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	3c dd       	rcall	.-1416   	; 0x53c <navigation_get_sensor>
     ac4:	f8 2e       	mov	r15, r24
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	38 dd       	rcall	.-1424   	; 0x53c <navigation_get_sensor>
     acc:	6f 2d       	mov	r22, r15
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	68 1b       	sub	r22, r24
     ad2:	71 09       	sbc	r23, r1
     ad4:	88 27       	eor	r24, r24
     ad6:	77 fd       	sbrc	r23, 7
     ad8:	80 95       	com	r24
     ada:	98 2f       	mov	r25, r24
     adc:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatsisf>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e8       	ldi	r20, 0x80	; 128
     ae6:	5d e3       	ldi	r21, 0x3D	; 61
     ae8:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     aec:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <atan>
     af0:	6b 01       	movw	r12, r22
     af2:	7c 01       	movw	r14, r24
     af4:	34 c0       	rjmp	.+104    	; 0xb5e <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	20 dd       	rcall	.-1472   	; 0x53c <navigation_get_sensor>
     afc:	f8 2e       	mov	r15, r24
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	1c dd       	rcall	.-1480   	; 0x53c <navigation_get_sensor>
     b04:	2f 2d       	mov	r18, r15
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	a9 01       	movw	r20, r18
     b0a:	48 1b       	sub	r20, r24
     b0c:	51 09       	sbc	r21, r1
     b0e:	ca 01       	movw	r24, r20
     b10:	99 23       	and	r25, r25
     b12:	1c f4       	brge	.+6      	; 0xb1a <navigation_angle_offset+0x178>
     b14:	91 95       	neg	r25
     b16:	81 95       	neg	r24
     b18:	91 09       	sbc	r25, r1
     b1a:	0a 97       	sbiw	r24, 0x0a	; 10
     b1c:	7c f5       	brge	.+94     	; 0xb7c <navigation_angle_offset+0x1da>
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0c dd       	rcall	.-1512   	; 0x53c <navigation_get_sensor>
     b24:	82 33       	cpi	r24, 0x32	; 50
     b26:	50 f5       	brcc	.+84     	; 0xb7c <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	07 dd       	rcall	.-1522   	; 0x53c <navigation_get_sensor>
     b2e:	f8 2e       	mov	r15, r24
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	03 dd       	rcall	.-1530   	; 0x53c <navigation_get_sensor>
     b36:	6f 2d       	mov	r22, r15
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	68 1b       	sub	r22, r24
     b3c:	71 09       	sbc	r23, r1
     b3e:	88 27       	eor	r24, r24
     b40:	77 fd       	sbrc	r23, 7
     b42:	80 95       	com	r24
     b44:	98 2f       	mov	r25, r24
     b46:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__floatsisf>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e8       	ldi	r20, 0x80	; 128
     b50:	5d e3       	ldi	r21, 0x3D	; 61
     b52:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     b56:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <atan>
     b5a:	6b 01       	movw	r12, r22
     b5c:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     b5e:	c7 01       	movw	r24, r14
     b60:	b6 01       	movw	r22, r12
     b62:	9f 77       	andi	r25, 0x7F	; 127
     b64:	29 e2       	ldi	r18, 0x29	; 41
     b66:	3c e5       	ldi	r19, 0x5C	; 92
     b68:	4f e8       	ldi	r20, 0x8F	; 143
     b6a:	5d e3       	ldi	r21, 0x3D	; 61
     b6c:	0e 94 08 11 	call	0x2210	; 0x2210 <__gesf2>
     b70:	18 16       	cp	r1, r24
     b72:	3c f0       	brlt	.+14     	; 0xb82 <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     b74:	c1 2c       	mov	r12, r1
     b76:	d1 2c       	mov	r13, r1
     b78:	76 01       	movw	r14, r12
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <navigation_angle_offset+0x1e0>
     b7c:	c1 2c       	mov	r12, r1
     b7e:	d1 2c       	mov	r13, r1
     b80:	76 01       	movw	r14, r12
     b82:	7c 2d       	mov	r23, r12
	}
}
     b84:	67 2f       	mov	r22, r23
     b86:	7d 2d       	mov	r23, r13
     b88:	8e 2d       	mov	r24, r14
     b8a:	9f 2d       	mov	r25, r15
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	08 95       	ret

00000b96 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     b96:	1f 92       	push	r1
     b98:	0f 92       	push	r0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	0f 92       	push	r0
     b9e:	11 24       	eor	r1, r1
     ba0:	0b b6       	in	r0, 0x3b	; 59
     ba2:	0f 92       	push	r0
     ba4:	2f 93       	push	r18
     ba6:	3f 93       	push	r19
     ba8:	4f 93       	push	r20
     baa:	5f 93       	push	r21
     bac:	6f 93       	push	r22
     bae:	7f 93       	push	r23
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	73 dc       	rcall	.-1818   	; 0x4a6 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	77 dc       	rcall	.-1810   	; 0x4b2 <navigation_set_autonomous_walk>
}
     bc4:	ff 91       	pop	r31
     bc6:	ef 91       	pop	r30
     bc8:	bf 91       	pop	r27
     bca:	af 91       	pop	r26
     bcc:	9f 91       	pop	r25
     bce:	8f 91       	pop	r24
     bd0:	7f 91       	pop	r23
     bd2:	6f 91       	pop	r22
     bd4:	5f 91       	pop	r21
     bd6:	4f 91       	pop	r20
     bd8:	3f 91       	pop	r19
     bda:	2f 91       	pop	r18
     bdc:	0f 90       	pop	r0
     bde:	0b be       	out	0x3b, r0	; 59
     be0:	0f 90       	pop	r0
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	0f 90       	pop	r0
     be6:	1f 90       	pop	r1
     be8:	18 95       	reti

00000bea <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1
     bf4:	0b b6       	in	r0, 0x3b	; 59
     bf6:	0f 92       	push	r0
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	49 dc       	rcall	.-1902   	; 0x4a6 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	4d dc       	rcall	.-1894   	; 0x4b2 <navigation_set_autonomous_walk>
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	bf 91       	pop	r27
     c1e:	af 91       	pop	r26
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	7f 91       	pop	r23
     c26:	6f 91       	pop	r22
     c28:	5f 91       	pop	r21
     c2a:	4f 91       	pop	r20
     c2c:	3f 91       	pop	r19
     c2e:	2f 91       	pop	r18
     c30:	0f 90       	pop	r0
     c32:	0b be       	out	0x3b, r0	; 59
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <main>:
//Flag to know if to send the autonom settings to the computer.
uint8_t autonom_flag = 1;

int main(void)
{
	USART_init();
     c3e:	de d4       	rcall	.+2492   	; 0x15fc <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); //<<<????>>> send messages from gang to the display, not the computer
     c40:	80 e8       	ldi	r24, 0x80	; 128
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	e7 d4       	rcall	.+2510   	; 0x1614 <USART_set_twi_message_destination>
	sei();
     c46:	78 94       	sei
	TWI_init(ST_ADDRESS);
     c48:	80 e2       	ldi	r24, 0x20	; 32
     c4a:	70 d1       	rcall	.+736    	; 0xf2c <TWI_init>
	init_counters();
     c4c:	ac db       	rcall	.-2216   	; 0x3a6 <init_counters>
	
	//LED
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
     c4e:	81 b1       	in	r24, 0x01	; 1
     c50:	83 60       	ori	r24, 0x03	; 3
     c52:	81 b9       	out	0x01, r24	; 1
	DDRC |= (1<<PORTC6 | 1<<PORTC7);
     c54:	87 b1       	in	r24, 0x07	; 7
     c56:	80 6c       	ori	r24, 0xC0	; 192
     c58:	87 b9       	out	0x07, r24	; 7
	
	//Buttons
	DDRA &= ~(1<<PORTA6 | 1<<PORTA7); //For emphasize
     c5a:	81 b1       	in	r24, 0x01	; 1
     c5c:	8f 73       	andi	r24, 0x3F	; 63
     c5e:	81 b9       	out	0x01, r24	; 1
	PCICR |= (1<<PCIE0); //Interrupt enable
     c60:	e8 e6       	ldi	r30, 0x68	; 104
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT6 | 1<<PCINT7); //mask for porta6 and porta7
     c6a:	eb e6       	ldi	r30, 0x6B	; 107
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 6c       	ori	r24, 0xC0	; 192
     c72:	80 83       	st	Z, r24
     c74:	2f ef       	ldi	r18, 0xFF	; 255
     c76:	83 e2       	ldi	r24, 0x23	; 35
     c78:	94 ef       	ldi	r25, 0xF4	; 244
     c7a:	21 50       	subi	r18, 0x01	; 1
     c7c:	80 40       	sbci	r24, 0x00	; 0
     c7e:	90 40       	sbci	r25, 0x00	; 0
     c80:	e1 f7       	brne	.-8      	; 0xc7a <main+0x3c>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <main+0x46>
     c84:	00 00       	nop
	
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	14 dc       	rcall	.-2008   	; 0x4b2 <navigation_set_autonomous_walk>
	//set_counter_1(100);
	set_counter_2(200);
     c8a:	88 ec       	ldi	r24, 0xC8	; 200
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	79 db       	rcall	.-2318   	; 0x382 <set_counter_2>
				USART_SendCommand();
			}
			
			if(TWI_elevation_flag())
			{
				PORTA ^= (1<<PORTA0);
     c90:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else
		{
			if(TWI_command_flag())
			{
				PORTA ^= (1<<PORTA1);
     c92:	c2 e0       	ldi	r28, 0x02	; 2
			PORTA ^= (1<<PORTA1);
			navigation_fill_buffer();
		}*/
		
		
		if(autonom_flag)
     c94:	80 91 08 01 	lds	r24, 0x0108
     c98:	88 23       	and	r24, r24
     c9a:	31 f0       	breq	.+12     	; 0xca8 <main+0x6a>
		{
			TWI_send_autonom_settings(C_ADDRESS, navigation_left_algorithm());
     c9c:	01 dc       	rcall	.-2046   	; 0x4a0 <navigation_left_algorithm>
     c9e:	68 2f       	mov	r22, r24
     ca0:	80 e8       	ldi	r24, 0x80	; 128
     ca2:	67 d1       	rcall	.+718    	; 0xf72 <TWI_send_autonom_settings>
			autonom_flag = 0;
     ca4:	10 92 08 01 	sts	0x0108, r1
		}
		
		if(navigation_autonomous_walk() == 1)
     ca8:	01 dc       	rcall	.-2046   	; 0x4ac <navigation_autonomous_walk>
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	49 f4       	brne	.+18     	; 0xcc0 <main+0x82>
		{
			if(TWI_control_settings_flag())
     cae:	c5 d2       	rcall	.+1418   	; 0x123a <TWI_control_settings_flag>
     cb0:	88 23       	and	r24, r24
     cb2:	21 f0       	breq	.+8      	; 0xcbc <main+0x7e>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	ab d2       	rcall	.+1366   	; 0x1210 <TWI_get_control_setting>
     cba:	e3 db       	rcall	.-2106   	; 0x482 <navigation_set_Kp>
			}
			autonomouswalk_walk();
     cbc:	07 db       	rcall	.-2546   	; 0x2cc <autonomouswalk_walk>
     cbe:	ea cf       	rjmp	.-44     	; 0xc94 <main+0x56>
		}
		else
		{
			if(TWI_command_flag())
     cc0:	b2 d2       	rcall	.+1380   	; 0x1226 <TWI_command_flag>
     cc2:	88 23       	and	r24, r24
     cc4:	21 f0       	breq	.+8      	; 0xcce <main+0x90>
			{
				PORTA ^= (1<<PORTA1);
     cc6:	82 b1       	in	r24, 0x02	; 2
     cc8:	8c 27       	eor	r24, r28
     cca:	82 b9       	out	0x02, r24	; 2
				USART_SendCommand();
     ccc:	6e d5       	rcall	.+2780   	; 0x17aa <USART_SendCommand>
			}
			
			if(TWI_elevation_flag())
     cce:	c9 d2       	rcall	.+1426   	; 0x1262 <TWI_elevation_flag>
     cd0:	88 23       	and	r24, r24
     cd2:	21 f0       	breq	.+8      	; 0xcdc <main+0x9e>
			{
				PORTA ^= (1<<PORTA0);
     cd4:	82 b1       	in	r24, 0x02	; 2
     cd6:	8d 27       	eor	r24, r29
     cd8:	82 b9       	out	0x02, r24	; 2
				USART_SendElevation();
     cda:	79 d5       	rcall	.+2802   	; 0x17ce <USART_SendElevation>
			}
		USART_DecodeRxFIFO();
     cdc:	93 d7       	rcall	.+3878   	; 0x1c04 <USART_DecodeRxFIFO>
     cde:	da cf       	rjmp	.-76     	; 0xc94 <main+0x56>

00000ce0 <__vector_13>:
	}
}
//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     ce0:	1f 92       	push	r1
     ce2:	0f 92       	push	r0
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	0f 92       	push	r0
     ce8:	11 24       	eor	r1, r1
	//USART_RequestGyro();
	TCNT1 = 0;
     cea:	10 92 85 00 	sts	0x0085, r1
     cee:	10 92 84 00 	sts	0x0084, r1
}
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     cfc:	1f 92       	push	r1
     cfe:	0f 92       	push	r0
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	0b b6       	in	r0, 0x3b	; 59
     d08:	0f 92       	push	r0
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
	if(TWI_autonom_settings_flag())
     d22:	95 d2       	rcall	.+1322   	; 0x124e <TWI_autonom_settings_flag>
     d24:	88 23       	and	r24, r24
     d26:	91 f0       	breq	.+36     	; 0xd4c <__vector_32+0x50>
	{
		uint8_t sett = TWI_get_autonom_settings();
     d28:	78 d2       	rcall	.+1264   	; 0x121a <TWI_get_autonom_settings>
		if(sett == 0)
     d2a:	81 11       	cpse	r24, r1
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <__vector_32+0x36>
		{
			navigation_set_autonomous_walk(0);
     d2e:	c1 db       	rcall	.-2174   	; 0x4b2 <navigation_set_autonomous_walk>
     d30:	0a c0       	rjmp	.+20     	; 0xd46 <__vector_32+0x4a>
		}
		else if(sett == 1)
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	21 f4       	brne	.+8      	; 0xd3e <__vector_32+0x42>
		{
			navigation_set_autonomous_walk(1);
     d36:	bd db       	rcall	.-2182   	; 0x4b2 <navigation_set_autonomous_walk>
			navigation_set_algorithm(1);
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	b5 db       	rcall	.-2198   	; 0x4a6 <navigation_set_algorithm>
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <__vector_32+0x4a>
		}
		else //sett == 2
		{
			navigation_set_autonomous_walk(1);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	b8 db       	rcall	.-2192   	; 0x4b2 <navigation_set_autonomous_walk>
			navigation_set_algorithm(0);
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	b0 db       	rcall	.-2208   	; 0x4a6 <navigation_set_algorithm>
		}
		autonom_flag = 1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	80 93 08 01 	sts	0x0108, r24
	}
	TCNT3 = 0;
     d4c:	10 92 95 00 	sts	0x0095, r1
     d50:	10 92 94 00 	sts	0x0094, r1
}
     d54:	ff 91       	pop	r31
     d56:	ef 91       	pop	r30
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	0f 90       	pop	r0
     d6e:	0b be       	out	0x3b, r0	; 59
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <__vector_4>:

//-------------------Buttons PinChange interrupt---------------------

ISR(PCINT0_vect)
{
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	11 24       	eor	r1, r1
     d84:	0b b6       	in	r0, 0x3b	; 59
     d86:	0f 92       	push	r0
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
	if(PINA & (1<<PINA6)) //Left walk
     da0:	06 9b       	sbis	0x00, 6	; 0
     da2:	09 c0       	rjmp	.+18     	; 0xdb6 <__vector_4+0x3c>
	{
		navigation_set_autonomous_walk(1);
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	85 db       	rcall	.-2294   	; 0x4b2 <navigation_set_autonomous_walk>
		navigation_set_algorithm(1);
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	7d db       	rcall	.-2310   	; 0x4a6 <navigation_set_algorithm>
		//test
		PORTC ^= (1<<PORTC6);
     dac:	98 b1       	in	r25, 0x08	; 8
     dae:	80 e4       	ldi	r24, 0x40	; 64
     db0:	89 27       	eor	r24, r25
     db2:	88 b9       	out	0x08, r24	; 8
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <__vector_4+0x4e>
	}
	else if(PINA & (1<<PINA7)) //Right walk
     db6:	07 9b       	sbis	0x00, 7	; 0
     db8:	07 c0       	rjmp	.+14     	; 0xdc8 <__vector_4+0x4e>
	{
		navigation_set_autonomous_walk(1);
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	7a db       	rcall	.-2316   	; 0x4b2 <navigation_set_autonomous_walk>
		navigation_set_algorithm(0);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	72 db       	rcall	.-2332   	; 0x4a6 <navigation_set_algorithm>
		//test
		PORTC ^= (1<<PORTC7);
     dc2:	88 b1       	in	r24, 0x08	; 8
     dc4:	80 58       	subi	r24, 0x80	; 128
     dc6:	88 b9       	out	0x08, r24	; 8
	}
	autonom_flag = 1;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 08 01 	sts	0x0108, r24
}
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0b be       	out	0x3b, r0	; 59
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <set_twi_reciever_enable>:
	
	//Do something with the message here... Send to display for now
	TWI_send_string_fixed_length(S_ADDRESS, msg, length);
	
	return 0;
}
     df4:	85 e4       	ldi	r24, 0x45	; 69
     df6:	80 93 bc 00 	sts	0x00BC, r24
     dfa:	08 95       	ret

00000dfc <clear_int>:
     dfc:	81 ec       	ldi	r24, 0xC1	; 193
     dfe:	80 93 bc 00 	sts	0x00BC, r24
     e02:	08 95       	ret

00000e04 <start_bus>:
     e04:	84 ea       	ldi	r24, 0xA4	; 164
     e06:	80 93 bc 00 	sts	0x00BC, r24
     e0a:	08 95       	ret

00000e0c <stop_bus>:
     e0c:	85 ed       	ldi	r24, 0xD5	; 213
     e0e:	80 93 bc 00 	sts	0x00BC, r24
     e12:	08 95       	ret

00000e14 <Error>:
     e14:	80 91 b9 00 	lds	r24, 0x00B9
     e18:	88 7f       	andi	r24, 0xF8	; 248
     e1a:	88 33       	cpi	r24, 0x38	; 56
     e1c:	09 f0       	breq	.+2      	; 0xe20 <Error+0xc>
     e1e:	f6 cf       	rjmp	.-20     	; 0xe0c <stop_bus>
     e20:	ed cf       	rjmp	.-38     	; 0xdfc <clear_int>

00000e22 <get_data>:
     e22:	80 91 bb 00 	lds	r24, 0x00BB
     e26:	08 95       	ret

00000e28 <wait_for_bus>:
     e28:	ec eb       	ldi	r30, 0xBC	; 188
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	88 23       	and	r24, r24
     e30:	ec f7       	brge	.-6      	; 0xe2c <wait_for_bus+0x4>
     e32:	08 95       	ret

00000e34 <send_data_and_wait>:
     e34:	80 93 bb 00 	sts	0x00BB, r24
     e38:	84 e8       	ldi	r24, 0x84	; 132
     e3a:	80 93 bc 00 	sts	0x00BC, r24
     e3e:	f4 cf       	rjmp	.-24     	; 0xe28 <wait_for_bus>

00000e40 <stop_twi>:
     e40:	10 92 f5 14 	sts	0x14F5, r1
     e44:	10 92 f4 14 	sts	0x14F4, r1
     e48:	10 92 ff 14 	sts	0x14FF, r1
     e4c:	10 92 fe 14 	sts	0x14FE, r1
     e50:	10 92 ea 14 	sts	0x14EA, r1
     e54:	10 92 e9 14 	sts	0x14E9, r1
     e58:	10 92 ef 14 	sts	0x14EF, r1
     e5c:	10 92 ee 14 	sts	0x14EE, r1
     e60:	10 92 f2 14 	sts	0x14F2, r1
     e64:	10 92 f1 14 	sts	0x14F1, r1
     e68:	08 95       	ret

00000e6a <reset_TWI>:
     e6a:	ec eb       	ldi	r30, 0xBC	; 188
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	80 6c       	ori	r24, 0xC0	; 192
     e72:	80 83       	st	Z, r24
     e74:	08 95       	ret

00000e76 <get_control_settings_from_bus>:
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	c0 91 ee 14 	lds	r28, 0x14EE
     e7e:	d0 91 ef 14 	lds	r29, 0x14EF
     e82:	cf df       	rcall	.-98     	; 0xe22 <get_data>
     e84:	c5 51       	subi	r28, 0x15	; 21
     e86:	db 4e       	sbci	r29, 0xEB	; 235
     e88:	88 83       	st	Y, r24
     e8a:	10 92 ef 14 	sts	0x14EF, r1
     e8e:	10 92 ee 14 	sts	0x14EE, r1
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <get_autonom_settings_from_bus>:
     e98:	c4 df       	rcall	.-120    	; 0xe22 <get_data>
     e9a:	80 93 e9 13 	sts	0x13E9, r24
     e9e:	08 95       	ret

00000ea0 <get_char_from_bus>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	c0 91 e9 14 	lds	r28, 0x14E9
     ea8:	d0 91 ea 14 	lds	r29, 0x14EA
     eac:	ba df       	rcall	.-140    	; 0xe22 <get_data>
     eae:	c6 51       	subi	r28, 0x16	; 22
     eb0:	dc 4e       	sbci	r29, 0xEC	; 236
     eb2:	88 83       	st	Y, r24
     eb4:	80 91 e9 14 	lds	r24, 0x14E9
     eb8:	90 91 ea 14 	lds	r25, 0x14EA
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	90 93 ea 14 	sts	0x14EA, r25
     ec2:	80 93 e9 14 	sts	0x14E9, r24
     ec6:	90 93 fa 14 	sts	0x14FA, r25
     eca:	80 93 f9 14 	sts	0x14F9, r24
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	08 95       	ret

00000ed4 <get_sensor_from_bus>:
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	c0 91 fe 14 	lds	r28, 0x14FE
     edc:	d0 91 ff 14 	lds	r29, 0x14FF
     ee0:	c8 30       	cpi	r28, 0x08	; 8
     ee2:	d1 05       	cpc	r29, r1
     ee4:	99 f4       	brne	.+38     	; 0xf0c <get_sensor_from_bus+0x38>
     ee6:	e0 e0       	ldi	r30, 0x00	; 0
     ee8:	f5 e1       	ldi	r31, 0x15	; 21
     eea:	a8 e0       	ldi	r26, 0x08	; 8
     eec:	b5 e1       	ldi	r27, 0x15	; 21
     eee:	88 e0       	ldi	r24, 0x08	; 8
     ef0:	95 e1       	ldi	r25, 0x15	; 21
     ef2:	21 91       	ld	r18, Z+
     ef4:	2d 93       	st	X+, r18
     ef6:	e8 17       	cp	r30, r24
     ef8:	f9 07       	cpc	r31, r25
     efa:	d9 f7       	brne	.-10     	; 0xef2 <get_sensor_from_bus+0x1e>
     efc:	92 df       	rcall	.-220    	; 0xe22 <get_data>
     efe:	80 93 f8 14 	sts	0x14F8, r24
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 9e 13 	sts	0x139E, r24
     f08:	ee da       	rcall	.-2596   	; 0x4e6 <navigation_fill_buffer>
     f0a:	0d c0       	rjmp	.+26     	; 0xf26 <get_sensor_from_bus+0x52>
     f0c:	8a df       	rcall	.-236    	; 0xe22 <get_data>
     f0e:	c0 50       	subi	r28, 0x00	; 0
     f10:	db 4e       	sbci	r29, 0xEB	; 235
     f12:	88 83       	st	Y, r24
     f14:	80 91 fe 14 	lds	r24, 0x14FE
     f18:	90 91 ff 14 	lds	r25, 0x14FF
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	90 93 ff 14 	sts	0x14FF, r25
     f22:	80 93 fe 14 	sts	0x14FE, r24
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <TWI_init>:
     f2c:	80 93 f0 14 	sts	0x14F0, r24
     f30:	80 34       	cpi	r24, 0x40	; 64
     f32:	79 f0       	breq	.+30     	; 0xf52 <TWI_init+0x26>
     f34:	80 38       	cpi	r24, 0x80	; 128
     f36:	19 f0       	breq	.+6      	; 0xf3e <TWI_init+0x12>
     f38:	80 32       	cpi	r24, 0x20	; 32
     f3a:	d1 f4       	brne	.+52     	; 0xf70 <TWI_init+0x44>
     f3c:	12 c0       	rjmp	.+36     	; 0xf62 <TWI_init+0x36>
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	88 b9       	out	0x08, r24	; 8
     f42:	58 df       	rcall	.-336    	; 0xdf4 <set_twi_reciever_enable>
     f44:	8f e3       	ldi	r24, 0x3F	; 63
     f46:	80 93 b8 00 	sts	0x00B8, r24
     f4a:	81 e8       	ldi	r24, 0x81	; 129
     f4c:	80 93 ba 00 	sts	0x00BA, r24
     f50:	08 95       	ret
     f52:	8f e3       	ldi	r24, 0x3F	; 63
     f54:	80 93 b8 00 	sts	0x00B8, r24
     f58:	4d df       	rcall	.-358    	; 0xdf4 <set_twi_reciever_enable>
     f5a:	80 e4       	ldi	r24, 0x40	; 64
     f5c:	80 93 ba 00 	sts	0x00BA, r24
     f60:	08 95       	ret
     f62:	8f e3       	ldi	r24, 0x3F	; 63
     f64:	80 93 b8 00 	sts	0x00B8, r24
     f68:	45 df       	rcall	.-374    	; 0xdf4 <set_twi_reciever_enable>
     f6a:	81 e2       	ldi	r24, 0x21	; 33
     f6c:	80 93 ba 00 	sts	0x00BA, r24
     f70:	08 95       	ret

00000f72 <TWI_send_autonom_settings>:
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	c8 2f       	mov	r28, r24
     f78:	d6 2f       	mov	r29, r22
     f7a:	44 df       	rcall	.-376    	; 0xe04 <start_bus>
     f7c:	55 df       	rcall	.-342    	; 0xe28 <wait_for_bus>
     f7e:	90 91 b9 00 	lds	r25, 0x00B9
     f82:	98 7f       	andi	r25, 0xF8	; 248
     f84:	98 30       	cpi	r25, 0x08	; 8
     f86:	19 f0       	breq	.+6      	; 0xf8e <TWI_send_autonom_settings+0x1c>
     f88:	45 df       	rcall	.-374    	; 0xe14 <Error>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	20 c0       	rjmp	.+64     	; 0xfce <TWI_send_autonom_settings+0x5c>
     f8e:	8c 2f       	mov	r24, r28
     f90:	51 df       	rcall	.-350    	; 0xe34 <send_data_and_wait>
     f92:	80 91 b9 00 	lds	r24, 0x00B9
     f96:	88 7f       	andi	r24, 0xF8	; 248
     f98:	88 31       	cpi	r24, 0x18	; 24
     f9a:	19 f0       	breq	.+6      	; 0xfa2 <TWI_send_autonom_settings+0x30>
     f9c:	3b df       	rcall	.-394    	; 0xe14 <Error>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	16 c0       	rjmp	.+44     	; 0xfce <TWI_send_autonom_settings+0x5c>
     fa2:	85 e0       	ldi	r24, 0x05	; 5
     fa4:	47 df       	rcall	.-370    	; 0xe34 <send_data_and_wait>
     fa6:	80 91 b9 00 	lds	r24, 0x00B9
     faa:	88 7f       	andi	r24, 0xF8	; 248
     fac:	88 32       	cpi	r24, 0x28	; 40
     fae:	19 f0       	breq	.+6      	; 0xfb6 <TWI_send_autonom_settings+0x44>
     fb0:	31 df       	rcall	.-414    	; 0xe14 <Error>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0c c0       	rjmp	.+24     	; 0xfce <TWI_send_autonom_settings+0x5c>
     fb6:	8d 2f       	mov	r24, r29
     fb8:	3d df       	rcall	.-390    	; 0xe34 <send_data_and_wait>
     fba:	80 91 b9 00 	lds	r24, 0x00B9
     fbe:	88 7f       	andi	r24, 0xF8	; 248
     fc0:	88 32       	cpi	r24, 0x28	; 40
     fc2:	19 f0       	breq	.+6      	; 0xfca <TWI_send_autonom_settings+0x58>
     fc4:	27 df       	rcall	.-434    	; 0xe14 <Error>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <TWI_send_autonom_settings+0x5c>
     fca:	20 df       	rcall	.-448    	; 0xe0c <stop_bus>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <TWI_send_command>:
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	c8 2f       	mov	r28, r24
     fdc:	d6 2f       	mov	r29, r22
     fde:	14 2f       	mov	r17, r20
     fe0:	11 df       	rcall	.-478    	; 0xe04 <start_bus>
     fe2:	22 df       	rcall	.-444    	; 0xe28 <wait_for_bus>
     fe4:	90 91 b9 00 	lds	r25, 0x00B9
     fe8:	98 7f       	andi	r25, 0xF8	; 248
     fea:	98 30       	cpi	r25, 0x08	; 8
     fec:	19 f0       	breq	.+6      	; 0xff4 <TWI_send_command+0x20>
     fee:	12 df       	rcall	.-476    	; 0xe14 <Error>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	34 c0       	rjmp	.+104    	; 0x105c <TWI_send_command+0x88>
     ff4:	80 e2       	ldi	r24, 0x20	; 32
     ff6:	1e df       	rcall	.-452    	; 0xe34 <send_data_and_wait>
     ff8:	80 91 b9 00 	lds	r24, 0x00B9
     ffc:	88 7f       	andi	r24, 0xF8	; 248
     ffe:	88 31       	cpi	r24, 0x18	; 24
    1000:	19 f0       	breq	.+6      	; 0x1008 <TWI_send_command+0x34>
    1002:	08 df       	rcall	.-496    	; 0xe14 <Error>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	2a c0       	rjmp	.+84     	; 0x105c <TWI_send_command+0x88>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	14 df       	rcall	.-472    	; 0xe34 <send_data_and_wait>
    100c:	80 91 b9 00 	lds	r24, 0x00B9
    1010:	88 7f       	andi	r24, 0xF8	; 248
    1012:	88 32       	cpi	r24, 0x28	; 40
    1014:	19 f0       	breq	.+6      	; 0x101c <TWI_send_command+0x48>
    1016:	fe de       	rcall	.-516    	; 0xe14 <Error>
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	20 c0       	rjmp	.+64     	; 0x105c <TWI_send_command+0x88>
    101c:	8c 2f       	mov	r24, r28
    101e:	0a df       	rcall	.-492    	; 0xe34 <send_data_and_wait>
    1020:	80 91 b9 00 	lds	r24, 0x00B9
    1024:	88 7f       	andi	r24, 0xF8	; 248
    1026:	88 32       	cpi	r24, 0x28	; 40
    1028:	19 f0       	breq	.+6      	; 0x1030 <TWI_send_command+0x5c>
    102a:	f4 de       	rcall	.-536    	; 0xe14 <Error>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	16 c0       	rjmp	.+44     	; 0x105c <TWI_send_command+0x88>
    1030:	8d 2f       	mov	r24, r29
    1032:	00 df       	rcall	.-512    	; 0xe34 <send_data_and_wait>
    1034:	80 91 b9 00 	lds	r24, 0x00B9
    1038:	88 7f       	andi	r24, 0xF8	; 248
    103a:	88 32       	cpi	r24, 0x28	; 40
    103c:	19 f0       	breq	.+6      	; 0x1044 <TWI_send_command+0x70>
    103e:	ea de       	rcall	.-556    	; 0xe14 <Error>
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	0c c0       	rjmp	.+24     	; 0x105c <TWI_send_command+0x88>
    1044:	81 2f       	mov	r24, r17
    1046:	f6 de       	rcall	.-532    	; 0xe34 <send_data_and_wait>
    1048:	80 91 b9 00 	lds	r24, 0x00B9
    104c:	88 7f       	andi	r24, 0xF8	; 248
    104e:	88 32       	cpi	r24, 0x28	; 40
    1050:	19 f0       	breq	.+6      	; 0x1058 <TWI_send_command+0x84>
    1052:	e0 de       	rcall	.-576    	; 0xe14 <Error>
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	02 c0       	rjmp	.+4      	; 0x105c <TWI_send_command+0x88>
    1058:	d9 de       	rcall	.-590    	; 0xe0c <stop_bus>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	08 95       	ret

00001064 <TWI_send_string>:
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	c8 2f       	mov	r28, r24
    1072:	e6 2e       	mov	r14, r22
    1074:	f7 2e       	mov	r15, r23
    1076:	c6 de       	rcall	.-628    	; 0xe04 <start_bus>
    1078:	d7 de       	rcall	.-594    	; 0xe28 <wait_for_bus>
    107a:	90 91 b9 00 	lds	r25, 0x00B9
    107e:	98 7f       	andi	r25, 0xF8	; 248
    1080:	98 30       	cpi	r25, 0x08	; 8
    1082:	19 f0       	breq	.+6      	; 0x108a <TWI_send_string+0x26>
    1084:	c7 de       	rcall	.-626    	; 0xe14 <Error>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	2c c0       	rjmp	.+88     	; 0x10e2 <TWI_send_string+0x7e>
    108a:	8c 2f       	mov	r24, r28
    108c:	d3 de       	rcall	.-602    	; 0xe34 <send_data_and_wait>
    108e:	80 91 b9 00 	lds	r24, 0x00B9
    1092:	88 7f       	andi	r24, 0xF8	; 248
    1094:	88 31       	cpi	r24, 0x18	; 24
    1096:	19 f0       	breq	.+6      	; 0x109e <TWI_send_string+0x3a>
    1098:	bd de       	rcall	.-646    	; 0xe14 <Error>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	22 c0       	rjmp	.+68     	; 0x10e2 <TWI_send_string+0x7e>
    109e:	89 e1       	ldi	r24, 0x19	; 25
    10a0:	c9 de       	rcall	.-622    	; 0xe34 <send_data_and_wait>
    10a2:	80 91 b9 00 	lds	r24, 0x00B9
    10a6:	88 7f       	andi	r24, 0xF8	; 248
    10a8:	88 32       	cpi	r24, 0x28	; 40
    10aa:	29 f4       	brne	.+10     	; 0x10b6 <TWI_send_string+0x52>
    10ac:	0e 2d       	mov	r16, r14
    10ae:	1f 2d       	mov	r17, r15
    10b0:	c0 e0       	ldi	r28, 0x00	; 0
    10b2:	d0 e0       	ldi	r29, 0x00	; 0
    10b4:	08 c0       	rjmp	.+16     	; 0x10c6 <TWI_send_string+0x62>
    10b6:	ae de       	rcall	.-676    	; 0xe14 <Error>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	13 c0       	rjmp	.+38     	; 0x10e2 <TWI_send_string+0x7e>
    10bc:	f8 01       	movw	r30, r16
    10be:	81 91       	ld	r24, Z+
    10c0:	8f 01       	movw	r16, r30
    10c2:	b8 de       	rcall	.-656    	; 0xe34 <send_data_and_wait>
    10c4:	21 96       	adiw	r28, 0x01	; 1
    10c6:	ee 2d       	mov	r30, r14
    10c8:	ff 2d       	mov	r31, r15
    10ca:	df 01       	movw	r26, r30
    10cc:	0d 90       	ld	r0, X+
    10ce:	00 20       	and	r0, r0
    10d0:	e9 f7       	brne	.-6      	; 0x10cc <TWI_send_string+0x68>
    10d2:	11 97       	sbiw	r26, 0x01	; 1
    10d4:	ae 1b       	sub	r26, r30
    10d6:	bf 0b       	sbc	r27, r31
    10d8:	ca 17       	cp	r28, r26
    10da:	db 07       	cpc	r29, r27
    10dc:	78 f3       	brcs	.-34     	; 0x10bc <TWI_send_string+0x58>
    10de:	96 de       	rcall	.-724    	; 0xe0c <stop_bus>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	08 95       	ret

000010f0 <TWI_send_string_fixed_length>:
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	c8 2f       	mov	r28, r24
    10fe:	e6 2e       	mov	r14, r22
    1100:	f7 2e       	mov	r15, r23
    1102:	8a 01       	movw	r16, r20
    1104:	7f de       	rcall	.-770    	; 0xe04 <start_bus>
    1106:	90 de       	rcall	.-736    	; 0xe28 <wait_for_bus>
    1108:	90 91 b9 00 	lds	r25, 0x00B9
    110c:	98 7f       	andi	r25, 0xF8	; 248
    110e:	98 30       	cpi	r25, 0x08	; 8
    1110:	19 f0       	breq	.+6      	; 0x1118 <TWI_send_string_fixed_length+0x28>
    1112:	80 de       	rcall	.-768    	; 0xe14 <Error>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	23 c0       	rjmp	.+70     	; 0x115e <TWI_send_string_fixed_length+0x6e>
    1118:	8c 2f       	mov	r24, r28
    111a:	8c de       	rcall	.-744    	; 0xe34 <send_data_and_wait>
    111c:	80 91 b9 00 	lds	r24, 0x00B9
    1120:	88 7f       	andi	r24, 0xF8	; 248
    1122:	88 31       	cpi	r24, 0x18	; 24
    1124:	19 f0       	breq	.+6      	; 0x112c <TWI_send_string_fixed_length+0x3c>
    1126:	76 de       	rcall	.-788    	; 0xe14 <Error>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	19 c0       	rjmp	.+50     	; 0x115e <TWI_send_string_fixed_length+0x6e>
    112c:	89 e1       	ldi	r24, 0x19	; 25
    112e:	82 de       	rcall	.-764    	; 0xe34 <send_data_and_wait>
    1130:	80 91 b9 00 	lds	r24, 0x00B9
    1134:	88 7f       	andi	r24, 0xF8	; 248
    1136:	88 32       	cpi	r24, 0x28	; 40
    1138:	21 f4       	brne	.+8      	; 0x1142 <TWI_send_string_fixed_length+0x52>
    113a:	10 16       	cp	r1, r16
    113c:	11 06       	cpc	r1, r17
    113e:	24 f0       	brlt	.+8      	; 0x1148 <TWI_send_string_fixed_length+0x58>
    1140:	0c c0       	rjmp	.+24     	; 0x115a <TWI_send_string_fixed_length+0x6a>
    1142:	68 de       	rcall	.-816    	; 0xe14 <Error>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	0b c0       	rjmp	.+22     	; 0x115e <TWI_send_string_fixed_length+0x6e>
    1148:	ce 2d       	mov	r28, r14
    114a:	df 2d       	mov	r29, r15
    114c:	0c 0f       	add	r16, r28
    114e:	1d 1f       	adc	r17, r29
    1150:	89 91       	ld	r24, Y+
    1152:	70 de       	rcall	.-800    	; 0xe34 <send_data_and_wait>
    1154:	c0 17       	cp	r28, r16
    1156:	d1 07       	cpc	r29, r17
    1158:	d9 f7       	brne	.-10     	; 0x1150 <TWI_send_string_fixed_length+0x60>
    115a:	58 de       	rcall	.-848    	; 0xe0c <stop_bus>
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	08 95       	ret

0000116c <TWI_send_float>:
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	00 d0       	rcall	.+0      	; 0x117a <TWI_send_float+0xe>
    117a:	00 d0       	rcall	.+0      	; 0x117c <TWI_send_float+0x10>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	18 2f       	mov	r17, r24
    1182:	49 83       	std	Y+1, r20	; 0x01
    1184:	5a 83       	std	Y+2, r21	; 0x02
    1186:	6b 83       	std	Y+3, r22	; 0x03
    1188:	7c 83       	std	Y+4, r23	; 0x04
    118a:	3c de       	rcall	.-904    	; 0xe04 <start_bus>
    118c:	4d de       	rcall	.-870    	; 0xe28 <wait_for_bus>
    118e:	90 91 b9 00 	lds	r25, 0x00B9
    1192:	98 7f       	andi	r25, 0xF8	; 248
    1194:	98 30       	cpi	r25, 0x08	; 8
    1196:	19 f0       	breq	.+6      	; 0x119e <TWI_send_float+0x32>
    1198:	3d de       	rcall	.-902    	; 0xe14 <Error>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	24 c0       	rjmp	.+72     	; 0x11e6 <TWI_send_float+0x7a>
    119e:	81 2f       	mov	r24, r17
    11a0:	49 de       	rcall	.-878    	; 0xe34 <send_data_and_wait>
    11a2:	80 91 b9 00 	lds	r24, 0x00B9
    11a6:	88 7f       	andi	r24, 0xF8	; 248
    11a8:	88 31       	cpi	r24, 0x18	; 24
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <TWI_send_float+0x46>
    11ac:	33 de       	rcall	.-922    	; 0xe14 <Error>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	1a c0       	rjmp	.+52     	; 0x11e6 <TWI_send_float+0x7a>
    11b2:	86 e0       	ldi	r24, 0x06	; 6
    11b4:	3f de       	rcall	.-898    	; 0xe34 <send_data_and_wait>
    11b6:	80 91 b9 00 	lds	r24, 0x00B9
    11ba:	88 7f       	andi	r24, 0xF8	; 248
    11bc:	88 32       	cpi	r24, 0x28	; 40
    11be:	19 f0       	breq	.+6      	; 0x11c6 <TWI_send_float+0x5a>
    11c0:	29 de       	rcall	.-942    	; 0xe14 <Error>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	10 c0       	rjmp	.+32     	; 0x11e6 <TWI_send_float+0x7a>
    11c6:	8e 01       	movw	r16, r28
    11c8:	0f 5f       	subi	r16, 0xFF	; 255
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    11cc:	7e 01       	movw	r14, r28
    11ce:	85 e0       	ldi	r24, 0x05	; 5
    11d0:	e8 0e       	add	r14, r24
    11d2:	f1 1c       	adc	r15, r1
    11d4:	f8 01       	movw	r30, r16
    11d6:	81 91       	ld	r24, Z+
    11d8:	8f 01       	movw	r16, r30
    11da:	2c de       	rcall	.-936    	; 0xe34 <send_data_and_wait>
    11dc:	0e 15       	cp	r16, r14
    11de:	1f 05       	cpc	r17, r15
    11e0:	c9 f7       	brne	.-14     	; 0x11d4 <TWI_send_float+0x68>
    11e2:	14 de       	rcall	.-984    	; 0xe0c <stop_bus>
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	08 95       	ret

000011fc <TWI_get_command>:
    11fc:	8a 51       	subi	r24, 0x1A	; 26
    11fe:	9c 4e       	sbci	r25, 0xEC	; 236
    1200:	fc 01       	movw	r30, r24
    1202:	80 81       	ld	r24, Z
    1204:	08 95       	ret

00001206 <TWI_get_sensor>:
    1206:	88 5f       	subi	r24, 0xF8	; 248
    1208:	9a 4e       	sbci	r25, 0xEA	; 234
    120a:	fc 01       	movw	r30, r24
    120c:	80 81       	ld	r24, Z
    120e:	08 95       	ret

00001210 <TWI_get_control_setting>:
    1210:	85 51       	subi	r24, 0x15	; 21
    1212:	9b 4e       	sbci	r25, 0xEB	; 235
    1214:	fc 01       	movw	r30, r24
    1216:	80 81       	ld	r24, Z
    1218:	08 95       	ret

0000121a <TWI_get_autonom_settings>:
    121a:	80 91 e9 13 	lds	r24, 0x13E9
    121e:	08 95       	ret

00001220 <TWI_get_elevation>:
    1220:	80 91 f6 14 	lds	r24, 0x14F6
    1224:	08 95       	ret

00001226 <TWI_command_flag>:
    1226:	80 91 9d 13 	lds	r24, 0x139D
    122a:	88 23       	and	r24, r24
    122c:	21 f0       	breq	.+8      	; 0x1236 <TWI_command_flag+0x10>
    122e:	10 92 9d 13 	sts	0x139D, r1
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	08 95       	ret
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	08 95       	ret

0000123a <TWI_control_settings_flag>:
    123a:	80 91 9c 13 	lds	r24, 0x139C
    123e:	88 23       	and	r24, r24
    1240:	21 f0       	breq	.+8      	; 0x124a <TWI_control_settings_flag+0x10>
    1242:	10 92 9c 13 	sts	0x139C, r1
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	08 95       	ret
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	08 95       	ret

0000124e <TWI_autonom_settings_flag>:
    124e:	80 91 9b 13 	lds	r24, 0x139B
    1252:	88 23       	and	r24, r24
    1254:	21 f0       	breq	.+8      	; 0x125e <TWI_autonom_settings_flag+0x10>
    1256:	10 92 9b 13 	sts	0x139B, r1
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	08 95       	ret
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	08 95       	ret

00001262 <TWI_elevation_flag>:
    1262:	80 91 9a 13 	lds	r24, 0x139A
    1266:	88 23       	and	r24, r24
    1268:	21 f0       	breq	.+8      	; 0x1272 <TWI_elevation_flag+0x10>
    126a:	10 92 9a 13 	sts	0x139A, r1
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	08 95       	ret
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret

00001276 <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	d8 2f       	mov	r29, r24
    1280:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
    1282:	60 91 f9 14 	lds	r22, 0x14F9
    1286:	80 91 09 01 	lds	r24, 0x0109
    128a:	90 91 0a 01 	lds	r25, 0x010A
    128e:	b6 d8       	rcall	.-3732   	; 0x3fc <FifoWrite>
    1290:	81 11       	cpse	r24, r1
    1292:	1f c0       	rjmp	.+62     	; 0x12d2 <write_to_TwiFIFO+0x5c>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    1294:	20 91 f9 14 	lds	r18, 0x14F9
    1298:	30 91 fa 14 	lds	r19, 0x14FA
    129c:	12 16       	cp	r1, r18
    129e:	13 06       	cpc	r1, r19
    12a0:	d4 f4       	brge	.+52     	; 0x12d6 <write_to_TwiFIFO+0x60>
    12a2:	0d 2f       	mov	r16, r29
    12a4:	1c 2f       	mov	r17, r28
    12a6:	c0 e0       	ldi	r28, 0x00	; 0
    12a8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    12aa:	f8 01       	movw	r30, r16
    12ac:	61 91       	ld	r22, Z+
    12ae:	8f 01       	movw	r16, r30
    12b0:	80 91 09 01 	lds	r24, 0x0109
    12b4:	90 91 0a 01 	lds	r25, 0x010A
    12b8:	a1 d8       	rcall	.-3774   	; 0x3fc <FifoWrite>
    12ba:	81 11       	cpse	r24, r1
    12bc:	0e c0       	rjmp	.+28     	; 0x12da <write_to_TwiFIFO+0x64>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    12be:	21 96       	adiw	r28, 0x01	; 1
    12c0:	80 91 f9 14 	lds	r24, 0x14F9
    12c4:	90 91 fa 14 	lds	r25, 0x14FA
    12c8:	c8 17       	cp	r28, r24
    12ca:	d9 07       	cpc	r29, r25
    12cc:	74 f3       	brlt	.-36     	; 0x12aa <write_to_TwiFIFO+0x34>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <write_to_TwiFIFO+0x66>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//Can't add length!?
		return 1;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <write_to_TwiFIFO+0x66>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	01 c0       	rjmp	.+2      	; 0x12dc <write_to_TwiFIFO+0x66>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//Can't add chars!?
			return 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <__vector_26>:

//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    12e6:	1f 92       	push	r1
    12e8:	0f 92       	push	r0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	0f 92       	push	r0
    12ee:	11 24       	eor	r1, r1
    12f0:	0b b6       	in	r0, 0x3b	; 59
    12f2:	0f 92       	push	r0
    12f4:	2f 93       	push	r18
    12f6:	3f 93       	push	r19
    12f8:	4f 93       	push	r20
    12fa:	5f 93       	push	r21
    12fc:	6f 93       	push	r22
    12fe:	7f 93       	push	r23
    1300:	8f 93       	push	r24
    1302:	9f 93       	push	r25
    1304:	af 93       	push	r26
    1306:	bf 93       	push	r27
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	ef 93       	push	r30
    130e:	ff 93       	push	r31
	switch(myAdress)
    1310:	80 91 f0 14 	lds	r24, 0x14F0
    1314:	80 34       	cpi	r24, 0x40	; 64
    1316:	09 f4       	brne	.+2      	; 0x131a <__vector_26+0x34>
    1318:	87 c0       	rjmp	.+270    	; 0x1428 <__vector_26+0x142>
    131a:	80 38       	cpi	r24, 0x80	; 128
    131c:	21 f0       	breq	.+8      	; 0x1326 <__vector_26+0x40>
    131e:	80 32       	cpi	r24, 0x20	; 32
    1320:	09 f0       	breq	.+2      	; 0x1324 <__vector_26+0x3e>
    1322:	57 c1       	rjmp	.+686    	; 0x15d2 <__vector_26+0x2ec>
    1324:	c9 c0       	rjmp	.+402    	; 0x14b8 <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1326:	80 91 b9 00 	lds	r24, 0x00B9
    132a:	88 7f       	andi	r24, 0xF8	; 248
    132c:	80 36       	cpi	r24, 0x60	; 96
    132e:	29 f0       	breq	.+10     	; 0x133a <__vector_26+0x54>
    1330:	80 91 b9 00 	lds	r24, 0x00B9
    1334:	88 7f       	andi	r24, 0xF8	; 248
    1336:	88 36       	cpi	r24, 0x68	; 104
    1338:	21 f4       	brne	.+8      	; 0x1342 <__vector_26+0x5c>
			{
				instruction = 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	80 93 f3 14 	sts	0x14F3, r24
    1340:	71 c0       	rjmp	.+226    	; 0x1424 <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1342:	80 91 b9 00 	lds	r24, 0x00B9
    1346:	88 7f       	andi	r24, 0xF8	; 248
    1348:	80 37       	cpi	r24, 0x70	; 112
    134a:	29 f0       	breq	.+10     	; 0x1356 <__vector_26+0x70>
    134c:	80 91 b9 00 	lds	r24, 0x00B9
    1350:	88 7f       	andi	r24, 0xF8	; 248
    1352:	88 37       	cpi	r24, 0x78	; 120
    1354:	39 f4       	brne	.+14     	; 0x1364 <__vector_26+0x7e>
			{
				currentInstruction = 255;
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	90 93 fd 14 	sts	0x14FD, r25
    135e:	80 93 fc 14 	sts	0x14FC, r24
    1362:	60 c0       	rjmp	.+192    	; 0x1424 <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    1364:	80 91 b9 00 	lds	r24, 0x00B9
    1368:	88 7f       	andi	r24, 0xF8	; 248
    136a:	80 38       	cpi	r24, 0x80	; 128
    136c:	b9 f5       	brne	.+110    	; 0x13dc <__vector_26+0xf6>
			{
				if(instruction)
    136e:	80 91 f3 14 	lds	r24, 0x14F3
    1372:	88 23       	and	r24, r24
    1374:	41 f0       	breq	.+16     	; 0x1386 <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    1376:	55 dd       	rcall	.-1366   	; 0xe22 <get_data>
    1378:	80 93 fc 14 	sts	0x14FC, r24
    137c:	10 92 fd 14 	sts	0x14FD, r1
					instruction = 0;
    1380:	10 92 f3 14 	sts	0x14F3, r1
    1384:	4f c0       	rjmp	.+158    	; 0x1424 <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    1386:	80 91 fc 14 	lds	r24, 0x14FC
    138a:	90 91 fd 14 	lds	r25, 0x14FD
    138e:	85 30       	cpi	r24, 0x05	; 5
    1390:	91 05       	cpc	r25, r1
    1392:	71 f0       	breq	.+28     	; 0x13b0 <__vector_26+0xca>
    1394:	24 f4       	brge	.+8      	; 0x139e <__vector_26+0xb8>
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	09 f0       	breq	.+2      	; 0x139c <__vector_26+0xb6>
    139a:	44 c0       	rjmp	.+136    	; 0x1424 <__vector_26+0x13e>
    139c:	07 c0       	rjmp	.+14     	; 0x13ac <__vector_26+0xc6>
    139e:	86 30       	cpi	r24, 0x06	; 6
    13a0:	91 05       	cpc	r25, r1
    13a2:	51 f0       	breq	.+20     	; 0x13b8 <__vector_26+0xd2>
    13a4:	49 97       	sbiw	r24, 0x19	; 25
    13a6:	09 f0       	breq	.+2      	; 0x13aa <__vector_26+0xc4>
    13a8:	3d c0       	rjmp	.+122    	; 0x1424 <__vector_26+0x13e>
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    13ac:	64 dd       	rcall	.-1336   	; 0xe76 <get_control_settings_from_bus>
							break;
    13ae:	3a c0       	rjmp	.+116    	; 0x1424 <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    13b0:	73 dd       	rcall	.-1306   	; 0xe98 <get_autonom_settings_from_bus>
							break;
    13b2:	38 c0       	rjmp	.+112    	; 0x1424 <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    13b4:	75 dd       	rcall	.-1302   	; 0xea0 <get_char_from_bus>
							break;
    13b6:	36 c0       	rjmp	.+108    	; 0x1424 <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    13b8:	c0 91 f1 14 	lds	r28, 0x14F1
    13bc:	d0 91 f2 14 	lds	r29, 0x14F2
    13c0:	30 dd       	rcall	.-1440   	; 0xe22 <get_data>
    13c2:	ce 51       	subi	r28, 0x1E	; 30
    13c4:	dc 4e       	sbci	r29, 0xEC	; 236
    13c6:	88 83       	st	Y, r24
	floatCounter += 1;
    13c8:	80 91 f1 14 	lds	r24, 0x14F1
    13cc:	90 91 f2 14 	lds	r25, 0x14F2
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	90 93 f2 14 	sts	0x14F2, r25
    13d6:	80 93 f1 14 	sts	0x14F1, r24
    13da:	24 c0       	rjmp	.+72     	; 0x1424 <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    13dc:	80 91 b9 00 	lds	r24, 0x00B9
    13e0:	88 7f       	andi	r24, 0xF8	; 248
    13e2:	80 39       	cpi	r24, 0x90	; 144
    13e4:	11 f4       	brne	.+4      	; 0x13ea <__vector_26+0x104>
			{
				get_sensor_from_bus();
    13e6:	76 dd       	rcall	.-1300   	; 0xed4 <get_sensor_from_bus>
    13e8:	1d c0       	rjmp	.+58     	; 0x1424 <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    13ea:	80 91 b9 00 	lds	r24, 0x00B9
    13ee:	88 7f       	andi	r24, 0xF8	; 248
    13f0:	80 3a       	cpi	r24, 0xA0	; 160
    13f2:	c1 f4       	brne	.+48     	; 0x1424 <__vector_26+0x13e>
			{
				stop_twi();
    13f4:	25 dd       	rcall	.-1462   	; 0xe40 <stop_twi>
				switch(currentInstruction)
    13f6:	80 91 fc 14 	lds	r24, 0x14FC
    13fa:	90 91 fd 14 	lds	r25, 0x14FD
    13fe:	85 30       	cpi	r24, 0x05	; 5
    1400:	91 05       	cpc	r25, r1
    1402:	49 f0       	breq	.+18     	; 0x1416 <__vector_26+0x130>
    1404:	89 31       	cpi	r24, 0x19	; 25
    1406:	91 05       	cpc	r25, r1
    1408:	51 f0       	breq	.+20     	; 0x141e <__vector_26+0x138>
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	59 f4       	brne	.+22     	; 0x1424 <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	80 93 9c 13 	sts	0x139C, r24
						break;
    1414:	07 c0       	rjmp	.+14     	; 0x1424 <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	80 93 9b 13 	sts	0x139B, r24
						break;
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    141e:	8a ee       	ldi	r24, 0xEA	; 234
    1420:	93 e1       	ldi	r25, 0x13	; 19
    1422:	29 df       	rcall	.-430    	; 0x1276 <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    1424:	22 dd       	rcall	.-1468   	; 0xe6a <reset_TWI>
			break;
    1426:	d5 c0       	rjmp	.+426    	; 0x15d2 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1428:	80 91 b9 00 	lds	r24, 0x00B9
    142c:	88 7f       	andi	r24, 0xF8	; 248
    142e:	80 36       	cpi	r24, 0x60	; 96
    1430:	29 f0       	breq	.+10     	; 0x143c <__vector_26+0x156>
    1432:	80 91 b9 00 	lds	r24, 0x00B9
    1436:	88 7f       	andi	r24, 0xF8	; 248
    1438:	88 36       	cpi	r24, 0x68	; 104
    143a:	21 f4       	brne	.+8      	; 0x1444 <__vector_26+0x15e>
			{
				instruction = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	80 93 f3 14 	sts	0x14F3, r24
    1442:	38 c0       	rjmp	.+112    	; 0x14b4 <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    1444:	80 91 b9 00 	lds	r24, 0x00B9
    1448:	88 7f       	andi	r24, 0xF8	; 248
    144a:	80 38       	cpi	r24, 0x80	; 128
    144c:	e1 f4       	brne	.+56     	; 0x1486 <__vector_26+0x1a0>
			{
				if(instruction)
    144e:	80 91 f3 14 	lds	r24, 0x14F3
    1452:	88 23       	and	r24, r24
    1454:	41 f0       	breq	.+16     	; 0x1466 <__vector_26+0x180>
				{
					currentInstruction = get_data();
    1456:	e5 dc       	rcall	.-1590   	; 0xe22 <get_data>
    1458:	80 93 fc 14 	sts	0x14FC, r24
    145c:	10 92 fd 14 	sts	0x14FD, r1
					instruction = 0;
    1460:	10 92 f3 14 	sts	0x14F3, r1
    1464:	27 c0       	rjmp	.+78     	; 0x14b4 <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    1466:	80 91 fc 14 	lds	r24, 0x14FC
    146a:	90 91 fd 14 	lds	r25, 0x14FD
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	91 05       	cpc	r25, r1
    1472:	19 f0       	breq	.+6      	; 0x147a <__vector_26+0x194>
    1474:	49 97       	sbiw	r24, 0x19	; 25
    1476:	f1 f4       	brne	.+60     	; 0x14b4 <__vector_26+0x1ce>
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    147a:	d3 dc       	rcall	.-1626   	; 0xe22 <get_data>
    147c:	80 93 fb 14 	sts	0x14FB, r24
    1480:	19 c0       	rjmp	.+50     	; 0x14b4 <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    1482:	0e dd       	rcall	.-1508   	; 0xea0 <get_char_from_bus>
							break;
    1484:	17 c0       	rjmp	.+46     	; 0x14b4 <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    1486:	80 91 b9 00 	lds	r24, 0x00B9
    148a:	88 7f       	andi	r24, 0xF8	; 248
    148c:	80 3a       	cpi	r24, 0xA0	; 160
    148e:	91 f4       	brne	.+36     	; 0x14b4 <__vector_26+0x1ce>
			{
				stop_twi();
    1490:	d7 dc       	rcall	.-1618   	; 0xe40 <stop_twi>
				switch(currentInstruction)
    1492:	80 91 fc 14 	lds	r24, 0x14FC
    1496:	90 91 fd 14 	lds	r25, 0x14FD
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	91 05       	cpc	r25, r1
    149e:	19 f0       	breq	.+6      	; 0x14a6 <__vector_26+0x1c0>
    14a0:	49 97       	sbiw	r24, 0x19	; 25
    14a2:	41 f4       	brne	.+16     	; 0x14b4 <__vector_26+0x1ce>
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	80 93 99 13 	sts	0x1399, r24
						break;
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    14ae:	8a ee       	ldi	r24, 0xEA	; 234
    14b0:	93 e1       	ldi	r25, 0x13	; 19
    14b2:	e1 de       	rcall	.-574    	; 0x1276 <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    14b4:	da dc       	rcall	.-1612   	; 0xe6a <reset_TWI>
			break;
    14b6:	8d c0       	rjmp	.+282    	; 0x15d2 <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    14b8:	80 91 b9 00 	lds	r24, 0x00B9
    14bc:	88 7f       	andi	r24, 0xF8	; 248
    14be:	80 36       	cpi	r24, 0x60	; 96
    14c0:	29 f0       	breq	.+10     	; 0x14cc <__vector_26+0x1e6>
    14c2:	80 91 b9 00 	lds	r24, 0x00B9
    14c6:	88 7f       	andi	r24, 0xF8	; 248
    14c8:	88 36       	cpi	r24, 0x68	; 104
    14ca:	21 f4       	brne	.+8      	; 0x14d4 <__vector_26+0x1ee>
			{
				instruction = 1;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	80 93 f3 14 	sts	0x14F3, r24
    14d2:	7e c0       	rjmp	.+252    	; 0x15d0 <__vector_26+0x2ea>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    14d4:	80 91 b9 00 	lds	r24, 0x00B9
    14d8:	88 7f       	andi	r24, 0xF8	; 248
    14da:	80 37       	cpi	r24, 0x70	; 112
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <__vector_26+0x202>
    14de:	80 91 b9 00 	lds	r24, 0x00B9
    14e2:	88 7f       	andi	r24, 0xF8	; 248
    14e4:	88 37       	cpi	r24, 0x78	; 120
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <__vector_26+0x210>
			{
				currentInstruction = 255;
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	90 93 fd 14 	sts	0x14FD, r25
    14f0:	80 93 fc 14 	sts	0x14FC, r24
    14f4:	6d c0       	rjmp	.+218    	; 0x15d0 <__vector_26+0x2ea>
			}
			else if(CONTROL == DATA_SLAW)
    14f6:	80 91 b9 00 	lds	r24, 0x00B9
    14fa:	88 7f       	andi	r24, 0xF8	; 248
    14fc:	80 38       	cpi	r24, 0x80	; 128
    14fe:	09 f0       	breq	.+2      	; 0x1502 <__vector_26+0x21c>
    1500:	3a c0       	rjmp	.+116    	; 0x1576 <__vector_26+0x290>
			{
				if(instruction)
    1502:	80 91 f3 14 	lds	r24, 0x14F3
    1506:	88 23       	and	r24, r24
    1508:	41 f0       	breq	.+16     	; 0x151a <__vector_26+0x234>
				{
					currentInstruction = get_data();
    150a:	8b dc       	rcall	.-1770   	; 0xe22 <get_data>
    150c:	80 93 fc 14 	sts	0x14FC, r24
    1510:	10 92 fd 14 	sts	0x14FD, r1
					instruction = 0;
    1514:	10 92 f3 14 	sts	0x14F3, r1
    1518:	5b c0       	rjmp	.+182    	; 0x15d0 <__vector_26+0x2ea>
				}
				else
				{
					switch(currentInstruction)
    151a:	80 91 fc 14 	lds	r24, 0x14FC
    151e:	90 91 fd 14 	lds	r25, 0x14FD
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	19 f1       	breq	.+70     	; 0x156e <__vector_26+0x288>
    1528:	1c f4       	brge	.+6      	; 0x1530 <__vector_26+0x24a>
    152a:	89 2b       	or	r24, r25
    152c:	41 f0       	breq	.+16     	; 0x153e <__vector_26+0x258>
    152e:	50 c0       	rjmp	.+160    	; 0x15d0 <__vector_26+0x2ea>
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	91 05       	cpc	r25, r1
    1534:	b1 f0       	breq	.+44     	; 0x1562 <__vector_26+0x27c>
    1536:	05 97       	sbiw	r24, 0x05	; 5
    1538:	09 f0       	breq	.+2      	; 0x153c <__vector_26+0x256>
    153a:	4a c0       	rjmp	.+148    	; 0x15d0 <__vector_26+0x2ea>
    153c:	1a c0       	rjmp	.+52     	; 0x1572 <__vector_26+0x28c>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    153e:	c0 91 f4 14 	lds	r28, 0x14F4
    1542:	d0 91 f5 14 	lds	r29, 0x14F5
    1546:	6d dc       	rcall	.-1830   	; 0xe22 <get_data>
    1548:	ca 51       	subi	r28, 0x1A	; 26
    154a:	dc 4e       	sbci	r29, 0xEC	; 236
    154c:	88 83       	st	Y, r24
	currentCommand += 1;
    154e:	80 91 f4 14 	lds	r24, 0x14F4
    1552:	90 91 f5 14 	lds	r25, 0x14F5
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	90 93 f5 14 	sts	0x14F5, r25
    155c:	80 93 f4 14 	sts	0x14F4, r24
    1560:	37 c0       	rjmp	.+110    	; 0x15d0 <__vector_26+0x2ea>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation = get_data();
    1562:	5f dc       	rcall	.-1858   	; 0xe22 <get_data>
    1564:	80 93 f6 14 	sts	0x14F6, r24
    1568:	10 92 f7 14 	sts	0x14F7, r1
    156c:	31 c0       	rjmp	.+98     	; 0x15d0 <__vector_26+0x2ea>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    156e:	83 dc       	rcall	.-1786   	; 0xe76 <get_control_settings_from_bus>
							break;
    1570:	2f c0       	rjmp	.+94     	; 0x15d0 <__vector_26+0x2ea>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1572:	92 dc       	rcall	.-1756   	; 0xe98 <get_autonom_settings_from_bus>
							break;
    1574:	2d c0       	rjmp	.+90     	; 0x15d0 <__vector_26+0x2ea>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    1576:	80 91 b9 00 	lds	r24, 0x00B9
    157a:	88 7f       	andi	r24, 0xF8	; 248
    157c:	80 39       	cpi	r24, 0x90	; 144
    157e:	11 f4       	brne	.+4      	; 0x1584 <__vector_26+0x29e>
			{
				get_sensor_from_bus();
    1580:	a9 dc       	rcall	.-1710   	; 0xed4 <get_sensor_from_bus>
    1582:	26 c0       	rjmp	.+76     	; 0x15d0 <__vector_26+0x2ea>
			}
			else if (CONTROL == STOP)
    1584:	80 91 b9 00 	lds	r24, 0x00B9
    1588:	88 7f       	andi	r24, 0xF8	; 248
    158a:	80 3a       	cpi	r24, 0xA0	; 160
    158c:	09 f5       	brne	.+66     	; 0x15d0 <__vector_26+0x2ea>
			{
				stop_twi();
    158e:	58 dc       	rcall	.-1872   	; 0xe40 <stop_twi>
				switch(currentInstruction)
    1590:	80 91 fc 14 	lds	r24, 0x14FC
    1594:	90 91 fd 14 	lds	r25, 0x14FD
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	91 05       	cpc	r25, r1
    159c:	91 f0       	breq	.+36     	; 0x15c2 <__vector_26+0x2dc>
    159e:	1c f4       	brge	.+6      	; 0x15a6 <__vector_26+0x2c0>
    15a0:	89 2b       	or	r24, r25
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <__vector_26+0x2cc>
    15a4:	15 c0       	rjmp	.+42     	; 0x15d0 <__vector_26+0x2ea>
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	91 05       	cpc	r25, r1
    15aa:	39 f0       	breq	.+14     	; 0x15ba <__vector_26+0x2d4>
    15ac:	05 97       	sbiw	r24, 0x05	; 5
    15ae:	81 f4       	brne	.+32     	; 0x15d0 <__vector_26+0x2ea>
    15b0:	0c c0       	rjmp	.+24     	; 0x15ca <__vector_26+0x2e4>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	80 93 9d 13 	sts	0x139D, r24
						break;
    15b8:	0b c0       	rjmp	.+22     	; 0x15d0 <__vector_26+0x2ea>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 93 9a 13 	sts	0x139A, r24
						break;
    15c0:	07 c0       	rjmp	.+14     	; 0x15d0 <__vector_26+0x2ea>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	80 93 9c 13 	sts	0x139C, r24
						break;
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <__vector_26+0x2ea>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	80 93 9b 13 	sts	0x139B, r24
						break;
					}
				}
			}
			reset_TWI();
    15d0:	4c dc       	rcall	.-1896   	; 0xe6a <reset_TWI>
			break;
		}
	}
    15d2:	ff 91       	pop	r31
    15d4:	ef 91       	pop	r30
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0b be       	out	0x3b, r0	; 59
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
    15fc:	10 92 c5 00 	sts	0x00C5, r1
    1600:	87 e0       	ldi	r24, 0x07	; 7
    1602:	80 93 c4 00 	sts	0x00C4, r24
    1606:	88 e9       	ldi	r24, 0x98	; 152
    1608:	80 93 c1 00 	sts	0x00C1, r24
    160c:	86 e0       	ldi	r24, 0x06	; 6
    160e:	80 93 c2 00 	sts	0x00C2, r24
    1612:	08 95       	ret

00001614 <USART_set_twi_message_destination>:
    1614:	90 93 1b 11 	sts	0x111B, r25
    1618:	80 93 1a 11 	sts	0x111A, r24
    161c:	08 95       	ret

0000161e <USART_CheckTxReady>:
    161e:	80 91 c0 00 	lds	r24, 0x00C0
    1622:	80 72       	andi	r24, 0x20	; 32
    1624:	08 95       	ret

00001626 <USART_WriteByte>:
    1626:	cf 93       	push	r28
    1628:	c8 2f       	mov	r28, r24
    162a:	f9 df       	rcall	.-14     	; 0x161e <USART_CheckTxReady>
    162c:	88 23       	and	r24, r24
    162e:	e9 f3       	breq	.-6      	; 0x162a <USART_WriteByte+0x4>
    1630:	c0 93 c6 00 	sts	0x00C6, r28
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <USART_crc16>:
    1638:	cf 92       	push	r12
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	66 23       	and	r22, r22
    164a:	09 f4       	brne	.+2      	; 0x164e <USART_crc16+0x16>
    164c:	3e c0       	rjmp	.+124    	; 0x16ca <USART_crc16+0x92>
    164e:	06 2f       	mov	r16, r22
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	4f ef       	ldi	r20, 0xFF	; 255
    1654:	5f ef       	ldi	r21, 0xFF	; 255
    1656:	ee ef       	ldi	r30, 0xFE	; 254
    1658:	ff ef       	ldi	r31, 0xFF	; 255
    165a:	c6 2e       	mov	r12, r22
    165c:	d1 2c       	mov	r13, r1
    165e:	e8 2e       	mov	r14, r24
    1660:	f1 2c       	mov	r15, r1
    1662:	c8 e0       	ldi	r28, 0x08	; 8
    1664:	d0 e0       	ldi	r29, 0x00	; 0
    1666:	ee 3f       	cpi	r30, 0xFE	; 254
    1668:	6f ef       	ldi	r22, 0xFF	; 255
    166a:	f6 07       	cpc	r31, r22
    166c:	19 f4       	brne	.+6      	; 0x1674 <USART_crc16+0x3c>
    166e:	8e 2d       	mov	r24, r14
    1670:	9f 2d       	mov	r25, r15
    1672:	30 c0       	rjmp	.+96     	; 0x16d4 <USART_crc16+0x9c>
    1674:	ef 3f       	cpi	r30, 0xFF	; 255
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	f8 07       	cpc	r31, r24
    167a:	19 f4       	brne	.+6      	; 0x1682 <USART_crc16+0x4a>
    167c:	8c 2d       	mov	r24, r12
    167e:	9d 2d       	mov	r25, r13
    1680:	29 c0       	rjmp	.+82     	; 0x16d4 <USART_crc16+0x9c>
    1682:	df 01       	movw	r26, r30
    1684:	ab 5e       	subi	r26, 0xEB	; 235
    1686:	b8 4e       	sbci	r27, 0xE8	; 232
    1688:	8c 91       	ld	r24, X
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	23 c0       	rjmp	.+70     	; 0x16d4 <USART_crc16+0x9c>
    168e:	ba 01       	movw	r22, r20
    1690:	68 27       	eor	r22, r24
    1692:	79 27       	eor	r23, r25
    1694:	60 ff       	sbrs	r22, 0
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <USART_crc16+0x6e>
    1698:	56 95       	lsr	r21
    169a:	47 95       	ror	r20
    169c:	68 e0       	ldi	r22, 0x08	; 8
    169e:	46 27       	eor	r20, r22
    16a0:	64 e8       	ldi	r22, 0x84	; 132
    16a2:	56 27       	eor	r21, r22
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <USART_crc16+0x72>
    16a6:	56 95       	lsr	r21
    16a8:	47 95       	ror	r20
    16aa:	96 95       	lsr	r25
    16ac:	87 95       	ror	r24
    16ae:	21 50       	subi	r18, 0x01	; 1
    16b0:	31 09       	sbc	r19, r1
    16b2:	69 f7       	brne	.-38     	; 0x168e <USART_crc16+0x56>
    16b4:	31 96       	adiw	r30, 0x01	; 1
    16b6:	e0 17       	cp	r30, r16
    16b8:	f1 07       	cpc	r31, r17
    16ba:	a9 f6       	brne	.-86     	; 0x1666 <USART_crc16+0x2e>
    16bc:	9a 01       	movw	r18, r20
    16be:	20 95       	com	r18
    16c0:	30 95       	com	r19
    16c2:	32 27       	eor	r19, r18
    16c4:	23 27       	eor	r18, r19
    16c6:	32 27       	eor	r19, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <USART_crc16+0x96>
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	82 2f       	mov	r24, r18
    16d0:	93 2f       	mov	r25, r19
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <USART_crc16+0xa0>
    16d4:	9e 01       	movw	r18, r28
    16d6:	db cf       	rjmp	.-74     	; 0x168e <USART_crc16+0x56>
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	08 95       	ret

000016ea <USART_SendPacket>:
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	9e e7       	ldi	r25, 0x7E	; 126
    16f4:	90 93 14 18 	sts	0x1814, r25
    16f8:	80 93 15 18 	sts	0x1815, r24
    16fc:	60 93 16 18 	sts	0x1816, r22
    1700:	26 2f       	mov	r18, r22
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	12 16       	cp	r1, r18
    1706:	13 06       	cpc	r1, r19
    1708:	4c f5       	brge	.+82     	; 0x175c <USART_SendPacket+0x72>
    170a:	e5 e1       	ldi	r30, 0x15	; 21
    170c:	f7 e1       	ldi	r31, 0x17	; 23
    170e:	03 e0       	ldi	r16, 0x03	; 3
    1710:	10 e0       	ldi	r17, 0x00	; 0
    1712:	c0 e0       	ldi	r28, 0x00	; 0
    1714:	d0 e0       	ldi	r29, 0x00	; 0
    1716:	7d e7       	ldi	r23, 0x7D	; 125
    1718:	50 e2       	ldi	r21, 0x20	; 32
    171a:	90 81       	ld	r25, Z
    171c:	49 2f       	mov	r20, r25
    171e:	4d 57       	subi	r20, 0x7D	; 125
    1720:	42 30       	cpi	r20, 0x02	; 2
    1722:	80 f4       	brcc	.+32     	; 0x1744 <USART_SendPacket+0x5a>
    1724:	d8 01       	movw	r26, r16
    1726:	ac 5e       	subi	r26, 0xEC	; 236
    1728:	b7 4e       	sbci	r27, 0xE7	; 231
    172a:	ac 0f       	add	r26, r28
    172c:	bd 1f       	adc	r27, r29
    172e:	7c 93       	st	X, r23
    1730:	0f 5f       	subi	r16, 0xFF	; 255
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	d8 01       	movw	r26, r16
    1736:	ac 5e       	subi	r26, 0xEC	; 236
    1738:	b7 4e       	sbci	r27, 0xE7	; 231
    173a:	ac 0f       	add	r26, r28
    173c:	bd 1f       	adc	r27, r29
    173e:	95 27       	eor	r25, r21
    1740:	9c 93       	st	X, r25
    1742:	06 c0       	rjmp	.+12     	; 0x1750 <USART_SendPacket+0x66>
    1744:	d8 01       	movw	r26, r16
    1746:	ac 5e       	subi	r26, 0xEC	; 236
    1748:	b7 4e       	sbci	r27, 0xE7	; 231
    174a:	ac 0f       	add	r26, r28
    174c:	bd 1f       	adc	r27, r29
    174e:	9c 93       	st	X, r25
    1750:	21 96       	adiw	r28, 0x01	; 1
    1752:	31 96       	adiw	r30, 0x01	; 1
    1754:	c2 17       	cp	r28, r18
    1756:	d3 07       	cpc	r29, r19
    1758:	01 f7       	brne	.-64     	; 0x171a <USART_SendPacket+0x30>
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <USART_SendPacket+0x7a>
    175c:	03 e0       	ldi	r16, 0x03	; 3
    175e:	10 e0       	ldi	r17, 0x00	; 0
    1760:	c0 e0       	ldi	r28, 0x00	; 0
    1762:	d0 e0       	ldi	r29, 0x00	; 0
    1764:	69 df       	rcall	.-302    	; 0x1638 <USART_crc16>
    1766:	f8 01       	movw	r30, r16
    1768:	ec 5e       	subi	r30, 0xEC	; 236
    176a:	f7 4e       	sbci	r31, 0xE7	; 231
    176c:	ec 0f       	add	r30, r28
    176e:	fd 1f       	adc	r31, r29
    1770:	90 83       	st	Z, r25
    1772:	81 83       	std	Z+1, r24	; 0x01
    1774:	22 96       	adiw	r28, 0x02	; 2
    1776:	0c 0f       	add	r16, r28
    1778:	1d 1f       	adc	r17, r29
    177a:	f8 01       	movw	r30, r16
    177c:	ec 5e       	subi	r30, 0xEC	; 236
    177e:	f7 4e       	sbci	r31, 0xE7	; 231
    1780:	8e e7       	ldi	r24, 0x7E	; 126
    1782:	80 83       	st	Z, r24
    1784:	c8 01       	movw	r24, r16
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	18 16       	cp	r1, r24
    178a:	19 06       	cpc	r1, r25
    178c:	4c f4       	brge	.+18     	; 0x17a0 <USART_SendPacket+0xb6>
    178e:	c4 e1       	ldi	r28, 0x14	; 20
    1790:	d8 e1       	ldi	r29, 0x18	; 24
    1792:	0b 5e       	subi	r16, 0xEB	; 235
    1794:	17 4e       	sbci	r17, 0xE7	; 231
    1796:	89 91       	ld	r24, Y+
    1798:	46 df       	rcall	.-372    	; 0x1626 <USART_WriteByte>
    179a:	c0 17       	cp	r28, r16
    179c:	d1 07       	cpc	r29, r17
    179e:	d9 f7       	brne	.-10     	; 0x1796 <USART_SendPacket+0xac>
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <USART_SendCommand>:
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	26 dd       	rcall	.-1460   	; 0x11fc <TWI_get_command>
    17b0:	80 93 15 17 	sts	0x1715, r24
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	21 dd       	rcall	.-1470   	; 0x11fc <TWI_get_command>
    17ba:	80 93 16 17 	sts	0x1716, r24
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	1c dd       	rcall	.-1480   	; 0x11fc <TWI_get_command>
    17c4:	80 93 17 17 	sts	0x1717, r24
    17c8:	63 e0       	ldi	r22, 0x03	; 3
    17ca:	83 e4       	ldi	r24, 0x43	; 67
    17cc:	8e cf       	rjmp	.-228    	; 0x16ea <USART_SendPacket>

000017ce <USART_SendElevation>:
    17ce:	28 dd       	rcall	.-1456   	; 0x1220 <TWI_get_elevation>
    17d0:	80 93 15 17 	sts	0x1715, r24
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	85 e4       	ldi	r24, 0x45	; 69
    17d8:	88 cf       	rjmp	.-240    	; 0x16ea <USART_SendPacket>

000017da <USART_SendTurn>:
    17da:	90 93 15 17 	sts	0x1715, r25
    17de:	80 93 16 17 	sts	0x1716, r24
    17e2:	60 93 17 17 	sts	0x1717, r22
    17e6:	63 e0       	ldi	r22, 0x03	; 3
    17e8:	84 e5       	ldi	r24, 0x54	; 84
    17ea:	7f cf       	rjmp	.-258    	; 0x16ea <USART_SendPacket>

000017ec <USART_DecodeMessageRxFIFO>:
    17ec:	8f 92       	push	r8
    17ee:	9f 92       	push	r9
    17f0:	af 92       	push	r10
    17f2:	bf 92       	push	r11
    17f4:	cf 92       	push	r12
    17f6:	df 92       	push	r13
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	ad b6       	in	r10, 0x3d	; 61
    180a:	be b6       	in	r11, 0x3e	; 62
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	80 91 12 01 	lds	r24, 0x0112
    1814:	90 91 13 01 	lds	r25, 0x0113
    1818:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    181c:	88 23       	and	r24, r24
    181e:	31 f0       	breq	.+12     	; 0x182c <USART_DecodeMessageRxFIFO+0x40>
    1820:	66 e0       	ldi	r22, 0x06	; 6
    1822:	72 e1       	ldi	r23, 0x12	; 18
    1824:	80 e4       	ldi	r24, 0x40	; 64
    1826:	1e dc       	rcall	.-1988   	; 0x1064 <TWI_send_string>
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	45 c0       	rjmp	.+138    	; 0x18b6 <USART_DecodeMessageRxFIFO+0xca>
    182c:	c0 90 00 00 	lds	r12, 0x0000
    1830:	d1 2c       	mov	r13, r1
    1832:	96 01       	movw	r18, r12
    1834:	21 50       	subi	r18, 0x01	; 1
    1836:	31 09       	sbc	r19, r1
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	c1 14       	cp	r12, r1
    183e:	d1 04       	cpc	r13, r1
    1840:	11 f0       	breq	.+4      	; 0x1846 <USART_DecodeMessageRxFIFO+0x5a>
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	82 0f       	add	r24, r18
    1848:	93 1f       	adc	r25, r19
    184a:	2d b7       	in	r18, 0x3d	; 61
    184c:	3e b7       	in	r19, 0x3e	; 62
    184e:	28 1b       	sub	r18, r24
    1850:	39 0b       	sbc	r19, r25
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	3e bf       	out	0x3e, r19	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	2d bf       	out	0x3d, r18	; 61
    185c:	8d b7       	in	r24, 0x3d	; 61
    185e:	9e b7       	in	r25, 0x3e	; 62
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	88 2e       	mov	r8, r24
    1864:	99 2e       	mov	r9, r25
    1866:	1c 14       	cp	r1, r12
    1868:	1d 04       	cpc	r1, r13
    186a:	f4 f4       	brge	.+60     	; 0x18a8 <USART_DecodeMessageRxFIFO+0xbc>
    186c:	e8 2e       	mov	r14, r24
    186e:	f9 2e       	mov	r15, r25
    1870:	00 e0       	ldi	r16, 0x00	; 0
    1872:	10 e0       	ldi	r17, 0x00	; 0
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	80 91 12 01 	lds	r24, 0x0112
    187c:	90 91 13 01 	lds	r25, 0x0113
    1880:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1884:	88 23       	and	r24, r24
    1886:	31 f0       	breq	.+12     	; 0x1894 <USART_DecodeMessageRxFIFO+0xa8>
    1888:	68 e2       	ldi	r22, 0x28	; 40
    188a:	72 e1       	ldi	r23, 0x12	; 18
    188c:	80 e4       	ldi	r24, 0x40	; 64
    188e:	ea db       	rcall	.-2092   	; 0x1064 <TWI_send_string>
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	11 c0       	rjmp	.+34     	; 0x18b6 <USART_DecodeMessageRxFIFO+0xca>
    1894:	80 91 00 00 	lds	r24, 0x0000
    1898:	f7 01       	movw	r30, r14
    189a:	81 93       	st	Z+, r24
    189c:	7f 01       	movw	r14, r30
    189e:	0f 5f       	subi	r16, 0xFF	; 255
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	0c 15       	cp	r16, r12
    18a4:	1d 05       	cpc	r17, r13
    18a6:	34 f3       	brlt	.-52     	; 0x1874 <USART_DecodeMessageRxFIFO+0x88>
    18a8:	a6 01       	movw	r20, r12
    18aa:	68 2d       	mov	r22, r8
    18ac:	79 2d       	mov	r23, r9
    18ae:	80 91 1a 11 	lds	r24, 0x111A
    18b2:	1e dc       	rcall	.-1988   	; 0x10f0 <TWI_send_string_fixed_length>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	be be       	out	0x3e, r11	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	ad be       	out	0x3d, r10	; 61
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	9f 90       	pop	r9
    18d6:	8f 90       	pop	r8
    18d8:	08 95       	ret

000018da <USART_DecodeGyroFIFO>:
    18da:	af 92       	push	r10
    18dc:	bf 92       	push	r11
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <USART_DecodeGyroFIFO+0x16>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <USART_DecodeGyroFIFO+0x18>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	80 93 ab 13 	sts	0x13AB, r24
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	80 91 12 01 	lds	r24, 0x0112
    1904:	90 91 13 01 	lds	r25, 0x0113
    1908:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    190c:	88 23       	and	r24, r24
    190e:	31 f0       	breq	.+12     	; 0x191c <USART_DecodeGyroFIFO+0x42>
    1910:	6b e4       	ldi	r22, 0x4B	; 75
    1912:	72 e1       	ldi	r23, 0x12	; 18
    1914:	80 e4       	ldi	r24, 0x40	; 64
    1916:	a6 db       	rcall	.-2228   	; 0x1064 <TWI_send_string>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	73 c0       	rjmp	.+230    	; 0x1a02 <USART_DecodeGyroFIFO+0x128>
    191c:	80 91 00 00 	lds	r24, 0x0000
    1920:	8c 30       	cpi	r24, 0x0C	; 12
    1922:	09 f4       	brne	.+2      	; 0x1926 <USART_DecodeGyroFIFO+0x4c>
    1924:	53 c0       	rjmp	.+166    	; 0x19cc <USART_DecodeGyroFIFO+0xf2>
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	6c c0       	rjmp	.+216    	; 0x1a02 <USART_DecodeGyroFIFO+0x128>
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	80 91 12 01 	lds	r24, 0x0112
    1932:	90 91 13 01 	lds	r25, 0x0113
    1936:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    193a:	88 23       	and	r24, r24
    193c:	31 f0       	breq	.+12     	; 0x194a <USART_DecodeGyroFIFO+0x70>
    193e:	6a e6       	ldi	r22, 0x6A	; 106
    1940:	72 e1       	ldi	r23, 0x12	; 18
    1942:	80 e4       	ldi	r24, 0x40	; 64
    1944:	8f db       	rcall	.-2274   	; 0x1064 <TWI_send_string>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	5c c0       	rjmp	.+184    	; 0x1a02 <USART_DecodeGyroFIFO+0x128>
    194a:	80 91 00 00 	lds	r24, 0x0000
    194e:	f6 01       	movw	r30, r12
    1950:	81 93       	st	Z+, r24
    1952:	6f 01       	movw	r12, r30
    1954:	e0 17       	cp	r30, r16
    1956:	f1 07       	cpc	r31, r17
    1958:	41 f7       	brne	.-48     	; 0x192a <USART_DecodeGyroFIFO+0x50>
    195a:	f1 e0       	ldi	r31, 0x01	; 1
    195c:	af 16       	cp	r10, r31
    195e:	b1 04       	cpc	r11, r1
    1960:	99 f0       	breq	.+38     	; 0x1988 <USART_DecodeGyroFIFO+0xae>
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	a8 16       	cp	r10, r24
    1966:	b1 04       	cpc	r11, r1
    1968:	e1 f0       	breq	.+56     	; 0x19a2 <USART_DecodeGyroFIFO+0xc8>
    196a:	ab 28       	or	r10, r11
    196c:	39 f5       	brne	.+78     	; 0x19bc <USART_DecodeGyroFIFO+0xe2>
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	ab 81       	ldd	r26, Y+3	; 0x03
    1974:	bc 81       	ldd	r27, Y+4	; 0x04
    1976:	80 93 a7 13 	sts	0x13A7, r24
    197a:	90 93 a8 13 	sts	0x13A8, r25
    197e:	a0 93 a9 13 	sts	0x13A9, r26
    1982:	b0 93 aa 13 	sts	0x13AA, r27
    1986:	1e c0       	rjmp	.+60     	; 0x19c4 <USART_DecodeGyroFIFO+0xea>
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	ab 81       	ldd	r26, Y+3	; 0x03
    198e:	bc 81       	ldd	r27, Y+4	; 0x04
    1990:	80 93 a3 13 	sts	0x13A3, r24
    1994:	90 93 a4 13 	sts	0x13A4, r25
    1998:	a0 93 a5 13 	sts	0x13A5, r26
    199c:	b0 93 a6 13 	sts	0x13A6, r27
    19a0:	11 c0       	rjmp	.+34     	; 0x19c4 <USART_DecodeGyroFIFO+0xea>
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	ab 81       	ldd	r26, Y+3	; 0x03
    19a8:	bc 81       	ldd	r27, Y+4	; 0x04
    19aa:	80 93 9f 13 	sts	0x139F, r24
    19ae:	90 93 a0 13 	sts	0x13A0, r25
    19b2:	a0 93 a1 13 	sts	0x13A1, r26
    19b6:	b0 93 a2 13 	sts	0x13A2, r27
    19ba:	18 c0       	rjmp	.+48     	; 0x19ec <USART_DecodeGyroFIFO+0x112>
    19bc:	e3 e0       	ldi	r30, 0x03	; 3
    19be:	ee 16       	cp	r14, r30
    19c0:	f1 04       	cpc	r15, r1
    19c2:	a4 f4       	brge	.+40     	; 0x19ec <USART_DecodeGyroFIFO+0x112>
    19c4:	ff ef       	ldi	r31, 0xFF	; 255
    19c6:	ef 1a       	sub	r14, r31
    19c8:	ff 0a       	sbc	r15, r31
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <USART_DecodeGyroFIFO+0xfe>
    19cc:	ee 24       	eor	r14, r14
    19ce:	e3 94       	inc	r14
    19d0:	f1 2c       	mov	r15, r1
    19d2:	8e 01       	movw	r16, r28
    19d4:	0b 5f       	subi	r16, 0xFB	; 251
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	57 01       	movw	r10, r14
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	a8 1a       	sub	r10, r24
    19de:	b1 08       	sbc	r11, r1
    19e0:	cc 24       	eor	r12, r12
    19e2:	c3 94       	inc	r12
    19e4:	d1 2c       	mov	r13, r1
    19e6:	cc 0e       	add	r12, r28
    19e8:	dd 1e       	adc	r13, r29
    19ea:	9f cf       	rjmp	.-194    	; 0x192a <USART_DecodeGyroFIFO+0x50>
    19ec:	40 91 9f 13 	lds	r20, 0x139F
    19f0:	50 91 a0 13 	lds	r21, 0x13A0
    19f4:	60 91 a1 13 	lds	r22, 0x13A1
    19f8:	70 91 a2 13 	lds	r23, 0x13A2
    19fc:	80 e8       	ldi	r24, 0x80	; 128
    19fe:	b6 db       	rcall	.-2196   	; 0x116c <TWI_send_float>
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	08 95       	ret

00001a20 <USART_DecodeCommandRxFIFO>:
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	80 91 12 01 	lds	r24, 0x0112
    1a2c:	90 91 13 01 	lds	r25, 0x0113
    1a30:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1a34:	88 23       	and	r24, r24
    1a36:	31 f0       	breq	.+12     	; 0x1a44 <USART_DecodeCommandRxFIFO+0x24>
    1a38:	6a e8       	ldi	r22, 0x8A	; 138
    1a3a:	72 e1       	ldi	r23, 0x12	; 18
    1a3c:	80 e4       	ldi	r24, 0x40	; 64
    1a3e:	12 db       	rcall	.-2524   	; 0x1064 <TWI_send_string>
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	45 c0       	rjmp	.+138    	; 0x1ace <USART_DecodeCommandRxFIFO+0xae>
    1a44:	80 91 00 00 	lds	r24, 0x0000
    1a48:	83 30       	cpi	r24, 0x03	; 3
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <USART_DecodeCommandRxFIFO+0x2e>
    1a4c:	3b c0       	rjmp	.+118    	; 0x1ac4 <USART_DecodeCommandRxFIFO+0xa4>
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	80 91 12 01 	lds	r24, 0x0112
    1a56:	90 91 13 01 	lds	r25, 0x0113
    1a5a:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1a5e:	88 23       	and	r24, r24
    1a60:	31 f0       	breq	.+12     	; 0x1a6e <USART_DecodeCommandRxFIFO+0x4e>
    1a62:	6c ea       	ldi	r22, 0xAC	; 172
    1a64:	72 e1       	ldi	r23, 0x12	; 18
    1a66:	80 e4       	ldi	r24, 0x40	; 64
    1a68:	fd da       	rcall	.-2566   	; 0x1064 <TWI_send_string>
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	30 c0       	rjmp	.+96     	; 0x1ace <USART_DecodeCommandRxFIFO+0xae>
    1a6e:	c0 91 00 00 	lds	r28, 0x0000
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	80 91 12 01 	lds	r24, 0x0112
    1a7a:	90 91 13 01 	lds	r25, 0x0113
    1a7e:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1a82:	88 23       	and	r24, r24
    1a84:	31 f0       	breq	.+12     	; 0x1a92 <USART_DecodeCommandRxFIFO+0x72>
    1a86:	64 ed       	ldi	r22, 0xD4	; 212
    1a88:	72 e1       	ldi	r23, 0x12	; 18
    1a8a:	80 e4       	ldi	r24, 0x40	; 64
    1a8c:	eb da       	rcall	.-2602   	; 0x1064 <TWI_send_string>
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	1e c0       	rjmp	.+60     	; 0x1ace <USART_DecodeCommandRxFIFO+0xae>
    1a92:	d0 91 00 00 	lds	r29, 0x0000
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	80 91 12 01 	lds	r24, 0x0112
    1a9e:	90 91 13 01 	lds	r25, 0x0113
    1aa2:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1aa6:	88 23       	and	r24, r24
    1aa8:	31 f0       	breq	.+12     	; 0x1ab6 <USART_DecodeCommandRxFIFO+0x96>
    1aaa:	6b ef       	ldi	r22, 0xFB	; 251
    1aac:	72 e1       	ldi	r23, 0x12	; 18
    1aae:	80 e4       	ldi	r24, 0x40	; 64
    1ab0:	d9 da       	rcall	.-2638   	; 0x1064 <TWI_send_string>
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	0c c0       	rjmp	.+24     	; 0x1ace <USART_DecodeCommandRxFIFO+0xae>
    1ab6:	40 91 00 00 	lds	r20, 0x0000
    1aba:	6d 2f       	mov	r22, r29
    1abc:	8c 2f       	mov	r24, r28
    1abe:	8a da       	rcall	.-2796   	; 0xfd4 <TWI_send_command>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <USART_DecodeCommandRxFIFO+0xae>
    1ac4:	6f e1       	ldi	r22, 0x1F	; 31
    1ac6:	73 e1       	ldi	r23, 0x13	; 19
    1ac8:	80 e4       	ldi	r24, 0x40	; 64
    1aca:	cc da       	rcall	.-2664   	; 0x1064 <TWI_send_string>
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <USART_DecodeValueFIFO>:
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <USART_DecodeValueFIFO+0xe>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <USART_DecodeValueFIFO+0x10>
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	80 91 12 01 	lds	r24, 0x0112
    1af0:	90 91 13 01 	lds	r25, 0x0113
    1af4:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1af8:	88 23       	and	r24, r24
    1afa:	31 f0       	breq	.+12     	; 0x1b08 <USART_DecodeValueFIFO+0x34>
    1afc:	66 e4       	ldi	r22, 0x46	; 70
    1afe:	73 e1       	ldi	r23, 0x13	; 19
    1b00:	80 e4       	ldi	r24, 0x40	; 64
    1b02:	b0 da       	rcall	.-2720   	; 0x1064 <TWI_send_string>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	29 c0       	rjmp	.+82     	; 0x1b5a <USART_DecodeValueFIFO+0x86>
    1b08:	80 91 00 00 	lds	r24, 0x0000
    1b0c:	84 30       	cpi	r24, 0x04	; 4
    1b0e:	11 f5       	brne	.+68     	; 0x1b54 <USART_DecodeValueFIFO+0x80>
    1b10:	8e 01       	movw	r16, r28
    1b12:	0f 5f       	subi	r16, 0xFF	; 255
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	7e 01       	movw	r14, r28
    1b18:	85 e0       	ldi	r24, 0x05	; 5
    1b1a:	e8 0e       	add	r14, r24
    1b1c:	f1 1c       	adc	r15, r1
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	80 91 12 01 	lds	r24, 0x0112
    1b26:	90 91 13 01 	lds	r25, 0x0113
    1b2a:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1b2e:	81 11       	cpse	r24, r1
    1b30:	13 c0       	rjmp	.+38     	; 0x1b58 <USART_DecodeValueFIFO+0x84>
    1b32:	80 91 00 00 	lds	r24, 0x0000
    1b36:	f8 01       	movw	r30, r16
    1b38:	81 93       	st	Z+, r24
    1b3a:	8f 01       	movw	r16, r30
    1b3c:	ee 15       	cp	r30, r14
    1b3e:	ff 05       	cpc	r31, r15
    1b40:	71 f7       	brne	.-36     	; 0x1b1e <USART_DecodeValueFIFO+0x4a>
    1b42:	49 81       	ldd	r20, Y+1	; 0x01
    1b44:	5a 81       	ldd	r21, Y+2	; 0x02
    1b46:	6b 81       	ldd	r22, Y+3	; 0x03
    1b48:	7c 81       	ldd	r23, Y+4	; 0x04
    1b4a:	80 91 1a 11 	lds	r24, 0x111A
    1b4e:	0e db       	rcall	.-2532   	; 0x116c <TWI_send_float>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <USART_DecodeValueFIFO+0x86>
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <USART_DecodeValueFIFO+0x86>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	08 95       	ret

00001b70 <USART_DecodeReadyFIFO>:
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	80 91 12 01 	lds	r24, 0x0112
    1b78:	90 91 13 01 	lds	r25, 0x0113
    1b7c:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1b80:	88 23       	and	r24, r24
    1b82:	31 f0       	breq	.+12     	; 0x1b90 <USART_DecodeReadyFIFO+0x20>
    1b84:	6a e8       	ldi	r22, 0x8A	; 138
    1b86:	72 e1       	ldi	r23, 0x12	; 18
    1b88:	80 e4       	ldi	r24, 0x40	; 64
    1b8a:	6c da       	rcall	.-2856   	; 0x1064 <TWI_send_string>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	08 95       	ret
    1b90:	80 91 00 00 	lds	r24, 0x0000
    1b94:	81 11       	cpse	r24, r1
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <USART_DecodeReadyFIFO+0x32>
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 ad 13 	sts	0x13AD, r24
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	08 95       	ret
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	08 95       	ret

00001ba6 <USART_DecodeTurnDoneRxFIFO>:
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	80 91 12 01 	lds	r24, 0x0112
    1bae:	90 91 13 01 	lds	r25, 0x0113
    1bb2:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1bb6:	88 23       	and	r24, r24
    1bb8:	31 f0       	breq	.+12     	; 0x1bc6 <USART_DecodeTurnDoneRxFIFO+0x20>
    1bba:	66 e6       	ldi	r22, 0x66	; 102
    1bbc:	73 e1       	ldi	r23, 0x13	; 19
    1bbe:	80 e4       	ldi	r24, 0x40	; 64
    1bc0:	51 da       	rcall	.-2910   	; 0x1064 <TWI_send_string>
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	08 95       	ret
    1bc6:	80 91 00 00 	lds	r24, 0x0000
    1bca:	81 11       	cpse	r24, r1
    1bcc:	05 c0       	rjmp	.+10     	; 0x1bd8 <USART_DecodeTurnDoneRxFIFO+0x32>
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	80 93 ac 13 	sts	0x13AC, r24
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	08 95       	ret
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	08 95       	ret

00001bdc <USART_ready>:
    1bdc:	80 91 ad 13 	lds	r24, 0x13AD
    1be0:	88 23       	and	r24, r24
    1be2:	21 f0       	breq	.+8      	; 0x1bec <USART_ready+0x10>
    1be4:	10 92 ad 13 	sts	0x13AD, r1
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	08 95       	ret
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	08 95       	ret

00001bf0 <USART_turn_done>:
    1bf0:	80 91 ac 13 	lds	r24, 0x13AC
    1bf4:	88 23       	and	r24, r24
    1bf6:	21 f0       	breq	.+8      	; 0x1c00 <USART_turn_done+0x10>
    1bf8:	10 92 ac 13 	sts	0x13AC, r1
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	08 95       	ret
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	08 95       	ret

00001c04 <USART_DecodeRxFIFO>:
    1c04:	28 c0       	rjmp	.+80     	; 0x1c56 <USART_DecodeRxFIFO+0x52>
    1c06:	80 91 00 00 	lds	r24, 0x0000
    1c0a:	8d 34       	cpi	r24, 0x4D	; 77
    1c0c:	69 f0       	breq	.+26     	; 0x1c28 <USART_DecodeRxFIFO+0x24>
    1c0e:	28 f4       	brcc	.+10     	; 0x1c1a <USART_DecodeRxFIFO+0x16>
    1c10:	83 34       	cpi	r24, 0x43	; 67
    1c12:	71 f0       	breq	.+28     	; 0x1c30 <USART_DecodeRxFIFO+0x2c>
    1c14:	87 34       	cpi	r24, 0x47	; 71
    1c16:	f9 f4       	brne	.+62     	; 0x1c56 <USART_DecodeRxFIFO+0x52>
    1c18:	17 c0       	rjmp	.+46     	; 0x1c48 <USART_DecodeRxFIFO+0x44>
    1c1a:	84 35       	cpi	r24, 0x54	; 84
    1c1c:	c9 f0       	breq	.+50     	; 0x1c50 <USART_DecodeRxFIFO+0x4c>
    1c1e:	86 35       	cpi	r24, 0x56	; 86
    1c20:	59 f0       	breq	.+22     	; 0x1c38 <USART_DecodeRxFIFO+0x34>
    1c22:	82 35       	cpi	r24, 0x52	; 82
    1c24:	c1 f4       	brne	.+48     	; 0x1c56 <USART_DecodeRxFIFO+0x52>
    1c26:	0c c0       	rjmp	.+24     	; 0x1c40 <USART_DecodeRxFIFO+0x3c>
    1c28:	e1 dd       	rcall	.-1086   	; 0x17ec <USART_DecodeMessageRxFIFO>
    1c2a:	88 23       	and	r24, r24
    1c2c:	a1 f0       	breq	.+40     	; 0x1c56 <USART_DecodeRxFIFO+0x52>
    1c2e:	08 95       	ret
    1c30:	f7 de       	rcall	.-530    	; 0x1a20 <USART_DecodeCommandRxFIFO>
    1c32:	88 23       	and	r24, r24
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <USART_DecodeRxFIFO+0x52>
    1c36:	08 95       	ret
    1c38:	4d df       	rcall	.-358    	; 0x1ad4 <USART_DecodeValueFIFO>
    1c3a:	88 23       	and	r24, r24
    1c3c:	61 f0       	breq	.+24     	; 0x1c56 <USART_DecodeRxFIFO+0x52>
    1c3e:	08 95       	ret
    1c40:	97 df       	rcall	.-210    	; 0x1b70 <USART_DecodeReadyFIFO>
    1c42:	88 23       	and	r24, r24
    1c44:	41 f0       	breq	.+16     	; 0x1c56 <USART_DecodeRxFIFO+0x52>
    1c46:	08 95       	ret
    1c48:	48 de       	rcall	.-880    	; 0x18da <USART_DecodeGyroFIFO>
    1c4a:	88 23       	and	r24, r24
    1c4c:	21 f0       	breq	.+8      	; 0x1c56 <USART_DecodeRxFIFO+0x52>
    1c4e:	08 95       	ret
    1c50:	aa df       	rcall	.-172    	; 0x1ba6 <USART_DecodeTurnDoneRxFIFO>
    1c52:	81 11       	cpse	r24, r1
    1c54:	0a c0       	rjmp	.+20     	; 0x1c6a <USART_DecodeRxFIFO+0x66>
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	80 91 12 01 	lds	r24, 0x0112
    1c5e:	90 91 13 01 	lds	r25, 0x0113
    1c62:	0e 94 1e 02 	call	0x43c	; 0x43c <FifoRead>
    1c66:	88 23       	and	r24, r24
    1c68:	71 f2       	breq	.-100    	; 0x1c06 <USART_DecodeRxFIFO+0x2>
    1c6a:	08 95       	ret

00001c6c <__vector_20>:
}


ISR (USART0_RX_vect)
{
    1c6c:	1f 92       	push	r1
    1c6e:	0f 92       	push	r0
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	0f 92       	push	r0
    1c74:	11 24       	eor	r1, r1
    1c76:	0b b6       	in	r0, 0x3b	; 59
    1c78:	0f 92       	push	r0
    1c7a:	ef 92       	push	r14
    1c7c:	ff 92       	push	r15
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	2f 93       	push	r18
    1c84:	3f 93       	push	r19
    1c86:	4f 93       	push	r20
    1c88:	5f 93       	push	r21
    1c8a:	6f 93       	push	r22
    1c8c:	7f 93       	push	r23
    1c8e:	8f 93       	push	r24
    1c90:	9f 93       	push	r25
    1c92:	af 93       	push	r26
    1c94:	bf 93       	push	r27
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ef 93       	push	r30
    1c9c:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1c9e:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1ca2:	2e 37       	cpi	r18, 0x7E	; 126
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <__vector_20+0x3c>
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    1ca8:	80 91 b0 13 	lds	r24, 0x13B0
    1cac:	90 91 b1 13 	lds	r25, 0x13B1
    1cb0:	84 30       	cpi	r24, 0x04	; 4
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	40 f4       	brcc	.+16     	; 0x1cc6 <__vector_20+0x5a>
    1cb6:	20 91 11 15 	lds	r18, 0x1511
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	2c 5f       	subi	r18, 0xFC	; 252
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	82 17       	cp	r24, r18
    1cc2:	93 07       	cpc	r25, r19
    1cc4:	59 f5       	brne	.+86     	; 0x1d1c <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    1cc6:	80 91 ae 13 	lds	r24, 0x13AE
    1cca:	90 91 af 13 	lds	r25, 0x13AF
    1cce:	89 2b       	or	r24, r25
    1cd0:	21 f0       	breq	.+8      	; 0x1cda <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1cd2:	10 92 af 13 	sts	0x13AF, r1
    1cd6:	10 92 ae 13 	sts	0x13AE, r1
    1cda:	00 e1       	ldi	r16, 0x10	; 16
    1cdc:	15 e1       	ldi	r17, 0x15	; 21
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1cde:	c0 e0       	ldi	r28, 0x00	; 0
    1ce0:	d0 e0       	ldi	r29, 0x00	; 0
    1ce2:	0f 2e       	mov	r0, r31
    1ce4:	f1 e1       	ldi	r31, 0x11	; 17
    1ce6:	ef 2e       	mov	r14, r31
    1ce8:	f5 e1       	ldi	r31, 0x15	; 21
    1cea:	ff 2e       	mov	r15, r31
    1cec:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1cee:	f8 01       	movw	r30, r16
    1cf0:	61 91       	ld	r22, Z+
    1cf2:	8f 01       	movw	r16, r30
    1cf4:	80 91 12 01 	lds	r24, 0x0112
    1cf8:	90 91 13 01 	lds	r25, 0x0113
    1cfc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <FifoWrite>
    1d00:	88 23       	and	r24, r24
    1d02:	21 f0       	breq	.+8      	; 0x1d0c <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1d04:	6a e8       	ldi	r22, 0x8A	; 138
    1d06:	73 e1       	ldi	r23, 0x13	; 19
    1d08:	80 e4       	ldi	r24, 0x40	; 64
    1d0a:	ac d9       	rcall	.-3240   	; 0x1064 <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1d0c:	21 96       	adiw	r28, 0x01	; 1
    1d0e:	f7 01       	movw	r30, r14
    1d10:	80 81       	ld	r24, Z
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 96       	adiw	r24, 0x02	; 2
    1d16:	c8 17       	cp	r28, r24
    1d18:	d9 07       	cpc	r29, r25
    1d1a:	4c f3       	brlt	.-46     	; 0x1cee <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    1d1c:	10 92 b1 13 	sts	0x13B1, r1
    1d20:	10 92 b0 13 	sts	0x13B0, r1
    1d24:	16 c0       	rjmp	.+44     	; 0x1d52 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    1d26:	2d 37       	cpi	r18, 0x7D	; 125
    1d28:	39 f4       	brne	.+14     	; 0x1d38 <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	90 93 af 13 	sts	0x13AF, r25
    1d32:	80 93 ae 13 	sts	0x13AE, r24
    1d36:	0d c0       	rjmp	.+26     	; 0x1d52 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    1d38:	80 91 b0 13 	lds	r24, 0x13B0
    1d3c:	90 91 b1 13 	lds	r25, 0x13B1
    1d40:	fc 01       	movw	r30, r24
    1d42:	e0 5f       	subi	r30, 0xF0	; 240
    1d44:	fa 4e       	sbci	r31, 0xEA	; 234
    1d46:	20 83       	st	Z, r18
		++gRxBufferIndex;
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	90 93 b1 13 	sts	0x13B1, r25
    1d4e:	80 93 b0 13 	sts	0x13B0, r24
	}
	
	
}
    1d52:	ff 91       	pop	r31
    1d54:	ef 91       	pop	r30
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	bf 91       	pop	r27
    1d5c:	af 91       	pop	r26
    1d5e:	9f 91       	pop	r25
    1d60:	8f 91       	pop	r24
    1d62:	7f 91       	pop	r23
    1d64:	6f 91       	pop	r22
    1d66:	5f 91       	pop	r21
    1d68:	4f 91       	pop	r20
    1d6a:	3f 91       	pop	r19
    1d6c:	2f 91       	pop	r18
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	0f 90       	pop	r0
    1d78:	0b be       	out	0x3b, r0	; 59
    1d7a:	0f 90       	pop	r0
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	0f 90       	pop	r0
    1d80:	1f 90       	pop	r1
    1d82:	18 95       	reti

00001d84 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1d84:	80 93 15 17 	sts	0x1715, r24
	gTxPayload[1] = rotation;
    1d88:	60 93 16 17 	sts	0x1716, r22
	gTxPayload[2] = speed;
    1d8c:	40 93 17 17 	sts	0x1717, r20
	
	
	USART_SendPacket('C', 3);
    1d90:	63 e0       	ldi	r22, 0x03	; 3
    1d92:	83 e4       	ldi	r24, 0x43	; 67
    1d94:	aa cc       	rjmp	.-1708   	; 0x16ea <USART_SendPacket>

00001d96 <__subsf3>:
    1d96:	50 58       	subi	r21, 0x80	; 128

00001d98 <__addsf3>:
    1d98:	bb 27       	eor	r27, r27
    1d9a:	aa 27       	eor	r26, r26
    1d9c:	0e d0       	rcall	.+28     	; 0x1dba <__addsf3x>
    1d9e:	ed c1       	rjmp	.+986    	; 0x217a <__fp_round>
    1da0:	b6 d1       	rcall	.+876    	; 0x210e <__fp_pscA>
    1da2:	30 f0       	brcs	.+12     	; 0x1db0 <__addsf3+0x18>
    1da4:	bb d1       	rcall	.+886    	; 0x211c <__fp_pscB>
    1da6:	20 f0       	brcs	.+8      	; 0x1db0 <__addsf3+0x18>
    1da8:	31 f4       	brne	.+12     	; 0x1db6 <__addsf3+0x1e>
    1daa:	9f 3f       	cpi	r25, 0xFF	; 255
    1dac:	11 f4       	brne	.+4      	; 0x1db2 <__addsf3+0x1a>
    1dae:	1e f4       	brtc	.+6      	; 0x1db6 <__addsf3+0x1e>
    1db0:	86 c1       	rjmp	.+780    	; 0x20be <__fp_nan>
    1db2:	0e f4       	brtc	.+2      	; 0x1db6 <__addsf3+0x1e>
    1db4:	e0 95       	com	r30
    1db6:	e7 fb       	bst	r30, 7
    1db8:	7c c1       	rjmp	.+760    	; 0x20b2 <__fp_inf>

00001dba <__addsf3x>:
    1dba:	e9 2f       	mov	r30, r25
    1dbc:	00 d2       	rcall	.+1024   	; 0x21be <__fp_split3>
    1dbe:	80 f3       	brcs	.-32     	; 0x1da0 <__addsf3+0x8>
    1dc0:	ba 17       	cp	r27, r26
    1dc2:	62 07       	cpc	r22, r18
    1dc4:	73 07       	cpc	r23, r19
    1dc6:	84 07       	cpc	r24, r20
    1dc8:	95 07       	cpc	r25, r21
    1dca:	18 f0       	brcs	.+6      	; 0x1dd2 <__addsf3x+0x18>
    1dcc:	71 f4       	brne	.+28     	; 0x1dea <__addsf3x+0x30>
    1dce:	9e f5       	brtc	.+102    	; 0x1e36 <__addsf3x+0x7c>
    1dd0:	18 c2       	rjmp	.+1072   	; 0x2202 <__fp_zero>
    1dd2:	0e f4       	brtc	.+2      	; 0x1dd6 <__addsf3x+0x1c>
    1dd4:	e0 95       	com	r30
    1dd6:	0b 2e       	mov	r0, r27
    1dd8:	ba 2f       	mov	r27, r26
    1dda:	a0 2d       	mov	r26, r0
    1ddc:	0b 01       	movw	r0, r22
    1dde:	b9 01       	movw	r22, r18
    1de0:	90 01       	movw	r18, r0
    1de2:	0c 01       	movw	r0, r24
    1de4:	ca 01       	movw	r24, r20
    1de6:	a0 01       	movw	r20, r0
    1de8:	11 24       	eor	r1, r1
    1dea:	ff 27       	eor	r31, r31
    1dec:	59 1b       	sub	r21, r25
    1dee:	99 f0       	breq	.+38     	; 0x1e16 <__addsf3x+0x5c>
    1df0:	59 3f       	cpi	r21, 0xF9	; 249
    1df2:	50 f4       	brcc	.+20     	; 0x1e08 <__addsf3x+0x4e>
    1df4:	50 3e       	cpi	r21, 0xE0	; 224
    1df6:	68 f1       	brcs	.+90     	; 0x1e52 <__addsf3x+0x98>
    1df8:	1a 16       	cp	r1, r26
    1dfa:	f0 40       	sbci	r31, 0x00	; 0
    1dfc:	a2 2f       	mov	r26, r18
    1dfe:	23 2f       	mov	r18, r19
    1e00:	34 2f       	mov	r19, r20
    1e02:	44 27       	eor	r20, r20
    1e04:	58 5f       	subi	r21, 0xF8	; 248
    1e06:	f3 cf       	rjmp	.-26     	; 0x1dee <__addsf3x+0x34>
    1e08:	46 95       	lsr	r20
    1e0a:	37 95       	ror	r19
    1e0c:	27 95       	ror	r18
    1e0e:	a7 95       	ror	r26
    1e10:	f0 40       	sbci	r31, 0x00	; 0
    1e12:	53 95       	inc	r21
    1e14:	c9 f7       	brne	.-14     	; 0x1e08 <__addsf3x+0x4e>
    1e16:	7e f4       	brtc	.+30     	; 0x1e36 <__addsf3x+0x7c>
    1e18:	1f 16       	cp	r1, r31
    1e1a:	ba 0b       	sbc	r27, r26
    1e1c:	62 0b       	sbc	r22, r18
    1e1e:	73 0b       	sbc	r23, r19
    1e20:	84 0b       	sbc	r24, r20
    1e22:	ba f0       	brmi	.+46     	; 0x1e52 <__addsf3x+0x98>
    1e24:	91 50       	subi	r25, 0x01	; 1
    1e26:	a1 f0       	breq	.+40     	; 0x1e50 <__addsf3x+0x96>
    1e28:	ff 0f       	add	r31, r31
    1e2a:	bb 1f       	adc	r27, r27
    1e2c:	66 1f       	adc	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	88 1f       	adc	r24, r24
    1e32:	c2 f7       	brpl	.-16     	; 0x1e24 <__addsf3x+0x6a>
    1e34:	0e c0       	rjmp	.+28     	; 0x1e52 <__addsf3x+0x98>
    1e36:	ba 0f       	add	r27, r26
    1e38:	62 1f       	adc	r22, r18
    1e3a:	73 1f       	adc	r23, r19
    1e3c:	84 1f       	adc	r24, r20
    1e3e:	48 f4       	brcc	.+18     	; 0x1e52 <__addsf3x+0x98>
    1e40:	87 95       	ror	r24
    1e42:	77 95       	ror	r23
    1e44:	67 95       	ror	r22
    1e46:	b7 95       	ror	r27
    1e48:	f7 95       	ror	r31
    1e4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e4c:	08 f0       	brcs	.+2      	; 0x1e50 <__addsf3x+0x96>
    1e4e:	b3 cf       	rjmp	.-154    	; 0x1db6 <__addsf3+0x1e>
    1e50:	93 95       	inc	r25
    1e52:	88 0f       	add	r24, r24
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <__addsf3x+0x9e>
    1e56:	99 27       	eor	r25, r25
    1e58:	ee 0f       	add	r30, r30
    1e5a:	97 95       	ror	r25
    1e5c:	87 95       	ror	r24
    1e5e:	08 95       	ret

00001e60 <atan>:
    1e60:	df 93       	push	r29
    1e62:	dd 27       	eor	r29, r29
    1e64:	b9 2f       	mov	r27, r25
    1e66:	bf 77       	andi	r27, 0x7F	; 127
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	16 16       	cp	r1, r22
    1e6e:	17 06       	cpc	r1, r23
    1e70:	48 07       	cpc	r20, r24
    1e72:	5b 07       	cpc	r21, r27
    1e74:	10 f4       	brcc	.+4      	; 0x1e7a <atan+0x1a>
    1e76:	d9 2f       	mov	r29, r25
    1e78:	cf d1       	rcall	.+926    	; 0x2218 <inverse>
    1e7a:	9f 93       	push	r25
    1e7c:	8f 93       	push	r24
    1e7e:	7f 93       	push	r23
    1e80:	6f 93       	push	r22
    1e82:	34 d2       	rcall	.+1128   	; 0x22ec <square>
    1e84:	ec e8       	ldi	r30, 0x8C	; 140
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	1d d1       	rcall	.+570    	; 0x20c4 <__fp_powser>
    1e8a:	77 d1       	rcall	.+750    	; 0x217a <__fp_round>
    1e8c:	2f 91       	pop	r18
    1e8e:	3f 91       	pop	r19
    1e90:	4f 91       	pop	r20
    1e92:	5f 91       	pop	r21
    1e94:	d4 d1       	rcall	.+936    	; 0x223e <__mulsf3x>
    1e96:	dd 23       	and	r29, r29
    1e98:	49 f0       	breq	.+18     	; 0x1eac <atan+0x4c>
    1e9a:	90 58       	subi	r25, 0x80	; 128
    1e9c:	a2 ea       	ldi	r26, 0xA2	; 162
    1e9e:	2a ed       	ldi	r18, 0xDA	; 218
    1ea0:	3f e0       	ldi	r19, 0x0F	; 15
    1ea2:	49 ec       	ldi	r20, 0xC9	; 201
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	d0 78       	andi	r29, 0x80	; 128
    1ea8:	5d 27       	eor	r21, r29
    1eaa:	87 df       	rcall	.-242    	; 0x1dba <__addsf3x>
    1eac:	df 91       	pop	r29
    1eae:	65 c1       	rjmp	.+714    	; 0x217a <__fp_round>

00001eb0 <__cmpsf2>:
    1eb0:	dc d0       	rcall	.+440    	; 0x206a <__fp_cmp>
    1eb2:	08 f4       	brcc	.+2      	; 0x1eb6 <__cmpsf2+0x6>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	08 95       	ret

00001eb8 <cos>:
    1eb8:	39 d1       	rcall	.+626    	; 0x212c <__fp_rempio2>
    1eba:	e3 95       	inc	r30
    1ebc:	6f c1       	rjmp	.+734    	; 0x219c <__fp_sinus>

00001ebe <__divsf3>:
    1ebe:	0c d0       	rcall	.+24     	; 0x1ed8 <__divsf3x>
    1ec0:	5c c1       	rjmp	.+696    	; 0x217a <__fp_round>
    1ec2:	2c d1       	rcall	.+600    	; 0x211c <__fp_pscB>
    1ec4:	40 f0       	brcs	.+16     	; 0x1ed6 <__divsf3+0x18>
    1ec6:	23 d1       	rcall	.+582    	; 0x210e <__fp_pscA>
    1ec8:	30 f0       	brcs	.+12     	; 0x1ed6 <__divsf3+0x18>
    1eca:	21 f4       	brne	.+8      	; 0x1ed4 <__divsf3+0x16>
    1ecc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ece:	19 f0       	breq	.+6      	; 0x1ed6 <__divsf3+0x18>
    1ed0:	f0 c0       	rjmp	.+480    	; 0x20b2 <__fp_inf>
    1ed2:	51 11       	cpse	r21, r1
    1ed4:	97 c1       	rjmp	.+814    	; 0x2204 <__fp_szero>
    1ed6:	f3 c0       	rjmp	.+486    	; 0x20be <__fp_nan>

00001ed8 <__divsf3x>:
    1ed8:	72 d1       	rcall	.+740    	; 0x21be <__fp_split3>
    1eda:	98 f3       	brcs	.-26     	; 0x1ec2 <__divsf3+0x4>

00001edc <__divsf3_pse>:
    1edc:	99 23       	and	r25, r25
    1ede:	c9 f3       	breq	.-14     	; 0x1ed2 <__divsf3+0x14>
    1ee0:	55 23       	and	r21, r21
    1ee2:	b1 f3       	breq	.-20     	; 0x1ed0 <__divsf3+0x12>
    1ee4:	95 1b       	sub	r25, r21
    1ee6:	55 0b       	sbc	r21, r21
    1ee8:	bb 27       	eor	r27, r27
    1eea:	aa 27       	eor	r26, r26
    1eec:	62 17       	cp	r22, r18
    1eee:	73 07       	cpc	r23, r19
    1ef0:	84 07       	cpc	r24, r20
    1ef2:	38 f0       	brcs	.+14     	; 0x1f02 <__divsf3_pse+0x26>
    1ef4:	9f 5f       	subi	r25, 0xFF	; 255
    1ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	44 1f       	adc	r20, r20
    1efe:	aa 1f       	adc	r26, r26
    1f00:	a9 f3       	breq	.-22     	; 0x1eec <__divsf3_pse+0x10>
    1f02:	33 d0       	rcall	.+102    	; 0x1f6a <__divsf3_pse+0x8e>
    1f04:	0e 2e       	mov	r0, r30
    1f06:	3a f0       	brmi	.+14     	; 0x1f16 <__divsf3_pse+0x3a>
    1f08:	e0 e8       	ldi	r30, 0x80	; 128
    1f0a:	30 d0       	rcall	.+96     	; 0x1f6c <__divsf3_pse+0x90>
    1f0c:	91 50       	subi	r25, 0x01	; 1
    1f0e:	50 40       	sbci	r21, 0x00	; 0
    1f10:	e6 95       	lsr	r30
    1f12:	00 1c       	adc	r0, r0
    1f14:	ca f7       	brpl	.-14     	; 0x1f08 <__divsf3_pse+0x2c>
    1f16:	29 d0       	rcall	.+82     	; 0x1f6a <__divsf3_pse+0x8e>
    1f18:	fe 2f       	mov	r31, r30
    1f1a:	27 d0       	rcall	.+78     	; 0x1f6a <__divsf3_pse+0x8e>
    1f1c:	66 0f       	add	r22, r22
    1f1e:	77 1f       	adc	r23, r23
    1f20:	88 1f       	adc	r24, r24
    1f22:	bb 1f       	adc	r27, r27
    1f24:	26 17       	cp	r18, r22
    1f26:	37 07       	cpc	r19, r23
    1f28:	48 07       	cpc	r20, r24
    1f2a:	ab 07       	cpc	r26, r27
    1f2c:	b0 e8       	ldi	r27, 0x80	; 128
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <__divsf3_pse+0x56>
    1f30:	bb 0b       	sbc	r27, r27
    1f32:	80 2d       	mov	r24, r0
    1f34:	bf 01       	movw	r22, r30
    1f36:	ff 27       	eor	r31, r31
    1f38:	93 58       	subi	r25, 0x83	; 131
    1f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3c:	2a f0       	brmi	.+10     	; 0x1f48 <__divsf3_pse+0x6c>
    1f3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f40:	51 05       	cpc	r21, r1
    1f42:	68 f0       	brcs	.+26     	; 0x1f5e <__divsf3_pse+0x82>
    1f44:	b6 c0       	rjmp	.+364    	; 0x20b2 <__fp_inf>
    1f46:	5e c1       	rjmp	.+700    	; 0x2204 <__fp_szero>
    1f48:	5f 3f       	cpi	r21, 0xFF	; 255
    1f4a:	ec f3       	brlt	.-6      	; 0x1f46 <__divsf3_pse+0x6a>
    1f4c:	98 3e       	cpi	r25, 0xE8	; 232
    1f4e:	dc f3       	brlt	.-10     	; 0x1f46 <__divsf3_pse+0x6a>
    1f50:	86 95       	lsr	r24
    1f52:	77 95       	ror	r23
    1f54:	67 95       	ror	r22
    1f56:	b7 95       	ror	r27
    1f58:	f7 95       	ror	r31
    1f5a:	9f 5f       	subi	r25, 0xFF	; 255
    1f5c:	c9 f7       	brne	.-14     	; 0x1f50 <__divsf3_pse+0x74>
    1f5e:	88 0f       	add	r24, r24
    1f60:	91 1d       	adc	r25, r1
    1f62:	96 95       	lsr	r25
    1f64:	87 95       	ror	r24
    1f66:	97 f9       	bld	r25, 7
    1f68:	08 95       	ret
    1f6a:	e1 e0       	ldi	r30, 0x01	; 1
    1f6c:	66 0f       	add	r22, r22
    1f6e:	77 1f       	adc	r23, r23
    1f70:	88 1f       	adc	r24, r24
    1f72:	bb 1f       	adc	r27, r27
    1f74:	62 17       	cp	r22, r18
    1f76:	73 07       	cpc	r23, r19
    1f78:	84 07       	cpc	r24, r20
    1f7a:	ba 07       	cpc	r27, r26
    1f7c:	20 f0       	brcs	.+8      	; 0x1f86 <__divsf3_pse+0xaa>
    1f7e:	62 1b       	sub	r22, r18
    1f80:	73 0b       	sbc	r23, r19
    1f82:	84 0b       	sbc	r24, r20
    1f84:	ba 0b       	sbc	r27, r26
    1f86:	ee 1f       	adc	r30, r30
    1f88:	88 f7       	brcc	.-30     	; 0x1f6c <__divsf3_pse+0x90>
    1f8a:	e0 95       	com	r30
    1f8c:	08 95       	ret

00001f8e <__fixsfsi>:
    1f8e:	04 d0       	rcall	.+8      	; 0x1f98 <__fixunssfsi>
    1f90:	68 94       	set
    1f92:	b1 11       	cpse	r27, r1
    1f94:	37 c1       	rjmp	.+622    	; 0x2204 <__fp_szero>
    1f96:	08 95       	ret

00001f98 <__fixunssfsi>:
    1f98:	1a d1       	rcall	.+564    	; 0x21ce <__fp_splitA>
    1f9a:	88 f0       	brcs	.+34     	; 0x1fbe <__fixunssfsi+0x26>
    1f9c:	9f 57       	subi	r25, 0x7F	; 127
    1f9e:	90 f0       	brcs	.+36     	; 0x1fc4 <__fixunssfsi+0x2c>
    1fa0:	b9 2f       	mov	r27, r25
    1fa2:	99 27       	eor	r25, r25
    1fa4:	b7 51       	subi	r27, 0x17	; 23
    1fa6:	a0 f0       	brcs	.+40     	; 0x1fd0 <__fixunssfsi+0x38>
    1fa8:	d1 f0       	breq	.+52     	; 0x1fde <__fixunssfsi+0x46>
    1faa:	66 0f       	add	r22, r22
    1fac:	77 1f       	adc	r23, r23
    1fae:	88 1f       	adc	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	1a f0       	brmi	.+6      	; 0x1fba <__fixunssfsi+0x22>
    1fb4:	ba 95       	dec	r27
    1fb6:	c9 f7       	brne	.-14     	; 0x1faa <__fixunssfsi+0x12>
    1fb8:	12 c0       	rjmp	.+36     	; 0x1fde <__fixunssfsi+0x46>
    1fba:	b1 30       	cpi	r27, 0x01	; 1
    1fbc:	81 f0       	breq	.+32     	; 0x1fde <__fixunssfsi+0x46>
    1fbe:	21 d1       	rcall	.+578    	; 0x2202 <__fp_zero>
    1fc0:	b1 e0       	ldi	r27, 0x01	; 1
    1fc2:	08 95       	ret
    1fc4:	1e c1       	rjmp	.+572    	; 0x2202 <__fp_zero>
    1fc6:	67 2f       	mov	r22, r23
    1fc8:	78 2f       	mov	r23, r24
    1fca:	88 27       	eor	r24, r24
    1fcc:	b8 5f       	subi	r27, 0xF8	; 248
    1fce:	39 f0       	breq	.+14     	; 0x1fde <__fixunssfsi+0x46>
    1fd0:	b9 3f       	cpi	r27, 0xF9	; 249
    1fd2:	cc f3       	brlt	.-14     	; 0x1fc6 <__fixunssfsi+0x2e>
    1fd4:	86 95       	lsr	r24
    1fd6:	77 95       	ror	r23
    1fd8:	67 95       	ror	r22
    1fda:	b3 95       	inc	r27
    1fdc:	d9 f7       	brne	.-10     	; 0x1fd4 <__fixunssfsi+0x3c>
    1fde:	3e f4       	brtc	.+14     	; 0x1fee <__fixunssfsi+0x56>
    1fe0:	90 95       	com	r25
    1fe2:	80 95       	com	r24
    1fe4:	70 95       	com	r23
    1fe6:	61 95       	neg	r22
    1fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fea:	8f 4f       	sbci	r24, 0xFF	; 255
    1fec:	9f 4f       	sbci	r25, 0xFF	; 255
    1fee:	08 95       	ret

00001ff0 <__floatunsisf>:
    1ff0:	e8 94       	clt
    1ff2:	09 c0       	rjmp	.+18     	; 0x2006 <__floatsisf+0x12>

00001ff4 <__floatsisf>:
    1ff4:	97 fb       	bst	r25, 7
    1ff6:	3e f4       	brtc	.+14     	; 0x2006 <__floatsisf+0x12>
    1ff8:	90 95       	com	r25
    1ffa:	80 95       	com	r24
    1ffc:	70 95       	com	r23
    1ffe:	61 95       	neg	r22
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	8f 4f       	sbci	r24, 0xFF	; 255
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	99 23       	and	r25, r25
    2008:	a9 f0       	breq	.+42     	; 0x2034 <__floatsisf+0x40>
    200a:	f9 2f       	mov	r31, r25
    200c:	96 e9       	ldi	r25, 0x96	; 150
    200e:	bb 27       	eor	r27, r27
    2010:	93 95       	inc	r25
    2012:	f6 95       	lsr	r31
    2014:	87 95       	ror	r24
    2016:	77 95       	ror	r23
    2018:	67 95       	ror	r22
    201a:	b7 95       	ror	r27
    201c:	f1 11       	cpse	r31, r1
    201e:	f8 cf       	rjmp	.-16     	; 0x2010 <__floatsisf+0x1c>
    2020:	fa f4       	brpl	.+62     	; 0x2060 <__floatsisf+0x6c>
    2022:	bb 0f       	add	r27, r27
    2024:	11 f4       	brne	.+4      	; 0x202a <__floatsisf+0x36>
    2026:	60 ff       	sbrs	r22, 0
    2028:	1b c0       	rjmp	.+54     	; 0x2060 <__floatsisf+0x6c>
    202a:	6f 5f       	subi	r22, 0xFF	; 255
    202c:	7f 4f       	sbci	r23, 0xFF	; 255
    202e:	8f 4f       	sbci	r24, 0xFF	; 255
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	16 c0       	rjmp	.+44     	; 0x2060 <__floatsisf+0x6c>
    2034:	88 23       	and	r24, r24
    2036:	11 f0       	breq	.+4      	; 0x203c <__floatsisf+0x48>
    2038:	96 e9       	ldi	r25, 0x96	; 150
    203a:	11 c0       	rjmp	.+34     	; 0x205e <__floatsisf+0x6a>
    203c:	77 23       	and	r23, r23
    203e:	21 f0       	breq	.+8      	; 0x2048 <__floatsisf+0x54>
    2040:	9e e8       	ldi	r25, 0x8E	; 142
    2042:	87 2f       	mov	r24, r23
    2044:	76 2f       	mov	r23, r22
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <__floatsisf+0x5e>
    2048:	66 23       	and	r22, r22
    204a:	71 f0       	breq	.+28     	; 0x2068 <__floatsisf+0x74>
    204c:	96 e8       	ldi	r25, 0x86	; 134
    204e:	86 2f       	mov	r24, r22
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	2a f0       	brmi	.+10     	; 0x2060 <__floatsisf+0x6c>
    2056:	9a 95       	dec	r25
    2058:	66 0f       	add	r22, r22
    205a:	77 1f       	adc	r23, r23
    205c:	88 1f       	adc	r24, r24
    205e:	da f7       	brpl	.-10     	; 0x2056 <__floatsisf+0x62>
    2060:	88 0f       	add	r24, r24
    2062:	96 95       	lsr	r25
    2064:	87 95       	ror	r24
    2066:	97 f9       	bld	r25, 7
    2068:	08 95       	ret

0000206a <__fp_cmp>:
    206a:	99 0f       	add	r25, r25
    206c:	00 08       	sbc	r0, r0
    206e:	55 0f       	add	r21, r21
    2070:	aa 0b       	sbc	r26, r26
    2072:	e0 e8       	ldi	r30, 0x80	; 128
    2074:	fe ef       	ldi	r31, 0xFE	; 254
    2076:	16 16       	cp	r1, r22
    2078:	17 06       	cpc	r1, r23
    207a:	e8 07       	cpc	r30, r24
    207c:	f9 07       	cpc	r31, r25
    207e:	c0 f0       	brcs	.+48     	; 0x20b0 <__fp_cmp+0x46>
    2080:	12 16       	cp	r1, r18
    2082:	13 06       	cpc	r1, r19
    2084:	e4 07       	cpc	r30, r20
    2086:	f5 07       	cpc	r31, r21
    2088:	98 f0       	brcs	.+38     	; 0x20b0 <__fp_cmp+0x46>
    208a:	62 1b       	sub	r22, r18
    208c:	73 0b       	sbc	r23, r19
    208e:	84 0b       	sbc	r24, r20
    2090:	95 0b       	sbc	r25, r21
    2092:	39 f4       	brne	.+14     	; 0x20a2 <__fp_cmp+0x38>
    2094:	0a 26       	eor	r0, r26
    2096:	61 f0       	breq	.+24     	; 0x20b0 <__fp_cmp+0x46>
    2098:	23 2b       	or	r18, r19
    209a:	24 2b       	or	r18, r20
    209c:	25 2b       	or	r18, r21
    209e:	21 f4       	brne	.+8      	; 0x20a8 <__fp_cmp+0x3e>
    20a0:	08 95       	ret
    20a2:	0a 26       	eor	r0, r26
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <__fp_cmp+0x3e>
    20a6:	a1 40       	sbci	r26, 0x01	; 1
    20a8:	a6 95       	lsr	r26
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	81 1d       	adc	r24, r1
    20ae:	81 1d       	adc	r24, r1
    20b0:	08 95       	ret

000020b2 <__fp_inf>:
    20b2:	97 f9       	bld	r25, 7
    20b4:	9f 67       	ori	r25, 0x7F	; 127
    20b6:	80 e8       	ldi	r24, 0x80	; 128
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	08 95       	ret

000020be <__fp_nan>:
    20be:	9f ef       	ldi	r25, 0xFF	; 255
    20c0:	80 ec       	ldi	r24, 0xC0	; 192
    20c2:	08 95       	ret

000020c4 <__fp_powser>:
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	1f 93       	push	r17
    20ca:	0f 93       	push	r16
    20cc:	ff 92       	push	r15
    20ce:	ef 92       	push	r14
    20d0:	df 92       	push	r13
    20d2:	7b 01       	movw	r14, r22
    20d4:	8c 01       	movw	r16, r24
    20d6:	68 94       	set
    20d8:	05 c0       	rjmp	.+10     	; 0x20e4 <__fp_powser+0x20>
    20da:	da 2e       	mov	r13, r26
    20dc:	ef 01       	movw	r28, r30
    20de:	af d0       	rcall	.+350    	; 0x223e <__mulsf3x>
    20e0:	fe 01       	movw	r30, r28
    20e2:	e8 94       	clt
    20e4:	a5 91       	lpm	r26, Z+
    20e6:	25 91       	lpm	r18, Z+
    20e8:	35 91       	lpm	r19, Z+
    20ea:	45 91       	lpm	r20, Z+
    20ec:	55 91       	lpm	r21, Z+
    20ee:	ae f3       	brts	.-22     	; 0x20da <__fp_powser+0x16>
    20f0:	ef 01       	movw	r28, r30
    20f2:	63 de       	rcall	.-826    	; 0x1dba <__addsf3x>
    20f4:	fe 01       	movw	r30, r28
    20f6:	97 01       	movw	r18, r14
    20f8:	a8 01       	movw	r20, r16
    20fa:	da 94       	dec	r13
    20fc:	79 f7       	brne	.-34     	; 0x20dc <__fp_powser+0x18>
    20fe:	df 90       	pop	r13
    2100:	ef 90       	pop	r14
    2102:	ff 90       	pop	r15
    2104:	0f 91       	pop	r16
    2106:	1f 91       	pop	r17
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <__fp_pscA>:
    210e:	00 24       	eor	r0, r0
    2110:	0a 94       	dec	r0
    2112:	16 16       	cp	r1, r22
    2114:	17 06       	cpc	r1, r23
    2116:	18 06       	cpc	r1, r24
    2118:	09 06       	cpc	r0, r25
    211a:	08 95       	ret

0000211c <__fp_pscB>:
    211c:	00 24       	eor	r0, r0
    211e:	0a 94       	dec	r0
    2120:	12 16       	cp	r1, r18
    2122:	13 06       	cpc	r1, r19
    2124:	14 06       	cpc	r1, r20
    2126:	05 06       	cpc	r0, r21
    2128:	08 95       	ret
    212a:	c9 cf       	rjmp	.-110    	; 0x20be <__fp_nan>

0000212c <__fp_rempio2>:
    212c:	50 d0       	rcall	.+160    	; 0x21ce <__fp_splitA>
    212e:	e8 f3       	brcs	.-6      	; 0x212a <__fp_pscB+0xe>
    2130:	e8 94       	clt
    2132:	e0 e0       	ldi	r30, 0x00	; 0
    2134:	bb 27       	eor	r27, r27
    2136:	9f 57       	subi	r25, 0x7F	; 127
    2138:	f0 f0       	brcs	.+60     	; 0x2176 <__fp_rempio2+0x4a>
    213a:	2a ed       	ldi	r18, 0xDA	; 218
    213c:	3f e0       	ldi	r19, 0x0F	; 15
    213e:	49 ec       	ldi	r20, 0xC9	; 201
    2140:	06 c0       	rjmp	.+12     	; 0x214e <__fp_rempio2+0x22>
    2142:	ee 0f       	add	r30, r30
    2144:	bb 0f       	add	r27, r27
    2146:	66 1f       	adc	r22, r22
    2148:	77 1f       	adc	r23, r23
    214a:	88 1f       	adc	r24, r24
    214c:	28 f0       	brcs	.+10     	; 0x2158 <__fp_rempio2+0x2c>
    214e:	b2 3a       	cpi	r27, 0xA2	; 162
    2150:	62 07       	cpc	r22, r18
    2152:	73 07       	cpc	r23, r19
    2154:	84 07       	cpc	r24, r20
    2156:	28 f0       	brcs	.+10     	; 0x2162 <__fp_rempio2+0x36>
    2158:	b2 5a       	subi	r27, 0xA2	; 162
    215a:	62 0b       	sbc	r22, r18
    215c:	73 0b       	sbc	r23, r19
    215e:	84 0b       	sbc	r24, r20
    2160:	e3 95       	inc	r30
    2162:	9a 95       	dec	r25
    2164:	72 f7       	brpl	.-36     	; 0x2142 <__fp_rempio2+0x16>
    2166:	80 38       	cpi	r24, 0x80	; 128
    2168:	30 f4       	brcc	.+12     	; 0x2176 <__fp_rempio2+0x4a>
    216a:	9a 95       	dec	r25
    216c:	bb 0f       	add	r27, r27
    216e:	66 1f       	adc	r22, r22
    2170:	77 1f       	adc	r23, r23
    2172:	88 1f       	adc	r24, r24
    2174:	d2 f7       	brpl	.-12     	; 0x216a <__fp_rempio2+0x3e>
    2176:	90 48       	sbci	r25, 0x80	; 128
    2178:	be c0       	rjmp	.+380    	; 0x22f6 <__fp_mpack_finite>

0000217a <__fp_round>:
    217a:	09 2e       	mov	r0, r25
    217c:	03 94       	inc	r0
    217e:	00 0c       	add	r0, r0
    2180:	11 f4       	brne	.+4      	; 0x2186 <__fp_round+0xc>
    2182:	88 23       	and	r24, r24
    2184:	52 f0       	brmi	.+20     	; 0x219a <__fp_round+0x20>
    2186:	bb 0f       	add	r27, r27
    2188:	40 f4       	brcc	.+16     	; 0x219a <__fp_round+0x20>
    218a:	bf 2b       	or	r27, r31
    218c:	11 f4       	brne	.+4      	; 0x2192 <__fp_round+0x18>
    218e:	60 ff       	sbrs	r22, 0
    2190:	04 c0       	rjmp	.+8      	; 0x219a <__fp_round+0x20>
    2192:	6f 5f       	subi	r22, 0xFF	; 255
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	8f 4f       	sbci	r24, 0xFF	; 255
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	08 95       	ret

0000219c <__fp_sinus>:
    219c:	ef 93       	push	r30
    219e:	e0 ff       	sbrs	r30, 0
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <__fp_sinus+0x12>
    21a2:	a2 ea       	ldi	r26, 0xA2	; 162
    21a4:	2a ed       	ldi	r18, 0xDA	; 218
    21a6:	3f e0       	ldi	r19, 0x0F	; 15
    21a8:	49 ec       	ldi	r20, 0xC9	; 201
    21aa:	5f eb       	ldi	r21, 0xBF	; 191
    21ac:	06 de       	rcall	.-1012   	; 0x1dba <__addsf3x>
    21ae:	e5 df       	rcall	.-54     	; 0x217a <__fp_round>
    21b0:	0f 90       	pop	r0
    21b2:	03 94       	inc	r0
    21b4:	01 fc       	sbrc	r0, 1
    21b6:	90 58       	subi	r25, 0x80	; 128
    21b8:	e9 eb       	ldi	r30, 0xB9	; 185
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	a8 c0       	rjmp	.+336    	; 0x230e <__fp_powsodd>

000021be <__fp_split3>:
    21be:	57 fd       	sbrc	r21, 7
    21c0:	90 58       	subi	r25, 0x80	; 128
    21c2:	44 0f       	add	r20, r20
    21c4:	55 1f       	adc	r21, r21
    21c6:	59 f0       	breq	.+22     	; 0x21de <__fp_splitA+0x10>
    21c8:	5f 3f       	cpi	r21, 0xFF	; 255
    21ca:	71 f0       	breq	.+28     	; 0x21e8 <__fp_splitA+0x1a>
    21cc:	47 95       	ror	r20

000021ce <__fp_splitA>:
    21ce:	88 0f       	add	r24, r24
    21d0:	97 fb       	bst	r25, 7
    21d2:	99 1f       	adc	r25, r25
    21d4:	61 f0       	breq	.+24     	; 0x21ee <__fp_splitA+0x20>
    21d6:	9f 3f       	cpi	r25, 0xFF	; 255
    21d8:	79 f0       	breq	.+30     	; 0x21f8 <__fp_splitA+0x2a>
    21da:	87 95       	ror	r24
    21dc:	08 95       	ret
    21de:	12 16       	cp	r1, r18
    21e0:	13 06       	cpc	r1, r19
    21e2:	14 06       	cpc	r1, r20
    21e4:	55 1f       	adc	r21, r21
    21e6:	f2 cf       	rjmp	.-28     	; 0x21cc <__fp_split3+0xe>
    21e8:	46 95       	lsr	r20
    21ea:	f1 df       	rcall	.-30     	; 0x21ce <__fp_splitA>
    21ec:	08 c0       	rjmp	.+16     	; 0x21fe <__fp_splitA+0x30>
    21ee:	16 16       	cp	r1, r22
    21f0:	17 06       	cpc	r1, r23
    21f2:	18 06       	cpc	r1, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	f1 cf       	rjmp	.-30     	; 0x21da <__fp_splitA+0xc>
    21f8:	86 95       	lsr	r24
    21fa:	71 05       	cpc	r23, r1
    21fc:	61 05       	cpc	r22, r1
    21fe:	08 94       	sec
    2200:	08 95       	ret

00002202 <__fp_zero>:
    2202:	e8 94       	clt

00002204 <__fp_szero>:
    2204:	bb 27       	eor	r27, r27
    2206:	66 27       	eor	r22, r22
    2208:	77 27       	eor	r23, r23
    220a:	cb 01       	movw	r24, r22
    220c:	97 f9       	bld	r25, 7
    220e:	08 95       	ret

00002210 <__gesf2>:
    2210:	2c df       	rcall	.-424    	; 0x206a <__fp_cmp>
    2212:	08 f4       	brcc	.+2      	; 0x2216 <__gesf2+0x6>
    2214:	8f ef       	ldi	r24, 0xFF	; 255
    2216:	08 95       	ret

00002218 <inverse>:
    2218:	9b 01       	movw	r18, r22
    221a:	ac 01       	movw	r20, r24
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	80 e8       	ldi	r24, 0x80	; 128
    2222:	9f e3       	ldi	r25, 0x3F	; 63
    2224:	4c ce       	rjmp	.-872    	; 0x1ebe <__divsf3>

00002226 <__mulsf3>:
    2226:	0b d0       	rcall	.+22     	; 0x223e <__mulsf3x>
    2228:	a8 cf       	rjmp	.-176    	; 0x217a <__fp_round>
    222a:	71 df       	rcall	.-286    	; 0x210e <__fp_pscA>
    222c:	28 f0       	brcs	.+10     	; 0x2238 <__mulsf3+0x12>
    222e:	76 df       	rcall	.-276    	; 0x211c <__fp_pscB>
    2230:	18 f0       	brcs	.+6      	; 0x2238 <__mulsf3+0x12>
    2232:	95 23       	and	r25, r21
    2234:	09 f0       	breq	.+2      	; 0x2238 <__mulsf3+0x12>
    2236:	3d cf       	rjmp	.-390    	; 0x20b2 <__fp_inf>
    2238:	42 cf       	rjmp	.-380    	; 0x20be <__fp_nan>
    223a:	11 24       	eor	r1, r1
    223c:	e3 cf       	rjmp	.-58     	; 0x2204 <__fp_szero>

0000223e <__mulsf3x>:
    223e:	bf df       	rcall	.-130    	; 0x21be <__fp_split3>
    2240:	a0 f3       	brcs	.-24     	; 0x222a <__mulsf3+0x4>

00002242 <__mulsf3_pse>:
    2242:	95 9f       	mul	r25, r21
    2244:	d1 f3       	breq	.-12     	; 0x223a <__mulsf3+0x14>
    2246:	95 0f       	add	r25, r21
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	55 1f       	adc	r21, r21
    224c:	62 9f       	mul	r22, r18
    224e:	f0 01       	movw	r30, r0
    2250:	72 9f       	mul	r23, r18
    2252:	bb 27       	eor	r27, r27
    2254:	f0 0d       	add	r31, r0
    2256:	b1 1d       	adc	r27, r1
    2258:	63 9f       	mul	r22, r19
    225a:	aa 27       	eor	r26, r26
    225c:	f0 0d       	add	r31, r0
    225e:	b1 1d       	adc	r27, r1
    2260:	aa 1f       	adc	r26, r26
    2262:	64 9f       	mul	r22, r20
    2264:	66 27       	eor	r22, r22
    2266:	b0 0d       	add	r27, r0
    2268:	a1 1d       	adc	r26, r1
    226a:	66 1f       	adc	r22, r22
    226c:	82 9f       	mul	r24, r18
    226e:	22 27       	eor	r18, r18
    2270:	b0 0d       	add	r27, r0
    2272:	a1 1d       	adc	r26, r1
    2274:	62 1f       	adc	r22, r18
    2276:	73 9f       	mul	r23, r19
    2278:	b0 0d       	add	r27, r0
    227a:	a1 1d       	adc	r26, r1
    227c:	62 1f       	adc	r22, r18
    227e:	83 9f       	mul	r24, r19
    2280:	a0 0d       	add	r26, r0
    2282:	61 1d       	adc	r22, r1
    2284:	22 1f       	adc	r18, r18
    2286:	74 9f       	mul	r23, r20
    2288:	33 27       	eor	r19, r19
    228a:	a0 0d       	add	r26, r0
    228c:	61 1d       	adc	r22, r1
    228e:	23 1f       	adc	r18, r19
    2290:	84 9f       	mul	r24, r20
    2292:	60 0d       	add	r22, r0
    2294:	21 1d       	adc	r18, r1
    2296:	82 2f       	mov	r24, r18
    2298:	76 2f       	mov	r23, r22
    229a:	6a 2f       	mov	r22, r26
    229c:	11 24       	eor	r1, r1
    229e:	9f 57       	subi	r25, 0x7F	; 127
    22a0:	50 40       	sbci	r21, 0x00	; 0
    22a2:	8a f0       	brmi	.+34     	; 0x22c6 <__mulsf3_pse+0x84>
    22a4:	e1 f0       	breq	.+56     	; 0x22de <__mulsf3_pse+0x9c>
    22a6:	88 23       	and	r24, r24
    22a8:	4a f0       	brmi	.+18     	; 0x22bc <__mulsf3_pse+0x7a>
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	bb 1f       	adc	r27, r27
    22b0:	66 1f       	adc	r22, r22
    22b2:	77 1f       	adc	r23, r23
    22b4:	88 1f       	adc	r24, r24
    22b6:	91 50       	subi	r25, 0x01	; 1
    22b8:	50 40       	sbci	r21, 0x00	; 0
    22ba:	a9 f7       	brne	.-22     	; 0x22a6 <__mulsf3_pse+0x64>
    22bc:	9e 3f       	cpi	r25, 0xFE	; 254
    22be:	51 05       	cpc	r21, r1
    22c0:	70 f0       	brcs	.+28     	; 0x22de <__mulsf3_pse+0x9c>
    22c2:	f7 ce       	rjmp	.-530    	; 0x20b2 <__fp_inf>
    22c4:	9f cf       	rjmp	.-194    	; 0x2204 <__fp_szero>
    22c6:	5f 3f       	cpi	r21, 0xFF	; 255
    22c8:	ec f3       	brlt	.-6      	; 0x22c4 <__mulsf3_pse+0x82>
    22ca:	98 3e       	cpi	r25, 0xE8	; 232
    22cc:	dc f3       	brlt	.-10     	; 0x22c4 <__mulsf3_pse+0x82>
    22ce:	86 95       	lsr	r24
    22d0:	77 95       	ror	r23
    22d2:	67 95       	ror	r22
    22d4:	b7 95       	ror	r27
    22d6:	f7 95       	ror	r31
    22d8:	e7 95       	ror	r30
    22da:	9f 5f       	subi	r25, 0xFF	; 255
    22dc:	c1 f7       	brne	.-16     	; 0x22ce <__mulsf3_pse+0x8c>
    22de:	fe 2b       	or	r31, r30
    22e0:	88 0f       	add	r24, r24
    22e2:	91 1d       	adc	r25, r1
    22e4:	96 95       	lsr	r25
    22e6:	87 95       	ror	r24
    22e8:	97 f9       	bld	r25, 7
    22ea:	08 95       	ret

000022ec <square>:
    22ec:	9b 01       	movw	r18, r22
    22ee:	ac 01       	movw	r20, r24
    22f0:	9a cf       	rjmp	.-204    	; 0x2226 <__mulsf3>

000022f2 <__fp_mpack>:
    22f2:	9f 3f       	cpi	r25, 0xFF	; 255
    22f4:	31 f0       	breq	.+12     	; 0x2302 <__fp_mpack_finite+0xc>

000022f6 <__fp_mpack_finite>:
    22f6:	91 50       	subi	r25, 0x01	; 1
    22f8:	20 f4       	brcc	.+8      	; 0x2302 <__fp_mpack_finite+0xc>
    22fa:	87 95       	ror	r24
    22fc:	77 95       	ror	r23
    22fe:	67 95       	ror	r22
    2300:	b7 95       	ror	r27
    2302:	88 0f       	add	r24, r24
    2304:	91 1d       	adc	r25, r1
    2306:	96 95       	lsr	r25
    2308:	87 95       	ror	r24
    230a:	97 f9       	bld	r25, 7
    230c:	08 95       	ret

0000230e <__fp_powsodd>:
    230e:	9f 93       	push	r25
    2310:	8f 93       	push	r24
    2312:	7f 93       	push	r23
    2314:	6f 93       	push	r22
    2316:	ff 93       	push	r31
    2318:	ef 93       	push	r30
    231a:	9b 01       	movw	r18, r22
    231c:	ac 01       	movw	r20, r24
    231e:	83 df       	rcall	.-250    	; 0x2226 <__mulsf3>
    2320:	ef 91       	pop	r30
    2322:	ff 91       	pop	r31
    2324:	cf de       	rcall	.-610    	; 0x20c4 <__fp_powser>
    2326:	2f 91       	pop	r18
    2328:	3f 91       	pop	r19
    232a:	4f 91       	pop	r20
    232c:	5f 91       	pop	r21
    232e:	7b cf       	rjmp	.-266    	; 0x2226 <__mulsf3>

00002330 <_exit>:
    2330:	f8 94       	cli

00002332 <__stop_program>:
    2332:	ff cf       	rjmp	.-2      	; 0x2332 <__stop_program>
