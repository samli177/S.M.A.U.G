
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000011dc  00800100  00001eb8  00001f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000683  008012dc  008012dc  00003128  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  00005f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006cd8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c0  00000000  00000000  00006d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003579  00000000  00000000  000070c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f7a  00000000  00000000  0000a640  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002291  00000000  00000000  0000b5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b44  00000000  00000000  0000d84c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c6d  00000000  00000000  0000e390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002198  00000000  00000000  0000effd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f8  00000000  00000000  00011195  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	08 c5       	rjmp	.+2576   	; 0xa16 <__vector_1>
       6:	00 00       	nop
       8:	30 c5       	rjmp	.+2656   	; 0xa6a <__vector_2>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	81 c0       	rjmp	.+258    	; 0x114 <__bad_interrupt>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c0       	rjmp	.+234    	; 0x114 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	8a c5       	rjmp	.+2836   	; 0xb4a <__vector_13>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c0       	rjmp	.+210    	; 0x114 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__vector_20>
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	d4 c7       	rjmp	.+4008   	; 0x1012 <__vector_26>
      6a:	00 00       	nop
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c5       	rjmp	.+2788   	; 0xb66 <__vector_32>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	12 e1       	ldi	r17, 0x12	; 18
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e8 eb       	ldi	r30, 0xB8	; 184
      ec:	fe e1       	ldi	r31, 0x1E	; 30
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	ac 3d       	cpi	r26, 0xDC	; 220
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	29 e1       	ldi	r18, 0x19	; 25
     100:	ac ed       	ldi	r26, 0xDC	; 220
     102:	b2 e1       	ldi	r27, 0x12	; 18
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	af 35       	cpi	r26, 0x5F	; 95
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	d7 d4       	rcall	.+2478   	; 0xabe <main>
     110:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <turn_around>:
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
	if(gStatus)
     11a:	80 91 00 01 	lds	r24, 0x0100
     11e:	88 23       	and	r24, r24
     120:	c9 f0       	breq	.+50     	; 0x154 <turn_around+0x3e>
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
     122:	6b e1       	ldi	r22, 0x1B	; 27
     124:	71 e1       	ldi	r23, 0x11	; 17
     126:	80 e8       	ldi	r24, 0x80	; 128
     128:	33 d6       	rcall	.+3174   	; 0xd90 <TWI_send_string>
     12a:	14 c0       	rjmp	.+40     	; 0x154 <turn_around+0x3e>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	6e e1       	ldi	r22, 0x1E	; 30
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 84 0c 	call	0x1908	; 0x1908 <USART_send_command_parameters>
		navigation_stepping_delay();
     136:	b8 d1       	rcall	.+880    	; 0x4a8 <navigation_stepping_delay>
     138:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting to turn around.");
	}
	for(int i = 0; (i < 40 && TWI_get_autonom_settings() != 0); ++i)
     13a:	19 f0       	breq	.+6      	; 0x142 <turn_around+0x2c>
     13c:	04 d7       	rcall	.+3592   	; 0xf46 <TWI_get_autonom_settings>
     13e:	81 11       	cpse	r24, r1
     140:	f5 cf       	rjmp	.-22     	; 0x12c <turn_around+0x16>
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	if(gStatus)
     142:	80 91 00 01 	lds	r24, 0x0100
     146:	88 23       	and	r24, r24
     148:	41 f0       	breq	.+16     	; 0x15a <turn_around+0x44>
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
     14a:	64 e3       	ldi	r22, 0x34	; 52
     14c:	71 e1       	ldi	r23, 0x11	; 17
     14e:	80 e8       	ldi	r24, 0x80	; 128
     150:	1f d6       	rcall	.+3134   	; 0xd90 <TWI_send_string>
     152:	03 c0       	rjmp	.+6      	; 0x15a <turn_around+0x44>
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}

void turn_around()
{
     154:	c8 e2       	ldi	r28, 0x28	; 40
     156:	d0 e0       	ldi	r29, 0x00	; 0
     158:	f1 cf       	rjmp	.-30     	; 0x13c <turn_around+0x26>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Corridor ahead, done turning around.");
	}
}
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <walk_forward>:

void walk_forward()
{
     160:	8f 92       	push	r8
     162:	9f 92       	push	r9
     164:	af 92       	push	r10
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Finding regulation parameters.");
	}
	float angleOffset = navigation_angle_offset();
     174:	56 d3       	rcall	.+1708   	; 0x822 <navigation_angle_offset>
     176:	6b 01       	movw	r12, r22
     178:	7c 01       	movw	r14, r24
	float directionCompensationAngle = navigation_direction_regulation(angleOffset);
     17a:	4d d2       	rcall	.+1178   	; 0x616 <navigation_direction_regulation>
     17c:	4b 01       	movw	r8, r22
     17e:	5c 01       	movw	r10, r24
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Found regulation parameters.");
	}
	int adjustmentRotation = (51 + 50 * angleOffset * 2.0/PI);
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	48 e4       	ldi	r20, 0x48	; 72
     186:	52 e4       	ldi	r21, 0x42	; 66
     188:	c7 01       	movw	r24, r14
     18a:	b6 01       	movw	r22, r12
     18c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__mulsf3>
     190:	9b 01       	movw	r18, r22
     192:	ac 01       	movw	r20, r24
     194:	0e 94 8e 0c 	call	0x191c	; 0x191c <__addsf3>
     198:	2b ed       	ldi	r18, 0xDB	; 219
     19a:	3f e0       	ldi	r19, 0x0F	; 15
     19c:	49 e4       	ldi	r20, 0x49	; 73
     19e:	50 e4       	ldi	r21, 0x40	; 64
     1a0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__divsf3>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	4c e4       	ldi	r20, 0x4C	; 76
     1aa:	52 e4       	ldi	r21, 0x42	; 66
     1ac:	0e 94 8e 0c 	call	0x191c	; 0x191c <__addsf3>
     1b0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__fixsfsi>
	if (adjustmentRotation >= 100)
     1b4:	64 36       	cpi	r22, 0x64	; 100
     1b6:	71 05       	cpc	r23, r1
     1b8:	34 f4       	brge	.+12     	; 0x1c6 <walk_forward+0x66>
     1ba:	eb 01       	movw	r28, r22
     1bc:	dd 23       	and	r29, r29
     1be:	2c f4       	brge	.+10     	; 0x1ca <walk_forward+0x6a>
     1c0:	c0 e0       	ldi	r28, 0x00	; 0
     1c2:	d0 e0       	ldi	r29, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <walk_forward+0x6a>
	{
		adjustmentRotation = 100;
     1c6:	c4 e6       	ldi	r28, 0x64	; 100
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else if(adjustmentRotation <= 0)
	{
		adjustmentRotation = 0;
	}
	int adjustmentDirection = 90 * directionCompensationAngle/(2*PI);
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	44 eb       	ldi	r20, 0xB4	; 180
     1d0:	52 e4       	ldi	r21, 0x42	; 66
     1d2:	c5 01       	movw	r24, r10
     1d4:	b4 01       	movw	r22, r8
     1d6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__mulsf3>
     1da:	2b ed       	ldi	r18, 0xDB	; 219
     1dc:	3f e0       	ldi	r19, 0x0F	; 15
     1de:	49 ec       	ldi	r20, 0xC9	; 201
     1e0:	50 e4       	ldi	r21, 0x40	; 64
     1e2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__divsf3>
     1e6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__fixsfsi>
     1ea:	26 2f       	mov	r18, r22
	if(gStatus)
	{
		//TWI_send_string(C_ADDRESS, "Taking a step.");
	}
	USART_send_command_parameters((uint8_t)adjustmentDirection, (uint8_t)adjustmentRotation, gSpeed);
     1ec:	40 91 01 01 	lds	r20, 0x0101
     1f0:	6c 2f       	mov	r22, r28
     1f2:	82 2f       	mov	r24, r18
     1f4:	0e 94 84 0c 	call	0x1908	; 0x1908 <USART_send_command_parameters>
	//TWI_send_float(C_ADDRESS, adjustmentDirection);
	navigation_stepping_delay();
     1f8:	57 d1       	rcall	.+686    	; 0x4a8 <navigation_stepping_delay>
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	ff 90       	pop	r15
     200:	ef 90       	pop	r14
     202:	df 90       	pop	r13
     204:	cf 90       	pop	r12
     206:	bf 90       	pop	r11
     208:	af 90       	pop	r10
     20a:	9f 90       	pop	r9
     20c:	8f 90       	pop	r8
     20e:	08 95       	ret

00000210 <turn_right>:
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
	if(gStatus)
     214:	80 91 00 01 	lds	r24, 0x0100
     218:	88 23       	and	r24, r24
     21a:	01 f1       	breq	.+64     	; 0x25c <turn_right+0x4c>
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
     21c:	69 e5       	ldi	r22, 0x59	; 89
     21e:	71 e1       	ldi	r23, 0x11	; 17
     220:	80 e8       	ldi	r24, 0x80	; 128
     222:	b6 d5       	rcall	.+2924   	; 0xd90 <TWI_send_string>
     224:	1b c0       	rjmp	.+54     	; 0x25c <turn_right+0x4c>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	66 e4       	ldi	r22, 0x46	; 70
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 84 0c 	call	0x1908	; 0x1908 <USART_send_command_parameters>
		navigation_stepping_delay();
     230:	3b d1       	rcall	.+630    	; 0x4a8 <navigation_stepping_delay>
     232:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning right.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     234:	b1 f0       	breq	.+44     	; 0x262 <turn_right+0x52>
     236:	87 d6       	rcall	.+3342   	; 0xf46 <TWI_get_autonom_settings>
     238:	81 11       	cpse	r24, r1
     23a:	f5 cf       	rjmp	.-22     	; 0x226 <turn_right+0x16>
     23c:	12 c0       	rjmp	.+36     	; 0x262 <turn_right+0x52>
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     23e:	90 df       	rcall	.-224    	; 0x160 <walk_forward>
     240:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     242:	19 f0       	breq	.+6      	; 0x24a <turn_right+0x3a>
     244:	80 d6       	rcall	.+3328   	; 0xf46 <TWI_get_autonom_settings>
     246:	81 11       	cpse	r24, r1
     248:	fa cf       	rjmp	.-12     	; 0x23e <turn_right+0x2e>
	{
		walk_forward();
	}
	if(gStatus)
     24a:	80 91 00 01 	lds	r24, 0x0100
     24e:	88 23       	and	r24, r24
     250:	59 f0       	breq	.+22     	; 0x268 <turn_right+0x58>
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
     252:	61 e7       	ldi	r22, 0x71	; 113
     254:	71 e1       	ldi	r23, 0x11	; 17
     256:	80 e8       	ldi	r24, 0x80	; 128
     258:	9b d5       	rcall	.+2870   	; 0xd90 <TWI_send_string>
     25a:	06 c0       	rjmp	.+12     	; 0x268 <turn_right+0x58>
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}

void turn_right()
{
     25c:	c4 e1       	ldi	r28, 0x14	; 20
     25e:	d0 e0       	ldi	r29, 0x00	; 0
     260:	ea cf       	rjmp	.-44     	; 0x236 <turn_right+0x26>
     262:	cc e0       	ldi	r28, 0x0C	; 12
     264:	d0 e0       	ldi	r29, 0x00	; 0
     266:	ee cf       	rjmp	.-36     	; 0x244 <turn_right+0x34>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning right.");
	}
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <turn_left>:
{
	return gStatus;
}

void turn_left()
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
	if(gStatus)
     272:	80 91 00 01 	lds	r24, 0x0100
     276:	88 23       	and	r24, r24
     278:	01 f1       	breq	.+64     	; 0x2ba <turn_left+0x4c>
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
     27a:	65 e8       	ldi	r22, 0x85	; 133
     27c:	71 e1       	ldi	r23, 0x11	; 17
     27e:	80 e8       	ldi	r24, 0x80	; 128
     280:	87 d5       	rcall	.+2830   	; 0xd90 <TWI_send_string>
     282:	1b c0       	rjmp	.+54     	; 0x2ba <turn_left+0x4c>
	{
		if(gStatus)
		{
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	6e e1       	ldi	r22, 0x1E	; 30
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	0e 94 84 0c 	call	0x1908	; 0x1908 <USART_send_command_parameters>
		navigation_stepping_delay();
     28e:	0c d1       	rcall	.+536    	; 0x4a8 <navigation_stepping_delay>
     290:	21 97       	sbiw	r28, 0x01	; 1
{
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Starting turning left.");
	}
	for(int i = 0; (i < 20 && TWI_get_autonom_settings() != 0); ++i)
     292:	b1 f0       	breq	.+44     	; 0x2c0 <turn_left+0x52>
     294:	58 d6       	rcall	.+3248   	; 0xf46 <TWI_get_autonom_settings>
     296:	81 11       	cpse	r24, r1
     298:	f5 cf       	rjmp	.-22     	; 0x284 <turn_left+0x16>
     29a:	12 c0       	rjmp	.+36     	; 0x2c0 <turn_left+0x52>
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
	{
		walk_forward();
     29c:	61 df       	rcall	.-318    	; 0x160 <walk_forward>
     29e:	21 97       	sbiw	r28, 0x01	; 1
			//TWI_send_string(C_ADDRESS, "Rotating right.");
		}
		USART_send_command_parameters(0, MAX_ROTATION_COUNTER_CLOCKWISE, 0);
		navigation_stepping_delay();
	}
	for(int i = 0; (i < 12 && TWI_get_autonom_settings() != 0); ++i)
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <turn_left+0x3a>
     2a2:	51 d6       	rcall	.+3234   	; 0xf46 <TWI_get_autonom_settings>
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <turn_left+0x2e>
	{
		walk_forward();
	}
	if(gStatus)
     2a8:	80 91 00 01 	lds	r24, 0x0100
     2ac:	88 23       	and	r24, r24
     2ae:	59 f0       	breq	.+22     	; 0x2c6 <turn_left+0x58>
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
     2b0:	6c e9       	ldi	r22, 0x9C	; 156
     2b2:	71 e1       	ldi	r23, 0x11	; 17
     2b4:	80 e8       	ldi	r24, 0x80	; 128
     2b6:	6c d5       	rcall	.+2776   	; 0xd90 <TWI_send_string>
     2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <turn_left+0x58>
{
	return gStatus;
}

void turn_left()
{
     2ba:	c4 e1       	ldi	r28, 0x14	; 20
     2bc:	d0 e0       	ldi	r29, 0x00	; 0
     2be:	ea cf       	rjmp	.-44     	; 0x294 <turn_left+0x26>
     2c0:	cc e0       	ldi	r28, 0x0C	; 12
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
     2c4:	ee cf       	rjmp	.-36     	; 0x2a2 <turn_left+0x34>
	}
	if(gStatus)
	{
		TWI_send_string(C_ADDRESS, "Done turning left.");
	}
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <autonomouswalk_walk>:
	navigation_stepping_delay();
	//TWI_send_float(C_ADDRESS, adjustmentRotation);
}

void autonomouswalk_walk()
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
	if(navigation_left_algorithm())
     2d0:	df d0       	rcall	.+446    	; 0x490 <navigation_left_algorithm>
     2d2:	88 23       	and	r24, r24
     2d4:	e9 f0       	breq	.+58     	; 0x310 <autonomouswalk_walk+0x44>
	{
		if(navigation_check_left_turn() == 2)
     2d6:	8a d1       	rcall	.+788    	; 0x5ec <navigation_check_left_turn>
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	61 f4       	brne	.+24     	; 0x2f4 <autonomouswalk_walk+0x28>
     2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <autonomouswalk_walk+0x1a>
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     2de:	40 df       	rcall	.-384    	; 0x160 <walk_forward>
     2e0:	21 97       	sbiw	r28, 0x01	; 1
{
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
     2e2:	19 f4       	brne	.+6      	; 0x2ea <autonomouswalk_walk+0x1e>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <autonomouswalk_walk+0x24>

void autonomouswalk_walk()
{
	if(navigation_left_algorithm())
	{
		if(navigation_check_left_turn() == 2)
     2e6:	c3 e0       	ldi	r28, 0x03	; 3
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
     2ea:	2d d6       	rcall	.+3162   	; 0xf46 <TWI_get_autonom_settings>
     2ec:	81 11       	cpse	r24, r1
     2ee:	f7 cf       	rjmp	.-18     	; 0x2de <autonomouswalk_walk+0x12>
			{
				walk_forward();
			}
			turn_left();
     2f0:	be df       	rcall	.-132    	; 0x26e <turn_left>
     2f2:	2a c0       	rjmp	.+84     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     2f4:	84 e0       	ldi	r24, 0x04	; 4
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	1b d1       	rcall	.+566    	; 0x530 <navigation_get_sensor>
     2fa:	89 32       	cpi	r24, 0x29	; 41
     2fc:	10 f0       	brcs	.+4      	; 0x302 <autonomouswalk_walk+0x36>
		{
			walk_forward();
     2fe:	30 df       	rcall	.-416    	; 0x160 <walk_forward>
     300:	23 c0       	rjmp	.+70     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else if(navigation_check_right_turn() == 2)
     302:	5f d1       	rcall	.+702    	; 0x5c2 <navigation_check_right_turn>
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	11 f4       	brne	.+4      	; 0x30c <autonomouswalk_walk+0x40>
		{
			turn_right();
     308:	83 df       	rcall	.-250    	; 0x210 <turn_right>
     30a:	1e c0       	rjmp	.+60     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else
		{
			turn_around();
     30c:	04 df       	rcall	.-504    	; 0x116 <turn_around>
     30e:	1c c0       	rjmp	.+56     	; 0x348 <autonomouswalk_walk+0x7c>
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     310:	58 d1       	rcall	.+688    	; 0x5c2 <navigation_check_right_turn>
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	61 f4       	brne	.+24     	; 0x32e <autonomouswalk_walk+0x62>
     316:	04 c0       	rjmp	.+8      	; 0x320 <autonomouswalk_walk+0x54>
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
			{
				walk_forward();
     318:	23 df       	rcall	.-442    	; 0x160 <walk_forward>
     31a:	21 97       	sbiw	r28, 0x01	; 1
	}
	else
	{
		if(navigation_check_right_turn() == 2)
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
     31c:	19 f4       	brne	.+6      	; 0x324 <autonomouswalk_walk+0x58>
     31e:	05 c0       	rjmp	.+10     	; 0x32a <autonomouswalk_walk+0x5e>
			turn_around();
		}
	}
	else
	{
		if(navigation_check_right_turn() == 2)
     320:	c3 e0       	ldi	r28, 0x03	; 3
     322:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0;(i < 3 && TWI_get_autonom_settings() != 0); ++i)
     324:	10 d6       	rcall	.+3104   	; 0xf46 <TWI_get_autonom_settings>
     326:	81 11       	cpse	r24, r1
     328:	f7 cf       	rjmp	.-18     	; 0x318 <autonomouswalk_walk+0x4c>
			{
				walk_forward();
			}
			turn_right();
     32a:	72 df       	rcall	.-284    	; 0x210 <turn_right>
     32c:	0d c0       	rjmp	.+26     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else if(navigation_get_sensor(4) > CORRIDOR_WIDTH / 2)
     32e:	84 e0       	ldi	r24, 0x04	; 4
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	fe d0       	rcall	.+508    	; 0x530 <navigation_get_sensor>
     334:	89 32       	cpi	r24, 0x29	; 41
     336:	10 f0       	brcs	.+4      	; 0x33c <autonomouswalk_walk+0x70>
		{
			walk_forward();
     338:	13 df       	rcall	.-474    	; 0x160 <walk_forward>
     33a:	06 c0       	rjmp	.+12     	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else if(navigation_check_left_turn() == 2)
     33c:	57 d1       	rcall	.+686    	; 0x5ec <navigation_check_left_turn>
     33e:	82 30       	cpi	r24, 0x02	; 2
     340:	11 f4       	brne	.+4      	; 0x346 <autonomouswalk_walk+0x7a>
		{
			turn_left();
     342:	95 df       	rcall	.-214    	; 0x26e <turn_left>
     344:	01 c0       	rjmp	.+2      	; 0x348 <autonomouswalk_walk+0x7c>
		}
		else
		{
			turn_around();
     346:	e7 de       	rcall	.-562    	; 0x116 <turn_around>
		}
	}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
     34e:	bc 01       	movw	r22, r24
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__floatunsisf>
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	4a e7       	ldi	r20, 0x7A	; 122
     35e:	51 e4       	ldi	r21, 0x41	; 65
     360:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__mulsf3>
     364:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fixunssfsi>
	OCR1A = delay;
     368:	70 93 89 00 	sts	0x0089, r23
     36c:	60 93 88 00 	sts	0x0088, r22
     370:	08 95       	ret

00000372 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
     372:	bc 01       	movw	r22, r24
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__floatunsisf>
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	4a e7       	ldi	r20, 0x7A	; 122
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__mulsf3>
     388:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fixunssfsi>
	OCR3A = delay;
     38c:	70 93 99 00 	sts	0x0099, r23
     390:	60 93 98 00 	sts	0x0098, r22
     394:	08 95       	ret

00000396 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     396:	e1 e8       	ldi	r30, 0x81	; 129
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	85 60       	ori	r24, 0x05	; 5
     39e:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     3a0:	e1 e9       	ldi	r30, 0x91	; 145
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	85 60       	ori	r24, 0x05	; 5
     3a8:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     3aa:	88 ee       	ldi	r24, 0xE8	; 232
     3ac:	93 e0       	ldi	r25, 0x03	; 3
     3ae:	cf df       	rcall	.-98     	; 0x34e <set_counter_1>
	set_counter_2(1000);
     3b0:	88 ee       	ldi	r24, 0xE8	; 232
     3b2:	93 e0       	ldi	r25, 0x03	; 3
     3b4:	de df       	rcall	.-68     	; 0x372 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     3b6:	ef e6       	ldi	r30, 0x6F	; 111
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	82 60       	ori	r24, 0x02	; 2
     3be:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     3c0:	e1 e7       	ldi	r30, 0x71	; 113
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	82 60       	ori	r24, 0x02	; 2
     3c8:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     3ca:	10 92 85 00 	sts	0x0085, r1
     3ce:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     3d2:	10 92 95 00 	sts	0x0095, r1
     3d6:	10 92 94 00 	sts	0x0094, r1
     3da:	08 95       	ret

000003dc <FifoDataLength>:
     3dc:	fc 01       	movw	r30, r24
     3de:	90 81       	ld	r25, Z
     3e0:	91 50       	subi	r25, 0x01	; 1
     3e2:	84 81       	ldd	r24, Z+4	; 0x04
     3e4:	22 81       	ldd	r18, Z+2	; 0x02
     3e6:	82 1b       	sub	r24, r18
     3e8:	89 23       	and	r24, r25
     3ea:	08 95       	ret

000003ec <FifoWrite>:
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	ec 01       	movw	r28, r24
     3f4:	16 2f       	mov	r17, r22
     3f6:	f2 df       	rcall	.-28     	; 0x3dc <FifoDataLength>
     3f8:	28 81       	ld	r18, Y
     3fa:	39 81       	ldd	r19, Y+1	; 0x01
     3fc:	21 50       	subi	r18, 0x01	; 1
     3fe:	31 09       	sbc	r19, r1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	82 17       	cp	r24, r18
     404:	93 07       	cpc	r25, r19
     406:	69 f0       	breq	.+26     	; 0x422 <FifoWrite+0x36>
     408:	8c 81       	ldd	r24, Y+4	; 0x04
     40a:	9d 81       	ldd	r25, Y+5	; 0x05
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f9 1f       	adc	r31, r25
     412:	16 83       	std	Z+6, r17	; 0x06
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	28 23       	and	r18, r24
     418:	39 23       	and	r19, r25
     41a:	3d 83       	std	Y+5, r19	; 0x05
     41c:	2c 83       	std	Y+4, r18	; 0x04
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	01 c0       	rjmp	.+2      	; 0x424 <FifoWrite+0x38>
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	08 95       	ret

0000042c <FifoRead>:
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ec 01       	movw	r28, r24
     436:	8b 01       	movw	r16, r22
     438:	d1 df       	rcall	.-94     	; 0x3dc <FifoDataLength>
     43a:	88 23       	and	r24, r24
     43c:	a1 f0       	breq	.+40     	; 0x466 <FifoRead+0x3a>
     43e:	ea 81       	ldd	r30, Y+2	; 0x02
     440:	fb 81       	ldd	r31, Y+3	; 0x03
     442:	ec 0f       	add	r30, r28
     444:	fd 1f       	adc	r31, r29
     446:	86 81       	ldd	r24, Z+6	; 0x06
     448:	f8 01       	movw	r30, r16
     44a:	80 83       	st	Z, r24
     44c:	28 81       	ld	r18, Y
     44e:	39 81       	ldd	r19, Y+1	; 0x01
     450:	21 50       	subi	r18, 0x01	; 1
     452:	31 09       	sbc	r19, r1
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	9b 81       	ldd	r25, Y+3	; 0x03
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	82 23       	and	r24, r18
     45c:	93 23       	and	r25, r19
     45e:	9b 83       	std	Y+3, r25	; 0x03
     460:	8a 83       	std	Y+2, r24	; 0x02
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	01 c0       	rjmp	.+2      	; 0x468 <FifoRead+0x3c>
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	08 95       	ret

00000472 <navigation_set_Kp>:
	}
	else
	{
		return 0;
	}
}
     472:	68 2f       	mov	r22, r24
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__floatunsisf>
     47e:	60 93 03 01 	sts	0x0103, r22
     482:	70 93 04 01 	sts	0x0104, r23
     486:	80 93 05 01 	sts	0x0105, r24
     48a:	90 93 06 01 	sts	0x0106, r25
     48e:	08 95       	ret

00000490 <navigation_left_algorithm>:
     490:	80 91 07 01 	lds	r24, 0x0107
     494:	08 95       	ret

00000496 <navigation_set_algorithm>:
     496:	80 93 07 01 	sts	0x0107, r24
     49a:	08 95       	ret

0000049c <navigation_autonomous_walk>:
     49c:	80 91 02 01 	lds	r24, 0x0102
     4a0:	08 95       	ret

000004a2 <navigation_set_autonomous_walk>:
     4a2:	80 93 02 01 	sts	0x0102, r24
     4a6:	08 95       	ret

000004a8 <navigation_stepping_delay>:
     4a8:	cf 93       	push	r28
     4aa:	c2 e0       	ldi	r28, 0x02	; 2
     4ac:	0e c0       	rjmp	.+28     	; 0x4ca <navigation_stepping_delay+0x22>
     4ae:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <USART_DecodeRxFIFO>
     4b2:	2f ef       	ldi	r18, 0xFF	; 255
     4b4:	89 ef       	ldi	r24, 0xF9	; 249
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	80 40       	sbci	r24, 0x00	; 0
     4bc:	90 40       	sbci	r25, 0x00	; 0
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <navigation_stepping_delay+0x10>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <navigation_stepping_delay+0x1a>
     4c2:	00 00       	nop
     4c4:	82 b1       	in	r24, 0x02	; 2
     4c6:	8c 27       	eor	r24, r28
     4c8:	82 b9       	out	0x02, r24	; 2
     4ca:	0e 94 c6 0b 	call	0x178c	; 0x178c <USART_ready>
     4ce:	88 23       	and	r24, r24
     4d0:	71 f3       	breq	.-36     	; 0x4ae <navigation_stepping_delay+0x6>
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <navigation_fill_buffer>:
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	c0 e0       	ldi	r28, 0x00	; 0
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
     4e2:	00 91 dc 12 	lds	r16, 0x12DC
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	ce 01       	movw	r24, r28
     4ea:	23 d5       	rcall	.+2630   	; 0xf32 <TWI_get_sensor>
     4ec:	fe 01       	movw	r30, r28
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	ec 1b       	sub	r30, r28
     4fc:	fd 0b       	sbc	r31, r29
     4fe:	0e 0f       	add	r16, r30
     500:	1f 1f       	adc	r17, r31
     502:	f8 01       	movw	r30, r16
     504:	e0 51       	subi	r30, 0x10	; 16
     506:	fd 4e       	sbci	r31, 0xED	; 237
     508:	80 83       	st	Z, r24
     50a:	21 96       	adiw	r28, 0x01	; 1
     50c:	c8 30       	cpi	r28, 0x08	; 8
     50e:	d1 05       	cpc	r29, r1
     510:	41 f7       	brne	.-48     	; 0x4e2 <navigation_fill_buffer+0xc>
     512:	80 91 dc 12 	lds	r24, 0x12DC
     516:	86 30       	cpi	r24, 0x06	; 6
     518:	19 f4       	brne	.+6      	; 0x520 <navigation_fill_buffer+0x4a>
     51a:	10 92 dc 12 	sts	0x12DC, r1
     51e:	03 c0       	rjmp	.+6      	; 0x526 <navigation_fill_buffer+0x50>
     520:	8f 5f       	subi	r24, 0xFF	; 255
     522:	80 93 dc 12 	sts	0x12DC, r24
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	08 95       	ret

00000530 <navigation_get_sensor>:
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	27 97       	sbiw	r28, 0x07	; 7
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	dc 01       	movw	r26, r24
     54a:	aa 0f       	add	r26, r26
     54c:	bb 1f       	adc	r27, r27
     54e:	aa 0f       	add	r26, r26
     550:	bb 1f       	adc	r27, r27
     552:	aa 0f       	add	r26, r26
     554:	bb 1f       	adc	r27, r27
     556:	a8 1b       	sub	r26, r24
     558:	b9 0b       	sbc	r27, r25
     55a:	a0 51       	subi	r26, 0x10	; 16
     55c:	bd 4e       	sbci	r27, 0xED	; 237
     55e:	fe 01       	movw	r30, r28
     560:	31 96       	adiw	r30, 0x01	; 1
     562:	af 01       	movw	r20, r30
     564:	ce 01       	movw	r24, r28
     566:	08 96       	adiw	r24, 0x08	; 8
     568:	2d 91       	ld	r18, X+
     56a:	21 93       	st	Z+, r18
     56c:	e8 17       	cp	r30, r24
     56e:	f9 07       	cpc	r31, r25
     570:	d9 f7       	brne	.-10     	; 0x568 <navigation_get_sensor+0x38>
     572:	26 e0       	ldi	r18, 0x06	; 6
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	04 2f       	mov	r16, r20
     578:	15 2f       	mov	r17, r21
     57a:	0e c0       	rjmp	.+28     	; 0x598 <navigation_get_sensor+0x68>
     57c:	61 91       	ld	r22, Z+
     57e:	70 81       	ld	r23, Z
     580:	76 17       	cp	r23, r22
     582:	20 f4       	brcc	.+8      	; 0x58c <navigation_get_sensor+0x5c>
     584:	df 01       	movw	r26, r30
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	7c 93       	st	X, r23
     58a:	60 83       	st	Z, r22
     58c:	8e 17       	cp	r24, r30
     58e:	9f 07       	cpc	r25, r31
     590:	a9 f7       	brne	.-22     	; 0x57c <navigation_get_sensor+0x4c>
     592:	21 50       	subi	r18, 0x01	; 1
     594:	31 09       	sbc	r19, r1
     596:	49 f0       	breq	.+18     	; 0x5aa <navigation_get_sensor+0x7a>
     598:	12 16       	cp	r1, r18
     59a:	13 06       	cpc	r1, r19
     59c:	d4 f7       	brge	.-12     	; 0x592 <navigation_get_sensor+0x62>
     59e:	c9 01       	movw	r24, r18
     5a0:	84 0f       	add	r24, r20
     5a2:	95 1f       	adc	r25, r21
     5a4:	e0 2f       	mov	r30, r16
     5a6:	f1 2f       	mov	r31, r17
     5a8:	e9 cf       	rjmp	.-46     	; 0x57c <navigation_get_sensor+0x4c>
     5aa:	8c 81       	ldd	r24, Y+4	; 0x04
     5ac:	27 96       	adiw	r28, 0x07	; 7
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <navigation_check_right_turn>:
	}
}

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 10))
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	b4 df       	rcall	.-152    	; 0x530 <navigation_get_sensor>
     5c8:	82 33       	cpi	r24, 0x32	; 50
     5ca:	28 f0       	brcs	.+10     	; 0x5d6 <navigation_check_right_turn+0x14>
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	af df       	rcall	.-162    	; 0x530 <navigation_get_sensor>
     5d2:	82 33       	cpi	r24, 0x32	; 50
     5d4:	40 f4       	brcc	.+16     	; 0x5e6 <navigation_check_right_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH - 10))
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	aa df       	rcall	.-172    	; 0x530 <navigation_get_sensor>
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	86 34       	cpi	r24, 0x46	; 70
     5e0:	18 f4       	brcc	.+6      	; 0x5e8 <navigation_check_right_turn+0x26>
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <navigation_check_right_turn+0x26>

uint8_t navigation_check_right_turn()
{
	if(navigation_get_sensor(1) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(3) >= (CORRIDOR_WIDTH / 2 + 10))
	{
		return 2;
     5e6:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     5e8:	89 2f       	mov	r24, r25
     5ea:	08 95       	ret

000005ec <navigation_check_left_turn>:
	}
}

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 10))
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	9f df       	rcall	.-194    	; 0x530 <navigation_get_sensor>
     5f2:	82 33       	cpi	r24, 0x32	; 50
     5f4:	28 f0       	brcs	.+10     	; 0x600 <navigation_check_left_turn+0x14>
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	9a df       	rcall	.-204    	; 0x530 <navigation_get_sensor>
     5fc:	82 33       	cpi	r24, 0x32	; 50
     5fe:	40 f4       	brcc	.+16     	; 0x610 <navigation_check_left_turn+0x24>
	{
		return 2;
	}
	else if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH - 10))
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	95 df       	rcall	.-214    	; 0x530 <navigation_get_sensor>
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	86 34       	cpi	r24, 0x46	; 70
     60a:	18 f4       	brcc	.+6      	; 0x612 <navigation_check_left_turn+0x26>
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	01 c0       	rjmp	.+2      	; 0x612 <navigation_check_left_turn+0x26>

uint8_t navigation_check_left_turn()
{
	if(navigation_get_sensor(0) >= (CORRIDOR_WIDTH / 2 + 10) && navigation_get_sensor(2) >= (CORRIDOR_WIDTH / 2 + 10))
	{
		return 2;
     610:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		return 0;
	}
}
     612:	89 2f       	mov	r24, r25
     614:	08 95       	ret

00000616 <navigation_direction_regulation>:
		return 0;
	}
}

float navigation_direction_regulation(float angleOffset)
{
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	6b 01       	movw	r12, r22
     624:	7c 01       	movw	r14, r24
	int d = 0;
	if(gAlgorithm)
     626:	80 91 07 01 	lds	r24, 0x0107
     62a:	88 23       	and	r24, r24
     62c:	09 f4       	brne	.+2      	; 0x630 <navigation_direction_regulation+0x1a>
     62e:	4c c0       	rjmp	.+152    	; 0x6c8 <navigation_direction_regulation+0xb2>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	7d df       	rcall	.-262    	; 0x530 <navigation_get_sensor>
     636:	c8 2f       	mov	r28, r24
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	79 df       	rcall	.-270    	; 0x530 <navigation_get_sensor>
     63e:	2c 2f       	mov	r18, r28
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	48 1b       	sub	r20, r24
     646:	51 09       	sbc	r21, r1
     648:	ca 01       	movw	r24, r20
     64a:	99 23       	and	r25, r25
     64c:	1c f4       	brge	.+6      	; 0x654 <navigation_direction_regulation+0x3e>
     64e:	91 95       	neg	r25
     650:	81 95       	neg	r24
     652:	91 09       	sbc	r25, r1
     654:	0a 97       	sbiw	r24, 0x0a	; 10
     656:	0c f0       	brlt	.+2      	; 0x65a <navigation_direction_regulation+0x44>
     658:	d5 c0       	rjmp	.+426    	; 0x804 <navigation_direction_regulation+0x1ee>
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	68 df       	rcall	.-304    	; 0x530 <navigation_get_sensor>
     660:	82 33       	cpi	r24, 0x32	; 50
     662:	08 f0       	brcs	.+2      	; 0x666 <navigation_direction_regulation+0x50>
     664:	cf c0       	rjmp	.+414    	; 0x804 <navigation_direction_regulation+0x1ee>
		{
			d = ((navigation_get_sensor(2) + navigation_get_sensor(0)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset) - CORRIDOR_WIDTH / 2;
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	62 df       	rcall	.-316    	; 0x530 <navigation_get_sensor>
     66c:	c8 2f       	mov	r28, r24
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	5e df       	rcall	.-324    	; 0x530 <navigation_get_sensor>
     674:	d8 2f       	mov	r29, r24
     676:	c7 01       	movw	r24, r14
     678:	b6 01       	movw	r22, r12
     67a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <cos>
     67e:	6b 01       	movw	r12, r22
     680:	7c 01       	movw	r14, r24
     682:	6d 2f       	mov	r22, r29
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	6c 0f       	add	r22, r28
     688:	71 1d       	adc	r23, r1
     68a:	88 27       	eor	r24, r24
     68c:	77 fd       	sbrc	r23, 7
     68e:	80 95       	com	r24
     690:	98 2f       	mov	r25, r24
     692:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__floatsisf>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	5f e3       	ldi	r21, 0x3F	; 63
     69e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__mulsf3>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 ef       	ldi	r20, 0xF0	; 240
     6a8:	50 e4       	ldi	r21, 0x40	; 64
     6aa:	0e 94 8e 0c 	call	0x191c	; 0x191c <__addsf3>
     6ae:	a7 01       	movw	r20, r14
     6b0:	96 01       	movw	r18, r12
     6b2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__mulsf3>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e2       	ldi	r20, 0x20	; 32
     6bc:	52 e4       	ldi	r21, 0x42	; 66
     6be:	0e 94 8d 0c 	call	0x191a	; 0x191a <__subsf3>
     6c2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__fixsfsi>
     6c6:	4d c0       	rjmp	.+154    	; 0x762 <navigation_direction_regulation+0x14c>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	31 df       	rcall	.-414    	; 0x530 <navigation_get_sensor>
     6ce:	c8 2f       	mov	r28, r24
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	2d df       	rcall	.-422    	; 0x530 <navigation_get_sensor>
     6d6:	2c 2f       	mov	r18, r28
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	a9 01       	movw	r20, r18
     6dc:	48 1b       	sub	r20, r24
     6de:	51 09       	sbc	r21, r1
     6e0:	ca 01       	movw	r24, r20
     6e2:	99 23       	and	r25, r25
     6e4:	1c f4       	brge	.+6      	; 0x6ec <navigation_direction_regulation+0xd6>
     6e6:	91 95       	neg	r25
     6e8:	81 95       	neg	r24
     6ea:	91 09       	sbc	r25, r1
     6ec:	0a 97       	sbiw	r24, 0x0a	; 10
     6ee:	0c f0       	brlt	.+2      	; 0x6f2 <navigation_direction_regulation+0xdc>
     6f0:	89 c0       	rjmp	.+274    	; 0x804 <navigation_direction_regulation+0x1ee>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	1c df       	rcall	.-456    	; 0x530 <navigation_get_sensor>
     6f8:	82 33       	cpi	r24, 0x32	; 50
     6fa:	08 f0       	brcs	.+2      	; 0x6fe <navigation_direction_regulation+0xe8>
     6fc:	83 c0       	rjmp	.+262    	; 0x804 <navigation_direction_regulation+0x1ee>
		{
			d = CORRIDOR_WIDTH / 2 - ((navigation_get_sensor(1) + navigation_get_sensor(3)) / 2.0 + DISTANCE_MIDDLE_TO_SIDE) * cosf(angleOffset);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	16 df       	rcall	.-468    	; 0x530 <navigation_get_sensor>
     704:	c8 2f       	mov	r28, r24
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	12 df       	rcall	.-476    	; 0x530 <navigation_get_sensor>
     70c:	d8 2f       	mov	r29, r24
     70e:	c7 01       	movw	r24, r14
     710:	b6 01       	movw	r22, r12
     712:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <cos>
     716:	6b 01       	movw	r12, r22
     718:	7c 01       	movw	r14, r24
     71a:	6d 2f       	mov	r22, r29
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	6c 0f       	add	r22, r28
     720:	71 1d       	adc	r23, r1
     722:	88 27       	eor	r24, r24
     724:	77 fd       	sbrc	r23, 7
     726:	80 95       	com	r24
     728:	98 2f       	mov	r25, r24
     72a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__floatsisf>
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__mulsf3>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 ef       	ldi	r20, 0xF0	; 240
     740:	50 e4       	ldi	r21, 0x40	; 64
     742:	0e 94 8e 0c 	call	0x191c	; 0x191c <__addsf3>
     746:	a7 01       	movw	r20, r14
     748:	96 01       	movw	r18, r12
     74a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__mulsf3>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	80 e2       	ldi	r24, 0x20	; 32
     758:	92 e4       	ldi	r25, 0x42	; 66
     75a:	0e 94 8d 0c 	call	0x191a	; 0x191a <__subsf3>
     75e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__fixsfsi>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
     762:	cb 01       	movw	r24, r22
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	03 97       	sbiw	r24, 0x03	; 3
     768:	08 f4       	brcc	.+2      	; 0x76c <navigation_direction_regulation+0x156>
     76a:	47 c0       	rjmp	.+142    	; 0x7fa <navigation_direction_regulation+0x1e4>
	{
		return 0;
	}
	else
	{
		float dir = atanf(d * gKp);
     76c:	88 27       	eor	r24, r24
     76e:	77 fd       	sbrc	r23, 7
     770:	80 95       	com	r24
     772:	98 2f       	mov	r25, r24
     774:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__floatsisf>
     778:	20 91 03 01 	lds	r18, 0x0103
     77c:	30 91 04 01 	lds	r19, 0x0104
     780:	40 91 05 01 	lds	r20, 0x0105
     784:	50 91 06 01 	lds	r21, 0x0106
     788:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__mulsf3>
     78c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <atan>
     790:	c6 2e       	mov	r12, r22
     792:	d7 2e       	mov	r13, r23
     794:	e8 2e       	mov	r14, r24
     796:	f9 2e       	mov	r15, r25
		if(dir < 0)
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	a9 01       	movw	r20, r18
     79e:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__cmpsf2>
     7a2:	88 23       	and	r24, r24
     7a4:	7c f4       	brge	.+30     	; 0x7c4 <navigation_direction_regulation+0x1ae>
		{
			dir += 2*PI;
     7a6:	2b ed       	ldi	r18, 0xDB	; 219
     7a8:	3f e0       	ldi	r19, 0x0F	; 15
     7aa:	49 ec       	ldi	r20, 0xC9	; 201
     7ac:	50 e4       	ldi	r21, 0x40	; 64
     7ae:	6c 2d       	mov	r22, r12
     7b0:	7d 2d       	mov	r23, r13
     7b2:	8e 2d       	mov	r24, r14
     7b4:	9f 2d       	mov	r25, r15
     7b6:	0e 94 8e 0c 	call	0x191c	; 0x191c <__addsf3>
     7ba:	c6 2e       	mov	r12, r22
     7bc:	d7 2e       	mov	r13, r23
     7be:	e8 2e       	mov	r14, r24
     7c0:	f9 2e       	mov	r15, r25
     7c2:	24 c0       	rjmp	.+72     	; 0x80c <navigation_direction_regulation+0x1f6>
		} else if(dir >= 2*PI)
     7c4:	2b ed       	ldi	r18, 0xDB	; 219
     7c6:	3f e0       	ldi	r19, 0x0F	; 15
     7c8:	49 ec       	ldi	r20, 0xC9	; 201
     7ca:	50 e4       	ldi	r21, 0x40	; 64
     7cc:	6c 2d       	mov	r22, r12
     7ce:	7d 2d       	mov	r23, r13
     7d0:	8e 2d       	mov	r24, r14
     7d2:	9f 2d       	mov	r25, r15
     7d4:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__gesf2>
     7d8:	88 23       	and	r24, r24
     7da:	c4 f0       	brlt	.+48     	; 0x80c <navigation_direction_regulation+0x1f6>
		{
			dir -= 2*PI;
     7dc:	2b ed       	ldi	r18, 0xDB	; 219
     7de:	3f e0       	ldi	r19, 0x0F	; 15
     7e0:	49 ec       	ldi	r20, 0xC9	; 201
     7e2:	50 e4       	ldi	r21, 0x40	; 64
     7e4:	6c 2d       	mov	r22, r12
     7e6:	7d 2d       	mov	r23, r13
     7e8:	8e 2d       	mov	r24, r14
     7ea:	9f 2d       	mov	r25, r15
     7ec:	0e 94 8d 0c 	call	0x191a	; 0x191a <__subsf3>
     7f0:	c6 2e       	mov	r12, r22
     7f2:	d7 2e       	mov	r13, r23
     7f4:	e8 2e       	mov	r14, r24
     7f6:	f9 2e       	mov	r15, r25
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <navigation_direction_regulation+0x1f6>
		}
	}
	
	if(abs(d) < ACCEPTABLE_DISTANCE_OFFSET)
	{
		return 0;
     7fa:	c1 2c       	mov	r12, r1
     7fc:	d1 2c       	mov	r13, r1
     7fe:	e1 2c       	mov	r14, r1
     800:	f1 2c       	mov	r15, r1
     802:	04 c0       	rjmp	.+8      	; 0x80c <navigation_direction_regulation+0x1f6>
     804:	c1 2c       	mov	r12, r1
     806:	d1 2c       	mov	r13, r1
     808:	e1 2c       	mov	r14, r1
     80a:	f1 2c       	mov	r15, r1
			dir -= 2*PI;
		}
		// Dir is between 0 and 2*PI radians
		return dir;
	}
}
     80c:	6c 2d       	mov	r22, r12
     80e:	7d 2d       	mov	r23, r13
     810:	8e 2d       	mov	r24, r14
     812:	9f 2d       	mov	r25, r15
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	08 95       	ret

00000822 <navigation_angle_offset>:
		PORTA ^= (1<<PORTA1);
	}
}

float navigation_angle_offset()
{
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
	float angle = 0;
	if (gAlgorithm)
     82a:	80 91 07 01 	lds	r24, 0x0107
     82e:	88 23       	and	r24, r24
     830:	09 f4       	brne	.+2      	; 0x834 <navigation_angle_offset+0x12>
     832:	6c c0       	rjmp	.+216    	; 0x90c <navigation_angle_offset+0xea>
	{
		if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	7b de       	rcall	.-778    	; 0x530 <navigation_get_sensor>
     83a:	f8 2e       	mov	r15, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	77 de       	rcall	.-786    	; 0x530 <navigation_get_sensor>
     842:	2f 2d       	mov	r18, r15
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	a9 01       	movw	r20, r18
     848:	48 1b       	sub	r20, r24
     84a:	51 09       	sbc	r21, r1
     84c:	ca 01       	movw	r24, r20
     84e:	99 23       	and	r25, r25
     850:	1c f4       	brge	.+6      	; 0x858 <navigation_angle_offset+0x36>
     852:	91 95       	neg	r25
     854:	81 95       	neg	r24
     856:	91 09       	sbc	r25, r1
     858:	0a 97       	sbiw	r24, 0x0a	; 10
     85a:	0c f5       	brge	.+66     	; 0x89e <navigation_angle_offset+0x7c>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	67 de       	rcall	.-818    	; 0x530 <navigation_get_sensor>
     862:	82 33       	cpi	r24, 0x32	; 50
     864:	e0 f4       	brcc	.+56     	; 0x89e <navigation_angle_offset+0x7c>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	62 de       	rcall	.-828    	; 0x530 <navigation_get_sensor>
     86c:	f8 2e       	mov	r15, r24
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	5e de       	rcall	.-836    	; 0x530 <navigation_get_sensor>
     874:	6f 2d       	mov	r22, r15
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	68 1b       	sub	r22, r24
     87a:	71 09       	sbc	r23, r1
     87c:	88 27       	eor	r24, r24
     87e:	77 fd       	sbrc	r23, 7
     880:	80 95       	com	r24
     882:	98 2f       	mov	r25, r24
     884:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__floatsisf>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	48 e6       	ldi	r20, 0x68	; 104
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__divsf3>
     894:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <atan>
     898:	6b 01       	movw	r12, r22
     89a:	7c 01       	movw	r14, r24
     89c:	a0 c0       	rjmp	.+320    	; 0x9de <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	46 de       	rcall	.-884    	; 0x530 <navigation_get_sensor>
     8a4:	f8 2e       	mov	r15, r24
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	42 de       	rcall	.-892    	; 0x530 <navigation_get_sensor>
     8ac:	2f 2d       	mov	r18, r15
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	a9 01       	movw	r20, r18
     8b2:	48 1b       	sub	r20, r24
     8b4:	51 09       	sbc	r21, r1
     8b6:	ca 01       	movw	r24, r20
     8b8:	99 23       	and	r25, r25
     8ba:	1c f4       	brge	.+6      	; 0x8c2 <navigation_angle_offset+0xa0>
     8bc:	91 95       	neg	r25
     8be:	81 95       	neg	r24
     8c0:	91 09       	sbc	r25, r1
     8c2:	0a 97       	sbiw	r24, 0x0a	; 10
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <navigation_angle_offset+0xa6>
     8c6:	9a c0       	rjmp	.+308    	; 0x9fc <navigation_angle_offset+0x1da>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	31 de       	rcall	.-926    	; 0x530 <navigation_get_sensor>
     8ce:	82 33       	cpi	r24, 0x32	; 50
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <navigation_angle_offset+0xb2>
     8d2:	94 c0       	rjmp	.+296    	; 0x9fc <navigation_angle_offset+0x1da>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	2b de       	rcall	.-938    	; 0x530 <navigation_get_sensor>
     8da:	f8 2e       	mov	r15, r24
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	27 de       	rcall	.-946    	; 0x530 <navigation_get_sensor>
     8e2:	6f 2d       	mov	r22, r15
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	68 1b       	sub	r22, r24
     8e8:	71 09       	sbc	r23, r1
     8ea:	88 27       	eor	r24, r24
     8ec:	77 fd       	sbrc	r23, 7
     8ee:	80 95       	com	r24
     8f0:	98 2f       	mov	r25, r24
     8f2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__floatsisf>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	48 e6       	ldi	r20, 0x68	; 104
     8fc:	51 e4       	ldi	r21, 0x41	; 65
     8fe:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__divsf3>
     902:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <atan>
     906:	6b 01       	movw	r12, r22
     908:	7c 01       	movw	r14, r24
     90a:	69 c0       	rjmp	.+210    	; 0x9de <navigation_angle_offset+0x1bc>
		}
	}
	else 
	{
		if(abs(navigation_get_sensor(1) - navigation_get_sensor(3)) < 10 && navigation_get_sensor(1) < (CORRIDOR_WIDTH / 2 + 10))
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0f de       	rcall	.-994    	; 0x530 <navigation_get_sensor>
     912:	f8 2e       	mov	r15, r24
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0b de       	rcall	.-1002   	; 0x530 <navigation_get_sensor>
     91a:	2f 2d       	mov	r18, r15
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	a9 01       	movw	r20, r18
     920:	48 1b       	sub	r20, r24
     922:	51 09       	sbc	r21, r1
     924:	ca 01       	movw	r24, r20
     926:	99 23       	and	r25, r25
     928:	1c f4       	brge	.+6      	; 0x930 <navigation_angle_offset+0x10e>
     92a:	91 95       	neg	r25
     92c:	81 95       	neg	r24
     92e:	91 09       	sbc	r25, r1
     930:	0a 97       	sbiw	r24, 0x0a	; 10
     932:	0c f5       	brge	.+66     	; 0x976 <navigation_angle_offset+0x154>
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fb dd       	rcall	.-1034   	; 0x530 <navigation_get_sensor>
     93a:	82 33       	cpi	r24, 0x32	; 50
     93c:	e0 f4       	brcc	.+56     	; 0x976 <navigation_angle_offset+0x154>
		{
			// Use wall to the right
			angle = atanf((navigation_get_sensor(1) - navigation_get_sensor(3))/DISTANCE_FRONT_TO_BACK);
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	f6 dd       	rcall	.-1044   	; 0x530 <navigation_get_sensor>
     944:	f8 2e       	mov	r15, r24
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	f2 dd       	rcall	.-1052   	; 0x530 <navigation_get_sensor>
     94c:	6f 2d       	mov	r22, r15
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	68 1b       	sub	r22, r24
     952:	71 09       	sbc	r23, r1
     954:	88 27       	eor	r24, r24
     956:	77 fd       	sbrc	r23, 7
     958:	80 95       	com	r24
     95a:	98 2f       	mov	r25, r24
     95c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__floatsisf>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	48 e6       	ldi	r20, 0x68	; 104
     966:	51 e4       	ldi	r21, 0x41	; 65
     968:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__divsf3>
     96c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <atan>
     970:	6b 01       	movw	r12, r22
     972:	7c 01       	movw	r14, r24
     974:	34 c0       	rjmp	.+104    	; 0x9de <navigation_angle_offset+0x1bc>
		}
		else if(abs(navigation_get_sensor(2) - navigation_get_sensor(0)) < 10 && navigation_get_sensor(0) < (CORRIDOR_WIDTH / 2 + 10))
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	da dd       	rcall	.-1100   	; 0x530 <navigation_get_sensor>
     97c:	f8 2e       	mov	r15, r24
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	d6 dd       	rcall	.-1108   	; 0x530 <navigation_get_sensor>
     984:	2f 2d       	mov	r18, r15
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	a9 01       	movw	r20, r18
     98a:	48 1b       	sub	r20, r24
     98c:	51 09       	sbc	r21, r1
     98e:	ca 01       	movw	r24, r20
     990:	99 23       	and	r25, r25
     992:	1c f4       	brge	.+6      	; 0x99a <navigation_angle_offset+0x178>
     994:	91 95       	neg	r25
     996:	81 95       	neg	r24
     998:	91 09       	sbc	r25, r1
     99a:	0a 97       	sbiw	r24, 0x0a	; 10
     99c:	7c f5       	brge	.+94     	; 0x9fc <navigation_angle_offset+0x1da>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	c6 dd       	rcall	.-1140   	; 0x530 <navigation_get_sensor>
     9a4:	82 33       	cpi	r24, 0x32	; 50
     9a6:	50 f5       	brcc	.+84     	; 0x9fc <navigation_angle_offset+0x1da>
		{
			// Use wall to the left
			angle = atanf((navigation_get_sensor(2) - navigation_get_sensor(0))/DISTANCE_FRONT_TO_BACK);
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	c1 dd       	rcall	.-1150   	; 0x530 <navigation_get_sensor>
     9ae:	f8 2e       	mov	r15, r24
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	bd dd       	rcall	.-1158   	; 0x530 <navigation_get_sensor>
     9b6:	6f 2d       	mov	r22, r15
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	68 1b       	sub	r22, r24
     9bc:	71 09       	sbc	r23, r1
     9be:	88 27       	eor	r24, r24
     9c0:	77 fd       	sbrc	r23, 7
     9c2:	80 95       	com	r24
     9c4:	98 2f       	mov	r25, r24
     9c6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__floatsisf>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	48 e6       	ldi	r20, 0x68	; 104
     9d0:	51 e4       	ldi	r21, 0x41	; 65
     9d2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__divsf3>
     9d6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <atan>
     9da:	6b 01       	movw	r12, r22
     9dc:	7c 01       	movw	r14, r24
		}
	}
	
	if(fabs(angle) > ACCEPTABLE_OFFSET_ANGLE)
     9de:	c7 01       	movw	r24, r14
     9e0:	b6 01       	movw	r22, r12
     9e2:	9f 77       	andi	r25, 0x7F	; 127
     9e4:	29 e2       	ldi	r18, 0x29	; 41
     9e6:	3c e5       	ldi	r19, 0x5C	; 92
     9e8:	4f e8       	ldi	r20, 0x8F	; 143
     9ea:	5d e3       	ldi	r21, 0x3D	; 61
     9ec:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__gesf2>
     9f0:	18 16       	cp	r1, r24
     9f2:	3c f0       	brlt	.+14     	; 0xa02 <navigation_angle_offset+0x1e0>
	{
		return angle;
	}
	else
	{
		return 0;
     9f4:	c1 2c       	mov	r12, r1
     9f6:	d1 2c       	mov	r13, r1
     9f8:	76 01       	movw	r14, r12
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <navigation_angle_offset+0x1e0>
     9fc:	c1 2c       	mov	r12, r1
     9fe:	d1 2c       	mov	r13, r1
     a00:	76 01       	movw	r14, r12
     a02:	7c 2d       	mov	r23, r12
	}
}
     a04:	67 2f       	mov	r22, r23
     a06:	7d 2d       	mov	r23, r13
     a08:	8e 2d       	mov	r24, r14
     a0a:	9f 2d       	mov	r25, r15
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <__vector_1>:

//-------------------------------Interrupts--------------------------------

//External interrupt INT0, to activate autonomous walk and set left hand navigation
ISR(INT0_vect)
{
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	0b b6       	in	r0, 0x3b	; 59
     a22:	0f 92       	push	r0
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	4f 93       	push	r20
     a2a:	5f 93       	push	r21
     a2c:	6f 93       	push	r22
     a2e:	7f 93       	push	r23
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	af 93       	push	r26
     a36:	bf 93       	push	r27
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
	navigation_set_algorithm(1); //Left hand
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	2b dd       	rcall	.-1450   	; 0x496 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	2f dd       	rcall	.-1442   	; 0x4a2 <navigation_set_autonomous_walk>
}
     a44:	ff 91       	pop	r31
     a46:	ef 91       	pop	r30
     a48:	bf 91       	pop	r27
     a4a:	af 91       	pop	r26
     a4c:	9f 91       	pop	r25
     a4e:	8f 91       	pop	r24
     a50:	7f 91       	pop	r23
     a52:	6f 91       	pop	r22
     a54:	5f 91       	pop	r21
     a56:	4f 91       	pop	r20
     a58:	3f 91       	pop	r19
     a5a:	2f 91       	pop	r18
     a5c:	0f 90       	pop	r0
     a5e:	0b be       	out	0x3b, r0	; 59
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <__vector_2>:

//External interrupt INT1, to activate autonomous walk and set right hand navigation
ISR(INT1_vect)
{
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	0f 92       	push	r0
     a72:	11 24       	eor	r1, r1
     a74:	0b b6       	in	r0, 0x3b	; 59
     a76:	0f 92       	push	r0
     a78:	2f 93       	push	r18
     a7a:	3f 93       	push	r19
     a7c:	4f 93       	push	r20
     a7e:	5f 93       	push	r21
     a80:	6f 93       	push	r22
     a82:	7f 93       	push	r23
     a84:	8f 93       	push	r24
     a86:	9f 93       	push	r25
     a88:	af 93       	push	r26
     a8a:	bf 93       	push	r27
     a8c:	ef 93       	push	r30
     a8e:	ff 93       	push	r31
	navigation_set_algorithm(0); //Right hand
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	01 dd       	rcall	.-1534   	; 0x496 <navigation_set_algorithm>
	navigation_set_autonomous_walk(1);
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	05 dd       	rcall	.-1526   	; 0x4a2 <navigation_set_autonomous_walk>
     a98:	ff 91       	pop	r31
     a9a:	ef 91       	pop	r30
     a9c:	bf 91       	pop	r27
     a9e:	af 91       	pop	r26
     aa0:	9f 91       	pop	r25
     aa2:	8f 91       	pop	r24
     aa4:	7f 91       	pop	r23
     aa6:	6f 91       	pop	r22
     aa8:	5f 91       	pop	r21
     aaa:	4f 91       	pop	r20
     aac:	3f 91       	pop	r19
     aae:	2f 91       	pop	r18
     ab0:	0f 90       	pop	r0
     ab2:	0b be       	out	0x3b, r0	; 59
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <main>:
#include "Navigation.h"
#include "autonomouswalk.h"

int main(void)
{
	USART_init();
     abe:	34 d4       	rcall	.+2152   	; 0x1328 <USART_init>
	USART_set_twi_message_destination(C_ADDRESS); // send messages from gang to the display, not the computer
     ac0:	80 e8       	ldi	r24, 0x80	; 128
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	3d d4       	rcall	.+2170   	; 0x1340 <USART_set_twi_message_destination>
	sei();
     ac6:	78 94       	sei
	TWI_init(ST_ADDRESS);
     ac8:	80 e2       	ldi	r24, 0x20	; 32
     aca:	f7 d0       	rcall	.+494    	; 0xcba <TWI_init>
	init_counters();
     acc:	64 dc       	rcall	.-1848   	; 0x396 <init_counters>
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
     ace:	81 b1       	in	r24, 0x01	; 1
     ad0:	83 60       	ori	r24, 0x03	; 3
     ad2:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	83 e2       	ldi	r24, 0x23	; 35
     ad8:	94 ef       	ldi	r25, 0xF4	; 244
     ada:	21 50       	subi	r18, 0x01	; 1
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	e1 f7       	brne	.-8      	; 0xada <main+0x1c>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <main+0x26>
     ae4:	00 00       	nop
	
	_delay_ms(5000);
	navigation_set_autonomous_walk(0);
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	dc dc       	rcall	.-1608   	; 0x4a2 <navigation_set_autonomous_walk>
		}
		else
		{
			if(TWI_command_flag())
			{
				PORTA ^= (1<<PORTA1);
     aea:	c2 e0       	ldi	r28, 0x02	; 2
		/*if(TWI_sensor_flag())
		{
			PORTA ^= (1<<PORTA1);
			navigation_fill_buffer();
		}*/
		if(TWI_autonom_settings_flag())
     aec:	46 d2       	rcall	.+1164   	; 0xf7a <TWI_autonom_settings_flag>
     aee:	88 23       	and	r24, r24
     af0:	79 f0       	breq	.+30     	; 0xb10 <main+0x52>
		{
			uint8_t sett = TWI_get_autonom_settings();
     af2:	29 d2       	rcall	.+1106   	; 0xf46 <TWI_get_autonom_settings>
			if(sett == 0)
     af4:	81 11       	cpse	r24, r1
     af6:	02 c0       	rjmp	.+4      	; 0xafc <main+0x3e>
			{
				navigation_set_autonomous_walk(0);
     af8:	d4 dc       	rcall	.-1624   	; 0x4a2 <navigation_set_autonomous_walk>
     afa:	0a c0       	rjmp	.+20     	; 0xb10 <main+0x52>
			}
			else if(sett == 1)
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	21 f4       	brne	.+8      	; 0xb08 <main+0x4a>
			{
				navigation_set_autonomous_walk(1);
     b00:	d0 dc       	rcall	.-1632   	; 0x4a2 <navigation_set_autonomous_walk>
				navigation_set_algorithm(1);
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	c8 dc       	rcall	.-1648   	; 0x496 <navigation_set_algorithm>
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <main+0x52>
			}
			else //sett == 2
			{
				navigation_set_autonomous_walk(1);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	cb dc       	rcall	.-1642   	; 0x4a2 <navigation_set_autonomous_walk>
				navigation_set_algorithm(0);
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	c3 dc       	rcall	.-1658   	; 0x496 <navigation_set_algorithm>
			}
		}
		
		if(navigation_autonomous_walk() == 1)
     b10:	c5 dc       	rcall	.-1654   	; 0x49c <navigation_autonomous_walk>
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	49 f4       	brne	.+18     	; 0xb28 <main+0x6a>
		{
			if(TWI_control_settings_flag())
     b16:	27 d2       	rcall	.+1102   	; 0xf66 <TWI_control_settings_flag>
     b18:	88 23       	and	r24, r24
     b1a:	21 f0       	breq	.+8      	; 0xb24 <main+0x66>
			{
				navigation_set_Kp(TWI_get_control_setting(0));
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0d d2       	rcall	.+1050   	; 0xf3c <TWI_get_control_setting>
     b22:	a7 dc       	rcall	.-1714   	; 0x472 <navigation_set_Kp>
			}
			autonomouswalk_walk();
     b24:	d3 db       	rcall	.-2138   	; 0x2cc <autonomouswalk_walk>
     b26:	0f c0       	rjmp	.+30     	; 0xb46 <main+0x88>
		}
		else
		{
			if(TWI_command_flag())
     b28:	14 d2       	rcall	.+1064   	; 0xf52 <TWI_command_flag>
     b2a:	88 23       	and	r24, r24
     b2c:	21 f0       	breq	.+8      	; 0xb36 <main+0x78>
			{
				PORTA ^= (1<<PORTA1);
     b2e:	82 b1       	in	r24, 0x02	; 2
     b30:	8c 27       	eor	r24, r28
     b32:	82 b9       	out	0x02, r24	; 2
				USART_SendCommand();
     b34:	d0 d4       	rcall	.+2464   	; 0x14d6 <USART_SendCommand>
			}
			
			if(TWI_elevation_flag())
     b36:	2b d2       	rcall	.+1110   	; 0xf8e <TWI_elevation_flag>
     b38:	88 23       	and	r24, r24
     b3a:	29 f0       	breq	.+10     	; 0xb46 <main+0x88>
			{
				PORTA ^= (1<<PORTA0);
     b3c:	92 b1       	in	r25, 0x02	; 2
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	89 27       	eor	r24, r25
     b42:	82 b9       	out	0x02, r24	; 2
				USART_SendElevation();
     b44:	da d4       	rcall	.+2484   	; 0x14fa <USART_SendElevation>
			}
		}
		
		USART_DecodeRxFIFO();
     b46:	2c d6       	rcall	.+3160   	; 0x17a0 <USART_DecodeRxFIFO>
    }
     b48:	d1 cf       	rjmp	.-94     	; 0xaec <main+0x2e>

00000b4a <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     b4a:	1f 92       	push	r1
     b4c:	0f 92       	push	r0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	0f 92       	push	r0
     b52:	11 24       	eor	r1, r1
	TCNT1 = 0;
     b54:	10 92 85 00 	sts	0x0085, r1
     b58:	10 92 84 00 	sts	0x0084, r1
}
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
	//TWI_send_float(C_ADDRESS, (float)navigation_get_sensor(0));
	TCNT3 = 0;
     b70:	10 92 95 00 	sts	0x0095, r1
     b74:	10 92 94 00 	sts	0x0094, r1
}
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <set_twi_reciever_enable>:
	
	//Do something with the message here... Send to display for now
	TWI_send_string_fixed_length(S_ADDRESS, msg, length);
	
	return 0;
}
     b82:	85 e4       	ldi	r24, 0x45	; 69
     b84:	80 93 bc 00 	sts	0x00BC, r24
     b88:	08 95       	ret

00000b8a <clear_int>:
     b8a:	81 ec       	ldi	r24, 0xC1	; 193
     b8c:	80 93 bc 00 	sts	0x00BC, r24
     b90:	08 95       	ret

00000b92 <start_bus>:
     b92:	84 ea       	ldi	r24, 0xA4	; 164
     b94:	80 93 bc 00 	sts	0x00BC, r24
     b98:	08 95       	ret

00000b9a <stop_bus>:
     b9a:	85 ed       	ldi	r24, 0xD5	; 213
     b9c:	80 93 bc 00 	sts	0x00BC, r24
     ba0:	08 95       	ret

00000ba2 <Error>:
     ba2:	80 91 b9 00 	lds	r24, 0x00B9
     ba6:	88 7f       	andi	r24, 0xF8	; 248
     ba8:	88 33       	cpi	r24, 0x38	; 56
     baa:	09 f0       	breq	.+2      	; 0xbae <Error+0xc>
     bac:	f6 cf       	rjmp	.-20     	; 0xb9a <stop_bus>
     bae:	ed cf       	rjmp	.-38     	; 0xb8a <clear_int>

00000bb0 <get_data>:
     bb0:	80 91 bb 00 	lds	r24, 0x00BB
     bb4:	08 95       	ret

00000bb6 <wait_for_bus>:
     bb6:	ec eb       	ldi	r30, 0xBC	; 188
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	88 23       	and	r24, r24
     bbe:	ec f7       	brge	.-6      	; 0xbba <wait_for_bus+0x4>
     bc0:	08 95       	ret

00000bc2 <send_data_and_wait>:
     bc2:	80 93 bb 00 	sts	0x00BB, r24
     bc6:	84 e8       	ldi	r24, 0x84	; 132
     bc8:	80 93 bc 00 	sts	0x00BC, r24
     bcc:	f4 cf       	rjmp	.-24     	; 0xbb6 <wait_for_bus>

00000bce <stop_twi>:
     bce:	10 92 3b 14 	sts	0x143B, r1
     bd2:	10 92 3a 14 	sts	0x143A, r1
     bd6:	10 92 45 14 	sts	0x1445, r1
     bda:	10 92 44 14 	sts	0x1444, r1
     bde:	10 92 30 14 	sts	0x1430, r1
     be2:	10 92 2f 14 	sts	0x142F, r1
     be6:	10 92 35 14 	sts	0x1435, r1
     bea:	10 92 34 14 	sts	0x1434, r1
     bee:	10 92 38 14 	sts	0x1438, r1
     bf2:	10 92 37 14 	sts	0x1437, r1
     bf6:	08 95       	ret

00000bf8 <reset_TWI>:
     bf8:	ec eb       	ldi	r30, 0xBC	; 188
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	80 6c       	ori	r24, 0xC0	; 192
     c00:	80 83       	st	Z, r24
     c02:	08 95       	ret

00000c04 <get_control_settings_from_bus>:
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	c0 91 34 14 	lds	r28, 0x1434
     c0c:	d0 91 35 14 	lds	r29, 0x1435
     c10:	cf df       	rcall	.-98     	; 0xbb0 <get_data>
     c12:	cf 5c       	subi	r28, 0xCF	; 207
     c14:	db 4e       	sbci	r29, 0xEB	; 235
     c16:	88 83       	st	Y, r24
     c18:	10 92 35 14 	sts	0x1435, r1
     c1c:	10 92 34 14 	sts	0x1434, r1
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <get_autonom_settings_from_bus>:
     c26:	c4 df       	rcall	.-120    	; 0xbb0 <get_data>
     c28:	80 93 2f 13 	sts	0x132F, r24
     c2c:	08 95       	ret

00000c2e <get_char_from_bus>:
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	c0 91 2f 14 	lds	r28, 0x142F
     c36:	d0 91 30 14 	lds	r29, 0x1430
     c3a:	ba df       	rcall	.-140    	; 0xbb0 <get_data>
     c3c:	c0 5d       	subi	r28, 0xD0	; 208
     c3e:	dc 4e       	sbci	r29, 0xEC	; 236
     c40:	88 83       	st	Y, r24
     c42:	80 91 2f 14 	lds	r24, 0x142F
     c46:	90 91 30 14 	lds	r25, 0x1430
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	90 93 30 14 	sts	0x1430, r25
     c50:	80 93 2f 14 	sts	0x142F, r24
     c54:	90 93 40 14 	sts	0x1440, r25
     c58:	80 93 3f 14 	sts	0x143F, r24
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <get_sensor_from_bus>:
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	c0 91 44 14 	lds	r28, 0x1444
     c6a:	d0 91 45 14 	lds	r29, 0x1445
     c6e:	c8 30       	cpi	r28, 0x08	; 8
     c70:	d1 05       	cpc	r29, r1
     c72:	99 f4       	brne	.+38     	; 0xc9a <get_sensor_from_bus+0x38>
     c74:	e6 e4       	ldi	r30, 0x46	; 70
     c76:	f4 e1       	ldi	r31, 0x14	; 20
     c78:	ae e4       	ldi	r26, 0x4E	; 78
     c7a:	b4 e1       	ldi	r27, 0x14	; 20
     c7c:	8e e4       	ldi	r24, 0x4E	; 78
     c7e:	94 e1       	ldi	r25, 0x14	; 20
     c80:	21 91       	ld	r18, Z+
     c82:	2d 93       	st	X+, r18
     c84:	e8 17       	cp	r30, r24
     c86:	f9 07       	cpc	r31, r25
     c88:	d9 f7       	brne	.-10     	; 0xc80 <get_sensor_from_bus+0x1e>
     c8a:	92 df       	rcall	.-220    	; 0xbb0 <get_data>
     c8c:	80 93 3e 14 	sts	0x143E, r24
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	80 93 e2 12 	sts	0x12E2, r24
     c96:	1f dc       	rcall	.-1986   	; 0x4d6 <navigation_fill_buffer>
     c98:	0d c0       	rjmp	.+26     	; 0xcb4 <get_sensor_from_bus+0x52>
     c9a:	8a df       	rcall	.-236    	; 0xbb0 <get_data>
     c9c:	ca 5b       	subi	r28, 0xBA	; 186
     c9e:	db 4e       	sbci	r29, 0xEB	; 235
     ca0:	88 83       	st	Y, r24
     ca2:	80 91 44 14 	lds	r24, 0x1444
     ca6:	90 91 45 14 	lds	r25, 0x1445
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	90 93 45 14 	sts	0x1445, r25
     cb0:	80 93 44 14 	sts	0x1444, r24
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <TWI_init>:
     cba:	80 93 36 14 	sts	0x1436, r24
     cbe:	80 34       	cpi	r24, 0x40	; 64
     cc0:	79 f0       	breq	.+30     	; 0xce0 <TWI_init+0x26>
     cc2:	80 38       	cpi	r24, 0x80	; 128
     cc4:	19 f0       	breq	.+6      	; 0xccc <TWI_init+0x12>
     cc6:	80 32       	cpi	r24, 0x20	; 32
     cc8:	d1 f4       	brne	.+52     	; 0xcfe <TWI_init+0x44>
     cca:	12 c0       	rjmp	.+36     	; 0xcf0 <TWI_init+0x36>
     ccc:	83 e0       	ldi	r24, 0x03	; 3
     cce:	88 b9       	out	0x08, r24	; 8
     cd0:	58 df       	rcall	.-336    	; 0xb82 <set_twi_reciever_enable>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	80 93 b8 00 	sts	0x00B8, r24
     cd8:	81 e8       	ldi	r24, 0x81	; 129
     cda:	80 93 ba 00 	sts	0x00BA, r24
     cde:	08 95       	ret
     ce0:	8f e3       	ldi	r24, 0x3F	; 63
     ce2:	80 93 b8 00 	sts	0x00B8, r24
     ce6:	4d df       	rcall	.-358    	; 0xb82 <set_twi_reciever_enable>
     ce8:	80 e4       	ldi	r24, 0x40	; 64
     cea:	80 93 ba 00 	sts	0x00BA, r24
     cee:	08 95       	ret
     cf0:	8f e3       	ldi	r24, 0x3F	; 63
     cf2:	80 93 b8 00 	sts	0x00B8, r24
     cf6:	45 df       	rcall	.-374    	; 0xb82 <set_twi_reciever_enable>
     cf8:	81 e2       	ldi	r24, 0x21	; 33
     cfa:	80 93 ba 00 	sts	0x00BA, r24
     cfe:	08 95       	ret

00000d00 <TWI_send_command>:
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	c8 2f       	mov	r28, r24
     d08:	d6 2f       	mov	r29, r22
     d0a:	14 2f       	mov	r17, r20
     d0c:	42 df       	rcall	.-380    	; 0xb92 <start_bus>
     d0e:	53 df       	rcall	.-346    	; 0xbb6 <wait_for_bus>
     d10:	90 91 b9 00 	lds	r25, 0x00B9
     d14:	98 7f       	andi	r25, 0xF8	; 248
     d16:	98 30       	cpi	r25, 0x08	; 8
     d18:	19 f0       	breq	.+6      	; 0xd20 <TWI_send_command+0x20>
     d1a:	43 df       	rcall	.-378    	; 0xba2 <Error>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	34 c0       	rjmp	.+104    	; 0xd88 <TWI_send_command+0x88>
     d20:	80 e2       	ldi	r24, 0x20	; 32
     d22:	4f df       	rcall	.-354    	; 0xbc2 <send_data_and_wait>
     d24:	80 91 b9 00 	lds	r24, 0x00B9
     d28:	88 7f       	andi	r24, 0xF8	; 248
     d2a:	88 31       	cpi	r24, 0x18	; 24
     d2c:	19 f0       	breq	.+6      	; 0xd34 <TWI_send_command+0x34>
     d2e:	39 df       	rcall	.-398    	; 0xba2 <Error>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	2a c0       	rjmp	.+84     	; 0xd88 <TWI_send_command+0x88>
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	45 df       	rcall	.-374    	; 0xbc2 <send_data_and_wait>
     d38:	80 91 b9 00 	lds	r24, 0x00B9
     d3c:	88 7f       	andi	r24, 0xF8	; 248
     d3e:	88 32       	cpi	r24, 0x28	; 40
     d40:	19 f0       	breq	.+6      	; 0xd48 <TWI_send_command+0x48>
     d42:	2f df       	rcall	.-418    	; 0xba2 <Error>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	20 c0       	rjmp	.+64     	; 0xd88 <TWI_send_command+0x88>
     d48:	8c 2f       	mov	r24, r28
     d4a:	3b df       	rcall	.-394    	; 0xbc2 <send_data_and_wait>
     d4c:	80 91 b9 00 	lds	r24, 0x00B9
     d50:	88 7f       	andi	r24, 0xF8	; 248
     d52:	88 32       	cpi	r24, 0x28	; 40
     d54:	19 f0       	breq	.+6      	; 0xd5c <TWI_send_command+0x5c>
     d56:	25 df       	rcall	.-438    	; 0xba2 <Error>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	16 c0       	rjmp	.+44     	; 0xd88 <TWI_send_command+0x88>
     d5c:	8d 2f       	mov	r24, r29
     d5e:	31 df       	rcall	.-414    	; 0xbc2 <send_data_and_wait>
     d60:	80 91 b9 00 	lds	r24, 0x00B9
     d64:	88 7f       	andi	r24, 0xF8	; 248
     d66:	88 32       	cpi	r24, 0x28	; 40
     d68:	19 f0       	breq	.+6      	; 0xd70 <TWI_send_command+0x70>
     d6a:	1b df       	rcall	.-458    	; 0xba2 <Error>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	0c c0       	rjmp	.+24     	; 0xd88 <TWI_send_command+0x88>
     d70:	81 2f       	mov	r24, r17
     d72:	27 df       	rcall	.-434    	; 0xbc2 <send_data_and_wait>
     d74:	80 91 b9 00 	lds	r24, 0x00B9
     d78:	88 7f       	andi	r24, 0xF8	; 248
     d7a:	88 32       	cpi	r24, 0x28	; 40
     d7c:	19 f0       	breq	.+6      	; 0xd84 <TWI_send_command+0x84>
     d7e:	11 df       	rcall	.-478    	; 0xba2 <Error>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <TWI_send_command+0x88>
     d84:	0a df       	rcall	.-492    	; 0xb9a <stop_bus>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	08 95       	ret

00000d90 <TWI_send_string>:
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	c8 2f       	mov	r28, r24
     d9e:	e6 2e       	mov	r14, r22
     da0:	f7 2e       	mov	r15, r23
     da2:	f7 de       	rcall	.-530    	; 0xb92 <start_bus>
     da4:	08 df       	rcall	.-496    	; 0xbb6 <wait_for_bus>
     da6:	90 91 b9 00 	lds	r25, 0x00B9
     daa:	98 7f       	andi	r25, 0xF8	; 248
     dac:	98 30       	cpi	r25, 0x08	; 8
     dae:	19 f0       	breq	.+6      	; 0xdb6 <TWI_send_string+0x26>
     db0:	f8 de       	rcall	.-528    	; 0xba2 <Error>
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	2c c0       	rjmp	.+88     	; 0xe0e <TWI_send_string+0x7e>
     db6:	8c 2f       	mov	r24, r28
     db8:	04 df       	rcall	.-504    	; 0xbc2 <send_data_and_wait>
     dba:	80 91 b9 00 	lds	r24, 0x00B9
     dbe:	88 7f       	andi	r24, 0xF8	; 248
     dc0:	88 31       	cpi	r24, 0x18	; 24
     dc2:	19 f0       	breq	.+6      	; 0xdca <TWI_send_string+0x3a>
     dc4:	ee de       	rcall	.-548    	; 0xba2 <Error>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	22 c0       	rjmp	.+68     	; 0xe0e <TWI_send_string+0x7e>
     dca:	89 e1       	ldi	r24, 0x19	; 25
     dcc:	fa de       	rcall	.-524    	; 0xbc2 <send_data_and_wait>
     dce:	80 91 b9 00 	lds	r24, 0x00B9
     dd2:	88 7f       	andi	r24, 0xF8	; 248
     dd4:	88 32       	cpi	r24, 0x28	; 40
     dd6:	29 f4       	brne	.+10     	; 0xde2 <TWI_send_string+0x52>
     dd8:	0e 2d       	mov	r16, r14
     dda:	1f 2d       	mov	r17, r15
     ddc:	c0 e0       	ldi	r28, 0x00	; 0
     dde:	d0 e0       	ldi	r29, 0x00	; 0
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <TWI_send_string+0x62>
     de2:	df de       	rcall	.-578    	; 0xba2 <Error>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	13 c0       	rjmp	.+38     	; 0xe0e <TWI_send_string+0x7e>
     de8:	f8 01       	movw	r30, r16
     dea:	81 91       	ld	r24, Z+
     dec:	8f 01       	movw	r16, r30
     dee:	e9 de       	rcall	.-558    	; 0xbc2 <send_data_and_wait>
     df0:	21 96       	adiw	r28, 0x01	; 1
     df2:	ee 2d       	mov	r30, r14
     df4:	ff 2d       	mov	r31, r15
     df6:	df 01       	movw	r26, r30
     df8:	0d 90       	ld	r0, X+
     dfa:	00 20       	and	r0, r0
     dfc:	e9 f7       	brne	.-6      	; 0xdf8 <TWI_send_string+0x68>
     dfe:	11 97       	sbiw	r26, 0x01	; 1
     e00:	ae 1b       	sub	r26, r30
     e02:	bf 0b       	sbc	r27, r31
     e04:	ca 17       	cp	r28, r26
     e06:	db 07       	cpc	r29, r27
     e08:	78 f3       	brcs	.-34     	; 0xde8 <TWI_send_string+0x58>
     e0a:	c7 de       	rcall	.-626    	; 0xb9a <stop_bus>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	08 95       	ret

00000e1c <TWI_send_string_fixed_length>:
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	c8 2f       	mov	r28, r24
     e2a:	e6 2e       	mov	r14, r22
     e2c:	f7 2e       	mov	r15, r23
     e2e:	8a 01       	movw	r16, r20
     e30:	b0 de       	rcall	.-672    	; 0xb92 <start_bus>
     e32:	c1 de       	rcall	.-638    	; 0xbb6 <wait_for_bus>
     e34:	90 91 b9 00 	lds	r25, 0x00B9
     e38:	98 7f       	andi	r25, 0xF8	; 248
     e3a:	98 30       	cpi	r25, 0x08	; 8
     e3c:	19 f0       	breq	.+6      	; 0xe44 <TWI_send_string_fixed_length+0x28>
     e3e:	b1 de       	rcall	.-670    	; 0xba2 <Error>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	23 c0       	rjmp	.+70     	; 0xe8a <TWI_send_string_fixed_length+0x6e>
     e44:	8c 2f       	mov	r24, r28
     e46:	bd de       	rcall	.-646    	; 0xbc2 <send_data_and_wait>
     e48:	80 91 b9 00 	lds	r24, 0x00B9
     e4c:	88 7f       	andi	r24, 0xF8	; 248
     e4e:	88 31       	cpi	r24, 0x18	; 24
     e50:	19 f0       	breq	.+6      	; 0xe58 <TWI_send_string_fixed_length+0x3c>
     e52:	a7 de       	rcall	.-690    	; 0xba2 <Error>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	19 c0       	rjmp	.+50     	; 0xe8a <TWI_send_string_fixed_length+0x6e>
     e58:	89 e1       	ldi	r24, 0x19	; 25
     e5a:	b3 de       	rcall	.-666    	; 0xbc2 <send_data_and_wait>
     e5c:	80 91 b9 00 	lds	r24, 0x00B9
     e60:	88 7f       	andi	r24, 0xF8	; 248
     e62:	88 32       	cpi	r24, 0x28	; 40
     e64:	21 f4       	brne	.+8      	; 0xe6e <TWI_send_string_fixed_length+0x52>
     e66:	10 16       	cp	r1, r16
     e68:	11 06       	cpc	r1, r17
     e6a:	24 f0       	brlt	.+8      	; 0xe74 <TWI_send_string_fixed_length+0x58>
     e6c:	0c c0       	rjmp	.+24     	; 0xe86 <TWI_send_string_fixed_length+0x6a>
     e6e:	99 de       	rcall	.-718    	; 0xba2 <Error>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0b c0       	rjmp	.+22     	; 0xe8a <TWI_send_string_fixed_length+0x6e>
     e74:	ce 2d       	mov	r28, r14
     e76:	df 2d       	mov	r29, r15
     e78:	0c 0f       	add	r16, r28
     e7a:	1d 1f       	adc	r17, r29
     e7c:	89 91       	ld	r24, Y+
     e7e:	a1 de       	rcall	.-702    	; 0xbc2 <send_data_and_wait>
     e80:	c0 17       	cp	r28, r16
     e82:	d1 07       	cpc	r29, r17
     e84:	d9 f7       	brne	.-10     	; 0xe7c <TWI_send_string_fixed_length+0x60>
     e86:	89 de       	rcall	.-750    	; 0xb9a <stop_bus>
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	08 95       	ret

00000e98 <TWI_send_float>:
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <TWI_send_float+0xe>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <TWI_send_float+0x10>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	18 2f       	mov	r17, r24
     eae:	49 83       	std	Y+1, r20	; 0x01
     eb0:	5a 83       	std	Y+2, r21	; 0x02
     eb2:	6b 83       	std	Y+3, r22	; 0x03
     eb4:	7c 83       	std	Y+4, r23	; 0x04
     eb6:	6d de       	rcall	.-806    	; 0xb92 <start_bus>
     eb8:	7e de       	rcall	.-772    	; 0xbb6 <wait_for_bus>
     eba:	90 91 b9 00 	lds	r25, 0x00B9
     ebe:	98 7f       	andi	r25, 0xF8	; 248
     ec0:	98 30       	cpi	r25, 0x08	; 8
     ec2:	19 f0       	breq	.+6      	; 0xeca <TWI_send_float+0x32>
     ec4:	6e de       	rcall	.-804    	; 0xba2 <Error>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	24 c0       	rjmp	.+72     	; 0xf12 <TWI_send_float+0x7a>
     eca:	81 2f       	mov	r24, r17
     ecc:	7a de       	rcall	.-780    	; 0xbc2 <send_data_and_wait>
     ece:	80 91 b9 00 	lds	r24, 0x00B9
     ed2:	88 7f       	andi	r24, 0xF8	; 248
     ed4:	88 31       	cpi	r24, 0x18	; 24
     ed6:	19 f0       	breq	.+6      	; 0xede <TWI_send_float+0x46>
     ed8:	64 de       	rcall	.-824    	; 0xba2 <Error>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	1a c0       	rjmp	.+52     	; 0xf12 <TWI_send_float+0x7a>
     ede:	86 e0       	ldi	r24, 0x06	; 6
     ee0:	70 de       	rcall	.-800    	; 0xbc2 <send_data_and_wait>
     ee2:	80 91 b9 00 	lds	r24, 0x00B9
     ee6:	88 7f       	andi	r24, 0xF8	; 248
     ee8:	88 32       	cpi	r24, 0x28	; 40
     eea:	19 f0       	breq	.+6      	; 0xef2 <TWI_send_float+0x5a>
     eec:	5a de       	rcall	.-844    	; 0xba2 <Error>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	10 c0       	rjmp	.+32     	; 0xf12 <TWI_send_float+0x7a>
     ef2:	8e 01       	movw	r16, r28
     ef4:	0f 5f       	subi	r16, 0xFF	; 255
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	7e 01       	movw	r14, r28
     efa:	85 e0       	ldi	r24, 0x05	; 5
     efc:	e8 0e       	add	r14, r24
     efe:	f1 1c       	adc	r15, r1
     f00:	f8 01       	movw	r30, r16
     f02:	81 91       	ld	r24, Z+
     f04:	8f 01       	movw	r16, r30
     f06:	5d de       	rcall	.-838    	; 0xbc2 <send_data_and_wait>
     f08:	0e 15       	cp	r16, r14
     f0a:	1f 05       	cpc	r17, r15
     f0c:	c9 f7       	brne	.-14     	; 0xf00 <TWI_send_float+0x68>
     f0e:	45 de       	rcall	.-886    	; 0xb9a <stop_bus>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	08 95       	ret

00000f28 <TWI_get_command>:
     f28:	84 5d       	subi	r24, 0xD4	; 212
     f2a:	9c 4e       	sbci	r25, 0xEC	; 236
     f2c:	fc 01       	movw	r30, r24
     f2e:	80 81       	ld	r24, Z
     f30:	08 95       	ret

00000f32 <TWI_get_sensor>:
     f32:	82 5b       	subi	r24, 0xB2	; 178
     f34:	9b 4e       	sbci	r25, 0xEB	; 235
     f36:	fc 01       	movw	r30, r24
     f38:	80 81       	ld	r24, Z
     f3a:	08 95       	ret

00000f3c <TWI_get_control_setting>:
     f3c:	8f 5c       	subi	r24, 0xCF	; 207
     f3e:	9b 4e       	sbci	r25, 0xEB	; 235
     f40:	fc 01       	movw	r30, r24
     f42:	80 81       	ld	r24, Z
     f44:	08 95       	ret

00000f46 <TWI_get_autonom_settings>:
     f46:	80 91 2f 13 	lds	r24, 0x132F
     f4a:	08 95       	ret

00000f4c <TWI_get_elevation>:
     f4c:	80 91 3c 14 	lds	r24, 0x143C
     f50:	08 95       	ret

00000f52 <TWI_command_flag>:
     f52:	80 91 e1 12 	lds	r24, 0x12E1
     f56:	88 23       	and	r24, r24
     f58:	21 f0       	breq	.+8      	; 0xf62 <TWI_command_flag+0x10>
     f5a:	10 92 e1 12 	sts	0x12E1, r1
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	08 95       	ret
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	08 95       	ret

00000f66 <TWI_control_settings_flag>:
     f66:	80 91 e0 12 	lds	r24, 0x12E0
     f6a:	88 23       	and	r24, r24
     f6c:	21 f0       	breq	.+8      	; 0xf76 <TWI_control_settings_flag+0x10>
     f6e:	10 92 e0 12 	sts	0x12E0, r1
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	08 95       	ret
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	08 95       	ret

00000f7a <TWI_autonom_settings_flag>:
     f7a:	80 91 df 12 	lds	r24, 0x12DF
     f7e:	88 23       	and	r24, r24
     f80:	21 f0       	breq	.+8      	; 0xf8a <TWI_autonom_settings_flag+0x10>
     f82:	10 92 df 12 	sts	0x12DF, r1
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	08 95       	ret
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	08 95       	ret

00000f8e <TWI_elevation_flag>:
     f8e:	80 91 de 12 	lds	r24, 0x12DE
     f92:	88 23       	and	r24, r24
     f94:	21 f0       	breq	.+8      	; 0xf9e <TWI_elevation_flag+0x10>
     f96:	10 92 de 12 	sts	0x12DE, r1
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	08 95       	ret
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	08 95       	ret

00000fa2 <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	d8 2f       	mov	r29, r24
     fac:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
     fae:	60 91 3f 14 	lds	r22, 0x143F
     fb2:	80 91 08 01 	lds	r24, 0x0108
     fb6:	90 91 09 01 	lds	r25, 0x0109
     fba:	18 da       	rcall	.-3024   	; 0x3ec <FifoWrite>
     fbc:	81 11       	cpse	r24, r1
     fbe:	1f c0       	rjmp	.+62     	; 0xffe <write_to_TwiFIFO+0x5c>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
     fc0:	20 91 3f 14 	lds	r18, 0x143F
     fc4:	30 91 40 14 	lds	r19, 0x1440
     fc8:	12 16       	cp	r1, r18
     fca:	13 06       	cpc	r1, r19
     fcc:	d4 f4       	brge	.+52     	; 0x1002 <write_to_TwiFIFO+0x60>
     fce:	0d 2f       	mov	r16, r29
     fd0:	1c 2f       	mov	r17, r28
     fd2:	c0 e0       	ldi	r28, 0x00	; 0
     fd4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
     fd6:	f8 01       	movw	r30, r16
     fd8:	61 91       	ld	r22, Z+
     fda:	8f 01       	movw	r16, r30
     fdc:	80 91 08 01 	lds	r24, 0x0108
     fe0:	90 91 09 01 	lds	r25, 0x0109
     fe4:	03 da       	rcall	.-3066   	; 0x3ec <FifoWrite>
     fe6:	81 11       	cpse	r24, r1
     fe8:	0e c0       	rjmp	.+28     	; 0x1006 <write_to_TwiFIFO+0x64>
	{
		//Can't add length!?
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
     fea:	21 96       	adiw	r28, 0x01	; 1
     fec:	80 91 3f 14 	lds	r24, 0x143F
     ff0:	90 91 40 14 	lds	r25, 0x1440
     ff4:	c8 17       	cp	r28, r24
     ff6:	d9 07       	cpc	r29, r25
     ff8:	74 f3       	brlt	.-36     	; 0xfd6 <write_to_TwiFIFO+0x34>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <write_to_TwiFIFO+0x66>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//Can't add length!?
		return 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <write_to_TwiFIFO+0x66>
			//Can't add chars!?
			return 1;
		}
	}
	
	return 0;
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <write_to_TwiFIFO+0x66>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//Can't add chars!?
			return 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <__vector_26>:

//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	0b b6       	in	r0, 0x3b	; 59
    101e:	0f 92       	push	r0
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	ef 93       	push	r30
    103a:	ff 93       	push	r31
	switch(myAdress)
    103c:	80 91 36 14 	lds	r24, 0x1436
    1040:	80 34       	cpi	r24, 0x40	; 64
    1042:	09 f4       	brne	.+2      	; 0x1046 <__vector_26+0x34>
    1044:	87 c0       	rjmp	.+270    	; 0x1154 <__vector_26+0x142>
    1046:	80 38       	cpi	r24, 0x80	; 128
    1048:	21 f0       	breq	.+8      	; 0x1052 <__vector_26+0x40>
    104a:	80 32       	cpi	r24, 0x20	; 32
    104c:	09 f0       	breq	.+2      	; 0x1050 <__vector_26+0x3e>
    104e:	57 c1       	rjmp	.+686    	; 0x12fe <__vector_26+0x2ec>
    1050:	c9 c0       	rjmp	.+402    	; 0x11e4 <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1052:	80 91 b9 00 	lds	r24, 0x00B9
    1056:	88 7f       	andi	r24, 0xF8	; 248
    1058:	80 36       	cpi	r24, 0x60	; 96
    105a:	29 f0       	breq	.+10     	; 0x1066 <__vector_26+0x54>
    105c:	80 91 b9 00 	lds	r24, 0x00B9
    1060:	88 7f       	andi	r24, 0xF8	; 248
    1062:	88 36       	cpi	r24, 0x68	; 104
    1064:	21 f4       	brne	.+8      	; 0x106e <__vector_26+0x5c>
			{
				instruction = 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	80 93 39 14 	sts	0x1439, r24
    106c:	71 c0       	rjmp	.+226    	; 0x1150 <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    106e:	80 91 b9 00 	lds	r24, 0x00B9
    1072:	88 7f       	andi	r24, 0xF8	; 248
    1074:	80 37       	cpi	r24, 0x70	; 112
    1076:	29 f0       	breq	.+10     	; 0x1082 <__vector_26+0x70>
    1078:	80 91 b9 00 	lds	r24, 0x00B9
    107c:	88 7f       	andi	r24, 0xF8	; 248
    107e:	88 37       	cpi	r24, 0x78	; 120
    1080:	39 f4       	brne	.+14     	; 0x1090 <__vector_26+0x7e>
			{
				currentInstruction = 255;
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	90 93 43 14 	sts	0x1443, r25
    108a:	80 93 42 14 	sts	0x1442, r24
    108e:	60 c0       	rjmp	.+192    	; 0x1150 <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    1090:	80 91 b9 00 	lds	r24, 0x00B9
    1094:	88 7f       	andi	r24, 0xF8	; 248
    1096:	80 38       	cpi	r24, 0x80	; 128
    1098:	b9 f5       	brne	.+110    	; 0x1108 <__vector_26+0xf6>
			{
				if(instruction)
    109a:	80 91 39 14 	lds	r24, 0x1439
    109e:	88 23       	and	r24, r24
    10a0:	41 f0       	breq	.+16     	; 0x10b2 <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    10a2:	86 dd       	rcall	.-1268   	; 0xbb0 <get_data>
    10a4:	80 93 42 14 	sts	0x1442, r24
    10a8:	10 92 43 14 	sts	0x1443, r1
					instruction = 0;
    10ac:	10 92 39 14 	sts	0x1439, r1
    10b0:	4f c0       	rjmp	.+158    	; 0x1150 <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    10b2:	80 91 42 14 	lds	r24, 0x1442
    10b6:	90 91 43 14 	lds	r25, 0x1443
    10ba:	85 30       	cpi	r24, 0x05	; 5
    10bc:	91 05       	cpc	r25, r1
    10be:	71 f0       	breq	.+28     	; 0x10dc <__vector_26+0xca>
    10c0:	24 f4       	brge	.+8      	; 0x10ca <__vector_26+0xb8>
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_26+0xb6>
    10c6:	44 c0       	rjmp	.+136    	; 0x1150 <__vector_26+0x13e>
    10c8:	07 c0       	rjmp	.+14     	; 0x10d8 <__vector_26+0xc6>
    10ca:	86 30       	cpi	r24, 0x06	; 6
    10cc:	91 05       	cpc	r25, r1
    10ce:	51 f0       	breq	.+20     	; 0x10e4 <__vector_26+0xd2>
    10d0:	49 97       	sbiw	r24, 0x19	; 25
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <__vector_26+0xc4>
    10d4:	3d c0       	rjmp	.+122    	; 0x1150 <__vector_26+0x13e>
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    10d8:	95 dd       	rcall	.-1238   	; 0xc04 <get_control_settings_from_bus>
							break;
    10da:	3a c0       	rjmp	.+116    	; 0x1150 <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    10dc:	a4 dd       	rcall	.-1208   	; 0xc26 <get_autonom_settings_from_bus>
							break;
    10de:	38 c0       	rjmp	.+112    	; 0x1150 <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    10e0:	a6 dd       	rcall	.-1204   	; 0xc2e <get_char_from_bus>
							break;
    10e2:	36 c0       	rjmp	.+108    	; 0x1150 <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    10e4:	c0 91 37 14 	lds	r28, 0x1437
    10e8:	d0 91 38 14 	lds	r29, 0x1438
    10ec:	61 dd       	rcall	.-1342   	; 0xbb0 <get_data>
    10ee:	c8 5d       	subi	r28, 0xD8	; 216
    10f0:	dc 4e       	sbci	r29, 0xEC	; 236
    10f2:	88 83       	st	Y, r24
	floatCounter += 1;
    10f4:	80 91 37 14 	lds	r24, 0x1437
    10f8:	90 91 38 14 	lds	r25, 0x1438
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	90 93 38 14 	sts	0x1438, r25
    1102:	80 93 37 14 	sts	0x1437, r24
    1106:	24 c0       	rjmp	.+72     	; 0x1150 <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    1108:	80 91 b9 00 	lds	r24, 0x00B9
    110c:	88 7f       	andi	r24, 0xF8	; 248
    110e:	80 39       	cpi	r24, 0x90	; 144
    1110:	11 f4       	brne	.+4      	; 0x1116 <__vector_26+0x104>
			{
				get_sensor_from_bus();
    1112:	a7 dd       	rcall	.-1202   	; 0xc62 <get_sensor_from_bus>
    1114:	1d c0       	rjmp	.+58     	; 0x1150 <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    1116:	80 91 b9 00 	lds	r24, 0x00B9
    111a:	88 7f       	andi	r24, 0xF8	; 248
    111c:	80 3a       	cpi	r24, 0xA0	; 160
    111e:	c1 f4       	brne	.+48     	; 0x1150 <__vector_26+0x13e>
			{
				stop_twi();
    1120:	56 dd       	rcall	.-1364   	; 0xbce <stop_twi>
				switch(currentInstruction)
    1122:	80 91 42 14 	lds	r24, 0x1442
    1126:	90 91 43 14 	lds	r25, 0x1443
    112a:	85 30       	cpi	r24, 0x05	; 5
    112c:	91 05       	cpc	r25, r1
    112e:	49 f0       	breq	.+18     	; 0x1142 <__vector_26+0x130>
    1130:	89 31       	cpi	r24, 0x19	; 25
    1132:	91 05       	cpc	r25, r1
    1134:	51 f0       	breq	.+20     	; 0x114a <__vector_26+0x138>
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	59 f4       	brne	.+22     	; 0x1150 <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 e0 12 	sts	0x12E0, r24
						break;
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	80 93 df 12 	sts	0x12DF, r24
						break;
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    114a:	80 e3       	ldi	r24, 0x30	; 48
    114c:	93 e1       	ldi	r25, 0x13	; 19
    114e:	29 df       	rcall	.-430    	; 0xfa2 <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    1150:	53 dd       	rcall	.-1370   	; 0xbf8 <reset_TWI>
			break;
    1152:	d5 c0       	rjmp	.+426    	; 0x12fe <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1154:	80 91 b9 00 	lds	r24, 0x00B9
    1158:	88 7f       	andi	r24, 0xF8	; 248
    115a:	80 36       	cpi	r24, 0x60	; 96
    115c:	29 f0       	breq	.+10     	; 0x1168 <__vector_26+0x156>
    115e:	80 91 b9 00 	lds	r24, 0x00B9
    1162:	88 7f       	andi	r24, 0xF8	; 248
    1164:	88 36       	cpi	r24, 0x68	; 104
    1166:	21 f4       	brne	.+8      	; 0x1170 <__vector_26+0x15e>
			{
				instruction = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 39 14 	sts	0x1439, r24
    116e:	38 c0       	rjmp	.+112    	; 0x11e0 <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    1170:	80 91 b9 00 	lds	r24, 0x00B9
    1174:	88 7f       	andi	r24, 0xF8	; 248
    1176:	80 38       	cpi	r24, 0x80	; 128
    1178:	e1 f4       	brne	.+56     	; 0x11b2 <__vector_26+0x1a0>
			{
				if(instruction)
    117a:	80 91 39 14 	lds	r24, 0x1439
    117e:	88 23       	and	r24, r24
    1180:	41 f0       	breq	.+16     	; 0x1192 <__vector_26+0x180>
				{
					currentInstruction = get_data();
    1182:	16 dd       	rcall	.-1492   	; 0xbb0 <get_data>
    1184:	80 93 42 14 	sts	0x1442, r24
    1188:	10 92 43 14 	sts	0x1443, r1
					instruction = 0;
    118c:	10 92 39 14 	sts	0x1439, r1
    1190:	27 c0       	rjmp	.+78     	; 0x11e0 <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    1192:	80 91 42 14 	lds	r24, 0x1442
    1196:	90 91 43 14 	lds	r25, 0x1443
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	91 05       	cpc	r25, r1
    119e:	19 f0       	breq	.+6      	; 0x11a6 <__vector_26+0x194>
    11a0:	49 97       	sbiw	r24, 0x19	; 25
    11a2:	f1 f4       	brne	.+60     	; 0x11e0 <__vector_26+0x1ce>
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    11a6:	04 dd       	rcall	.-1528   	; 0xbb0 <get_data>
    11a8:	80 93 41 14 	sts	0x1441, r24
    11ac:	19 c0       	rjmp	.+50     	; 0x11e0 <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    11ae:	3f dd       	rcall	.-1410   	; 0xc2e <get_char_from_bus>
							break;
    11b0:	17 c0       	rjmp	.+46     	; 0x11e0 <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    11b2:	80 91 b9 00 	lds	r24, 0x00B9
    11b6:	88 7f       	andi	r24, 0xF8	; 248
    11b8:	80 3a       	cpi	r24, 0xA0	; 160
    11ba:	91 f4       	brne	.+36     	; 0x11e0 <__vector_26+0x1ce>
			{
				stop_twi();
    11bc:	08 dd       	rcall	.-1520   	; 0xbce <stop_twi>
				switch(currentInstruction)
    11be:	80 91 42 14 	lds	r24, 0x1442
    11c2:	90 91 43 14 	lds	r25, 0x1443
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	91 05       	cpc	r25, r1
    11ca:	19 f0       	breq	.+6      	; 0x11d2 <__vector_26+0x1c0>
    11cc:	49 97       	sbiw	r24, 0x19	; 25
    11ce:	41 f4       	brne	.+16     	; 0x11e0 <__vector_26+0x1ce>
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 dd 12 	sts	0x12DD, r24
						break;
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    11da:	80 e3       	ldi	r24, 0x30	; 48
    11dc:	93 e1       	ldi	r25, 0x13	; 19
    11de:	e1 de       	rcall	.-574    	; 0xfa2 <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    11e0:	0b dd       	rcall	.-1514   	; 0xbf8 <reset_TWI>
			break;
    11e2:	8d c0       	rjmp	.+282    	; 0x12fe <__vector_26+0x2ec>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    11e4:	80 91 b9 00 	lds	r24, 0x00B9
    11e8:	88 7f       	andi	r24, 0xF8	; 248
    11ea:	80 36       	cpi	r24, 0x60	; 96
    11ec:	29 f0       	breq	.+10     	; 0x11f8 <__vector_26+0x1e6>
    11ee:	80 91 b9 00 	lds	r24, 0x00B9
    11f2:	88 7f       	andi	r24, 0xF8	; 248
    11f4:	88 36       	cpi	r24, 0x68	; 104
    11f6:	21 f4       	brne	.+8      	; 0x1200 <__vector_26+0x1ee>
			{
				instruction = 1;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	80 93 39 14 	sts	0x1439, r24
    11fe:	7e c0       	rjmp	.+252    	; 0x12fc <__vector_26+0x2ea>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1200:	80 91 b9 00 	lds	r24, 0x00B9
    1204:	88 7f       	andi	r24, 0xF8	; 248
    1206:	80 37       	cpi	r24, 0x70	; 112
    1208:	29 f0       	breq	.+10     	; 0x1214 <__vector_26+0x202>
    120a:	80 91 b9 00 	lds	r24, 0x00B9
    120e:	88 7f       	andi	r24, 0xF8	; 248
    1210:	88 37       	cpi	r24, 0x78	; 120
    1212:	39 f4       	brne	.+14     	; 0x1222 <__vector_26+0x210>
			{
				currentInstruction = 255;
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	90 93 43 14 	sts	0x1443, r25
    121c:	80 93 42 14 	sts	0x1442, r24
    1220:	6d c0       	rjmp	.+218    	; 0x12fc <__vector_26+0x2ea>
			}
			else if(CONTROL == DATA_SLAW)
    1222:	80 91 b9 00 	lds	r24, 0x00B9
    1226:	88 7f       	andi	r24, 0xF8	; 248
    1228:	80 38       	cpi	r24, 0x80	; 128
    122a:	09 f0       	breq	.+2      	; 0x122e <__vector_26+0x21c>
    122c:	3a c0       	rjmp	.+116    	; 0x12a2 <__vector_26+0x290>
			{
				if(instruction)
    122e:	80 91 39 14 	lds	r24, 0x1439
    1232:	88 23       	and	r24, r24
    1234:	41 f0       	breq	.+16     	; 0x1246 <__vector_26+0x234>
				{
					currentInstruction = get_data();
    1236:	bc dc       	rcall	.-1672   	; 0xbb0 <get_data>
    1238:	80 93 42 14 	sts	0x1442, r24
    123c:	10 92 43 14 	sts	0x1443, r1
					instruction = 0;
    1240:	10 92 39 14 	sts	0x1439, r1
    1244:	5b c0       	rjmp	.+182    	; 0x12fc <__vector_26+0x2ea>
				}
				else
				{
					switch(currentInstruction)
    1246:	80 91 42 14 	lds	r24, 0x1442
    124a:	90 91 43 14 	lds	r25, 0x1443
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	19 f1       	breq	.+70     	; 0x129a <__vector_26+0x288>
    1254:	1c f4       	brge	.+6      	; 0x125c <__vector_26+0x24a>
    1256:	89 2b       	or	r24, r25
    1258:	41 f0       	breq	.+16     	; 0x126a <__vector_26+0x258>
    125a:	50 c0       	rjmp	.+160    	; 0x12fc <__vector_26+0x2ea>
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	91 05       	cpc	r25, r1
    1260:	b1 f0       	breq	.+44     	; 0x128e <__vector_26+0x27c>
    1262:	05 97       	sbiw	r24, 0x05	; 5
    1264:	09 f0       	breq	.+2      	; 0x1268 <__vector_26+0x256>
    1266:	4a c0       	rjmp	.+148    	; 0x12fc <__vector_26+0x2ea>
    1268:	1a c0       	rjmp	.+52     	; 0x129e <__vector_26+0x28c>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    126a:	c0 91 3a 14 	lds	r28, 0x143A
    126e:	d0 91 3b 14 	lds	r29, 0x143B
    1272:	9e dc       	rcall	.-1732   	; 0xbb0 <get_data>
    1274:	c4 5d       	subi	r28, 0xD4	; 212
    1276:	dc 4e       	sbci	r29, 0xEC	; 236
    1278:	88 83       	st	Y, r24
	currentCommand += 1;
    127a:	80 91 3a 14 	lds	r24, 0x143A
    127e:	90 91 3b 14 	lds	r25, 0x143B
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	90 93 3b 14 	sts	0x143B, r25
    1288:	80 93 3a 14 	sts	0x143A, r24
    128c:	37 c0       	rjmp	.+110    	; 0x12fc <__vector_26+0x2ea>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation = get_data();
    128e:	90 dc       	rcall	.-1760   	; 0xbb0 <get_data>
    1290:	80 93 3c 14 	sts	0x143C, r24
    1294:	10 92 3d 14 	sts	0x143D, r1
    1298:	31 c0       	rjmp	.+98     	; 0x12fc <__vector_26+0x2ea>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    129a:	b4 dc       	rcall	.-1688   	; 0xc04 <get_control_settings_from_bus>
							break;
    129c:	2f c0       	rjmp	.+94     	; 0x12fc <__vector_26+0x2ea>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    129e:	c3 dc       	rcall	.-1658   	; 0xc26 <get_autonom_settings_from_bus>
							break;
    12a0:	2d c0       	rjmp	.+90     	; 0x12fc <__vector_26+0x2ea>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    12a2:	80 91 b9 00 	lds	r24, 0x00B9
    12a6:	88 7f       	andi	r24, 0xF8	; 248
    12a8:	80 39       	cpi	r24, 0x90	; 144
    12aa:	11 f4       	brne	.+4      	; 0x12b0 <__vector_26+0x29e>
			{
				get_sensor_from_bus();
    12ac:	da dc       	rcall	.-1612   	; 0xc62 <get_sensor_from_bus>
    12ae:	26 c0       	rjmp	.+76     	; 0x12fc <__vector_26+0x2ea>
			}
			else if (CONTROL == STOP)
    12b0:	80 91 b9 00 	lds	r24, 0x00B9
    12b4:	88 7f       	andi	r24, 0xF8	; 248
    12b6:	80 3a       	cpi	r24, 0xA0	; 160
    12b8:	09 f5       	brne	.+66     	; 0x12fc <__vector_26+0x2ea>
			{
				stop_twi();
    12ba:	89 dc       	rcall	.-1774   	; 0xbce <stop_twi>
				switch(currentInstruction)
    12bc:	80 91 42 14 	lds	r24, 0x1442
    12c0:	90 91 43 14 	lds	r25, 0x1443
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	91 f0       	breq	.+36     	; 0x12ee <__vector_26+0x2dc>
    12ca:	1c f4       	brge	.+6      	; 0x12d2 <__vector_26+0x2c0>
    12cc:	89 2b       	or	r24, r25
    12ce:	39 f0       	breq	.+14     	; 0x12de <__vector_26+0x2cc>
    12d0:	15 c0       	rjmp	.+42     	; 0x12fc <__vector_26+0x2ea>
    12d2:	84 30       	cpi	r24, 0x04	; 4
    12d4:	91 05       	cpc	r25, r1
    12d6:	39 f0       	breq	.+14     	; 0x12e6 <__vector_26+0x2d4>
    12d8:	05 97       	sbiw	r24, 0x05	; 5
    12da:	81 f4       	brne	.+32     	; 0x12fc <__vector_26+0x2ea>
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <__vector_26+0x2e4>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	80 93 e1 12 	sts	0x12E1, r24
						break;
    12e4:	0b c0       	rjmp	.+22     	; 0x12fc <__vector_26+0x2ea>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	80 93 de 12 	sts	0x12DE, r24
						break;
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <__vector_26+0x2ea>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	80 93 e0 12 	sts	0x12E0, r24
						break;
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <__vector_26+0x2ea>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 df 12 	sts	0x12DF, r24
						break;
					}
				}
			}
			reset_TWI();
    12fc:	7d dc       	rcall	.-1798   	; 0xbf8 <reset_TWI>
			break;
		}
	}
    12fe:	ff 91       	pop	r31
    1300:	ef 91       	pop	r30
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	bf 91       	pop	r27
    1308:	af 91       	pop	r26
    130a:	9f 91       	pop	r25
    130c:	8f 91       	pop	r24
    130e:	7f 91       	pop	r23
    1310:	6f 91       	pop	r22
    1312:	5f 91       	pop	r21
    1314:	4f 91       	pop	r20
    1316:	3f 91       	pop	r19
    1318:	2f 91       	pop	r18
    131a:	0f 90       	pop	r0
    131c:	0b be       	out	0x3b, r0	; 59
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
    1328:	10 92 c5 00 	sts	0x00C5, r1
    132c:	87 e0       	ldi	r24, 0x07	; 7
    132e:	80 93 c4 00 	sts	0x00C4, r24
    1332:	88 e9       	ldi	r24, 0x98	; 152
    1334:	80 93 c1 00 	sts	0x00C1, r24
    1338:	86 e0       	ldi	r24, 0x06	; 6
    133a:	80 93 c2 00 	sts	0x00C2, r24
    133e:	08 95       	ret

00001340 <USART_set_twi_message_destination>:
    1340:	90 93 1a 11 	sts	0x111A, r25
    1344:	80 93 19 11 	sts	0x1119, r24
    1348:	08 95       	ret

0000134a <USART_CheckTxReady>:
    134a:	80 91 c0 00 	lds	r24, 0x00C0
    134e:	80 72       	andi	r24, 0x20	; 32
    1350:	08 95       	ret

00001352 <USART_WriteByte>:
    1352:	cf 93       	push	r28
    1354:	c8 2f       	mov	r28, r24
    1356:	f9 df       	rcall	.-14     	; 0x134a <USART_CheckTxReady>
    1358:	88 23       	and	r24, r24
    135a:	e9 f3       	breq	.-6      	; 0x1356 <USART_WriteByte+0x4>
    135c:	c0 93 c6 00 	sts	0x00C6, r28
    1360:	cf 91       	pop	r28
    1362:	08 95       	ret

00001364 <USART_crc16>:
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	66 23       	and	r22, r22
    1376:	09 f4       	brne	.+2      	; 0x137a <USART_crc16+0x16>
    1378:	3e c0       	rjmp	.+124    	; 0x13f6 <USART_crc16+0x92>
    137a:	06 2f       	mov	r16, r22
    137c:	10 e0       	ldi	r17, 0x00	; 0
    137e:	4f ef       	ldi	r20, 0xFF	; 255
    1380:	5f ef       	ldi	r21, 0xFF	; 255
    1382:	ee ef       	ldi	r30, 0xFE	; 254
    1384:	ff ef       	ldi	r31, 0xFF	; 255
    1386:	c6 2e       	mov	r12, r22
    1388:	d1 2c       	mov	r13, r1
    138a:	e8 2e       	mov	r14, r24
    138c:	f1 2c       	mov	r15, r1
    138e:	c8 e0       	ldi	r28, 0x08	; 8
    1390:	d0 e0       	ldi	r29, 0x00	; 0
    1392:	ee 3f       	cpi	r30, 0xFE	; 254
    1394:	6f ef       	ldi	r22, 0xFF	; 255
    1396:	f6 07       	cpc	r31, r22
    1398:	19 f4       	brne	.+6      	; 0x13a0 <USART_crc16+0x3c>
    139a:	8e 2d       	mov	r24, r14
    139c:	9f 2d       	mov	r25, r15
    139e:	30 c0       	rjmp	.+96     	; 0x1400 <USART_crc16+0x9c>
    13a0:	ef 3f       	cpi	r30, 0xFF	; 255
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	f8 07       	cpc	r31, r24
    13a6:	19 f4       	brne	.+6      	; 0x13ae <USART_crc16+0x4a>
    13a8:	8c 2d       	mov	r24, r12
    13aa:	9d 2d       	mov	r25, r13
    13ac:	29 c0       	rjmp	.+82     	; 0x1400 <USART_crc16+0x9c>
    13ae:	df 01       	movw	r26, r30
    13b0:	a5 5a       	subi	r26, 0xA5	; 165
    13b2:	b9 4e       	sbci	r27, 0xE9	; 233
    13b4:	8c 91       	ld	r24, X
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	23 c0       	rjmp	.+70     	; 0x1400 <USART_crc16+0x9c>
    13ba:	ba 01       	movw	r22, r20
    13bc:	68 27       	eor	r22, r24
    13be:	79 27       	eor	r23, r25
    13c0:	60 ff       	sbrs	r22, 0
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <USART_crc16+0x6e>
    13c4:	56 95       	lsr	r21
    13c6:	47 95       	ror	r20
    13c8:	68 e0       	ldi	r22, 0x08	; 8
    13ca:	46 27       	eor	r20, r22
    13cc:	64 e8       	ldi	r22, 0x84	; 132
    13ce:	56 27       	eor	r21, r22
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <USART_crc16+0x72>
    13d2:	56 95       	lsr	r21
    13d4:	47 95       	ror	r20
    13d6:	96 95       	lsr	r25
    13d8:	87 95       	ror	r24
    13da:	21 50       	subi	r18, 0x01	; 1
    13dc:	31 09       	sbc	r19, r1
    13de:	69 f7       	brne	.-38     	; 0x13ba <USART_crc16+0x56>
    13e0:	31 96       	adiw	r30, 0x01	; 1
    13e2:	e0 17       	cp	r30, r16
    13e4:	f1 07       	cpc	r31, r17
    13e6:	a9 f6       	brne	.-86     	; 0x1392 <USART_crc16+0x2e>
    13e8:	9a 01       	movw	r18, r20
    13ea:	20 95       	com	r18
    13ec:	30 95       	com	r19
    13ee:	32 27       	eor	r19, r18
    13f0:	23 27       	eor	r18, r19
    13f2:	32 27       	eor	r19, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <USART_crc16+0x96>
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	82 2f       	mov	r24, r18
    13fc:	93 2f       	mov	r25, r19
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <USART_crc16+0xa0>
    1400:	9e 01       	movw	r18, r28
    1402:	db cf       	rjmp	.-74     	; 0x13ba <USART_crc16+0x56>
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	df 90       	pop	r13
    1412:	cf 90       	pop	r12
    1414:	08 95       	ret

00001416 <USART_SendPacket>:
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	9e e7       	ldi	r25, 0x7E	; 126
    1420:	90 93 5a 17 	sts	0x175A, r25
    1424:	80 93 5b 17 	sts	0x175B, r24
    1428:	60 93 5c 17 	sts	0x175C, r22
    142c:	26 2f       	mov	r18, r22
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	12 16       	cp	r1, r18
    1432:	13 06       	cpc	r1, r19
    1434:	4c f5       	brge	.+82     	; 0x1488 <USART_SendPacket+0x72>
    1436:	eb e5       	ldi	r30, 0x5B	; 91
    1438:	f6 e1       	ldi	r31, 0x16	; 22
    143a:	03 e0       	ldi	r16, 0x03	; 3
    143c:	10 e0       	ldi	r17, 0x00	; 0
    143e:	c0 e0       	ldi	r28, 0x00	; 0
    1440:	d0 e0       	ldi	r29, 0x00	; 0
    1442:	7d e7       	ldi	r23, 0x7D	; 125
    1444:	50 e2       	ldi	r21, 0x20	; 32
    1446:	90 81       	ld	r25, Z
    1448:	49 2f       	mov	r20, r25
    144a:	4d 57       	subi	r20, 0x7D	; 125
    144c:	42 30       	cpi	r20, 0x02	; 2
    144e:	80 f4       	brcc	.+32     	; 0x1470 <USART_SendPacket+0x5a>
    1450:	d8 01       	movw	r26, r16
    1452:	a6 5a       	subi	r26, 0xA6	; 166
    1454:	b8 4e       	sbci	r27, 0xE8	; 232
    1456:	ac 0f       	add	r26, r28
    1458:	bd 1f       	adc	r27, r29
    145a:	7c 93       	st	X, r23
    145c:	0f 5f       	subi	r16, 0xFF	; 255
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	d8 01       	movw	r26, r16
    1462:	a6 5a       	subi	r26, 0xA6	; 166
    1464:	b8 4e       	sbci	r27, 0xE8	; 232
    1466:	ac 0f       	add	r26, r28
    1468:	bd 1f       	adc	r27, r29
    146a:	95 27       	eor	r25, r21
    146c:	9c 93       	st	X, r25
    146e:	06 c0       	rjmp	.+12     	; 0x147c <USART_SendPacket+0x66>
    1470:	d8 01       	movw	r26, r16
    1472:	a6 5a       	subi	r26, 0xA6	; 166
    1474:	b8 4e       	sbci	r27, 0xE8	; 232
    1476:	ac 0f       	add	r26, r28
    1478:	bd 1f       	adc	r27, r29
    147a:	9c 93       	st	X, r25
    147c:	21 96       	adiw	r28, 0x01	; 1
    147e:	31 96       	adiw	r30, 0x01	; 1
    1480:	c2 17       	cp	r28, r18
    1482:	d3 07       	cpc	r29, r19
    1484:	01 f7       	brne	.-64     	; 0x1446 <USART_SendPacket+0x30>
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <USART_SendPacket+0x7a>
    1488:	03 e0       	ldi	r16, 0x03	; 3
    148a:	10 e0       	ldi	r17, 0x00	; 0
    148c:	c0 e0       	ldi	r28, 0x00	; 0
    148e:	d0 e0       	ldi	r29, 0x00	; 0
    1490:	69 df       	rcall	.-302    	; 0x1364 <USART_crc16>
    1492:	f8 01       	movw	r30, r16
    1494:	e6 5a       	subi	r30, 0xA6	; 166
    1496:	f8 4e       	sbci	r31, 0xE8	; 232
    1498:	ec 0f       	add	r30, r28
    149a:	fd 1f       	adc	r31, r29
    149c:	90 83       	st	Z, r25
    149e:	81 83       	std	Z+1, r24	; 0x01
    14a0:	22 96       	adiw	r28, 0x02	; 2
    14a2:	0c 0f       	add	r16, r28
    14a4:	1d 1f       	adc	r17, r29
    14a6:	f8 01       	movw	r30, r16
    14a8:	e6 5a       	subi	r30, 0xA6	; 166
    14aa:	f8 4e       	sbci	r31, 0xE8	; 232
    14ac:	8e e7       	ldi	r24, 0x7E	; 126
    14ae:	80 83       	st	Z, r24
    14b0:	c8 01       	movw	r24, r16
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	18 16       	cp	r1, r24
    14b6:	19 06       	cpc	r1, r25
    14b8:	4c f4       	brge	.+18     	; 0x14cc <USART_SendPacket+0xb6>
    14ba:	ca e5       	ldi	r28, 0x5A	; 90
    14bc:	d7 e1       	ldi	r29, 0x17	; 23
    14be:	05 5a       	subi	r16, 0xA5	; 165
    14c0:	18 4e       	sbci	r17, 0xE8	; 232
    14c2:	89 91       	ld	r24, Y+
    14c4:	46 df       	rcall	.-372    	; 0x1352 <USART_WriteByte>
    14c6:	c0 17       	cp	r28, r16
    14c8:	d1 07       	cpc	r29, r17
    14ca:	d9 f7       	brne	.-10     	; 0x14c2 <USART_SendPacket+0xac>
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	08 95       	ret

000014d6 <USART_SendCommand>:
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	26 dd       	rcall	.-1460   	; 0xf28 <TWI_get_command>
    14dc:	80 93 5b 16 	sts	0x165B, r24
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	21 dd       	rcall	.-1470   	; 0xf28 <TWI_get_command>
    14e6:	80 93 5c 16 	sts	0x165C, r24
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	1c dd       	rcall	.-1480   	; 0xf28 <TWI_get_command>
    14f0:	80 93 5d 16 	sts	0x165D, r24
    14f4:	63 e0       	ldi	r22, 0x03	; 3
    14f6:	83 e4       	ldi	r24, 0x43	; 67
    14f8:	8e cf       	rjmp	.-228    	; 0x1416 <USART_SendPacket>

000014fa <USART_SendElevation>:
    14fa:	28 dd       	rcall	.-1456   	; 0xf4c <TWI_get_elevation>
    14fc:	80 93 5b 16 	sts	0x165B, r24
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	85 e4       	ldi	r24, 0x45	; 69
    1504:	88 cf       	rjmp	.-240    	; 0x1416 <USART_SendPacket>

00001506 <USART_DecodeMessageRxFIFO>:
    1506:	8f 92       	push	r8
    1508:	9f 92       	push	r9
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	ad b6       	in	r10, 0x3d	; 61
    1524:	be b6       	in	r11, 0x3e	; 62
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 91 11 01 	lds	r24, 0x0111
    152e:	90 91 12 01 	lds	r25, 0x0112
    1532:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    1536:	88 23       	and	r24, r24
    1538:	31 f0       	breq	.+12     	; 0x1546 <USART_DecodeMessageRxFIFO+0x40>
    153a:	6f ea       	ldi	r22, 0xAF	; 175
    153c:	71 e1       	ldi	r23, 0x11	; 17
    153e:	80 e4       	ldi	r24, 0x40	; 64
    1540:	27 dc       	rcall	.-1970   	; 0xd90 <TWI_send_string>
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	45 c0       	rjmp	.+138    	; 0x15d0 <USART_DecodeMessageRxFIFO+0xca>
    1546:	c0 90 00 00 	lds	r12, 0x0000
    154a:	d1 2c       	mov	r13, r1
    154c:	96 01       	movw	r18, r12
    154e:	21 50       	subi	r18, 0x01	; 1
    1550:	31 09       	sbc	r19, r1
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	c1 14       	cp	r12, r1
    1558:	d1 04       	cpc	r13, r1
    155a:	11 f0       	breq	.+4      	; 0x1560 <USART_DecodeMessageRxFIFO+0x5a>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	82 0f       	add	r24, r18
    1562:	93 1f       	adc	r25, r19
    1564:	2d b7       	in	r18, 0x3d	; 61
    1566:	3e b7       	in	r19, 0x3e	; 62
    1568:	28 1b       	sub	r18, r24
    156a:	39 0b       	sbc	r19, r25
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	3e bf       	out	0x3e, r19	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	2d bf       	out	0x3d, r18	; 61
    1576:	8d b7       	in	r24, 0x3d	; 61
    1578:	9e b7       	in	r25, 0x3e	; 62
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	88 2e       	mov	r8, r24
    157e:	99 2e       	mov	r9, r25
    1580:	1c 14       	cp	r1, r12
    1582:	1d 04       	cpc	r1, r13
    1584:	f4 f4       	brge	.+60     	; 0x15c2 <USART_DecodeMessageRxFIFO+0xbc>
    1586:	e8 2e       	mov	r14, r24
    1588:	f9 2e       	mov	r15, r25
    158a:	00 e0       	ldi	r16, 0x00	; 0
    158c:	10 e0       	ldi	r17, 0x00	; 0
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	80 91 11 01 	lds	r24, 0x0111
    1596:	90 91 12 01 	lds	r25, 0x0112
    159a:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    159e:	88 23       	and	r24, r24
    15a0:	31 f0       	breq	.+12     	; 0x15ae <USART_DecodeMessageRxFIFO+0xa8>
    15a2:	61 ed       	ldi	r22, 0xD1	; 209
    15a4:	71 e1       	ldi	r23, 0x11	; 17
    15a6:	80 e4       	ldi	r24, 0x40	; 64
    15a8:	f3 db       	rcall	.-2074   	; 0xd90 <TWI_send_string>
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	11 c0       	rjmp	.+34     	; 0x15d0 <USART_DecodeMessageRxFIFO+0xca>
    15ae:	80 91 00 00 	lds	r24, 0x0000
    15b2:	f7 01       	movw	r30, r14
    15b4:	81 93       	st	Z+, r24
    15b6:	7f 01       	movw	r14, r30
    15b8:	0f 5f       	subi	r16, 0xFF	; 255
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	0c 15       	cp	r16, r12
    15be:	1d 05       	cpc	r17, r13
    15c0:	34 f3       	brlt	.-52     	; 0x158e <USART_DecodeMessageRxFIFO+0x88>
    15c2:	a6 01       	movw	r20, r12
    15c4:	68 2d       	mov	r22, r8
    15c6:	79 2d       	mov	r23, r9
    15c8:	80 91 19 11 	lds	r24, 0x1119
    15cc:	27 dc       	rcall	.-1970   	; 0xe1c <TWI_send_string_fixed_length>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	be be       	out	0x3e, r11	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	ad be       	out	0x3d, r10	; 61
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	cf 90       	pop	r12
    15ea:	bf 90       	pop	r11
    15ec:	af 90       	pop	r10
    15ee:	9f 90       	pop	r9
    15f0:	8f 90       	pop	r8
    15f2:	08 95       	ret

000015f4 <USART_DecodeCommandRxFIFO>:
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 91 11 01 	lds	r24, 0x0111
    1600:	90 91 12 01 	lds	r25, 0x0112
    1604:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    1608:	88 23       	and	r24, r24
    160a:	31 f0       	breq	.+12     	; 0x1618 <USART_DecodeCommandRxFIFO+0x24>
    160c:	64 ef       	ldi	r22, 0xF4	; 244
    160e:	71 e1       	ldi	r23, 0x11	; 17
    1610:	80 e4       	ldi	r24, 0x40	; 64
    1612:	be db       	rcall	.-2180   	; 0xd90 <TWI_send_string>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	45 c0       	rjmp	.+138    	; 0x16a2 <USART_DecodeCommandRxFIFO+0xae>
    1618:	80 91 00 00 	lds	r24, 0x0000
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	09 f0       	breq	.+2      	; 0x1622 <USART_DecodeCommandRxFIFO+0x2e>
    1620:	3b c0       	rjmp	.+118    	; 0x1698 <USART_DecodeCommandRxFIFO+0xa4>
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	80 91 11 01 	lds	r24, 0x0111
    162a:	90 91 12 01 	lds	r25, 0x0112
    162e:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    1632:	88 23       	and	r24, r24
    1634:	31 f0       	breq	.+12     	; 0x1642 <USART_DecodeCommandRxFIFO+0x4e>
    1636:	66 e1       	ldi	r22, 0x16	; 22
    1638:	72 e1       	ldi	r23, 0x12	; 18
    163a:	80 e4       	ldi	r24, 0x40	; 64
    163c:	a9 db       	rcall	.-2222   	; 0xd90 <TWI_send_string>
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	30 c0       	rjmp	.+96     	; 0x16a2 <USART_DecodeCommandRxFIFO+0xae>
    1642:	c0 91 00 00 	lds	r28, 0x0000
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	80 91 11 01 	lds	r24, 0x0111
    164e:	90 91 12 01 	lds	r25, 0x0112
    1652:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    1656:	88 23       	and	r24, r24
    1658:	31 f0       	breq	.+12     	; 0x1666 <USART_DecodeCommandRxFIFO+0x72>
    165a:	6e e3       	ldi	r22, 0x3E	; 62
    165c:	72 e1       	ldi	r23, 0x12	; 18
    165e:	80 e4       	ldi	r24, 0x40	; 64
    1660:	97 db       	rcall	.-2258   	; 0xd90 <TWI_send_string>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	1e c0       	rjmp	.+60     	; 0x16a2 <USART_DecodeCommandRxFIFO+0xae>
    1666:	d0 91 00 00 	lds	r29, 0x0000
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	80 91 11 01 	lds	r24, 0x0111
    1672:	90 91 12 01 	lds	r25, 0x0112
    1676:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    167a:	88 23       	and	r24, r24
    167c:	31 f0       	breq	.+12     	; 0x168a <USART_DecodeCommandRxFIFO+0x96>
    167e:	65 e6       	ldi	r22, 0x65	; 101
    1680:	72 e1       	ldi	r23, 0x12	; 18
    1682:	80 e4       	ldi	r24, 0x40	; 64
    1684:	85 db       	rcall	.-2294   	; 0xd90 <TWI_send_string>
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	0c c0       	rjmp	.+24     	; 0x16a2 <USART_DecodeCommandRxFIFO+0xae>
    168a:	40 91 00 00 	lds	r20, 0x0000
    168e:	6d 2f       	mov	r22, r29
    1690:	8c 2f       	mov	r24, r28
    1692:	36 db       	rcall	.-2452   	; 0xd00 <TWI_send_command>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <USART_DecodeCommandRxFIFO+0xae>
    1698:	69 e8       	ldi	r22, 0x89	; 137
    169a:	72 e1       	ldi	r23, 0x12	; 18
    169c:	80 e4       	ldi	r24, 0x40	; 64
    169e:	78 db       	rcall	.-2320   	; 0xd90 <TWI_send_string>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <USART_DecodeValueFIFO>:
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <USART_DecodeValueFIFO+0xe>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <USART_DecodeValueFIFO+0x10>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	80 91 11 01 	lds	r24, 0x0111
    16c4:	90 91 12 01 	lds	r25, 0x0112
    16c8:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    16cc:	88 23       	and	r24, r24
    16ce:	31 f0       	breq	.+12     	; 0x16dc <USART_DecodeValueFIFO+0x34>
    16d0:	60 eb       	ldi	r22, 0xB0	; 176
    16d2:	72 e1       	ldi	r23, 0x12	; 18
    16d4:	80 e4       	ldi	r24, 0x40	; 64
    16d6:	5c db       	rcall	.-2376   	; 0xd90 <TWI_send_string>
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	32 c0       	rjmp	.+100    	; 0x1740 <USART_DecodeValueFIFO+0x98>
    16dc:	80 91 00 00 	lds	r24, 0x0000
    16e0:	84 30       	cpi	r24, 0x04	; 4
    16e2:	59 f5       	brne	.+86     	; 0x173a <USART_DecodeValueFIFO+0x92>
    16e4:	8e 01       	movw	r16, r28
    16e6:	0f 5f       	subi	r16, 0xFF	; 255
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	7e 01       	movw	r14, r28
    16ec:	85 e0       	ldi	r24, 0x05	; 5
    16ee:	e8 0e       	add	r14, r24
    16f0:	f1 1c       	adc	r15, r1
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	80 91 11 01 	lds	r24, 0x0111
    16fa:	90 91 12 01 	lds	r25, 0x0112
    16fe:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    1702:	81 11       	cpse	r24, r1
    1704:	1c c0       	rjmp	.+56     	; 0x173e <USART_DecodeValueFIFO+0x96>
    1706:	e0 e0       	ldi	r30, 0x00	; 0
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	d8 01       	movw	r26, r16
    170e:	8d 93       	st	X+, r24
    1710:	8d 01       	movw	r16, r26
    1712:	60 81       	ld	r22, Z
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	2c d2       	rcall	.+1112   	; 0x1b74 <__floatunsisf>
    171c:	ab 01       	movw	r20, r22
    171e:	bc 01       	movw	r22, r24
    1720:	80 e8       	ldi	r24, 0x80	; 128
    1722:	ba db       	rcall	.-2188   	; 0xe98 <TWI_send_float>
    1724:	0e 15       	cp	r16, r14
    1726:	1f 05       	cpc	r17, r15
    1728:	21 f7       	brne	.-56     	; 0x16f2 <USART_DecodeValueFIFO+0x4a>
    172a:	49 81       	ldd	r20, Y+1	; 0x01
    172c:	5a 81       	ldd	r21, Y+2	; 0x02
    172e:	6b 81       	ldd	r22, Y+3	; 0x03
    1730:	7c 81       	ldd	r23, Y+4	; 0x04
    1732:	80 e8       	ldi	r24, 0x80	; 128
    1734:	b1 db       	rcall	.-2206   	; 0xe98 <TWI_send_float>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <USART_DecodeValueFIFO+0x98>
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <USART_DecodeValueFIFO+0x98>
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	08 95       	ret

00001756 <USART_DecodeReadyFIFO>:
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 91 11 01 	lds	r24, 0x0111
    175e:	90 91 12 01 	lds	r25, 0x0112
    1762:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    1766:	88 23       	and	r24, r24
    1768:	31 f0       	breq	.+12     	; 0x1776 <USART_DecodeReadyFIFO+0x20>
    176a:	64 ef       	ldi	r22, 0xF4	; 244
    176c:	71 e1       	ldi	r23, 0x11	; 17
    176e:	80 e4       	ldi	r24, 0x40	; 64
    1770:	0f db       	rcall	.-2530   	; 0xd90 <TWI_send_string>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	08 95       	ret
    1776:	80 91 00 00 	lds	r24, 0x0000
    177a:	81 11       	cpse	r24, r1
    177c:	05 c0       	rjmp	.+10     	; 0x1788 <USART_DecodeReadyFIFO+0x32>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 93 e3 12 	sts	0x12E3, r24
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	08 95       	ret
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	08 95       	ret

0000178c <USART_ready>:
    178c:	80 91 e3 12 	lds	r24, 0x12E3
    1790:	88 23       	and	r24, r24
    1792:	21 f0       	breq	.+8      	; 0x179c <USART_ready+0x10>
    1794:	10 92 e3 12 	sts	0x12E3, r1
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	08 95       	ret
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	08 95       	ret

000017a0 <USART_DecodeRxFIFO>:
    17a0:	1c c0       	rjmp	.+56     	; 0x17da <USART_DecodeRxFIFO+0x3a>
    17a2:	80 91 00 00 	lds	r24, 0x0000
    17a6:	8d 34       	cpi	r24, 0x4D	; 77
    17a8:	49 f0       	breq	.+18     	; 0x17bc <USART_DecodeRxFIFO+0x1c>
    17aa:	18 f4       	brcc	.+6      	; 0x17b2 <USART_DecodeRxFIFO+0x12>
    17ac:	83 34       	cpi	r24, 0x43	; 67
    17ae:	a9 f4       	brne	.+42     	; 0x17da <USART_DecodeRxFIFO+0x3a>
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <USART_DecodeRxFIFO+0x24>
    17b2:	82 35       	cpi	r24, 0x52	; 82
    17b4:	79 f0       	breq	.+30     	; 0x17d4 <USART_DecodeRxFIFO+0x34>
    17b6:	86 35       	cpi	r24, 0x56	; 86
    17b8:	81 f4       	brne	.+32     	; 0x17da <USART_DecodeRxFIFO+0x3a>
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <USART_DecodeRxFIFO+0x2c>
    17bc:	a4 de       	rcall	.-696    	; 0x1506 <USART_DecodeMessageRxFIFO>
    17be:	88 23       	and	r24, r24
    17c0:	61 f0       	breq	.+24     	; 0x17da <USART_DecodeRxFIFO+0x3a>
    17c2:	08 95       	ret
    17c4:	17 df       	rcall	.-466    	; 0x15f4 <USART_DecodeCommandRxFIFO>
    17c6:	88 23       	and	r24, r24
    17c8:	41 f0       	breq	.+16     	; 0x17da <USART_DecodeRxFIFO+0x3a>
    17ca:	08 95       	ret
    17cc:	6d df       	rcall	.-294    	; 0x16a8 <USART_DecodeValueFIFO>
    17ce:	88 23       	and	r24, r24
    17d0:	21 f0       	breq	.+8      	; 0x17da <USART_DecodeRxFIFO+0x3a>
    17d2:	08 95       	ret
    17d4:	c0 df       	rcall	.-128    	; 0x1756 <USART_DecodeReadyFIFO>
    17d6:	81 11       	cpse	r24, r1
    17d8:	0a c0       	rjmp	.+20     	; 0x17ee <USART_DecodeRxFIFO+0x4e>
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	80 91 11 01 	lds	r24, 0x0111
    17e2:	90 91 12 01 	lds	r25, 0x0112
    17e6:	0e 94 16 02 	call	0x42c	; 0x42c <FifoRead>
    17ea:	88 23       	and	r24, r24
    17ec:	d1 f2       	breq	.-76     	; 0x17a2 <USART_DecodeRxFIFO+0x2>
    17ee:	08 95       	ret

000017f0 <__vector_20>:
}


ISR (USART0_RX_vect)
{
    17f0:	1f 92       	push	r1
    17f2:	0f 92       	push	r0
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	0f 92       	push	r0
    17f8:	11 24       	eor	r1, r1
    17fa:	0b b6       	in	r0, 0x3b	; 59
    17fc:	0f 92       	push	r0
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	2f 93       	push	r18
    1808:	3f 93       	push	r19
    180a:	4f 93       	push	r20
    180c:	5f 93       	push	r21
    180e:	6f 93       	push	r22
    1810:	7f 93       	push	r23
    1812:	8f 93       	push	r24
    1814:	9f 93       	push	r25
    1816:	af 93       	push	r26
    1818:	bf 93       	push	r27
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
    1822:	20 91 c6 00 	lds	r18, 0x00C6
	
	if(data == 0x7e)
    1826:	2e 37       	cpi	r18, 0x7E	; 126
    1828:	09 f0       	breq	.+2      	; 0x182c <__vector_20+0x3c>
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
    182c:	80 91 e6 12 	lds	r24, 0x12E6
    1830:	90 91 e7 12 	lds	r25, 0x12E7
    1834:	84 30       	cpi	r24, 0x04	; 4
    1836:	91 05       	cpc	r25, r1
    1838:	40 f4       	brcc	.+16     	; 0x184a <__vector_20+0x5a>
    183a:	20 91 57 14 	lds	r18, 0x1457
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	2c 5f       	subi	r18, 0xFC	; 252
    1842:	3f 4f       	sbci	r19, 0xFF	; 255
    1844:	82 17       	cp	r24, r18
    1846:	93 07       	cpc	r25, r19
    1848:	59 f5       	brne	.+86     	; 0x18a0 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
    184a:	80 91 e4 12 	lds	r24, 0x12E4
    184e:	90 91 e5 12 	lds	r25, 0x12E5
    1852:	89 2b       	or	r24, r25
    1854:	21 f0       	breq	.+8      	; 0x185e <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
    1856:	10 92 e5 12 	sts	0x12E5, r1
    185a:	10 92 e4 12 	sts	0x12E4, r1
    185e:	06 e5       	ldi	r16, 0x56	; 86
    1860:	14 e1       	ldi	r17, 0x14	; 20
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1862:	c0 e0       	ldi	r28, 0x00	; 0
    1864:	d0 e0       	ldi	r29, 0x00	; 0
    1866:	0f 2e       	mov	r0, r31
    1868:	f7 e5       	ldi	r31, 0x57	; 87
    186a:	ef 2e       	mov	r14, r31
    186c:	f4 e1       	ldi	r31, 0x14	; 20
    186e:	ff 2e       	mov	r15, r31
    1870:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
    1872:	f8 01       	movw	r30, r16
    1874:	61 91       	ld	r22, Z+
    1876:	8f 01       	movw	r16, r30
    1878:	80 91 11 01 	lds	r24, 0x0111
    187c:	90 91 12 01 	lds	r25, 0x0112
    1880:	0e 94 f6 01 	call	0x3ec	; 0x3ec <FifoWrite>
    1884:	88 23       	and	r24, r24
    1886:	21 f0       	breq	.+8      	; 0x1890 <__vector_20+0xa0>
				{
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
    1888:	60 ed       	ldi	r22, 0xD0	; 208
    188a:	72 e1       	ldi	r23, 0x12	; 18
    188c:	80 e4       	ldi	r24, 0x40	; 64
    188e:	80 da       	rcall	.-2816   	; 0xd90 <TWI_send_string>
				gInvertNextFlag = 0;
			}
			
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
    1890:	21 96       	adiw	r28, 0x01	; 1
    1892:	f7 01       	movw	r30, r14
    1894:	80 81       	ld	r24, Z
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 96       	adiw	r24, 0x02	; 2
    189a:	c8 17       	cp	r28, r24
    189c:	d9 07       	cpc	r29, r25
    189e:	4c f3       	brlt	.-46     	; 0x1872 <__vector_20+0x82>
					TWI_send_string(S_ADDRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
    18a0:	10 92 e7 12 	sts	0x12E7, r1
    18a4:	10 92 e6 12 	sts	0x12E6, r1
    18a8:	16 c0       	rjmp	.+44     	; 0x18d6 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
    18aa:	2d 37       	cpi	r18, 0x7D	; 125
    18ac:	39 f4       	brne	.+14     	; 0x18bc <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	90 93 e5 12 	sts	0x12E5, r25
    18b6:	80 93 e4 12 	sts	0x12E4, r24
    18ba:	0d c0       	rjmp	.+26     	; 0x18d6 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
    18bc:	80 91 e6 12 	lds	r24, 0x12E6
    18c0:	90 91 e7 12 	lds	r25, 0x12E7
    18c4:	fc 01       	movw	r30, r24
    18c6:	ea 5a       	subi	r30, 0xAA	; 170
    18c8:	fb 4e       	sbci	r31, 0xEB	; 235
    18ca:	20 83       	st	Z, r18
		++gRxBufferIndex;
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	90 93 e7 12 	sts	0x12E7, r25
    18d2:	80 93 e6 12 	sts	0x12E6, r24
	}
	
	
}
    18d6:	ff 91       	pop	r31
    18d8:	ef 91       	pop	r30
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	bf 91       	pop	r27
    18e0:	af 91       	pop	r26
    18e2:	9f 91       	pop	r25
    18e4:	8f 91       	pop	r24
    18e6:	7f 91       	pop	r23
    18e8:	6f 91       	pop	r22
    18ea:	5f 91       	pop	r21
    18ec:	4f 91       	pop	r20
    18ee:	3f 91       	pop	r19
    18f0:	2f 91       	pop	r18
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	0f 90       	pop	r0
    18fc:	0b be       	out	0x3b, r0	; 59
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <USART_send_command_parameters>:

void USART_send_command_parameters(uint8_t direction, uint8_t rotation, uint8_t speed)
{
	gTxPayload[0] = direction;
    1908:	80 93 5b 16 	sts	0x165B, r24
	gTxPayload[1] = rotation;
    190c:	60 93 5c 16 	sts	0x165C, r22
	gTxPayload[2] = speed;
    1910:	40 93 5d 16 	sts	0x165D, r20
	
	
	USART_SendPacket('C', 3);
    1914:	63 e0       	ldi	r22, 0x03	; 3
    1916:	83 e4       	ldi	r24, 0x43	; 67
    1918:	7e cd       	rjmp	.-1284   	; 0x1416 <USART_SendPacket>

0000191a <__subsf3>:
    191a:	50 58       	subi	r21, 0x80	; 128

0000191c <__addsf3>:
    191c:	bb 27       	eor	r27, r27
    191e:	aa 27       	eor	r26, r26
    1920:	0e d0       	rcall	.+28     	; 0x193e <__addsf3x>
    1922:	ed c1       	rjmp	.+986    	; 0x1cfe <__fp_round>
    1924:	b6 d1       	rcall	.+876    	; 0x1c92 <__fp_pscA>
    1926:	30 f0       	brcs	.+12     	; 0x1934 <__addsf3+0x18>
    1928:	bb d1       	rcall	.+886    	; 0x1ca0 <__fp_pscB>
    192a:	20 f0       	brcs	.+8      	; 0x1934 <__addsf3+0x18>
    192c:	31 f4       	brne	.+12     	; 0x193a <__addsf3+0x1e>
    192e:	9f 3f       	cpi	r25, 0xFF	; 255
    1930:	11 f4       	brne	.+4      	; 0x1936 <__addsf3+0x1a>
    1932:	1e f4       	brtc	.+6      	; 0x193a <__addsf3+0x1e>
    1934:	86 c1       	rjmp	.+780    	; 0x1c42 <__fp_nan>
    1936:	0e f4       	brtc	.+2      	; 0x193a <__addsf3+0x1e>
    1938:	e0 95       	com	r30
    193a:	e7 fb       	bst	r30, 7
    193c:	7c c1       	rjmp	.+760    	; 0x1c36 <__fp_inf>

0000193e <__addsf3x>:
    193e:	e9 2f       	mov	r30, r25
    1940:	00 d2       	rcall	.+1024   	; 0x1d42 <__fp_split3>
    1942:	80 f3       	brcs	.-32     	; 0x1924 <__addsf3+0x8>
    1944:	ba 17       	cp	r27, r26
    1946:	62 07       	cpc	r22, r18
    1948:	73 07       	cpc	r23, r19
    194a:	84 07       	cpc	r24, r20
    194c:	95 07       	cpc	r25, r21
    194e:	18 f0       	brcs	.+6      	; 0x1956 <__addsf3x+0x18>
    1950:	71 f4       	brne	.+28     	; 0x196e <__addsf3x+0x30>
    1952:	9e f5       	brtc	.+102    	; 0x19ba <__addsf3x+0x7c>
    1954:	18 c2       	rjmp	.+1072   	; 0x1d86 <__fp_zero>
    1956:	0e f4       	brtc	.+2      	; 0x195a <__addsf3x+0x1c>
    1958:	e0 95       	com	r30
    195a:	0b 2e       	mov	r0, r27
    195c:	ba 2f       	mov	r27, r26
    195e:	a0 2d       	mov	r26, r0
    1960:	0b 01       	movw	r0, r22
    1962:	b9 01       	movw	r22, r18
    1964:	90 01       	movw	r18, r0
    1966:	0c 01       	movw	r0, r24
    1968:	ca 01       	movw	r24, r20
    196a:	a0 01       	movw	r20, r0
    196c:	11 24       	eor	r1, r1
    196e:	ff 27       	eor	r31, r31
    1970:	59 1b       	sub	r21, r25
    1972:	99 f0       	breq	.+38     	; 0x199a <__addsf3x+0x5c>
    1974:	59 3f       	cpi	r21, 0xF9	; 249
    1976:	50 f4       	brcc	.+20     	; 0x198c <__addsf3x+0x4e>
    1978:	50 3e       	cpi	r21, 0xE0	; 224
    197a:	68 f1       	brcs	.+90     	; 0x19d6 <__addsf3x+0x98>
    197c:	1a 16       	cp	r1, r26
    197e:	f0 40       	sbci	r31, 0x00	; 0
    1980:	a2 2f       	mov	r26, r18
    1982:	23 2f       	mov	r18, r19
    1984:	34 2f       	mov	r19, r20
    1986:	44 27       	eor	r20, r20
    1988:	58 5f       	subi	r21, 0xF8	; 248
    198a:	f3 cf       	rjmp	.-26     	; 0x1972 <__addsf3x+0x34>
    198c:	46 95       	lsr	r20
    198e:	37 95       	ror	r19
    1990:	27 95       	ror	r18
    1992:	a7 95       	ror	r26
    1994:	f0 40       	sbci	r31, 0x00	; 0
    1996:	53 95       	inc	r21
    1998:	c9 f7       	brne	.-14     	; 0x198c <__addsf3x+0x4e>
    199a:	7e f4       	brtc	.+30     	; 0x19ba <__addsf3x+0x7c>
    199c:	1f 16       	cp	r1, r31
    199e:	ba 0b       	sbc	r27, r26
    19a0:	62 0b       	sbc	r22, r18
    19a2:	73 0b       	sbc	r23, r19
    19a4:	84 0b       	sbc	r24, r20
    19a6:	ba f0       	brmi	.+46     	; 0x19d6 <__addsf3x+0x98>
    19a8:	91 50       	subi	r25, 0x01	; 1
    19aa:	a1 f0       	breq	.+40     	; 0x19d4 <__addsf3x+0x96>
    19ac:	ff 0f       	add	r31, r31
    19ae:	bb 1f       	adc	r27, r27
    19b0:	66 1f       	adc	r22, r22
    19b2:	77 1f       	adc	r23, r23
    19b4:	88 1f       	adc	r24, r24
    19b6:	c2 f7       	brpl	.-16     	; 0x19a8 <__addsf3x+0x6a>
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <__addsf3x+0x98>
    19ba:	ba 0f       	add	r27, r26
    19bc:	62 1f       	adc	r22, r18
    19be:	73 1f       	adc	r23, r19
    19c0:	84 1f       	adc	r24, r20
    19c2:	48 f4       	brcc	.+18     	; 0x19d6 <__addsf3x+0x98>
    19c4:	87 95       	ror	r24
    19c6:	77 95       	ror	r23
    19c8:	67 95       	ror	r22
    19ca:	b7 95       	ror	r27
    19cc:	f7 95       	ror	r31
    19ce:	9e 3f       	cpi	r25, 0xFE	; 254
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <__addsf3x+0x96>
    19d2:	b3 cf       	rjmp	.-154    	; 0x193a <__addsf3+0x1e>
    19d4:	93 95       	inc	r25
    19d6:	88 0f       	add	r24, r24
    19d8:	08 f0       	brcs	.+2      	; 0x19dc <__addsf3x+0x9e>
    19da:	99 27       	eor	r25, r25
    19dc:	ee 0f       	add	r30, r30
    19de:	97 95       	ror	r25
    19e0:	87 95       	ror	r24
    19e2:	08 95       	ret

000019e4 <atan>:
    19e4:	df 93       	push	r29
    19e6:	dd 27       	eor	r29, r29
    19e8:	b9 2f       	mov	r27, r25
    19ea:	bf 77       	andi	r27, 0x7F	; 127
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	16 16       	cp	r1, r22
    19f2:	17 06       	cpc	r1, r23
    19f4:	48 07       	cpc	r20, r24
    19f6:	5b 07       	cpc	r21, r27
    19f8:	10 f4       	brcc	.+4      	; 0x19fe <atan+0x1a>
    19fa:	d9 2f       	mov	r29, r25
    19fc:	cf d1       	rcall	.+926    	; 0x1d9c <inverse>
    19fe:	9f 93       	push	r25
    1a00:	8f 93       	push	r24
    1a02:	7f 93       	push	r23
    1a04:	6f 93       	push	r22
    1a06:	34 d2       	rcall	.+1128   	; 0x1e70 <square>
    1a08:	ec e8       	ldi	r30, 0x8C	; 140
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	1d d1       	rcall	.+570    	; 0x1c48 <__fp_powser>
    1a0e:	77 d1       	rcall	.+750    	; 0x1cfe <__fp_round>
    1a10:	2f 91       	pop	r18
    1a12:	3f 91       	pop	r19
    1a14:	4f 91       	pop	r20
    1a16:	5f 91       	pop	r21
    1a18:	d4 d1       	rcall	.+936    	; 0x1dc2 <__mulsf3x>
    1a1a:	dd 23       	and	r29, r29
    1a1c:	49 f0       	breq	.+18     	; 0x1a30 <atan+0x4c>
    1a1e:	90 58       	subi	r25, 0x80	; 128
    1a20:	a2 ea       	ldi	r26, 0xA2	; 162
    1a22:	2a ed       	ldi	r18, 0xDA	; 218
    1a24:	3f e0       	ldi	r19, 0x0F	; 15
    1a26:	49 ec       	ldi	r20, 0xC9	; 201
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	d0 78       	andi	r29, 0x80	; 128
    1a2c:	5d 27       	eor	r21, r29
    1a2e:	87 df       	rcall	.-242    	; 0x193e <__addsf3x>
    1a30:	df 91       	pop	r29
    1a32:	65 c1       	rjmp	.+714    	; 0x1cfe <__fp_round>

00001a34 <__cmpsf2>:
    1a34:	dc d0       	rcall	.+440    	; 0x1bee <__fp_cmp>
    1a36:	08 f4       	brcc	.+2      	; 0x1a3a <__cmpsf2+0x6>
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	08 95       	ret

00001a3c <cos>:
    1a3c:	39 d1       	rcall	.+626    	; 0x1cb0 <__fp_rempio2>
    1a3e:	e3 95       	inc	r30
    1a40:	6f c1       	rjmp	.+734    	; 0x1d20 <__fp_sinus>

00001a42 <__divsf3>:
    1a42:	0c d0       	rcall	.+24     	; 0x1a5c <__divsf3x>
    1a44:	5c c1       	rjmp	.+696    	; 0x1cfe <__fp_round>
    1a46:	2c d1       	rcall	.+600    	; 0x1ca0 <__fp_pscB>
    1a48:	40 f0       	brcs	.+16     	; 0x1a5a <__divsf3+0x18>
    1a4a:	23 d1       	rcall	.+582    	; 0x1c92 <__fp_pscA>
    1a4c:	30 f0       	brcs	.+12     	; 0x1a5a <__divsf3+0x18>
    1a4e:	21 f4       	brne	.+8      	; 0x1a58 <__divsf3+0x16>
    1a50:	5f 3f       	cpi	r21, 0xFF	; 255
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <__divsf3+0x18>
    1a54:	f0 c0       	rjmp	.+480    	; 0x1c36 <__fp_inf>
    1a56:	51 11       	cpse	r21, r1
    1a58:	97 c1       	rjmp	.+814    	; 0x1d88 <__fp_szero>
    1a5a:	f3 c0       	rjmp	.+486    	; 0x1c42 <__fp_nan>

00001a5c <__divsf3x>:
    1a5c:	72 d1       	rcall	.+740    	; 0x1d42 <__fp_split3>
    1a5e:	98 f3       	brcs	.-26     	; 0x1a46 <__divsf3+0x4>

00001a60 <__divsf3_pse>:
    1a60:	99 23       	and	r25, r25
    1a62:	c9 f3       	breq	.-14     	; 0x1a56 <__divsf3+0x14>
    1a64:	55 23       	and	r21, r21
    1a66:	b1 f3       	breq	.-20     	; 0x1a54 <__divsf3+0x12>
    1a68:	95 1b       	sub	r25, r21
    1a6a:	55 0b       	sbc	r21, r21
    1a6c:	bb 27       	eor	r27, r27
    1a6e:	aa 27       	eor	r26, r26
    1a70:	62 17       	cp	r22, r18
    1a72:	73 07       	cpc	r23, r19
    1a74:	84 07       	cpc	r24, r20
    1a76:	38 f0       	brcs	.+14     	; 0x1a86 <__divsf3_pse+0x26>
    1a78:	9f 5f       	subi	r25, 0xFF	; 255
    1a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7c:	22 0f       	add	r18, r18
    1a7e:	33 1f       	adc	r19, r19
    1a80:	44 1f       	adc	r20, r20
    1a82:	aa 1f       	adc	r26, r26
    1a84:	a9 f3       	breq	.-22     	; 0x1a70 <__divsf3_pse+0x10>
    1a86:	33 d0       	rcall	.+102    	; 0x1aee <__divsf3_pse+0x8e>
    1a88:	0e 2e       	mov	r0, r30
    1a8a:	3a f0       	brmi	.+14     	; 0x1a9a <__divsf3_pse+0x3a>
    1a8c:	e0 e8       	ldi	r30, 0x80	; 128
    1a8e:	30 d0       	rcall	.+96     	; 0x1af0 <__divsf3_pse+0x90>
    1a90:	91 50       	subi	r25, 0x01	; 1
    1a92:	50 40       	sbci	r21, 0x00	; 0
    1a94:	e6 95       	lsr	r30
    1a96:	00 1c       	adc	r0, r0
    1a98:	ca f7       	brpl	.-14     	; 0x1a8c <__divsf3_pse+0x2c>
    1a9a:	29 d0       	rcall	.+82     	; 0x1aee <__divsf3_pse+0x8e>
    1a9c:	fe 2f       	mov	r31, r30
    1a9e:	27 d0       	rcall	.+78     	; 0x1aee <__divsf3_pse+0x8e>
    1aa0:	66 0f       	add	r22, r22
    1aa2:	77 1f       	adc	r23, r23
    1aa4:	88 1f       	adc	r24, r24
    1aa6:	bb 1f       	adc	r27, r27
    1aa8:	26 17       	cp	r18, r22
    1aaa:	37 07       	cpc	r19, r23
    1aac:	48 07       	cpc	r20, r24
    1aae:	ab 07       	cpc	r26, r27
    1ab0:	b0 e8       	ldi	r27, 0x80	; 128
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <__divsf3_pse+0x56>
    1ab4:	bb 0b       	sbc	r27, r27
    1ab6:	80 2d       	mov	r24, r0
    1ab8:	bf 01       	movw	r22, r30
    1aba:	ff 27       	eor	r31, r31
    1abc:	93 58       	subi	r25, 0x83	; 131
    1abe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac0:	2a f0       	brmi	.+10     	; 0x1acc <__divsf3_pse+0x6c>
    1ac2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ac4:	51 05       	cpc	r21, r1
    1ac6:	68 f0       	brcs	.+26     	; 0x1ae2 <__divsf3_pse+0x82>
    1ac8:	b6 c0       	rjmp	.+364    	; 0x1c36 <__fp_inf>
    1aca:	5e c1       	rjmp	.+700    	; 0x1d88 <__fp_szero>
    1acc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ace:	ec f3       	brlt	.-6      	; 0x1aca <__divsf3_pse+0x6a>
    1ad0:	98 3e       	cpi	r25, 0xE8	; 232
    1ad2:	dc f3       	brlt	.-10     	; 0x1aca <__divsf3_pse+0x6a>
    1ad4:	86 95       	lsr	r24
    1ad6:	77 95       	ror	r23
    1ad8:	67 95       	ror	r22
    1ada:	b7 95       	ror	r27
    1adc:	f7 95       	ror	r31
    1ade:	9f 5f       	subi	r25, 0xFF	; 255
    1ae0:	c9 f7       	brne	.-14     	; 0x1ad4 <__divsf3_pse+0x74>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	91 1d       	adc	r25, r1
    1ae6:	96 95       	lsr	r25
    1ae8:	87 95       	ror	r24
    1aea:	97 f9       	bld	r25, 7
    1aec:	08 95       	ret
    1aee:	e1 e0       	ldi	r30, 0x01	; 1
    1af0:	66 0f       	add	r22, r22
    1af2:	77 1f       	adc	r23, r23
    1af4:	88 1f       	adc	r24, r24
    1af6:	bb 1f       	adc	r27, r27
    1af8:	62 17       	cp	r22, r18
    1afa:	73 07       	cpc	r23, r19
    1afc:	84 07       	cpc	r24, r20
    1afe:	ba 07       	cpc	r27, r26
    1b00:	20 f0       	brcs	.+8      	; 0x1b0a <__divsf3_pse+0xaa>
    1b02:	62 1b       	sub	r22, r18
    1b04:	73 0b       	sbc	r23, r19
    1b06:	84 0b       	sbc	r24, r20
    1b08:	ba 0b       	sbc	r27, r26
    1b0a:	ee 1f       	adc	r30, r30
    1b0c:	88 f7       	brcc	.-30     	; 0x1af0 <__divsf3_pse+0x90>
    1b0e:	e0 95       	com	r30
    1b10:	08 95       	ret

00001b12 <__fixsfsi>:
    1b12:	04 d0       	rcall	.+8      	; 0x1b1c <__fixunssfsi>
    1b14:	68 94       	set
    1b16:	b1 11       	cpse	r27, r1
    1b18:	37 c1       	rjmp	.+622    	; 0x1d88 <__fp_szero>
    1b1a:	08 95       	ret

00001b1c <__fixunssfsi>:
    1b1c:	1a d1       	rcall	.+564    	; 0x1d52 <__fp_splitA>
    1b1e:	88 f0       	brcs	.+34     	; 0x1b42 <__fixunssfsi+0x26>
    1b20:	9f 57       	subi	r25, 0x7F	; 127
    1b22:	90 f0       	brcs	.+36     	; 0x1b48 <__fixunssfsi+0x2c>
    1b24:	b9 2f       	mov	r27, r25
    1b26:	99 27       	eor	r25, r25
    1b28:	b7 51       	subi	r27, 0x17	; 23
    1b2a:	a0 f0       	brcs	.+40     	; 0x1b54 <__fixunssfsi+0x38>
    1b2c:	d1 f0       	breq	.+52     	; 0x1b62 <__fixunssfsi+0x46>
    1b2e:	66 0f       	add	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	1a f0       	brmi	.+6      	; 0x1b3e <__fixunssfsi+0x22>
    1b38:	ba 95       	dec	r27
    1b3a:	c9 f7       	brne	.-14     	; 0x1b2e <__fixunssfsi+0x12>
    1b3c:	12 c0       	rjmp	.+36     	; 0x1b62 <__fixunssfsi+0x46>
    1b3e:	b1 30       	cpi	r27, 0x01	; 1
    1b40:	81 f0       	breq	.+32     	; 0x1b62 <__fixunssfsi+0x46>
    1b42:	21 d1       	rcall	.+578    	; 0x1d86 <__fp_zero>
    1b44:	b1 e0       	ldi	r27, 0x01	; 1
    1b46:	08 95       	ret
    1b48:	1e c1       	rjmp	.+572    	; 0x1d86 <__fp_zero>
    1b4a:	67 2f       	mov	r22, r23
    1b4c:	78 2f       	mov	r23, r24
    1b4e:	88 27       	eor	r24, r24
    1b50:	b8 5f       	subi	r27, 0xF8	; 248
    1b52:	39 f0       	breq	.+14     	; 0x1b62 <__fixunssfsi+0x46>
    1b54:	b9 3f       	cpi	r27, 0xF9	; 249
    1b56:	cc f3       	brlt	.-14     	; 0x1b4a <__fixunssfsi+0x2e>
    1b58:	86 95       	lsr	r24
    1b5a:	77 95       	ror	r23
    1b5c:	67 95       	ror	r22
    1b5e:	b3 95       	inc	r27
    1b60:	d9 f7       	brne	.-10     	; 0x1b58 <__fixunssfsi+0x3c>
    1b62:	3e f4       	brtc	.+14     	; 0x1b72 <__fixunssfsi+0x56>
    1b64:	90 95       	com	r25
    1b66:	80 95       	com	r24
    1b68:	70 95       	com	r23
    1b6a:	61 95       	neg	r22
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255
    1b72:	08 95       	ret

00001b74 <__floatunsisf>:
    1b74:	e8 94       	clt
    1b76:	09 c0       	rjmp	.+18     	; 0x1b8a <__floatsisf+0x12>

00001b78 <__floatsisf>:
    1b78:	97 fb       	bst	r25, 7
    1b7a:	3e f4       	brtc	.+14     	; 0x1b8a <__floatsisf+0x12>
    1b7c:	90 95       	com	r25
    1b7e:	80 95       	com	r24
    1b80:	70 95       	com	r23
    1b82:	61 95       	neg	r22
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	8f 4f       	sbci	r24, 0xFF	; 255
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	99 23       	and	r25, r25
    1b8c:	a9 f0       	breq	.+42     	; 0x1bb8 <__floatsisf+0x40>
    1b8e:	f9 2f       	mov	r31, r25
    1b90:	96 e9       	ldi	r25, 0x96	; 150
    1b92:	bb 27       	eor	r27, r27
    1b94:	93 95       	inc	r25
    1b96:	f6 95       	lsr	r31
    1b98:	87 95       	ror	r24
    1b9a:	77 95       	ror	r23
    1b9c:	67 95       	ror	r22
    1b9e:	b7 95       	ror	r27
    1ba0:	f1 11       	cpse	r31, r1
    1ba2:	f8 cf       	rjmp	.-16     	; 0x1b94 <__floatsisf+0x1c>
    1ba4:	fa f4       	brpl	.+62     	; 0x1be4 <__floatsisf+0x6c>
    1ba6:	bb 0f       	add	r27, r27
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <__floatsisf+0x36>
    1baa:	60 ff       	sbrs	r22, 0
    1bac:	1b c0       	rjmp	.+54     	; 0x1be4 <__floatsisf+0x6c>
    1bae:	6f 5f       	subi	r22, 0xFF	; 255
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	16 c0       	rjmp	.+44     	; 0x1be4 <__floatsisf+0x6c>
    1bb8:	88 23       	and	r24, r24
    1bba:	11 f0       	breq	.+4      	; 0x1bc0 <__floatsisf+0x48>
    1bbc:	96 e9       	ldi	r25, 0x96	; 150
    1bbe:	11 c0       	rjmp	.+34     	; 0x1be2 <__floatsisf+0x6a>
    1bc0:	77 23       	and	r23, r23
    1bc2:	21 f0       	breq	.+8      	; 0x1bcc <__floatsisf+0x54>
    1bc4:	9e e8       	ldi	r25, 0x8E	; 142
    1bc6:	87 2f       	mov	r24, r23
    1bc8:	76 2f       	mov	r23, r22
    1bca:	05 c0       	rjmp	.+10     	; 0x1bd6 <__floatsisf+0x5e>
    1bcc:	66 23       	and	r22, r22
    1bce:	71 f0       	breq	.+28     	; 0x1bec <__floatsisf+0x74>
    1bd0:	96 e8       	ldi	r25, 0x86	; 134
    1bd2:	86 2f       	mov	r24, r22
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	2a f0       	brmi	.+10     	; 0x1be4 <__floatsisf+0x6c>
    1bda:	9a 95       	dec	r25
    1bdc:	66 0f       	add	r22, r22
    1bde:	77 1f       	adc	r23, r23
    1be0:	88 1f       	adc	r24, r24
    1be2:	da f7       	brpl	.-10     	; 0x1bda <__floatsisf+0x62>
    1be4:	88 0f       	add	r24, r24
    1be6:	96 95       	lsr	r25
    1be8:	87 95       	ror	r24
    1bea:	97 f9       	bld	r25, 7
    1bec:	08 95       	ret

00001bee <__fp_cmp>:
    1bee:	99 0f       	add	r25, r25
    1bf0:	00 08       	sbc	r0, r0
    1bf2:	55 0f       	add	r21, r21
    1bf4:	aa 0b       	sbc	r26, r26
    1bf6:	e0 e8       	ldi	r30, 0x80	; 128
    1bf8:	fe ef       	ldi	r31, 0xFE	; 254
    1bfa:	16 16       	cp	r1, r22
    1bfc:	17 06       	cpc	r1, r23
    1bfe:	e8 07       	cpc	r30, r24
    1c00:	f9 07       	cpc	r31, r25
    1c02:	c0 f0       	brcs	.+48     	; 0x1c34 <__fp_cmp+0x46>
    1c04:	12 16       	cp	r1, r18
    1c06:	13 06       	cpc	r1, r19
    1c08:	e4 07       	cpc	r30, r20
    1c0a:	f5 07       	cpc	r31, r21
    1c0c:	98 f0       	brcs	.+38     	; 0x1c34 <__fp_cmp+0x46>
    1c0e:	62 1b       	sub	r22, r18
    1c10:	73 0b       	sbc	r23, r19
    1c12:	84 0b       	sbc	r24, r20
    1c14:	95 0b       	sbc	r25, r21
    1c16:	39 f4       	brne	.+14     	; 0x1c26 <__fp_cmp+0x38>
    1c18:	0a 26       	eor	r0, r26
    1c1a:	61 f0       	breq	.+24     	; 0x1c34 <__fp_cmp+0x46>
    1c1c:	23 2b       	or	r18, r19
    1c1e:	24 2b       	or	r18, r20
    1c20:	25 2b       	or	r18, r21
    1c22:	21 f4       	brne	.+8      	; 0x1c2c <__fp_cmp+0x3e>
    1c24:	08 95       	ret
    1c26:	0a 26       	eor	r0, r26
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <__fp_cmp+0x3e>
    1c2a:	a1 40       	sbci	r26, 0x01	; 1
    1c2c:	a6 95       	lsr	r26
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	81 1d       	adc	r24, r1
    1c32:	81 1d       	adc	r24, r1
    1c34:	08 95       	ret

00001c36 <__fp_inf>:
    1c36:	97 f9       	bld	r25, 7
    1c38:	9f 67       	ori	r25, 0x7F	; 127
    1c3a:	80 e8       	ldi	r24, 0x80	; 128
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	08 95       	ret

00001c42 <__fp_nan>:
    1c42:	9f ef       	ldi	r25, 0xFF	; 255
    1c44:	80 ec       	ldi	r24, 0xC0	; 192
    1c46:	08 95       	ret

00001c48 <__fp_powser>:
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	1f 93       	push	r17
    1c4e:	0f 93       	push	r16
    1c50:	ff 92       	push	r15
    1c52:	ef 92       	push	r14
    1c54:	df 92       	push	r13
    1c56:	7b 01       	movw	r14, r22
    1c58:	8c 01       	movw	r16, r24
    1c5a:	68 94       	set
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <__fp_powser+0x20>
    1c5e:	da 2e       	mov	r13, r26
    1c60:	ef 01       	movw	r28, r30
    1c62:	af d0       	rcall	.+350    	; 0x1dc2 <__mulsf3x>
    1c64:	fe 01       	movw	r30, r28
    1c66:	e8 94       	clt
    1c68:	a5 91       	lpm	r26, Z+
    1c6a:	25 91       	lpm	r18, Z+
    1c6c:	35 91       	lpm	r19, Z+
    1c6e:	45 91       	lpm	r20, Z+
    1c70:	55 91       	lpm	r21, Z+
    1c72:	ae f3       	brts	.-22     	; 0x1c5e <__fp_powser+0x16>
    1c74:	ef 01       	movw	r28, r30
    1c76:	63 de       	rcall	.-826    	; 0x193e <__addsf3x>
    1c78:	fe 01       	movw	r30, r28
    1c7a:	97 01       	movw	r18, r14
    1c7c:	a8 01       	movw	r20, r16
    1c7e:	da 94       	dec	r13
    1c80:	79 f7       	brne	.-34     	; 0x1c60 <__fp_powser+0x18>
    1c82:	df 90       	pop	r13
    1c84:	ef 90       	pop	r14
    1c86:	ff 90       	pop	r15
    1c88:	0f 91       	pop	r16
    1c8a:	1f 91       	pop	r17
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <__fp_pscA>:
    1c92:	00 24       	eor	r0, r0
    1c94:	0a 94       	dec	r0
    1c96:	16 16       	cp	r1, r22
    1c98:	17 06       	cpc	r1, r23
    1c9a:	18 06       	cpc	r1, r24
    1c9c:	09 06       	cpc	r0, r25
    1c9e:	08 95       	ret

00001ca0 <__fp_pscB>:
    1ca0:	00 24       	eor	r0, r0
    1ca2:	0a 94       	dec	r0
    1ca4:	12 16       	cp	r1, r18
    1ca6:	13 06       	cpc	r1, r19
    1ca8:	14 06       	cpc	r1, r20
    1caa:	05 06       	cpc	r0, r21
    1cac:	08 95       	ret
    1cae:	c9 cf       	rjmp	.-110    	; 0x1c42 <__fp_nan>

00001cb0 <__fp_rempio2>:
    1cb0:	50 d0       	rcall	.+160    	; 0x1d52 <__fp_splitA>
    1cb2:	e8 f3       	brcs	.-6      	; 0x1cae <__fp_pscB+0xe>
    1cb4:	e8 94       	clt
    1cb6:	e0 e0       	ldi	r30, 0x00	; 0
    1cb8:	bb 27       	eor	r27, r27
    1cba:	9f 57       	subi	r25, 0x7F	; 127
    1cbc:	f0 f0       	brcs	.+60     	; 0x1cfa <__fp_rempio2+0x4a>
    1cbe:	2a ed       	ldi	r18, 0xDA	; 218
    1cc0:	3f e0       	ldi	r19, 0x0F	; 15
    1cc2:	49 ec       	ldi	r20, 0xC9	; 201
    1cc4:	06 c0       	rjmp	.+12     	; 0x1cd2 <__fp_rempio2+0x22>
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	bb 0f       	add	r27, r27
    1cca:	66 1f       	adc	r22, r22
    1ccc:	77 1f       	adc	r23, r23
    1cce:	88 1f       	adc	r24, r24
    1cd0:	28 f0       	brcs	.+10     	; 0x1cdc <__fp_rempio2+0x2c>
    1cd2:	b2 3a       	cpi	r27, 0xA2	; 162
    1cd4:	62 07       	cpc	r22, r18
    1cd6:	73 07       	cpc	r23, r19
    1cd8:	84 07       	cpc	r24, r20
    1cda:	28 f0       	brcs	.+10     	; 0x1ce6 <__fp_rempio2+0x36>
    1cdc:	b2 5a       	subi	r27, 0xA2	; 162
    1cde:	62 0b       	sbc	r22, r18
    1ce0:	73 0b       	sbc	r23, r19
    1ce2:	84 0b       	sbc	r24, r20
    1ce4:	e3 95       	inc	r30
    1ce6:	9a 95       	dec	r25
    1ce8:	72 f7       	brpl	.-36     	; 0x1cc6 <__fp_rempio2+0x16>
    1cea:	80 38       	cpi	r24, 0x80	; 128
    1cec:	30 f4       	brcc	.+12     	; 0x1cfa <__fp_rempio2+0x4a>
    1cee:	9a 95       	dec	r25
    1cf0:	bb 0f       	add	r27, r27
    1cf2:	66 1f       	adc	r22, r22
    1cf4:	77 1f       	adc	r23, r23
    1cf6:	88 1f       	adc	r24, r24
    1cf8:	d2 f7       	brpl	.-12     	; 0x1cee <__fp_rempio2+0x3e>
    1cfa:	90 48       	sbci	r25, 0x80	; 128
    1cfc:	be c0       	rjmp	.+380    	; 0x1e7a <__fp_mpack_finite>

00001cfe <__fp_round>:
    1cfe:	09 2e       	mov	r0, r25
    1d00:	03 94       	inc	r0
    1d02:	00 0c       	add	r0, r0
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <__fp_round+0xc>
    1d06:	88 23       	and	r24, r24
    1d08:	52 f0       	brmi	.+20     	; 0x1d1e <__fp_round+0x20>
    1d0a:	bb 0f       	add	r27, r27
    1d0c:	40 f4       	brcc	.+16     	; 0x1d1e <__fp_round+0x20>
    1d0e:	bf 2b       	or	r27, r31
    1d10:	11 f4       	brne	.+4      	; 0x1d16 <__fp_round+0x18>
    1d12:	60 ff       	sbrs	r22, 0
    1d14:	04 c0       	rjmp	.+8      	; 0x1d1e <__fp_round+0x20>
    1d16:	6f 5f       	subi	r22, 0xFF	; 255
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	08 95       	ret

00001d20 <__fp_sinus>:
    1d20:	ef 93       	push	r30
    1d22:	e0 ff       	sbrs	r30, 0
    1d24:	06 c0       	rjmp	.+12     	; 0x1d32 <__fp_sinus+0x12>
    1d26:	a2 ea       	ldi	r26, 0xA2	; 162
    1d28:	2a ed       	ldi	r18, 0xDA	; 218
    1d2a:	3f e0       	ldi	r19, 0x0F	; 15
    1d2c:	49 ec       	ldi	r20, 0xC9	; 201
    1d2e:	5f eb       	ldi	r21, 0xBF	; 191
    1d30:	06 de       	rcall	.-1012   	; 0x193e <__addsf3x>
    1d32:	e5 df       	rcall	.-54     	; 0x1cfe <__fp_round>
    1d34:	0f 90       	pop	r0
    1d36:	03 94       	inc	r0
    1d38:	01 fc       	sbrc	r0, 1
    1d3a:	90 58       	subi	r25, 0x80	; 128
    1d3c:	e9 eb       	ldi	r30, 0xB9	; 185
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	a8 c0       	rjmp	.+336    	; 0x1e92 <__fp_powsodd>

00001d42 <__fp_split3>:
    1d42:	57 fd       	sbrc	r21, 7
    1d44:	90 58       	subi	r25, 0x80	; 128
    1d46:	44 0f       	add	r20, r20
    1d48:	55 1f       	adc	r21, r21
    1d4a:	59 f0       	breq	.+22     	; 0x1d62 <__fp_splitA+0x10>
    1d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d4e:	71 f0       	breq	.+28     	; 0x1d6c <__fp_splitA+0x1a>
    1d50:	47 95       	ror	r20

00001d52 <__fp_splitA>:
    1d52:	88 0f       	add	r24, r24
    1d54:	97 fb       	bst	r25, 7
    1d56:	99 1f       	adc	r25, r25
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <__fp_splitA+0x20>
    1d5a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d5c:	79 f0       	breq	.+30     	; 0x1d7c <__fp_splitA+0x2a>
    1d5e:	87 95       	ror	r24
    1d60:	08 95       	ret
    1d62:	12 16       	cp	r1, r18
    1d64:	13 06       	cpc	r1, r19
    1d66:	14 06       	cpc	r1, r20
    1d68:	55 1f       	adc	r21, r21
    1d6a:	f2 cf       	rjmp	.-28     	; 0x1d50 <__fp_split3+0xe>
    1d6c:	46 95       	lsr	r20
    1d6e:	f1 df       	rcall	.-30     	; 0x1d52 <__fp_splitA>
    1d70:	08 c0       	rjmp	.+16     	; 0x1d82 <__fp_splitA+0x30>
    1d72:	16 16       	cp	r1, r22
    1d74:	17 06       	cpc	r1, r23
    1d76:	18 06       	cpc	r1, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	f1 cf       	rjmp	.-30     	; 0x1d5e <__fp_splitA+0xc>
    1d7c:	86 95       	lsr	r24
    1d7e:	71 05       	cpc	r23, r1
    1d80:	61 05       	cpc	r22, r1
    1d82:	08 94       	sec
    1d84:	08 95       	ret

00001d86 <__fp_zero>:
    1d86:	e8 94       	clt

00001d88 <__fp_szero>:
    1d88:	bb 27       	eor	r27, r27
    1d8a:	66 27       	eor	r22, r22
    1d8c:	77 27       	eor	r23, r23
    1d8e:	cb 01       	movw	r24, r22
    1d90:	97 f9       	bld	r25, 7
    1d92:	08 95       	ret

00001d94 <__gesf2>:
    1d94:	2c df       	rcall	.-424    	; 0x1bee <__fp_cmp>
    1d96:	08 f4       	brcc	.+2      	; 0x1d9a <__gesf2+0x6>
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	08 95       	ret

00001d9c <inverse>:
    1d9c:	9b 01       	movw	r18, r22
    1d9e:	ac 01       	movw	r20, r24
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	80 e8       	ldi	r24, 0x80	; 128
    1da6:	9f e3       	ldi	r25, 0x3F	; 63
    1da8:	4c ce       	rjmp	.-872    	; 0x1a42 <__divsf3>

00001daa <__mulsf3>:
    1daa:	0b d0       	rcall	.+22     	; 0x1dc2 <__mulsf3x>
    1dac:	a8 cf       	rjmp	.-176    	; 0x1cfe <__fp_round>
    1dae:	71 df       	rcall	.-286    	; 0x1c92 <__fp_pscA>
    1db0:	28 f0       	brcs	.+10     	; 0x1dbc <__mulsf3+0x12>
    1db2:	76 df       	rcall	.-276    	; 0x1ca0 <__fp_pscB>
    1db4:	18 f0       	brcs	.+6      	; 0x1dbc <__mulsf3+0x12>
    1db6:	95 23       	and	r25, r21
    1db8:	09 f0       	breq	.+2      	; 0x1dbc <__mulsf3+0x12>
    1dba:	3d cf       	rjmp	.-390    	; 0x1c36 <__fp_inf>
    1dbc:	42 cf       	rjmp	.-380    	; 0x1c42 <__fp_nan>
    1dbe:	11 24       	eor	r1, r1
    1dc0:	e3 cf       	rjmp	.-58     	; 0x1d88 <__fp_szero>

00001dc2 <__mulsf3x>:
    1dc2:	bf df       	rcall	.-130    	; 0x1d42 <__fp_split3>
    1dc4:	a0 f3       	brcs	.-24     	; 0x1dae <__mulsf3+0x4>

00001dc6 <__mulsf3_pse>:
    1dc6:	95 9f       	mul	r25, r21
    1dc8:	d1 f3       	breq	.-12     	; 0x1dbe <__mulsf3+0x14>
    1dca:	95 0f       	add	r25, r21
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	55 1f       	adc	r21, r21
    1dd0:	62 9f       	mul	r22, r18
    1dd2:	f0 01       	movw	r30, r0
    1dd4:	72 9f       	mul	r23, r18
    1dd6:	bb 27       	eor	r27, r27
    1dd8:	f0 0d       	add	r31, r0
    1dda:	b1 1d       	adc	r27, r1
    1ddc:	63 9f       	mul	r22, r19
    1dde:	aa 27       	eor	r26, r26
    1de0:	f0 0d       	add	r31, r0
    1de2:	b1 1d       	adc	r27, r1
    1de4:	aa 1f       	adc	r26, r26
    1de6:	64 9f       	mul	r22, r20
    1de8:	66 27       	eor	r22, r22
    1dea:	b0 0d       	add	r27, r0
    1dec:	a1 1d       	adc	r26, r1
    1dee:	66 1f       	adc	r22, r22
    1df0:	82 9f       	mul	r24, r18
    1df2:	22 27       	eor	r18, r18
    1df4:	b0 0d       	add	r27, r0
    1df6:	a1 1d       	adc	r26, r1
    1df8:	62 1f       	adc	r22, r18
    1dfa:	73 9f       	mul	r23, r19
    1dfc:	b0 0d       	add	r27, r0
    1dfe:	a1 1d       	adc	r26, r1
    1e00:	62 1f       	adc	r22, r18
    1e02:	83 9f       	mul	r24, r19
    1e04:	a0 0d       	add	r26, r0
    1e06:	61 1d       	adc	r22, r1
    1e08:	22 1f       	adc	r18, r18
    1e0a:	74 9f       	mul	r23, r20
    1e0c:	33 27       	eor	r19, r19
    1e0e:	a0 0d       	add	r26, r0
    1e10:	61 1d       	adc	r22, r1
    1e12:	23 1f       	adc	r18, r19
    1e14:	84 9f       	mul	r24, r20
    1e16:	60 0d       	add	r22, r0
    1e18:	21 1d       	adc	r18, r1
    1e1a:	82 2f       	mov	r24, r18
    1e1c:	76 2f       	mov	r23, r22
    1e1e:	6a 2f       	mov	r22, r26
    1e20:	11 24       	eor	r1, r1
    1e22:	9f 57       	subi	r25, 0x7F	; 127
    1e24:	50 40       	sbci	r21, 0x00	; 0
    1e26:	8a f0       	brmi	.+34     	; 0x1e4a <__mulsf3_pse+0x84>
    1e28:	e1 f0       	breq	.+56     	; 0x1e62 <__mulsf3_pse+0x9c>
    1e2a:	88 23       	and	r24, r24
    1e2c:	4a f0       	brmi	.+18     	; 0x1e40 <__mulsf3_pse+0x7a>
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	bb 1f       	adc	r27, r27
    1e34:	66 1f       	adc	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	88 1f       	adc	r24, r24
    1e3a:	91 50       	subi	r25, 0x01	; 1
    1e3c:	50 40       	sbci	r21, 0x00	; 0
    1e3e:	a9 f7       	brne	.-22     	; 0x1e2a <__mulsf3_pse+0x64>
    1e40:	9e 3f       	cpi	r25, 0xFE	; 254
    1e42:	51 05       	cpc	r21, r1
    1e44:	70 f0       	brcs	.+28     	; 0x1e62 <__mulsf3_pse+0x9c>
    1e46:	f7 ce       	rjmp	.-530    	; 0x1c36 <__fp_inf>
    1e48:	9f cf       	rjmp	.-194    	; 0x1d88 <__fp_szero>
    1e4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e4c:	ec f3       	brlt	.-6      	; 0x1e48 <__mulsf3_pse+0x82>
    1e4e:	98 3e       	cpi	r25, 0xE8	; 232
    1e50:	dc f3       	brlt	.-10     	; 0x1e48 <__mulsf3_pse+0x82>
    1e52:	86 95       	lsr	r24
    1e54:	77 95       	ror	r23
    1e56:	67 95       	ror	r22
    1e58:	b7 95       	ror	r27
    1e5a:	f7 95       	ror	r31
    1e5c:	e7 95       	ror	r30
    1e5e:	9f 5f       	subi	r25, 0xFF	; 255
    1e60:	c1 f7       	brne	.-16     	; 0x1e52 <__mulsf3_pse+0x8c>
    1e62:	fe 2b       	or	r31, r30
    1e64:	88 0f       	add	r24, r24
    1e66:	91 1d       	adc	r25, r1
    1e68:	96 95       	lsr	r25
    1e6a:	87 95       	ror	r24
    1e6c:	97 f9       	bld	r25, 7
    1e6e:	08 95       	ret

00001e70 <square>:
    1e70:	9b 01       	movw	r18, r22
    1e72:	ac 01       	movw	r20, r24
    1e74:	9a cf       	rjmp	.-204    	; 0x1daa <__mulsf3>

00001e76 <__fp_mpack>:
    1e76:	9f 3f       	cpi	r25, 0xFF	; 255
    1e78:	31 f0       	breq	.+12     	; 0x1e86 <__fp_mpack_finite+0xc>

00001e7a <__fp_mpack_finite>:
    1e7a:	91 50       	subi	r25, 0x01	; 1
    1e7c:	20 f4       	brcc	.+8      	; 0x1e86 <__fp_mpack_finite+0xc>
    1e7e:	87 95       	ror	r24
    1e80:	77 95       	ror	r23
    1e82:	67 95       	ror	r22
    1e84:	b7 95       	ror	r27
    1e86:	88 0f       	add	r24, r24
    1e88:	91 1d       	adc	r25, r1
    1e8a:	96 95       	lsr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	97 f9       	bld	r25, 7
    1e90:	08 95       	ret

00001e92 <__fp_powsodd>:
    1e92:	9f 93       	push	r25
    1e94:	8f 93       	push	r24
    1e96:	7f 93       	push	r23
    1e98:	6f 93       	push	r22
    1e9a:	ff 93       	push	r31
    1e9c:	ef 93       	push	r30
    1e9e:	9b 01       	movw	r18, r22
    1ea0:	ac 01       	movw	r20, r24
    1ea2:	83 df       	rcall	.-250    	; 0x1daa <__mulsf3>
    1ea4:	ef 91       	pop	r30
    1ea6:	ff 91       	pop	r31
    1ea8:	cf de       	rcall	.-610    	; 0x1c48 <__fp_powser>
    1eaa:	2f 91       	pop	r18
    1eac:	3f 91       	pop	r19
    1eae:	4f 91       	pop	r20
    1eb0:	5f 91       	pop	r21
    1eb2:	7b cf       	rjmp	.-266    	; 0x1daa <__mulsf3>

00001eb4 <_exit>:
    1eb4:	f8 94       	cli

00001eb6 <__stop_program>:
    1eb6:	ff cf       	rjmp	.-2      	; 0x1eb6 <__stop_program>
