
sensormodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001056  00800100  00001e04  00001e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  00801156  00801156  00002eee  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  00002ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000932  00000000  00000000  00005338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005c6a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d0  00000000  00000000  00005c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002972  00000000  00000000  00005f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b6d  00000000  00000000  000088db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ec4  00000000  00000000  00009448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008cc  00000000  00000000  0000b30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000090f  00000000  00000000  0000bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000200a  00000000  00000000  0000c4e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000300  00000000  00000000  0000e4f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_4>
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c2       	rjmp	.+1162   	; 0x4c0 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fa c5       	rjmp	.+3060   	; 0xc56 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__vector_26>
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4a c2       	rjmp	.+1172   	; 0x516 <__vector_32>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e1       	ldi	r17, 0x11	; 17
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e0       	ldi	r30, 0x04	; 4
      a0:	fe e1       	ldi	r31, 0x1E	; 30
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 35       	cpi	r26, 0x56	; 86
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e1       	ldi	r18, 0x13	; 19
      b4:	a6 e5       	ldi	r26, 0x56	; 86
      b6:	b1 e1       	ldi	r27, 0x11	; 17
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 37       	cpi	r26, 0x74	; 116
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	d2 d1       	rcall	.+932    	; 0x468 <main>
      c4:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
      ca:	bc 01       	movw	r22, r24
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__floatunsisf>
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	4a e7       	ldi	r20, 0x7A	; 122
      da:	51 e4       	ldi	r21, 0x41	; 65
      dc:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__mulsf3>
      e0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__fixunssfsi>
	OCR1A = delay;
      e4:	70 93 89 00 	sts	0x0089, r23
      e8:	60 93 88 00 	sts	0x0088, r22
      ec:	08 95       	ret

000000ee <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
      ee:	bc 01       	movw	r22, r24
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__floatunsisf>
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4a e7       	ldi	r20, 0x7A	; 122
      fe:	51 e4       	ldi	r21, 0x41	; 65
     100:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__mulsf3>
     104:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__fixunssfsi>
	OCR3A = delay;
     108:	70 93 99 00 	sts	0x0099, r23
     10c:	60 93 98 00 	sts	0x0098, r22
     110:	08 95       	ret

00000112 <init_counters>:
// OBS: fick byta timer 2 mot timer 3 så kommentarerna nedan stämmer inte riktigt...
//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     112:	e1 e8       	ldi	r30, 0x81	; 129
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	85 60       	ori	r24, 0x05	; 5
     11a:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     11c:	e1 e9       	ldi	r30, 0x91	; 145
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	85 60       	ori	r24, 0x05	; 5
     124:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     126:	88 ee       	ldi	r24, 0xE8	; 232
     128:	93 e0       	ldi	r25, 0x03	; 3
     12a:	cf df       	rcall	.-98     	; 0xca <set_counter_1>
	set_counter_2(1000);
     12c:	88 ee       	ldi	r24, 0xE8	; 232
     12e:	93 e0       	ldi	r25, 0x03	; 3
     130:	de df       	rcall	.-68     	; 0xee <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     132:	ef e6       	ldi	r30, 0x6F	; 111
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	82 60       	ori	r24, 0x02	; 2
     13a:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     13c:	e1 e7       	ldi	r30, 0x71	; 113
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	82 60       	ori	r24, 0x02	; 2
     144:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     146:	10 92 85 00 	sts	0x0085, r1
     14a:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     14e:	10 92 95 00 	sts	0x0095, r1
     152:	10 92 94 00 	sts	0x0094, r1
     156:	08 95       	ret

00000158 <toggle_enable>:
     158:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	8f e3       	ldi	r24, 0x3F	; 63
     15c:	9c e9       	ldi	r25, 0x9C	; 156
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <toggle_enable+0x6>
     162:	00 c0       	rjmp	.+0      	; 0x164 <toggle_enable+0xc>
     164:	00 00       	nop
     166:	8b b1       	in	r24, 0x0b	; 11
     168:	1b b8       	out	0x0b, r1	; 11
     16a:	08 95       	ret

0000016c <display_init>:
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	84 b9       	out	0x04, r24	; 4
     170:	8a b1       	in	r24, 0x0a	; 10
     172:	80 6e       	ori	r24, 0xE0	; 224
     174:	8a b9       	out	0x0a, r24	; 10
     176:	8b b1       	in	r24, 0x0b	; 11
     178:	1b b8       	out	0x0b, r1	; 11
     17a:	2f e7       	ldi	r18, 0x7F	; 127
     17c:	83 e8       	ldi	r24, 0x83	; 131
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	21 50       	subi	r18, 0x01	; 1
     182:	80 40       	sbci	r24, 0x00	; 0
     184:	90 40       	sbci	r25, 0x00	; 0
     186:	e1 f7       	brne	.-8      	; 0x180 <display_init+0x14>
     188:	00 c0       	rjmp	.+0      	; 0x18a <display_init+0x1e>
     18a:	00 00       	nop
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	85 b9       	out	0x05, r24	; 5
     190:	e3 df       	rcall	.-58     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     192:	25 ed       	ldi	r18, 0xD5	; 213
     194:	2a 95       	dec	r18
     196:	f1 f7       	brne	.-4      	; 0x194 <display_init+0x28>
     198:	00 00       	nop
     19a:	8f e0       	ldi	r24, 0x0F	; 15
     19c:	85 b9       	out	0x05, r24	; 5
     19e:	dc df       	rcall	.-72     	; 0x158 <toggle_enable>
     1a0:	85 ed       	ldi	r24, 0xD5	; 213
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <display_init+0x36>
     1a6:	00 00       	nop
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	85 b9       	out	0x05, r24	; 5
     1ac:	d5 df       	rcall	.-86     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ae:	8f e3       	ldi	r24, 0x3F	; 63
     1b0:	9f e1       	ldi	r25, 0x1F	; 31
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <display_init+0x46>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <display_init+0x4c>
     1b8:	00 00       	nop
     1ba:	86 e0       	ldi	r24, 0x06	; 6
     1bc:	85 b9       	out	0x05, r24	; 5
     1be:	cc cf       	rjmp	.-104    	; 0x158 <toggle_enable>

000001c0 <display_clear>:
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	85 b9       	out	0x05, r24	; 5
     1c4:	c9 df       	rcall	.-110    	; 0x158 <toggle_enable>
     1c6:	c8 cf       	rjmp	.-112    	; 0x158 <toggle_enable>

000001c8 <display_set_pos>:
     1c8:	2b b1       	in	r18, 0x0b	; 11
     1ca:	1b b8       	out	0x0b, r1	; 11
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	91 05       	cpc	r25, r1
     1d0:	41 f0       	breq	.+16     	; 0x1e2 <display_set_pos+0x1a>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	91 05       	cpc	r25, r1
     1d6:	41 f0       	breq	.+16     	; 0x1e8 <display_set_pos+0x20>
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	49 f0       	breq	.+18     	; 0x1ee <display_set_pos+0x26>
     1dc:	80 e8       	ldi	r24, 0x80	; 128
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <display_set_pos+0x2a>
     1e2:	80 e9       	ldi	r24, 0x90	; 144
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <display_set_pos+0x2a>
     1e8:	80 ed       	ldi	r24, 0xD0	; 208
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <display_set_pos+0x2a>
     1ee:	80 ec       	ldi	r24, 0xC0	; 192
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	68 0f       	add	r22, r24
     1f4:	79 1f       	adc	r23, r25
     1f6:	65 b9       	out	0x05, r22	; 5
     1f8:	af cf       	rjmp	.-162    	; 0x158 <toggle_enable>

000001fa <display_char>:
     1fa:	5d 9a       	sbi	0x0b, 5	; 11
     1fc:	85 b9       	out	0x05, r24	; 5
     1fe:	ac df       	rcall	.-168    	; 0x158 <toggle_enable>
     200:	15 b8       	out	0x05, r1	; 5
     202:	14 b8       	out	0x04, r1	; 4
     204:	5d 98       	cbi	0x0b, 5	; 11
     206:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     208:	85 e3       	ldi	r24, 0x35	; 53
     20a:	8a 95       	dec	r24
     20c:	f1 f7       	brne	.-4      	; 0x20a <display_char+0x10>
     20e:	00 00       	nop
     210:	a3 df       	rcall	.-186    	; 0x158 <toggle_enable>
     212:	83 b1       	in	r24, 0x03	; 3
     214:	9f ef       	ldi	r25, 0xFF	; 255
     216:	94 b9       	out	0x04, r25	; 4
     218:	5d 9a       	sbi	0x0b, 5	; 11
     21a:	80 32       	cpi	r24, 0x20	; 32
     21c:	99 f0       	breq	.+38     	; 0x244 <display_char+0x4a>
     21e:	18 f4       	brcc	.+6      	; 0x226 <display_char+0x2c>
     220:	80 31       	cpi	r24, 0x10	; 16
     222:	d1 f4       	brne	.+52     	; 0x258 <display_char+0x5e>
     224:	05 c0       	rjmp	.+10     	; 0x230 <display_char+0x36>
     226:	80 35       	cpi	r24, 0x50	; 80
     228:	41 f0       	breq	.+16     	; 0x23a <display_char+0x40>
     22a:	80 36       	cpi	r24, 0x60	; 96
     22c:	a9 f4       	brne	.+42     	; 0x258 <display_char+0x5e>
     22e:	0f c0       	rjmp	.+30     	; 0x24e <display_char+0x54>
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	c7 cf       	rjmp	.-114    	; 0x1c8 <display_set_pos>
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	c2 cf       	rjmp	.-124    	; 0x1c8 <display_set_pos>
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	83 e0       	ldi	r24, 0x03	; 3
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	bd cf       	rjmp	.-134    	; 0x1c8 <display_set_pos>
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	b8 cf       	rjmp	.-144    	; 0x1c8 <display_set_pos>
     258:	08 95       	ret

0000025a <print_digit>:
     25a:	84 30       	cpi	r24, 0x04	; 4
     25c:	91 05       	cpc	r25, r1
     25e:	31 f1       	breq	.+76     	; 0x2ac <print_digit+0x52>
     260:	6c f4       	brge	.+26     	; 0x27c <print_digit+0x22>
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	91 05       	cpc	r25, r1
     266:	e1 f0       	breq	.+56     	; 0x2a0 <print_digit+0x46>
     268:	1c f4       	brge	.+6      	; 0x270 <print_digit+0x16>
     26a:	89 2b       	or	r24, r25
     26c:	b9 f0       	breq	.+46     	; 0x29c <print_digit+0x42>
     26e:	2a c0       	rjmp	.+84     	; 0x2c4 <print_digit+0x6a>
     270:	82 30       	cpi	r24, 0x02	; 2
     272:	91 05       	cpc	r25, r1
     274:	b9 f0       	breq	.+46     	; 0x2a4 <print_digit+0x4a>
     276:	03 97       	sbiw	r24, 0x03	; 3
     278:	29 f5       	brne	.+74     	; 0x2c4 <print_digit+0x6a>
     27a:	16 c0       	rjmp	.+44     	; 0x2a8 <print_digit+0x4e>
     27c:	87 30       	cpi	r24, 0x07	; 7
     27e:	91 05       	cpc	r25, r1
     280:	d9 f0       	breq	.+54     	; 0x2b8 <print_digit+0x5e>
     282:	34 f4       	brge	.+12     	; 0x290 <print_digit+0x36>
     284:	85 30       	cpi	r24, 0x05	; 5
     286:	91 05       	cpc	r25, r1
     288:	99 f0       	breq	.+38     	; 0x2b0 <print_digit+0x56>
     28a:	06 97       	sbiw	r24, 0x06	; 6
     28c:	d9 f4       	brne	.+54     	; 0x2c4 <print_digit+0x6a>
     28e:	12 c0       	rjmp	.+36     	; 0x2b4 <print_digit+0x5a>
     290:	88 30       	cpi	r24, 0x08	; 8
     292:	91 05       	cpc	r25, r1
     294:	99 f0       	breq	.+38     	; 0x2bc <print_digit+0x62>
     296:	09 97       	sbiw	r24, 0x09	; 9
     298:	a9 f4       	brne	.+42     	; 0x2c4 <print_digit+0x6a>
     29a:	12 c0       	rjmp	.+36     	; 0x2c0 <print_digit+0x66>
     29c:	80 e3       	ldi	r24, 0x30	; 48
     29e:	ad cf       	rjmp	.-166    	; 0x1fa <display_char>
     2a0:	81 e3       	ldi	r24, 0x31	; 49
     2a2:	ab cf       	rjmp	.-170    	; 0x1fa <display_char>
     2a4:	82 e3       	ldi	r24, 0x32	; 50
     2a6:	a9 cf       	rjmp	.-174    	; 0x1fa <display_char>
     2a8:	83 e3       	ldi	r24, 0x33	; 51
     2aa:	a7 cf       	rjmp	.-178    	; 0x1fa <display_char>
     2ac:	84 e3       	ldi	r24, 0x34	; 52
     2ae:	a5 cf       	rjmp	.-182    	; 0x1fa <display_char>
     2b0:	85 e3       	ldi	r24, 0x35	; 53
     2b2:	a3 cf       	rjmp	.-186    	; 0x1fa <display_char>
     2b4:	86 e3       	ldi	r24, 0x36	; 54
     2b6:	a1 cf       	rjmp	.-190    	; 0x1fa <display_char>
     2b8:	87 e3       	ldi	r24, 0x37	; 55
     2ba:	9f cf       	rjmp	.-194    	; 0x1fa <display_char>
     2bc:	88 e3       	ldi	r24, 0x38	; 56
     2be:	9d cf       	rjmp	.-198    	; 0x1fa <display_char>
     2c0:	89 e3       	ldi	r24, 0x39	; 57
     2c2:	9b cf       	rjmp	.-202    	; 0x1fa <display_char>
     2c4:	80 e3       	ldi	r24, 0x30	; 48
     2c6:	99 cf       	rjmp	.-206    	; 0x1fa <display_char>

000002c8 <print_int>:
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	9c 01       	movw	r18, r24
     2ce:	8a 30       	cpi	r24, 0x0A	; 10
     2d0:	91 05       	cpc	r25, r1
     2d2:	24 f4       	brge	.+8      	; 0x2dc <print_int+0x14>
     2d4:	00 97       	sbiw	r24, 0x00	; 0
     2d6:	91 f0       	breq	.+36     	; 0x2fc <print_int+0x34>
     2d8:	c0 df       	rcall	.-128    	; 0x25a <print_digit>
     2da:	10 c0       	rjmp	.+32     	; 0x2fc <print_int+0x34>
     2dc:	ea e0       	ldi	r30, 0x0A	; 10
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	bf 01       	movw	r22, r30
     2e2:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__divmodhi4>
     2e6:	ec 01       	movw	r28, r24
     2e8:	c9 01       	movw	r24, r18
     2ea:	8c 1b       	sub	r24, r28
     2ec:	9d 0b       	sbc	r25, r29
     2ee:	bf 01       	movw	r22, r30
     2f0:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__divmodhi4>
     2f4:	cb 01       	movw	r24, r22
     2f6:	e8 df       	rcall	.-48     	; 0x2c8 <print_int>
     2f8:	ce 01       	movw	r24, r28
     2fa:	af df       	rcall	.-162    	; 0x25a <print_digit>
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <display_value>:
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	6b 01       	movw	r12, r22
     310:	7c 01       	movw	r14, r24
     312:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__fixsfsi>
     316:	eb 01       	movw	r28, r22
     318:	88 27       	eor	r24, r24
     31a:	77 fd       	sbrc	r23, 7
     31c:	80 95       	com	r24
     31e:	98 2f       	mov	r25, r24
     320:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__floatsisf>
     324:	a7 01       	movw	r20, r14
     326:	96 01       	movw	r18, r12
     328:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__cmpsf2>
     32c:	81 11       	cpse	r24, r1
     32e:	0f c0       	rjmp	.+30     	; 0x34e <display_value+0x4c>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e2       	ldi	r20, 0x20	; 32
     336:	51 e4       	ldi	r21, 0x41	; 65
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__cmpsf2>
     340:	88 23       	and	r24, r24
     342:	1c f4       	brge	.+6      	; 0x34a <display_value+0x48>
     344:	ce 01       	movw	r24, r28
     346:	89 df       	rcall	.-238    	; 0x25a <print_digit>
     348:	02 c0       	rjmp	.+4      	; 0x34e <display_value+0x4c>
     34a:	ce 01       	movw	r24, r28
     34c:	bd df       	rcall	.-134    	; 0x2c8 <print_int>
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	df 90       	pop	r13
     358:	cf 90       	pop	r12
     35a:	08 95       	ret

0000035c <display_text_fixed_length>:
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	16 16       	cp	r1, r22
     366:	17 06       	cpc	r1, r23
     368:	54 f4       	brge	.+20     	; 0x37e <display_text_fixed_length+0x22>
     36a:	c8 2f       	mov	r28, r24
     36c:	d9 2f       	mov	r29, r25
     36e:	8e 01       	movw	r16, r28
     370:	06 0f       	add	r16, r22
     372:	17 1f       	adc	r17, r23
     374:	89 91       	ld	r24, Y+
     376:	41 df       	rcall	.-382    	; 0x1fa <display_char>
     378:	c0 17       	cp	r28, r16
     37a:	d1 07       	cpc	r29, r17
     37c:	d9 f7       	brne	.-10     	; 0x374 <display_text_fixed_length+0x18>
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	08 95       	ret

00000388 <display_text>:
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	e8 2e       	mov	r14, r24
     396:	f9 2e       	mov	r15, r25
     398:	08 2f       	mov	r16, r24
     39a:	19 2f       	mov	r17, r25
     39c:	c0 e0       	ldi	r28, 0x00	; 0
     39e:	d0 e0       	ldi	r29, 0x00	; 0
     3a0:	05 c0       	rjmp	.+10     	; 0x3ac <display_text+0x24>
     3a2:	f8 01       	movw	r30, r16
     3a4:	81 91       	ld	r24, Z+
     3a6:	8f 01       	movw	r16, r30
     3a8:	28 df       	rcall	.-432    	; 0x1fa <display_char>
     3aa:	21 96       	adiw	r28, 0x01	; 1
     3ac:	ee 2d       	mov	r30, r14
     3ae:	ff 2d       	mov	r31, r15
     3b0:	df 01       	movw	r26, r30
     3b2:	0d 90       	ld	r0, X+
     3b4:	00 20       	and	r0, r0
     3b6:	e9 f7       	brne	.-6      	; 0x3b2 <display_text+0x2a>
     3b8:	11 97       	sbiw	r26, 0x01	; 1
     3ba:	ae 1b       	sub	r26, r30
     3bc:	bf 0b       	sbc	r27, r31
     3be:	ca 17       	cp	r28, r26
     3c0:	db 07       	cpc	r29, r27
     3c2:	78 f3       	brcs	.-34     	; 0x3a2 <display_text+0x1a>
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	08 95       	ret

000003d2 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     3d2:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     3d4:	90 81       	ld	r25, Z
     3d6:	91 50       	subi	r25, 0x01	; 1
     3d8:	84 81       	ldd	r24, Z+4	; 0x04
     3da:	22 81       	ldd	r18, Z+2	; 0x02
     3dc:	82 1b       	sub	r24, r18
};
     3de:	89 23       	and	r24, r25
     3e0:	08 95       	ret

000003e2 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
     3ea:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     3ec:	f2 df       	rcall	.-28     	; 0x3d2 <FifoDataLength>
     3ee:	28 81       	ld	r18, Y
     3f0:	39 81       	ldd	r19, Y+1	; 0x01
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	31 09       	sbc	r19, r1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	82 17       	cp	r24, r18
     3fa:	93 07       	cpc	r25, r19
     3fc:	69 f0       	breq	.+26     	; 0x418 <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     3fe:	8c 81       	ldd	r24, Y+4	; 0x04
     400:	9d 81       	ldd	r25, Y+5	; 0x05
     402:	fe 01       	movw	r30, r28
     404:	e8 0f       	add	r30, r24
     406:	f9 1f       	adc	r31, r25
     408:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	28 23       	and	r18, r24
     40e:	39 23       	and	r19, r25
     410:	3d 83       	std	Y+5, r19	; 0x05
     412:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	01 c0       	rjmp	.+2      	; 0x41a <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	08 95       	ret

00000422 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     42e:	d1 df       	rcall	.-94     	; 0x3d2 <FifoDataLength>
     430:	88 23       	and	r24, r24
     432:	a1 f0       	breq	.+40     	; 0x45c <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     434:	ea 81       	ldd	r30, Y+2	; 0x02
     436:	fb 81       	ldd	r31, Y+3	; 0x03
     438:	ec 0f       	add	r30, r28
     43a:	fd 1f       	adc	r31, r29
     43c:	86 81       	ldd	r24, Z+6	; 0x06
     43e:	f8 01       	movw	r30, r16
     440:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     442:	28 81       	ld	r18, Y
     444:	39 81       	ldd	r19, Y+1	; 0x01
     446:	21 50       	subi	r18, 0x01	; 1
     448:	31 09       	sbc	r19, r1
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	9b 81       	ldd	r25, Y+3	; 0x03
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	82 23       	and	r24, r18
     452:	93 23       	and	r25, r19
     454:	9b 83       	std	Y+3, r25	; 0x03
     456:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	01 c0       	rjmp	.+2      	; 0x45e <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <main>:

uint8_t displayFlag = 0;

int main(void)
{	
	display_init();
     468:	81 de       	rcall	.-766    	; 0x16c <display_init>
	sensors_init();
     46a:	9b d0       	rcall	.+310    	; 0x5a2 <sensors_init>
	
	// init TWI
	TWI_init(S_ADDRESS);
     46c:	80 e4       	ldi	r24, 0x40	; 64
     46e:	ce d7       	rcall	.+3996   	; 0x140c <TWI_init>
	init_counters();
     470:	50 de       	rcall	.-864    	; 0x112 <init_counters>
	
	set_counter_1(100);
     472:	84 e6       	ldi	r24, 0x64	; 100
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	29 de       	rcall	.-942    	; 0xca <set_counter_1>
	set_counter_2(3000);
     478:	88 eb       	ldi	r24, 0xB8	; 184
     47a:	9b e0       	ldi	r25, 0x0B	; 11
     47c:	38 de       	rcall	.-912    	; 0xee <set_counter_2>
	
	// Activate interrupts
	sei();
     47e:	78 94       	sei

	display_text("Hello");
     480:	88 e0       	ldi	r24, 0x08	; 8
     482:	91 e1       	ldi	r25, 0x11	; 17
     484:	81 df       	rcall	.-254    	; 0x388 <display_text>
				set_counter_2(2000);
			} else {
				set_counter_2(3000);
			}
			displayFlag = 0;
			TCNT3 = 0;
     486:	c4 e9       	ldi	r28, 0x94	; 148
     488:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48a:	8f e9       	ldi	r24, 0x9F	; 159
     48c:	9f e0       	ldi	r25, 0x0F	; 15
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <main+0x26>
     492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x2c>
     494:	00 00       	nop
	display_text("Hello");
	
	while(1)
	{	
		_delay_ms(1);
		if(displayFlag)
     496:	80 91 56 11 	lds	r24, 0x1156
     49a:	88 23       	and	r24, r24
     49c:	b1 f3       	breq	.-20     	; 0x48a <main+0x22>
		{
			if(decode_message_TwiFIFO())
     49e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <decode_message_TwiFIFO>
     4a2:	88 23       	and	r24, r24
     4a4:	29 f0       	breq	.+10     	; 0x4b0 <main+0x48>
			{
				sensors_display_data();
     4a6:	5a d3       	rcall	.+1716   	; 0xb5c <sensors_display_data>
				set_counter_2(2000);
     4a8:	80 ed       	ldi	r24, 0xD0	; 208
     4aa:	97 e0       	ldi	r25, 0x07	; 7
     4ac:	20 de       	rcall	.-960    	; 0xee <set_counter_2>
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <main+0x4e>
			} else {
				set_counter_2(3000);
     4b0:	88 eb       	ldi	r24, 0xB8	; 184
     4b2:	9b e0       	ldi	r25, 0x0B	; 11
     4b4:	1c de       	rcall	.-968    	; 0xee <set_counter_2>
			}
			displayFlag = 0;
     4b6:	10 92 56 11 	sts	0x1156, r1
			TCNT3 = 0;
     4ba:	19 82       	std	Y+1, r1	; 0x01
     4bc:	18 82       	st	Y, r1
     4be:	e5 cf       	rjmp	.-54     	; 0x48a <main+0x22>

000004c0 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	0b b6       	in	r0, 0x3b	; 59
     4cc:	0f 92       	push	r0
     4ce:	2f 93       	push	r18
     4d0:	3f 93       	push	r19
     4d2:	4f 93       	push	r20
     4d4:	5f 93       	push	r21
     4d6:	6f 93       	push	r22
     4d8:	7f 93       	push	r23
     4da:	8f 93       	push	r24
     4dc:	9f 93       	push	r25
     4de:	af 93       	push	r26
     4e0:	bf 93       	push	r27
     4e2:	ef 93       	push	r30
     4e4:	ff 93       	push	r31
	sensors_start_sample();
     4e6:	36 d3       	rcall	.+1644   	; 0xb54 <sensors_start_sample>
	TCNT1 = 0;
     4e8:	10 92 85 00 	sts	0x0085, r1
     4ec:	10 92 84 00 	sts	0x0084, r1
}
     4f0:	ff 91       	pop	r31
     4f2:	ef 91       	pop	r30
     4f4:	bf 91       	pop	r27
     4f6:	af 91       	pop	r26
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	7f 91       	pop	r23
     4fe:	6f 91       	pop	r22
     500:	5f 91       	pop	r21
     502:	4f 91       	pop	r20
     504:	3f 91       	pop	r19
     506:	2f 91       	pop	r18
     508:	0f 90       	pop	r0
     50a:	0b be       	out	0x3b, r0	; 59
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	8f 93       	push	r24
	displayFlag = 1;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 93 56 11 	sts	0x1156, r24
	TCNT3 = 0;
     528:	10 92 95 00 	sts	0x0095, r1
     52c:	10 92 94 00 	sts	0x0094, r1
}
     530:	8f 91       	pop	r24
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <adc_start>:
	return sensorDataFlag;
}

void sensors_reset_flag()
{
	sensorDataFlag = false;
     53c:	ea e7       	ldi	r30, 0x7A	; 122
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	80 64       	ori	r24, 0x40	; 64
     544:	80 83       	st	Z, r24
     546:	08 95       	ret

00000548 <select_sensor>:
     548:	80 93 37 12 	sts	0x1237, r24
     54c:	22 b1       	in	r18, 0x02	; 2
     54e:	21 7e       	andi	r18, 0xE1	; 225
     550:	22 b9       	out	0x02, r18	; 2
     552:	83 30       	cpi	r24, 0x03	; 3
     554:	91 05       	cpc	r25, r1
     556:	b9 f0       	breq	.+46     	; 0x586 <select_sensor+0x3e>
     558:	3c f4       	brge	.+14     	; 0x568 <select_sensor+0x20>
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	91 05       	cpc	r25, r1
     55e:	69 f0       	breq	.+26     	; 0x57a <select_sensor+0x32>
     560:	74 f4       	brge	.+28     	; 0x57e <select_sensor+0x36>
     562:	89 2b       	or	r24, r25
     564:	41 f0       	breq	.+16     	; 0x576 <select_sensor+0x2e>
     566:	08 95       	ret
     568:	85 30       	cpi	r24, 0x05	; 5
     56a:	91 05       	cpc	r25, r1
     56c:	91 f0       	breq	.+36     	; 0x592 <select_sensor+0x4a>
     56e:	6c f0       	brlt	.+26     	; 0x58a <select_sensor+0x42>
     570:	06 97       	sbiw	r24, 0x06	; 6
     572:	b1 f4       	brne	.+44     	; 0x5a0 <select_sensor+0x58>
     574:	12 c0       	rjmp	.+36     	; 0x59a <select_sensor+0x52>
     576:	11 9a       	sbi	0x02, 1	; 2
     578:	08 95       	ret
     57a:	12 9a       	sbi	0x02, 2	; 2
     57c:	08 95       	ret
     57e:	82 b1       	in	r24, 0x02	; 2
     580:	86 60       	ori	r24, 0x06	; 6
     582:	82 b9       	out	0x02, r24	; 2
     584:	08 95       	ret
     586:	13 9a       	sbi	0x02, 3	; 2
     588:	08 95       	ret
     58a:	82 b1       	in	r24, 0x02	; 2
     58c:	8a 60       	ori	r24, 0x0A	; 10
     58e:	82 b9       	out	0x02, r24	; 2
     590:	08 95       	ret
     592:	82 b1       	in	r24, 0x02	; 2
     594:	8c 60       	ori	r24, 0x0C	; 12
     596:	82 b9       	out	0x02, r24	; 2
     598:	08 95       	ret
     59a:	82 b1       	in	r24, 0x02	; 2
     59c:	8e 60       	ori	r24, 0x0E	; 14
     59e:	82 b9       	out	0x02, r24	; 2
     5a0:	08 95       	ret

000005a2 <sensors_init>:
     5a2:	4f 92       	push	r4
     5a4:	5f 92       	push	r5
     5a6:	6f 92       	push	r6
     5a8:	7f 92       	push	r7
     5aa:	8f 92       	push	r8
     5ac:	9f 92       	push	r9
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	8f e8       	ldi	r24, 0x8F	; 143
     5c0:	80 93 7a 00 	sts	0x007A, r24
     5c4:	80 e6       	ldi	r24, 0x60	; 96
     5c6:	80 93 7c 00 	sts	0x007C, r24
     5ca:	8a e9       	ldi	r24, 0x9A	; 154
     5cc:	99 e9       	ldi	r25, 0x99	; 153
     5ce:	a9 e4       	ldi	r26, 0x49	; 73
     5d0:	b0 e4       	ldi	r27, 0x40	; 64
     5d2:	80 93 57 11 	sts	0x1157, r24
     5d6:	90 93 58 11 	sts	0x1158, r25
     5da:	a0 93 59 11 	sts	0x1159, r26
     5de:	b0 93 5a 11 	sts	0x115A, r27
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	a0 ec       	ldi	r26, 0xC0	; 192
     5e8:	b0 e4       	ldi	r27, 0x40	; 64
     5ea:	80 93 5b 11 	sts	0x115B, r24
     5ee:	90 93 5c 11 	sts	0x115C, r25
     5f2:	a0 93 5d 11 	sts	0x115D, r26
     5f6:	b0 93 5e 11 	sts	0x115E, r27
     5fa:	82 e5       	ldi	r24, 0x52	; 82
     5fc:	98 eb       	ldi	r25, 0xB8	; 184
     5fe:	ae e3       	ldi	r26, 0x3E	; 62
     600:	b0 e4       	ldi	r27, 0x40	; 64
     602:	80 93 5f 11 	sts	0x115F, r24
     606:	90 93 60 11 	sts	0x1160, r25
     60a:	a0 93 61 11 	sts	0x1161, r26
     60e:	b0 93 62 11 	sts	0x1162, r27
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	a0 ee       	ldi	r26, 0xE0	; 224
     618:	b0 e4       	ldi	r27, 0x40	; 64
     61a:	80 93 63 11 	sts	0x1163, r24
     61e:	90 93 64 11 	sts	0x1164, r25
     622:	a0 93 65 11 	sts	0x1165, r26
     626:	b0 93 66 11 	sts	0x1166, r27
     62a:	00 e0       	ldi	r16, 0x00	; 0
     62c:	10 e0       	ldi	r17, 0x00	; 0
     62e:	20 e3       	ldi	r18, 0x30	; 48
     630:	30 e4       	ldi	r19, 0x40	; 64
     632:	00 93 67 11 	sts	0x1167, r16
     636:	10 93 68 11 	sts	0x1168, r17
     63a:	20 93 69 11 	sts	0x1169, r18
     63e:	30 93 6a 11 	sts	0x116A, r19
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	a0 e0       	ldi	r26, 0x00	; 0
     648:	b1 e4       	ldi	r27, 0x41	; 65
     64a:	80 93 6b 11 	sts	0x116B, r24
     64e:	90 93 6c 11 	sts	0x116C, r25
     652:	a0 93 6d 11 	sts	0x116D, r26
     656:	b0 93 6e 11 	sts	0x116E, r27
     65a:	8a e0       	ldi	r24, 0x0A	; 10
     65c:	97 ed       	ldi	r25, 0xD7	; 215
     65e:	a3 e1       	ldi	r26, 0x13	; 19
     660:	b0 e4       	ldi	r27, 0x40	; 64
     662:	80 93 6f 11 	sts	0x116F, r24
     666:	90 93 70 11 	sts	0x1170, r25
     66a:	a0 93 71 11 	sts	0x1171, r26
     66e:	b0 93 72 11 	sts	0x1172, r27
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b1 e4       	ldi	r27, 0x41	; 65
     67a:	80 93 73 11 	sts	0x1173, r24
     67e:	90 93 74 11 	sts	0x1174, r25
     682:	a0 93 75 11 	sts	0x1175, r26
     686:	b0 93 76 11 	sts	0x1176, r27
     68a:	85 e8       	ldi	r24, 0x85	; 133
     68c:	9b ee       	ldi	r25, 0xEB	; 235
     68e:	a1 ed       	ldi	r26, 0xD1	; 209
     690:	bf e3       	ldi	r27, 0x3F	; 63
     692:	80 93 77 11 	sts	0x1177, r24
     696:	90 93 78 11 	sts	0x1178, r25
     69a:	a0 93 79 11 	sts	0x1179, r26
     69e:	b0 93 7a 11 	sts	0x117A, r27
     6a2:	0f 2e       	mov	r0, r31
     6a4:	41 2c       	mov	r4, r1
     6a6:	51 2c       	mov	r5, r1
     6a8:	f0 e7       	ldi	r31, 0x70	; 112
     6aa:	6f 2e       	mov	r6, r31
     6ac:	f1 e4       	ldi	r31, 0x41	; 65
     6ae:	7f 2e       	mov	r7, r31
     6b0:	f0 2d       	mov	r31, r0
     6b2:	40 92 7b 11 	sts	0x117B, r4
     6b6:	50 92 7c 11 	sts	0x117C, r5
     6ba:	60 92 7d 11 	sts	0x117D, r6
     6be:	70 92 7e 11 	sts	0x117E, r7
     6c2:	84 e1       	ldi	r24, 0x14	; 20
     6c4:	9e ea       	ldi	r25, 0xAE	; 174
     6c6:	a7 ea       	ldi	r26, 0xA7	; 167
     6c8:	bf e3       	ldi	r27, 0x3F	; 63
     6ca:	80 93 7f 11 	sts	0x117F, r24
     6ce:	90 93 80 11 	sts	0x1180, r25
     6d2:	a0 93 81 11 	sts	0x1181, r26
     6d6:	b0 93 82 11 	sts	0x1182, r27
     6da:	0f 2e       	mov	r0, r31
     6dc:	81 2c       	mov	r8, r1
     6de:	91 2c       	mov	r9, r1
     6e0:	f0 ea       	ldi	r31, 0xA0	; 160
     6e2:	af 2e       	mov	r10, r31
     6e4:	f1 e4       	ldi	r31, 0x41	; 65
     6e6:	bf 2e       	mov	r11, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	80 92 83 11 	sts	0x1183, r8
     6ee:	90 92 84 11 	sts	0x1184, r9
     6f2:	a0 92 85 11 	sts	0x1185, r10
     6f6:	b0 92 86 11 	sts	0x1186, r11
     6fa:	81 e7       	ldi	r24, 0x71	; 113
     6fc:	9d e3       	ldi	r25, 0x3D	; 61
     6fe:	aa e8       	ldi	r26, 0x8A	; 138
     700:	bf e3       	ldi	r27, 0x3F	; 63
     702:	80 93 87 11 	sts	0x1187, r24
     706:	90 93 88 11 	sts	0x1188, r25
     70a:	a0 93 89 11 	sts	0x1189, r26
     70e:	b0 93 8a 11 	sts	0x118A, r27
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	a8 ec       	ldi	r26, 0xC8	; 200
     718:	b1 e4       	ldi	r27, 0x41	; 65
     71a:	80 93 8b 11 	sts	0x118B, r24
     71e:	90 93 8c 11 	sts	0x118C, r25
     722:	a0 93 8d 11 	sts	0x118D, r26
     726:	b0 93 8e 11 	sts	0x118E, r27
     72a:	8f e1       	ldi	r24, 0x1F	; 31
     72c:	95 e8       	ldi	r25, 0x85	; 133
     72e:	ab e6       	ldi	r26, 0x6B	; 107
     730:	bf e3       	ldi	r27, 0x3F	; 63
     732:	80 93 8f 11 	sts	0x118F, r24
     736:	90 93 90 11 	sts	0x1190, r25
     73a:	a0 93 91 11 	sts	0x1191, r26
     73e:	b0 93 92 11 	sts	0x1192, r27
     742:	0f 2e       	mov	r0, r31
     744:	c1 2c       	mov	r12, r1
     746:	d1 2c       	mov	r13, r1
     748:	f0 ef       	ldi	r31, 0xF0	; 240
     74a:	ef 2e       	mov	r14, r31
     74c:	f1 e4       	ldi	r31, 0x41	; 65
     74e:	ff 2e       	mov	r15, r31
     750:	f0 2d       	mov	r31, r0
     752:	c0 92 93 11 	sts	0x1193, r12
     756:	d0 92 94 11 	sts	0x1194, r13
     75a:	e0 92 95 11 	sts	0x1195, r14
     75e:	f0 92 96 11 	sts	0x1196, r15
     762:	84 ea       	ldi	r24, 0xA4	; 164
     764:	90 e7       	ldi	r25, 0x70	; 112
     766:	ad e3       	ldi	r26, 0x3D	; 61
     768:	bf e3       	ldi	r27, 0x3F	; 63
     76a:	80 93 97 11 	sts	0x1197, r24
     76e:	90 93 98 11 	sts	0x1198, r25
     772:	a0 93 99 11 	sts	0x1199, r26
     776:	b0 93 9a 11 	sts	0x119A, r27
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 e2       	ldi	r26, 0x20	; 32
     780:	b2 e4       	ldi	r27, 0x42	; 66
     782:	80 93 9b 11 	sts	0x119B, r24
     786:	90 93 9c 11 	sts	0x119C, r25
     78a:	a0 93 9d 11 	sts	0x119D, r26
     78e:	b0 93 9e 11 	sts	0x119E, r27
     792:	86 ef       	ldi	r24, 0xF6	; 246
     794:	98 e2       	ldi	r25, 0x28	; 40
     796:	ac e1       	ldi	r26, 0x1C	; 28
     798:	bf e3       	ldi	r27, 0x3F	; 63
     79a:	80 93 9f 11 	sts	0x119F, r24
     79e:	90 93 a0 11 	sts	0x11A0, r25
     7a2:	a0 93 a1 11 	sts	0x11A1, r26
     7a6:	b0 93 a2 11 	sts	0x11A2, r27
     7aa:	00 e0       	ldi	r16, 0x00	; 0
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	28 e4       	ldi	r18, 0x48	; 72
     7b0:	32 e4       	ldi	r19, 0x42	; 66
     7b2:	00 93 a3 11 	sts	0x11A3, r16
     7b6:	10 93 a4 11 	sts	0x11A4, r17
     7ba:	20 93 a5 11 	sts	0x11A5, r18
     7be:	30 93 a6 11 	sts	0x11A6, r19
     7c2:	8c e5       	ldi	r24, 0x5C	; 92
     7c4:	9f e8       	ldi	r25, 0x8F	; 143
     7c6:	a2 e0       	ldi	r26, 0x02	; 2
     7c8:	bf e3       	ldi	r27, 0x3F	; 63
     7ca:	80 93 a7 11 	sts	0x11A7, r24
     7ce:	90 93 a8 11 	sts	0x11A8, r25
     7d2:	a0 93 a9 11 	sts	0x11A9, r26
     7d6:	b0 93 aa 11 	sts	0x11AA, r27
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	a0 e7       	ldi	r26, 0x70	; 112
     7e0:	b2 e4       	ldi	r27, 0x42	; 66
     7e2:	80 93 ab 11 	sts	0x11AB, r24
     7e6:	90 93 ac 11 	sts	0x11AC, r25
     7ea:	a0 93 ad 11 	sts	0x11AD, r26
     7ee:	b0 93 ae 11 	sts	0x11AE, r27
     7f2:	06 e6       	ldi	r16, 0x66	; 102
     7f4:	16 e6       	ldi	r17, 0x66	; 102
     7f6:	26 ee       	ldi	r18, 0xE6	; 230
     7f8:	3e e3       	ldi	r19, 0x3E	; 62
     7fa:	00 93 af 11 	sts	0x11AF, r16
     7fe:	10 93 b0 11 	sts	0x11B0, r17
     802:	20 93 b1 11 	sts	0x11B1, r18
     806:	30 93 b2 11 	sts	0x11B2, r19
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	6c e8       	ldi	r22, 0x8C	; 140
     810:	72 e4       	ldi	r23, 0x42	; 66
     812:	40 93 b3 11 	sts	0x11B3, r20
     816:	50 93 b4 11 	sts	0x11B4, r21
     81a:	60 93 b5 11 	sts	0x11B5, r22
     81e:	70 93 b6 11 	sts	0x11B6, r23
     822:	85 e8       	ldi	r24, 0x85	; 133
     824:	9b ee       	ldi	r25, 0xEB	; 235
     826:	a1 ed       	ldi	r26, 0xD1	; 209
     828:	be e3       	ldi	r27, 0x3E	; 62
     82a:	80 93 b7 11 	sts	0x11B7, r24
     82e:	90 93 b8 11 	sts	0x11B8, r25
     832:	a0 93 b9 11 	sts	0x11B9, r26
     836:	b0 93 ba 11 	sts	0x11BA, r27
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	a0 ea       	ldi	r26, 0xA0	; 160
     840:	b2 e4       	ldi	r27, 0x42	; 66
     842:	80 93 bb 11 	sts	0x11BB, r24
     846:	90 93 bc 11 	sts	0x11BC, r25
     84a:	a0 93 bd 11 	sts	0x11BD, r26
     84e:	b0 93 be 11 	sts	0x11BE, r27
     852:	00 e0       	ldi	r16, 0x00	; 0
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	20 e3       	ldi	r18, 0x30	; 48
     858:	30 e4       	ldi	r19, 0x40	; 64
     85a:	00 93 bf 11 	sts	0x11BF, r16
     85e:	10 93 c0 11 	sts	0x11C0, r17
     862:	20 93 c1 11 	sts	0x11C1, r18
     866:	30 93 c2 11 	sts	0x11C2, r19
     86a:	40 92 c3 11 	sts	0x11C3, r4
     86e:	50 92 c4 11 	sts	0x11C4, r5
     872:	60 92 c5 11 	sts	0x11C5, r6
     876:	70 92 c6 11 	sts	0x11C6, r7
     87a:	0f 2e       	mov	r0, r31
     87c:	f3 e3       	ldi	r31, 0x33	; 51
     87e:	4f 2e       	mov	r4, r31
     880:	54 2c       	mov	r5, r4
     882:	f3 e2       	ldi	r31, 0x23	; 35
     884:	6f 2e       	mov	r6, r31
     886:	f0 e4       	ldi	r31, 0x40	; 64
     888:	7f 2e       	mov	r7, r31
     88a:	f0 2d       	mov	r31, r0
     88c:	40 92 c7 11 	sts	0x11C7, r4
     890:	50 92 c8 11 	sts	0x11C8, r5
     894:	60 92 c9 11 	sts	0x11C9, r6
     898:	70 92 ca 11 	sts	0x11CA, r7
     89c:	80 92 cb 11 	sts	0x11CB, r8
     8a0:	90 92 cc 11 	sts	0x11CC, r9
     8a4:	a0 92 cd 11 	sts	0x11CD, r10
     8a8:	b0 92 ce 11 	sts	0x11CE, r11
     8ac:	81 2c       	mov	r8, r1
     8ae:	91 2c       	mov	r9, r1
     8b0:	54 01       	movw	r10, r8
     8b2:	68 94       	set
     8b4:	b6 f8       	bld	r11, 6
     8b6:	80 92 cf 11 	sts	0x11CF, r8
     8ba:	90 92 d0 11 	sts	0x11D0, r9
     8be:	a0 92 d1 11 	sts	0x11D1, r10
     8c2:	b0 92 d2 11 	sts	0x11D2, r11
     8c6:	c0 92 d3 11 	sts	0x11D3, r12
     8ca:	d0 92 d4 11 	sts	0x11D4, r13
     8ce:	e0 92 d5 11 	sts	0x11D5, r14
     8d2:	f0 92 d6 11 	sts	0x11D6, r15
     8d6:	0f 2e       	mov	r0, r31
     8d8:	f6 e6       	ldi	r31, 0x66	; 102
     8da:	cf 2e       	mov	r12, r31
     8dc:	dc 2c       	mov	r13, r12
     8de:	f6 ec       	ldi	r31, 0xC6	; 198
     8e0:	ef 2e       	mov	r14, r31
     8e2:	ff e3       	ldi	r31, 0x3F	; 63
     8e4:	ff 2e       	mov	r15, r31
     8e6:	f0 2d       	mov	r31, r0
     8e8:	c0 92 d7 11 	sts	0x11D7, r12
     8ec:	d0 92 d8 11 	sts	0x11D8, r13
     8f0:	e0 92 d9 11 	sts	0x11D9, r14
     8f4:	f0 92 da 11 	sts	0x11DA, r15
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	20 e2       	ldi	r18, 0x20	; 32
     8fe:	32 e4       	ldi	r19, 0x42	; 66
     900:	00 93 db 11 	sts	0x11DB, r16
     904:	10 93 dc 11 	sts	0x11DC, r17
     908:	20 93 dd 11 	sts	0x11DD, r18
     90c:	30 93 de 11 	sts	0x11DE, r19
     910:	00 e0       	ldi	r16, 0x00	; 0
     912:	10 e0       	ldi	r17, 0x00	; 0
     914:	20 ea       	ldi	r18, 0xA0	; 160
     916:	3f e3       	ldi	r19, 0x3F	; 63
     918:	00 93 df 11 	sts	0x11DF, r16
     91c:	10 93 e0 11 	sts	0x11E0, r17
     920:	20 93 e1 11 	sts	0x11E1, r18
     924:	30 93 e2 11 	sts	0x11E2, r19
     928:	00 e0       	ldi	r16, 0x00	; 0
     92a:	10 e0       	ldi	r17, 0x00	; 0
     92c:	28 e4       	ldi	r18, 0x48	; 72
     92e:	32 e4       	ldi	r19, 0x42	; 66
     930:	00 93 e3 11 	sts	0x11E3, r16
     934:	10 93 e4 11 	sts	0x11E4, r17
     938:	20 93 e5 11 	sts	0x11E5, r18
     93c:	30 93 e6 11 	sts	0x11E6, r19
     940:	03 ec       	ldi	r16, 0xC3	; 195
     942:	15 ef       	ldi	r17, 0xF5	; 245
     944:	28 e8       	ldi	r18, 0x88	; 136
     946:	3f e3       	ldi	r19, 0x3F	; 63
     948:	00 93 e7 11 	sts	0x11E7, r16
     94c:	10 93 e8 11 	sts	0x11E8, r17
     950:	20 93 e9 11 	sts	0x11E9, r18
     954:	30 93 ea 11 	sts	0x11EA, r19
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	10 e0       	ldi	r17, 0x00	; 0
     95c:	20 e7       	ldi	r18, 0x70	; 112
     95e:	32 e4       	ldi	r19, 0x42	; 66
     960:	00 93 eb 11 	sts	0x11EB, r16
     964:	10 93 ec 11 	sts	0x11EC, r17
     968:	20 93 ed 11 	sts	0x11ED, r18
     96c:	30 93 ee 11 	sts	0x11EE, r19
     970:	0a e9       	ldi	r16, 0x9A	; 154
     972:	19 e9       	ldi	r17, 0x99	; 153
     974:	29 e5       	ldi	r18, 0x59	; 89
     976:	3f e3       	ldi	r19, 0x3F	; 63
     978:	00 93 ef 11 	sts	0x11EF, r16
     97c:	10 93 f0 11 	sts	0x11F0, r17
     980:	20 93 f1 11 	sts	0x11F1, r18
     984:	30 93 f2 11 	sts	0x11F2, r19
     988:	40 93 f3 11 	sts	0x11F3, r20
     98c:	50 93 f4 11 	sts	0x11F4, r21
     990:	60 93 f5 11 	sts	0x11F5, r22
     994:	70 93 f6 11 	sts	0x11F6, r23
     998:	4d ec       	ldi	r20, 0xCD	; 205
     99a:	5c ec       	ldi	r21, 0xCC	; 204
     99c:	6c e4       	ldi	r22, 0x4C	; 76
     99e:	7f e3       	ldi	r23, 0x3F	; 63
     9a0:	40 93 f7 11 	sts	0x11F7, r20
     9a4:	50 93 f8 11 	sts	0x11F8, r21
     9a8:	60 93 f9 11 	sts	0x11F9, r22
     9ac:	70 93 fa 11 	sts	0x11FA, r23
     9b0:	80 93 fb 11 	sts	0x11FB, r24
     9b4:	90 93 fc 11 	sts	0x11FC, r25
     9b8:	a0 93 fd 11 	sts	0x11FD, r26
     9bc:	b0 93 fe 11 	sts	0x11FE, r27
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	a0 e4       	ldi	r26, 0x40	; 64
     9c6:	bf e3       	ldi	r27, 0x3F	; 63
     9c8:	80 93 ff 11 	sts	0x11FF, r24
     9cc:	90 93 00 12 	sts	0x1200, r25
     9d0:	a0 93 01 12 	sts	0x1201, r26
     9d4:	b0 93 02 12 	sts	0x1202, r27
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a4 eb       	ldi	r26, 0xB4	; 180
     9de:	b2 e4       	ldi	r27, 0x42	; 66
     9e0:	80 93 03 12 	sts	0x1203, r24
     9e4:	90 93 04 12 	sts	0x1204, r25
     9e8:	a0 93 05 12 	sts	0x1205, r26
     9ec:	b0 93 06 12 	sts	0x1206, r27
     9f0:	86 e6       	ldi	r24, 0x66	; 102
     9f2:	96 e6       	ldi	r25, 0x66	; 102
     9f4:	a6 e2       	ldi	r26, 0x26	; 38
     9f6:	bf e3       	ldi	r27, 0x3F	; 63
     9f8:	80 93 07 12 	sts	0x1207, r24
     9fc:	90 93 08 12 	sts	0x1208, r25
     a00:	a0 93 09 12 	sts	0x1209, r26
     a04:	b0 93 0a 12 	sts	0x120A, r27
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a8 ec       	ldi	r26, 0xC8	; 200
     a0e:	b2 e4       	ldi	r27, 0x42	; 66
     a10:	80 93 0b 12 	sts	0x120B, r24
     a14:	90 93 0c 12 	sts	0x120C, r25
     a18:	a0 93 0d 12 	sts	0x120D, r26
     a1c:	b0 93 0e 12 	sts	0x120E, r27
     a20:	8a e9       	ldi	r24, 0x9A	; 154
     a22:	99 e9       	ldi	r25, 0x99	; 153
     a24:	a9 e1       	ldi	r26, 0x19	; 25
     a26:	bf e3       	ldi	r27, 0x3F	; 63
     a28:	80 93 0f 12 	sts	0x120F, r24
     a2c:	90 93 10 12 	sts	0x1210, r25
     a30:	a0 93 11 12 	sts	0x1211, r26
     a34:	b0 93 12 12 	sts	0x1212, r27
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	ac ed       	ldi	r26, 0xDC	; 220
     a3e:	b2 e4       	ldi	r27, 0x42	; 66
     a40:	80 93 13 12 	sts	0x1213, r24
     a44:	90 93 14 12 	sts	0x1214, r25
     a48:	a0 93 15 12 	sts	0x1215, r26
     a4c:	b0 93 16 12 	sts	0x1216, r27
     a50:	8d ec       	ldi	r24, 0xCD	; 205
     a52:	9c ec       	ldi	r25, 0xCC	; 204
     a54:	ac e0       	ldi	r26, 0x0C	; 12
     a56:	bf e3       	ldi	r27, 0x3F	; 63
     a58:	80 93 17 12 	sts	0x1217, r24
     a5c:	90 93 18 12 	sts	0x1218, r25
     a60:	a0 93 19 12 	sts	0x1219, r26
     a64:	b0 93 1a 12 	sts	0x121A, r27
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 ef       	ldi	r26, 0xF0	; 240
     a6e:	b2 e4       	ldi	r27, 0x42	; 66
     a70:	80 93 1b 12 	sts	0x121B, r24
     a74:	90 93 1c 12 	sts	0x121C, r25
     a78:	a0 93 1d 12 	sts	0x121D, r26
     a7c:	b0 93 1e 12 	sts	0x121E, r27
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	bf e3       	ldi	r27, 0x3F	; 63
     a88:	80 93 1f 12 	sts	0x121F, r24
     a8c:	90 93 20 12 	sts	0x1220, r25
     a90:	a0 93 21 12 	sts	0x1221, r26
     a94:	b0 93 22 12 	sts	0x1222, r27
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a2 e0       	ldi	r26, 0x02	; 2
     a9e:	b3 e4       	ldi	r27, 0x43	; 67
     aa0:	80 93 23 12 	sts	0x1223, r24
     aa4:	90 93 24 12 	sts	0x1224, r25
     aa8:	a0 93 25 12 	sts	0x1225, r26
     aac:	b0 93 26 12 	sts	0x1226, r27
     ab0:	86 e6       	ldi	r24, 0x66	; 102
     ab2:	96 e6       	ldi	r25, 0x66	; 102
     ab4:	a6 ee       	ldi	r26, 0xE6	; 230
     ab6:	be e3       	ldi	r27, 0x3E	; 62
     ab8:	80 93 27 12 	sts	0x1227, r24
     abc:	90 93 28 12 	sts	0x1228, r25
     ac0:	a0 93 29 12 	sts	0x1229, r26
     ac4:	b0 93 2a 12 	sts	0x122A, r27
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	ac e0       	ldi	r26, 0x0C	; 12
     ace:	b3 e4       	ldi	r27, 0x43	; 67
     ad0:	80 93 2b 12 	sts	0x122B, r24
     ad4:	90 93 2c 12 	sts	0x122C, r25
     ad8:	a0 93 2d 12 	sts	0x122D, r26
     adc:	b0 93 2e 12 	sts	0x122E, r27
     ae0:	8d e3       	ldi	r24, 0x3D	; 61
     ae2:	9a e0       	ldi	r25, 0x0A	; 10
     ae4:	a7 ed       	ldi	r26, 0xD7	; 215
     ae6:	be e3       	ldi	r27, 0x3E	; 62
     ae8:	80 93 2f 12 	sts	0x122F, r24
     aec:	90 93 30 12 	sts	0x1230, r25
     af0:	a0 93 31 12 	sts	0x1231, r26
     af4:	b0 93 32 12 	sts	0x1232, r27
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a6 e1       	ldi	r26, 0x16	; 22
     afe:	b3 e4       	ldi	r27, 0x43	; 67
     b00:	80 93 33 12 	sts	0x1233, r24
     b04:	90 93 34 12 	sts	0x1234, r25
     b08:	a0 93 35 12 	sts	0x1235, r26
     b0c:	b0 93 36 12 	sts	0x1236, r27
     b10:	81 b1       	in	r24, 0x01	; 1
     b12:	8e 63       	ori	r24, 0x3E	; 62
     b14:	81 b9       	out	0x01, r24	; 1
     b16:	08 98       	cbi	0x01, 0	; 1
     b18:	15 98       	cbi	0x02, 5	; 2
     b1a:	82 b1       	in	r24, 0x02	; 2
     b1c:	81 7e       	andi	r24, 0xE1	; 225
     b1e:	82 b9       	out	0x02, r24	; 2
     b20:	50 9a       	sbi	0x0a, 0	; 10
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 68 00 	sts	0x0068, r24
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	80 93 6b 00 	sts	0x006B, r24
     b2e:	0f 9a       	sbi	0x01, 7	; 1
     b30:	0e 98       	cbi	0x01, 6	; 1
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	85 bd       	out	0x25, r24	; 37
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	bf 90       	pop	r11
     b44:	af 90       	pop	r10
     b46:	9f 90       	pop	r9
     b48:	8f 90       	pop	r8
     b4a:	7f 90       	pop	r7
     b4c:	6f 90       	pop	r6
     b4e:	5f 90       	pop	r5
     b50:	4f 90       	pop	r4
     b52:	08 95       	ret

00000b54 <sensors_start_sample>:
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	f7 dc       	rcall	.-1554   	; 0x548 <select_sensor>
     b5a:	f0 cc       	rjmp	.-1568   	; 0x53c <adc_start>

00000b5c <sensors_display_data>:
     b5c:	31 db       	rcall	.-2462   	; 0x1c0 <display_clear>
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	30 db       	rcall	.-2464   	; 0x1c8 <display_set_pos>
     b68:	8e e0       	ldi	r24, 0x0E	; 14
     b6a:	91 e1       	ldi	r25, 0x11	; 17
     b6c:	0d dc       	rcall	.-2022   	; 0x388 <display_text>
     b6e:	60 91 38 12 	lds	r22, 0x1238
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__floatunsisf>
     b7c:	c2 db       	rcall	.-2172   	; 0x302 <display_value>
     b7e:	68 e0       	ldi	r22, 0x08	; 8
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	20 db       	rcall	.-2496   	; 0x1c8 <display_set_pos>
     b88:	82 e1       	ldi	r24, 0x12	; 18
     b8a:	91 e1       	ldi	r25, 0x11	; 17
     b8c:	fd db       	rcall	.-2054   	; 0x388 <display_text>
     b8e:	60 91 39 12 	lds	r22, 0x1239
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	f3 d7       	rcall	.+4070   	; 0x1b80 <__floatunsisf>
     b9a:	b3 db       	rcall	.-2202   	; 0x302 <display_value>
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	11 db       	rcall	.-2526   	; 0x1c8 <display_set_pos>
     ba6:	86 e1       	ldi	r24, 0x16	; 22
     ba8:	91 e1       	ldi	r25, 0x11	; 17
     baa:	ee db       	rcall	.-2084   	; 0x388 <display_text>
     bac:	60 91 3a 12 	lds	r22, 0x123A
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	e4 d7       	rcall	.+4040   	; 0x1b80 <__floatunsisf>
     bb8:	a4 db       	rcall	.-2232   	; 0x302 <display_value>
     bba:	68 e0       	ldi	r22, 0x08	; 8
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	02 db       	rcall	.-2556   	; 0x1c8 <display_set_pos>
     bc4:	8a e1       	ldi	r24, 0x1A	; 26
     bc6:	91 e1       	ldi	r25, 0x11	; 17
     bc8:	df db       	rcall	.-2114   	; 0x388 <display_text>
     bca:	60 91 3b 12 	lds	r22, 0x123B
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	d5 d7       	rcall	.+4010   	; 0x1b80 <__floatunsisf>
     bd6:	95 db       	rcall	.-2262   	; 0x302 <display_value>
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	f3 da       	rcall	.-2586   	; 0x1c8 <display_set_pos>
     be2:	8e e1       	ldi	r24, 0x1E	; 30
     be4:	91 e1       	ldi	r25, 0x11	; 17
     be6:	d0 db       	rcall	.-2144   	; 0x388 <display_text>
     be8:	60 91 3c 12 	lds	r22, 0x123C
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	c6 d7       	rcall	.+3980   	; 0x1b80 <__floatunsisf>
     bf4:	86 db       	rcall	.-2292   	; 0x302 <display_value>
     bf6:	68 e0       	ldi	r22, 0x08	; 8
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	e4 da       	rcall	.-2616   	; 0x1c8 <display_set_pos>
     c00:	82 e2       	ldi	r24, 0x22	; 34
     c02:	91 e1       	ldi	r25, 0x11	; 17
     c04:	c1 db       	rcall	.-2174   	; 0x388 <display_text>
     c06:	60 91 3d 12 	lds	r22, 0x123D
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	b7 d7       	rcall	.+3950   	; 0x1b80 <__floatunsisf>
     c12:	77 db       	rcall	.-2322   	; 0x302 <display_value>
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	d5 da       	rcall	.-2646   	; 0x1c8 <display_set_pos>
     c1e:	86 e2       	ldi	r24, 0x26	; 38
     c20:	91 e1       	ldi	r25, 0x11	; 17
     c22:	b2 db       	rcall	.-2204   	; 0x388 <display_text>
     c24:	60 91 3e 12 	lds	r22, 0x123E
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a8 d7       	rcall	.+3920   	; 0x1b80 <__floatunsisf>
     c30:	68 db       	rcall	.-2352   	; 0x302 <display_value>
     c32:	68 e0       	ldi	r22, 0x08	; 8
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	c6 da       	rcall	.-2676   	; 0x1c8 <display_set_pos>
     c3c:	8a e2       	ldi	r24, 0x2A	; 42
     c3e:	91 e1       	ldi	r25, 0x11	; 17
     c40:	a3 db       	rcall	.-2234   	; 0x388 <display_text>
     c42:	60 91 3f 12 	lds	r22, 0x123F
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	99 d7       	rcall	.+3890   	; 0x1b80 <__floatunsisf>
     c4e:	59 cb       	rjmp	.-2382   	; 0x302 <display_value>

00000c50 <sensors_get_data>:
}

uint8_t* sensors_get_data()
{
	return gSensorBuffer;
}
     c50:	88 e3       	ldi	r24, 0x38	; 56
     c52:	92 e1       	ldi	r25, 0x12	; 18
     c54:	08 95       	ret

00000c56 <__vector_24>:


ISR(ADC_vect)
{
     c56:	1f 92       	push	r1
     c58:	0f 92       	push	r0
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	0f 92       	push	r0
     c5e:	11 24       	eor	r1, r1
     c60:	0b b6       	in	r0, 0x3b	; 59
     c62:	0f 92       	push	r0
     c64:	2f 92       	push	r2
     c66:	3f 92       	push	r3
     c68:	4f 92       	push	r4
     c6a:	5f 92       	push	r5
     c6c:	6f 92       	push	r6
     c6e:	7f 92       	push	r7
     c70:	8f 92       	push	r8
     c72:	9f 92       	push	r9
     c74:	af 92       	push	r10
     c76:	bf 92       	push	r11
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	2d 97       	sbiw	r28, 0x0d	; 13
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	cd bf       	out	0x3d, r28	; 61
	cli();
     caa:	f8 94       	cli
	uint8_t adcValue = ADCH;
     cac:	60 91 79 00 	lds	r22, 0x0079
	float vin = adcValue * 5.0 / 256.0;
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	66 d7       	rcall	.+3788   	; 0x1b84 <__floatsisf>
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 ea       	ldi	r20, 0xA0	; 160
     cbe:	50 e4       	ldi	r21, 0x40	; 64
     cc0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__mulsf3>
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5b e3       	ldi	r21, 0x3B	; 59
     ccc:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__mulsf3>
     cd0:	6d 83       	std	Y+5, r22	; 0x05
     cd2:	7e 83       	std	Y+6, r23	; 0x06
     cd4:	8f 83       	std	Y+7, r24	; 0x07
     cd6:	98 87       	std	Y+8, r25	; 0x08
     cd8:	56 2e       	mov	r5, r22
     cda:	47 2e       	mov	r4, r23
     cdc:	38 2e       	mov	r3, r24
     cde:	29 2e       	mov	r2, r25
	if(gSelectedSensor == 4)
     ce0:	20 91 37 12 	lds	r18, 0x1237
     ce4:	29 87       	std	Y+9, r18	; 0x09
     ce6:	24 30       	cpi	r18, 0x04	; 4
     ce8:	09 f0       	breq	.+2      	; 0xcec <__vector_24+0x96>
     cea:	3a c1       	rjmp	.+628    	; 0xf60 <__vector_24+0x30a>
	return IRShort[12][1]*10;
}

int voltage_to_mm_long(float voltage)
{
	if(voltage >= IRLong[0][0])
     cec:	c0 90 bf 11 	lds	r12, 0x11BF
     cf0:	d0 90 c0 11 	lds	r13, 0x11C0
     cf4:	e0 90 c1 11 	lds	r14, 0x11C1
     cf8:	f0 90 c2 11 	lds	r15, 0x11C2
     cfc:	a7 01       	movw	r20, r14
     cfe:	96 01       	movw	r18, r12
     d00:	f1 d7       	rcall	.+4066   	; 0x1ce4 <__gesf2>
     d02:	88 23       	and	r24, r24
     d04:	84 f0       	brlt	.+32     	; 0xd26 <__vector_24+0xd0>
	{
		return IRLong[0][1]*10;
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e2       	ldi	r20, 0x20	; 32
     d0c:	51 e4       	ldi	r21, 0x41	; 65
     d0e:	60 91 c3 11 	lds	r22, 0x11C3
     d12:	70 91 c4 11 	lds	r23, 0x11C4
     d16:	80 91 c5 11 	lds	r24, 0x11C5
     d1a:	90 91 c6 11 	lds	r25, 0x11C6
     d1e:	e6 d7       	rcall	.+4044   	; 0x1cec <__mulsf3>
     d20:	fe d6       	rcall	.+3580   	; 0x1b1e <__fixsfsi>
     d22:	cb 01       	movw	r24, r22
     d24:	17 c1       	rjmp	.+558    	; 0xf54 <__vector_24+0x2fe>
	} else if(voltage <= IRLong[14][0])
     d26:	20 91 2f 12 	lds	r18, 0x122F
     d2a:	30 91 30 12 	lds	r19, 0x1230
     d2e:	40 91 31 12 	lds	r20, 0x1231
     d32:	50 91 32 12 	lds	r21, 0x1232
     d36:	bd 81       	ldd	r27, Y+5	; 0x05
     d38:	ae 81       	ldd	r26, Y+6	; 0x06
     d3a:	1f 81       	ldd	r17, Y+7	; 0x07
     d3c:	08 85       	ldd	r16, Y+8	; 0x08
     d3e:	6b 2f       	mov	r22, r27
     d40:	7a 2f       	mov	r23, r26
     d42:	81 2f       	mov	r24, r17
     d44:	90 2f       	mov	r25, r16
     d46:	7f d6       	rcall	.+3326   	; 0x1a46 <__cmpsf2>
     d48:	18 16       	cp	r1, r24
     d4a:	a4 f4       	brge	.+40     	; 0xd74 <__vector_24+0x11e>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     d4c:	80 90 c7 11 	lds	r8, 0x11C7
     d50:	90 90 c8 11 	lds	r9, 0x11C8
     d54:	a0 90 c9 11 	lds	r10, 0x11C9
     d58:	b0 90 ca 11 	lds	r11, 0x11CA
		if(next == voltage)
     d5c:	a5 01       	movw	r20, r10
     d5e:	94 01       	movw	r18, r8
     d60:	bd 81       	ldd	r27, Y+5	; 0x05
     d62:	ae 81       	ldd	r26, Y+6	; 0x06
     d64:	6b 2f       	mov	r22, r27
     d66:	7a 2f       	mov	r23, r26
     d68:	81 2f       	mov	r24, r17
     d6a:	90 2f       	mov	r25, r16
     d6c:	6c d6       	rcall	.+3288   	; 0x1a46 <__cmpsf2>
     d6e:	81 11       	cpse	r24, r1
     d70:	4c c0       	rjmp	.+152    	; 0xe0a <__vector_24+0x1b4>
     d72:	32 c0       	rjmp	.+100    	; 0xdd8 <__vector_24+0x182>
	if(voltage >= IRLong[0][0])
	{
		return IRLong[0][1]*10;
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e2       	ldi	r20, 0x20	; 32
     d7a:	51 e4       	ldi	r21, 0x41	; 65
     d7c:	60 91 33 12 	lds	r22, 0x1233
     d80:	70 91 34 12 	lds	r23, 0x1234
     d84:	80 91 35 12 	lds	r24, 0x1235
     d88:	90 91 36 12 	lds	r25, 0x1236
     d8c:	af d7       	rcall	.+3934   	; 0x1cec <__mulsf3>
     d8e:	c7 d6       	rcall	.+3470   	; 0x1b1e <__fixsfsi>
     d90:	cb 01       	movw	r24, r22
     d92:	e0 c0       	rjmp	.+448    	; 0xf54 <__vector_24+0x2fe>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
     d94:	d3 01       	movw	r26, r6
     d96:	8d 91       	ld	r24, X+
     d98:	9d 91       	ld	r25, X+
     d9a:	0d 90       	ld	r0, X+
     d9c:	bc 91       	ld	r27, X
     d9e:	a0 2d       	mov	r26, r0
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	ab 83       	std	Y+3, r26	; 0x03
     da6:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRLong[i+1][0];
     da8:	78 01       	movw	r14, r16
     daa:	bf ef       	ldi	r27, 0xFF	; 255
     dac:	eb 1a       	sub	r14, r27
     dae:	fb 0a       	sbc	r15, r27
     db0:	e8 e0       	ldi	r30, 0x08	; 8
     db2:	6e 0e       	add	r6, r30
     db4:	71 1c       	adc	r7, r1
     db6:	d3 01       	movw	r26, r6
     db8:	8d 90       	ld	r8, X+
     dba:	9d 90       	ld	r9, X+
     dbc:	ad 90       	ld	r10, X+
     dbe:	bc 90       	ld	r11, X
     dc0:	1b 87       	std	Y+11, r17	; 0x0b
     dc2:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
     dc4:	a5 01       	movw	r20, r10
     dc6:	94 01       	movw	r18, r8
     dc8:	6d 2d       	mov	r22, r13
     dca:	7c 2d       	mov	r23, r12
     dcc:	83 2d       	mov	r24, r3
     dce:	92 2d       	mov	r25, r2
     dd0:	3a d6       	rcall	.+3188   	; 0x1a46 <__cmpsf2>
     dd2:	81 11       	cpse	r24, r1
     dd4:	2b c0       	rjmp	.+86     	; 0xe2c <__vector_24+0x1d6>
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <__vector_24+0x188>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     dd8:	ee 24       	eor	r14, r14
     dda:	e3 94       	inc	r14
     ddc:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
     dde:	c7 01       	movw	r24, r14
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	81 54       	subi	r24, 0x41	; 65
     dee:	9e 4e       	sbci	r25, 0xEE	; 238
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e2       	ldi	r20, 0x20	; 32
     df6:	51 e4       	ldi	r21, 0x41	; 65
     df8:	fc 01       	movw	r30, r24
     dfa:	64 81       	ldd	r22, Z+4	; 0x04
     dfc:	75 81       	ldd	r23, Z+5	; 0x05
     dfe:	86 81       	ldd	r24, Z+6	; 0x06
     e00:	97 81       	ldd	r25, Z+7	; 0x07
     e02:	74 d7       	rcall	.+3816   	; 0x1cec <__mulsf3>
     e04:	8c d6       	rcall	.+3352   	; 0x1b1e <__fixsfsi>
     e06:	cb 01       	movw	r24, r22
     e08:	a5 c0       	rjmp	.+330    	; 0xf54 <__vector_24+0x2fe>
     e0a:	0f 2e       	mov	r0, r31
     e0c:	f7 ec       	ldi	r31, 0xC7	; 199
     e0e:	6f 2e       	mov	r6, r31
     e10:	f1 e1       	ldi	r31, 0x11	; 17
     e12:	7f 2e       	mov	r7, r31
     e14:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e16:	01 e0       	ldi	r16, 0x01	; 1
     e18:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
     e1a:	1b 86       	std	Y+11, r1	; 0x0b
     e1c:	1a 86       	std	Y+10, r1	; 0x0a
     e1e:	c9 82       	std	Y+1, r12	; 0x01
     e20:	da 82       	std	Y+2, r13	; 0x02
     e22:	eb 82       	std	Y+3, r14	; 0x03
     e24:	fc 82       	std	Y+4, r15	; 0x04
     e26:	d5 2c       	mov	r13, r5
     e28:	c4 2c       	mov	r12, r4
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <__vector_24+0x1d8>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e2c:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
     e2e:	29 81       	ldd	r18, Y+1	; 0x01
     e30:	3a 81       	ldd	r19, Y+2	; 0x02
     e32:	4b 81       	ldd	r20, Y+3	; 0x03
     e34:	5c 81       	ldd	r21, Y+4	; 0x04
     e36:	6d 2d       	mov	r22, r13
     e38:	7c 2d       	mov	r23, r12
     e3a:	83 2d       	mov	r24, r3
     e3c:	92 2d       	mov	r25, r2
     e3e:	03 d6       	rcall	.+3078   	; 0x1a46 <__cmpsf2>
     e40:	88 23       	and	r24, r24
     e42:	0c f0       	brlt	.+2      	; 0xe46 <__vector_24+0x1f0>
     e44:	74 c0       	rjmp	.+232    	; 0xf2e <__vector_24+0x2d8>
     e46:	a5 01       	movw	r20, r10
     e48:	94 01       	movw	r18, r8
     e4a:	6d 2d       	mov	r22, r13
     e4c:	7c 2d       	mov	r23, r12
     e4e:	83 2d       	mov	r24, r3
     e50:	92 2d       	mov	r25, r2
     e52:	48 d7       	rcall	.+3728   	; 0x1ce4 <__gesf2>
     e54:	18 16       	cp	r1, r24
     e56:	0c f0       	brlt	.+2      	; 0xe5a <__vector_24+0x204>
     e58:	6a c0       	rjmp	.+212    	; 0xf2e <__vector_24+0x2d8>
     e5a:	c9 80       	ldd	r12, Y+1	; 0x01
     e5c:	da 80       	ldd	r13, Y+2	; 0x02
     e5e:	eb 80       	ldd	r14, Y+3	; 0x03
     e60:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRLong[i][1]*10;
     e62:	ea 85       	ldd	r30, Y+10	; 0x0a
     e64:	fb 85       	ldd	r31, Y+11	; 0x0b
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	ee 0f       	add	r30, r30
     e6c:	ff 1f       	adc	r31, r31
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	e1 54       	subi	r30, 0x41	; 65
     e74:	fe 4e       	sbci	r31, 0xEE	; 238
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e2       	ldi	r20, 0x20	; 32
     e7c:	51 e4       	ldi	r21, 0x41	; 65
     e7e:	64 81       	ldd	r22, Z+4	; 0x04
     e80:	75 81       	ldd	r23, Z+5	; 0x05
     e82:	86 81       	ldd	r24, Z+6	; 0x06
     e84:	97 81       	ldd	r25, Z+7	; 0x07
     e86:	32 d7       	rcall	.+3684   	; 0x1cec <__mulsf3>
     e88:	4a d6       	rcall	.+3220   	; 0x1b1e <__fixsfsi>
     e8a:	1b 01       	movw	r2, r22
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     e8c:	88 27       	eor	r24, r24
     e8e:	77 fd       	sbrc	r23, 7
     e90:	80 95       	com	r24
     e92:	98 2f       	mov	r25, r24
     e94:	77 d6       	rcall	.+3310   	; 0x1b84 <__floatsisf>
     e96:	2b 01       	movw	r4, r22
     e98:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
     e9a:	7d 81       	ldd	r23, Y+5	; 0x05
     e9c:	6e 81       	ldd	r22, Y+6	; 0x06
     e9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ea0:	88 85       	ldd	r24, Y+8	; 0x08
     ea2:	27 2f       	mov	r18, r23
     ea4:	36 2f       	mov	r19, r22
     ea6:	49 2f       	mov	r20, r25
     ea8:	58 2f       	mov	r21, r24
     eaa:	c7 01       	movw	r24, r14
     eac:	b6 01       	movw	r22, r12
     eae:	66 d5       	rcall	.+2764   	; 0x197c <__subsf3>
     eb0:	69 83       	std	Y+1, r22	; 0x01
     eb2:	7a 83       	std	Y+2, r23	; 0x02
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
     eb8:	f8 01       	movw	r30, r16
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	ee 0f       	add	r30, r30
     ec0:	ff 1f       	adc	r31, r31
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	e1 54       	subi	r30, 0x41	; 65
     ec8:	fe 4e       	sbci	r31, 0xEE	; 238
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	51 e4       	ldi	r21, 0x41	; 65
     ed2:	64 81       	ldd	r22, Z+4	; 0x04
     ed4:	75 81       	ldd	r23, Z+5	; 0x05
     ed6:	86 81       	ldd	r24, Z+6	; 0x06
     ed8:	97 81       	ldd	r25, Z+7	; 0x07
     eda:	08 d7       	rcall	.+3600   	; 0x1cec <__mulsf3>
     edc:	20 d6       	rcall	.+3136   	; 0x1b1e <__fixsfsi>
			int diff = high - low;
     ede:	91 01       	movw	r18, r2
     ee0:	26 1b       	sub	r18, r22
     ee2:	37 0b       	sbc	r19, r23
     ee4:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     ee6:	88 27       	eor	r24, r24
     ee8:	77 fd       	sbrc	r23, 7
     eea:	80 95       	com	r24
     eec:	98 2f       	mov	r25, r24
     eee:	4a d6       	rcall	.+3220   	; 0x1b84 <__floatsisf>
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
     ef4:	69 81       	ldd	r22, Y+1	; 0x01
     ef6:	7a 81       	ldd	r23, Y+2	; 0x02
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	f7 d6       	rcall	.+3566   	; 0x1cec <__mulsf3>
     efe:	69 83       	std	Y+1, r22	; 0x01
     f00:	7a 83       	std	Y+2, r23	; 0x02
     f02:	8b 83       	std	Y+3, r24	; 0x03
     f04:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
     f06:	a5 01       	movw	r20, r10
     f08:	94 01       	movw	r18, r8
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	36 d5       	rcall	.+2668   	; 0x197c <__subsf3>
     f10:	9b 01       	movw	r18, r22
     f12:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
     f14:	69 81       	ldd	r22, Y+1	; 0x01
     f16:	7a 81       	ldd	r23, Y+2	; 0x02
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	98 d5       	rcall	.+2864   	; 0x1a4e <__divsf3>
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
     f22:	c3 01       	movw	r24, r6
     f24:	b2 01       	movw	r22, r4
     f26:	2a d5       	rcall	.+2644   	; 0x197c <__subsf3>
     f28:	fa d5       	rcall	.+3060   	; 0x1b1e <__fixsfsi>
     f2a:	cb 01       	movw	r24, r22
     f2c:	13 c0       	rjmp	.+38     	; 0xf54 <__vector_24+0x2fe>
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
     f2e:	0d 30       	cpi	r16, 0x0D	; 13
     f30:	11 05       	cpc	r17, r1
     f32:	09 f0       	breq	.+2      	; 0xf36 <__vector_24+0x2e0>
     f34:	2f cf       	rjmp	.-418    	; 0xd94 <__vector_24+0x13e>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return IRLong[14][1]*10;
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e2       	ldi	r20, 0x20	; 32
     f3c:	51 e4       	ldi	r21, 0x41	; 65
     f3e:	60 91 33 12 	lds	r22, 0x1233
     f42:	70 91 34 12 	lds	r23, 0x1234
     f46:	80 91 35 12 	lds	r24, 0x1235
     f4a:	90 91 36 12 	lds	r25, 0x1236
     f4e:	ce d6       	rcall	.+3484   	; 0x1cec <__mulsf3>
     f50:	e6 d5       	rcall	.+3020   	; 0x1b1e <__fixsfsi>
     f52:	cb 01       	movw	r24, r22
	cli();
	uint8_t adcValue = ADCH;
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
     f54:	6a e0       	ldi	r22, 0x0A	; 10
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	2c d7       	rcall	.+3672   	; 0x1db2 <__divmodhi4>
     f5a:	60 93 3c 12 	sts	0x123C, r22
     f5e:	4c c1       	rjmp	.+664    	; 0x11f8 <__vector_24+0x5a2>
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
     f60:	99 85       	ldd	r25, Y+9	; 0x09
     f62:	89 2f       	mov	r24, r25
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9d 87       	std	Y+13, r25	; 0x0d
     f68:	8c 87       	std	Y+12, r24	; 0x0c
	IRLong[14][1] = 150;
}

int voltage_to_mm_short(float voltage)
{
	if(voltage >= IRShort[0][0])
     f6a:	c0 90 57 11 	lds	r12, 0x1157
     f6e:	d0 90 58 11 	lds	r13, 0x1158
     f72:	e0 90 59 11 	lds	r14, 0x1159
     f76:	f0 90 5a 11 	lds	r15, 0x115A
     f7a:	a7 01       	movw	r20, r14
     f7c:	96 01       	movw	r18, r12
     f7e:	bd 81       	ldd	r27, Y+5	; 0x05
     f80:	ae 81       	ldd	r26, Y+6	; 0x06
     f82:	1f 81       	ldd	r17, Y+7	; 0x07
     f84:	08 85       	ldd	r16, Y+8	; 0x08
     f86:	6b 2f       	mov	r22, r27
     f88:	7a 2f       	mov	r23, r26
     f8a:	81 2f       	mov	r24, r17
     f8c:	90 2f       	mov	r25, r16
     f8e:	aa d6       	rcall	.+3412   	; 0x1ce4 <__gesf2>
     f90:	88 23       	and	r24, r24
     f92:	84 f0       	brlt	.+32     	; 0xfb4 <__vector_24+0x35e>
	{
		return IRShort[0][1]*10;
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e2       	ldi	r20, 0x20	; 32
     f9a:	51 e4       	ldi	r21, 0x41	; 65
     f9c:	60 91 5b 11 	lds	r22, 0x115B
     fa0:	70 91 5c 11 	lds	r23, 0x115C
     fa4:	80 91 5d 11 	lds	r24, 0x115D
     fa8:	90 91 5e 11 	lds	r25, 0x115E
     fac:	9f d6       	rcall	.+3390   	; 0x1cec <__mulsf3>
     fae:	b7 d5       	rcall	.+2926   	; 0x1b1e <__fixsfsi>
     fb0:	cb 01       	movw	r24, r22
     fb2:	17 c1       	rjmp	.+558    	; 0x11e2 <__vector_24+0x58c>
	} else if(voltage <= IRShort[12][0])
     fb4:	20 91 b7 11 	lds	r18, 0x11B7
     fb8:	30 91 b8 11 	lds	r19, 0x11B8
     fbc:	40 91 b9 11 	lds	r20, 0x11B9
     fc0:	50 91 ba 11 	lds	r21, 0x11BA
     fc4:	bd 81       	ldd	r27, Y+5	; 0x05
     fc6:	ae 81       	ldd	r26, Y+6	; 0x06
     fc8:	1f 81       	ldd	r17, Y+7	; 0x07
     fca:	08 85       	ldd	r16, Y+8	; 0x08
     fcc:	6b 2f       	mov	r22, r27
     fce:	7a 2f       	mov	r23, r26
     fd0:	81 2f       	mov	r24, r17
     fd2:	90 2f       	mov	r25, r16
     fd4:	38 d5       	rcall	.+2672   	; 0x1a46 <__cmpsf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	a4 f4       	brge	.+40     	; 0x1002 <__vector_24+0x3ac>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
     fda:	80 90 5f 11 	lds	r8, 0x115F
     fde:	90 90 60 11 	lds	r9, 0x1160
     fe2:	a0 90 61 11 	lds	r10, 0x1161
     fe6:	b0 90 62 11 	lds	r11, 0x1162
		if(next == voltage)
     fea:	a5 01       	movw	r20, r10
     fec:	94 01       	movw	r18, r8
     fee:	bd 81       	ldd	r27, Y+5	; 0x05
     ff0:	ae 81       	ldd	r26, Y+6	; 0x06
     ff2:	6b 2f       	mov	r22, r27
     ff4:	7a 2f       	mov	r23, r26
     ff6:	81 2f       	mov	r24, r17
     ff8:	90 2f       	mov	r25, r16
     ffa:	25 d5       	rcall	.+2634   	; 0x1a46 <__cmpsf2>
     ffc:	81 11       	cpse	r24, r1
     ffe:	4c c0       	rjmp	.+152    	; 0x1098 <__vector_24+0x442>
    1000:	32 c0       	rjmp	.+100    	; 0x1066 <__vector_24+0x410>
	if(voltage >= IRShort[0][0])
	{
		return IRShort[0][1]*10;
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	60 91 bb 11 	lds	r22, 0x11BB
    100e:	70 91 bc 11 	lds	r23, 0x11BC
    1012:	80 91 bd 11 	lds	r24, 0x11BD
    1016:	90 91 be 11 	lds	r25, 0x11BE
    101a:	68 d6       	rcall	.+3280   	; 0x1cec <__mulsf3>
    101c:	80 d5       	rcall	.+2816   	; 0x1b1e <__fixsfsi>
    101e:	cb 01       	movw	r24, r22
    1020:	e0 c0       	rjmp	.+448    	; 0x11e2 <__vector_24+0x58c>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
    1022:	d3 01       	movw	r26, r6
    1024:	8d 91       	ld	r24, X+
    1026:	9d 91       	ld	r25, X+
    1028:	0d 90       	ld	r0, X+
    102a:	bc 91       	ld	r27, X
    102c:	a0 2d       	mov	r26, r0
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	ab 83       	std	Y+3, r26	; 0x03
    1034:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRShort[i+1][0];
    1036:	78 01       	movw	r14, r16
    1038:	bf ef       	ldi	r27, 0xFF	; 255
    103a:	eb 1a       	sub	r14, r27
    103c:	fb 0a       	sbc	r15, r27
    103e:	e8 e0       	ldi	r30, 0x08	; 8
    1040:	6e 0e       	add	r6, r30
    1042:	71 1c       	adc	r7, r1
    1044:	d3 01       	movw	r26, r6
    1046:	8d 90       	ld	r8, X+
    1048:	9d 90       	ld	r9, X+
    104a:	ad 90       	ld	r10, X+
    104c:	bc 90       	ld	r11, X
    104e:	1b 87       	std	Y+11, r17	; 0x0b
    1050:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
    1052:	a5 01       	movw	r20, r10
    1054:	94 01       	movw	r18, r8
    1056:	6d 2d       	mov	r22, r13
    1058:	7c 2d       	mov	r23, r12
    105a:	83 2d       	mov	r24, r3
    105c:	92 2d       	mov	r25, r2
    105e:	f3 d4       	rcall	.+2534   	; 0x1a46 <__cmpsf2>
    1060:	81 11       	cpse	r24, r1
    1062:	2b c0       	rjmp	.+86     	; 0x10ba <__vector_24+0x464>
    1064:	03 c0       	rjmp	.+6      	; 0x106c <__vector_24+0x416>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    1066:	ee 24       	eor	r14, r14
    1068:	e3 94       	inc	r14
    106a:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
    106c:	c7 01       	movw	r24, r14
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	89 5a       	subi	r24, 0xA9	; 169
    107c:	9e 4e       	sbci	r25, 0xEE	; 238
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e2       	ldi	r20, 0x20	; 32
    1084:	51 e4       	ldi	r21, 0x41	; 65
    1086:	fc 01       	movw	r30, r24
    1088:	64 81       	ldd	r22, Z+4	; 0x04
    108a:	75 81       	ldd	r23, Z+5	; 0x05
    108c:	86 81       	ldd	r24, Z+6	; 0x06
    108e:	97 81       	ldd	r25, Z+7	; 0x07
    1090:	2d d6       	rcall	.+3162   	; 0x1cec <__mulsf3>
    1092:	45 d5       	rcall	.+2698   	; 0x1b1e <__fixsfsi>
    1094:	cb 01       	movw	r24, r22
    1096:	a5 c0       	rjmp	.+330    	; 0x11e2 <__vector_24+0x58c>
    1098:	0f 2e       	mov	r0, r31
    109a:	ff e5       	ldi	r31, 0x5F	; 95
    109c:	6f 2e       	mov	r6, r31
    109e:	f1 e1       	ldi	r31, 0x11	; 17
    10a0:	7f 2e       	mov	r7, r31
    10a2:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10a4:	01 e0       	ldi	r16, 0x01	; 1
    10a6:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
    10a8:	1b 86       	std	Y+11, r1	; 0x0b
    10aa:	1a 86       	std	Y+10, r1	; 0x0a
    10ac:	c9 82       	std	Y+1, r12	; 0x01
    10ae:	da 82       	std	Y+2, r13	; 0x02
    10b0:	eb 82       	std	Y+3, r14	; 0x03
    10b2:	fc 82       	std	Y+4, r15	; 0x04
    10b4:	d5 2c       	mov	r13, r5
    10b6:	c4 2c       	mov	r12, r4
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <__vector_24+0x466>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10ba:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
    10bc:	29 81       	ldd	r18, Y+1	; 0x01
    10be:	3a 81       	ldd	r19, Y+2	; 0x02
    10c0:	4b 81       	ldd	r20, Y+3	; 0x03
    10c2:	5c 81       	ldd	r21, Y+4	; 0x04
    10c4:	6d 2d       	mov	r22, r13
    10c6:	7c 2d       	mov	r23, r12
    10c8:	83 2d       	mov	r24, r3
    10ca:	92 2d       	mov	r25, r2
    10cc:	bc d4       	rcall	.+2424   	; 0x1a46 <__cmpsf2>
    10ce:	88 23       	and	r24, r24
    10d0:	0c f0       	brlt	.+2      	; 0x10d4 <__vector_24+0x47e>
    10d2:	74 c0       	rjmp	.+232    	; 0x11bc <__vector_24+0x566>
    10d4:	a5 01       	movw	r20, r10
    10d6:	94 01       	movw	r18, r8
    10d8:	6d 2d       	mov	r22, r13
    10da:	7c 2d       	mov	r23, r12
    10dc:	83 2d       	mov	r24, r3
    10de:	92 2d       	mov	r25, r2
    10e0:	01 d6       	rcall	.+3074   	; 0x1ce4 <__gesf2>
    10e2:	18 16       	cp	r1, r24
    10e4:	0c f0       	brlt	.+2      	; 0x10e8 <__vector_24+0x492>
    10e6:	6a c0       	rjmp	.+212    	; 0x11bc <__vector_24+0x566>
    10e8:	c9 80       	ldd	r12, Y+1	; 0x01
    10ea:	da 80       	ldd	r13, Y+2	; 0x02
    10ec:	eb 80       	ldd	r14, Y+3	; 0x03
    10ee:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRShort[i][1]*10;
    10f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    10f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	e9 5a       	subi	r30, 0xA9	; 169
    1102:	fe 4e       	sbci	r31, 0xEE	; 238
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e2       	ldi	r20, 0x20	; 32
    110a:	51 e4       	ldi	r21, 0x41	; 65
    110c:	64 81       	ldd	r22, Z+4	; 0x04
    110e:	75 81       	ldd	r23, Z+5	; 0x05
    1110:	86 81       	ldd	r24, Z+6	; 0x06
    1112:	97 81       	ldd	r25, Z+7	; 0x07
    1114:	eb d5       	rcall	.+3030   	; 0x1cec <__mulsf3>
    1116:	03 d5       	rcall	.+2566   	; 0x1b1e <__fixsfsi>
    1118:	1b 01       	movw	r2, r22
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    111a:	88 27       	eor	r24, r24
    111c:	77 fd       	sbrc	r23, 7
    111e:	80 95       	com	r24
    1120:	98 2f       	mov	r25, r24
    1122:	30 d5       	rcall	.+2656   	; 0x1b84 <__floatsisf>
    1124:	2b 01       	movw	r4, r22
    1126:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
    1128:	7d 81       	ldd	r23, Y+5	; 0x05
    112a:	6e 81       	ldd	r22, Y+6	; 0x06
    112c:	9f 81       	ldd	r25, Y+7	; 0x07
    112e:	88 85       	ldd	r24, Y+8	; 0x08
    1130:	27 2f       	mov	r18, r23
    1132:	36 2f       	mov	r19, r22
    1134:	49 2f       	mov	r20, r25
    1136:	58 2f       	mov	r21, r24
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	1f d4       	rcall	.+2110   	; 0x197c <__subsf3>
    113e:	69 83       	std	Y+1, r22	; 0x01
    1140:	7a 83       	std	Y+2, r23	; 0x02
    1142:	8b 83       	std	Y+3, r24	; 0x03
    1144:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
    1146:	f8 01       	movw	r30, r16
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	e9 5a       	subi	r30, 0xA9	; 169
    1156:	fe 4e       	sbci	r31, 0xEE	; 238
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e2       	ldi	r20, 0x20	; 32
    115e:	51 e4       	ldi	r21, 0x41	; 65
    1160:	64 81       	ldd	r22, Z+4	; 0x04
    1162:	75 81       	ldd	r23, Z+5	; 0x05
    1164:	86 81       	ldd	r24, Z+6	; 0x06
    1166:	97 81       	ldd	r25, Z+7	; 0x07
    1168:	c1 d5       	rcall	.+2946   	; 0x1cec <__mulsf3>
    116a:	d9 d4       	rcall	.+2482   	; 0x1b1e <__fixsfsi>
			int diff = high - low;
    116c:	91 01       	movw	r18, r2
    116e:	26 1b       	sub	r18, r22
    1170:	37 0b       	sbc	r19, r23
    1172:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    1174:	88 27       	eor	r24, r24
    1176:	77 fd       	sbrc	r23, 7
    1178:	80 95       	com	r24
    117a:	98 2f       	mov	r25, r24
    117c:	03 d5       	rcall	.+2566   	; 0x1b84 <__floatsisf>
    117e:	9b 01       	movw	r18, r22
    1180:	ac 01       	movw	r20, r24
    1182:	69 81       	ldd	r22, Y+1	; 0x01
    1184:	7a 81       	ldd	r23, Y+2	; 0x02
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	b0 d5       	rcall	.+2912   	; 0x1cec <__mulsf3>
    118c:	69 83       	std	Y+1, r22	; 0x01
    118e:	7a 83       	std	Y+2, r23	; 0x02
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
    1194:	a5 01       	movw	r20, r10
    1196:	94 01       	movw	r18, r8
    1198:	c7 01       	movw	r24, r14
    119a:	b6 01       	movw	r22, r12
    119c:	ef d3       	rcall	.+2014   	; 0x197c <__subsf3>
    119e:	9b 01       	movw	r18, r22
    11a0:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
    11a2:	69 81       	ldd	r22, Y+1	; 0x01
    11a4:	7a 81       	ldd	r23, Y+2	; 0x02
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	51 d4       	rcall	.+2210   	; 0x1a4e <__divsf3>
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	c3 01       	movw	r24, r6
    11b2:	b2 01       	movw	r22, r4
    11b4:	e3 d3       	rcall	.+1990   	; 0x197c <__subsf3>
    11b6:	b3 d4       	rcall	.+2406   	; 0x1b1e <__fixsfsi>
    11b8:	cb 01       	movw	r24, r22
    11ba:	13 c0       	rjmp	.+38     	; 0x11e2 <__vector_24+0x58c>
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
    11bc:	0d 30       	cpi	r16, 0x0D	; 13
    11be:	11 05       	cpc	r17, r1
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <__vector_24+0x56e>
    11c2:	2f cf       	rjmp	.-418    	; 0x1022 <__vector_24+0x3cc>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return IRShort[12][1]*10;
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	60 91 bb 11 	lds	r22, 0x11BB
    11d0:	70 91 bc 11 	lds	r23, 0x11BC
    11d4:	80 91 bd 11 	lds	r24, 0x11BD
    11d8:	90 91 be 11 	lds	r25, 0x11BE
    11dc:	87 d5       	rcall	.+2830   	; 0x1cec <__mulsf3>
    11de:	9f d4       	rcall	.+2366   	; 0x1b1e <__fixsfsi>
    11e0:	cb 01       	movw	r24, r22
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
    11e2:	ec 85       	ldd	r30, Y+12	; 0x0c
    11e4:	fd 85       	ldd	r31, Y+13	; 0x0d
    11e6:	e8 5c       	subi	r30, 0xC8	; 200
    11e8:	fd 4e       	sbci	r31, 0xED	; 237
    11ea:	6a e0       	ldi	r22, 0x0A	; 10
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	e1 d5       	rcall	.+3010   	; 0x1db2 <__divmodhi4>
    11f0:	60 83       	st	Z, r22
	}
	
	if(gSelectedSensor < 6)
    11f2:	39 85       	ldd	r19, Y+9	; 0x09
    11f4:	36 30       	cpi	r19, 0x06	; 6
    11f6:	38 f4       	brcc	.+14     	; 0x1206 <__vector_24+0x5b0>
	{
		// Not last sensor
		select_sensor(gSelectedSensor + 1);
    11f8:	a9 85       	ldd	r26, Y+9	; 0x09
    11fa:	8a 2f       	mov	r24, r26
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	a3 d9       	rcall	.-3258   	; 0x548 <select_sensor>
		adc_start();
    1202:	9c d9       	rcall	.-3272   	; 0x53c <adc_start>
    1204:	09 c0       	rjmp	.+18     	; 0x1218 <__vector_24+0x5c2>
	} else {
		select_sensor(0);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9e d9       	rcall	.-3268   	; 0x548 <select_sensor>
	}
}

void start_ul_sensor()
{
	TCNT0 = 0;
    120c:	16 bc       	out	0x26, r1	; 38
	PORTA |= (1<<PORTA7);
    120e:	17 9a       	sbi	0x02, 7	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1210:	b0 e5       	ldi	r27, 0x50	; 80
    1212:	ba 95       	dec	r27
    1214:	f1 f7       	brne	.-4      	; 0x1212 <__vector_24+0x5bc>
	_delay_us(15);
	PORTA &= ~(1<<PORTA7);
    1216:	17 98       	cbi	0x02, 7	; 2
		adc_start();
	} else {
		select_sensor(0);
		start_ul_sensor();
	}
	sei();
    1218:	78 94       	sei
}
    121a:	2d 96       	adiw	r28, 0x0d	; 13
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	ff 91       	pop	r31
    122c:	ef 91       	pop	r30
    122e:	bf 91       	pop	r27
    1230:	af 91       	pop	r26
    1232:	9f 91       	pop	r25
    1234:	8f 91       	pop	r24
    1236:	7f 91       	pop	r23
    1238:	6f 91       	pop	r22
    123a:	5f 91       	pop	r21
    123c:	4f 91       	pop	r20
    123e:	3f 91       	pop	r19
    1240:	2f 91       	pop	r18
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	df 90       	pop	r13
    124c:	cf 90       	pop	r12
    124e:	bf 90       	pop	r11
    1250:	af 90       	pop	r10
    1252:	9f 90       	pop	r9
    1254:	8f 90       	pop	r8
    1256:	7f 90       	pop	r7
    1258:	6f 90       	pop	r6
    125a:	5f 90       	pop	r5
    125c:	4f 90       	pop	r4
    125e:	3f 90       	pop	r3
    1260:	2f 90       	pop	r2
    1262:	0f 90       	pop	r0
    1264:	0b be       	out	0x3b, r0	; 59
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <__vector_4>:

ISR(PCINT0_vect)
{
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	0b b6       	in	r0, 0x3b	; 59
    127c:	0f 92       	push	r0
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
	cli();
    1296:	f8 94       	cli
	if(PINA & (1<<PINA6))
    1298:	06 9b       	sbis	0x00, 6	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <__vector_4+0x30>
	{
		TCNT0 = 0;
    129c:	16 bc       	out	0x26, r1	; 38
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <__vector_4+0x3c>
	}
	else
	{
		uint8_t UL = TCNT0;
    12a0:	86 b5       	in	r24, 0x26	; 38
		gSensorBuffer[7] = UL;
    12a2:	80 93 3f 12 	sts	0x123F, r24
		sensorDataFlag = true;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 40 12 	sts	0x1240, r24
	}
	TWI_send_sensors(sensors_get_data(), 0);
    12ac:	d1 dc       	rcall	.-1630   	; 0xc50 <sensors_get_data>
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	d0 d0       	rcall	.+416    	; 0x1452 <TWI_send_sensors>
	sei();
    12b2:	78 94       	sei
}
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	0b be       	out	0x3b, r0	; 59
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <set_twi_reciever_enable>:
    12da:	85 e4       	ldi	r24, 0x45	; 69
    12dc:	80 93 bc 00 	sts	0x00BC, r24
    12e0:	08 95       	ret

000012e2 <clear_int>:
    12e2:	81 ec       	ldi	r24, 0xC1	; 193
    12e4:	80 93 bc 00 	sts	0x00BC, r24
    12e8:	08 95       	ret

000012ea <start_bus>:
    12ea:	84 ea       	ldi	r24, 0xA4	; 164
    12ec:	80 93 bc 00 	sts	0x00BC, r24
    12f0:	08 95       	ret

000012f2 <stop_bus>:
    12f2:	85 ed       	ldi	r24, 0xD5	; 213
    12f4:	80 93 bc 00 	sts	0x00BC, r24
    12f8:	08 95       	ret

000012fa <Error>:
    12fa:	80 91 b9 00 	lds	r24, 0x00B9
    12fe:	88 7f       	andi	r24, 0xF8	; 248
    1300:	88 33       	cpi	r24, 0x38	; 56
    1302:	09 f0       	breq	.+2      	; 0x1306 <Error+0xc>
    1304:	f6 cf       	rjmp	.-20     	; 0x12f2 <stop_bus>
    1306:	ed cf       	rjmp	.-38     	; 0x12e2 <clear_int>

00001308 <get_data>:
    1308:	80 91 bb 00 	lds	r24, 0x00BB
    130c:	08 95       	ret

0000130e <wait_for_bus>:
    130e:	ec eb       	ldi	r30, 0xBC	; 188
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	88 23       	and	r24, r24
    1316:	ec f7       	brge	.-6      	; 0x1312 <wait_for_bus+0x4>
    1318:	08 95       	ret

0000131a <send_data_and_wait>:
    131a:	80 93 bb 00 	sts	0x00BB, r24
    131e:	84 e8       	ldi	r24, 0x84	; 132
    1320:	80 93 bc 00 	sts	0x00BC, r24
    1324:	f4 cf       	rjmp	.-24     	; 0x130e <wait_for_bus>

00001326 <stop_twi>:
    1326:	10 92 5a 13 	sts	0x135A, r1
    132a:	10 92 59 13 	sts	0x1359, r1
    132e:	10 92 63 13 	sts	0x1363, r1
    1332:	10 92 62 13 	sts	0x1362, r1
    1336:	10 92 4f 13 	sts	0x134F, r1
    133a:	10 92 4e 13 	sts	0x134E, r1
    133e:	10 92 54 13 	sts	0x1354, r1
    1342:	10 92 53 13 	sts	0x1353, r1
    1346:	10 92 57 13 	sts	0x1357, r1
    134a:	10 92 56 13 	sts	0x1356, r1
    134e:	08 95       	ret

00001350 <reset_TWI>:
    1350:	ec eb       	ldi	r30, 0xBC	; 188
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	80 6c       	ori	r24, 0xC0	; 192
    1358:	80 83       	st	Z, r24
    135a:	08 95       	ret

0000135c <get_sensor_from_bus>:
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	c0 91 62 13 	lds	r28, 0x1362
    1364:	d0 91 63 13 	lds	r29, 0x1363
    1368:	c8 30       	cpi	r28, 0x08	; 8
    136a:	d1 05       	cpc	r29, r1
    136c:	91 f4       	brne	.+36     	; 0x1392 <get_sensor_from_bus+0x36>
    136e:	e4 e6       	ldi	r30, 0x64	; 100
    1370:	f3 e1       	ldi	r31, 0x13	; 19
    1372:	ac e6       	ldi	r26, 0x6C	; 108
    1374:	b3 e1       	ldi	r27, 0x13	; 19
    1376:	8c e6       	ldi	r24, 0x6C	; 108
    1378:	93 e1       	ldi	r25, 0x13	; 19
    137a:	21 91       	ld	r18, Z+
    137c:	2d 93       	st	X+, r18
    137e:	e8 17       	cp	r30, r24
    1380:	f9 07       	cpc	r31, r25
    1382:	d9 f7       	brne	.-10     	; 0x137a <get_sensor_from_bus+0x1e>
    1384:	c1 df       	rcall	.-126    	; 0x1308 <get_data>
    1386:	80 93 5d 13 	sts	0x135D, r24
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 46 12 	sts	0x1246, r24
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <get_sensor_from_bus+0x50>
    1392:	ba df       	rcall	.-140    	; 0x1308 <get_data>
    1394:	cc 59       	subi	r28, 0x9C	; 156
    1396:	dc 4e       	sbci	r29, 0xEC	; 236
    1398:	88 83       	st	Y, r24
    139a:	80 91 62 13 	lds	r24, 0x1362
    139e:	90 91 63 13 	lds	r25, 0x1363
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	90 93 63 13 	sts	0x1363, r25
    13a8:	80 93 62 13 	sts	0x1362, r24
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <get_control_settings_from_bus>:
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	c0 91 53 13 	lds	r28, 0x1353
    13ba:	d0 91 54 13 	lds	r29, 0x1354
    13be:	a4 df       	rcall	.-184    	; 0x1308 <get_data>
    13c0:	c0 5b       	subi	r28, 0xB0	; 176
    13c2:	dc 4e       	sbci	r29, 0xEC	; 236
    13c4:	88 83       	st	Y, r24
    13c6:	10 92 54 13 	sts	0x1354, r1
    13ca:	10 92 53 13 	sts	0x1353, r1
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <get_autonom_settings_from_bus>:
    13d4:	99 df       	rcall	.-206    	; 0x1308 <get_data>
    13d6:	80 93 4e 12 	sts	0x124E, r24
    13da:	08 95       	ret

000013dc <get_char_from_bus>:
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	c0 91 4e 13 	lds	r28, 0x134E
    13e4:	d0 91 4f 13 	lds	r29, 0x134F
    13e8:	8f df       	rcall	.-226    	; 0x1308 <get_data>
    13ea:	c1 5b       	subi	r28, 0xB1	; 177
    13ec:	dd 4e       	sbci	r29, 0xED	; 237
    13ee:	88 83       	st	Y, r24
    13f0:	80 91 4e 13 	lds	r24, 0x134E
    13f4:	90 91 4f 13 	lds	r25, 0x134F
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	90 93 4f 13 	sts	0x134F, r25
    13fe:	80 93 4e 13 	sts	0x134E, r24
    1402:	80 93 5e 13 	sts	0x135E, r24
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <TWI_init>:
    140c:	80 93 55 13 	sts	0x1355, r24
    1410:	80 34       	cpi	r24, 0x40	; 64
    1412:	79 f0       	breq	.+30     	; 0x1432 <TWI_init+0x26>
    1414:	80 38       	cpi	r24, 0x80	; 128
    1416:	19 f0       	breq	.+6      	; 0x141e <TWI_init+0x12>
    1418:	80 32       	cpi	r24, 0x20	; 32
    141a:	d1 f4       	brne	.+52     	; 0x1450 <TWI_init+0x44>
    141c:	12 c0       	rjmp	.+36     	; 0x1442 <TWI_init+0x36>
    141e:	83 e0       	ldi	r24, 0x03	; 3
    1420:	88 b9       	out	0x08, r24	; 8
    1422:	5b df       	rcall	.-330    	; 0x12da <set_twi_reciever_enable>
    1424:	8f e3       	ldi	r24, 0x3F	; 63
    1426:	80 93 b8 00 	sts	0x00B8, r24
    142a:	81 e8       	ldi	r24, 0x81	; 129
    142c:	80 93 ba 00 	sts	0x00BA, r24
    1430:	08 95       	ret
    1432:	8f e3       	ldi	r24, 0x3F	; 63
    1434:	80 93 b8 00 	sts	0x00B8, r24
    1438:	50 df       	rcall	.-352    	; 0x12da <set_twi_reciever_enable>
    143a:	80 e4       	ldi	r24, 0x40	; 64
    143c:	80 93 ba 00 	sts	0x00BA, r24
    1440:	08 95       	ret
    1442:	8f e3       	ldi	r24, 0x3F	; 63
    1444:	80 93 b8 00 	sts	0x00B8, r24
    1448:	48 df       	rcall	.-368    	; 0x12da <set_twi_reciever_enable>
    144a:	81 e2       	ldi	r24, 0x21	; 33
    144c:	80 93 ba 00 	sts	0x00BA, r24
    1450:	08 95       	ret

00001452 <TWI_send_sensors>:
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	d8 2f       	mov	r29, r24
    145e:	c9 2f       	mov	r28, r25
    1460:	f6 2e       	mov	r15, r22
    1462:	43 df       	rcall	.-378    	; 0x12ea <start_bus>
    1464:	54 df       	rcall	.-344    	; 0x130e <wait_for_bus>
    1466:	20 91 b9 00 	lds	r18, 0x00B9
    146a:	28 7f       	andi	r18, 0xF8	; 248
    146c:	28 30       	cpi	r18, 0x08	; 8
    146e:	19 f0       	breq	.+6      	; 0x1476 <TWI_send_sensors+0x24>
    1470:	44 df       	rcall	.-376    	; 0x12fa <Error>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	1a c0       	rjmp	.+52     	; 0x14aa <TWI_send_sensors+0x58>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	50 df       	rcall	.-352    	; 0x131a <send_data_and_wait>
    147a:	80 91 b9 00 	lds	r24, 0x00B9
    147e:	88 7f       	andi	r24, 0xF8	; 248
    1480:	88 31       	cpi	r24, 0x18	; 24
    1482:	19 f0       	breq	.+6      	; 0x148a <TWI_send_sensors+0x38>
    1484:	3a df       	rcall	.-396    	; 0x12fa <Error>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	10 c0       	rjmp	.+32     	; 0x14aa <TWI_send_sensors+0x58>
    148a:	0d 2f       	mov	r16, r29
    148c:	1c 2f       	mov	r17, r28
    148e:	c0 e0       	ldi	r28, 0x00	; 0
    1490:	d0 e0       	ldi	r29, 0x00	; 0
    1492:	f8 01       	movw	r30, r16
    1494:	81 91       	ld	r24, Z+
    1496:	8f 01       	movw	r16, r30
    1498:	40 df       	rcall	.-384    	; 0x131a <send_data_and_wait>
    149a:	21 96       	adiw	r28, 0x01	; 1
    149c:	c8 30       	cpi	r28, 0x08	; 8
    149e:	d1 05       	cpc	r29, r1
    14a0:	c1 f7       	brne	.-16     	; 0x1492 <TWI_send_sensors+0x40>
    14a2:	8f 2d       	mov	r24, r15
    14a4:	3a df       	rcall	.-396    	; 0x131a <send_data_and_wait>
    14a6:	25 df       	rcall	.-438    	; 0x12f2 <stop_bus>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	08 95       	ret

000014b6 <decode_message_TwiFIFO>:
    14b6:	8f 92       	push	r8
    14b8:	9f 92       	push	r9
    14ba:	af 92       	push	r10
    14bc:	bf 92       	push	r11
    14be:	cf 92       	push	r12
    14c0:	df 92       	push	r13
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	ad b6       	in	r10, 0x3d	; 61
    14d4:	be b6       	in	r11, 0x3e	; 62
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	80 91 00 01 	lds	r24, 0x0100
    14de:	90 91 01 01 	lds	r25, 0x0101
    14e2:	0e 94 11 02 	call	0x422	; 0x422 <FifoRead>
    14e6:	81 11       	cpse	r24, r1
    14e8:	46 c0       	rjmp	.+140    	; 0x1576 <decode_message_TwiFIFO+0xc0>
    14ea:	c0 90 00 00 	lds	r12, 0x0000
    14ee:	d1 2c       	mov	r13, r1
    14f0:	96 01       	movw	r18, r12
    14f2:	21 50       	subi	r18, 0x01	; 1
    14f4:	31 09       	sbc	r19, r1
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	c1 14       	cp	r12, r1
    14fc:	d1 04       	cpc	r13, r1
    14fe:	11 f0       	breq	.+4      	; 0x1504 <decode_message_TwiFIFO+0x4e>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	2d b7       	in	r18, 0x3d	; 61
    150a:	3e b7       	in	r19, 0x3e	; 62
    150c:	28 1b       	sub	r18, r24
    150e:	39 0b       	sbc	r19, r25
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	3e bf       	out	0x3e, r19	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	2d bf       	out	0x3d, r18	; 61
    151a:	2f 5f       	subi	r18, 0xFF	; 255
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	82 2e       	mov	r8, r18
    1520:	93 2e       	mov	r9, r19
    1522:	1c 14       	cp	r1, r12
    1524:	1d 04       	cpc	r1, r13
    1526:	f4 f4       	brge	.+60     	; 0x1564 <decode_message_TwiFIFO+0xae>
    1528:	e2 2e       	mov	r14, r18
    152a:	f3 2e       	mov	r15, r19
    152c:	00 e0       	ldi	r16, 0x00	; 0
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	80 91 00 01 	lds	r24, 0x0100
    1538:	90 91 01 01 	lds	r25, 0x0101
    153c:	0e 94 11 02 	call	0x422	; 0x422 <FifoRead>
    1540:	88 23       	and	r24, r24
    1542:	31 f0       	breq	.+12     	; 0x1550 <decode_message_TwiFIFO+0x9a>
    1544:	8e e2       	ldi	r24, 0x2E	; 46
    1546:	91 e1       	ldi	r25, 0x11	; 17
    1548:	0e 94 c4 01 	call	0x388	; 0x388 <display_text>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <decode_message_TwiFIFO+0xc2>
    1550:	20 91 00 00 	lds	r18, 0x0000
    1554:	f7 01       	movw	r30, r14
    1556:	21 93       	st	Z+, r18
    1558:	7f 01       	movw	r14, r30
    155a:	0f 5f       	subi	r16, 0xFF	; 255
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	0c 15       	cp	r16, r12
    1560:	1d 05       	cpc	r17, r13
    1562:	34 f3       	brlt	.-52     	; 0x1530 <decode_message_TwiFIFO+0x7a>
    1564:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <display_clear>
    1568:	b6 01       	movw	r22, r12
    156a:	88 2d       	mov	r24, r8
    156c:	99 2d       	mov	r25, r9
    156e:	0e 94 ae 01 	call	0x35c	; 0x35c <display_text_fixed_length>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <decode_message_TwiFIFO+0xc2>
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	be be       	out	0x3e, r11	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	ad be       	out	0x3d, r10	; 61
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	08 95       	ret

0000159c <write_to_TwiFIFO>:
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	d8 2f       	mov	r29, r24
    15a6:	c9 2f       	mov	r28, r25
    15a8:	60 91 5e 13 	lds	r22, 0x135E
    15ac:	80 91 00 01 	lds	r24, 0x0100
    15b0:	90 91 01 01 	lds	r25, 0x0101
    15b4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <FifoWrite>
    15b8:	81 11       	cpse	r24, r1
    15ba:	05 c0       	rjmp	.+10     	; 0x15c6 <write_to_TwiFIFO+0x2a>
    15bc:	80 91 5e 13 	lds	r24, 0x135E
    15c0:	81 11       	cpse	r24, r1
    15c2:	07 c0       	rjmp	.+14     	; 0x15d2 <write_to_TwiFIFO+0x36>
    15c4:	23 c0       	rjmp	.+70     	; 0x160c <write_to_TwiFIFO+0x70>
    15c6:	8c e3       	ldi	r24, 0x3C	; 60
    15c8:	91 e1       	ldi	r25, 0x11	; 17
    15ca:	0e 94 c4 01 	call	0x388	; 0x388 <display_text>
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	1d c0       	rjmp	.+58     	; 0x160c <write_to_TwiFIFO+0x70>
    15d2:	0d 2f       	mov	r16, r29
    15d4:	1c 2f       	mov	r17, r28
    15d6:	c0 e0       	ldi	r28, 0x00	; 0
    15d8:	d0 e0       	ldi	r29, 0x00	; 0
    15da:	f8 01       	movw	r30, r16
    15dc:	61 91       	ld	r22, Z+
    15de:	8f 01       	movw	r16, r30
    15e0:	80 91 00 01 	lds	r24, 0x0100
    15e4:	90 91 01 01 	lds	r25, 0x0101
    15e8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <FifoWrite>
    15ec:	88 23       	and	r24, r24
    15ee:	31 f0       	breq	.+12     	; 0x15fc <write_to_TwiFIFO+0x60>
    15f0:	89 e4       	ldi	r24, 0x49	; 73
    15f2:	91 e1       	ldi	r25, 0x11	; 17
    15f4:	0e 94 c4 01 	call	0x388	; 0x388 <display_text>
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	08 c0       	rjmp	.+16     	; 0x160c <write_to_TwiFIFO+0x70>
    15fc:	21 96       	adiw	r28, 0x01	; 1
    15fe:	80 91 5e 13 	lds	r24, 0x135E
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	c8 17       	cp	r28, r24
    1606:	d9 07       	cpc	r29, r25
    1608:	44 f3       	brlt	.-48     	; 0x15da <write_to_TwiFIFO+0x3e>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	08 95       	ret

00001616 <__vector_26>:
    1616:	1f 92       	push	r1
    1618:	0f 92       	push	r0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	0f 92       	push	r0
    161e:	11 24       	eor	r1, r1
    1620:	0b b6       	in	r0, 0x3b	; 59
    1622:	0f 92       	push	r0
    1624:	2f 93       	push	r18
    1626:	3f 93       	push	r19
    1628:	4f 93       	push	r20
    162a:	5f 93       	push	r21
    162c:	6f 93       	push	r22
    162e:	7f 93       	push	r23
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	af 93       	push	r26
    1636:	bf 93       	push	r27
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
    1640:	80 91 55 13 	lds	r24, 0x1355
    1644:	80 34       	cpi	r24, 0x40	; 64
    1646:	09 f4       	brne	.+2      	; 0x164a <__vector_26+0x34>
    1648:	87 c0       	rjmp	.+270    	; 0x1758 <__vector_26+0x142>
    164a:	80 38       	cpi	r24, 0x80	; 128
    164c:	21 f0       	breq	.+8      	; 0x1656 <__vector_26+0x40>
    164e:	80 32       	cpi	r24, 0x20	; 32
    1650:	09 f0       	breq	.+2      	; 0x1654 <__vector_26+0x3e>
    1652:	7f c1       	rjmp	.+766    	; 0x1952 <__vector_26+0x33c>
    1654:	c9 c0       	rjmp	.+402    	; 0x17e8 <__vector_26+0x1d2>
    1656:	80 91 b9 00 	lds	r24, 0x00B9
    165a:	88 7f       	andi	r24, 0xF8	; 248
    165c:	80 36       	cpi	r24, 0x60	; 96
    165e:	29 f0       	breq	.+10     	; 0x166a <__vector_26+0x54>
    1660:	80 91 b9 00 	lds	r24, 0x00B9
    1664:	88 7f       	andi	r24, 0xF8	; 248
    1666:	88 36       	cpi	r24, 0x68	; 104
    1668:	21 f4       	brne	.+8      	; 0x1672 <__vector_26+0x5c>
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	80 93 58 13 	sts	0x1358, r24
    1670:	71 c0       	rjmp	.+226    	; 0x1754 <__vector_26+0x13e>
    1672:	80 91 b9 00 	lds	r24, 0x00B9
    1676:	88 7f       	andi	r24, 0xF8	; 248
    1678:	80 37       	cpi	r24, 0x70	; 112
    167a:	29 f0       	breq	.+10     	; 0x1686 <__vector_26+0x70>
    167c:	80 91 b9 00 	lds	r24, 0x00B9
    1680:	88 7f       	andi	r24, 0xF8	; 248
    1682:	88 37       	cpi	r24, 0x78	; 120
    1684:	39 f4       	brne	.+14     	; 0x1694 <__vector_26+0x7e>
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	90 93 61 13 	sts	0x1361, r25
    168e:	80 93 60 13 	sts	0x1360, r24
    1692:	60 c0       	rjmp	.+192    	; 0x1754 <__vector_26+0x13e>
    1694:	80 91 b9 00 	lds	r24, 0x00B9
    1698:	88 7f       	andi	r24, 0xF8	; 248
    169a:	80 38       	cpi	r24, 0x80	; 128
    169c:	b9 f5       	brne	.+110    	; 0x170c <__vector_26+0xf6>
    169e:	80 91 58 13 	lds	r24, 0x1358
    16a2:	88 23       	and	r24, r24
    16a4:	41 f0       	breq	.+16     	; 0x16b6 <__vector_26+0xa0>
    16a6:	30 de       	rcall	.-928    	; 0x1308 <get_data>
    16a8:	80 93 60 13 	sts	0x1360, r24
    16ac:	10 92 61 13 	sts	0x1361, r1
    16b0:	10 92 58 13 	sts	0x1358, r1
    16b4:	4f c0       	rjmp	.+158    	; 0x1754 <__vector_26+0x13e>
    16b6:	80 91 60 13 	lds	r24, 0x1360
    16ba:	90 91 61 13 	lds	r25, 0x1361
    16be:	85 30       	cpi	r24, 0x05	; 5
    16c0:	91 05       	cpc	r25, r1
    16c2:	71 f0       	breq	.+28     	; 0x16e0 <__vector_26+0xca>
    16c4:	24 f4       	brge	.+8      	; 0x16ce <__vector_26+0xb8>
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	09 f0       	breq	.+2      	; 0x16cc <__vector_26+0xb6>
    16ca:	44 c0       	rjmp	.+136    	; 0x1754 <__vector_26+0x13e>
    16cc:	07 c0       	rjmp	.+14     	; 0x16dc <__vector_26+0xc6>
    16ce:	86 30       	cpi	r24, 0x06	; 6
    16d0:	91 05       	cpc	r25, r1
    16d2:	51 f0       	breq	.+20     	; 0x16e8 <__vector_26+0xd2>
    16d4:	49 97       	sbiw	r24, 0x19	; 25
    16d6:	09 f0       	breq	.+2      	; 0x16da <__vector_26+0xc4>
    16d8:	3d c0       	rjmp	.+122    	; 0x1754 <__vector_26+0x13e>
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__vector_26+0xce>
    16dc:	6a de       	rcall	.-812    	; 0x13b2 <get_control_settings_from_bus>
    16de:	3a c0       	rjmp	.+116    	; 0x1754 <__vector_26+0x13e>
    16e0:	79 de       	rcall	.-782    	; 0x13d4 <get_autonom_settings_from_bus>
    16e2:	38 c0       	rjmp	.+112    	; 0x1754 <__vector_26+0x13e>
    16e4:	7b de       	rcall	.-778    	; 0x13dc <get_char_from_bus>
    16e6:	36 c0       	rjmp	.+108    	; 0x1754 <__vector_26+0x13e>
    16e8:	c0 91 56 13 	lds	r28, 0x1356
    16ec:	d0 91 57 13 	lds	r29, 0x1357
    16f0:	0b de       	rcall	.-1002   	; 0x1308 <get_data>
    16f2:	c9 5b       	subi	r28, 0xB9	; 185
    16f4:	dd 4e       	sbci	r29, 0xED	; 237
    16f6:	88 83       	st	Y, r24
    16f8:	80 91 56 13 	lds	r24, 0x1356
    16fc:	90 91 57 13 	lds	r25, 0x1357
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	90 93 57 13 	sts	0x1357, r25
    1706:	80 93 56 13 	sts	0x1356, r24
    170a:	24 c0       	rjmp	.+72     	; 0x1754 <__vector_26+0x13e>
    170c:	80 91 b9 00 	lds	r24, 0x00B9
    1710:	88 7f       	andi	r24, 0xF8	; 248
    1712:	80 39       	cpi	r24, 0x90	; 144
    1714:	11 f4       	brne	.+4      	; 0x171a <__vector_26+0x104>
    1716:	22 de       	rcall	.-956    	; 0x135c <get_sensor_from_bus>
    1718:	1d c0       	rjmp	.+58     	; 0x1754 <__vector_26+0x13e>
    171a:	80 91 b9 00 	lds	r24, 0x00B9
    171e:	88 7f       	andi	r24, 0xF8	; 248
    1720:	80 3a       	cpi	r24, 0xA0	; 160
    1722:	c1 f4       	brne	.+48     	; 0x1754 <__vector_26+0x13e>
    1724:	00 de       	rcall	.-1024   	; 0x1326 <stop_twi>
    1726:	80 91 60 13 	lds	r24, 0x1360
    172a:	90 91 61 13 	lds	r25, 0x1361
    172e:	85 30       	cpi	r24, 0x05	; 5
    1730:	91 05       	cpc	r25, r1
    1732:	49 f0       	breq	.+18     	; 0x1746 <__vector_26+0x130>
    1734:	89 31       	cpi	r24, 0x19	; 25
    1736:	91 05       	cpc	r25, r1
    1738:	51 f0       	breq	.+20     	; 0x174e <__vector_26+0x138>
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	59 f4       	brne	.+22     	; 0x1754 <__vector_26+0x13e>
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	80 93 44 12 	sts	0x1244, r24
    1744:	07 c0       	rjmp	.+14     	; 0x1754 <__vector_26+0x13e>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	80 93 43 12 	sts	0x1243, r24
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <__vector_26+0x13e>
    174e:	8f e4       	ldi	r24, 0x4F	; 79
    1750:	92 e1       	ldi	r25, 0x12	; 18
    1752:	24 df       	rcall	.-440    	; 0x159c <write_to_TwiFIFO>
    1754:	fd dd       	rcall	.-1030   	; 0x1350 <reset_TWI>
    1756:	fd c0       	rjmp	.+506    	; 0x1952 <__vector_26+0x33c>
    1758:	80 91 b9 00 	lds	r24, 0x00B9
    175c:	88 7f       	andi	r24, 0xF8	; 248
    175e:	80 36       	cpi	r24, 0x60	; 96
    1760:	29 f0       	breq	.+10     	; 0x176c <__vector_26+0x156>
    1762:	80 91 b9 00 	lds	r24, 0x00B9
    1766:	88 7f       	andi	r24, 0xF8	; 248
    1768:	88 36       	cpi	r24, 0x68	; 104
    176a:	21 f4       	brne	.+8      	; 0x1774 <__vector_26+0x15e>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 58 13 	sts	0x1358, r24
    1772:	38 c0       	rjmp	.+112    	; 0x17e4 <__vector_26+0x1ce>
    1774:	80 91 b9 00 	lds	r24, 0x00B9
    1778:	88 7f       	andi	r24, 0xF8	; 248
    177a:	80 38       	cpi	r24, 0x80	; 128
    177c:	e1 f4       	brne	.+56     	; 0x17b6 <__vector_26+0x1a0>
    177e:	80 91 58 13 	lds	r24, 0x1358
    1782:	88 23       	and	r24, r24
    1784:	41 f0       	breq	.+16     	; 0x1796 <__vector_26+0x180>
    1786:	c0 dd       	rcall	.-1152   	; 0x1308 <get_data>
    1788:	80 93 60 13 	sts	0x1360, r24
    178c:	10 92 61 13 	sts	0x1361, r1
    1790:	10 92 58 13 	sts	0x1358, r1
    1794:	27 c0       	rjmp	.+78     	; 0x17e4 <__vector_26+0x1ce>
    1796:	80 91 60 13 	lds	r24, 0x1360
    179a:	90 91 61 13 	lds	r25, 0x1361
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	91 05       	cpc	r25, r1
    17a2:	19 f0       	breq	.+6      	; 0x17aa <__vector_26+0x194>
    17a4:	49 97       	sbiw	r24, 0x19	; 25
    17a6:	f1 f4       	brne	.+60     	; 0x17e4 <__vector_26+0x1ce>
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <__vector_26+0x19c>
    17aa:	ae dd       	rcall	.-1188   	; 0x1308 <get_data>
    17ac:	80 93 5f 13 	sts	0x135F, r24
    17b0:	19 c0       	rjmp	.+50     	; 0x17e4 <__vector_26+0x1ce>
    17b2:	14 de       	rcall	.-984    	; 0x13dc <get_char_from_bus>
    17b4:	17 c0       	rjmp	.+46     	; 0x17e4 <__vector_26+0x1ce>
    17b6:	80 91 b9 00 	lds	r24, 0x00B9
    17ba:	88 7f       	andi	r24, 0xF8	; 248
    17bc:	80 3a       	cpi	r24, 0xA0	; 160
    17be:	91 f4       	brne	.+36     	; 0x17e4 <__vector_26+0x1ce>
    17c0:	b2 dd       	rcall	.-1180   	; 0x1326 <stop_twi>
    17c2:	80 91 60 13 	lds	r24, 0x1360
    17c6:	90 91 61 13 	lds	r25, 0x1361
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	91 05       	cpc	r25, r1
    17ce:	19 f0       	breq	.+6      	; 0x17d6 <__vector_26+0x1c0>
    17d0:	49 97       	sbiw	r24, 0x19	; 25
    17d2:	41 f4       	brne	.+16     	; 0x17e4 <__vector_26+0x1ce>
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <__vector_26+0x1c8>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 93 41 12 	sts	0x1241, r24
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <__vector_26+0x1ce>
    17de:	8f e4       	ldi	r24, 0x4F	; 79
    17e0:	92 e1       	ldi	r25, 0x12	; 18
    17e2:	dc de       	rcall	.-584    	; 0x159c <write_to_TwiFIFO>
    17e4:	b5 dd       	rcall	.-1174   	; 0x1350 <reset_TWI>
    17e6:	b5 c0       	rjmp	.+362    	; 0x1952 <__vector_26+0x33c>
    17e8:	80 91 b9 00 	lds	r24, 0x00B9
    17ec:	88 7f       	andi	r24, 0xF8	; 248
    17ee:	80 36       	cpi	r24, 0x60	; 96
    17f0:	29 f0       	breq	.+10     	; 0x17fc <__vector_26+0x1e6>
    17f2:	80 91 b9 00 	lds	r24, 0x00B9
    17f6:	88 7f       	andi	r24, 0xF8	; 248
    17f8:	88 36       	cpi	r24, 0x68	; 104
    17fa:	21 f4       	brne	.+8      	; 0x1804 <__vector_26+0x1ee>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	80 93 58 13 	sts	0x1358, r24
    1802:	a6 c0       	rjmp	.+332    	; 0x1950 <__vector_26+0x33a>
    1804:	80 91 b9 00 	lds	r24, 0x00B9
    1808:	88 7f       	andi	r24, 0xF8	; 248
    180a:	80 37       	cpi	r24, 0x70	; 112
    180c:	29 f0       	breq	.+10     	; 0x1818 <__vector_26+0x202>
    180e:	80 91 b9 00 	lds	r24, 0x00B9
    1812:	88 7f       	andi	r24, 0xF8	; 248
    1814:	88 37       	cpi	r24, 0x78	; 120
    1816:	39 f4       	brne	.+14     	; 0x1826 <__vector_26+0x210>
    1818:	8f ef       	ldi	r24, 0xFF	; 255
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	90 93 61 13 	sts	0x1361, r25
    1820:	80 93 60 13 	sts	0x1360, r24
    1824:	95 c0       	rjmp	.+298    	; 0x1950 <__vector_26+0x33a>
    1826:	80 91 b9 00 	lds	r24, 0x00B9
    182a:	88 7f       	andi	r24, 0xF8	; 248
    182c:	80 38       	cpi	r24, 0x80	; 128
    182e:	09 f0       	breq	.+2      	; 0x1832 <__vector_26+0x21c>
    1830:	62 c0       	rjmp	.+196    	; 0x18f6 <__vector_26+0x2e0>
    1832:	80 91 58 13 	lds	r24, 0x1358
    1836:	88 23       	and	r24, r24
    1838:	41 f0       	breq	.+16     	; 0x184a <__vector_26+0x234>
    183a:	66 dd       	rcall	.-1332   	; 0x1308 <get_data>
    183c:	80 93 60 13 	sts	0x1360, r24
    1840:	10 92 61 13 	sts	0x1361, r1
    1844:	10 92 58 13 	sts	0x1358, r1
    1848:	83 c0       	rjmp	.+262    	; 0x1950 <__vector_26+0x33a>
    184a:	80 91 60 13 	lds	r24, 0x1360
    184e:	90 91 61 13 	lds	r25, 0x1361
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 05       	cpc	r25, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <__vector_26+0x244>
    1858:	4a c0       	rjmp	.+148    	; 0x18ee <__vector_26+0x2d8>
    185a:	1c f4       	brge	.+6      	; 0x1862 <__vector_26+0x24c>
    185c:	89 2b       	or	r24, r25
    185e:	41 f0       	breq	.+16     	; 0x1870 <__vector_26+0x25a>
    1860:	77 c0       	rjmp	.+238    	; 0x1950 <__vector_26+0x33a>
    1862:	84 30       	cpi	r24, 0x04	; 4
    1864:	91 05       	cpc	r25, r1
    1866:	b1 f0       	breq	.+44     	; 0x1894 <__vector_26+0x27e>
    1868:	05 97       	sbiw	r24, 0x05	; 5
    186a:	09 f0       	breq	.+2      	; 0x186e <__vector_26+0x258>
    186c:	71 c0       	rjmp	.+226    	; 0x1950 <__vector_26+0x33a>
    186e:	41 c0       	rjmp	.+130    	; 0x18f2 <__vector_26+0x2dc>
    1870:	c0 91 59 13 	lds	r28, 0x1359
    1874:	d0 91 5a 13 	lds	r29, 0x135A
    1878:	47 dd       	rcall	.-1394   	; 0x1308 <get_data>
    187a:	c5 5b       	subi	r28, 0xB5	; 181
    187c:	dd 4e       	sbci	r29, 0xED	; 237
    187e:	88 83       	st	Y, r24
    1880:	80 91 59 13 	lds	r24, 0x1359
    1884:	90 91 5a 13 	lds	r25, 0x135A
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	90 93 5a 13 	sts	0x135A, r25
    188e:	80 93 59 13 	sts	0x1359, r24
    1892:	5e c0       	rjmp	.+188    	; 0x1950 <__vector_26+0x33a>
    1894:	39 dd       	rcall	.-1422   	; 0x1308 <get_data>
    1896:	81 11       	cpse	r24, r1
    1898:	0a c0       	rjmp	.+20     	; 0x18ae <__vector_26+0x298>
    189a:	80 91 5b 13 	lds	r24, 0x135B
    189e:	90 91 5c 13 	lds	r25, 0x135C
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	90 93 5c 13 	sts	0x135C, r25
    18a8:	80 93 5b 13 	sts	0x135B, r24
    18ac:	09 c0       	rjmp	.+18     	; 0x18c0 <__vector_26+0x2aa>
    18ae:	80 91 5b 13 	lds	r24, 0x135B
    18b2:	90 91 5c 13 	lds	r25, 0x135C
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	90 93 5c 13 	sts	0x135C, r25
    18bc:	80 93 5b 13 	sts	0x135B, r24
    18c0:	80 91 5b 13 	lds	r24, 0x135B
    18c4:	90 91 5c 13 	lds	r25, 0x135C
    18c8:	18 16       	cp	r1, r24
    18ca:	19 06       	cpc	r1, r25
    18cc:	3c f0       	brlt	.+14     	; 0x18dc <__vector_26+0x2c6>
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	90 93 5c 13 	sts	0x135C, r25
    18d6:	80 93 5b 13 	sts	0x135B, r24
    18da:	3a c0       	rjmp	.+116    	; 0x1950 <__vector_26+0x33a>
    18dc:	08 97       	sbiw	r24, 0x08	; 8
    18de:	c4 f1       	brlt	.+112    	; 0x1950 <__vector_26+0x33a>
    18e0:	87 e0       	ldi	r24, 0x07	; 7
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	90 93 5c 13 	sts	0x135C, r25
    18e8:	80 93 5b 13 	sts	0x135B, r24
    18ec:	31 c0       	rjmp	.+98     	; 0x1950 <__vector_26+0x33a>
    18ee:	61 dd       	rcall	.-1342   	; 0x13b2 <get_control_settings_from_bus>
    18f0:	2f c0       	rjmp	.+94     	; 0x1950 <__vector_26+0x33a>
    18f2:	70 dd       	rcall	.-1312   	; 0x13d4 <get_autonom_settings_from_bus>
    18f4:	2d c0       	rjmp	.+90     	; 0x1950 <__vector_26+0x33a>
    18f6:	80 91 b9 00 	lds	r24, 0x00B9
    18fa:	88 7f       	andi	r24, 0xF8	; 248
    18fc:	80 39       	cpi	r24, 0x90	; 144
    18fe:	11 f4       	brne	.+4      	; 0x1904 <__vector_26+0x2ee>
    1900:	2d dd       	rcall	.-1446   	; 0x135c <get_sensor_from_bus>
    1902:	26 c0       	rjmp	.+76     	; 0x1950 <__vector_26+0x33a>
    1904:	80 91 b9 00 	lds	r24, 0x00B9
    1908:	88 7f       	andi	r24, 0xF8	; 248
    190a:	80 3a       	cpi	r24, 0xA0	; 160
    190c:	09 f5       	brne	.+66     	; 0x1950 <__vector_26+0x33a>
    190e:	0b dd       	rcall	.-1514   	; 0x1326 <stop_twi>
    1910:	80 91 60 13 	lds	r24, 0x1360
    1914:	90 91 61 13 	lds	r25, 0x1361
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	91 05       	cpc	r25, r1
    191c:	91 f0       	breq	.+36     	; 0x1942 <__vector_26+0x32c>
    191e:	1c f4       	brge	.+6      	; 0x1926 <__vector_26+0x310>
    1920:	89 2b       	or	r24, r25
    1922:	39 f0       	breq	.+14     	; 0x1932 <__vector_26+0x31c>
    1924:	15 c0       	rjmp	.+42     	; 0x1950 <__vector_26+0x33a>
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	91 05       	cpc	r25, r1
    192a:	39 f0       	breq	.+14     	; 0x193a <__vector_26+0x324>
    192c:	05 97       	sbiw	r24, 0x05	; 5
    192e:	81 f4       	brne	.+32     	; 0x1950 <__vector_26+0x33a>
    1930:	0c c0       	rjmp	.+24     	; 0x194a <__vector_26+0x334>
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	80 93 45 12 	sts	0x1245, r24
    1938:	0b c0       	rjmp	.+22     	; 0x1950 <__vector_26+0x33a>
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	80 93 42 12 	sts	0x1242, r24
    1940:	07 c0       	rjmp	.+14     	; 0x1950 <__vector_26+0x33a>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 44 12 	sts	0x1244, r24
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <__vector_26+0x33a>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	80 93 43 12 	sts	0x1243, r24
    1950:	ff dc       	rcall	.-1538   	; 0x1350 <reset_TWI>
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	7f 91       	pop	r23
    1964:	6f 91       	pop	r22
    1966:	5f 91       	pop	r21
    1968:	4f 91       	pop	r20
    196a:	3f 91       	pop	r19
    196c:	2f 91       	pop	r18
    196e:	0f 90       	pop	r0
    1970:	0b be       	out	0x3b, r0	; 59
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <__subsf3>:
    197c:	50 58       	subi	r21, 0x80	; 128

0000197e <__addsf3>:
    197e:	bb 27       	eor	r27, r27
    1980:	aa 27       	eor	r26, r26
    1982:	0e d0       	rcall	.+28     	; 0x19a0 <__addsf3x>
    1984:	75 c1       	rjmp	.+746    	; 0x1c70 <__fp_round>
    1986:	66 d1       	rcall	.+716    	; 0x1c54 <__fp_pscA>
    1988:	30 f0       	brcs	.+12     	; 0x1996 <__addsf3+0x18>
    198a:	6b d1       	rcall	.+726    	; 0x1c62 <__fp_pscB>
    198c:	20 f0       	brcs	.+8      	; 0x1996 <__addsf3+0x18>
    198e:	31 f4       	brne	.+12     	; 0x199c <__addsf3+0x1e>
    1990:	9f 3f       	cpi	r25, 0xFF	; 255
    1992:	11 f4       	brne	.+4      	; 0x1998 <__addsf3+0x1a>
    1994:	1e f4       	brtc	.+6      	; 0x199c <__addsf3+0x1e>
    1996:	5b c1       	rjmp	.+694    	; 0x1c4e <__fp_nan>
    1998:	0e f4       	brtc	.+2      	; 0x199c <__addsf3+0x1e>
    199a:	e0 95       	com	r30
    199c:	e7 fb       	bst	r30, 7
    199e:	51 c1       	rjmp	.+674    	; 0x1c42 <__fp_inf>

000019a0 <__addsf3x>:
    19a0:	e9 2f       	mov	r30, r25
    19a2:	77 d1       	rcall	.+750    	; 0x1c92 <__fp_split3>
    19a4:	80 f3       	brcs	.-32     	; 0x1986 <__addsf3+0x8>
    19a6:	ba 17       	cp	r27, r26
    19a8:	62 07       	cpc	r22, r18
    19aa:	73 07       	cpc	r23, r19
    19ac:	84 07       	cpc	r24, r20
    19ae:	95 07       	cpc	r25, r21
    19b0:	18 f0       	brcs	.+6      	; 0x19b8 <__addsf3x+0x18>
    19b2:	71 f4       	brne	.+28     	; 0x19d0 <__addsf3x+0x30>
    19b4:	9e f5       	brtc	.+102    	; 0x1a1c <__addsf3x+0x7c>
    19b6:	8f c1       	rjmp	.+798    	; 0x1cd6 <__fp_zero>
    19b8:	0e f4       	brtc	.+2      	; 0x19bc <__addsf3x+0x1c>
    19ba:	e0 95       	com	r30
    19bc:	0b 2e       	mov	r0, r27
    19be:	ba 2f       	mov	r27, r26
    19c0:	a0 2d       	mov	r26, r0
    19c2:	0b 01       	movw	r0, r22
    19c4:	b9 01       	movw	r22, r18
    19c6:	90 01       	movw	r18, r0
    19c8:	0c 01       	movw	r0, r24
    19ca:	ca 01       	movw	r24, r20
    19cc:	a0 01       	movw	r20, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	ff 27       	eor	r31, r31
    19d2:	59 1b       	sub	r21, r25
    19d4:	99 f0       	breq	.+38     	; 0x19fc <__addsf3x+0x5c>
    19d6:	59 3f       	cpi	r21, 0xF9	; 249
    19d8:	50 f4       	brcc	.+20     	; 0x19ee <__addsf3x+0x4e>
    19da:	50 3e       	cpi	r21, 0xE0	; 224
    19dc:	68 f1       	brcs	.+90     	; 0x1a38 <__addsf3x+0x98>
    19de:	1a 16       	cp	r1, r26
    19e0:	f0 40       	sbci	r31, 0x00	; 0
    19e2:	a2 2f       	mov	r26, r18
    19e4:	23 2f       	mov	r18, r19
    19e6:	34 2f       	mov	r19, r20
    19e8:	44 27       	eor	r20, r20
    19ea:	58 5f       	subi	r21, 0xF8	; 248
    19ec:	f3 cf       	rjmp	.-26     	; 0x19d4 <__addsf3x+0x34>
    19ee:	46 95       	lsr	r20
    19f0:	37 95       	ror	r19
    19f2:	27 95       	ror	r18
    19f4:	a7 95       	ror	r26
    19f6:	f0 40       	sbci	r31, 0x00	; 0
    19f8:	53 95       	inc	r21
    19fa:	c9 f7       	brne	.-14     	; 0x19ee <__addsf3x+0x4e>
    19fc:	7e f4       	brtc	.+30     	; 0x1a1c <__addsf3x+0x7c>
    19fe:	1f 16       	cp	r1, r31
    1a00:	ba 0b       	sbc	r27, r26
    1a02:	62 0b       	sbc	r22, r18
    1a04:	73 0b       	sbc	r23, r19
    1a06:	84 0b       	sbc	r24, r20
    1a08:	ba f0       	brmi	.+46     	; 0x1a38 <__addsf3x+0x98>
    1a0a:	91 50       	subi	r25, 0x01	; 1
    1a0c:	a1 f0       	breq	.+40     	; 0x1a36 <__addsf3x+0x96>
    1a0e:	ff 0f       	add	r31, r31
    1a10:	bb 1f       	adc	r27, r27
    1a12:	66 1f       	adc	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	c2 f7       	brpl	.-16     	; 0x1a0a <__addsf3x+0x6a>
    1a1a:	0e c0       	rjmp	.+28     	; 0x1a38 <__addsf3x+0x98>
    1a1c:	ba 0f       	add	r27, r26
    1a1e:	62 1f       	adc	r22, r18
    1a20:	73 1f       	adc	r23, r19
    1a22:	84 1f       	adc	r24, r20
    1a24:	48 f4       	brcc	.+18     	; 0x1a38 <__addsf3x+0x98>
    1a26:	87 95       	ror	r24
    1a28:	77 95       	ror	r23
    1a2a:	67 95       	ror	r22
    1a2c:	b7 95       	ror	r27
    1a2e:	f7 95       	ror	r31
    1a30:	9e 3f       	cpi	r25, 0xFE	; 254
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <__addsf3x+0x96>
    1a34:	b3 cf       	rjmp	.-154    	; 0x199c <__addsf3+0x1e>
    1a36:	93 95       	inc	r25
    1a38:	88 0f       	add	r24, r24
    1a3a:	08 f0       	brcs	.+2      	; 0x1a3e <__addsf3x+0x9e>
    1a3c:	99 27       	eor	r25, r25
    1a3e:	ee 0f       	add	r30, r30
    1a40:	97 95       	ror	r25
    1a42:	87 95       	ror	r24
    1a44:	08 95       	ret

00001a46 <__cmpsf2>:
    1a46:	d9 d0       	rcall	.+434    	; 0x1bfa <__fp_cmp>
    1a48:	08 f4       	brcc	.+2      	; 0x1a4c <__cmpsf2+0x6>
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	08 95       	ret

00001a4e <__divsf3>:
    1a4e:	0c d0       	rcall	.+24     	; 0x1a68 <__divsf3x>
    1a50:	0f c1       	rjmp	.+542    	; 0x1c70 <__fp_round>
    1a52:	07 d1       	rcall	.+526    	; 0x1c62 <__fp_pscB>
    1a54:	40 f0       	brcs	.+16     	; 0x1a66 <__divsf3+0x18>
    1a56:	fe d0       	rcall	.+508    	; 0x1c54 <__fp_pscA>
    1a58:	30 f0       	brcs	.+12     	; 0x1a66 <__divsf3+0x18>
    1a5a:	21 f4       	brne	.+8      	; 0x1a64 <__divsf3+0x16>
    1a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <__divsf3+0x18>
    1a60:	f0 c0       	rjmp	.+480    	; 0x1c42 <__fp_inf>
    1a62:	51 11       	cpse	r21, r1
    1a64:	39 c1       	rjmp	.+626    	; 0x1cd8 <__fp_szero>
    1a66:	f3 c0       	rjmp	.+486    	; 0x1c4e <__fp_nan>

00001a68 <__divsf3x>:
    1a68:	14 d1       	rcall	.+552    	; 0x1c92 <__fp_split3>
    1a6a:	98 f3       	brcs	.-26     	; 0x1a52 <__divsf3+0x4>

00001a6c <__divsf3_pse>:
    1a6c:	99 23       	and	r25, r25
    1a6e:	c9 f3       	breq	.-14     	; 0x1a62 <__divsf3+0x14>
    1a70:	55 23       	and	r21, r21
    1a72:	b1 f3       	breq	.-20     	; 0x1a60 <__divsf3+0x12>
    1a74:	95 1b       	sub	r25, r21
    1a76:	55 0b       	sbc	r21, r21
    1a78:	bb 27       	eor	r27, r27
    1a7a:	aa 27       	eor	r26, r26
    1a7c:	62 17       	cp	r22, r18
    1a7e:	73 07       	cpc	r23, r19
    1a80:	84 07       	cpc	r24, r20
    1a82:	38 f0       	brcs	.+14     	; 0x1a92 <__divsf3_pse+0x26>
    1a84:	9f 5f       	subi	r25, 0xFF	; 255
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	22 0f       	add	r18, r18
    1a8a:	33 1f       	adc	r19, r19
    1a8c:	44 1f       	adc	r20, r20
    1a8e:	aa 1f       	adc	r26, r26
    1a90:	a9 f3       	breq	.-22     	; 0x1a7c <__divsf3_pse+0x10>
    1a92:	33 d0       	rcall	.+102    	; 0x1afa <__divsf3_pse+0x8e>
    1a94:	0e 2e       	mov	r0, r30
    1a96:	3a f0       	brmi	.+14     	; 0x1aa6 <__divsf3_pse+0x3a>
    1a98:	e0 e8       	ldi	r30, 0x80	; 128
    1a9a:	30 d0       	rcall	.+96     	; 0x1afc <__divsf3_pse+0x90>
    1a9c:	91 50       	subi	r25, 0x01	; 1
    1a9e:	50 40       	sbci	r21, 0x00	; 0
    1aa0:	e6 95       	lsr	r30
    1aa2:	00 1c       	adc	r0, r0
    1aa4:	ca f7       	brpl	.-14     	; 0x1a98 <__divsf3_pse+0x2c>
    1aa6:	29 d0       	rcall	.+82     	; 0x1afa <__divsf3_pse+0x8e>
    1aa8:	fe 2f       	mov	r31, r30
    1aaa:	27 d0       	rcall	.+78     	; 0x1afa <__divsf3_pse+0x8e>
    1aac:	66 0f       	add	r22, r22
    1aae:	77 1f       	adc	r23, r23
    1ab0:	88 1f       	adc	r24, r24
    1ab2:	bb 1f       	adc	r27, r27
    1ab4:	26 17       	cp	r18, r22
    1ab6:	37 07       	cpc	r19, r23
    1ab8:	48 07       	cpc	r20, r24
    1aba:	ab 07       	cpc	r26, r27
    1abc:	b0 e8       	ldi	r27, 0x80	; 128
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <__divsf3_pse+0x56>
    1ac0:	bb 0b       	sbc	r27, r27
    1ac2:	80 2d       	mov	r24, r0
    1ac4:	bf 01       	movw	r22, r30
    1ac6:	ff 27       	eor	r31, r31
    1ac8:	93 58       	subi	r25, 0x83	; 131
    1aca:	5f 4f       	sbci	r21, 0xFF	; 255
    1acc:	2a f0       	brmi	.+10     	; 0x1ad8 <__divsf3_pse+0x6c>
    1ace:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad0:	51 05       	cpc	r21, r1
    1ad2:	68 f0       	brcs	.+26     	; 0x1aee <__divsf3_pse+0x82>
    1ad4:	b6 c0       	rjmp	.+364    	; 0x1c42 <__fp_inf>
    1ad6:	00 c1       	rjmp	.+512    	; 0x1cd8 <__fp_szero>
    1ad8:	5f 3f       	cpi	r21, 0xFF	; 255
    1ada:	ec f3       	brlt	.-6      	; 0x1ad6 <__divsf3_pse+0x6a>
    1adc:	98 3e       	cpi	r25, 0xE8	; 232
    1ade:	dc f3       	brlt	.-10     	; 0x1ad6 <__divsf3_pse+0x6a>
    1ae0:	86 95       	lsr	r24
    1ae2:	77 95       	ror	r23
    1ae4:	67 95       	ror	r22
    1ae6:	b7 95       	ror	r27
    1ae8:	f7 95       	ror	r31
    1aea:	9f 5f       	subi	r25, 0xFF	; 255
    1aec:	c9 f7       	brne	.-14     	; 0x1ae0 <__divsf3_pse+0x74>
    1aee:	88 0f       	add	r24, r24
    1af0:	91 1d       	adc	r25, r1
    1af2:	96 95       	lsr	r25
    1af4:	87 95       	ror	r24
    1af6:	97 f9       	bld	r25, 7
    1af8:	08 95       	ret
    1afa:	e1 e0       	ldi	r30, 0x01	; 1
    1afc:	66 0f       	add	r22, r22
    1afe:	77 1f       	adc	r23, r23
    1b00:	88 1f       	adc	r24, r24
    1b02:	bb 1f       	adc	r27, r27
    1b04:	62 17       	cp	r22, r18
    1b06:	73 07       	cpc	r23, r19
    1b08:	84 07       	cpc	r24, r20
    1b0a:	ba 07       	cpc	r27, r26
    1b0c:	20 f0       	brcs	.+8      	; 0x1b16 <__divsf3_pse+0xaa>
    1b0e:	62 1b       	sub	r22, r18
    1b10:	73 0b       	sbc	r23, r19
    1b12:	84 0b       	sbc	r24, r20
    1b14:	ba 0b       	sbc	r27, r26
    1b16:	ee 1f       	adc	r30, r30
    1b18:	88 f7       	brcc	.-30     	; 0x1afc <__divsf3_pse+0x90>
    1b1a:	e0 95       	com	r30
    1b1c:	08 95       	ret

00001b1e <__fixsfsi>:
    1b1e:	04 d0       	rcall	.+8      	; 0x1b28 <__fixunssfsi>
    1b20:	68 94       	set
    1b22:	b1 11       	cpse	r27, r1
    1b24:	d9 c0       	rjmp	.+434    	; 0x1cd8 <__fp_szero>
    1b26:	08 95       	ret

00001b28 <__fixunssfsi>:
    1b28:	bc d0       	rcall	.+376    	; 0x1ca2 <__fp_splitA>
    1b2a:	88 f0       	brcs	.+34     	; 0x1b4e <__fixunssfsi+0x26>
    1b2c:	9f 57       	subi	r25, 0x7F	; 127
    1b2e:	90 f0       	brcs	.+36     	; 0x1b54 <__fixunssfsi+0x2c>
    1b30:	b9 2f       	mov	r27, r25
    1b32:	99 27       	eor	r25, r25
    1b34:	b7 51       	subi	r27, 0x17	; 23
    1b36:	a0 f0       	brcs	.+40     	; 0x1b60 <__fixunssfsi+0x38>
    1b38:	d1 f0       	breq	.+52     	; 0x1b6e <__fixunssfsi+0x46>
    1b3a:	66 0f       	add	r22, r22
    1b3c:	77 1f       	adc	r23, r23
    1b3e:	88 1f       	adc	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	1a f0       	brmi	.+6      	; 0x1b4a <__fixunssfsi+0x22>
    1b44:	ba 95       	dec	r27
    1b46:	c9 f7       	brne	.-14     	; 0x1b3a <__fixunssfsi+0x12>
    1b48:	12 c0       	rjmp	.+36     	; 0x1b6e <__fixunssfsi+0x46>
    1b4a:	b1 30       	cpi	r27, 0x01	; 1
    1b4c:	81 f0       	breq	.+32     	; 0x1b6e <__fixunssfsi+0x46>
    1b4e:	c3 d0       	rcall	.+390    	; 0x1cd6 <__fp_zero>
    1b50:	b1 e0       	ldi	r27, 0x01	; 1
    1b52:	08 95       	ret
    1b54:	c0 c0       	rjmp	.+384    	; 0x1cd6 <__fp_zero>
    1b56:	67 2f       	mov	r22, r23
    1b58:	78 2f       	mov	r23, r24
    1b5a:	88 27       	eor	r24, r24
    1b5c:	b8 5f       	subi	r27, 0xF8	; 248
    1b5e:	39 f0       	breq	.+14     	; 0x1b6e <__fixunssfsi+0x46>
    1b60:	b9 3f       	cpi	r27, 0xF9	; 249
    1b62:	cc f3       	brlt	.-14     	; 0x1b56 <__fixunssfsi+0x2e>
    1b64:	86 95       	lsr	r24
    1b66:	77 95       	ror	r23
    1b68:	67 95       	ror	r22
    1b6a:	b3 95       	inc	r27
    1b6c:	d9 f7       	brne	.-10     	; 0x1b64 <__fixunssfsi+0x3c>
    1b6e:	3e f4       	brtc	.+14     	; 0x1b7e <__fixunssfsi+0x56>
    1b70:	90 95       	com	r25
    1b72:	80 95       	com	r24
    1b74:	70 95       	com	r23
    1b76:	61 95       	neg	r22
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	08 95       	ret

00001b80 <__floatunsisf>:
    1b80:	e8 94       	clt
    1b82:	09 c0       	rjmp	.+18     	; 0x1b96 <__floatsisf+0x12>

00001b84 <__floatsisf>:
    1b84:	97 fb       	bst	r25, 7
    1b86:	3e f4       	brtc	.+14     	; 0x1b96 <__floatsisf+0x12>
    1b88:	90 95       	com	r25
    1b8a:	80 95       	com	r24
    1b8c:	70 95       	com	r23
    1b8e:	61 95       	neg	r22
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
    1b92:	8f 4f       	sbci	r24, 0xFF	; 255
    1b94:	9f 4f       	sbci	r25, 0xFF	; 255
    1b96:	99 23       	and	r25, r25
    1b98:	a9 f0       	breq	.+42     	; 0x1bc4 <__floatsisf+0x40>
    1b9a:	f9 2f       	mov	r31, r25
    1b9c:	96 e9       	ldi	r25, 0x96	; 150
    1b9e:	bb 27       	eor	r27, r27
    1ba0:	93 95       	inc	r25
    1ba2:	f6 95       	lsr	r31
    1ba4:	87 95       	ror	r24
    1ba6:	77 95       	ror	r23
    1ba8:	67 95       	ror	r22
    1baa:	b7 95       	ror	r27
    1bac:	f1 11       	cpse	r31, r1
    1bae:	f8 cf       	rjmp	.-16     	; 0x1ba0 <__floatsisf+0x1c>
    1bb0:	fa f4       	brpl	.+62     	; 0x1bf0 <__floatsisf+0x6c>
    1bb2:	bb 0f       	add	r27, r27
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <__floatsisf+0x36>
    1bb6:	60 ff       	sbrs	r22, 0
    1bb8:	1b c0       	rjmp	.+54     	; 0x1bf0 <__floatsisf+0x6c>
    1bba:	6f 5f       	subi	r22, 0xFF	; 255
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	16 c0       	rjmp	.+44     	; 0x1bf0 <__floatsisf+0x6c>
    1bc4:	88 23       	and	r24, r24
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <__floatsisf+0x48>
    1bc8:	96 e9       	ldi	r25, 0x96	; 150
    1bca:	11 c0       	rjmp	.+34     	; 0x1bee <__floatsisf+0x6a>
    1bcc:	77 23       	and	r23, r23
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <__floatsisf+0x54>
    1bd0:	9e e8       	ldi	r25, 0x8E	; 142
    1bd2:	87 2f       	mov	r24, r23
    1bd4:	76 2f       	mov	r23, r22
    1bd6:	05 c0       	rjmp	.+10     	; 0x1be2 <__floatsisf+0x5e>
    1bd8:	66 23       	and	r22, r22
    1bda:	71 f0       	breq	.+28     	; 0x1bf8 <__floatsisf+0x74>
    1bdc:	96 e8       	ldi	r25, 0x86	; 134
    1bde:	86 2f       	mov	r24, r22
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	2a f0       	brmi	.+10     	; 0x1bf0 <__floatsisf+0x6c>
    1be6:	9a 95       	dec	r25
    1be8:	66 0f       	add	r22, r22
    1bea:	77 1f       	adc	r23, r23
    1bec:	88 1f       	adc	r24, r24
    1bee:	da f7       	brpl	.-10     	; 0x1be6 <__floatsisf+0x62>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	96 95       	lsr	r25
    1bf4:	87 95       	ror	r24
    1bf6:	97 f9       	bld	r25, 7
    1bf8:	08 95       	ret

00001bfa <__fp_cmp>:
    1bfa:	99 0f       	add	r25, r25
    1bfc:	00 08       	sbc	r0, r0
    1bfe:	55 0f       	add	r21, r21
    1c00:	aa 0b       	sbc	r26, r26
    1c02:	e0 e8       	ldi	r30, 0x80	; 128
    1c04:	fe ef       	ldi	r31, 0xFE	; 254
    1c06:	16 16       	cp	r1, r22
    1c08:	17 06       	cpc	r1, r23
    1c0a:	e8 07       	cpc	r30, r24
    1c0c:	f9 07       	cpc	r31, r25
    1c0e:	c0 f0       	brcs	.+48     	; 0x1c40 <__fp_cmp+0x46>
    1c10:	12 16       	cp	r1, r18
    1c12:	13 06       	cpc	r1, r19
    1c14:	e4 07       	cpc	r30, r20
    1c16:	f5 07       	cpc	r31, r21
    1c18:	98 f0       	brcs	.+38     	; 0x1c40 <__fp_cmp+0x46>
    1c1a:	62 1b       	sub	r22, r18
    1c1c:	73 0b       	sbc	r23, r19
    1c1e:	84 0b       	sbc	r24, r20
    1c20:	95 0b       	sbc	r25, r21
    1c22:	39 f4       	brne	.+14     	; 0x1c32 <__fp_cmp+0x38>
    1c24:	0a 26       	eor	r0, r26
    1c26:	61 f0       	breq	.+24     	; 0x1c40 <__fp_cmp+0x46>
    1c28:	23 2b       	or	r18, r19
    1c2a:	24 2b       	or	r18, r20
    1c2c:	25 2b       	or	r18, r21
    1c2e:	21 f4       	brne	.+8      	; 0x1c38 <__fp_cmp+0x3e>
    1c30:	08 95       	ret
    1c32:	0a 26       	eor	r0, r26
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <__fp_cmp+0x3e>
    1c36:	a1 40       	sbci	r26, 0x01	; 1
    1c38:	a6 95       	lsr	r26
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	81 1d       	adc	r24, r1
    1c3e:	81 1d       	adc	r24, r1
    1c40:	08 95       	ret

00001c42 <__fp_inf>:
    1c42:	97 f9       	bld	r25, 7
    1c44:	9f 67       	ori	r25, 0x7F	; 127
    1c46:	80 e8       	ldi	r24, 0x80	; 128
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	08 95       	ret

00001c4e <__fp_nan>:
    1c4e:	9f ef       	ldi	r25, 0xFF	; 255
    1c50:	80 ec       	ldi	r24, 0xC0	; 192
    1c52:	08 95       	ret

00001c54 <__fp_pscA>:
    1c54:	00 24       	eor	r0, r0
    1c56:	0a 94       	dec	r0
    1c58:	16 16       	cp	r1, r22
    1c5a:	17 06       	cpc	r1, r23
    1c5c:	18 06       	cpc	r1, r24
    1c5e:	09 06       	cpc	r0, r25
    1c60:	08 95       	ret

00001c62 <__fp_pscB>:
    1c62:	00 24       	eor	r0, r0
    1c64:	0a 94       	dec	r0
    1c66:	12 16       	cp	r1, r18
    1c68:	13 06       	cpc	r1, r19
    1c6a:	14 06       	cpc	r1, r20
    1c6c:	05 06       	cpc	r0, r21
    1c6e:	08 95       	ret

00001c70 <__fp_round>:
    1c70:	09 2e       	mov	r0, r25
    1c72:	03 94       	inc	r0
    1c74:	00 0c       	add	r0, r0
    1c76:	11 f4       	brne	.+4      	; 0x1c7c <__fp_round+0xc>
    1c78:	88 23       	and	r24, r24
    1c7a:	52 f0       	brmi	.+20     	; 0x1c90 <__fp_round+0x20>
    1c7c:	bb 0f       	add	r27, r27
    1c7e:	40 f4       	brcc	.+16     	; 0x1c90 <__fp_round+0x20>
    1c80:	bf 2b       	or	r27, r31
    1c82:	11 f4       	brne	.+4      	; 0x1c88 <__fp_round+0x18>
    1c84:	60 ff       	sbrs	r22, 0
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <__fp_round+0x20>
    1c88:	6f 5f       	subi	r22, 0xFF	; 255
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	08 95       	ret

00001c92 <__fp_split3>:
    1c92:	57 fd       	sbrc	r21, 7
    1c94:	90 58       	subi	r25, 0x80	; 128
    1c96:	44 0f       	add	r20, r20
    1c98:	55 1f       	adc	r21, r21
    1c9a:	59 f0       	breq	.+22     	; 0x1cb2 <__fp_splitA+0x10>
    1c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c9e:	71 f0       	breq	.+28     	; 0x1cbc <__fp_splitA+0x1a>
    1ca0:	47 95       	ror	r20

00001ca2 <__fp_splitA>:
    1ca2:	88 0f       	add	r24, r24
    1ca4:	97 fb       	bst	r25, 7
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	61 f0       	breq	.+24     	; 0x1cc2 <__fp_splitA+0x20>
    1caa:	9f 3f       	cpi	r25, 0xFF	; 255
    1cac:	79 f0       	breq	.+30     	; 0x1ccc <__fp_splitA+0x2a>
    1cae:	87 95       	ror	r24
    1cb0:	08 95       	ret
    1cb2:	12 16       	cp	r1, r18
    1cb4:	13 06       	cpc	r1, r19
    1cb6:	14 06       	cpc	r1, r20
    1cb8:	55 1f       	adc	r21, r21
    1cba:	f2 cf       	rjmp	.-28     	; 0x1ca0 <__fp_split3+0xe>
    1cbc:	46 95       	lsr	r20
    1cbe:	f1 df       	rcall	.-30     	; 0x1ca2 <__fp_splitA>
    1cc0:	08 c0       	rjmp	.+16     	; 0x1cd2 <__fp_splitA+0x30>
    1cc2:	16 16       	cp	r1, r22
    1cc4:	17 06       	cpc	r1, r23
    1cc6:	18 06       	cpc	r1, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	f1 cf       	rjmp	.-30     	; 0x1cae <__fp_splitA+0xc>
    1ccc:	86 95       	lsr	r24
    1cce:	71 05       	cpc	r23, r1
    1cd0:	61 05       	cpc	r22, r1
    1cd2:	08 94       	sec
    1cd4:	08 95       	ret

00001cd6 <__fp_zero>:
    1cd6:	e8 94       	clt

00001cd8 <__fp_szero>:
    1cd8:	bb 27       	eor	r27, r27
    1cda:	66 27       	eor	r22, r22
    1cdc:	77 27       	eor	r23, r23
    1cde:	cb 01       	movw	r24, r22
    1ce0:	97 f9       	bld	r25, 7
    1ce2:	08 95       	ret

00001ce4 <__gesf2>:
    1ce4:	8a df       	rcall	.-236    	; 0x1bfa <__fp_cmp>
    1ce6:	08 f4       	brcc	.+2      	; 0x1cea <__gesf2+0x6>
    1ce8:	8f ef       	ldi	r24, 0xFF	; 255
    1cea:	08 95       	ret

00001cec <__mulsf3>:
    1cec:	0b d0       	rcall	.+22     	; 0x1d04 <__mulsf3x>
    1cee:	c0 cf       	rjmp	.-128    	; 0x1c70 <__fp_round>
    1cf0:	b1 df       	rcall	.-158    	; 0x1c54 <__fp_pscA>
    1cf2:	28 f0       	brcs	.+10     	; 0x1cfe <__mulsf3+0x12>
    1cf4:	b6 df       	rcall	.-148    	; 0x1c62 <__fp_pscB>
    1cf6:	18 f0       	brcs	.+6      	; 0x1cfe <__mulsf3+0x12>
    1cf8:	95 23       	and	r25, r21
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <__mulsf3+0x12>
    1cfc:	a2 cf       	rjmp	.-188    	; 0x1c42 <__fp_inf>
    1cfe:	a7 cf       	rjmp	.-178    	; 0x1c4e <__fp_nan>
    1d00:	11 24       	eor	r1, r1
    1d02:	ea cf       	rjmp	.-44     	; 0x1cd8 <__fp_szero>

00001d04 <__mulsf3x>:
    1d04:	c6 df       	rcall	.-116    	; 0x1c92 <__fp_split3>
    1d06:	a0 f3       	brcs	.-24     	; 0x1cf0 <__mulsf3+0x4>

00001d08 <__mulsf3_pse>:
    1d08:	95 9f       	mul	r25, r21
    1d0a:	d1 f3       	breq	.-12     	; 0x1d00 <__mulsf3+0x14>
    1d0c:	95 0f       	add	r25, r21
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	55 1f       	adc	r21, r21
    1d12:	62 9f       	mul	r22, r18
    1d14:	f0 01       	movw	r30, r0
    1d16:	72 9f       	mul	r23, r18
    1d18:	bb 27       	eor	r27, r27
    1d1a:	f0 0d       	add	r31, r0
    1d1c:	b1 1d       	adc	r27, r1
    1d1e:	63 9f       	mul	r22, r19
    1d20:	aa 27       	eor	r26, r26
    1d22:	f0 0d       	add	r31, r0
    1d24:	b1 1d       	adc	r27, r1
    1d26:	aa 1f       	adc	r26, r26
    1d28:	64 9f       	mul	r22, r20
    1d2a:	66 27       	eor	r22, r22
    1d2c:	b0 0d       	add	r27, r0
    1d2e:	a1 1d       	adc	r26, r1
    1d30:	66 1f       	adc	r22, r22
    1d32:	82 9f       	mul	r24, r18
    1d34:	22 27       	eor	r18, r18
    1d36:	b0 0d       	add	r27, r0
    1d38:	a1 1d       	adc	r26, r1
    1d3a:	62 1f       	adc	r22, r18
    1d3c:	73 9f       	mul	r23, r19
    1d3e:	b0 0d       	add	r27, r0
    1d40:	a1 1d       	adc	r26, r1
    1d42:	62 1f       	adc	r22, r18
    1d44:	83 9f       	mul	r24, r19
    1d46:	a0 0d       	add	r26, r0
    1d48:	61 1d       	adc	r22, r1
    1d4a:	22 1f       	adc	r18, r18
    1d4c:	74 9f       	mul	r23, r20
    1d4e:	33 27       	eor	r19, r19
    1d50:	a0 0d       	add	r26, r0
    1d52:	61 1d       	adc	r22, r1
    1d54:	23 1f       	adc	r18, r19
    1d56:	84 9f       	mul	r24, r20
    1d58:	60 0d       	add	r22, r0
    1d5a:	21 1d       	adc	r18, r1
    1d5c:	82 2f       	mov	r24, r18
    1d5e:	76 2f       	mov	r23, r22
    1d60:	6a 2f       	mov	r22, r26
    1d62:	11 24       	eor	r1, r1
    1d64:	9f 57       	subi	r25, 0x7F	; 127
    1d66:	50 40       	sbci	r21, 0x00	; 0
    1d68:	8a f0       	brmi	.+34     	; 0x1d8c <__mulsf3_pse+0x84>
    1d6a:	e1 f0       	breq	.+56     	; 0x1da4 <__mulsf3_pse+0x9c>
    1d6c:	88 23       	and	r24, r24
    1d6e:	4a f0       	brmi	.+18     	; 0x1d82 <__mulsf3_pse+0x7a>
    1d70:	ee 0f       	add	r30, r30
    1d72:	ff 1f       	adc	r31, r31
    1d74:	bb 1f       	adc	r27, r27
    1d76:	66 1f       	adc	r22, r22
    1d78:	77 1f       	adc	r23, r23
    1d7a:	88 1f       	adc	r24, r24
    1d7c:	91 50       	subi	r25, 0x01	; 1
    1d7e:	50 40       	sbci	r21, 0x00	; 0
    1d80:	a9 f7       	brne	.-22     	; 0x1d6c <__mulsf3_pse+0x64>
    1d82:	9e 3f       	cpi	r25, 0xFE	; 254
    1d84:	51 05       	cpc	r21, r1
    1d86:	70 f0       	brcs	.+28     	; 0x1da4 <__mulsf3_pse+0x9c>
    1d88:	5c cf       	rjmp	.-328    	; 0x1c42 <__fp_inf>
    1d8a:	a6 cf       	rjmp	.-180    	; 0x1cd8 <__fp_szero>
    1d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8e:	ec f3       	brlt	.-6      	; 0x1d8a <__mulsf3_pse+0x82>
    1d90:	98 3e       	cpi	r25, 0xE8	; 232
    1d92:	dc f3       	brlt	.-10     	; 0x1d8a <__mulsf3_pse+0x82>
    1d94:	86 95       	lsr	r24
    1d96:	77 95       	ror	r23
    1d98:	67 95       	ror	r22
    1d9a:	b7 95       	ror	r27
    1d9c:	f7 95       	ror	r31
    1d9e:	e7 95       	ror	r30
    1da0:	9f 5f       	subi	r25, 0xFF	; 255
    1da2:	c1 f7       	brne	.-16     	; 0x1d94 <__mulsf3_pse+0x8c>
    1da4:	fe 2b       	or	r31, r30
    1da6:	88 0f       	add	r24, r24
    1da8:	91 1d       	adc	r25, r1
    1daa:	96 95       	lsr	r25
    1dac:	87 95       	ror	r24
    1dae:	97 f9       	bld	r25, 7
    1db0:	08 95       	ret

00001db2 <__divmodhi4>:
    1db2:	97 fb       	bst	r25, 7
    1db4:	07 2e       	mov	r0, r23
    1db6:	16 f4       	brtc	.+4      	; 0x1dbc <__divmodhi4+0xa>
    1db8:	00 94       	com	r0
    1dba:	06 d0       	rcall	.+12     	; 0x1dc8 <__divmodhi4_neg1>
    1dbc:	77 fd       	sbrc	r23, 7
    1dbe:	08 d0       	rcall	.+16     	; 0x1dd0 <__divmodhi4_neg2>
    1dc0:	0b d0       	rcall	.+22     	; 0x1dd8 <__udivmodhi4>
    1dc2:	07 fc       	sbrc	r0, 7
    1dc4:	05 d0       	rcall	.+10     	; 0x1dd0 <__divmodhi4_neg2>
    1dc6:	3e f4       	brtc	.+14     	; 0x1dd6 <__divmodhi4_exit>

00001dc8 <__divmodhi4_neg1>:
    1dc8:	90 95       	com	r25
    1dca:	81 95       	neg	r24
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	08 95       	ret

00001dd0 <__divmodhi4_neg2>:
    1dd0:	70 95       	com	r23
    1dd2:	61 95       	neg	r22
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255

00001dd6 <__divmodhi4_exit>:
    1dd6:	08 95       	ret

00001dd8 <__udivmodhi4>:
    1dd8:	aa 1b       	sub	r26, r26
    1dda:	bb 1b       	sub	r27, r27
    1ddc:	51 e1       	ldi	r21, 0x11	; 17
    1dde:	07 c0       	rjmp	.+14     	; 0x1dee <__udivmodhi4_ep>

00001de0 <__udivmodhi4_loop>:
    1de0:	aa 1f       	adc	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	a6 17       	cp	r26, r22
    1de6:	b7 07       	cpc	r27, r23
    1de8:	10 f0       	brcs	.+4      	; 0x1dee <__udivmodhi4_ep>
    1dea:	a6 1b       	sub	r26, r22
    1dec:	b7 0b       	sbc	r27, r23

00001dee <__udivmodhi4_ep>:
    1dee:	88 1f       	adc	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	5a 95       	dec	r21
    1df4:	a9 f7       	brne	.-22     	; 0x1de0 <__udivmodhi4_loop>
    1df6:	80 95       	com	r24
    1df8:	90 95       	com	r25
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	08 95       	ret

00001e00 <_exit>:
    1e00:	f8 94       	cli

00001e02 <__stop_program>:
    1e02:	ff cf       	rjmp	.-2      	; 0x1e02 <__stop_program>
