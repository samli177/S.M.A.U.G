
sensormodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001056  00800100  00001dfa  00001e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  00801156  00801156  00002ee4  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  00002ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000932  00000000  00000000  0000532c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005c5e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d0  00000000  00000000  00005c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a19  00000000  00000000  00005f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b8e  00000000  00000000  00008976  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f35  00000000  00000000  00009504  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008d8  00000000  00000000  0000b43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000090c  00000000  00000000  0000bd14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002044  00000000  00000000  0000c620  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000300  00000000  00000000  0000e664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__vector_4>
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	5d c2       	rjmp	.+1210   	; 0x4f0 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c6       	rjmp	.+3106   	; 0xc84 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__vector_26>
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c2       	rjmp	.+1220   	; 0x546 <__vector_32>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e1       	ldi	r17, 0x11	; 17
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ef       	ldi	r30, 0xFA	; 250
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 35       	cpi	r26, 0x56	; 86
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e1       	ldi	r18, 0x13	; 19
      b4:	a6 e5       	ldi	r26, 0x56	; 86
      b6:	b1 e1       	ldi	r27, 0x11	; 17
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 37       	cpi	r26, 0x74	; 116
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	eb d1       	rcall	.+982    	; 0x49a <main>
      c4:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
      ca:	bc 01       	movw	r22, r24
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatunsisf>
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	4a e7       	ldi	r20, 0x7A	; 122
      da:	51 e4       	ldi	r21, 0x41	; 65
      dc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__mulsf3>
      e0:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__fixunssfsi>
	OCR1A = delay;
      e4:	70 93 89 00 	sts	0x0089, r23
      e8:	60 93 88 00 	sts	0x0088, r22
      ec:	08 95       	ret

000000ee <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
      ee:	bc 01       	movw	r22, r24
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatunsisf>
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4a e7       	ldi	r20, 0x7A	; 122
      fe:	51 e4       	ldi	r21, 0x41	; 65
     100:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__mulsf3>
     104:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__fixunssfsi>
	OCR3A = delay;
     108:	70 93 99 00 	sts	0x0099, r23
     10c:	60 93 98 00 	sts	0x0098, r22
     110:	08 95       	ret

00000112 <init_counters>:
// OBS: fick byta timer 2 mot timer 3 så kommentarerna nedan stämmer inte riktigt...
//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     112:	e1 e8       	ldi	r30, 0x81	; 129
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	85 60       	ori	r24, 0x05	; 5
     11a:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     11c:	e1 e9       	ldi	r30, 0x91	; 145
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	85 60       	ori	r24, 0x05	; 5
     124:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     126:	88 ee       	ldi	r24, 0xE8	; 232
     128:	93 e0       	ldi	r25, 0x03	; 3
     12a:	cf df       	rcall	.-98     	; 0xca <set_counter_1>
	set_counter_2(1000);
     12c:	88 ee       	ldi	r24, 0xE8	; 232
     12e:	93 e0       	ldi	r25, 0x03	; 3
     130:	de df       	rcall	.-68     	; 0xee <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     132:	ef e6       	ldi	r30, 0x6F	; 111
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	82 60       	ori	r24, 0x02	; 2
     13a:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     13c:	e1 e7       	ldi	r30, 0x71	; 113
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	82 60       	ori	r24, 0x02	; 2
     144:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     146:	10 92 85 00 	sts	0x0085, r1
     14a:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     14e:	10 92 95 00 	sts	0x0095, r1
     152:	10 92 94 00 	sts	0x0094, r1
     156:	08 95       	ret

00000158 <toggle_enable>:
	toggle_enable();
}

void toggle_enable()
{
	PORTD |= (1<<PORTD6);
     158:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	8f e3       	ldi	r24, 0x3F	; 63
     15c:	9c e9       	ldi	r25, 0x9C	; 156
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <toggle_enable+0x6>
     162:	00 c0       	rjmp	.+0      	; 0x164 <toggle_enable+0xc>
     164:	00 00       	nop
	_delay_ms(10);
	PORTD &= !(1<<PORTD6);
     166:	8b b1       	in	r24, 0x0b	; 11
     168:	1b b8       	out	0x0b, r1	; 11
     16a:	08 95       	ret

0000016c <display_init>:
static void print_digit(int digit);
static uint8_t display_read_adress();

void display_init()
{
	DDRB = 255;
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b11100000;
     170:	8a b1       	in	r24, 0x0a	; 10
     172:	80 6e       	ori	r24, 0xE0	; 224
     174:	8a b9       	out	0x0a, r24	; 10
	
	//TODO: fix this....
	PORTD &= !(1<<PORTD5) | !(1<<PORTD7); //Instruction mode, Write mode
     176:	8b b1       	in	r24, 0x0b	; 11
     178:	1b b8       	out	0x0b, r1	; 11
     17a:	2f e7       	ldi	r18, 0x7F	; 127
     17c:	83 e8       	ldi	r24, 0x83	; 131
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	21 50       	subi	r18, 0x01	; 1
     182:	80 40       	sbci	r24, 0x00	; 0
     184:	90 40       	sbci	r25, 0x00	; 0
     186:	e1 f7       	brne	.-8      	; 0x180 <display_init+0x14>
     188:	00 c0       	rjmp	.+0      	; 0x18a <display_init+0x1e>
     18a:	00 00       	nop
	_delay_ms(31);
	PORTB = 0b00111000; //Function set
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     190:	e3 df       	rcall	.-58     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     192:	25 ed       	ldi	r18, 0xD5	; 213
     194:	2a 95       	dec	r18
     196:	f1 f7       	brne	.-4      	; 0x194 <display_init+0x28>
     198:	00 00       	nop
	_delay_us(40);
	PORTB = 0b00001111; //Display control
     19a:	8f e0       	ldi	r24, 0x0F	; 15
     19c:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     19e:	dc df       	rcall	.-72     	; 0x158 <toggle_enable>
     1a0:	85 ed       	ldi	r24, 0xD5	; 213
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <display_init+0x36>
     1a6:	00 00       	nop
	_delay_us(40);
	PORTB = 0b00000001; //Clear Display
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1ac:	d5 df       	rcall	.-86     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ae:	8f e3       	ldi	r24, 0x3F	; 63
     1b0:	9f e1       	ldi	r25, 0x1F	; 31
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <display_init+0x46>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <display_init+0x4c>
     1b8:	00 00       	nop
	_delay_ms(2);
	PORTB = 0b00000110; //Set entry mode
     1ba:	86 e0       	ldi	r24, 0x06	; 6
     1bc:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1be:	cc cf       	rjmp	.-104    	; 0x158 <toggle_enable>

000001c0 <display_clear>:
	}
}

void display_clear()
{
	PORTB = 1<<PORTB0; //Clear Display
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1c4:	c9 df       	rcall	.-110    	; 0x158 <toggle_enable>
	toggle_enable();
     1c6:	c8 cf       	rjmp	.-112    	; 0x158 <toggle_enable>

000001c8 <display_set_pos>:
}

void display_set_pos(int line, int pos)
{
	PORTD  &= !(1<<PORTD5); //RS = 0 (Instruction mode)
     1c8:	2b b1       	in	r18, 0x0b	; 11
     1ca:	1b b8       	out	0x0b, r1	; 11
	int data;
	switch(line)
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	91 05       	cpc	r25, r1
     1d0:	41 f0       	breq	.+16     	; 0x1e2 <display_set_pos+0x1a>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	91 05       	cpc	r25, r1
     1d6:	41 f0       	breq	.+16     	; 0x1e8 <display_set_pos+0x20>
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	49 f0       	breq	.+18     	; 0x1ee <display_set_pos+0x26>
	{
		case 0:
		data = 0b10000000;
     1dc:	80 e8       	ldi	r24, 0x80	; 128
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <display_set_pos+0x2a>
		break;
		case 1:
		data = 0b11000000;
		break;
		case 2:
		data = 0b10010000;
     1e2:	80 e9       	ldi	r24, 0x90	; 144
     1e4:	90 e0       	ldi	r25, 0x00	; 0
		break;
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <display_set_pos+0x2a>
		case 3:
		data = 0b11010000;
     1e8:	80 ed       	ldi	r24, 0xD0	; 208
     1ea:	90 e0       	ldi	r25, 0x00	; 0
		break;
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <display_set_pos+0x2a>
	{
		case 0:
		data = 0b10000000;
		break;
		case 1:
		data = 0b11000000;
     1ee:	80 ec       	ldi	r24, 0xC0	; 192
     1f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		data = 0b10000000;
		break;
	}
	data += pos;
     1f2:	68 0f       	add	r22, r24
     1f4:	79 1f       	adc	r23, r25
	
	PORTB = data; //Set adress
     1f6:	65 b9       	out	0x05, r22	; 5
	toggle_enable();
     1f8:	af cf       	rjmp	.-162    	; 0x158 <toggle_enable>

000001fa <display_char>:
	_delay_ms(10);
	PORTD &= !(1<<PORTD6);
}

void display_char(char c)
{
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	d8 2f       	mov	r29, r24
	_delay_us(10);
	toggle_enable();
	if(PINB & (1<<PINB7))
	{
		PORTD &= ~(1<<PORTD7);
		DDRB = 255;
     200:	cf ef       	ldi	r28, 0xFF	; 255
	}
}

int display_busy()
{
	PORTB = 0;
     202:	15 b8       	out	0x05, r1	; 5
	DDRB = 0;
     204:	14 b8       	out	0x04, r1	; 4
	PORTD &= ~(1<<PORTD5); //Instruction mode
     206:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= (1<<PORTD7); //Read mode
     208:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	85 e3       	ldi	r24, 0x35	; 53
     20c:	8a 95       	dec	r24
     20e:	f1 f7       	brne	.-4      	; 0x20c <display_char+0x12>
     210:	00 00       	nop
	_delay_us(10);
	toggle_enable();
     212:	a2 df       	rcall	.-188    	; 0x158 <toggle_enable>
	if(PINB & (1<<PINB7))
     214:	1f 9b       	sbis	0x03, 7	; 3
     216:	03 c0       	rjmp	.+6      	; 0x21e <display_char+0x24>
	{
		PORTD &= ~(1<<PORTD7);
     218:	5f 98       	cbi	0x0b, 7	; 11
		DDRB = 255;
     21a:	c4 b9       	out	0x04, r28	; 4
     21c:	f2 cf       	rjmp	.-28     	; 0x202 <display_char+0x8>
		return 1;
	}
	else
	{
		PORTD &= ~(1<<PORTD7);
     21e:	5f 98       	cbi	0x0b, 7	; 11
		DDRB = 255;
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	c4 b9       	out	0x04, r28	; 4
}

void display_char(char c)
{
	while(display_busy()); //Wait for display
	PORTD |= (1<<PORTD5); //Data mode
     224:	5d 9a       	sbi	0x0b, 5	; 11
	PORTB = c;
     226:	d5 b9       	out	0x05, r29	; 5
	toggle_enable();
     228:	97 df       	rcall	.-210    	; 0x158 <toggle_enable>
	toggle_enable();
}

uint8_t display_read_adress()
{
	PORTB = 0;
     22a:	15 b8       	out	0x05, r1	; 5
	DDRB = 0;
     22c:	14 b8       	out	0x04, r1	; 4
	PORTD &= ~(1<<PORTD5);
     22e:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= 1<<PORTD7;
     230:	5f 9a       	sbi	0x0b, 7	; 11
     232:	85 e3       	ldi	r24, 0x35	; 53
     234:	8a 95       	dec	r24
     236:	f1 f7       	brne	.-4      	; 0x234 <display_char+0x3a>
     238:	00 00       	nop
	_delay_us(10);
	toggle_enable();
     23a:	8e df       	rcall	.-228    	; 0x158 <toggle_enable>
	
	uint8_t adress = PINB;
     23c:	83 b1       	in	r24, 0x03	; 3
	DDRB = 0xFF;
     23e:	c4 b9       	out	0x04, r28	; 4
	PORTD |= 1<<PORTD5;
     240:	5d 9a       	sbi	0x0b, 5	; 11
	while(display_busy()); //Wait for display
	PORTD |= (1<<PORTD5); //Data mode
	PORTB = c;
	toggle_enable();
	
	switch (display_read_adress())
     242:	80 32       	cpi	r24, 0x20	; 32
     244:	a9 f0       	breq	.+42     	; 0x270 <display_char+0x76>
     246:	18 f4       	brcc	.+6      	; 0x24e <display_char+0x54>
     248:	80 31       	cpi	r24, 0x10	; 16
     24a:	e9 f4       	brne	.+58     	; 0x286 <display_char+0x8c>
     24c:	05 c0       	rjmp	.+10     	; 0x258 <display_char+0x5e>
     24e:	80 35       	cpi	r24, 0x50	; 80
     250:	49 f0       	breq	.+18     	; 0x264 <display_char+0x6a>
     252:	80 36       	cpi	r24, 0x60	; 96
     254:	c1 f4       	brne	.+48     	; 0x286 <display_char+0x8c>
     256:	12 c0       	rjmp	.+36     	; 0x27c <display_char+0x82>
	{
		case 16:
		display_set_pos(1,0);
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	b3 df       	rcall	.-154    	; 0x1c8 <display_set_pos>
		break;
     262:	11 c0       	rjmp	.+34     	; 0x286 <display_char+0x8c>
		case 80:
		display_set_pos(2,0);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ad df       	rcall	.-166    	; 0x1c8 <display_set_pos>
		break;
     26e:	0b c0       	rjmp	.+22     	; 0x286 <display_char+0x8c>
		case 32:
		display_set_pos(3,0);
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	a7 df       	rcall	.-178    	; 0x1c8 <display_set_pos>
		break;
     27a:	05 c0       	rjmp	.+10     	; 0x286 <display_char+0x8c>
		case 96:
		display_set_pos(0,0);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	a1 df       	rcall	.-190    	; 0x1c8 <display_set_pos>
		break;
	}
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <print_digit>:
	}
}

void print_digit(int digit)
{
	switch(digit)
     28c:	84 30       	cpi	r24, 0x04	; 4
     28e:	91 05       	cpc	r25, r1
     290:	31 f1       	breq	.+76     	; 0x2de <print_digit+0x52>
     292:	6c f4       	brge	.+26     	; 0x2ae <print_digit+0x22>
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	91 05       	cpc	r25, r1
     298:	e1 f0       	breq	.+56     	; 0x2d2 <print_digit+0x46>
     29a:	1c f4       	brge	.+6      	; 0x2a2 <print_digit+0x16>
     29c:	89 2b       	or	r24, r25
     29e:	b9 f0       	breq	.+46     	; 0x2ce <print_digit+0x42>
     2a0:	2a c0       	rjmp	.+84     	; 0x2f6 <print_digit+0x6a>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	91 05       	cpc	r25, r1
     2a6:	b9 f0       	breq	.+46     	; 0x2d6 <print_digit+0x4a>
     2a8:	03 97       	sbiw	r24, 0x03	; 3
     2aa:	29 f5       	brne	.+74     	; 0x2f6 <print_digit+0x6a>
     2ac:	16 c0       	rjmp	.+44     	; 0x2da <print_digit+0x4e>
     2ae:	87 30       	cpi	r24, 0x07	; 7
     2b0:	91 05       	cpc	r25, r1
     2b2:	d9 f0       	breq	.+54     	; 0x2ea <print_digit+0x5e>
     2b4:	34 f4       	brge	.+12     	; 0x2c2 <print_digit+0x36>
     2b6:	85 30       	cpi	r24, 0x05	; 5
     2b8:	91 05       	cpc	r25, r1
     2ba:	99 f0       	breq	.+38     	; 0x2e2 <print_digit+0x56>
     2bc:	06 97       	sbiw	r24, 0x06	; 6
     2be:	d9 f4       	brne	.+54     	; 0x2f6 <print_digit+0x6a>
     2c0:	12 c0       	rjmp	.+36     	; 0x2e6 <print_digit+0x5a>
     2c2:	88 30       	cpi	r24, 0x08	; 8
     2c4:	91 05       	cpc	r25, r1
     2c6:	99 f0       	breq	.+38     	; 0x2ee <print_digit+0x62>
     2c8:	09 97       	sbiw	r24, 0x09	; 9
     2ca:	a9 f4       	brne	.+42     	; 0x2f6 <print_digit+0x6a>
     2cc:	12 c0       	rjmp	.+36     	; 0x2f2 <print_digit+0x66>
	{
		case 0:
			display_char('0');
     2ce:	80 e3       	ldi	r24, 0x30	; 48
			break;
     2d0:	94 cf       	rjmp	.-216    	; 0x1fa <display_char>
		case 1:
			display_char('1');
     2d2:	81 e3       	ldi	r24, 0x31	; 49
			break;
     2d4:	92 cf       	rjmp	.-220    	; 0x1fa <display_char>
		case 2:
			display_char('2');
     2d6:	82 e3       	ldi	r24, 0x32	; 50
			break;
     2d8:	90 cf       	rjmp	.-224    	; 0x1fa <display_char>
		case 3:
			display_char('3');
     2da:	83 e3       	ldi	r24, 0x33	; 51
			break;
     2dc:	8e cf       	rjmp	.-228    	; 0x1fa <display_char>
		case 4:
			display_char('4');
     2de:	84 e3       	ldi	r24, 0x34	; 52
			break;
     2e0:	8c cf       	rjmp	.-232    	; 0x1fa <display_char>
		case 5:
			display_char('5');
     2e2:	85 e3       	ldi	r24, 0x35	; 53
			break;
     2e4:	8a cf       	rjmp	.-236    	; 0x1fa <display_char>
		case 6:
			display_char('6');
     2e6:	86 e3       	ldi	r24, 0x36	; 54
			break;
     2e8:	88 cf       	rjmp	.-240    	; 0x1fa <display_char>
		case 7:
			display_char('7');
     2ea:	87 e3       	ldi	r24, 0x37	; 55
			break;
     2ec:	86 cf       	rjmp	.-244    	; 0x1fa <display_char>
		case 8:
			display_char('8');
     2ee:	88 e3       	ldi	r24, 0x38	; 56
			break;
     2f0:	84 cf       	rjmp	.-248    	; 0x1fa <display_char>
		case 9:
			display_char('9');
     2f2:	89 e3       	ldi	r24, 0x39	; 57
			break;
     2f4:	82 cf       	rjmp	.-252    	; 0x1fa <display_char>
		default:
			display_char('0');
     2f6:	80 e3       	ldi	r24, 0x30	; 48
     2f8:	80 cf       	rjmp	.-256    	; 0x1fa <display_char>

000002fa <print_int>:
		}
	}
}

void print_int(int number)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	9c 01       	movw	r18, r24
	if(number < 10)
     300:	8a 30       	cpi	r24, 0x0A	; 10
     302:	91 05       	cpc	r25, r1
     304:	24 f4       	brge	.+8      	; 0x30e <print_int+0x14>
	{
		if(number != 0)
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	91 f0       	breq	.+36     	; 0x32e <print_int+0x34>
		{
			print_digit(number);
     30a:	c0 df       	rcall	.-128    	; 0x28c <print_digit>
     30c:	10 c0       	rjmp	.+32     	; 0x32e <print_int+0x34>
		}
	} else
	{
		int mod = number % 10;
     30e:	ea e0       	ldi	r30, 0x0A	; 10
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	bf 01       	movw	r22, r30
     314:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__divmodhi4>
     318:	ec 01       	movw	r28, r24
		int left = number - mod;
     31a:	c9 01       	movw	r24, r18
     31c:	8c 1b       	sub	r24, r28
     31e:	9d 0b       	sbc	r25, r29
		print_int(left / 10);
     320:	bf 01       	movw	r22, r30
     322:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__divmodhi4>
     326:	cb 01       	movw	r24, r22
     328:	e8 df       	rcall	.-48     	; 0x2fa <print_int>
		print_digit(mod);
     32a:	ce 01       	movw	r24, r28
     32c:	af df       	rcall	.-162    	; 0x28c <print_digit>
	}
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <display_value>:
		display_char(text[i]);
	}
}

void display_value(float value)
{
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	6b 01       	movw	r12, r22
     342:	7c 01       	movw	r14, r24
	if(value == (int) value)
     344:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fixsfsi>
     348:	eb 01       	movw	r28, r22
     34a:	88 27       	eor	r24, r24
     34c:	77 fd       	sbrc	r23, 7
     34e:	80 95       	com	r24
     350:	98 2f       	mov	r25, r24
     352:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__floatsisf>
     356:	a7 01       	movw	r20, r14
     358:	96 01       	movw	r18, r12
     35a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__cmpsf2>
     35e:	81 11       	cpse	r24, r1
     360:	0f c0       	rjmp	.+30     	; 0x380 <display_value+0x4c>
	{
		// Integer
		if(value < 10)
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e2       	ldi	r20, 0x20	; 32
     368:	51 e4       	ldi	r21, 0x41	; 65
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__cmpsf2>
     372:	88 23       	and	r24, r24
     374:	1c f4       	brge	.+6      	; 0x37c <display_value+0x48>
		{
			print_digit(value);
     376:	ce 01       	movw	r24, r28
     378:	89 df       	rcall	.-238    	; 0x28c <print_digit>
     37a:	02 c0       	rjmp	.+4      	; 0x380 <display_value+0x4c>
		} else 
		{
			print_int(value);
     37c:	ce 01       	movw	r24, r28
     37e:	bd df       	rcall	.-134    	; 0x2fa <print_int>
		}
	}
}
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	df 90       	pop	r13
     38a:	cf 90       	pop	r12
     38c:	08 95       	ret

0000038e <display_text_fixed_length>:
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
	for(int i = 0; i < length; ++i)
     396:	16 16       	cp	r1, r22
     398:	17 06       	cpc	r1, r23
     39a:	54 f4       	brge	.+20     	; 0x3b0 <display_text_fixed_length+0x22>
     39c:	c8 2f       	mov	r28, r24
     39e:	d9 2f       	mov	r29, r25
	{
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
     3a0:	8e 01       	movw	r16, r28
     3a2:	06 0f       	add	r16, r22
     3a4:	17 1f       	adc	r17, r23
{
	for(int i = 0; i < length; ++i)
	{
		display_char(text[i]);
     3a6:	89 91       	ld	r24, Y+
     3a8:	28 df       	rcall	.-432    	; 0x1fa <display_char>
	}
}

void display_text_fixed_length(char text[], int length)
{
	for(int i = 0; i < length; ++i)
     3aa:	c0 17       	cp	r28, r16
     3ac:	d1 07       	cpc	r29, r17
     3ae:	d9 f7       	brne	.-10     	; 0x3a6 <display_text_fixed_length+0x18>
	{
		display_char(text[i]);
	}
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <display_text>:
		return 0;
	}
}

void display_text(char text[])
{
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	e8 2e       	mov	r14, r24
     3c8:	f9 2e       	mov	r15, r25
     3ca:	08 2f       	mov	r16, r24
     3cc:	19 2f       	mov	r17, r25
	for(int i = 0; i < strlen(text); ++i)
     3ce:	c0 e0       	ldi	r28, 0x00	; 0
     3d0:	d0 e0       	ldi	r29, 0x00	; 0
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <display_text+0x24>
	{
		display_char(text[i]);
     3d4:	f8 01       	movw	r30, r16
     3d6:	81 91       	ld	r24, Z+
     3d8:	8f 01       	movw	r16, r30
     3da:	0f df       	rcall	.-482    	; 0x1fa <display_char>
	}
}

void display_text(char text[])
{
	for(int i = 0; i < strlen(text); ++i)
     3dc:	21 96       	adiw	r28, 0x01	; 1
     3de:	ee 2d       	mov	r30, r14
     3e0:	ff 2d       	mov	r31, r15
     3e2:	df 01       	movw	r26, r30
     3e4:	0d 90       	ld	r0, X+
     3e6:	00 20       	and	r0, r0
     3e8:	e9 f7       	brne	.-6      	; 0x3e4 <display_text+0x2a>
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	ae 1b       	sub	r26, r30
     3ee:	bf 0b       	sbc	r27, r31
     3f0:	ca 17       	cp	r28, r26
     3f2:	db 07       	cpc	r29, r27
     3f4:	78 f3       	brcs	.-34     	; 0x3d4 <display_text+0x1a>
	{
		display_char(text[i]);
	}
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     404:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     406:	90 81       	ld	r25, Z
     408:	91 50       	subi	r25, 0x01	; 1
     40a:	84 81       	ldd	r24, Z+4	; 0x04
     40c:	22 81       	ldd	r18, Z+2	; 0x02
     40e:	82 1b       	sub	r24, r18
};
     410:	89 23       	and	r24, r25
     412:	08 95       	ret

00000414 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ec 01       	movw	r28, r24
     41c:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     41e:	f2 df       	rcall	.-28     	; 0x404 <FifoDataLength>
     420:	28 81       	ld	r18, Y
     422:	39 81       	ldd	r19, Y+1	; 0x01
     424:	21 50       	subi	r18, 0x01	; 1
     426:	31 09       	sbc	r19, r1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	82 17       	cp	r24, r18
     42c:	93 07       	cpc	r25, r19
     42e:	69 f0       	breq	.+26     	; 0x44a <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	fe 01       	movw	r30, r28
     436:	e8 0f       	add	r30, r24
     438:	f9 1f       	adc	r31, r25
     43a:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	28 23       	and	r18, r24
     440:	39 23       	and	r19, r25
     442:	3d 83       	std	Y+5, r19	; 0x05
     444:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	01 c0       	rjmp	.+2      	; 0x44c <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	08 95       	ret

00000454 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
     45e:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     460:	d1 df       	rcall	.-94     	; 0x404 <FifoDataLength>
     462:	88 23       	and	r24, r24
     464:	a1 f0       	breq	.+40     	; 0x48e <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     466:	ea 81       	ldd	r30, Y+2	; 0x02
     468:	fb 81       	ldd	r31, Y+3	; 0x03
     46a:	ec 0f       	add	r30, r28
     46c:	fd 1f       	adc	r31, r29
     46e:	86 81       	ldd	r24, Z+6	; 0x06
     470:	f8 01       	movw	r30, r16
     472:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     474:	28 81       	ld	r18, Y
     476:	39 81       	ldd	r19, Y+1	; 0x01
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	31 09       	sbc	r19, r1
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	9b 81       	ldd	r25, Y+3	; 0x03
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	82 23       	and	r24, r18
     484:	93 23       	and	r25, r19
     486:	9b 83       	std	Y+3, r25	; 0x03
     488:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	01 c0       	rjmp	.+2      	; 0x490 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     48e:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <main>:
int bufferSize = 0;
uint8_t displayFlag = 0;

int main(void)
{	
	display_init();
     49a:	68 de       	rcall	.-816    	; 0x16c <display_init>
	sensors_init();
     49c:	9a d0       	rcall	.+308    	; 0x5d2 <sensors_init>
	
	// init TWI
	TWI_init(S_ADDRESS);
     49e:	80 e4       	ldi	r24, 0x40	; 64
     4a0:	b0 d7       	rcall	.+3936   	; 0x1402 <TWI_init>
	init_counters();
     4a2:	37 de       	rcall	.-914    	; 0x112 <init_counters>
	
	set_counter_1(100);
     4a4:	84 e6       	ldi	r24, 0x64	; 100
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	10 de       	rcall	.-992    	; 0xca <set_counter_1>
	set_counter_2(3000);
     4aa:	88 eb       	ldi	r24, 0xB8	; 184
     4ac:	9b e0       	ldi	r25, 0x0B	; 11
     4ae:	1f de       	rcall	.-962    	; 0xee <set_counter_2>
	
	// Activate interrupts
	sei();
     4b0:	78 94       	sei
	
	display_text("Hello");
     4b2:	88 e0       	ldi	r24, 0x08	; 8
     4b4:	91 e1       	ldi	r25, 0x11	; 17
     4b6:	81 df       	rcall	.-254    	; 0x3ba <display_text>
				set_counter_2(2000);
			} else {
				set_counter_2(3000);
			}
			displayFlag = 0;
			TCNT3 = 0;
     4b8:	c4 e9       	ldi	r28, 0x94	; 148
     4ba:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4bc:	8f e9       	ldi	r24, 0x9F	; 159
     4be:	9f e0       	ldi	r25, 0x0F	; 15
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <main+0x26>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0x2c>
     4c6:	00 00       	nop
	display_text("Hello");
	
	while(1)
	{	
		_delay_ms(1);
		if(displayFlag)
     4c8:	80 91 56 11 	lds	r24, 0x1156
     4cc:	88 23       	and	r24, r24
     4ce:	b1 f3       	breq	.-20     	; 0x4bc <main+0x22>
		{
			if(decode_message_TwiFIFO())
     4d0:	ed d7       	rcall	.+4058   	; 0x14ac <decode_message_TwiFIFO>
     4d2:	88 23       	and	r24, r24
     4d4:	29 f0       	breq	.+10     	; 0x4e0 <main+0x46>
			{
				sensors_display_data();
     4d6:	5a d3       	rcall	.+1716   	; 0xb8c <sensors_display_data>
				set_counter_2(2000);
     4d8:	80 ed       	ldi	r24, 0xD0	; 208
     4da:	97 e0       	ldi	r25, 0x07	; 7
     4dc:	08 de       	rcall	.-1008   	; 0xee <set_counter_2>
     4de:	03 c0       	rjmp	.+6      	; 0x4e6 <main+0x4c>
			} else {
				set_counter_2(3000);
     4e0:	88 eb       	ldi	r24, 0xB8	; 184
     4e2:	9b e0       	ldi	r25, 0x0B	; 11
     4e4:	04 de       	rcall	.-1016   	; 0xee <set_counter_2>
			}
			displayFlag = 0;
     4e6:	10 92 56 11 	sts	0x1156, r1
			TCNT3 = 0;
     4ea:	19 82       	std	Y+1, r1	; 0x01
     4ec:	18 82       	st	Y, r1
     4ee:	e6 cf       	rjmp	.-52     	; 0x4bc <main+0x22>

000004f0 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     4f0:	1f 92       	push	r1
     4f2:	0f 92       	push	r0
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	0f 92       	push	r0
     4f8:	11 24       	eor	r1, r1
     4fa:	0b b6       	in	r0, 0x3b	; 59
     4fc:	0f 92       	push	r0
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	af 93       	push	r26
     510:	bf 93       	push	r27
     512:	ef 93       	push	r30
     514:	ff 93       	push	r31
	sensors_start_sample();
     516:	36 d3       	rcall	.+1644   	; 0xb84 <sensors_start_sample>
	TCNT1 = 0;
     518:	10 92 85 00 	sts	0x0085, r1
     51c:	10 92 84 00 	sts	0x0084, r1
}
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	7f 91       	pop	r23
     52e:	6f 91       	pop	r22
     530:	5f 91       	pop	r21
     532:	4f 91       	pop	r20
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0b be       	out	0x3b, r0	; 59
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     546:	1f 92       	push	r1
     548:	0f 92       	push	r0
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	0f 92       	push	r0
     54e:	11 24       	eor	r1, r1
     550:	8f 93       	push	r24
	displayFlag = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 56 11 	sts	0x1156, r24
	TCNT3 = 0;
     558:	10 92 95 00 	sts	0x0095, r1
     55c:	10 92 94 00 	sts	0x0094, r1
}
     560:	8f 91       	pop	r24
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <adc_start>:
	return sensorDataFlag;
}

void sensors_reset_flag()
{
	sensorDataFlag = false;
     56c:	ea e7       	ldi	r30, 0x7A	; 122
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	80 64       	ori	r24, 0x40	; 64
     574:	80 83       	st	Z, r24
     576:	08 95       	ret

00000578 <select_sensor>:
     578:	80 93 37 12 	sts	0x1237, r24
     57c:	22 b1       	in	r18, 0x02	; 2
     57e:	21 7e       	andi	r18, 0xE1	; 225
     580:	22 b9       	out	0x02, r18	; 2
     582:	83 30       	cpi	r24, 0x03	; 3
     584:	91 05       	cpc	r25, r1
     586:	b9 f0       	breq	.+46     	; 0x5b6 <select_sensor+0x3e>
     588:	3c f4       	brge	.+14     	; 0x598 <select_sensor+0x20>
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	91 05       	cpc	r25, r1
     58e:	69 f0       	breq	.+26     	; 0x5aa <select_sensor+0x32>
     590:	74 f4       	brge	.+28     	; 0x5ae <select_sensor+0x36>
     592:	89 2b       	or	r24, r25
     594:	41 f0       	breq	.+16     	; 0x5a6 <select_sensor+0x2e>
     596:	08 95       	ret
     598:	85 30       	cpi	r24, 0x05	; 5
     59a:	91 05       	cpc	r25, r1
     59c:	91 f0       	breq	.+36     	; 0x5c2 <select_sensor+0x4a>
     59e:	6c f0       	brlt	.+26     	; 0x5ba <select_sensor+0x42>
     5a0:	06 97       	sbiw	r24, 0x06	; 6
     5a2:	b1 f4       	brne	.+44     	; 0x5d0 <select_sensor+0x58>
     5a4:	12 c0       	rjmp	.+36     	; 0x5ca <select_sensor+0x52>
     5a6:	11 9a       	sbi	0x02, 1	; 2
     5a8:	08 95       	ret
     5aa:	12 9a       	sbi	0x02, 2	; 2
     5ac:	08 95       	ret
     5ae:	82 b1       	in	r24, 0x02	; 2
     5b0:	86 60       	ori	r24, 0x06	; 6
     5b2:	82 b9       	out	0x02, r24	; 2
     5b4:	08 95       	ret
     5b6:	13 9a       	sbi	0x02, 3	; 2
     5b8:	08 95       	ret
     5ba:	82 b1       	in	r24, 0x02	; 2
     5bc:	8a 60       	ori	r24, 0x0A	; 10
     5be:	82 b9       	out	0x02, r24	; 2
     5c0:	08 95       	ret
     5c2:	82 b1       	in	r24, 0x02	; 2
     5c4:	8c 60       	ori	r24, 0x0C	; 12
     5c6:	82 b9       	out	0x02, r24	; 2
     5c8:	08 95       	ret
     5ca:	82 b1       	in	r24, 0x02	; 2
     5cc:	8e 60       	ori	r24, 0x0E	; 14
     5ce:	82 b9       	out	0x02, r24	; 2
     5d0:	08 95       	ret

000005d2 <sensors_init>:
     5d2:	4f 92       	push	r4
     5d4:	5f 92       	push	r5
     5d6:	6f 92       	push	r6
     5d8:	7f 92       	push	r7
     5da:	8f 92       	push	r8
     5dc:	9f 92       	push	r9
     5de:	af 92       	push	r10
     5e0:	bf 92       	push	r11
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	8f e8       	ldi	r24, 0x8F	; 143
     5f0:	80 93 7a 00 	sts	0x007A, r24
     5f4:	80 e6       	ldi	r24, 0x60	; 96
     5f6:	80 93 7c 00 	sts	0x007C, r24
     5fa:	8a e9       	ldi	r24, 0x9A	; 154
     5fc:	99 e9       	ldi	r25, 0x99	; 153
     5fe:	a9 e4       	ldi	r26, 0x49	; 73
     600:	b0 e4       	ldi	r27, 0x40	; 64
     602:	80 93 57 11 	sts	0x1157, r24
     606:	90 93 58 11 	sts	0x1158, r25
     60a:	a0 93 59 11 	sts	0x1159, r26
     60e:	b0 93 5a 11 	sts	0x115A, r27
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	a0 ec       	ldi	r26, 0xC0	; 192
     618:	b0 e4       	ldi	r27, 0x40	; 64
     61a:	80 93 5b 11 	sts	0x115B, r24
     61e:	90 93 5c 11 	sts	0x115C, r25
     622:	a0 93 5d 11 	sts	0x115D, r26
     626:	b0 93 5e 11 	sts	0x115E, r27
     62a:	82 e5       	ldi	r24, 0x52	; 82
     62c:	98 eb       	ldi	r25, 0xB8	; 184
     62e:	ae e3       	ldi	r26, 0x3E	; 62
     630:	b0 e4       	ldi	r27, 0x40	; 64
     632:	80 93 5f 11 	sts	0x115F, r24
     636:	90 93 60 11 	sts	0x1160, r25
     63a:	a0 93 61 11 	sts	0x1161, r26
     63e:	b0 93 62 11 	sts	0x1162, r27
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	a0 ee       	ldi	r26, 0xE0	; 224
     648:	b0 e4       	ldi	r27, 0x40	; 64
     64a:	80 93 63 11 	sts	0x1163, r24
     64e:	90 93 64 11 	sts	0x1164, r25
     652:	a0 93 65 11 	sts	0x1165, r26
     656:	b0 93 66 11 	sts	0x1166, r27
     65a:	00 e0       	ldi	r16, 0x00	; 0
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	20 e3       	ldi	r18, 0x30	; 48
     660:	30 e4       	ldi	r19, 0x40	; 64
     662:	00 93 67 11 	sts	0x1167, r16
     666:	10 93 68 11 	sts	0x1168, r17
     66a:	20 93 69 11 	sts	0x1169, r18
     66e:	30 93 6a 11 	sts	0x116A, r19
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b1 e4       	ldi	r27, 0x41	; 65
     67a:	80 93 6b 11 	sts	0x116B, r24
     67e:	90 93 6c 11 	sts	0x116C, r25
     682:	a0 93 6d 11 	sts	0x116D, r26
     686:	b0 93 6e 11 	sts	0x116E, r27
     68a:	8a e0       	ldi	r24, 0x0A	; 10
     68c:	97 ed       	ldi	r25, 0xD7	; 215
     68e:	a3 e1       	ldi	r26, 0x13	; 19
     690:	b0 e4       	ldi	r27, 0x40	; 64
     692:	80 93 6f 11 	sts	0x116F, r24
     696:	90 93 70 11 	sts	0x1170, r25
     69a:	a0 93 71 11 	sts	0x1171, r26
     69e:	b0 93 72 11 	sts	0x1172, r27
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	a0 e2       	ldi	r26, 0x20	; 32
     6a8:	b1 e4       	ldi	r27, 0x41	; 65
     6aa:	80 93 73 11 	sts	0x1173, r24
     6ae:	90 93 74 11 	sts	0x1174, r25
     6b2:	a0 93 75 11 	sts	0x1175, r26
     6b6:	b0 93 76 11 	sts	0x1176, r27
     6ba:	85 e8       	ldi	r24, 0x85	; 133
     6bc:	9b ee       	ldi	r25, 0xEB	; 235
     6be:	a1 ed       	ldi	r26, 0xD1	; 209
     6c0:	bf e3       	ldi	r27, 0x3F	; 63
     6c2:	80 93 77 11 	sts	0x1177, r24
     6c6:	90 93 78 11 	sts	0x1178, r25
     6ca:	a0 93 79 11 	sts	0x1179, r26
     6ce:	b0 93 7a 11 	sts	0x117A, r27
     6d2:	0f 2e       	mov	r0, r31
     6d4:	41 2c       	mov	r4, r1
     6d6:	51 2c       	mov	r5, r1
     6d8:	f0 e7       	ldi	r31, 0x70	; 112
     6da:	6f 2e       	mov	r6, r31
     6dc:	f1 e4       	ldi	r31, 0x41	; 65
     6de:	7f 2e       	mov	r7, r31
     6e0:	f0 2d       	mov	r31, r0
     6e2:	40 92 7b 11 	sts	0x117B, r4
     6e6:	50 92 7c 11 	sts	0x117C, r5
     6ea:	60 92 7d 11 	sts	0x117D, r6
     6ee:	70 92 7e 11 	sts	0x117E, r7
     6f2:	84 e1       	ldi	r24, 0x14	; 20
     6f4:	9e ea       	ldi	r25, 0xAE	; 174
     6f6:	a7 ea       	ldi	r26, 0xA7	; 167
     6f8:	bf e3       	ldi	r27, 0x3F	; 63
     6fa:	80 93 7f 11 	sts	0x117F, r24
     6fe:	90 93 80 11 	sts	0x1180, r25
     702:	a0 93 81 11 	sts	0x1181, r26
     706:	b0 93 82 11 	sts	0x1182, r27
     70a:	0f 2e       	mov	r0, r31
     70c:	81 2c       	mov	r8, r1
     70e:	91 2c       	mov	r9, r1
     710:	f0 ea       	ldi	r31, 0xA0	; 160
     712:	af 2e       	mov	r10, r31
     714:	f1 e4       	ldi	r31, 0x41	; 65
     716:	bf 2e       	mov	r11, r31
     718:	f0 2d       	mov	r31, r0
     71a:	80 92 83 11 	sts	0x1183, r8
     71e:	90 92 84 11 	sts	0x1184, r9
     722:	a0 92 85 11 	sts	0x1185, r10
     726:	b0 92 86 11 	sts	0x1186, r11
     72a:	81 e7       	ldi	r24, 0x71	; 113
     72c:	9d e3       	ldi	r25, 0x3D	; 61
     72e:	aa e8       	ldi	r26, 0x8A	; 138
     730:	bf e3       	ldi	r27, 0x3F	; 63
     732:	80 93 87 11 	sts	0x1187, r24
     736:	90 93 88 11 	sts	0x1188, r25
     73a:	a0 93 89 11 	sts	0x1189, r26
     73e:	b0 93 8a 11 	sts	0x118A, r27
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a8 ec       	ldi	r26, 0xC8	; 200
     748:	b1 e4       	ldi	r27, 0x41	; 65
     74a:	80 93 8b 11 	sts	0x118B, r24
     74e:	90 93 8c 11 	sts	0x118C, r25
     752:	a0 93 8d 11 	sts	0x118D, r26
     756:	b0 93 8e 11 	sts	0x118E, r27
     75a:	8f e1       	ldi	r24, 0x1F	; 31
     75c:	95 e8       	ldi	r25, 0x85	; 133
     75e:	ab e6       	ldi	r26, 0x6B	; 107
     760:	bf e3       	ldi	r27, 0x3F	; 63
     762:	80 93 8f 11 	sts	0x118F, r24
     766:	90 93 90 11 	sts	0x1190, r25
     76a:	a0 93 91 11 	sts	0x1191, r26
     76e:	b0 93 92 11 	sts	0x1192, r27
     772:	0f 2e       	mov	r0, r31
     774:	c1 2c       	mov	r12, r1
     776:	d1 2c       	mov	r13, r1
     778:	f0 ef       	ldi	r31, 0xF0	; 240
     77a:	ef 2e       	mov	r14, r31
     77c:	f1 e4       	ldi	r31, 0x41	; 65
     77e:	ff 2e       	mov	r15, r31
     780:	f0 2d       	mov	r31, r0
     782:	c0 92 93 11 	sts	0x1193, r12
     786:	d0 92 94 11 	sts	0x1194, r13
     78a:	e0 92 95 11 	sts	0x1195, r14
     78e:	f0 92 96 11 	sts	0x1196, r15
     792:	84 ea       	ldi	r24, 0xA4	; 164
     794:	90 e7       	ldi	r25, 0x70	; 112
     796:	ad e3       	ldi	r26, 0x3D	; 61
     798:	bf e3       	ldi	r27, 0x3F	; 63
     79a:	80 93 97 11 	sts	0x1197, r24
     79e:	90 93 98 11 	sts	0x1198, r25
     7a2:	a0 93 99 11 	sts	0x1199, r26
     7a6:	b0 93 9a 11 	sts	0x119A, r27
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	a0 e2       	ldi	r26, 0x20	; 32
     7b0:	b2 e4       	ldi	r27, 0x42	; 66
     7b2:	80 93 9b 11 	sts	0x119B, r24
     7b6:	90 93 9c 11 	sts	0x119C, r25
     7ba:	a0 93 9d 11 	sts	0x119D, r26
     7be:	b0 93 9e 11 	sts	0x119E, r27
     7c2:	86 ef       	ldi	r24, 0xF6	; 246
     7c4:	98 e2       	ldi	r25, 0x28	; 40
     7c6:	ac e1       	ldi	r26, 0x1C	; 28
     7c8:	bf e3       	ldi	r27, 0x3F	; 63
     7ca:	80 93 9f 11 	sts	0x119F, r24
     7ce:	90 93 a0 11 	sts	0x11A0, r25
     7d2:	a0 93 a1 11 	sts	0x11A1, r26
     7d6:	b0 93 a2 11 	sts	0x11A2, r27
     7da:	00 e0       	ldi	r16, 0x00	; 0
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	28 e4       	ldi	r18, 0x48	; 72
     7e0:	32 e4       	ldi	r19, 0x42	; 66
     7e2:	00 93 a3 11 	sts	0x11A3, r16
     7e6:	10 93 a4 11 	sts	0x11A4, r17
     7ea:	20 93 a5 11 	sts	0x11A5, r18
     7ee:	30 93 a6 11 	sts	0x11A6, r19
     7f2:	8c e5       	ldi	r24, 0x5C	; 92
     7f4:	9f e8       	ldi	r25, 0x8F	; 143
     7f6:	a2 e0       	ldi	r26, 0x02	; 2
     7f8:	bf e3       	ldi	r27, 0x3F	; 63
     7fa:	80 93 a7 11 	sts	0x11A7, r24
     7fe:	90 93 a8 11 	sts	0x11A8, r25
     802:	a0 93 a9 11 	sts	0x11A9, r26
     806:	b0 93 aa 11 	sts	0x11AA, r27
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	a0 e7       	ldi	r26, 0x70	; 112
     810:	b2 e4       	ldi	r27, 0x42	; 66
     812:	80 93 ab 11 	sts	0x11AB, r24
     816:	90 93 ac 11 	sts	0x11AC, r25
     81a:	a0 93 ad 11 	sts	0x11AD, r26
     81e:	b0 93 ae 11 	sts	0x11AE, r27
     822:	06 e6       	ldi	r16, 0x66	; 102
     824:	16 e6       	ldi	r17, 0x66	; 102
     826:	26 ee       	ldi	r18, 0xE6	; 230
     828:	3e e3       	ldi	r19, 0x3E	; 62
     82a:	00 93 af 11 	sts	0x11AF, r16
     82e:	10 93 b0 11 	sts	0x11B0, r17
     832:	20 93 b1 11 	sts	0x11B1, r18
     836:	30 93 b2 11 	sts	0x11B2, r19
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	6c e8       	ldi	r22, 0x8C	; 140
     840:	72 e4       	ldi	r23, 0x42	; 66
     842:	40 93 b3 11 	sts	0x11B3, r20
     846:	50 93 b4 11 	sts	0x11B4, r21
     84a:	60 93 b5 11 	sts	0x11B5, r22
     84e:	70 93 b6 11 	sts	0x11B6, r23
     852:	85 e8       	ldi	r24, 0x85	; 133
     854:	9b ee       	ldi	r25, 0xEB	; 235
     856:	a1 ed       	ldi	r26, 0xD1	; 209
     858:	be e3       	ldi	r27, 0x3E	; 62
     85a:	80 93 b7 11 	sts	0x11B7, r24
     85e:	90 93 b8 11 	sts	0x11B8, r25
     862:	a0 93 b9 11 	sts	0x11B9, r26
     866:	b0 93 ba 11 	sts	0x11BA, r27
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	a0 ea       	ldi	r26, 0xA0	; 160
     870:	b2 e4       	ldi	r27, 0x42	; 66
     872:	80 93 bb 11 	sts	0x11BB, r24
     876:	90 93 bc 11 	sts	0x11BC, r25
     87a:	a0 93 bd 11 	sts	0x11BD, r26
     87e:	b0 93 be 11 	sts	0x11BE, r27
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	20 e3       	ldi	r18, 0x30	; 48
     888:	30 e4       	ldi	r19, 0x40	; 64
     88a:	00 93 bf 11 	sts	0x11BF, r16
     88e:	10 93 c0 11 	sts	0x11C0, r17
     892:	20 93 c1 11 	sts	0x11C1, r18
     896:	30 93 c2 11 	sts	0x11C2, r19
     89a:	40 92 c3 11 	sts	0x11C3, r4
     89e:	50 92 c4 11 	sts	0x11C4, r5
     8a2:	60 92 c5 11 	sts	0x11C5, r6
     8a6:	70 92 c6 11 	sts	0x11C6, r7
     8aa:	0f 2e       	mov	r0, r31
     8ac:	f3 e3       	ldi	r31, 0x33	; 51
     8ae:	4f 2e       	mov	r4, r31
     8b0:	54 2c       	mov	r5, r4
     8b2:	f3 e2       	ldi	r31, 0x23	; 35
     8b4:	6f 2e       	mov	r6, r31
     8b6:	f0 e4       	ldi	r31, 0x40	; 64
     8b8:	7f 2e       	mov	r7, r31
     8ba:	f0 2d       	mov	r31, r0
     8bc:	40 92 c7 11 	sts	0x11C7, r4
     8c0:	50 92 c8 11 	sts	0x11C8, r5
     8c4:	60 92 c9 11 	sts	0x11C9, r6
     8c8:	70 92 ca 11 	sts	0x11CA, r7
     8cc:	80 92 cb 11 	sts	0x11CB, r8
     8d0:	90 92 cc 11 	sts	0x11CC, r9
     8d4:	a0 92 cd 11 	sts	0x11CD, r10
     8d8:	b0 92 ce 11 	sts	0x11CE, r11
     8dc:	81 2c       	mov	r8, r1
     8de:	91 2c       	mov	r9, r1
     8e0:	54 01       	movw	r10, r8
     8e2:	68 94       	set
     8e4:	b6 f8       	bld	r11, 6
     8e6:	80 92 cf 11 	sts	0x11CF, r8
     8ea:	90 92 d0 11 	sts	0x11D0, r9
     8ee:	a0 92 d1 11 	sts	0x11D1, r10
     8f2:	b0 92 d2 11 	sts	0x11D2, r11
     8f6:	c0 92 d3 11 	sts	0x11D3, r12
     8fa:	d0 92 d4 11 	sts	0x11D4, r13
     8fe:	e0 92 d5 11 	sts	0x11D5, r14
     902:	f0 92 d6 11 	sts	0x11D6, r15
     906:	0f 2e       	mov	r0, r31
     908:	f6 e6       	ldi	r31, 0x66	; 102
     90a:	cf 2e       	mov	r12, r31
     90c:	dc 2c       	mov	r13, r12
     90e:	f6 ec       	ldi	r31, 0xC6	; 198
     910:	ef 2e       	mov	r14, r31
     912:	ff e3       	ldi	r31, 0x3F	; 63
     914:	ff 2e       	mov	r15, r31
     916:	f0 2d       	mov	r31, r0
     918:	c0 92 d7 11 	sts	0x11D7, r12
     91c:	d0 92 d8 11 	sts	0x11D8, r13
     920:	e0 92 d9 11 	sts	0x11D9, r14
     924:	f0 92 da 11 	sts	0x11DA, r15
     928:	00 e0       	ldi	r16, 0x00	; 0
     92a:	10 e0       	ldi	r17, 0x00	; 0
     92c:	20 e2       	ldi	r18, 0x20	; 32
     92e:	32 e4       	ldi	r19, 0x42	; 66
     930:	00 93 db 11 	sts	0x11DB, r16
     934:	10 93 dc 11 	sts	0x11DC, r17
     938:	20 93 dd 11 	sts	0x11DD, r18
     93c:	30 93 de 11 	sts	0x11DE, r19
     940:	00 e0       	ldi	r16, 0x00	; 0
     942:	10 e0       	ldi	r17, 0x00	; 0
     944:	20 ea       	ldi	r18, 0xA0	; 160
     946:	3f e3       	ldi	r19, 0x3F	; 63
     948:	00 93 df 11 	sts	0x11DF, r16
     94c:	10 93 e0 11 	sts	0x11E0, r17
     950:	20 93 e1 11 	sts	0x11E1, r18
     954:	30 93 e2 11 	sts	0x11E2, r19
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	10 e0       	ldi	r17, 0x00	; 0
     95c:	28 e4       	ldi	r18, 0x48	; 72
     95e:	32 e4       	ldi	r19, 0x42	; 66
     960:	00 93 e3 11 	sts	0x11E3, r16
     964:	10 93 e4 11 	sts	0x11E4, r17
     968:	20 93 e5 11 	sts	0x11E5, r18
     96c:	30 93 e6 11 	sts	0x11E6, r19
     970:	03 ec       	ldi	r16, 0xC3	; 195
     972:	15 ef       	ldi	r17, 0xF5	; 245
     974:	28 e8       	ldi	r18, 0x88	; 136
     976:	3f e3       	ldi	r19, 0x3F	; 63
     978:	00 93 e7 11 	sts	0x11E7, r16
     97c:	10 93 e8 11 	sts	0x11E8, r17
     980:	20 93 e9 11 	sts	0x11E9, r18
     984:	30 93 ea 11 	sts	0x11EA, r19
     988:	00 e0       	ldi	r16, 0x00	; 0
     98a:	10 e0       	ldi	r17, 0x00	; 0
     98c:	20 e7       	ldi	r18, 0x70	; 112
     98e:	32 e4       	ldi	r19, 0x42	; 66
     990:	00 93 eb 11 	sts	0x11EB, r16
     994:	10 93 ec 11 	sts	0x11EC, r17
     998:	20 93 ed 11 	sts	0x11ED, r18
     99c:	30 93 ee 11 	sts	0x11EE, r19
     9a0:	0a e9       	ldi	r16, 0x9A	; 154
     9a2:	19 e9       	ldi	r17, 0x99	; 153
     9a4:	29 e5       	ldi	r18, 0x59	; 89
     9a6:	3f e3       	ldi	r19, 0x3F	; 63
     9a8:	00 93 ef 11 	sts	0x11EF, r16
     9ac:	10 93 f0 11 	sts	0x11F0, r17
     9b0:	20 93 f1 11 	sts	0x11F1, r18
     9b4:	30 93 f2 11 	sts	0x11F2, r19
     9b8:	40 93 f3 11 	sts	0x11F3, r20
     9bc:	50 93 f4 11 	sts	0x11F4, r21
     9c0:	60 93 f5 11 	sts	0x11F5, r22
     9c4:	70 93 f6 11 	sts	0x11F6, r23
     9c8:	4d ec       	ldi	r20, 0xCD	; 205
     9ca:	5c ec       	ldi	r21, 0xCC	; 204
     9cc:	6c e4       	ldi	r22, 0x4C	; 76
     9ce:	7f e3       	ldi	r23, 0x3F	; 63
     9d0:	40 93 f7 11 	sts	0x11F7, r20
     9d4:	50 93 f8 11 	sts	0x11F8, r21
     9d8:	60 93 f9 11 	sts	0x11F9, r22
     9dc:	70 93 fa 11 	sts	0x11FA, r23
     9e0:	80 93 fb 11 	sts	0x11FB, r24
     9e4:	90 93 fc 11 	sts	0x11FC, r25
     9e8:	a0 93 fd 11 	sts	0x11FD, r26
     9ec:	b0 93 fe 11 	sts	0x11FE, r27
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	a0 e4       	ldi	r26, 0x40	; 64
     9f6:	bf e3       	ldi	r27, 0x3F	; 63
     9f8:	80 93 ff 11 	sts	0x11FF, r24
     9fc:	90 93 00 12 	sts	0x1200, r25
     a00:	a0 93 01 12 	sts	0x1201, r26
     a04:	b0 93 02 12 	sts	0x1202, r27
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a4 eb       	ldi	r26, 0xB4	; 180
     a0e:	b2 e4       	ldi	r27, 0x42	; 66
     a10:	80 93 03 12 	sts	0x1203, r24
     a14:	90 93 04 12 	sts	0x1204, r25
     a18:	a0 93 05 12 	sts	0x1205, r26
     a1c:	b0 93 06 12 	sts	0x1206, r27
     a20:	86 e6       	ldi	r24, 0x66	; 102
     a22:	96 e6       	ldi	r25, 0x66	; 102
     a24:	a6 e2       	ldi	r26, 0x26	; 38
     a26:	bf e3       	ldi	r27, 0x3F	; 63
     a28:	80 93 07 12 	sts	0x1207, r24
     a2c:	90 93 08 12 	sts	0x1208, r25
     a30:	a0 93 09 12 	sts	0x1209, r26
     a34:	b0 93 0a 12 	sts	0x120A, r27
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a8 ec       	ldi	r26, 0xC8	; 200
     a3e:	b2 e4       	ldi	r27, 0x42	; 66
     a40:	80 93 0b 12 	sts	0x120B, r24
     a44:	90 93 0c 12 	sts	0x120C, r25
     a48:	a0 93 0d 12 	sts	0x120D, r26
     a4c:	b0 93 0e 12 	sts	0x120E, r27
     a50:	8a e9       	ldi	r24, 0x9A	; 154
     a52:	99 e9       	ldi	r25, 0x99	; 153
     a54:	a9 e1       	ldi	r26, 0x19	; 25
     a56:	bf e3       	ldi	r27, 0x3F	; 63
     a58:	80 93 0f 12 	sts	0x120F, r24
     a5c:	90 93 10 12 	sts	0x1210, r25
     a60:	a0 93 11 12 	sts	0x1211, r26
     a64:	b0 93 12 12 	sts	0x1212, r27
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	ac ed       	ldi	r26, 0xDC	; 220
     a6e:	b2 e4       	ldi	r27, 0x42	; 66
     a70:	80 93 13 12 	sts	0x1213, r24
     a74:	90 93 14 12 	sts	0x1214, r25
     a78:	a0 93 15 12 	sts	0x1215, r26
     a7c:	b0 93 16 12 	sts	0x1216, r27
     a80:	8d ec       	ldi	r24, 0xCD	; 205
     a82:	9c ec       	ldi	r25, 0xCC	; 204
     a84:	ac e0       	ldi	r26, 0x0C	; 12
     a86:	bf e3       	ldi	r27, 0x3F	; 63
     a88:	80 93 17 12 	sts	0x1217, r24
     a8c:	90 93 18 12 	sts	0x1218, r25
     a90:	a0 93 19 12 	sts	0x1219, r26
     a94:	b0 93 1a 12 	sts	0x121A, r27
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 ef       	ldi	r26, 0xF0	; 240
     a9e:	b2 e4       	ldi	r27, 0x42	; 66
     aa0:	80 93 1b 12 	sts	0x121B, r24
     aa4:	90 93 1c 12 	sts	0x121C, r25
     aa8:	a0 93 1d 12 	sts	0x121D, r26
     aac:	b0 93 1e 12 	sts	0x121E, r27
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	bf e3       	ldi	r27, 0x3F	; 63
     ab8:	80 93 1f 12 	sts	0x121F, r24
     abc:	90 93 20 12 	sts	0x1220, r25
     ac0:	a0 93 21 12 	sts	0x1221, r26
     ac4:	b0 93 22 12 	sts	0x1222, r27
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a2 e0       	ldi	r26, 0x02	; 2
     ace:	b3 e4       	ldi	r27, 0x43	; 67
     ad0:	80 93 23 12 	sts	0x1223, r24
     ad4:	90 93 24 12 	sts	0x1224, r25
     ad8:	a0 93 25 12 	sts	0x1225, r26
     adc:	b0 93 26 12 	sts	0x1226, r27
     ae0:	86 e6       	ldi	r24, 0x66	; 102
     ae2:	96 e6       	ldi	r25, 0x66	; 102
     ae4:	a6 ee       	ldi	r26, 0xE6	; 230
     ae6:	be e3       	ldi	r27, 0x3E	; 62
     ae8:	80 93 27 12 	sts	0x1227, r24
     aec:	90 93 28 12 	sts	0x1228, r25
     af0:	a0 93 29 12 	sts	0x1229, r26
     af4:	b0 93 2a 12 	sts	0x122A, r27
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	ac e0       	ldi	r26, 0x0C	; 12
     afe:	b3 e4       	ldi	r27, 0x43	; 67
     b00:	80 93 2b 12 	sts	0x122B, r24
     b04:	90 93 2c 12 	sts	0x122C, r25
     b08:	a0 93 2d 12 	sts	0x122D, r26
     b0c:	b0 93 2e 12 	sts	0x122E, r27
     b10:	8d e3       	ldi	r24, 0x3D	; 61
     b12:	9a e0       	ldi	r25, 0x0A	; 10
     b14:	a7 ed       	ldi	r26, 0xD7	; 215
     b16:	be e3       	ldi	r27, 0x3E	; 62
     b18:	80 93 2f 12 	sts	0x122F, r24
     b1c:	90 93 30 12 	sts	0x1230, r25
     b20:	a0 93 31 12 	sts	0x1231, r26
     b24:	b0 93 32 12 	sts	0x1232, r27
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a6 e1       	ldi	r26, 0x16	; 22
     b2e:	b3 e4       	ldi	r27, 0x43	; 67
     b30:	80 93 33 12 	sts	0x1233, r24
     b34:	90 93 34 12 	sts	0x1234, r25
     b38:	a0 93 35 12 	sts	0x1235, r26
     b3c:	b0 93 36 12 	sts	0x1236, r27
     b40:	81 b1       	in	r24, 0x01	; 1
     b42:	8e 63       	ori	r24, 0x3E	; 62
     b44:	81 b9       	out	0x01, r24	; 1
     b46:	08 98       	cbi	0x01, 0	; 1
     b48:	15 98       	cbi	0x02, 5	; 2
     b4a:	82 b1       	in	r24, 0x02	; 2
     b4c:	81 7e       	andi	r24, 0xE1	; 225
     b4e:	82 b9       	out	0x02, r24	; 2
     b50:	50 9a       	sbi	0x0a, 0	; 10
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 68 00 	sts	0x0068, r24
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	80 93 6b 00 	sts	0x006B, r24
     b5e:	0f 9a       	sbi	0x01, 7	; 1
     b60:	0e 98       	cbi	0x01, 6	; 1
     b62:	85 e0       	ldi	r24, 0x05	; 5
     b64:	85 bd       	out	0x25, r24	; 37
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	bf 90       	pop	r11
     b74:	af 90       	pop	r10
     b76:	9f 90       	pop	r9
     b78:	8f 90       	pop	r8
     b7a:	7f 90       	pop	r7
     b7c:	6f 90       	pop	r6
     b7e:	5f 90       	pop	r5
     b80:	4f 90       	pop	r4
     b82:	08 95       	ret

00000b84 <sensors_start_sample>:
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	f7 dc       	rcall	.-1554   	; 0x578 <select_sensor>
     b8a:	f0 cc       	rjmp	.-1568   	; 0x56c <adc_start>

00000b8c <sensors_display_data>:
     b8c:	19 db       	rcall	.-2510   	; 0x1c0 <display_clear>
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	18 db       	rcall	.-2512   	; 0x1c8 <display_set_pos>
     b98:	8e e0       	ldi	r24, 0x0E	; 14
     b9a:	91 e1       	ldi	r25, 0x11	; 17
     b9c:	0e dc       	rcall	.-2020   	; 0x3ba <display_text>
     b9e:	60 91 38 12 	lds	r22, 0x1238
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	e6 d7       	rcall	.+4044   	; 0x1b76 <__floatunsisf>
     baa:	c4 db       	rcall	.-2168   	; 0x334 <display_value>
     bac:	68 e0       	ldi	r22, 0x08	; 8
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	09 db       	rcall	.-2542   	; 0x1c8 <display_set_pos>
     bb6:	82 e1       	ldi	r24, 0x12	; 18
     bb8:	91 e1       	ldi	r25, 0x11	; 17
     bba:	ff db       	rcall	.-2050   	; 0x3ba <display_text>
     bbc:	60 91 39 12 	lds	r22, 0x1239
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	d7 d7       	rcall	.+4014   	; 0x1b76 <__floatunsisf>
     bc8:	b5 db       	rcall	.-2198   	; 0x334 <display_value>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	fa da       	rcall	.-2572   	; 0x1c8 <display_set_pos>
     bd4:	86 e1       	ldi	r24, 0x16	; 22
     bd6:	91 e1       	ldi	r25, 0x11	; 17
     bd8:	f0 db       	rcall	.-2080   	; 0x3ba <display_text>
     bda:	60 91 3a 12 	lds	r22, 0x123A
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	c8 d7       	rcall	.+3984   	; 0x1b76 <__floatunsisf>
     be6:	a6 db       	rcall	.-2228   	; 0x334 <display_value>
     be8:	68 e0       	ldi	r22, 0x08	; 8
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	eb da       	rcall	.-2602   	; 0x1c8 <display_set_pos>
     bf2:	8a e1       	ldi	r24, 0x1A	; 26
     bf4:	91 e1       	ldi	r25, 0x11	; 17
     bf6:	e1 db       	rcall	.-2110   	; 0x3ba <display_text>
     bf8:	60 91 3b 12 	lds	r22, 0x123B
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	b9 d7       	rcall	.+3954   	; 0x1b76 <__floatunsisf>
     c04:	97 db       	rcall	.-2258   	; 0x334 <display_value>
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	dc da       	rcall	.-2632   	; 0x1c8 <display_set_pos>
     c10:	8e e1       	ldi	r24, 0x1E	; 30
     c12:	91 e1       	ldi	r25, 0x11	; 17
     c14:	d2 db       	rcall	.-2140   	; 0x3ba <display_text>
     c16:	60 91 3c 12 	lds	r22, 0x123C
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	aa d7       	rcall	.+3924   	; 0x1b76 <__floatunsisf>
     c22:	88 db       	rcall	.-2288   	; 0x334 <display_value>
     c24:	68 e0       	ldi	r22, 0x08	; 8
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	cd da       	rcall	.-2662   	; 0x1c8 <display_set_pos>
     c2e:	82 e2       	ldi	r24, 0x22	; 34
     c30:	91 e1       	ldi	r25, 0x11	; 17
     c32:	c3 db       	rcall	.-2170   	; 0x3ba <display_text>
     c34:	60 91 3d 12 	lds	r22, 0x123D
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	9b d7       	rcall	.+3894   	; 0x1b76 <__floatunsisf>
     c40:	79 db       	rcall	.-2318   	; 0x334 <display_value>
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	be da       	rcall	.-2692   	; 0x1c8 <display_set_pos>
     c4c:	86 e2       	ldi	r24, 0x26	; 38
     c4e:	91 e1       	ldi	r25, 0x11	; 17
     c50:	b4 db       	rcall	.-2200   	; 0x3ba <display_text>
     c52:	60 91 3e 12 	lds	r22, 0x123E
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	8c d7       	rcall	.+3864   	; 0x1b76 <__floatunsisf>
     c5e:	6a db       	rcall	.-2348   	; 0x334 <display_value>
     c60:	68 e0       	ldi	r22, 0x08	; 8
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	af da       	rcall	.-2722   	; 0x1c8 <display_set_pos>
     c6a:	8a e2       	ldi	r24, 0x2A	; 42
     c6c:	91 e1       	ldi	r25, 0x11	; 17
     c6e:	a5 db       	rcall	.-2230   	; 0x3ba <display_text>
     c70:	60 91 3f 12 	lds	r22, 0x123F
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	7d d7       	rcall	.+3834   	; 0x1b76 <__floatunsisf>
     c7c:	5b cb       	rjmp	.-2378   	; 0x334 <display_value>

00000c7e <sensors_get_data>:
}

uint8_t* sensors_get_data()
{
	return gSensorBuffer;
}
     c7e:	88 e3       	ldi	r24, 0x38	; 56
     c80:	92 e1       	ldi	r25, 0x12	; 18
     c82:	08 95       	ret

00000c84 <__vector_24>:


ISR(ADC_vect)
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	0b b6       	in	r0, 0x3b	; 59
     c90:	0f 92       	push	r0
     c92:	2f 92       	push	r2
     c94:	3f 92       	push	r3
     c96:	4f 92       	push	r4
     c98:	5f 92       	push	r5
     c9a:	6f 92       	push	r6
     c9c:	7f 92       	push	r7
     c9e:	8f 92       	push	r8
     ca0:	9f 92       	push	r9
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	4f 93       	push	r20
     cb8:	5f 93       	push	r21
     cba:	6f 93       	push	r22
     cbc:	7f 93       	push	r23
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	2d 97       	sbiw	r28, 0x0d	; 13
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	cd bf       	out	0x3d, r28	; 61
	cli();
     cd8:	f8 94       	cli
	uint8_t adcValue = ADCH;
     cda:	60 91 79 00 	lds	r22, 0x0079
	float vin = adcValue * 5.0 / 256.0;
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	4a d7       	rcall	.+3732   	; 0x1b7a <__floatsisf>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 ea       	ldi	r20, 0xA0	; 160
     cec:	50 e4       	ldi	r21, 0x40	; 64
     cee:	f9 d7       	rcall	.+4082   	; 0x1ce2 <__mulsf3>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5b e3       	ldi	r21, 0x3B	; 59
     cf8:	f4 d7       	rcall	.+4072   	; 0x1ce2 <__mulsf3>
     cfa:	6d 83       	std	Y+5, r22	; 0x05
     cfc:	7e 83       	std	Y+6, r23	; 0x06
     cfe:	8f 83       	std	Y+7, r24	; 0x07
     d00:	98 87       	std	Y+8, r25	; 0x08
     d02:	56 2e       	mov	r5, r22
     d04:	47 2e       	mov	r4, r23
     d06:	38 2e       	mov	r3, r24
     d08:	29 2e       	mov	r2, r25
	if(gSelectedSensor == 4)
     d0a:	20 91 37 12 	lds	r18, 0x1237
     d0e:	29 87       	std	Y+9, r18	; 0x09
     d10:	24 30       	cpi	r18, 0x04	; 4
     d12:	09 f0       	breq	.+2      	; 0xd16 <__vector_24+0x92>
     d14:	2d c1       	rjmp	.+602    	; 0xf70 <__vector_24+0x2ec>
	return 0;
}

int voltage_to_mm_long(float voltage)
{
	if(voltage >= IRLong[0][0])
     d16:	c0 90 bf 11 	lds	r12, 0x11BF
     d1a:	d0 90 c0 11 	lds	r13, 0x11C0
     d1e:	e0 90 c1 11 	lds	r14, 0x11C1
     d22:	f0 90 c2 11 	lds	r15, 0x11C2
     d26:	a7 01       	movw	r20, r14
     d28:	96 01       	movw	r18, r12
     d2a:	d7 d7       	rcall	.+4014   	; 0x1cda <__gesf2>
     d2c:	88 23       	and	r24, r24
     d2e:	84 f0       	brlt	.+32     	; 0xd50 <__vector_24+0xcc>
	{
		return IRLong[0][1]*10;
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	60 91 c3 11 	lds	r22, 0x11C3
     d3c:	70 91 c4 11 	lds	r23, 0x11C4
     d40:	80 91 c5 11 	lds	r24, 0x11C5
     d44:	90 91 c6 11 	lds	r25, 0x11C6
     d48:	cc d7       	rcall	.+3992   	; 0x1ce2 <__mulsf3>
     d4a:	e4 d6       	rcall	.+3528   	; 0x1b14 <__fixsfsi>
     d4c:	cb 01       	movw	r24, r22
     d4e:	0a c1       	rjmp	.+532    	; 0xf64 <__vector_24+0x2e0>
	} else if(voltage <= IRLong[14][0])
     d50:	20 91 2f 12 	lds	r18, 0x122F
     d54:	30 91 30 12 	lds	r19, 0x1230
     d58:	40 91 31 12 	lds	r20, 0x1231
     d5c:	50 91 32 12 	lds	r21, 0x1232
     d60:	bd 81       	ldd	r27, Y+5	; 0x05
     d62:	ae 81       	ldd	r26, Y+6	; 0x06
     d64:	1f 81       	ldd	r17, Y+7	; 0x07
     d66:	08 85       	ldd	r16, Y+8	; 0x08
     d68:	6b 2f       	mov	r22, r27
     d6a:	7a 2f       	mov	r23, r26
     d6c:	81 2f       	mov	r24, r17
     d6e:	90 2f       	mov	r25, r16
     d70:	65 d6       	rcall	.+3274   	; 0x1a3c <__cmpsf2>
     d72:	18 16       	cp	r1, r24
     d74:	a4 f4       	brge	.+40     	; 0xd9e <__vector_24+0x11a>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     d76:	80 90 c7 11 	lds	r8, 0x11C7
     d7a:	90 90 c8 11 	lds	r9, 0x11C8
     d7e:	a0 90 c9 11 	lds	r10, 0x11C9
     d82:	b0 90 ca 11 	lds	r11, 0x11CA
		if(next == voltage)
     d86:	a5 01       	movw	r20, r10
     d88:	94 01       	movw	r18, r8
     d8a:	bd 81       	ldd	r27, Y+5	; 0x05
     d8c:	ae 81       	ldd	r26, Y+6	; 0x06
     d8e:	6b 2f       	mov	r22, r27
     d90:	7a 2f       	mov	r23, r26
     d92:	81 2f       	mov	r24, r17
     d94:	90 2f       	mov	r25, r16
     d96:	52 d6       	rcall	.+3236   	; 0x1a3c <__cmpsf2>
     d98:	81 11       	cpse	r24, r1
     d9a:	4c c0       	rjmp	.+152    	; 0xe34 <__vector_24+0x1b0>
     d9c:	32 c0       	rjmp	.+100    	; 0xe02 <__vector_24+0x17e>
	if(voltage >= IRLong[0][0])
	{
		return IRLong[0][1]*10;
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e2       	ldi	r20, 0x20	; 32
     da4:	51 e4       	ldi	r21, 0x41	; 65
     da6:	60 91 33 12 	lds	r22, 0x1233
     daa:	70 91 34 12 	lds	r23, 0x1234
     dae:	80 91 35 12 	lds	r24, 0x1235
     db2:	90 91 36 12 	lds	r25, 0x1236
     db6:	95 d7       	rcall	.+3882   	; 0x1ce2 <__mulsf3>
     db8:	ad d6       	rcall	.+3418   	; 0x1b14 <__fixsfsi>
     dba:	cb 01       	movw	r24, r22
     dbc:	d3 c0       	rjmp	.+422    	; 0xf64 <__vector_24+0x2e0>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
     dbe:	d3 01       	movw	r26, r6
     dc0:	8d 91       	ld	r24, X+
     dc2:	9d 91       	ld	r25, X+
     dc4:	0d 90       	ld	r0, X+
     dc6:	bc 91       	ld	r27, X
     dc8:	a0 2d       	mov	r26, r0
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	ab 83       	std	Y+3, r26	; 0x03
     dd0:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRLong[i+1][0];
     dd2:	78 01       	movw	r14, r16
     dd4:	bf ef       	ldi	r27, 0xFF	; 255
     dd6:	eb 1a       	sub	r14, r27
     dd8:	fb 0a       	sbc	r15, r27
     dda:	e8 e0       	ldi	r30, 0x08	; 8
     ddc:	6e 0e       	add	r6, r30
     dde:	71 1c       	adc	r7, r1
     de0:	d3 01       	movw	r26, r6
     de2:	8d 90       	ld	r8, X+
     de4:	9d 90       	ld	r9, X+
     de6:	ad 90       	ld	r10, X+
     de8:	bc 90       	ld	r11, X
     dea:	1b 87       	std	Y+11, r17	; 0x0b
     dec:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
     dee:	a5 01       	movw	r20, r10
     df0:	94 01       	movw	r18, r8
     df2:	6d 2d       	mov	r22, r13
     df4:	7c 2d       	mov	r23, r12
     df6:	83 2d       	mov	r24, r3
     df8:	92 2d       	mov	r25, r2
     dfa:	20 d6       	rcall	.+3136   	; 0x1a3c <__cmpsf2>
     dfc:	81 11       	cpse	r24, r1
     dfe:	2b c0       	rjmp	.+86     	; 0xe56 <__vector_24+0x1d2>
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <__vector_24+0x184>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e02:	ee 24       	eor	r14, r14
     e04:	e3 94       	inc	r14
     e06:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
     e08:	c7 01       	movw	r24, r14
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	81 54       	subi	r24, 0x41	; 65
     e18:	9e 4e       	sbci	r25, 0xEE	; 238
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e2       	ldi	r20, 0x20	; 32
     e20:	51 e4       	ldi	r21, 0x41	; 65
     e22:	fc 01       	movw	r30, r24
     e24:	64 81       	ldd	r22, Z+4	; 0x04
     e26:	75 81       	ldd	r23, Z+5	; 0x05
     e28:	86 81       	ldd	r24, Z+6	; 0x06
     e2a:	97 81       	ldd	r25, Z+7	; 0x07
     e2c:	5a d7       	rcall	.+3764   	; 0x1ce2 <__mulsf3>
     e2e:	72 d6       	rcall	.+3300   	; 0x1b14 <__fixsfsi>
     e30:	cb 01       	movw	r24, r22
     e32:	98 c0       	rjmp	.+304    	; 0xf64 <__vector_24+0x2e0>
     e34:	0f 2e       	mov	r0, r31
     e36:	f7 ec       	ldi	r31, 0xC7	; 199
     e38:	6f 2e       	mov	r6, r31
     e3a:	f1 e1       	ldi	r31, 0x11	; 17
     e3c:	7f 2e       	mov	r7, r31
     e3e:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e40:	01 e0       	ldi	r16, 0x01	; 1
     e42:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
     e44:	1b 86       	std	Y+11, r1	; 0x0b
     e46:	1a 86       	std	Y+10, r1	; 0x0a
     e48:	c9 82       	std	Y+1, r12	; 0x01
     e4a:	da 82       	std	Y+2, r13	; 0x02
     e4c:	eb 82       	std	Y+3, r14	; 0x03
     e4e:	fc 82       	std	Y+4, r15	; 0x04
     e50:	d5 2c       	mov	r13, r5
     e52:	c4 2c       	mov	r12, r4
     e54:	01 c0       	rjmp	.+2      	; 0xe58 <__vector_24+0x1d4>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e56:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
     e58:	29 81       	ldd	r18, Y+1	; 0x01
     e5a:	3a 81       	ldd	r19, Y+2	; 0x02
     e5c:	4b 81       	ldd	r20, Y+3	; 0x03
     e5e:	5c 81       	ldd	r21, Y+4	; 0x04
     e60:	6d 2d       	mov	r22, r13
     e62:	7c 2d       	mov	r23, r12
     e64:	83 2d       	mov	r24, r3
     e66:	92 2d       	mov	r25, r2
     e68:	e9 d5       	rcall	.+3026   	; 0x1a3c <__cmpsf2>
     e6a:	88 23       	and	r24, r24
     e6c:	0c f0       	brlt	.+2      	; 0xe70 <__vector_24+0x1ec>
     e6e:	74 c0       	rjmp	.+232    	; 0xf58 <__vector_24+0x2d4>
     e70:	a5 01       	movw	r20, r10
     e72:	94 01       	movw	r18, r8
     e74:	6d 2d       	mov	r22, r13
     e76:	7c 2d       	mov	r23, r12
     e78:	83 2d       	mov	r24, r3
     e7a:	92 2d       	mov	r25, r2
     e7c:	2e d7       	rcall	.+3676   	; 0x1cda <__gesf2>
     e7e:	18 16       	cp	r1, r24
     e80:	0c f0       	brlt	.+2      	; 0xe84 <__vector_24+0x200>
     e82:	6a c0       	rjmp	.+212    	; 0xf58 <__vector_24+0x2d4>
     e84:	c9 80       	ldd	r12, Y+1	; 0x01
     e86:	da 80       	ldd	r13, Y+2	; 0x02
     e88:	eb 80       	ldd	r14, Y+3	; 0x03
     e8a:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRLong[i][1]*10;
     e8c:	ea 85       	ldd	r30, Y+10	; 0x0a
     e8e:	fb 85       	ldd	r31, Y+11	; 0x0b
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	e1 54       	subi	r30, 0x41	; 65
     e9e:	fe 4e       	sbci	r31, 0xEE	; 238
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	64 81       	ldd	r22, Z+4	; 0x04
     eaa:	75 81       	ldd	r23, Z+5	; 0x05
     eac:	86 81       	ldd	r24, Z+6	; 0x06
     eae:	97 81       	ldd	r25, Z+7	; 0x07
     eb0:	18 d7       	rcall	.+3632   	; 0x1ce2 <__mulsf3>
     eb2:	30 d6       	rcall	.+3168   	; 0x1b14 <__fixsfsi>
     eb4:	1b 01       	movw	r2, r22
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     eb6:	88 27       	eor	r24, r24
     eb8:	77 fd       	sbrc	r23, 7
     eba:	80 95       	com	r24
     ebc:	98 2f       	mov	r25, r24
     ebe:	5d d6       	rcall	.+3258   	; 0x1b7a <__floatsisf>
     ec0:	2b 01       	movw	r4, r22
     ec2:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
     ec4:	7d 81       	ldd	r23, Y+5	; 0x05
     ec6:	6e 81       	ldd	r22, Y+6	; 0x06
     ec8:	9f 81       	ldd	r25, Y+7	; 0x07
     eca:	88 85       	ldd	r24, Y+8	; 0x08
     ecc:	27 2f       	mov	r18, r23
     ece:	36 2f       	mov	r19, r22
     ed0:	49 2f       	mov	r20, r25
     ed2:	58 2f       	mov	r21, r24
     ed4:	c7 01       	movw	r24, r14
     ed6:	b6 01       	movw	r22, r12
     ed8:	4c d5       	rcall	.+2712   	; 0x1972 <__subsf3>
     eda:	69 83       	std	Y+1, r22	; 0x01
     edc:	7a 83       	std	Y+2, r23	; 0x02
     ede:	8b 83       	std	Y+3, r24	; 0x03
     ee0:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
     ee2:	f8 01       	movw	r30, r16
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	e1 54       	subi	r30, 0x41	; 65
     ef2:	fe 4e       	sbci	r31, 0xEE	; 238
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	64 81       	ldd	r22, Z+4	; 0x04
     efe:	75 81       	ldd	r23, Z+5	; 0x05
     f00:	86 81       	ldd	r24, Z+6	; 0x06
     f02:	97 81       	ldd	r25, Z+7	; 0x07
     f04:	ee d6       	rcall	.+3548   	; 0x1ce2 <__mulsf3>
     f06:	06 d6       	rcall	.+3084   	; 0x1b14 <__fixsfsi>
			int diff = high - low;
     f08:	91 01       	movw	r18, r2
     f0a:	26 1b       	sub	r18, r22
     f0c:	37 0b       	sbc	r19, r23
     f0e:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     f10:	88 27       	eor	r24, r24
     f12:	77 fd       	sbrc	r23, 7
     f14:	80 95       	com	r24
     f16:	98 2f       	mov	r25, r24
     f18:	30 d6       	rcall	.+3168   	; 0x1b7a <__floatsisf>
     f1a:	9b 01       	movw	r18, r22
     f1c:	ac 01       	movw	r20, r24
     f1e:	69 81       	ldd	r22, Y+1	; 0x01
     f20:	7a 81       	ldd	r23, Y+2	; 0x02
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	dd d6       	rcall	.+3514   	; 0x1ce2 <__mulsf3>
     f28:	69 83       	std	Y+1, r22	; 0x01
     f2a:	7a 83       	std	Y+2, r23	; 0x02
     f2c:	8b 83       	std	Y+3, r24	; 0x03
     f2e:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
     f30:	a5 01       	movw	r20, r10
     f32:	94 01       	movw	r18, r8
     f34:	c7 01       	movw	r24, r14
     f36:	b6 01       	movw	r22, r12
     f38:	1c d5       	rcall	.+2616   	; 0x1972 <__subsf3>
     f3a:	9b 01       	movw	r18, r22
     f3c:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
     f3e:	69 81       	ldd	r22, Y+1	; 0x01
     f40:	7a 81       	ldd	r23, Y+2	; 0x02
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	7e d5       	rcall	.+2812   	; 0x1a44 <__divsf3>
     f48:	9b 01       	movw	r18, r22
     f4a:	ac 01       	movw	r20, r24
     f4c:	c3 01       	movw	r24, r6
     f4e:	b2 01       	movw	r22, r4
     f50:	10 d5       	rcall	.+2592   	; 0x1972 <__subsf3>
     f52:	e0 d5       	rcall	.+3008   	; 0x1b14 <__fixsfsi>
     f54:	cb 01       	movw	r24, r22
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <__vector_24+0x2e0>
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
     f58:	0d 30       	cpi	r16, 0x0D	; 13
     f5a:	11 05       	cpc	r17, r1
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_24+0x2dc>
     f5e:	2f cf       	rjmp	.-418    	; 0xdbe <__vector_24+0x13a>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return 0;
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
	cli();
	uint8_t adcValue = ADCH;
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
     f64:	6a e0       	ldi	r22, 0x0A	; 10
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	1f d7       	rcall	.+3646   	; 0x1da8 <__divmodhi4>
     f6a:	60 93 3c 12 	sts	0x123C, r22
     f6e:	3f c1       	rjmp	.+638    	; 0x11ee <__vector_24+0x56a>
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
     f70:	99 85       	ldd	r25, Y+9	; 0x09
     f72:	89 2f       	mov	r24, r25
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9d 87       	std	Y+13, r25	; 0x0d
     f78:	8c 87       	std	Y+12, r24	; 0x0c
	IRLong[14][1] = 150;
}

int voltage_to_mm_short(float voltage)
{
	if(voltage >= IRShort[0][0])
     f7a:	c0 90 57 11 	lds	r12, 0x1157
     f7e:	d0 90 58 11 	lds	r13, 0x1158
     f82:	e0 90 59 11 	lds	r14, 0x1159
     f86:	f0 90 5a 11 	lds	r15, 0x115A
     f8a:	a7 01       	movw	r20, r14
     f8c:	96 01       	movw	r18, r12
     f8e:	bd 81       	ldd	r27, Y+5	; 0x05
     f90:	ae 81       	ldd	r26, Y+6	; 0x06
     f92:	1f 81       	ldd	r17, Y+7	; 0x07
     f94:	08 85       	ldd	r16, Y+8	; 0x08
     f96:	6b 2f       	mov	r22, r27
     f98:	7a 2f       	mov	r23, r26
     f9a:	81 2f       	mov	r24, r17
     f9c:	90 2f       	mov	r25, r16
     f9e:	9d d6       	rcall	.+3386   	; 0x1cda <__gesf2>
     fa0:	88 23       	and	r24, r24
     fa2:	84 f0       	brlt	.+32     	; 0xfc4 <__vector_24+0x340>
	{
		return IRShort[0][1]*10;
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e2       	ldi	r20, 0x20	; 32
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	60 91 5b 11 	lds	r22, 0x115B
     fb0:	70 91 5c 11 	lds	r23, 0x115C
     fb4:	80 91 5d 11 	lds	r24, 0x115D
     fb8:	90 91 5e 11 	lds	r25, 0x115E
     fbc:	92 d6       	rcall	.+3364   	; 0x1ce2 <__mulsf3>
     fbe:	aa d5       	rcall	.+2900   	; 0x1b14 <__fixsfsi>
     fc0:	cb 01       	movw	r24, r22
     fc2:	0a c1       	rjmp	.+532    	; 0x11d8 <__vector_24+0x554>
	} else if(voltage <= IRShort[12][0])
     fc4:	20 91 b7 11 	lds	r18, 0x11B7
     fc8:	30 91 b8 11 	lds	r19, 0x11B8
     fcc:	40 91 b9 11 	lds	r20, 0x11B9
     fd0:	50 91 ba 11 	lds	r21, 0x11BA
     fd4:	bd 81       	ldd	r27, Y+5	; 0x05
     fd6:	ae 81       	ldd	r26, Y+6	; 0x06
     fd8:	1f 81       	ldd	r17, Y+7	; 0x07
     fda:	08 85       	ldd	r16, Y+8	; 0x08
     fdc:	6b 2f       	mov	r22, r27
     fde:	7a 2f       	mov	r23, r26
     fe0:	81 2f       	mov	r24, r17
     fe2:	90 2f       	mov	r25, r16
     fe4:	2b d5       	rcall	.+2646   	; 0x1a3c <__cmpsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	a4 f4       	brge	.+40     	; 0x1012 <__vector_24+0x38e>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
     fea:	80 90 5f 11 	lds	r8, 0x115F
     fee:	90 90 60 11 	lds	r9, 0x1160
     ff2:	a0 90 61 11 	lds	r10, 0x1161
     ff6:	b0 90 62 11 	lds	r11, 0x1162
		if(next == voltage)
     ffa:	a5 01       	movw	r20, r10
     ffc:	94 01       	movw	r18, r8
     ffe:	bd 81       	ldd	r27, Y+5	; 0x05
    1000:	ae 81       	ldd	r26, Y+6	; 0x06
    1002:	6b 2f       	mov	r22, r27
    1004:	7a 2f       	mov	r23, r26
    1006:	81 2f       	mov	r24, r17
    1008:	90 2f       	mov	r25, r16
    100a:	18 d5       	rcall	.+2608   	; 0x1a3c <__cmpsf2>
    100c:	81 11       	cpse	r24, r1
    100e:	4c c0       	rjmp	.+152    	; 0x10a8 <__vector_24+0x424>
    1010:	32 c0       	rjmp	.+100    	; 0x1076 <__vector_24+0x3f2>
	if(voltage >= IRShort[0][0])
	{
		return IRShort[0][1]*10;
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e2       	ldi	r20, 0x20	; 32
    1018:	51 e4       	ldi	r21, 0x41	; 65
    101a:	60 91 bb 11 	lds	r22, 0x11BB
    101e:	70 91 bc 11 	lds	r23, 0x11BC
    1022:	80 91 bd 11 	lds	r24, 0x11BD
    1026:	90 91 be 11 	lds	r25, 0x11BE
    102a:	5b d6       	rcall	.+3254   	; 0x1ce2 <__mulsf3>
    102c:	73 d5       	rcall	.+2790   	; 0x1b14 <__fixsfsi>
    102e:	cb 01       	movw	r24, r22
    1030:	d3 c0       	rjmp	.+422    	; 0x11d8 <__vector_24+0x554>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
    1032:	d3 01       	movw	r26, r6
    1034:	8d 91       	ld	r24, X+
    1036:	9d 91       	ld	r25, X+
    1038:	0d 90       	ld	r0, X+
    103a:	bc 91       	ld	r27, X
    103c:	a0 2d       	mov	r26, r0
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	ab 83       	std	Y+3, r26	; 0x03
    1044:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRShort[i+1][0];
    1046:	78 01       	movw	r14, r16
    1048:	bf ef       	ldi	r27, 0xFF	; 255
    104a:	eb 1a       	sub	r14, r27
    104c:	fb 0a       	sbc	r15, r27
    104e:	e8 e0       	ldi	r30, 0x08	; 8
    1050:	6e 0e       	add	r6, r30
    1052:	71 1c       	adc	r7, r1
    1054:	d3 01       	movw	r26, r6
    1056:	8d 90       	ld	r8, X+
    1058:	9d 90       	ld	r9, X+
    105a:	ad 90       	ld	r10, X+
    105c:	bc 90       	ld	r11, X
    105e:	1b 87       	std	Y+11, r17	; 0x0b
    1060:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
    1062:	a5 01       	movw	r20, r10
    1064:	94 01       	movw	r18, r8
    1066:	6d 2d       	mov	r22, r13
    1068:	7c 2d       	mov	r23, r12
    106a:	83 2d       	mov	r24, r3
    106c:	92 2d       	mov	r25, r2
    106e:	e6 d4       	rcall	.+2508   	; 0x1a3c <__cmpsf2>
    1070:	81 11       	cpse	r24, r1
    1072:	2b c0       	rjmp	.+86     	; 0x10ca <__vector_24+0x446>
    1074:	03 c0       	rjmp	.+6      	; 0x107c <__vector_24+0x3f8>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    1076:	ee 24       	eor	r14, r14
    1078:	e3 94       	inc	r14
    107a:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
    107c:	c7 01       	movw	r24, r14
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	89 5a       	subi	r24, 0xA9	; 169
    108c:	9e 4e       	sbci	r25, 0xEE	; 238
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e2       	ldi	r20, 0x20	; 32
    1094:	51 e4       	ldi	r21, 0x41	; 65
    1096:	fc 01       	movw	r30, r24
    1098:	64 81       	ldd	r22, Z+4	; 0x04
    109a:	75 81       	ldd	r23, Z+5	; 0x05
    109c:	86 81       	ldd	r24, Z+6	; 0x06
    109e:	97 81       	ldd	r25, Z+7	; 0x07
    10a0:	20 d6       	rcall	.+3136   	; 0x1ce2 <__mulsf3>
    10a2:	38 d5       	rcall	.+2672   	; 0x1b14 <__fixsfsi>
    10a4:	cb 01       	movw	r24, r22
    10a6:	98 c0       	rjmp	.+304    	; 0x11d8 <__vector_24+0x554>
    10a8:	0f 2e       	mov	r0, r31
    10aa:	ff e5       	ldi	r31, 0x5F	; 95
    10ac:	6f 2e       	mov	r6, r31
    10ae:	f1 e1       	ldi	r31, 0x11	; 17
    10b0:	7f 2e       	mov	r7, r31
    10b2:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10b4:	01 e0       	ldi	r16, 0x01	; 1
    10b6:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
    10b8:	1b 86       	std	Y+11, r1	; 0x0b
    10ba:	1a 86       	std	Y+10, r1	; 0x0a
    10bc:	c9 82       	std	Y+1, r12	; 0x01
    10be:	da 82       	std	Y+2, r13	; 0x02
    10c0:	eb 82       	std	Y+3, r14	; 0x03
    10c2:	fc 82       	std	Y+4, r15	; 0x04
    10c4:	d5 2c       	mov	r13, r5
    10c6:	c4 2c       	mov	r12, r4
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <__vector_24+0x448>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10ca:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
    10cc:	29 81       	ldd	r18, Y+1	; 0x01
    10ce:	3a 81       	ldd	r19, Y+2	; 0x02
    10d0:	4b 81       	ldd	r20, Y+3	; 0x03
    10d2:	5c 81       	ldd	r21, Y+4	; 0x04
    10d4:	6d 2d       	mov	r22, r13
    10d6:	7c 2d       	mov	r23, r12
    10d8:	83 2d       	mov	r24, r3
    10da:	92 2d       	mov	r25, r2
    10dc:	af d4       	rcall	.+2398   	; 0x1a3c <__cmpsf2>
    10de:	88 23       	and	r24, r24
    10e0:	0c f0       	brlt	.+2      	; 0x10e4 <__vector_24+0x460>
    10e2:	74 c0       	rjmp	.+232    	; 0x11cc <__vector_24+0x548>
    10e4:	a5 01       	movw	r20, r10
    10e6:	94 01       	movw	r18, r8
    10e8:	6d 2d       	mov	r22, r13
    10ea:	7c 2d       	mov	r23, r12
    10ec:	83 2d       	mov	r24, r3
    10ee:	92 2d       	mov	r25, r2
    10f0:	f4 d5       	rcall	.+3048   	; 0x1cda <__gesf2>
    10f2:	18 16       	cp	r1, r24
    10f4:	0c f0       	brlt	.+2      	; 0x10f8 <__vector_24+0x474>
    10f6:	6a c0       	rjmp	.+212    	; 0x11cc <__vector_24+0x548>
    10f8:	c9 80       	ldd	r12, Y+1	; 0x01
    10fa:	da 80       	ldd	r13, Y+2	; 0x02
    10fc:	eb 80       	ldd	r14, Y+3	; 0x03
    10fe:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRShort[i][1]*10;
    1100:	ea 85       	ldd	r30, Y+10	; 0x0a
    1102:	fb 85       	ldd	r31, Y+11	; 0x0b
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	ee 0f       	add	r30, r30
    110a:	ff 1f       	adc	r31, r31
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	e9 5a       	subi	r30, 0xA9	; 169
    1112:	fe 4e       	sbci	r31, 0xEE	; 238
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e2       	ldi	r20, 0x20	; 32
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	64 81       	ldd	r22, Z+4	; 0x04
    111e:	75 81       	ldd	r23, Z+5	; 0x05
    1120:	86 81       	ldd	r24, Z+6	; 0x06
    1122:	97 81       	ldd	r25, Z+7	; 0x07
    1124:	de d5       	rcall	.+3004   	; 0x1ce2 <__mulsf3>
    1126:	f6 d4       	rcall	.+2540   	; 0x1b14 <__fixsfsi>
    1128:	1b 01       	movw	r2, r22
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    112a:	88 27       	eor	r24, r24
    112c:	77 fd       	sbrc	r23, 7
    112e:	80 95       	com	r24
    1130:	98 2f       	mov	r25, r24
    1132:	23 d5       	rcall	.+2630   	; 0x1b7a <__floatsisf>
    1134:	2b 01       	movw	r4, r22
    1136:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
    1138:	7d 81       	ldd	r23, Y+5	; 0x05
    113a:	6e 81       	ldd	r22, Y+6	; 0x06
    113c:	9f 81       	ldd	r25, Y+7	; 0x07
    113e:	88 85       	ldd	r24, Y+8	; 0x08
    1140:	27 2f       	mov	r18, r23
    1142:	36 2f       	mov	r19, r22
    1144:	49 2f       	mov	r20, r25
    1146:	58 2f       	mov	r21, r24
    1148:	c7 01       	movw	r24, r14
    114a:	b6 01       	movw	r22, r12
    114c:	12 d4       	rcall	.+2084   	; 0x1972 <__subsf3>
    114e:	69 83       	std	Y+1, r22	; 0x01
    1150:	7a 83       	std	Y+2, r23	; 0x02
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
    1156:	f8 01       	movw	r30, r16
    1158:	ee 0f       	add	r30, r30
    115a:	ff 1f       	adc	r31, r31
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	ee 0f       	add	r30, r30
    1162:	ff 1f       	adc	r31, r31
    1164:	e9 5a       	subi	r30, 0xA9	; 169
    1166:	fe 4e       	sbci	r31, 0xEE	; 238
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e2       	ldi	r20, 0x20	; 32
    116e:	51 e4       	ldi	r21, 0x41	; 65
    1170:	64 81       	ldd	r22, Z+4	; 0x04
    1172:	75 81       	ldd	r23, Z+5	; 0x05
    1174:	86 81       	ldd	r24, Z+6	; 0x06
    1176:	97 81       	ldd	r25, Z+7	; 0x07
    1178:	b4 d5       	rcall	.+2920   	; 0x1ce2 <__mulsf3>
    117a:	cc d4       	rcall	.+2456   	; 0x1b14 <__fixsfsi>
			int diff = high - low;
    117c:	91 01       	movw	r18, r2
    117e:	26 1b       	sub	r18, r22
    1180:	37 0b       	sbc	r19, r23
    1182:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    1184:	88 27       	eor	r24, r24
    1186:	77 fd       	sbrc	r23, 7
    1188:	80 95       	com	r24
    118a:	98 2f       	mov	r25, r24
    118c:	f6 d4       	rcall	.+2540   	; 0x1b7a <__floatsisf>
    118e:	9b 01       	movw	r18, r22
    1190:	ac 01       	movw	r20, r24
    1192:	69 81       	ldd	r22, Y+1	; 0x01
    1194:	7a 81       	ldd	r23, Y+2	; 0x02
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	a3 d5       	rcall	.+2886   	; 0x1ce2 <__mulsf3>
    119c:	69 83       	std	Y+1, r22	; 0x01
    119e:	7a 83       	std	Y+2, r23	; 0x02
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
    11a4:	a5 01       	movw	r20, r10
    11a6:	94 01       	movw	r18, r8
    11a8:	c7 01       	movw	r24, r14
    11aa:	b6 01       	movw	r22, r12
    11ac:	e2 d3       	rcall	.+1988   	; 0x1972 <__subsf3>
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
    11b2:	69 81       	ldd	r22, Y+1	; 0x01
    11b4:	7a 81       	ldd	r23, Y+2	; 0x02
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	44 d4       	rcall	.+2184   	; 0x1a44 <__divsf3>
    11bc:	9b 01       	movw	r18, r22
    11be:	ac 01       	movw	r20, r24
    11c0:	c3 01       	movw	r24, r6
    11c2:	b2 01       	movw	r22, r4
    11c4:	d6 d3       	rcall	.+1964   	; 0x1972 <__subsf3>
    11c6:	a6 d4       	rcall	.+2380   	; 0x1b14 <__fixsfsi>
    11c8:	cb 01       	movw	r24, r22
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <__vector_24+0x554>
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
    11cc:	0d 30       	cpi	r16, 0x0D	; 13
    11ce:	11 05       	cpc	r17, r1
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <__vector_24+0x550>
    11d2:	2f cf       	rjmp	.-418    	; 0x1032 <__vector_24+0x3ae>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return 0;
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
    11d8:	ec 85       	ldd	r30, Y+12	; 0x0c
    11da:	fd 85       	ldd	r31, Y+13	; 0x0d
    11dc:	e8 5c       	subi	r30, 0xC8	; 200
    11de:	fd 4e       	sbci	r31, 0xED	; 237
    11e0:	6a e0       	ldi	r22, 0x0A	; 10
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	e1 d5       	rcall	.+3010   	; 0x1da8 <__divmodhi4>
    11e6:	60 83       	st	Z, r22
	}
	
	if(gSelectedSensor < 6)
    11e8:	39 85       	ldd	r19, Y+9	; 0x09
    11ea:	36 30       	cpi	r19, 0x06	; 6
    11ec:	38 f4       	brcc	.+14     	; 0x11fc <__vector_24+0x578>
	{
		// Not last sensor
		select_sensor(gSelectedSensor + 1);
    11ee:	a9 85       	ldd	r26, Y+9	; 0x09
    11f0:	8a 2f       	mov	r24, r26
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	c0 d9       	rcall	.-3200   	; 0x578 <select_sensor>
		adc_start();
    11f8:	b9 d9       	rcall	.-3214   	; 0x56c <adc_start>
    11fa:	09 c0       	rjmp	.+18     	; 0x120e <__vector_24+0x58a>
	} else {
		select_sensor(0);
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	bb d9       	rcall	.-3210   	; 0x578 <select_sensor>
	}
}

void start_ul_sensor()
{
	TCNT0 = 0;
    1202:	16 bc       	out	0x26, r1	; 38
	PORTA |= (1<<PORTA7);
    1204:	17 9a       	sbi	0x02, 7	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1206:	b0 e5       	ldi	r27, 0x50	; 80
    1208:	ba 95       	dec	r27
    120a:	f1 f7       	brne	.-4      	; 0x1208 <__vector_24+0x584>
	_delay_us(15);
	PORTA &= ~(1<<PORTA7);
    120c:	17 98       	cbi	0x02, 7	; 2
		adc_start();
	} else {
		select_sensor(0);
		start_ul_sensor();
	}
	sei();
    120e:	78 94       	sei
}
    1210:	2d 96       	adiw	r28, 0x0d	; 13
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	df 90       	pop	r13
    1242:	cf 90       	pop	r12
    1244:	bf 90       	pop	r11
    1246:	af 90       	pop	r10
    1248:	9f 90       	pop	r9
    124a:	8f 90       	pop	r8
    124c:	7f 90       	pop	r7
    124e:	6f 90       	pop	r6
    1250:	5f 90       	pop	r5
    1252:	4f 90       	pop	r4
    1254:	3f 90       	pop	r3
    1256:	2f 90       	pop	r2
    1258:	0f 90       	pop	r0
    125a:	0b be       	out	0x3b, r0	; 59
    125c:	0f 90       	pop	r0
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	0f 90       	pop	r0
    1262:	1f 90       	pop	r1
    1264:	18 95       	reti

00001266 <__vector_4>:

ISR(PCINT0_vect)
{
    1266:	1f 92       	push	r1
    1268:	0f 92       	push	r0
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	0f 92       	push	r0
    126e:	11 24       	eor	r1, r1
    1270:	0b b6       	in	r0, 0x3b	; 59
    1272:	0f 92       	push	r0
    1274:	2f 93       	push	r18
    1276:	3f 93       	push	r19
    1278:	4f 93       	push	r20
    127a:	5f 93       	push	r21
    127c:	6f 93       	push	r22
    127e:	7f 93       	push	r23
    1280:	8f 93       	push	r24
    1282:	9f 93       	push	r25
    1284:	af 93       	push	r26
    1286:	bf 93       	push	r27
    1288:	ef 93       	push	r30
    128a:	ff 93       	push	r31
	cli();
    128c:	f8 94       	cli
	if(PINA & (1<<PINA6))
    128e:	06 9b       	sbis	0x00, 6	; 0
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <__vector_4+0x30>
	{
		TCNT0 = 0;
    1292:	16 bc       	out	0x26, r1	; 38
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <__vector_4+0x3c>
	}
	else
	{
		uint8_t UL = TCNT0;
    1296:	86 b5       	in	r24, 0x26	; 38
		gSensorBuffer[7] = UL;
    1298:	80 93 3f 12 	sts	0x123F, r24
		sensorDataFlag = true;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 40 12 	sts	0x1240, r24
	}
	TWI_send_sensors(sensors_get_data(), 0);
    12a2:	ed dc       	rcall	.-1574   	; 0xc7e <sensors_get_data>
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	d0 d0       	rcall	.+416    	; 0x1448 <TWI_send_sensors>
	sei();
    12a8:	78 94       	sei
}
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0b be       	out	0x3b, r0	; 59
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <set_twi_reciever_enable>:
	{
		sweepFlag_ = 0;
		return 1;
	}
	return 0;
}
    12d0:	85 e4       	ldi	r24, 0x45	; 69
    12d2:	80 93 bc 00 	sts	0x00BC, r24
    12d6:	08 95       	ret

000012d8 <clear_int>:
    12d8:	81 ec       	ldi	r24, 0xC1	; 193
    12da:	80 93 bc 00 	sts	0x00BC, r24
    12de:	08 95       	ret

000012e0 <start_bus>:
    12e0:	84 ea       	ldi	r24, 0xA4	; 164
    12e2:	80 93 bc 00 	sts	0x00BC, r24
    12e6:	08 95       	ret

000012e8 <stop_bus>:
    12e8:	85 ed       	ldi	r24, 0xD5	; 213
    12ea:	80 93 bc 00 	sts	0x00BC, r24
    12ee:	08 95       	ret

000012f0 <Error>:
    12f0:	80 91 b9 00 	lds	r24, 0x00B9
    12f4:	88 7f       	andi	r24, 0xF8	; 248
    12f6:	88 33       	cpi	r24, 0x38	; 56
    12f8:	09 f0       	breq	.+2      	; 0x12fc <Error+0xc>
    12fa:	f6 cf       	rjmp	.-20     	; 0x12e8 <stop_bus>
    12fc:	ed cf       	rjmp	.-38     	; 0x12d8 <clear_int>

000012fe <get_data>:
    12fe:	80 91 bb 00 	lds	r24, 0x00BB
    1302:	08 95       	ret

00001304 <wait_for_bus>:
    1304:	ec eb       	ldi	r30, 0xBC	; 188
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	88 23       	and	r24, r24
    130c:	ec f7       	brge	.-6      	; 0x1308 <wait_for_bus+0x4>
    130e:	08 95       	ret

00001310 <send_data_and_wait>:
    1310:	80 93 bb 00 	sts	0x00BB, r24
    1314:	84 e8       	ldi	r24, 0x84	; 132
    1316:	80 93 bc 00 	sts	0x00BC, r24
    131a:	f4 cf       	rjmp	.-24     	; 0x1304 <wait_for_bus>

0000131c <stop_twi>:
    131c:	10 92 5a 13 	sts	0x135A, r1
    1320:	10 92 59 13 	sts	0x1359, r1
    1324:	10 92 63 13 	sts	0x1363, r1
    1328:	10 92 62 13 	sts	0x1362, r1
    132c:	10 92 4f 13 	sts	0x134F, r1
    1330:	10 92 4e 13 	sts	0x134E, r1
    1334:	10 92 54 13 	sts	0x1354, r1
    1338:	10 92 53 13 	sts	0x1353, r1
    133c:	10 92 57 13 	sts	0x1357, r1
    1340:	10 92 56 13 	sts	0x1356, r1
    1344:	08 95       	ret

00001346 <reset_TWI>:
    1346:	ec eb       	ldi	r30, 0xBC	; 188
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 6c       	ori	r24, 0xC0	; 192
    134e:	80 83       	st	Z, r24
    1350:	08 95       	ret

00001352 <get_sensor_from_bus>:
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	c0 91 62 13 	lds	r28, 0x1362
    135a:	d0 91 63 13 	lds	r29, 0x1363
    135e:	c8 30       	cpi	r28, 0x08	; 8
    1360:	d1 05       	cpc	r29, r1
    1362:	91 f4       	brne	.+36     	; 0x1388 <get_sensor_from_bus+0x36>
    1364:	e4 e6       	ldi	r30, 0x64	; 100
    1366:	f3 e1       	ldi	r31, 0x13	; 19
    1368:	ac e6       	ldi	r26, 0x6C	; 108
    136a:	b3 e1       	ldi	r27, 0x13	; 19
    136c:	8c e6       	ldi	r24, 0x6C	; 108
    136e:	93 e1       	ldi	r25, 0x13	; 19
    1370:	21 91       	ld	r18, Z+
    1372:	2d 93       	st	X+, r18
    1374:	e8 17       	cp	r30, r24
    1376:	f9 07       	cpc	r31, r25
    1378:	d9 f7       	brne	.-10     	; 0x1370 <get_sensor_from_bus+0x1e>
    137a:	c1 df       	rcall	.-126    	; 0x12fe <get_data>
    137c:	80 93 5d 13 	sts	0x135D, r24
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	80 93 46 12 	sts	0x1246, r24
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <get_sensor_from_bus+0x50>
    1388:	ba df       	rcall	.-140    	; 0x12fe <get_data>
    138a:	cc 59       	subi	r28, 0x9C	; 156
    138c:	dc 4e       	sbci	r29, 0xEC	; 236
    138e:	88 83       	st	Y, r24
    1390:	80 91 62 13 	lds	r24, 0x1362
    1394:	90 91 63 13 	lds	r25, 0x1363
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	90 93 63 13 	sts	0x1363, r25
    139e:	80 93 62 13 	sts	0x1362, r24
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <get_control_settings_from_bus>:
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	c0 91 53 13 	lds	r28, 0x1353
    13b0:	d0 91 54 13 	lds	r29, 0x1354
    13b4:	a4 df       	rcall	.-184    	; 0x12fe <get_data>
    13b6:	c0 5b       	subi	r28, 0xB0	; 176
    13b8:	dc 4e       	sbci	r29, 0xEC	; 236
    13ba:	88 83       	st	Y, r24
    13bc:	10 92 54 13 	sts	0x1354, r1
    13c0:	10 92 53 13 	sts	0x1353, r1
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	08 95       	ret

000013ca <get_autonom_settings_from_bus>:
    13ca:	99 df       	rcall	.-206    	; 0x12fe <get_data>
    13cc:	80 93 4e 12 	sts	0x124E, r24
    13d0:	08 95       	ret

000013d2 <get_char_from_bus>:
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	c0 91 4e 13 	lds	r28, 0x134E
    13da:	d0 91 4f 13 	lds	r29, 0x134F
    13de:	8f df       	rcall	.-226    	; 0x12fe <get_data>
    13e0:	c1 5b       	subi	r28, 0xB1	; 177
    13e2:	dd 4e       	sbci	r29, 0xED	; 237
    13e4:	88 83       	st	Y, r24
    13e6:	80 91 4e 13 	lds	r24, 0x134E
    13ea:	90 91 4f 13 	lds	r25, 0x134F
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	90 93 4f 13 	sts	0x134F, r25
    13f4:	80 93 4e 13 	sts	0x134E, r24
    13f8:	80 93 5e 13 	sts	0x135E, r24
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <TWI_init>:
    1402:	80 93 55 13 	sts	0x1355, r24
    1406:	80 34       	cpi	r24, 0x40	; 64
    1408:	79 f0       	breq	.+30     	; 0x1428 <TWI_init+0x26>
    140a:	80 38       	cpi	r24, 0x80	; 128
    140c:	19 f0       	breq	.+6      	; 0x1414 <TWI_init+0x12>
    140e:	80 32       	cpi	r24, 0x20	; 32
    1410:	d1 f4       	brne	.+52     	; 0x1446 <TWI_init+0x44>
    1412:	12 c0       	rjmp	.+36     	; 0x1438 <TWI_init+0x36>
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	88 b9       	out	0x08, r24	; 8
    1418:	5b df       	rcall	.-330    	; 0x12d0 <set_twi_reciever_enable>
    141a:	8f e3       	ldi	r24, 0x3F	; 63
    141c:	80 93 b8 00 	sts	0x00B8, r24
    1420:	81 e8       	ldi	r24, 0x81	; 129
    1422:	80 93 ba 00 	sts	0x00BA, r24
    1426:	08 95       	ret
    1428:	8f e3       	ldi	r24, 0x3F	; 63
    142a:	80 93 b8 00 	sts	0x00B8, r24
    142e:	50 df       	rcall	.-352    	; 0x12d0 <set_twi_reciever_enable>
    1430:	80 e4       	ldi	r24, 0x40	; 64
    1432:	80 93 ba 00 	sts	0x00BA, r24
    1436:	08 95       	ret
    1438:	8f e3       	ldi	r24, 0x3F	; 63
    143a:	80 93 b8 00 	sts	0x00B8, r24
    143e:	48 df       	rcall	.-368    	; 0x12d0 <set_twi_reciever_enable>
    1440:	81 e2       	ldi	r24, 0x21	; 33
    1442:	80 93 ba 00 	sts	0x00BA, r24
    1446:	08 95       	ret

00001448 <TWI_send_sensors>:
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	d8 2f       	mov	r29, r24
    1454:	c9 2f       	mov	r28, r25
    1456:	f6 2e       	mov	r15, r22
    1458:	43 df       	rcall	.-378    	; 0x12e0 <start_bus>
    145a:	54 df       	rcall	.-344    	; 0x1304 <wait_for_bus>
    145c:	20 91 b9 00 	lds	r18, 0x00B9
    1460:	28 7f       	andi	r18, 0xF8	; 248
    1462:	28 30       	cpi	r18, 0x08	; 8
    1464:	19 f0       	breq	.+6      	; 0x146c <TWI_send_sensors+0x24>
    1466:	44 df       	rcall	.-376    	; 0x12f0 <Error>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	1a c0       	rjmp	.+52     	; 0x14a0 <TWI_send_sensors+0x58>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	50 df       	rcall	.-352    	; 0x1310 <send_data_and_wait>
    1470:	80 91 b9 00 	lds	r24, 0x00B9
    1474:	88 7f       	andi	r24, 0xF8	; 248
    1476:	88 31       	cpi	r24, 0x18	; 24
    1478:	19 f0       	breq	.+6      	; 0x1480 <TWI_send_sensors+0x38>
    147a:	3a df       	rcall	.-396    	; 0x12f0 <Error>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	10 c0       	rjmp	.+32     	; 0x14a0 <TWI_send_sensors+0x58>
    1480:	0d 2f       	mov	r16, r29
    1482:	1c 2f       	mov	r17, r28
    1484:	c0 e0       	ldi	r28, 0x00	; 0
    1486:	d0 e0       	ldi	r29, 0x00	; 0
    1488:	f8 01       	movw	r30, r16
    148a:	81 91       	ld	r24, Z+
    148c:	8f 01       	movw	r16, r30
    148e:	40 df       	rcall	.-384    	; 0x1310 <send_data_and_wait>
    1490:	21 96       	adiw	r28, 0x01	; 1
    1492:	c8 30       	cpi	r28, 0x08	; 8
    1494:	d1 05       	cpc	r29, r1
    1496:	c1 f7       	brne	.-16     	; 0x1488 <TWI_send_sensors+0x40>
    1498:	8f 2d       	mov	r24, r15
    149a:	3a df       	rcall	.-396    	; 0x1310 <send_data_and_wait>
    149c:	25 df       	rcall	.-438    	; 0x12e8 <stop_bus>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	08 95       	ret

000014ac <decode_message_TwiFIFO>:

//--------------------------FIFO------------------------------------------

uint8_t decode_message_TwiFIFO()
{
    14ac:	8f 92       	push	r8
    14ae:	9f 92       	push	r9
    14b0:	af 92       	push	r10
    14b2:	bf 92       	push	r11
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	// TODO: send to relevant party... the display for now
	
	display_clear();
	display_text_fixed_length(msg, length);
	return 0;
}
    14c8:	ad b6       	in	r10, 0x3d	; 61
    14ca:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	80 91 00 01 	lds	r24, 0x0100
    14d4:	90 91 01 01 	lds	r25, 0x0101
    14d8:	0e 94 2a 02 	call	0x454	; 0x454 <FifoRead>
    14dc:	81 11       	cpse	r24, r1
    14de:	46 c0       	rjmp	.+140    	; 0x156c <decode_message_TwiFIFO+0xc0>
	{
		//No new messages
		return 1; // error
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
    14e0:	c0 90 00 00 	lds	r12, 0x0000
    14e4:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];
    14e6:	96 01       	movw	r18, r12
    14e8:	21 50       	subi	r18, 0x01	; 1
    14ea:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	c1 14       	cp	r12, r1
    14f2:	d1 04       	cpc	r13, r1
    14f4:	11 f0       	breq	.+4      	; 0x14fa <decode_message_TwiFIFO+0x4e>
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
	char msg[length-1+ifzero];
    14fa:	82 0f       	add	r24, r18
    14fc:	93 1f       	adc	r25, r19
    14fe:	2d b7       	in	r18, 0x3d	; 61
    1500:	3e b7       	in	r19, 0x3e	; 62
    1502:	28 1b       	sub	r18, r24
    1504:	39 0b       	sbc	r19, r25
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	3e bf       	out	0x3e, r19	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	2d bf       	out	0x3d, r18	; 61
    1510:	2f 5f       	subi	r18, 0xFF	; 255
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	82 2e       	mov	r8, r18
    1516:	93 2e       	mov	r9, r19

	for(int i = 0; i < length; ++i)
    1518:	1c 14       	cp	r1, r12
    151a:	1d 04       	cpc	r1, r13
    151c:	f4 f4       	brge	.+60     	; 0x155a <decode_message_TwiFIFO+0xae>
    151e:	e2 2e       	mov	r14, r18
    1520:	f3 2e       	mov	r15, r19
    1522:	00 e0       	ldi	r16, 0x00	; 0
    1524:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gTwiFIFO, character))
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 91 00 01 	lds	r24, 0x0100
    152e:	90 91 01 01 	lds	r25, 0x0101
    1532:	0e 94 2a 02 	call	0x454	; 0x454 <FifoRead>
    1536:	88 23       	and	r24, r24
    1538:	31 f0       	breq	.+12     	; 0x1546 <decode_message_TwiFIFO+0x9a>
		{
			display_text("FIFO ERROR 2!");
    153a:	8e e2       	ldi	r24, 0x2E	; 46
    153c:	91 e1       	ldi	r25, 0x11	; 17
    153e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_text>
			return 1; // error
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	14 c0       	rjmp	.+40     	; 0x156e <decode_message_TwiFIFO+0xc2>
		}

		msg[i] = *character;
    1546:	20 91 00 00 	lds	r18, 0x0000
    154a:	f7 01       	movw	r30, r14
    154c:	21 93       	st	Z+, r18
    154e:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
    1550:	0f 5f       	subi	r16, 0xFF	; 255
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	0c 15       	cp	r16, r12
    1556:	1d 05       	cpc	r17, r13
    1558:	34 f3       	brlt	.-52     	; 0x1526 <decode_message_TwiFIFO+0x7a>
	}
	
	
	// TODO: send to relevant party... the display for now
	
	display_clear();
    155a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <display_clear>
	display_text_fixed_length(msg, length);
    155e:	b6 01       	movw	r22, r12
    1560:	88 2d       	mov	r24, r8
    1562:	99 2d       	mov	r25, r9
    1564:	0e 94 c7 01 	call	0x38e	; 0x38e <display_text_fixed_length>
	return 0;
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	01 c0       	rjmp	.+2      	; 0x156e <decode_message_TwiFIFO+0xc2>
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
	{
		//No new messages
		return 1; // error
    156c:	81 e0       	ldi	r24, 0x01	; 1
	// TODO: send to relevant party... the display for now
	
	display_clear();
	display_text_fixed_length(msg, length);
	return 0;
}
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	be be       	out	0x3e, r11	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	ad be       	out	0x3d, r10	; 61
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	cf 90       	pop	r12
    1588:	bf 90       	pop	r11
    158a:	af 90       	pop	r10
    158c:	9f 90       	pop	r9
    158e:	8f 90       	pop	r8
    1590:	08 95       	ret

00001592 <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	d8 2f       	mov	r29, r24
    159c:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, messageLength))
    159e:	60 91 5e 13 	lds	r22, 0x135E
    15a2:	80 91 00 01 	lds	r24, 0x0100
    15a6:	90 91 01 01 	lds	r25, 0x0101
    15aa:	0e 94 0a 02 	call	0x414	; 0x414 <FifoWrite>
    15ae:	81 11       	cpse	r24, r1
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <write_to_TwiFIFO+0x2a>
	{
		display_text("FIFO ERROR 3");
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    15b2:	80 91 5e 13 	lds	r24, 0x135E
    15b6:	81 11       	cpse	r24, r1
    15b8:	07 c0       	rjmp	.+14     	; 0x15c8 <write_to_TwiFIFO+0x36>
    15ba:	23 c0       	rjmp	.+70     	; 0x1602 <write_to_TwiFIFO+0x70>

uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, messageLength))
	{
		display_text("FIFO ERROR 3");
    15bc:	8c e3       	ldi	r24, 0x3C	; 60
    15be:	91 e1       	ldi	r25, 0x11	; 17
    15c0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_text>
		return 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	1d c0       	rjmp	.+58     	; 0x1602 <write_to_TwiFIFO+0x70>
    15c8:	0d 2f       	mov	r16, r29
    15ca:	1c 2f       	mov	r17, r28
	}
	
	for(int i = 0; i < messageLength; ++i)
    15cc:	c0 e0       	ldi	r28, 0x00	; 0
    15ce:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    15d0:	f8 01       	movw	r30, r16
    15d2:	61 91       	ld	r22, Z+
    15d4:	8f 01       	movw	r16, r30
    15d6:	80 91 00 01 	lds	r24, 0x0100
    15da:	90 91 01 01 	lds	r25, 0x0101
    15de:	0e 94 0a 02 	call	0x414	; 0x414 <FifoWrite>
    15e2:	88 23       	and	r24, r24
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <write_to_TwiFIFO+0x60>
		{
			display_text("FIFO ERROR 4");
    15e6:	89 e4       	ldi	r24, 0x49	; 73
    15e8:	91 e1       	ldi	r25, 0x11	; 17
    15ea:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_text>
			return 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	08 c0       	rjmp	.+16     	; 0x1602 <write_to_TwiFIFO+0x70>
	{
		display_text("FIFO ERROR 3");
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    15f2:	21 96       	adiw	r28, 0x01	; 1
    15f4:	80 91 5e 13 	lds	r24, 0x135E
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	c8 17       	cp	r28, r24
    15fc:	d9 07       	cpc	r29, r25
    15fe:	44 f3       	brlt	.-48     	; 0x15d0 <write_to_TwiFIFO+0x3e>
			display_text("FIFO ERROR 4");
			return 1;
		}
	}
	
	return 0;
    1600:	80 e0       	ldi	r24, 0x00	; 0
}
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	08 95       	ret

0000160c <__vector_26>:


//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    160c:	1f 92       	push	r1
    160e:	0f 92       	push	r0
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	0f 92       	push	r0
    1614:	11 24       	eor	r1, r1
    1616:	0b b6       	in	r0, 0x3b	; 59
    1618:	0f 92       	push	r0
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
	switch(myAdress)
    1636:	80 91 55 13 	lds	r24, 0x1355
    163a:	80 34       	cpi	r24, 0x40	; 64
    163c:	09 f4       	brne	.+2      	; 0x1640 <__vector_26+0x34>
    163e:	87 c0       	rjmp	.+270    	; 0x174e <__vector_26+0x142>
    1640:	80 38       	cpi	r24, 0x80	; 128
    1642:	21 f0       	breq	.+8      	; 0x164c <__vector_26+0x40>
    1644:	80 32       	cpi	r24, 0x20	; 32
    1646:	09 f0       	breq	.+2      	; 0x164a <__vector_26+0x3e>
    1648:	7f c1       	rjmp	.+766    	; 0x1948 <__vector_26+0x33c>
    164a:	c9 c0       	rjmp	.+402    	; 0x17de <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    164c:	80 91 b9 00 	lds	r24, 0x00B9
    1650:	88 7f       	andi	r24, 0xF8	; 248
    1652:	80 36       	cpi	r24, 0x60	; 96
    1654:	29 f0       	breq	.+10     	; 0x1660 <__vector_26+0x54>
    1656:	80 91 b9 00 	lds	r24, 0x00B9
    165a:	88 7f       	andi	r24, 0xF8	; 248
    165c:	88 36       	cpi	r24, 0x68	; 104
    165e:	21 f4       	brne	.+8      	; 0x1668 <__vector_26+0x5c>
			{
				instruction = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 58 13 	sts	0x1358, r24
    1666:	71 c0       	rjmp	.+226    	; 0x174a <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1668:	80 91 b9 00 	lds	r24, 0x00B9
    166c:	88 7f       	andi	r24, 0xF8	; 248
    166e:	80 37       	cpi	r24, 0x70	; 112
    1670:	29 f0       	breq	.+10     	; 0x167c <__vector_26+0x70>
    1672:	80 91 b9 00 	lds	r24, 0x00B9
    1676:	88 7f       	andi	r24, 0xF8	; 248
    1678:	88 37       	cpi	r24, 0x78	; 120
    167a:	39 f4       	brne	.+14     	; 0x168a <__vector_26+0x7e>
			{
				currentInstruction = 255;
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	90 93 61 13 	sts	0x1361, r25
    1684:	80 93 60 13 	sts	0x1360, r24
    1688:	60 c0       	rjmp	.+192    	; 0x174a <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    168a:	80 91 b9 00 	lds	r24, 0x00B9
    168e:	88 7f       	andi	r24, 0xF8	; 248
    1690:	80 38       	cpi	r24, 0x80	; 128
    1692:	b9 f5       	brne	.+110    	; 0x1702 <__vector_26+0xf6>
			{
				if(instruction)
    1694:	80 91 58 13 	lds	r24, 0x1358
    1698:	88 23       	and	r24, r24
    169a:	41 f0       	breq	.+16     	; 0x16ac <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    169c:	30 de       	rcall	.-928    	; 0x12fe <get_data>
    169e:	80 93 60 13 	sts	0x1360, r24
    16a2:	10 92 61 13 	sts	0x1361, r1
					instruction = 0;
    16a6:	10 92 58 13 	sts	0x1358, r1
    16aa:	4f c0       	rjmp	.+158    	; 0x174a <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    16ac:	80 91 60 13 	lds	r24, 0x1360
    16b0:	90 91 61 13 	lds	r25, 0x1361
    16b4:	85 30       	cpi	r24, 0x05	; 5
    16b6:	91 05       	cpc	r25, r1
    16b8:	71 f0       	breq	.+28     	; 0x16d6 <__vector_26+0xca>
    16ba:	24 f4       	brge	.+8      	; 0x16c4 <__vector_26+0xb8>
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	09 f0       	breq	.+2      	; 0x16c2 <__vector_26+0xb6>
    16c0:	44 c0       	rjmp	.+136    	; 0x174a <__vector_26+0x13e>
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <__vector_26+0xc6>
    16c4:	86 30       	cpi	r24, 0x06	; 6
    16c6:	91 05       	cpc	r25, r1
    16c8:	51 f0       	breq	.+20     	; 0x16de <__vector_26+0xd2>
    16ca:	49 97       	sbiw	r24, 0x19	; 25
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__vector_26+0xc4>
    16ce:	3d c0       	rjmp	.+122    	; 0x174a <__vector_26+0x13e>
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    16d2:	6a de       	rcall	.-812    	; 0x13a8 <get_control_settings_from_bus>
							break;
    16d4:	3a c0       	rjmp	.+116    	; 0x174a <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    16d6:	79 de       	rcall	.-782    	; 0x13ca <get_autonom_settings_from_bus>
							break;
    16d8:	38 c0       	rjmp	.+112    	; 0x174a <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    16da:	7b de       	rcall	.-778    	; 0x13d2 <get_char_from_bus>
							break;
    16dc:	36 c0       	rjmp	.+108    	; 0x174a <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    16de:	c0 91 56 13 	lds	r28, 0x1356
    16e2:	d0 91 57 13 	lds	r29, 0x1357
    16e6:	0b de       	rcall	.-1002   	; 0x12fe <get_data>
    16e8:	c9 5b       	subi	r28, 0xB9	; 185
    16ea:	dd 4e       	sbci	r29, 0xED	; 237
    16ec:	88 83       	st	Y, r24
	floatCounter += 1;
    16ee:	80 91 56 13 	lds	r24, 0x1356
    16f2:	90 91 57 13 	lds	r25, 0x1357
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	90 93 57 13 	sts	0x1357, r25
    16fc:	80 93 56 13 	sts	0x1356, r24
    1700:	24 c0       	rjmp	.+72     	; 0x174a <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    1702:	80 91 b9 00 	lds	r24, 0x00B9
    1706:	88 7f       	andi	r24, 0xF8	; 248
    1708:	80 39       	cpi	r24, 0x90	; 144
    170a:	11 f4       	brne	.+4      	; 0x1710 <__vector_26+0x104>
			{
				get_sensor_from_bus();
    170c:	22 de       	rcall	.-956    	; 0x1352 <get_sensor_from_bus>
    170e:	1d c0       	rjmp	.+58     	; 0x174a <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    1710:	80 91 b9 00 	lds	r24, 0x00B9
    1714:	88 7f       	andi	r24, 0xF8	; 248
    1716:	80 3a       	cpi	r24, 0xA0	; 160
    1718:	c1 f4       	brne	.+48     	; 0x174a <__vector_26+0x13e>
			{
				stop_twi();
    171a:	00 de       	rcall	.-1024   	; 0x131c <stop_twi>
				switch(currentInstruction)
    171c:	80 91 60 13 	lds	r24, 0x1360
    1720:	90 91 61 13 	lds	r25, 0x1361
    1724:	85 30       	cpi	r24, 0x05	; 5
    1726:	91 05       	cpc	r25, r1
    1728:	49 f0       	breq	.+18     	; 0x173c <__vector_26+0x130>
    172a:	89 31       	cpi	r24, 0x19	; 25
    172c:	91 05       	cpc	r25, r1
    172e:	51 f0       	breq	.+20     	; 0x1744 <__vector_26+0x138>
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	59 f4       	brne	.+22     	; 0x174a <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	80 93 44 12 	sts	0x1244, r24
						break;
    173a:	07 c0       	rjmp	.+14     	; 0x174a <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 43 12 	sts	0x1243, r24
						break;
    1742:	03 c0       	rjmp	.+6      	; 0x174a <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1744:	8f e4       	ldi	r24, 0x4F	; 79
    1746:	92 e1       	ldi	r25, 0x12	; 18
    1748:	24 df       	rcall	.-440    	; 0x1592 <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    174a:	fd dd       	rcall	.-1030   	; 0x1346 <reset_TWI>
			break;
    174c:	fd c0       	rjmp	.+506    	; 0x1948 <__vector_26+0x33c>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    174e:	80 91 b9 00 	lds	r24, 0x00B9
    1752:	88 7f       	andi	r24, 0xF8	; 248
    1754:	80 36       	cpi	r24, 0x60	; 96
    1756:	29 f0       	breq	.+10     	; 0x1762 <__vector_26+0x156>
    1758:	80 91 b9 00 	lds	r24, 0x00B9
    175c:	88 7f       	andi	r24, 0xF8	; 248
    175e:	88 36       	cpi	r24, 0x68	; 104
    1760:	21 f4       	brne	.+8      	; 0x176a <__vector_26+0x15e>
			{
				instruction = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 93 58 13 	sts	0x1358, r24
    1768:	38 c0       	rjmp	.+112    	; 0x17da <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    176a:	80 91 b9 00 	lds	r24, 0x00B9
    176e:	88 7f       	andi	r24, 0xF8	; 248
    1770:	80 38       	cpi	r24, 0x80	; 128
    1772:	e1 f4       	brne	.+56     	; 0x17ac <__vector_26+0x1a0>
			{
				if(instruction)
    1774:	80 91 58 13 	lds	r24, 0x1358
    1778:	88 23       	and	r24, r24
    177a:	41 f0       	breq	.+16     	; 0x178c <__vector_26+0x180>
				{
					currentInstruction = get_data();
    177c:	c0 dd       	rcall	.-1152   	; 0x12fe <get_data>
    177e:	80 93 60 13 	sts	0x1360, r24
    1782:	10 92 61 13 	sts	0x1361, r1
					instruction = 0;
    1786:	10 92 58 13 	sts	0x1358, r1
    178a:	27 c0       	rjmp	.+78     	; 0x17da <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    178c:	80 91 60 13 	lds	r24, 0x1360
    1790:	90 91 61 13 	lds	r25, 0x1361
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	91 05       	cpc	r25, r1
    1798:	19 f0       	breq	.+6      	; 0x17a0 <__vector_26+0x194>
    179a:	49 97       	sbiw	r24, 0x19	; 25
    179c:	f1 f4       	brne	.+60     	; 0x17da <__vector_26+0x1ce>
    179e:	04 c0       	rjmp	.+8      	; 0x17a8 <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    17a0:	ae dd       	rcall	.-1188   	; 0x12fe <get_data>
    17a2:	80 93 5f 13 	sts	0x135F, r24
    17a6:	19 c0       	rjmp	.+50     	; 0x17da <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    17a8:	14 de       	rcall	.-984    	; 0x13d2 <get_char_from_bus>
							break;
    17aa:	17 c0       	rjmp	.+46     	; 0x17da <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    17ac:	80 91 b9 00 	lds	r24, 0x00B9
    17b0:	88 7f       	andi	r24, 0xF8	; 248
    17b2:	80 3a       	cpi	r24, 0xA0	; 160
    17b4:	91 f4       	brne	.+36     	; 0x17da <__vector_26+0x1ce>
			{
				stop_twi();
    17b6:	b2 dd       	rcall	.-1180   	; 0x131c <stop_twi>
				switch(currentInstruction)
    17b8:	80 91 60 13 	lds	r24, 0x1360
    17bc:	90 91 61 13 	lds	r25, 0x1361
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	91 05       	cpc	r25, r1
    17c4:	19 f0       	breq	.+6      	; 0x17cc <__vector_26+0x1c0>
    17c6:	49 97       	sbiw	r24, 0x19	; 25
    17c8:	41 f4       	brne	.+16     	; 0x17da <__vector_26+0x1ce>
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 93 41 12 	sts	0x1241, r24
						break;
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    17d4:	8f e4       	ldi	r24, 0x4F	; 79
    17d6:	92 e1       	ldi	r25, 0x12	; 18
    17d8:	dc de       	rcall	.-584    	; 0x1592 <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    17da:	b5 dd       	rcall	.-1174   	; 0x1346 <reset_TWI>
			break;
    17dc:	b5 c0       	rjmp	.+362    	; 0x1948 <__vector_26+0x33c>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    17de:	80 91 b9 00 	lds	r24, 0x00B9
    17e2:	88 7f       	andi	r24, 0xF8	; 248
    17e4:	80 36       	cpi	r24, 0x60	; 96
    17e6:	29 f0       	breq	.+10     	; 0x17f2 <__vector_26+0x1e6>
    17e8:	80 91 b9 00 	lds	r24, 0x00B9
    17ec:	88 7f       	andi	r24, 0xF8	; 248
    17ee:	88 36       	cpi	r24, 0x68	; 104
    17f0:	21 f4       	brne	.+8      	; 0x17fa <__vector_26+0x1ee>
			{
				instruction = 1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	80 93 58 13 	sts	0x1358, r24
    17f8:	a6 c0       	rjmp	.+332    	; 0x1946 <__vector_26+0x33a>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    17fa:	80 91 b9 00 	lds	r24, 0x00B9
    17fe:	88 7f       	andi	r24, 0xF8	; 248
    1800:	80 37       	cpi	r24, 0x70	; 112
    1802:	29 f0       	breq	.+10     	; 0x180e <__vector_26+0x202>
    1804:	80 91 b9 00 	lds	r24, 0x00B9
    1808:	88 7f       	andi	r24, 0xF8	; 248
    180a:	88 37       	cpi	r24, 0x78	; 120
    180c:	39 f4       	brne	.+14     	; 0x181c <__vector_26+0x210>
			{
				currentInstruction = 255;
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	90 93 61 13 	sts	0x1361, r25
    1816:	80 93 60 13 	sts	0x1360, r24
    181a:	95 c0       	rjmp	.+298    	; 0x1946 <__vector_26+0x33a>
			}
			else if(CONTROL == DATA_SLAW)
    181c:	80 91 b9 00 	lds	r24, 0x00B9
    1820:	88 7f       	andi	r24, 0xF8	; 248
    1822:	80 38       	cpi	r24, 0x80	; 128
    1824:	09 f0       	breq	.+2      	; 0x1828 <__vector_26+0x21c>
    1826:	62 c0       	rjmp	.+196    	; 0x18ec <__vector_26+0x2e0>
			{
				if(instruction)
    1828:	80 91 58 13 	lds	r24, 0x1358
    182c:	88 23       	and	r24, r24
    182e:	41 f0       	breq	.+16     	; 0x1840 <__vector_26+0x234>
				{
					currentInstruction = get_data();
    1830:	66 dd       	rcall	.-1332   	; 0x12fe <get_data>
    1832:	80 93 60 13 	sts	0x1360, r24
    1836:	10 92 61 13 	sts	0x1361, r1
					instruction = 0;
    183a:	10 92 58 13 	sts	0x1358, r1
    183e:	83 c0       	rjmp	.+262    	; 0x1946 <__vector_26+0x33a>
				}
				else
				{
					switch(currentInstruction)
    1840:	80 91 60 13 	lds	r24, 0x1360
    1844:	90 91 61 13 	lds	r25, 0x1361
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <__vector_26+0x244>
    184e:	4a c0       	rjmp	.+148    	; 0x18e4 <__vector_26+0x2d8>
    1850:	1c f4       	brge	.+6      	; 0x1858 <__vector_26+0x24c>
    1852:	89 2b       	or	r24, r25
    1854:	41 f0       	breq	.+16     	; 0x1866 <__vector_26+0x25a>
    1856:	77 c0       	rjmp	.+238    	; 0x1946 <__vector_26+0x33a>
    1858:	84 30       	cpi	r24, 0x04	; 4
    185a:	91 05       	cpc	r25, r1
    185c:	b1 f0       	breq	.+44     	; 0x188a <__vector_26+0x27e>
    185e:	05 97       	sbiw	r24, 0x05	; 5
    1860:	09 f0       	breq	.+2      	; 0x1864 <__vector_26+0x258>
    1862:	71 c0       	rjmp	.+226    	; 0x1946 <__vector_26+0x33a>
    1864:	41 c0       	rjmp	.+130    	; 0x18e8 <__vector_26+0x2dc>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    1866:	c0 91 59 13 	lds	r28, 0x1359
    186a:	d0 91 5a 13 	lds	r29, 0x135A
    186e:	47 dd       	rcall	.-1394   	; 0x12fe <get_data>
    1870:	c5 5b       	subi	r28, 0xB5	; 181
    1872:	dd 4e       	sbci	r29, 0xED	; 237
    1874:	88 83       	st	Y, r24
	currentCommand += 1;
    1876:	80 91 59 13 	lds	r24, 0x1359
    187a:	90 91 5a 13 	lds	r25, 0x135A
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	90 93 5a 13 	sts	0x135A, r25
    1884:	80 93 59 13 	sts	0x1359, r24
    1888:	5e c0       	rjmp	.+188    	; 0x1946 <__vector_26+0x33a>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	int ele = get_data();
    188a:	39 dd       	rcall	.-1422   	; 0x12fe <get_data>
	if(ele == 0)
    188c:	81 11       	cpse	r24, r1
    188e:	0a c0       	rjmp	.+20     	; 0x18a4 <__vector_26+0x298>
	{
		elevation -= 1;
    1890:	80 91 5b 13 	lds	r24, 0x135B
    1894:	90 91 5c 13 	lds	r25, 0x135C
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	90 93 5c 13 	sts	0x135C, r25
    189e:	80 93 5b 13 	sts	0x135B, r24
    18a2:	09 c0       	rjmp	.+18     	; 0x18b6 <__vector_26+0x2aa>
	}
	else
	{
		elevation += 1;
    18a4:	80 91 5b 13 	lds	r24, 0x135B
    18a8:	90 91 5c 13 	lds	r25, 0x135C
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	90 93 5c 13 	sts	0x135C, r25
    18b2:	80 93 5b 13 	sts	0x135B, r24
	}
	if(elevation < 1)
    18b6:	80 91 5b 13 	lds	r24, 0x135B
    18ba:	90 91 5c 13 	lds	r25, 0x135C
    18be:	18 16       	cp	r1, r24
    18c0:	19 06       	cpc	r1, r25
    18c2:	3c f0       	brlt	.+14     	; 0x18d2 <__vector_26+0x2c6>
	elevation = 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	90 93 5c 13 	sts	0x135C, r25
    18cc:	80 93 5b 13 	sts	0x135B, r24
    18d0:	3a c0       	rjmp	.+116    	; 0x1946 <__vector_26+0x33a>
	else if(elevation > 7) // 7 nivåer?!
    18d2:	08 97       	sbiw	r24, 0x08	; 8
    18d4:	c4 f1       	brlt	.+112    	; 0x1946 <__vector_26+0x33a>
	elevation = 7;
    18d6:	87 e0       	ldi	r24, 0x07	; 7
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	90 93 5c 13 	sts	0x135C, r25
    18de:	80 93 5b 13 	sts	0x135B, r24
    18e2:	31 c0       	rjmp	.+98     	; 0x1946 <__vector_26+0x33a>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    18e4:	61 dd       	rcall	.-1342   	; 0x13a8 <get_control_settings_from_bus>
							break;
    18e6:	2f c0       	rjmp	.+94     	; 0x1946 <__vector_26+0x33a>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    18e8:	70 dd       	rcall	.-1312   	; 0x13ca <get_autonom_settings_from_bus>
							break;
    18ea:	2d c0       	rjmp	.+90     	; 0x1946 <__vector_26+0x33a>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    18ec:	80 91 b9 00 	lds	r24, 0x00B9
    18f0:	88 7f       	andi	r24, 0xF8	; 248
    18f2:	80 39       	cpi	r24, 0x90	; 144
    18f4:	11 f4       	brne	.+4      	; 0x18fa <__vector_26+0x2ee>
			{
				get_sensor_from_bus();
    18f6:	2d dd       	rcall	.-1446   	; 0x1352 <get_sensor_from_bus>
    18f8:	26 c0       	rjmp	.+76     	; 0x1946 <__vector_26+0x33a>
			}
			else if (CONTROL == STOP)
    18fa:	80 91 b9 00 	lds	r24, 0x00B9
    18fe:	88 7f       	andi	r24, 0xF8	; 248
    1900:	80 3a       	cpi	r24, 0xA0	; 160
    1902:	09 f5       	brne	.+66     	; 0x1946 <__vector_26+0x33a>
			{
				stop_twi();
    1904:	0b dd       	rcall	.-1514   	; 0x131c <stop_twi>
				switch(currentInstruction)
    1906:	80 91 60 13 	lds	r24, 0x1360
    190a:	90 91 61 13 	lds	r25, 0x1361
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	91 05       	cpc	r25, r1
    1912:	91 f0       	breq	.+36     	; 0x1938 <__vector_26+0x32c>
    1914:	1c f4       	brge	.+6      	; 0x191c <__vector_26+0x310>
    1916:	89 2b       	or	r24, r25
    1918:	39 f0       	breq	.+14     	; 0x1928 <__vector_26+0x31c>
    191a:	15 c0       	rjmp	.+42     	; 0x1946 <__vector_26+0x33a>
    191c:	84 30       	cpi	r24, 0x04	; 4
    191e:	91 05       	cpc	r25, r1
    1920:	39 f0       	breq	.+14     	; 0x1930 <__vector_26+0x324>
    1922:	05 97       	sbiw	r24, 0x05	; 5
    1924:	81 f4       	brne	.+32     	; 0x1946 <__vector_26+0x33a>
    1926:	0c c0       	rjmp	.+24     	; 0x1940 <__vector_26+0x334>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	80 93 45 12 	sts	0x1245, r24
						break;
    192e:	0b c0       	rjmp	.+22     	; 0x1946 <__vector_26+0x33a>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	80 93 42 12 	sts	0x1242, r24
						break;
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <__vector_26+0x33a>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 44 12 	sts	0x1244, r24
						break;
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <__vector_26+0x33a>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	80 93 43 12 	sts	0x1243, r24
						break;
					}
				}
			}
			reset_TWI();
    1946:	ff dc       	rcall	.-1538   	; 0x1346 <reset_TWI>
			break;
		}
	}
    1948:	ff 91       	pop	r31
    194a:	ef 91       	pop	r30
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	bf 91       	pop	r27
    1952:	af 91       	pop	r26
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	7f 91       	pop	r23
    195a:	6f 91       	pop	r22
    195c:	5f 91       	pop	r21
    195e:	4f 91       	pop	r20
    1960:	3f 91       	pop	r19
    1962:	2f 91       	pop	r18
    1964:	0f 90       	pop	r0
    1966:	0b be       	out	0x3b, r0	; 59
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <__subsf3>:
    1972:	50 58       	subi	r21, 0x80	; 128

00001974 <__addsf3>:
    1974:	bb 27       	eor	r27, r27
    1976:	aa 27       	eor	r26, r26
    1978:	0e d0       	rcall	.+28     	; 0x1996 <__addsf3x>
    197a:	75 c1       	rjmp	.+746    	; 0x1c66 <__fp_round>
    197c:	66 d1       	rcall	.+716    	; 0x1c4a <__fp_pscA>
    197e:	30 f0       	brcs	.+12     	; 0x198c <__addsf3+0x18>
    1980:	6b d1       	rcall	.+726    	; 0x1c58 <__fp_pscB>
    1982:	20 f0       	brcs	.+8      	; 0x198c <__addsf3+0x18>
    1984:	31 f4       	brne	.+12     	; 0x1992 <__addsf3+0x1e>
    1986:	9f 3f       	cpi	r25, 0xFF	; 255
    1988:	11 f4       	brne	.+4      	; 0x198e <__addsf3+0x1a>
    198a:	1e f4       	brtc	.+6      	; 0x1992 <__addsf3+0x1e>
    198c:	5b c1       	rjmp	.+694    	; 0x1c44 <__fp_nan>
    198e:	0e f4       	brtc	.+2      	; 0x1992 <__addsf3+0x1e>
    1990:	e0 95       	com	r30
    1992:	e7 fb       	bst	r30, 7
    1994:	51 c1       	rjmp	.+674    	; 0x1c38 <__fp_inf>

00001996 <__addsf3x>:
    1996:	e9 2f       	mov	r30, r25
    1998:	77 d1       	rcall	.+750    	; 0x1c88 <__fp_split3>
    199a:	80 f3       	brcs	.-32     	; 0x197c <__addsf3+0x8>
    199c:	ba 17       	cp	r27, r26
    199e:	62 07       	cpc	r22, r18
    19a0:	73 07       	cpc	r23, r19
    19a2:	84 07       	cpc	r24, r20
    19a4:	95 07       	cpc	r25, r21
    19a6:	18 f0       	brcs	.+6      	; 0x19ae <__addsf3x+0x18>
    19a8:	71 f4       	brne	.+28     	; 0x19c6 <__addsf3x+0x30>
    19aa:	9e f5       	brtc	.+102    	; 0x1a12 <__addsf3x+0x7c>
    19ac:	8f c1       	rjmp	.+798    	; 0x1ccc <__fp_zero>
    19ae:	0e f4       	brtc	.+2      	; 0x19b2 <__addsf3x+0x1c>
    19b0:	e0 95       	com	r30
    19b2:	0b 2e       	mov	r0, r27
    19b4:	ba 2f       	mov	r27, r26
    19b6:	a0 2d       	mov	r26, r0
    19b8:	0b 01       	movw	r0, r22
    19ba:	b9 01       	movw	r22, r18
    19bc:	90 01       	movw	r18, r0
    19be:	0c 01       	movw	r0, r24
    19c0:	ca 01       	movw	r24, r20
    19c2:	a0 01       	movw	r20, r0
    19c4:	11 24       	eor	r1, r1
    19c6:	ff 27       	eor	r31, r31
    19c8:	59 1b       	sub	r21, r25
    19ca:	99 f0       	breq	.+38     	; 0x19f2 <__addsf3x+0x5c>
    19cc:	59 3f       	cpi	r21, 0xF9	; 249
    19ce:	50 f4       	brcc	.+20     	; 0x19e4 <__addsf3x+0x4e>
    19d0:	50 3e       	cpi	r21, 0xE0	; 224
    19d2:	68 f1       	brcs	.+90     	; 0x1a2e <__addsf3x+0x98>
    19d4:	1a 16       	cp	r1, r26
    19d6:	f0 40       	sbci	r31, 0x00	; 0
    19d8:	a2 2f       	mov	r26, r18
    19da:	23 2f       	mov	r18, r19
    19dc:	34 2f       	mov	r19, r20
    19de:	44 27       	eor	r20, r20
    19e0:	58 5f       	subi	r21, 0xF8	; 248
    19e2:	f3 cf       	rjmp	.-26     	; 0x19ca <__addsf3x+0x34>
    19e4:	46 95       	lsr	r20
    19e6:	37 95       	ror	r19
    19e8:	27 95       	ror	r18
    19ea:	a7 95       	ror	r26
    19ec:	f0 40       	sbci	r31, 0x00	; 0
    19ee:	53 95       	inc	r21
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__addsf3x+0x4e>
    19f2:	7e f4       	brtc	.+30     	; 0x1a12 <__addsf3x+0x7c>
    19f4:	1f 16       	cp	r1, r31
    19f6:	ba 0b       	sbc	r27, r26
    19f8:	62 0b       	sbc	r22, r18
    19fa:	73 0b       	sbc	r23, r19
    19fc:	84 0b       	sbc	r24, r20
    19fe:	ba f0       	brmi	.+46     	; 0x1a2e <__addsf3x+0x98>
    1a00:	91 50       	subi	r25, 0x01	; 1
    1a02:	a1 f0       	breq	.+40     	; 0x1a2c <__addsf3x+0x96>
    1a04:	ff 0f       	add	r31, r31
    1a06:	bb 1f       	adc	r27, r27
    1a08:	66 1f       	adc	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	c2 f7       	brpl	.-16     	; 0x1a00 <__addsf3x+0x6a>
    1a10:	0e c0       	rjmp	.+28     	; 0x1a2e <__addsf3x+0x98>
    1a12:	ba 0f       	add	r27, r26
    1a14:	62 1f       	adc	r22, r18
    1a16:	73 1f       	adc	r23, r19
    1a18:	84 1f       	adc	r24, r20
    1a1a:	48 f4       	brcc	.+18     	; 0x1a2e <__addsf3x+0x98>
    1a1c:	87 95       	ror	r24
    1a1e:	77 95       	ror	r23
    1a20:	67 95       	ror	r22
    1a22:	b7 95       	ror	r27
    1a24:	f7 95       	ror	r31
    1a26:	9e 3f       	cpi	r25, 0xFE	; 254
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <__addsf3x+0x96>
    1a2a:	b3 cf       	rjmp	.-154    	; 0x1992 <__addsf3+0x1e>
    1a2c:	93 95       	inc	r25
    1a2e:	88 0f       	add	r24, r24
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <__addsf3x+0x9e>
    1a32:	99 27       	eor	r25, r25
    1a34:	ee 0f       	add	r30, r30
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	08 95       	ret

00001a3c <__cmpsf2>:
    1a3c:	d9 d0       	rcall	.+434    	; 0x1bf0 <__fp_cmp>
    1a3e:	08 f4       	brcc	.+2      	; 0x1a42 <__cmpsf2+0x6>
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	08 95       	ret

00001a44 <__divsf3>:
    1a44:	0c d0       	rcall	.+24     	; 0x1a5e <__divsf3x>
    1a46:	0f c1       	rjmp	.+542    	; 0x1c66 <__fp_round>
    1a48:	07 d1       	rcall	.+526    	; 0x1c58 <__fp_pscB>
    1a4a:	40 f0       	brcs	.+16     	; 0x1a5c <__divsf3+0x18>
    1a4c:	fe d0       	rcall	.+508    	; 0x1c4a <__fp_pscA>
    1a4e:	30 f0       	brcs	.+12     	; 0x1a5c <__divsf3+0x18>
    1a50:	21 f4       	brne	.+8      	; 0x1a5a <__divsf3+0x16>
    1a52:	5f 3f       	cpi	r21, 0xFF	; 255
    1a54:	19 f0       	breq	.+6      	; 0x1a5c <__divsf3+0x18>
    1a56:	f0 c0       	rjmp	.+480    	; 0x1c38 <__fp_inf>
    1a58:	51 11       	cpse	r21, r1
    1a5a:	39 c1       	rjmp	.+626    	; 0x1cce <__fp_szero>
    1a5c:	f3 c0       	rjmp	.+486    	; 0x1c44 <__fp_nan>

00001a5e <__divsf3x>:
    1a5e:	14 d1       	rcall	.+552    	; 0x1c88 <__fp_split3>
    1a60:	98 f3       	brcs	.-26     	; 0x1a48 <__divsf3+0x4>

00001a62 <__divsf3_pse>:
    1a62:	99 23       	and	r25, r25
    1a64:	c9 f3       	breq	.-14     	; 0x1a58 <__divsf3+0x14>
    1a66:	55 23       	and	r21, r21
    1a68:	b1 f3       	breq	.-20     	; 0x1a56 <__divsf3+0x12>
    1a6a:	95 1b       	sub	r25, r21
    1a6c:	55 0b       	sbc	r21, r21
    1a6e:	bb 27       	eor	r27, r27
    1a70:	aa 27       	eor	r26, r26
    1a72:	62 17       	cp	r22, r18
    1a74:	73 07       	cpc	r23, r19
    1a76:	84 07       	cpc	r24, r20
    1a78:	38 f0       	brcs	.+14     	; 0x1a88 <__divsf3_pse+0x26>
    1a7a:	9f 5f       	subi	r25, 0xFF	; 255
    1a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7e:	22 0f       	add	r18, r18
    1a80:	33 1f       	adc	r19, r19
    1a82:	44 1f       	adc	r20, r20
    1a84:	aa 1f       	adc	r26, r26
    1a86:	a9 f3       	breq	.-22     	; 0x1a72 <__divsf3_pse+0x10>
    1a88:	33 d0       	rcall	.+102    	; 0x1af0 <__divsf3_pse+0x8e>
    1a8a:	0e 2e       	mov	r0, r30
    1a8c:	3a f0       	brmi	.+14     	; 0x1a9c <__divsf3_pse+0x3a>
    1a8e:	e0 e8       	ldi	r30, 0x80	; 128
    1a90:	30 d0       	rcall	.+96     	; 0x1af2 <__divsf3_pse+0x90>
    1a92:	91 50       	subi	r25, 0x01	; 1
    1a94:	50 40       	sbci	r21, 0x00	; 0
    1a96:	e6 95       	lsr	r30
    1a98:	00 1c       	adc	r0, r0
    1a9a:	ca f7       	brpl	.-14     	; 0x1a8e <__divsf3_pse+0x2c>
    1a9c:	29 d0       	rcall	.+82     	; 0x1af0 <__divsf3_pse+0x8e>
    1a9e:	fe 2f       	mov	r31, r30
    1aa0:	27 d0       	rcall	.+78     	; 0x1af0 <__divsf3_pse+0x8e>
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	bb 1f       	adc	r27, r27
    1aaa:	26 17       	cp	r18, r22
    1aac:	37 07       	cpc	r19, r23
    1aae:	48 07       	cpc	r20, r24
    1ab0:	ab 07       	cpc	r26, r27
    1ab2:	b0 e8       	ldi	r27, 0x80	; 128
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <__divsf3_pse+0x56>
    1ab6:	bb 0b       	sbc	r27, r27
    1ab8:	80 2d       	mov	r24, r0
    1aba:	bf 01       	movw	r22, r30
    1abc:	ff 27       	eor	r31, r31
    1abe:	93 58       	subi	r25, 0x83	; 131
    1ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac2:	2a f0       	brmi	.+10     	; 0x1ace <__divsf3_pse+0x6c>
    1ac4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ac6:	51 05       	cpc	r21, r1
    1ac8:	68 f0       	brcs	.+26     	; 0x1ae4 <__divsf3_pse+0x82>
    1aca:	b6 c0       	rjmp	.+364    	; 0x1c38 <__fp_inf>
    1acc:	00 c1       	rjmp	.+512    	; 0x1cce <__fp_szero>
    1ace:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad0:	ec f3       	brlt	.-6      	; 0x1acc <__divsf3_pse+0x6a>
    1ad2:	98 3e       	cpi	r25, 0xE8	; 232
    1ad4:	dc f3       	brlt	.-10     	; 0x1acc <__divsf3_pse+0x6a>
    1ad6:	86 95       	lsr	r24
    1ad8:	77 95       	ror	r23
    1ada:	67 95       	ror	r22
    1adc:	b7 95       	ror	r27
    1ade:	f7 95       	ror	r31
    1ae0:	9f 5f       	subi	r25, 0xFF	; 255
    1ae2:	c9 f7       	brne	.-14     	; 0x1ad6 <__divsf3_pse+0x74>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	91 1d       	adc	r25, r1
    1ae8:	96 95       	lsr	r25
    1aea:	87 95       	ror	r24
    1aec:	97 f9       	bld	r25, 7
    1aee:	08 95       	ret
    1af0:	e1 e0       	ldi	r30, 0x01	; 1
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	bb 1f       	adc	r27, r27
    1afa:	62 17       	cp	r22, r18
    1afc:	73 07       	cpc	r23, r19
    1afe:	84 07       	cpc	r24, r20
    1b00:	ba 07       	cpc	r27, r26
    1b02:	20 f0       	brcs	.+8      	; 0x1b0c <__divsf3_pse+0xaa>
    1b04:	62 1b       	sub	r22, r18
    1b06:	73 0b       	sbc	r23, r19
    1b08:	84 0b       	sbc	r24, r20
    1b0a:	ba 0b       	sbc	r27, r26
    1b0c:	ee 1f       	adc	r30, r30
    1b0e:	88 f7       	brcc	.-30     	; 0x1af2 <__divsf3_pse+0x90>
    1b10:	e0 95       	com	r30
    1b12:	08 95       	ret

00001b14 <__fixsfsi>:
    1b14:	04 d0       	rcall	.+8      	; 0x1b1e <__fixunssfsi>
    1b16:	68 94       	set
    1b18:	b1 11       	cpse	r27, r1
    1b1a:	d9 c0       	rjmp	.+434    	; 0x1cce <__fp_szero>
    1b1c:	08 95       	ret

00001b1e <__fixunssfsi>:
    1b1e:	bc d0       	rcall	.+376    	; 0x1c98 <__fp_splitA>
    1b20:	88 f0       	brcs	.+34     	; 0x1b44 <__fixunssfsi+0x26>
    1b22:	9f 57       	subi	r25, 0x7F	; 127
    1b24:	90 f0       	brcs	.+36     	; 0x1b4a <__fixunssfsi+0x2c>
    1b26:	b9 2f       	mov	r27, r25
    1b28:	99 27       	eor	r25, r25
    1b2a:	b7 51       	subi	r27, 0x17	; 23
    1b2c:	a0 f0       	brcs	.+40     	; 0x1b56 <__fixunssfsi+0x38>
    1b2e:	d1 f0       	breq	.+52     	; 0x1b64 <__fixunssfsi+0x46>
    1b30:	66 0f       	add	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	1a f0       	brmi	.+6      	; 0x1b40 <__fixunssfsi+0x22>
    1b3a:	ba 95       	dec	r27
    1b3c:	c9 f7       	brne	.-14     	; 0x1b30 <__fixunssfsi+0x12>
    1b3e:	12 c0       	rjmp	.+36     	; 0x1b64 <__fixunssfsi+0x46>
    1b40:	b1 30       	cpi	r27, 0x01	; 1
    1b42:	81 f0       	breq	.+32     	; 0x1b64 <__fixunssfsi+0x46>
    1b44:	c3 d0       	rcall	.+390    	; 0x1ccc <__fp_zero>
    1b46:	b1 e0       	ldi	r27, 0x01	; 1
    1b48:	08 95       	ret
    1b4a:	c0 c0       	rjmp	.+384    	; 0x1ccc <__fp_zero>
    1b4c:	67 2f       	mov	r22, r23
    1b4e:	78 2f       	mov	r23, r24
    1b50:	88 27       	eor	r24, r24
    1b52:	b8 5f       	subi	r27, 0xF8	; 248
    1b54:	39 f0       	breq	.+14     	; 0x1b64 <__fixunssfsi+0x46>
    1b56:	b9 3f       	cpi	r27, 0xF9	; 249
    1b58:	cc f3       	brlt	.-14     	; 0x1b4c <__fixunssfsi+0x2e>
    1b5a:	86 95       	lsr	r24
    1b5c:	77 95       	ror	r23
    1b5e:	67 95       	ror	r22
    1b60:	b3 95       	inc	r27
    1b62:	d9 f7       	brne	.-10     	; 0x1b5a <__fixunssfsi+0x3c>
    1b64:	3e f4       	brtc	.+14     	; 0x1b74 <__fixunssfsi+0x56>
    1b66:	90 95       	com	r25
    1b68:	80 95       	com	r24
    1b6a:	70 95       	com	r23
    1b6c:	61 95       	neg	r22
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	8f 4f       	sbci	r24, 0xFF	; 255
    1b72:	9f 4f       	sbci	r25, 0xFF	; 255
    1b74:	08 95       	ret

00001b76 <__floatunsisf>:
    1b76:	e8 94       	clt
    1b78:	09 c0       	rjmp	.+18     	; 0x1b8c <__floatsisf+0x12>

00001b7a <__floatsisf>:
    1b7a:	97 fb       	bst	r25, 7
    1b7c:	3e f4       	brtc	.+14     	; 0x1b8c <__floatsisf+0x12>
    1b7e:	90 95       	com	r25
    1b80:	80 95       	com	r24
    1b82:	70 95       	com	r23
    1b84:	61 95       	neg	r22
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255
    1b88:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	99 23       	and	r25, r25
    1b8e:	a9 f0       	breq	.+42     	; 0x1bba <__floatsisf+0x40>
    1b90:	f9 2f       	mov	r31, r25
    1b92:	96 e9       	ldi	r25, 0x96	; 150
    1b94:	bb 27       	eor	r27, r27
    1b96:	93 95       	inc	r25
    1b98:	f6 95       	lsr	r31
    1b9a:	87 95       	ror	r24
    1b9c:	77 95       	ror	r23
    1b9e:	67 95       	ror	r22
    1ba0:	b7 95       	ror	r27
    1ba2:	f1 11       	cpse	r31, r1
    1ba4:	f8 cf       	rjmp	.-16     	; 0x1b96 <__floatsisf+0x1c>
    1ba6:	fa f4       	brpl	.+62     	; 0x1be6 <__floatsisf+0x6c>
    1ba8:	bb 0f       	add	r27, r27
    1baa:	11 f4       	brne	.+4      	; 0x1bb0 <__floatsisf+0x36>
    1bac:	60 ff       	sbrs	r22, 0
    1bae:	1b c0       	rjmp	.+54     	; 0x1be6 <__floatsisf+0x6c>
    1bb0:	6f 5f       	subi	r22, 0xFF	; 255
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	16 c0       	rjmp	.+44     	; 0x1be6 <__floatsisf+0x6c>
    1bba:	88 23       	and	r24, r24
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <__floatsisf+0x48>
    1bbe:	96 e9       	ldi	r25, 0x96	; 150
    1bc0:	11 c0       	rjmp	.+34     	; 0x1be4 <__floatsisf+0x6a>
    1bc2:	77 23       	and	r23, r23
    1bc4:	21 f0       	breq	.+8      	; 0x1bce <__floatsisf+0x54>
    1bc6:	9e e8       	ldi	r25, 0x8E	; 142
    1bc8:	87 2f       	mov	r24, r23
    1bca:	76 2f       	mov	r23, r22
    1bcc:	05 c0       	rjmp	.+10     	; 0x1bd8 <__floatsisf+0x5e>
    1bce:	66 23       	and	r22, r22
    1bd0:	71 f0       	breq	.+28     	; 0x1bee <__floatsisf+0x74>
    1bd2:	96 e8       	ldi	r25, 0x86	; 134
    1bd4:	86 2f       	mov	r24, r22
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	2a f0       	brmi	.+10     	; 0x1be6 <__floatsisf+0x6c>
    1bdc:	9a 95       	dec	r25
    1bde:	66 0f       	add	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	88 1f       	adc	r24, r24
    1be4:	da f7       	brpl	.-10     	; 0x1bdc <__floatsisf+0x62>
    1be6:	88 0f       	add	r24, r24
    1be8:	96 95       	lsr	r25
    1bea:	87 95       	ror	r24
    1bec:	97 f9       	bld	r25, 7
    1bee:	08 95       	ret

00001bf0 <__fp_cmp>:
    1bf0:	99 0f       	add	r25, r25
    1bf2:	00 08       	sbc	r0, r0
    1bf4:	55 0f       	add	r21, r21
    1bf6:	aa 0b       	sbc	r26, r26
    1bf8:	e0 e8       	ldi	r30, 0x80	; 128
    1bfa:	fe ef       	ldi	r31, 0xFE	; 254
    1bfc:	16 16       	cp	r1, r22
    1bfe:	17 06       	cpc	r1, r23
    1c00:	e8 07       	cpc	r30, r24
    1c02:	f9 07       	cpc	r31, r25
    1c04:	c0 f0       	brcs	.+48     	; 0x1c36 <__fp_cmp+0x46>
    1c06:	12 16       	cp	r1, r18
    1c08:	13 06       	cpc	r1, r19
    1c0a:	e4 07       	cpc	r30, r20
    1c0c:	f5 07       	cpc	r31, r21
    1c0e:	98 f0       	brcs	.+38     	; 0x1c36 <__fp_cmp+0x46>
    1c10:	62 1b       	sub	r22, r18
    1c12:	73 0b       	sbc	r23, r19
    1c14:	84 0b       	sbc	r24, r20
    1c16:	95 0b       	sbc	r25, r21
    1c18:	39 f4       	brne	.+14     	; 0x1c28 <__fp_cmp+0x38>
    1c1a:	0a 26       	eor	r0, r26
    1c1c:	61 f0       	breq	.+24     	; 0x1c36 <__fp_cmp+0x46>
    1c1e:	23 2b       	or	r18, r19
    1c20:	24 2b       	or	r18, r20
    1c22:	25 2b       	or	r18, r21
    1c24:	21 f4       	brne	.+8      	; 0x1c2e <__fp_cmp+0x3e>
    1c26:	08 95       	ret
    1c28:	0a 26       	eor	r0, r26
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <__fp_cmp+0x3e>
    1c2c:	a1 40       	sbci	r26, 0x01	; 1
    1c2e:	a6 95       	lsr	r26
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	81 1d       	adc	r24, r1
    1c34:	81 1d       	adc	r24, r1
    1c36:	08 95       	ret

00001c38 <__fp_inf>:
    1c38:	97 f9       	bld	r25, 7
    1c3a:	9f 67       	ori	r25, 0x7F	; 127
    1c3c:	80 e8       	ldi	r24, 0x80	; 128
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	08 95       	ret

00001c44 <__fp_nan>:
    1c44:	9f ef       	ldi	r25, 0xFF	; 255
    1c46:	80 ec       	ldi	r24, 0xC0	; 192
    1c48:	08 95       	ret

00001c4a <__fp_pscA>:
    1c4a:	00 24       	eor	r0, r0
    1c4c:	0a 94       	dec	r0
    1c4e:	16 16       	cp	r1, r22
    1c50:	17 06       	cpc	r1, r23
    1c52:	18 06       	cpc	r1, r24
    1c54:	09 06       	cpc	r0, r25
    1c56:	08 95       	ret

00001c58 <__fp_pscB>:
    1c58:	00 24       	eor	r0, r0
    1c5a:	0a 94       	dec	r0
    1c5c:	12 16       	cp	r1, r18
    1c5e:	13 06       	cpc	r1, r19
    1c60:	14 06       	cpc	r1, r20
    1c62:	05 06       	cpc	r0, r21
    1c64:	08 95       	ret

00001c66 <__fp_round>:
    1c66:	09 2e       	mov	r0, r25
    1c68:	03 94       	inc	r0
    1c6a:	00 0c       	add	r0, r0
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <__fp_round+0xc>
    1c6e:	88 23       	and	r24, r24
    1c70:	52 f0       	brmi	.+20     	; 0x1c86 <__fp_round+0x20>
    1c72:	bb 0f       	add	r27, r27
    1c74:	40 f4       	brcc	.+16     	; 0x1c86 <__fp_round+0x20>
    1c76:	bf 2b       	or	r27, r31
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <__fp_round+0x18>
    1c7a:	60 ff       	sbrs	r22, 0
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <__fp_round+0x20>
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	08 95       	ret

00001c88 <__fp_split3>:
    1c88:	57 fd       	sbrc	r21, 7
    1c8a:	90 58       	subi	r25, 0x80	; 128
    1c8c:	44 0f       	add	r20, r20
    1c8e:	55 1f       	adc	r21, r21
    1c90:	59 f0       	breq	.+22     	; 0x1ca8 <__fp_splitA+0x10>
    1c92:	5f 3f       	cpi	r21, 0xFF	; 255
    1c94:	71 f0       	breq	.+28     	; 0x1cb2 <__fp_splitA+0x1a>
    1c96:	47 95       	ror	r20

00001c98 <__fp_splitA>:
    1c98:	88 0f       	add	r24, r24
    1c9a:	97 fb       	bst	r25, 7
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	61 f0       	breq	.+24     	; 0x1cb8 <__fp_splitA+0x20>
    1ca0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ca2:	79 f0       	breq	.+30     	; 0x1cc2 <__fp_splitA+0x2a>
    1ca4:	87 95       	ror	r24
    1ca6:	08 95       	ret
    1ca8:	12 16       	cp	r1, r18
    1caa:	13 06       	cpc	r1, r19
    1cac:	14 06       	cpc	r1, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	f2 cf       	rjmp	.-28     	; 0x1c96 <__fp_split3+0xe>
    1cb2:	46 95       	lsr	r20
    1cb4:	f1 df       	rcall	.-30     	; 0x1c98 <__fp_splitA>
    1cb6:	08 c0       	rjmp	.+16     	; 0x1cc8 <__fp_splitA+0x30>
    1cb8:	16 16       	cp	r1, r22
    1cba:	17 06       	cpc	r1, r23
    1cbc:	18 06       	cpc	r1, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	f1 cf       	rjmp	.-30     	; 0x1ca4 <__fp_splitA+0xc>
    1cc2:	86 95       	lsr	r24
    1cc4:	71 05       	cpc	r23, r1
    1cc6:	61 05       	cpc	r22, r1
    1cc8:	08 94       	sec
    1cca:	08 95       	ret

00001ccc <__fp_zero>:
    1ccc:	e8 94       	clt

00001cce <__fp_szero>:
    1cce:	bb 27       	eor	r27, r27
    1cd0:	66 27       	eor	r22, r22
    1cd2:	77 27       	eor	r23, r23
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	97 f9       	bld	r25, 7
    1cd8:	08 95       	ret

00001cda <__gesf2>:
    1cda:	8a df       	rcall	.-236    	; 0x1bf0 <__fp_cmp>
    1cdc:	08 f4       	brcc	.+2      	; 0x1ce0 <__gesf2+0x6>
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	08 95       	ret

00001ce2 <__mulsf3>:
    1ce2:	0b d0       	rcall	.+22     	; 0x1cfa <__mulsf3x>
    1ce4:	c0 cf       	rjmp	.-128    	; 0x1c66 <__fp_round>
    1ce6:	b1 df       	rcall	.-158    	; 0x1c4a <__fp_pscA>
    1ce8:	28 f0       	brcs	.+10     	; 0x1cf4 <__mulsf3+0x12>
    1cea:	b6 df       	rcall	.-148    	; 0x1c58 <__fp_pscB>
    1cec:	18 f0       	brcs	.+6      	; 0x1cf4 <__mulsf3+0x12>
    1cee:	95 23       	and	r25, r21
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <__mulsf3+0x12>
    1cf2:	a2 cf       	rjmp	.-188    	; 0x1c38 <__fp_inf>
    1cf4:	a7 cf       	rjmp	.-178    	; 0x1c44 <__fp_nan>
    1cf6:	11 24       	eor	r1, r1
    1cf8:	ea cf       	rjmp	.-44     	; 0x1cce <__fp_szero>

00001cfa <__mulsf3x>:
    1cfa:	c6 df       	rcall	.-116    	; 0x1c88 <__fp_split3>
    1cfc:	a0 f3       	brcs	.-24     	; 0x1ce6 <__mulsf3+0x4>

00001cfe <__mulsf3_pse>:
    1cfe:	95 9f       	mul	r25, r21
    1d00:	d1 f3       	breq	.-12     	; 0x1cf6 <__mulsf3+0x14>
    1d02:	95 0f       	add	r25, r21
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	55 1f       	adc	r21, r21
    1d08:	62 9f       	mul	r22, r18
    1d0a:	f0 01       	movw	r30, r0
    1d0c:	72 9f       	mul	r23, r18
    1d0e:	bb 27       	eor	r27, r27
    1d10:	f0 0d       	add	r31, r0
    1d12:	b1 1d       	adc	r27, r1
    1d14:	63 9f       	mul	r22, r19
    1d16:	aa 27       	eor	r26, r26
    1d18:	f0 0d       	add	r31, r0
    1d1a:	b1 1d       	adc	r27, r1
    1d1c:	aa 1f       	adc	r26, r26
    1d1e:	64 9f       	mul	r22, r20
    1d20:	66 27       	eor	r22, r22
    1d22:	b0 0d       	add	r27, r0
    1d24:	a1 1d       	adc	r26, r1
    1d26:	66 1f       	adc	r22, r22
    1d28:	82 9f       	mul	r24, r18
    1d2a:	22 27       	eor	r18, r18
    1d2c:	b0 0d       	add	r27, r0
    1d2e:	a1 1d       	adc	r26, r1
    1d30:	62 1f       	adc	r22, r18
    1d32:	73 9f       	mul	r23, r19
    1d34:	b0 0d       	add	r27, r0
    1d36:	a1 1d       	adc	r26, r1
    1d38:	62 1f       	adc	r22, r18
    1d3a:	83 9f       	mul	r24, r19
    1d3c:	a0 0d       	add	r26, r0
    1d3e:	61 1d       	adc	r22, r1
    1d40:	22 1f       	adc	r18, r18
    1d42:	74 9f       	mul	r23, r20
    1d44:	33 27       	eor	r19, r19
    1d46:	a0 0d       	add	r26, r0
    1d48:	61 1d       	adc	r22, r1
    1d4a:	23 1f       	adc	r18, r19
    1d4c:	84 9f       	mul	r24, r20
    1d4e:	60 0d       	add	r22, r0
    1d50:	21 1d       	adc	r18, r1
    1d52:	82 2f       	mov	r24, r18
    1d54:	76 2f       	mov	r23, r22
    1d56:	6a 2f       	mov	r22, r26
    1d58:	11 24       	eor	r1, r1
    1d5a:	9f 57       	subi	r25, 0x7F	; 127
    1d5c:	50 40       	sbci	r21, 0x00	; 0
    1d5e:	8a f0       	brmi	.+34     	; 0x1d82 <__mulsf3_pse+0x84>
    1d60:	e1 f0       	breq	.+56     	; 0x1d9a <__mulsf3_pse+0x9c>
    1d62:	88 23       	and	r24, r24
    1d64:	4a f0       	brmi	.+18     	; 0x1d78 <__mulsf3_pse+0x7a>
    1d66:	ee 0f       	add	r30, r30
    1d68:	ff 1f       	adc	r31, r31
    1d6a:	bb 1f       	adc	r27, r27
    1d6c:	66 1f       	adc	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	91 50       	subi	r25, 0x01	; 1
    1d74:	50 40       	sbci	r21, 0x00	; 0
    1d76:	a9 f7       	brne	.-22     	; 0x1d62 <__mulsf3_pse+0x64>
    1d78:	9e 3f       	cpi	r25, 0xFE	; 254
    1d7a:	51 05       	cpc	r21, r1
    1d7c:	70 f0       	brcs	.+28     	; 0x1d9a <__mulsf3_pse+0x9c>
    1d7e:	5c cf       	rjmp	.-328    	; 0x1c38 <__fp_inf>
    1d80:	a6 cf       	rjmp	.-180    	; 0x1cce <__fp_szero>
    1d82:	5f 3f       	cpi	r21, 0xFF	; 255
    1d84:	ec f3       	brlt	.-6      	; 0x1d80 <__mulsf3_pse+0x82>
    1d86:	98 3e       	cpi	r25, 0xE8	; 232
    1d88:	dc f3       	brlt	.-10     	; 0x1d80 <__mulsf3_pse+0x82>
    1d8a:	86 95       	lsr	r24
    1d8c:	77 95       	ror	r23
    1d8e:	67 95       	ror	r22
    1d90:	b7 95       	ror	r27
    1d92:	f7 95       	ror	r31
    1d94:	e7 95       	ror	r30
    1d96:	9f 5f       	subi	r25, 0xFF	; 255
    1d98:	c1 f7       	brne	.-16     	; 0x1d8a <__mulsf3_pse+0x8c>
    1d9a:	fe 2b       	or	r31, r30
    1d9c:	88 0f       	add	r24, r24
    1d9e:	91 1d       	adc	r25, r1
    1da0:	96 95       	lsr	r25
    1da2:	87 95       	ror	r24
    1da4:	97 f9       	bld	r25, 7
    1da6:	08 95       	ret

00001da8 <__divmodhi4>:
    1da8:	97 fb       	bst	r25, 7
    1daa:	07 2e       	mov	r0, r23
    1dac:	16 f4       	brtc	.+4      	; 0x1db2 <__divmodhi4+0xa>
    1dae:	00 94       	com	r0
    1db0:	06 d0       	rcall	.+12     	; 0x1dbe <__divmodhi4_neg1>
    1db2:	77 fd       	sbrc	r23, 7
    1db4:	08 d0       	rcall	.+16     	; 0x1dc6 <__divmodhi4_neg2>
    1db6:	0b d0       	rcall	.+22     	; 0x1dce <__udivmodhi4>
    1db8:	07 fc       	sbrc	r0, 7
    1dba:	05 d0       	rcall	.+10     	; 0x1dc6 <__divmodhi4_neg2>
    1dbc:	3e f4       	brtc	.+14     	; 0x1dcc <__divmodhi4_exit>

00001dbe <__divmodhi4_neg1>:
    1dbe:	90 95       	com	r25
    1dc0:	81 95       	neg	r24
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	08 95       	ret

00001dc6 <__divmodhi4_neg2>:
    1dc6:	70 95       	com	r23
    1dc8:	61 95       	neg	r22
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255

00001dcc <__divmodhi4_exit>:
    1dcc:	08 95       	ret

00001dce <__udivmodhi4>:
    1dce:	aa 1b       	sub	r26, r26
    1dd0:	bb 1b       	sub	r27, r27
    1dd2:	51 e1       	ldi	r21, 0x11	; 17
    1dd4:	07 c0       	rjmp	.+14     	; 0x1de4 <__udivmodhi4_ep>

00001dd6 <__udivmodhi4_loop>:
    1dd6:	aa 1f       	adc	r26, r26
    1dd8:	bb 1f       	adc	r27, r27
    1dda:	a6 17       	cp	r26, r22
    1ddc:	b7 07       	cpc	r27, r23
    1dde:	10 f0       	brcs	.+4      	; 0x1de4 <__udivmodhi4_ep>
    1de0:	a6 1b       	sub	r26, r22
    1de2:	b7 0b       	sbc	r27, r23

00001de4 <__udivmodhi4_ep>:
    1de4:	88 1f       	adc	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	5a 95       	dec	r21
    1dea:	a9 f7       	brne	.-22     	; 0x1dd6 <__udivmodhi4_loop>
    1dec:	80 95       	com	r24
    1dee:	90 95       	com	r25
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	08 95       	ret

00001df6 <_exit>:
    1df6:	f8 94       	cli

00001df8 <__stop_program>:
    1df8:	ff cf       	rjmp	.-2      	; 0x1df8 <__stop_program>
