
sensormodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001056  00800100  00001e36  00001eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  00801156  00801156  00002f20  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  00002f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000932  00000000  00000000  00005368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005c9a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d0  00000000  00000000  00005cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a19  00000000  00000000  00005f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b8e  00000000  00000000  000089b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f35  00000000  00000000  00009540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008d8  00000000  00000000  0000b478  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000090c  00000000  00000000  0000bd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002044  00000000  00000000  0000c65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000300  00000000  00000000  0000e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_4>
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	5e c2       	rjmp	.+1212   	; 0x4f2 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	13 c6       	rjmp	.+3110   	; 0xc88 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__vector_26>
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c2       	rjmp	.+1222   	; 0x548 <__vector_32>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e1       	ldi	r17, 0x11	; 17
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e3       	ldi	r30, 0x36	; 54
      a0:	fe e1       	ldi	r31, 0x1E	; 30
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 35       	cpi	r26, 0x56	; 86
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e1       	ldi	r18, 0x13	; 19
      b4:	a6 e5       	ldi	r26, 0x56	; 86
      b6:	b1 e1       	ldi	r27, 0x11	; 17
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 37       	cpi	r26, 0x74	; 116
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	eb d1       	rcall	.+982    	; 0x49a <main>
      c4:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
      ca:	bc 01       	movw	r22, r24
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__floatunsisf>
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	4a e7       	ldi	r20, 0x7A	; 122
      da:	51 e4       	ldi	r21, 0x41	; 65
      dc:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsf3>
      e0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__fixunssfsi>
	OCR1A = delay;
      e4:	70 93 89 00 	sts	0x0089, r23
      e8:	60 93 88 00 	sts	0x0088, r22
      ec:	08 95       	ret

000000ee <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
      ee:	bc 01       	movw	r22, r24
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__floatunsisf>
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4a e7       	ldi	r20, 0x7A	; 122
      fe:	51 e4       	ldi	r21, 0x41	; 65
     100:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsf3>
     104:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__fixunssfsi>
	OCR3A = delay;
     108:	70 93 99 00 	sts	0x0099, r23
     10c:	60 93 98 00 	sts	0x0098, r22
     110:	08 95       	ret

00000112 <init_counters>:
// OBS: fick byta timer 2 mot timer 3 så kommentarerna nedan stämmer inte riktigt...
//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     112:	e1 e8       	ldi	r30, 0x81	; 129
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	85 60       	ori	r24, 0x05	; 5
     11a:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     11c:	e1 e9       	ldi	r30, 0x91	; 145
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	85 60       	ori	r24, 0x05	; 5
     124:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     126:	88 ee       	ldi	r24, 0xE8	; 232
     128:	93 e0       	ldi	r25, 0x03	; 3
     12a:	cf df       	rcall	.-98     	; 0xca <set_counter_1>
	set_counter_2(1000);
     12c:	88 ee       	ldi	r24, 0xE8	; 232
     12e:	93 e0       	ldi	r25, 0x03	; 3
     130:	de df       	rcall	.-68     	; 0xee <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     132:	ef e6       	ldi	r30, 0x6F	; 111
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	82 60       	ori	r24, 0x02	; 2
     13a:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     13c:	e1 e7       	ldi	r30, 0x71	; 113
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	82 60       	ori	r24, 0x02	; 2
     144:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     146:	10 92 85 00 	sts	0x0085, r1
     14a:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     14e:	10 92 95 00 	sts	0x0095, r1
     152:	10 92 94 00 	sts	0x0094, r1
     156:	08 95       	ret

00000158 <toggle_enable>:
	toggle_enable();
}

void toggle_enable()
{
	PORTD |= (1<<PORTD6);
     158:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	8f e3       	ldi	r24, 0x3F	; 63
     15c:	9c e9       	ldi	r25, 0x9C	; 156
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <toggle_enable+0x6>
     162:	00 c0       	rjmp	.+0      	; 0x164 <toggle_enable+0xc>
     164:	00 00       	nop
	_delay_ms(10);
	PORTD &= !(1<<PORTD6);
     166:	8b b1       	in	r24, 0x0b	; 11
     168:	1b b8       	out	0x0b, r1	; 11
     16a:	08 95       	ret

0000016c <display_init>:
static void print_digit(int digit);
static uint8_t display_read_adress();

void display_init()
{
	DDRB = 255;
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b11100000;
     170:	8a b1       	in	r24, 0x0a	; 10
     172:	80 6e       	ori	r24, 0xE0	; 224
     174:	8a b9       	out	0x0a, r24	; 10
	
	//TODO: fix this....
	PORTD &= !(1<<PORTD5) | !(1<<PORTD7); //Instruction mode, Write mode
     176:	8b b1       	in	r24, 0x0b	; 11
     178:	1b b8       	out	0x0b, r1	; 11
     17a:	2f e7       	ldi	r18, 0x7F	; 127
     17c:	83 e8       	ldi	r24, 0x83	; 131
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	21 50       	subi	r18, 0x01	; 1
     182:	80 40       	sbci	r24, 0x00	; 0
     184:	90 40       	sbci	r25, 0x00	; 0
     186:	e1 f7       	brne	.-8      	; 0x180 <display_init+0x14>
     188:	00 c0       	rjmp	.+0      	; 0x18a <display_init+0x1e>
     18a:	00 00       	nop
	_delay_ms(31);
	PORTB = 0b00111000; //Function set
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     190:	e3 df       	rcall	.-58     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     192:	25 ed       	ldi	r18, 0xD5	; 213
     194:	2a 95       	dec	r18
     196:	f1 f7       	brne	.-4      	; 0x194 <display_init+0x28>
     198:	00 00       	nop
	_delay_us(40);
	PORTB = 0b00001111; //Display control
     19a:	8f e0       	ldi	r24, 0x0F	; 15
     19c:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     19e:	dc df       	rcall	.-72     	; 0x158 <toggle_enable>
     1a0:	85 ed       	ldi	r24, 0xD5	; 213
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <display_init+0x36>
     1a6:	00 00       	nop
	_delay_us(40);
	PORTB = 0b00000001; //Clear Display
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1ac:	d5 df       	rcall	.-86     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ae:	8f e3       	ldi	r24, 0x3F	; 63
     1b0:	9f e1       	ldi	r25, 0x1F	; 31
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <display_init+0x46>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <display_init+0x4c>
     1b8:	00 00       	nop
	_delay_ms(2);
	PORTB = 0b00000110; //Set entry mode
     1ba:	86 e0       	ldi	r24, 0x06	; 6
     1bc:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1be:	cc cf       	rjmp	.-104    	; 0x158 <toggle_enable>

000001c0 <display_clear>:
	}
}

void display_clear()
{
	PORTB = 1<<PORTB0; //Clear Display
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1c4:	c9 df       	rcall	.-110    	; 0x158 <toggle_enable>
	toggle_enable();
     1c6:	c8 cf       	rjmp	.-112    	; 0x158 <toggle_enable>

000001c8 <display_set_pos>:
}

void display_set_pos(int line, int pos)
{
	PORTD  &= !(1<<PORTD5); //RS = 0 (Instruction mode)
     1c8:	2b b1       	in	r18, 0x0b	; 11
     1ca:	1b b8       	out	0x0b, r1	; 11
	int data;
	switch(line)
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	91 05       	cpc	r25, r1
     1d0:	41 f0       	breq	.+16     	; 0x1e2 <display_set_pos+0x1a>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	91 05       	cpc	r25, r1
     1d6:	41 f0       	breq	.+16     	; 0x1e8 <display_set_pos+0x20>
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	49 f0       	breq	.+18     	; 0x1ee <display_set_pos+0x26>
	{
		case 0:
		data = 0b10000000;
     1dc:	80 e8       	ldi	r24, 0x80	; 128
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <display_set_pos+0x2a>
		break;
		case 1:
		data = 0b11000000;
		break;
		case 2:
		data = 0b10010000;
     1e2:	80 e9       	ldi	r24, 0x90	; 144
     1e4:	90 e0       	ldi	r25, 0x00	; 0
		break;
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <display_set_pos+0x2a>
		case 3:
		data = 0b11010000;
     1e8:	80 ed       	ldi	r24, 0xD0	; 208
     1ea:	90 e0       	ldi	r25, 0x00	; 0
		break;
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <display_set_pos+0x2a>
	{
		case 0:
		data = 0b10000000;
		break;
		case 1:
		data = 0b11000000;
     1ee:	80 ec       	ldi	r24, 0xC0	; 192
     1f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		data = 0b10000000;
		break;
	}
	data += pos;
     1f2:	68 0f       	add	r22, r24
     1f4:	79 1f       	adc	r23, r25
	
	PORTB = data; //Set adress
     1f6:	65 b9       	out	0x05, r22	; 5
	toggle_enable();
     1f8:	af cf       	rjmp	.-162    	; 0x158 <toggle_enable>

000001fa <display_char>:
	_delay_ms(10);
	PORTD &= !(1<<PORTD6);
}

void display_char(char c)
{
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	d8 2f       	mov	r29, r24
	_delay_us(10);
	toggle_enable();
	if(PINB & (1<<PINB7))
	{
		PORTD &= ~(1<<PORTD7);
		DDRB = 255;
     200:	cf ef       	ldi	r28, 0xFF	; 255
	}
}

int display_busy()
{
	PORTB = 0;
     202:	15 b8       	out	0x05, r1	; 5
	DDRB = 0;
     204:	14 b8       	out	0x04, r1	; 4
	PORTD &= ~(1<<PORTD5); //Instruction mode
     206:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= (1<<PORTD7); //Read mode
     208:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	85 e3       	ldi	r24, 0x35	; 53
     20c:	8a 95       	dec	r24
     20e:	f1 f7       	brne	.-4      	; 0x20c <display_char+0x12>
     210:	00 00       	nop
	_delay_us(10);
	toggle_enable();
     212:	a2 df       	rcall	.-188    	; 0x158 <toggle_enable>
	if(PINB & (1<<PINB7))
     214:	1f 9b       	sbis	0x03, 7	; 3
     216:	03 c0       	rjmp	.+6      	; 0x21e <display_char+0x24>
	{
		PORTD &= ~(1<<PORTD7);
     218:	5f 98       	cbi	0x0b, 7	; 11
		DDRB = 255;
     21a:	c4 b9       	out	0x04, r28	; 4
     21c:	f2 cf       	rjmp	.-28     	; 0x202 <display_char+0x8>
		return 1;
	}
	else
	{
		PORTD &= ~(1<<PORTD7);
     21e:	5f 98       	cbi	0x0b, 7	; 11
		DDRB = 255;
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	c4 b9       	out	0x04, r28	; 4
}

void display_char(char c)
{
	while(display_busy()); //Wait for display
	PORTD |= (1<<PORTD5); //Data mode
     224:	5d 9a       	sbi	0x0b, 5	; 11
	PORTB = c;
     226:	d5 b9       	out	0x05, r29	; 5
	toggle_enable();
     228:	97 df       	rcall	.-210    	; 0x158 <toggle_enable>
	toggle_enable();
}

uint8_t display_read_adress()
{
	PORTB = 0;
     22a:	15 b8       	out	0x05, r1	; 5
	DDRB = 0;
     22c:	14 b8       	out	0x04, r1	; 4
	PORTD &= ~(1<<PORTD5);
     22e:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= 1<<PORTD7;
     230:	5f 9a       	sbi	0x0b, 7	; 11
     232:	85 e3       	ldi	r24, 0x35	; 53
     234:	8a 95       	dec	r24
     236:	f1 f7       	brne	.-4      	; 0x234 <display_char+0x3a>
     238:	00 00       	nop
	_delay_us(10);
	toggle_enable();
     23a:	8e df       	rcall	.-228    	; 0x158 <toggle_enable>
	
	uint8_t adress = PINB;
     23c:	83 b1       	in	r24, 0x03	; 3
	DDRB = 0xFF;
     23e:	c4 b9       	out	0x04, r28	; 4
	PORTD |= 1<<PORTD5;
     240:	5d 9a       	sbi	0x0b, 5	; 11
	while(display_busy()); //Wait for display
	PORTD |= (1<<PORTD5); //Data mode
	PORTB = c;
	toggle_enable();
	
	switch (display_read_adress())
     242:	80 32       	cpi	r24, 0x20	; 32
     244:	a9 f0       	breq	.+42     	; 0x270 <display_char+0x76>
     246:	18 f4       	brcc	.+6      	; 0x24e <display_char+0x54>
     248:	80 31       	cpi	r24, 0x10	; 16
     24a:	e9 f4       	brne	.+58     	; 0x286 <display_char+0x8c>
     24c:	05 c0       	rjmp	.+10     	; 0x258 <display_char+0x5e>
     24e:	80 35       	cpi	r24, 0x50	; 80
     250:	49 f0       	breq	.+18     	; 0x264 <display_char+0x6a>
     252:	80 36       	cpi	r24, 0x60	; 96
     254:	c1 f4       	brne	.+48     	; 0x286 <display_char+0x8c>
     256:	12 c0       	rjmp	.+36     	; 0x27c <display_char+0x82>
	{
		case 16:
		display_set_pos(1,0);
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	b3 df       	rcall	.-154    	; 0x1c8 <display_set_pos>
		break;
     262:	11 c0       	rjmp	.+34     	; 0x286 <display_char+0x8c>
		case 80:
		display_set_pos(2,0);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ad df       	rcall	.-166    	; 0x1c8 <display_set_pos>
		break;
     26e:	0b c0       	rjmp	.+22     	; 0x286 <display_char+0x8c>
		case 32:
		display_set_pos(3,0);
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	a7 df       	rcall	.-178    	; 0x1c8 <display_set_pos>
		break;
     27a:	05 c0       	rjmp	.+10     	; 0x286 <display_char+0x8c>
		case 96:
		display_set_pos(0,0);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	a1 df       	rcall	.-190    	; 0x1c8 <display_set_pos>
		break;
	}
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <print_digit>:
	}
}

void print_digit(int digit)
{
	switch(digit)
     28c:	84 30       	cpi	r24, 0x04	; 4
     28e:	91 05       	cpc	r25, r1
     290:	31 f1       	breq	.+76     	; 0x2de <print_digit+0x52>
     292:	6c f4       	brge	.+26     	; 0x2ae <print_digit+0x22>
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	91 05       	cpc	r25, r1
     298:	e1 f0       	breq	.+56     	; 0x2d2 <print_digit+0x46>
     29a:	1c f4       	brge	.+6      	; 0x2a2 <print_digit+0x16>
     29c:	89 2b       	or	r24, r25
     29e:	b9 f0       	breq	.+46     	; 0x2ce <print_digit+0x42>
     2a0:	2a c0       	rjmp	.+84     	; 0x2f6 <print_digit+0x6a>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	91 05       	cpc	r25, r1
     2a6:	b9 f0       	breq	.+46     	; 0x2d6 <print_digit+0x4a>
     2a8:	03 97       	sbiw	r24, 0x03	; 3
     2aa:	29 f5       	brne	.+74     	; 0x2f6 <print_digit+0x6a>
     2ac:	16 c0       	rjmp	.+44     	; 0x2da <print_digit+0x4e>
     2ae:	87 30       	cpi	r24, 0x07	; 7
     2b0:	91 05       	cpc	r25, r1
     2b2:	d9 f0       	breq	.+54     	; 0x2ea <print_digit+0x5e>
     2b4:	34 f4       	brge	.+12     	; 0x2c2 <print_digit+0x36>
     2b6:	85 30       	cpi	r24, 0x05	; 5
     2b8:	91 05       	cpc	r25, r1
     2ba:	99 f0       	breq	.+38     	; 0x2e2 <print_digit+0x56>
     2bc:	06 97       	sbiw	r24, 0x06	; 6
     2be:	d9 f4       	brne	.+54     	; 0x2f6 <print_digit+0x6a>
     2c0:	12 c0       	rjmp	.+36     	; 0x2e6 <print_digit+0x5a>
     2c2:	88 30       	cpi	r24, 0x08	; 8
     2c4:	91 05       	cpc	r25, r1
     2c6:	99 f0       	breq	.+38     	; 0x2ee <print_digit+0x62>
     2c8:	09 97       	sbiw	r24, 0x09	; 9
     2ca:	a9 f4       	brne	.+42     	; 0x2f6 <print_digit+0x6a>
     2cc:	12 c0       	rjmp	.+36     	; 0x2f2 <print_digit+0x66>
	{
		case 0:
			display_char('0');
     2ce:	80 e3       	ldi	r24, 0x30	; 48
			break;
     2d0:	94 cf       	rjmp	.-216    	; 0x1fa <display_char>
		case 1:
			display_char('1');
     2d2:	81 e3       	ldi	r24, 0x31	; 49
			break;
     2d4:	92 cf       	rjmp	.-220    	; 0x1fa <display_char>
		case 2:
			display_char('2');
     2d6:	82 e3       	ldi	r24, 0x32	; 50
			break;
     2d8:	90 cf       	rjmp	.-224    	; 0x1fa <display_char>
		case 3:
			display_char('3');
     2da:	83 e3       	ldi	r24, 0x33	; 51
			break;
     2dc:	8e cf       	rjmp	.-228    	; 0x1fa <display_char>
		case 4:
			display_char('4');
     2de:	84 e3       	ldi	r24, 0x34	; 52
			break;
     2e0:	8c cf       	rjmp	.-232    	; 0x1fa <display_char>
		case 5:
			display_char('5');
     2e2:	85 e3       	ldi	r24, 0x35	; 53
			break;
     2e4:	8a cf       	rjmp	.-236    	; 0x1fa <display_char>
		case 6:
			display_char('6');
     2e6:	86 e3       	ldi	r24, 0x36	; 54
			break;
     2e8:	88 cf       	rjmp	.-240    	; 0x1fa <display_char>
		case 7:
			display_char('7');
     2ea:	87 e3       	ldi	r24, 0x37	; 55
			break;
     2ec:	86 cf       	rjmp	.-244    	; 0x1fa <display_char>
		case 8:
			display_char('8');
     2ee:	88 e3       	ldi	r24, 0x38	; 56
			break;
     2f0:	84 cf       	rjmp	.-248    	; 0x1fa <display_char>
		case 9:
			display_char('9');
     2f2:	89 e3       	ldi	r24, 0x39	; 57
			break;
     2f4:	82 cf       	rjmp	.-252    	; 0x1fa <display_char>
		default:
			display_char('0');
     2f6:	80 e3       	ldi	r24, 0x30	; 48
     2f8:	80 cf       	rjmp	.-256    	; 0x1fa <display_char>

000002fa <print_int>:
		}
	}
}

void print_int(int number)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	9c 01       	movw	r18, r24
	if(number < 10)
     300:	8a 30       	cpi	r24, 0x0A	; 10
     302:	91 05       	cpc	r25, r1
     304:	24 f4       	brge	.+8      	; 0x30e <print_int+0x14>
	{
		if(number != 0)
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	91 f0       	breq	.+36     	; 0x32e <print_int+0x34>
		{
			print_digit(number);
     30a:	c0 df       	rcall	.-128    	; 0x28c <print_digit>
     30c:	10 c0       	rjmp	.+32     	; 0x32e <print_int+0x34>
		}
	} else
	{
		int mod = number % 10;
     30e:	ea e0       	ldi	r30, 0x0A	; 10
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	bf 01       	movw	r22, r30
     314:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
     318:	ec 01       	movw	r28, r24
		int left = number - mod;
     31a:	c9 01       	movw	r24, r18
     31c:	8c 1b       	sub	r24, r28
     31e:	9d 0b       	sbc	r25, r29
		print_int(left / 10);
     320:	bf 01       	movw	r22, r30
     322:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
     326:	cb 01       	movw	r24, r22
     328:	e8 df       	rcall	.-48     	; 0x2fa <print_int>
		print_digit(mod);
     32a:	ce 01       	movw	r24, r28
     32c:	af df       	rcall	.-162    	; 0x28c <print_digit>
	}
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <display_value>:
		display_char(text[i]);
	}
}

void display_value(float value)
{
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	6b 01       	movw	r12, r22
     342:	7c 01       	movw	r14, r24
	if(value == (int) value)
     344:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__fixsfsi>
     348:	eb 01       	movw	r28, r22
     34a:	88 27       	eor	r24, r24
     34c:	77 fd       	sbrc	r23, 7
     34e:	80 95       	com	r24
     350:	98 2f       	mov	r25, r24
     352:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     356:	a7 01       	movw	r20, r14
     358:	96 01       	movw	r18, r12
     35a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__cmpsf2>
     35e:	81 11       	cpse	r24, r1
     360:	0f c0       	rjmp	.+30     	; 0x380 <display_value+0x4c>
	{
		// Integer
		if(value < 10)
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e2       	ldi	r20, 0x20	; 32
     368:	51 e4       	ldi	r21, 0x41	; 65
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__cmpsf2>
     372:	88 23       	and	r24, r24
     374:	1c f4       	brge	.+6      	; 0x37c <display_value+0x48>
		{
			print_digit(value);
     376:	ce 01       	movw	r24, r28
     378:	89 df       	rcall	.-238    	; 0x28c <print_digit>
     37a:	02 c0       	rjmp	.+4      	; 0x380 <display_value+0x4c>
		} else 
		{
			print_int(value);
     37c:	ce 01       	movw	r24, r28
     37e:	bd df       	rcall	.-134    	; 0x2fa <print_int>
		}
	}
}
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	df 90       	pop	r13
     38a:	cf 90       	pop	r12
     38c:	08 95       	ret

0000038e <display_text_fixed_length>:
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
	for(int i = 0; i < length; ++i)
     396:	16 16       	cp	r1, r22
     398:	17 06       	cpc	r1, r23
     39a:	54 f4       	brge	.+20     	; 0x3b0 <display_text_fixed_length+0x22>
     39c:	c8 2f       	mov	r28, r24
     39e:	d9 2f       	mov	r29, r25
	{
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
     3a0:	8e 01       	movw	r16, r28
     3a2:	06 0f       	add	r16, r22
     3a4:	17 1f       	adc	r17, r23
{
	for(int i = 0; i < length; ++i)
	{
		display_char(text[i]);
     3a6:	89 91       	ld	r24, Y+
     3a8:	28 df       	rcall	.-432    	; 0x1fa <display_char>
	}
}

void display_text_fixed_length(char text[], int length)
{
	for(int i = 0; i < length; ++i)
     3aa:	c0 17       	cp	r28, r16
     3ac:	d1 07       	cpc	r29, r17
     3ae:	d9 f7       	brne	.-10     	; 0x3a6 <display_text_fixed_length+0x18>
	{
		display_char(text[i]);
	}
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <display_text>:
		return 0;
	}
}

void display_text(char text[])
{
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	e8 2e       	mov	r14, r24
     3c8:	f9 2e       	mov	r15, r25
     3ca:	08 2f       	mov	r16, r24
     3cc:	19 2f       	mov	r17, r25
	for(int i = 0; i < strlen(text); ++i)
     3ce:	c0 e0       	ldi	r28, 0x00	; 0
     3d0:	d0 e0       	ldi	r29, 0x00	; 0
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <display_text+0x24>
	{
		display_char(text[i]);
     3d4:	f8 01       	movw	r30, r16
     3d6:	81 91       	ld	r24, Z+
     3d8:	8f 01       	movw	r16, r30
     3da:	0f df       	rcall	.-482    	; 0x1fa <display_char>
	}
}

void display_text(char text[])
{
	for(int i = 0; i < strlen(text); ++i)
     3dc:	21 96       	adiw	r28, 0x01	; 1
     3de:	ee 2d       	mov	r30, r14
     3e0:	ff 2d       	mov	r31, r15
     3e2:	df 01       	movw	r26, r30
     3e4:	0d 90       	ld	r0, X+
     3e6:	00 20       	and	r0, r0
     3e8:	e9 f7       	brne	.-6      	; 0x3e4 <display_text+0x2a>
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	ae 1b       	sub	r26, r30
     3ee:	bf 0b       	sbc	r27, r31
     3f0:	ca 17       	cp	r28, r26
     3f2:	db 07       	cpc	r29, r27
     3f4:	78 f3       	brcs	.-34     	; 0x3d4 <display_text+0x1a>
	{
		display_char(text[i]);
	}
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     404:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     406:	90 81       	ld	r25, Z
     408:	91 50       	subi	r25, 0x01	; 1
     40a:	84 81       	ldd	r24, Z+4	; 0x04
     40c:	22 81       	ldd	r18, Z+2	; 0x02
     40e:	82 1b       	sub	r24, r18
};
     410:	89 23       	and	r24, r25
     412:	08 95       	ret

00000414 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ec 01       	movw	r28, r24
     41c:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     41e:	f2 df       	rcall	.-28     	; 0x404 <FifoDataLength>
     420:	28 81       	ld	r18, Y
     422:	39 81       	ldd	r19, Y+1	; 0x01
     424:	21 50       	subi	r18, 0x01	; 1
     426:	31 09       	sbc	r19, r1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	82 17       	cp	r24, r18
     42c:	93 07       	cpc	r25, r19
     42e:	69 f0       	breq	.+26     	; 0x44a <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	fe 01       	movw	r30, r28
     436:	e8 0f       	add	r30, r24
     438:	f9 1f       	adc	r31, r25
     43a:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	28 23       	and	r18, r24
     440:	39 23       	and	r19, r25
     442:	3d 83       	std	Y+5, r19	; 0x05
     444:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	01 c0       	rjmp	.+2      	; 0x44c <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	08 95       	ret

00000454 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
     45e:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     460:	d1 df       	rcall	.-94     	; 0x404 <FifoDataLength>
     462:	88 23       	and	r24, r24
     464:	a1 f0       	breq	.+40     	; 0x48e <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     466:	ea 81       	ldd	r30, Y+2	; 0x02
     468:	fb 81       	ldd	r31, Y+3	; 0x03
     46a:	ec 0f       	add	r30, r28
     46c:	fd 1f       	adc	r31, r29
     46e:	86 81       	ldd	r24, Z+6	; 0x06
     470:	f8 01       	movw	r30, r16
     472:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     474:	28 81       	ld	r18, Y
     476:	39 81       	ldd	r19, Y+1	; 0x01
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	31 09       	sbc	r19, r1
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	9b 81       	ldd	r25, Y+3	; 0x03
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	82 23       	and	r24, r18
     484:	93 23       	and	r25, r19
     486:	9b 83       	std	Y+3, r25	; 0x03
     488:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	01 c0       	rjmp	.+2      	; 0x490 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     48e:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <main>:
int bufferSize = 0;
uint8_t displayFlag = 0;

int main(void)
{	
	display_init();
     49a:	68 de       	rcall	.-816    	; 0x16c <display_init>
	sensors_init();
     49c:	9b d0       	rcall	.+310    	; 0x5d4 <sensors_init>
	display_text("Hello");
     49e:	88 e0       	ldi	r24, 0x08	; 8
     4a0:	91 e1       	ldi	r25, 0x11	; 17
     4a2:	8b df       	rcall	.-234    	; 0x3ba <display_text>
	// init TWI
	TWI_init(S_ADDRESS);
     4a4:	80 e4       	ldi	r24, 0x40	; 64
     4a6:	cb d7       	rcall	.+3990   	; 0x143e <TWI_init>
	init_counters();
     4a8:	34 de       	rcall	.-920    	; 0x112 <init_counters>
	
	set_counter_1(100);
     4aa:	84 e6       	ldi	r24, 0x64	; 100
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0d de       	rcall	.-998    	; 0xca <set_counter_1>
	set_counter_2(3000);
     4b0:	88 eb       	ldi	r24, 0xB8	; 184
     4b2:	9b e0       	ldi	r25, 0x0B	; 11
     4b4:	1c de       	rcall	.-968    	; 0xee <set_counter_2>
	
	// Activate interrupts
	sei();
     4b6:	78 94       	sei
				set_counter_2(2000);
			} else {
				set_counter_2(3000);
			}
			displayFlag = 0;
			TCNT3 = 0;
     4b8:	c4 e9       	ldi	r28, 0x94	; 148
     4ba:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4bc:	8f e9       	ldi	r24, 0x9F	; 159
     4be:	9f e0       	ldi	r25, 0x0F	; 15
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <main+0x26>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0x2c>
     4c6:	00 00       	nop
	
	
	while(1)
	{	
		_delay_ms(1);
		if(displayFlag)
     4c8:	80 91 56 11 	lds	r24, 0x1156
     4cc:	88 23       	and	r24, r24
     4ce:	b1 f3       	breq	.-20     	; 0x4bc <main+0x22>
		{
			if(decode_message_TwiFIFO())
     4d0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <decode_message_TwiFIFO>
     4d4:	88 23       	and	r24, r24
     4d6:	29 f0       	breq	.+10     	; 0x4e2 <main+0x48>
			{
				sensors_display_data();
     4d8:	5a d3       	rcall	.+1716   	; 0xb8e <sensors_display_data>
				set_counter_2(2000);
     4da:	80 ed       	ldi	r24, 0xD0	; 208
     4dc:	97 e0       	ldi	r25, 0x07	; 7
     4de:	07 de       	rcall	.-1010   	; 0xee <set_counter_2>
     4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <main+0x4e>
			} else {
				set_counter_2(3000);
     4e2:	88 eb       	ldi	r24, 0xB8	; 184
     4e4:	9b e0       	ldi	r25, 0x0B	; 11
     4e6:	03 de       	rcall	.-1018   	; 0xee <set_counter_2>
			}
			displayFlag = 0;
     4e8:	10 92 56 11 	sts	0x1156, r1
			TCNT3 = 0;
     4ec:	19 82       	std	Y+1, r1	; 0x01
     4ee:	18 82       	st	Y, r1
     4f0:	e5 cf       	rjmp	.-54     	; 0x4bc <main+0x22>

000004f2 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
     4fc:	0b b6       	in	r0, 0x3b	; 59
     4fe:	0f 92       	push	r0
     500:	2f 93       	push	r18
     502:	3f 93       	push	r19
     504:	4f 93       	push	r20
     506:	5f 93       	push	r21
     508:	6f 93       	push	r22
     50a:	7f 93       	push	r23
     50c:	8f 93       	push	r24
     50e:	9f 93       	push	r25
     510:	af 93       	push	r26
     512:	bf 93       	push	r27
     514:	ef 93       	push	r30
     516:	ff 93       	push	r31
	sensors_start_sample();
     518:	36 d3       	rcall	.+1644   	; 0xb86 <sensors_start_sample>
	TCNT1 = 0;
     51a:	10 92 85 00 	sts	0x0085, r1
     51e:	10 92 84 00 	sts	0x0084, r1
}
     522:	ff 91       	pop	r31
     524:	ef 91       	pop	r30
     526:	bf 91       	pop	r27
     528:	af 91       	pop	r26
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	7f 91       	pop	r23
     530:	6f 91       	pop	r22
     532:	5f 91       	pop	r21
     534:	4f 91       	pop	r20
     536:	3f 91       	pop	r19
     538:	2f 91       	pop	r18
     53a:	0f 90       	pop	r0
     53c:	0b be       	out	0x3b, r0	; 59
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	8f 93       	push	r24
	displayFlag = 1;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	80 93 56 11 	sts	0x1156, r24
	TCNT3 = 0;
     55a:	10 92 95 00 	sts	0x0095, r1
     55e:	10 92 94 00 	sts	0x0094, r1
}
     562:	8f 91       	pop	r24
     564:	0f 90       	pop	r0
     566:	0f be       	out	0x3f, r0	; 63
     568:	0f 90       	pop	r0
     56a:	1f 90       	pop	r1
     56c:	18 95       	reti

0000056e <adc_start>:
	return sensorDataFlag;
}

void sensors_reset_flag()
{
	sensorDataFlag = false;
     56e:	ea e7       	ldi	r30, 0x7A	; 122
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	80 64       	ori	r24, 0x40	; 64
     576:	80 83       	st	Z, r24
     578:	08 95       	ret

0000057a <select_sensor>:
     57a:	80 93 37 12 	sts	0x1237, r24
     57e:	22 b1       	in	r18, 0x02	; 2
     580:	21 7e       	andi	r18, 0xE1	; 225
     582:	22 b9       	out	0x02, r18	; 2
     584:	83 30       	cpi	r24, 0x03	; 3
     586:	91 05       	cpc	r25, r1
     588:	b9 f0       	breq	.+46     	; 0x5b8 <select_sensor+0x3e>
     58a:	3c f4       	brge	.+14     	; 0x59a <select_sensor+0x20>
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	91 05       	cpc	r25, r1
     590:	69 f0       	breq	.+26     	; 0x5ac <select_sensor+0x32>
     592:	74 f4       	brge	.+28     	; 0x5b0 <select_sensor+0x36>
     594:	89 2b       	or	r24, r25
     596:	41 f0       	breq	.+16     	; 0x5a8 <select_sensor+0x2e>
     598:	08 95       	ret
     59a:	85 30       	cpi	r24, 0x05	; 5
     59c:	91 05       	cpc	r25, r1
     59e:	91 f0       	breq	.+36     	; 0x5c4 <select_sensor+0x4a>
     5a0:	6c f0       	brlt	.+26     	; 0x5bc <select_sensor+0x42>
     5a2:	06 97       	sbiw	r24, 0x06	; 6
     5a4:	b1 f4       	brne	.+44     	; 0x5d2 <select_sensor+0x58>
     5a6:	12 c0       	rjmp	.+36     	; 0x5cc <select_sensor+0x52>
     5a8:	11 9a       	sbi	0x02, 1	; 2
     5aa:	08 95       	ret
     5ac:	12 9a       	sbi	0x02, 2	; 2
     5ae:	08 95       	ret
     5b0:	82 b1       	in	r24, 0x02	; 2
     5b2:	86 60       	ori	r24, 0x06	; 6
     5b4:	82 b9       	out	0x02, r24	; 2
     5b6:	08 95       	ret
     5b8:	13 9a       	sbi	0x02, 3	; 2
     5ba:	08 95       	ret
     5bc:	82 b1       	in	r24, 0x02	; 2
     5be:	8a 60       	ori	r24, 0x0A	; 10
     5c0:	82 b9       	out	0x02, r24	; 2
     5c2:	08 95       	ret
     5c4:	82 b1       	in	r24, 0x02	; 2
     5c6:	8c 60       	ori	r24, 0x0C	; 12
     5c8:	82 b9       	out	0x02, r24	; 2
     5ca:	08 95       	ret
     5cc:	82 b1       	in	r24, 0x02	; 2
     5ce:	8e 60       	ori	r24, 0x0E	; 14
     5d0:	82 b9       	out	0x02, r24	; 2
     5d2:	08 95       	ret

000005d4 <sensors_init>:
     5d4:	4f 92       	push	r4
     5d6:	5f 92       	push	r5
     5d8:	6f 92       	push	r6
     5da:	7f 92       	push	r7
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	8f e8       	ldi	r24, 0x8F	; 143
     5f2:	80 93 7a 00 	sts	0x007A, r24
     5f6:	80 e6       	ldi	r24, 0x60	; 96
     5f8:	80 93 7c 00 	sts	0x007C, r24
     5fc:	8a e9       	ldi	r24, 0x9A	; 154
     5fe:	99 e9       	ldi	r25, 0x99	; 153
     600:	a9 e4       	ldi	r26, 0x49	; 73
     602:	b0 e4       	ldi	r27, 0x40	; 64
     604:	80 93 57 11 	sts	0x1157, r24
     608:	90 93 58 11 	sts	0x1158, r25
     60c:	a0 93 59 11 	sts	0x1159, r26
     610:	b0 93 5a 11 	sts	0x115A, r27
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	a0 ec       	ldi	r26, 0xC0	; 192
     61a:	b0 e4       	ldi	r27, 0x40	; 64
     61c:	80 93 5b 11 	sts	0x115B, r24
     620:	90 93 5c 11 	sts	0x115C, r25
     624:	a0 93 5d 11 	sts	0x115D, r26
     628:	b0 93 5e 11 	sts	0x115E, r27
     62c:	82 e5       	ldi	r24, 0x52	; 82
     62e:	98 eb       	ldi	r25, 0xB8	; 184
     630:	ae e3       	ldi	r26, 0x3E	; 62
     632:	b0 e4       	ldi	r27, 0x40	; 64
     634:	80 93 5f 11 	sts	0x115F, r24
     638:	90 93 60 11 	sts	0x1160, r25
     63c:	a0 93 61 11 	sts	0x1161, r26
     640:	b0 93 62 11 	sts	0x1162, r27
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	a0 ee       	ldi	r26, 0xE0	; 224
     64a:	b0 e4       	ldi	r27, 0x40	; 64
     64c:	80 93 63 11 	sts	0x1163, r24
     650:	90 93 64 11 	sts	0x1164, r25
     654:	a0 93 65 11 	sts	0x1165, r26
     658:	b0 93 66 11 	sts	0x1166, r27
     65c:	00 e0       	ldi	r16, 0x00	; 0
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	20 e3       	ldi	r18, 0x30	; 48
     662:	30 e4       	ldi	r19, 0x40	; 64
     664:	00 93 67 11 	sts	0x1167, r16
     668:	10 93 68 11 	sts	0x1168, r17
     66c:	20 93 69 11 	sts	0x1169, r18
     670:	30 93 6a 11 	sts	0x116A, r19
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	a0 e0       	ldi	r26, 0x00	; 0
     67a:	b1 e4       	ldi	r27, 0x41	; 65
     67c:	80 93 6b 11 	sts	0x116B, r24
     680:	90 93 6c 11 	sts	0x116C, r25
     684:	a0 93 6d 11 	sts	0x116D, r26
     688:	b0 93 6e 11 	sts	0x116E, r27
     68c:	8a e0       	ldi	r24, 0x0A	; 10
     68e:	97 ed       	ldi	r25, 0xD7	; 215
     690:	a3 e1       	ldi	r26, 0x13	; 19
     692:	b0 e4       	ldi	r27, 0x40	; 64
     694:	80 93 6f 11 	sts	0x116F, r24
     698:	90 93 70 11 	sts	0x1170, r25
     69c:	a0 93 71 11 	sts	0x1171, r26
     6a0:	b0 93 72 11 	sts	0x1172, r27
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	a0 e2       	ldi	r26, 0x20	; 32
     6aa:	b1 e4       	ldi	r27, 0x41	; 65
     6ac:	80 93 73 11 	sts	0x1173, r24
     6b0:	90 93 74 11 	sts	0x1174, r25
     6b4:	a0 93 75 11 	sts	0x1175, r26
     6b8:	b0 93 76 11 	sts	0x1176, r27
     6bc:	85 e8       	ldi	r24, 0x85	; 133
     6be:	9b ee       	ldi	r25, 0xEB	; 235
     6c0:	a1 ed       	ldi	r26, 0xD1	; 209
     6c2:	bf e3       	ldi	r27, 0x3F	; 63
     6c4:	80 93 77 11 	sts	0x1177, r24
     6c8:	90 93 78 11 	sts	0x1178, r25
     6cc:	a0 93 79 11 	sts	0x1179, r26
     6d0:	b0 93 7a 11 	sts	0x117A, r27
     6d4:	0f 2e       	mov	r0, r31
     6d6:	41 2c       	mov	r4, r1
     6d8:	51 2c       	mov	r5, r1
     6da:	f0 e7       	ldi	r31, 0x70	; 112
     6dc:	6f 2e       	mov	r6, r31
     6de:	f1 e4       	ldi	r31, 0x41	; 65
     6e0:	7f 2e       	mov	r7, r31
     6e2:	f0 2d       	mov	r31, r0
     6e4:	40 92 7b 11 	sts	0x117B, r4
     6e8:	50 92 7c 11 	sts	0x117C, r5
     6ec:	60 92 7d 11 	sts	0x117D, r6
     6f0:	70 92 7e 11 	sts	0x117E, r7
     6f4:	84 e1       	ldi	r24, 0x14	; 20
     6f6:	9e ea       	ldi	r25, 0xAE	; 174
     6f8:	a7 ea       	ldi	r26, 0xA7	; 167
     6fa:	bf e3       	ldi	r27, 0x3F	; 63
     6fc:	80 93 7f 11 	sts	0x117F, r24
     700:	90 93 80 11 	sts	0x1180, r25
     704:	a0 93 81 11 	sts	0x1181, r26
     708:	b0 93 82 11 	sts	0x1182, r27
     70c:	0f 2e       	mov	r0, r31
     70e:	81 2c       	mov	r8, r1
     710:	91 2c       	mov	r9, r1
     712:	f0 ea       	ldi	r31, 0xA0	; 160
     714:	af 2e       	mov	r10, r31
     716:	f1 e4       	ldi	r31, 0x41	; 65
     718:	bf 2e       	mov	r11, r31
     71a:	f0 2d       	mov	r31, r0
     71c:	80 92 83 11 	sts	0x1183, r8
     720:	90 92 84 11 	sts	0x1184, r9
     724:	a0 92 85 11 	sts	0x1185, r10
     728:	b0 92 86 11 	sts	0x1186, r11
     72c:	81 e7       	ldi	r24, 0x71	; 113
     72e:	9d e3       	ldi	r25, 0x3D	; 61
     730:	aa e8       	ldi	r26, 0x8A	; 138
     732:	bf e3       	ldi	r27, 0x3F	; 63
     734:	80 93 87 11 	sts	0x1187, r24
     738:	90 93 88 11 	sts	0x1188, r25
     73c:	a0 93 89 11 	sts	0x1189, r26
     740:	b0 93 8a 11 	sts	0x118A, r27
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a8 ec       	ldi	r26, 0xC8	; 200
     74a:	b1 e4       	ldi	r27, 0x41	; 65
     74c:	80 93 8b 11 	sts	0x118B, r24
     750:	90 93 8c 11 	sts	0x118C, r25
     754:	a0 93 8d 11 	sts	0x118D, r26
     758:	b0 93 8e 11 	sts	0x118E, r27
     75c:	8f e1       	ldi	r24, 0x1F	; 31
     75e:	95 e8       	ldi	r25, 0x85	; 133
     760:	ab e6       	ldi	r26, 0x6B	; 107
     762:	bf e3       	ldi	r27, 0x3F	; 63
     764:	80 93 8f 11 	sts	0x118F, r24
     768:	90 93 90 11 	sts	0x1190, r25
     76c:	a0 93 91 11 	sts	0x1191, r26
     770:	b0 93 92 11 	sts	0x1192, r27
     774:	0f 2e       	mov	r0, r31
     776:	c1 2c       	mov	r12, r1
     778:	d1 2c       	mov	r13, r1
     77a:	f0 ef       	ldi	r31, 0xF0	; 240
     77c:	ef 2e       	mov	r14, r31
     77e:	f1 e4       	ldi	r31, 0x41	; 65
     780:	ff 2e       	mov	r15, r31
     782:	f0 2d       	mov	r31, r0
     784:	c0 92 93 11 	sts	0x1193, r12
     788:	d0 92 94 11 	sts	0x1194, r13
     78c:	e0 92 95 11 	sts	0x1195, r14
     790:	f0 92 96 11 	sts	0x1196, r15
     794:	84 ea       	ldi	r24, 0xA4	; 164
     796:	90 e7       	ldi	r25, 0x70	; 112
     798:	ad e3       	ldi	r26, 0x3D	; 61
     79a:	bf e3       	ldi	r27, 0x3F	; 63
     79c:	80 93 97 11 	sts	0x1197, r24
     7a0:	90 93 98 11 	sts	0x1198, r25
     7a4:	a0 93 99 11 	sts	0x1199, r26
     7a8:	b0 93 9a 11 	sts	0x119A, r27
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	a0 e2       	ldi	r26, 0x20	; 32
     7b2:	b2 e4       	ldi	r27, 0x42	; 66
     7b4:	80 93 9b 11 	sts	0x119B, r24
     7b8:	90 93 9c 11 	sts	0x119C, r25
     7bc:	a0 93 9d 11 	sts	0x119D, r26
     7c0:	b0 93 9e 11 	sts	0x119E, r27
     7c4:	86 ef       	ldi	r24, 0xF6	; 246
     7c6:	98 e2       	ldi	r25, 0x28	; 40
     7c8:	ac e1       	ldi	r26, 0x1C	; 28
     7ca:	bf e3       	ldi	r27, 0x3F	; 63
     7cc:	80 93 9f 11 	sts	0x119F, r24
     7d0:	90 93 a0 11 	sts	0x11A0, r25
     7d4:	a0 93 a1 11 	sts	0x11A1, r26
     7d8:	b0 93 a2 11 	sts	0x11A2, r27
     7dc:	00 e0       	ldi	r16, 0x00	; 0
     7de:	10 e0       	ldi	r17, 0x00	; 0
     7e0:	28 e4       	ldi	r18, 0x48	; 72
     7e2:	32 e4       	ldi	r19, 0x42	; 66
     7e4:	00 93 a3 11 	sts	0x11A3, r16
     7e8:	10 93 a4 11 	sts	0x11A4, r17
     7ec:	20 93 a5 11 	sts	0x11A5, r18
     7f0:	30 93 a6 11 	sts	0x11A6, r19
     7f4:	8c e5       	ldi	r24, 0x5C	; 92
     7f6:	9f e8       	ldi	r25, 0x8F	; 143
     7f8:	a2 e0       	ldi	r26, 0x02	; 2
     7fa:	bf e3       	ldi	r27, 0x3F	; 63
     7fc:	80 93 a7 11 	sts	0x11A7, r24
     800:	90 93 a8 11 	sts	0x11A8, r25
     804:	a0 93 a9 11 	sts	0x11A9, r26
     808:	b0 93 aa 11 	sts	0x11AA, r27
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	a0 e7       	ldi	r26, 0x70	; 112
     812:	b2 e4       	ldi	r27, 0x42	; 66
     814:	80 93 ab 11 	sts	0x11AB, r24
     818:	90 93 ac 11 	sts	0x11AC, r25
     81c:	a0 93 ad 11 	sts	0x11AD, r26
     820:	b0 93 ae 11 	sts	0x11AE, r27
     824:	06 e6       	ldi	r16, 0x66	; 102
     826:	16 e6       	ldi	r17, 0x66	; 102
     828:	26 ee       	ldi	r18, 0xE6	; 230
     82a:	3e e3       	ldi	r19, 0x3E	; 62
     82c:	00 93 af 11 	sts	0x11AF, r16
     830:	10 93 b0 11 	sts	0x11B0, r17
     834:	20 93 b1 11 	sts	0x11B1, r18
     838:	30 93 b2 11 	sts	0x11B2, r19
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	6c e8       	ldi	r22, 0x8C	; 140
     842:	72 e4       	ldi	r23, 0x42	; 66
     844:	40 93 b3 11 	sts	0x11B3, r20
     848:	50 93 b4 11 	sts	0x11B4, r21
     84c:	60 93 b5 11 	sts	0x11B5, r22
     850:	70 93 b6 11 	sts	0x11B6, r23
     854:	85 e8       	ldi	r24, 0x85	; 133
     856:	9b ee       	ldi	r25, 0xEB	; 235
     858:	a1 ed       	ldi	r26, 0xD1	; 209
     85a:	be e3       	ldi	r27, 0x3E	; 62
     85c:	80 93 b7 11 	sts	0x11B7, r24
     860:	90 93 b8 11 	sts	0x11B8, r25
     864:	a0 93 b9 11 	sts	0x11B9, r26
     868:	b0 93 ba 11 	sts	0x11BA, r27
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a0 ea       	ldi	r26, 0xA0	; 160
     872:	b2 e4       	ldi	r27, 0x42	; 66
     874:	80 93 bb 11 	sts	0x11BB, r24
     878:	90 93 bc 11 	sts	0x11BC, r25
     87c:	a0 93 bd 11 	sts	0x11BD, r26
     880:	b0 93 be 11 	sts	0x11BE, r27
     884:	00 e0       	ldi	r16, 0x00	; 0
     886:	10 e0       	ldi	r17, 0x00	; 0
     888:	20 e3       	ldi	r18, 0x30	; 48
     88a:	30 e4       	ldi	r19, 0x40	; 64
     88c:	00 93 bf 11 	sts	0x11BF, r16
     890:	10 93 c0 11 	sts	0x11C0, r17
     894:	20 93 c1 11 	sts	0x11C1, r18
     898:	30 93 c2 11 	sts	0x11C2, r19
     89c:	40 92 c3 11 	sts	0x11C3, r4
     8a0:	50 92 c4 11 	sts	0x11C4, r5
     8a4:	60 92 c5 11 	sts	0x11C5, r6
     8a8:	70 92 c6 11 	sts	0x11C6, r7
     8ac:	0f 2e       	mov	r0, r31
     8ae:	f3 e3       	ldi	r31, 0x33	; 51
     8b0:	4f 2e       	mov	r4, r31
     8b2:	54 2c       	mov	r5, r4
     8b4:	f3 e2       	ldi	r31, 0x23	; 35
     8b6:	6f 2e       	mov	r6, r31
     8b8:	f0 e4       	ldi	r31, 0x40	; 64
     8ba:	7f 2e       	mov	r7, r31
     8bc:	f0 2d       	mov	r31, r0
     8be:	40 92 c7 11 	sts	0x11C7, r4
     8c2:	50 92 c8 11 	sts	0x11C8, r5
     8c6:	60 92 c9 11 	sts	0x11C9, r6
     8ca:	70 92 ca 11 	sts	0x11CA, r7
     8ce:	80 92 cb 11 	sts	0x11CB, r8
     8d2:	90 92 cc 11 	sts	0x11CC, r9
     8d6:	a0 92 cd 11 	sts	0x11CD, r10
     8da:	b0 92 ce 11 	sts	0x11CE, r11
     8de:	81 2c       	mov	r8, r1
     8e0:	91 2c       	mov	r9, r1
     8e2:	54 01       	movw	r10, r8
     8e4:	68 94       	set
     8e6:	b6 f8       	bld	r11, 6
     8e8:	80 92 cf 11 	sts	0x11CF, r8
     8ec:	90 92 d0 11 	sts	0x11D0, r9
     8f0:	a0 92 d1 11 	sts	0x11D1, r10
     8f4:	b0 92 d2 11 	sts	0x11D2, r11
     8f8:	c0 92 d3 11 	sts	0x11D3, r12
     8fc:	d0 92 d4 11 	sts	0x11D4, r13
     900:	e0 92 d5 11 	sts	0x11D5, r14
     904:	f0 92 d6 11 	sts	0x11D6, r15
     908:	0f 2e       	mov	r0, r31
     90a:	f6 e6       	ldi	r31, 0x66	; 102
     90c:	cf 2e       	mov	r12, r31
     90e:	dc 2c       	mov	r13, r12
     910:	f6 ec       	ldi	r31, 0xC6	; 198
     912:	ef 2e       	mov	r14, r31
     914:	ff e3       	ldi	r31, 0x3F	; 63
     916:	ff 2e       	mov	r15, r31
     918:	f0 2d       	mov	r31, r0
     91a:	c0 92 d7 11 	sts	0x11D7, r12
     91e:	d0 92 d8 11 	sts	0x11D8, r13
     922:	e0 92 d9 11 	sts	0x11D9, r14
     926:	f0 92 da 11 	sts	0x11DA, r15
     92a:	00 e0       	ldi	r16, 0x00	; 0
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	20 e2       	ldi	r18, 0x20	; 32
     930:	32 e4       	ldi	r19, 0x42	; 66
     932:	00 93 db 11 	sts	0x11DB, r16
     936:	10 93 dc 11 	sts	0x11DC, r17
     93a:	20 93 dd 11 	sts	0x11DD, r18
     93e:	30 93 de 11 	sts	0x11DE, r19
     942:	00 e0       	ldi	r16, 0x00	; 0
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	20 ea       	ldi	r18, 0xA0	; 160
     948:	3f e3       	ldi	r19, 0x3F	; 63
     94a:	00 93 df 11 	sts	0x11DF, r16
     94e:	10 93 e0 11 	sts	0x11E0, r17
     952:	20 93 e1 11 	sts	0x11E1, r18
     956:	30 93 e2 11 	sts	0x11E2, r19
     95a:	00 e0       	ldi	r16, 0x00	; 0
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	28 e4       	ldi	r18, 0x48	; 72
     960:	32 e4       	ldi	r19, 0x42	; 66
     962:	00 93 e3 11 	sts	0x11E3, r16
     966:	10 93 e4 11 	sts	0x11E4, r17
     96a:	20 93 e5 11 	sts	0x11E5, r18
     96e:	30 93 e6 11 	sts	0x11E6, r19
     972:	03 ec       	ldi	r16, 0xC3	; 195
     974:	15 ef       	ldi	r17, 0xF5	; 245
     976:	28 e8       	ldi	r18, 0x88	; 136
     978:	3f e3       	ldi	r19, 0x3F	; 63
     97a:	00 93 e7 11 	sts	0x11E7, r16
     97e:	10 93 e8 11 	sts	0x11E8, r17
     982:	20 93 e9 11 	sts	0x11E9, r18
     986:	30 93 ea 11 	sts	0x11EA, r19
     98a:	00 e0       	ldi	r16, 0x00	; 0
     98c:	10 e0       	ldi	r17, 0x00	; 0
     98e:	20 e7       	ldi	r18, 0x70	; 112
     990:	32 e4       	ldi	r19, 0x42	; 66
     992:	00 93 eb 11 	sts	0x11EB, r16
     996:	10 93 ec 11 	sts	0x11EC, r17
     99a:	20 93 ed 11 	sts	0x11ED, r18
     99e:	30 93 ee 11 	sts	0x11EE, r19
     9a2:	0a e9       	ldi	r16, 0x9A	; 154
     9a4:	19 e9       	ldi	r17, 0x99	; 153
     9a6:	29 e5       	ldi	r18, 0x59	; 89
     9a8:	3f e3       	ldi	r19, 0x3F	; 63
     9aa:	00 93 ef 11 	sts	0x11EF, r16
     9ae:	10 93 f0 11 	sts	0x11F0, r17
     9b2:	20 93 f1 11 	sts	0x11F1, r18
     9b6:	30 93 f2 11 	sts	0x11F2, r19
     9ba:	40 93 f3 11 	sts	0x11F3, r20
     9be:	50 93 f4 11 	sts	0x11F4, r21
     9c2:	60 93 f5 11 	sts	0x11F5, r22
     9c6:	70 93 f6 11 	sts	0x11F6, r23
     9ca:	4d ec       	ldi	r20, 0xCD	; 205
     9cc:	5c ec       	ldi	r21, 0xCC	; 204
     9ce:	6c e4       	ldi	r22, 0x4C	; 76
     9d0:	7f e3       	ldi	r23, 0x3F	; 63
     9d2:	40 93 f7 11 	sts	0x11F7, r20
     9d6:	50 93 f8 11 	sts	0x11F8, r21
     9da:	60 93 f9 11 	sts	0x11F9, r22
     9de:	70 93 fa 11 	sts	0x11FA, r23
     9e2:	80 93 fb 11 	sts	0x11FB, r24
     9e6:	90 93 fc 11 	sts	0x11FC, r25
     9ea:	a0 93 fd 11 	sts	0x11FD, r26
     9ee:	b0 93 fe 11 	sts	0x11FE, r27
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	a0 e4       	ldi	r26, 0x40	; 64
     9f8:	bf e3       	ldi	r27, 0x3F	; 63
     9fa:	80 93 ff 11 	sts	0x11FF, r24
     9fe:	90 93 00 12 	sts	0x1200, r25
     a02:	a0 93 01 12 	sts	0x1201, r26
     a06:	b0 93 02 12 	sts	0x1202, r27
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a4 eb       	ldi	r26, 0xB4	; 180
     a10:	b2 e4       	ldi	r27, 0x42	; 66
     a12:	80 93 03 12 	sts	0x1203, r24
     a16:	90 93 04 12 	sts	0x1204, r25
     a1a:	a0 93 05 12 	sts	0x1205, r26
     a1e:	b0 93 06 12 	sts	0x1206, r27
     a22:	86 e6       	ldi	r24, 0x66	; 102
     a24:	96 e6       	ldi	r25, 0x66	; 102
     a26:	a6 e2       	ldi	r26, 0x26	; 38
     a28:	bf e3       	ldi	r27, 0x3F	; 63
     a2a:	80 93 07 12 	sts	0x1207, r24
     a2e:	90 93 08 12 	sts	0x1208, r25
     a32:	a0 93 09 12 	sts	0x1209, r26
     a36:	b0 93 0a 12 	sts	0x120A, r27
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a8 ec       	ldi	r26, 0xC8	; 200
     a40:	b2 e4       	ldi	r27, 0x42	; 66
     a42:	80 93 0b 12 	sts	0x120B, r24
     a46:	90 93 0c 12 	sts	0x120C, r25
     a4a:	a0 93 0d 12 	sts	0x120D, r26
     a4e:	b0 93 0e 12 	sts	0x120E, r27
     a52:	8a e9       	ldi	r24, 0x9A	; 154
     a54:	99 e9       	ldi	r25, 0x99	; 153
     a56:	a9 e1       	ldi	r26, 0x19	; 25
     a58:	bf e3       	ldi	r27, 0x3F	; 63
     a5a:	80 93 0f 12 	sts	0x120F, r24
     a5e:	90 93 10 12 	sts	0x1210, r25
     a62:	a0 93 11 12 	sts	0x1211, r26
     a66:	b0 93 12 12 	sts	0x1212, r27
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	ac ed       	ldi	r26, 0xDC	; 220
     a70:	b2 e4       	ldi	r27, 0x42	; 66
     a72:	80 93 13 12 	sts	0x1213, r24
     a76:	90 93 14 12 	sts	0x1214, r25
     a7a:	a0 93 15 12 	sts	0x1215, r26
     a7e:	b0 93 16 12 	sts	0x1216, r27
     a82:	8d ec       	ldi	r24, 0xCD	; 205
     a84:	9c ec       	ldi	r25, 0xCC	; 204
     a86:	ac e0       	ldi	r26, 0x0C	; 12
     a88:	bf e3       	ldi	r27, 0x3F	; 63
     a8a:	80 93 17 12 	sts	0x1217, r24
     a8e:	90 93 18 12 	sts	0x1218, r25
     a92:	a0 93 19 12 	sts	0x1219, r26
     a96:	b0 93 1a 12 	sts	0x121A, r27
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 ef       	ldi	r26, 0xF0	; 240
     aa0:	b2 e4       	ldi	r27, 0x42	; 66
     aa2:	80 93 1b 12 	sts	0x121B, r24
     aa6:	90 93 1c 12 	sts	0x121C, r25
     aaa:	a0 93 1d 12 	sts	0x121D, r26
     aae:	b0 93 1e 12 	sts	0x121E, r27
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	a0 e0       	ldi	r26, 0x00	; 0
     ab8:	bf e3       	ldi	r27, 0x3F	; 63
     aba:	80 93 1f 12 	sts	0x121F, r24
     abe:	90 93 20 12 	sts	0x1220, r25
     ac2:	a0 93 21 12 	sts	0x1221, r26
     ac6:	b0 93 22 12 	sts	0x1222, r27
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a2 e0       	ldi	r26, 0x02	; 2
     ad0:	b3 e4       	ldi	r27, 0x43	; 67
     ad2:	80 93 23 12 	sts	0x1223, r24
     ad6:	90 93 24 12 	sts	0x1224, r25
     ada:	a0 93 25 12 	sts	0x1225, r26
     ade:	b0 93 26 12 	sts	0x1226, r27
     ae2:	86 e6       	ldi	r24, 0x66	; 102
     ae4:	96 e6       	ldi	r25, 0x66	; 102
     ae6:	a6 ee       	ldi	r26, 0xE6	; 230
     ae8:	be e3       	ldi	r27, 0x3E	; 62
     aea:	80 93 27 12 	sts	0x1227, r24
     aee:	90 93 28 12 	sts	0x1228, r25
     af2:	a0 93 29 12 	sts	0x1229, r26
     af6:	b0 93 2a 12 	sts	0x122A, r27
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	ac e0       	ldi	r26, 0x0C	; 12
     b00:	b3 e4       	ldi	r27, 0x43	; 67
     b02:	80 93 2b 12 	sts	0x122B, r24
     b06:	90 93 2c 12 	sts	0x122C, r25
     b0a:	a0 93 2d 12 	sts	0x122D, r26
     b0e:	b0 93 2e 12 	sts	0x122E, r27
     b12:	8d e3       	ldi	r24, 0x3D	; 61
     b14:	9a e0       	ldi	r25, 0x0A	; 10
     b16:	a7 ed       	ldi	r26, 0xD7	; 215
     b18:	be e3       	ldi	r27, 0x3E	; 62
     b1a:	80 93 2f 12 	sts	0x122F, r24
     b1e:	90 93 30 12 	sts	0x1230, r25
     b22:	a0 93 31 12 	sts	0x1231, r26
     b26:	b0 93 32 12 	sts	0x1232, r27
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	a6 e1       	ldi	r26, 0x16	; 22
     b30:	b3 e4       	ldi	r27, 0x43	; 67
     b32:	80 93 33 12 	sts	0x1233, r24
     b36:	90 93 34 12 	sts	0x1234, r25
     b3a:	a0 93 35 12 	sts	0x1235, r26
     b3e:	b0 93 36 12 	sts	0x1236, r27
     b42:	81 b1       	in	r24, 0x01	; 1
     b44:	8e 63       	ori	r24, 0x3E	; 62
     b46:	81 b9       	out	0x01, r24	; 1
     b48:	08 98       	cbi	0x01, 0	; 1
     b4a:	15 98       	cbi	0x02, 5	; 2
     b4c:	82 b1       	in	r24, 0x02	; 2
     b4e:	81 7e       	andi	r24, 0xE1	; 225
     b50:	82 b9       	out	0x02, r24	; 2
     b52:	50 9a       	sbi	0x0a, 0	; 10
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 68 00 	sts	0x0068, r24
     b5a:	80 e4       	ldi	r24, 0x40	; 64
     b5c:	80 93 6b 00 	sts	0x006B, r24
     b60:	0f 9a       	sbi	0x01, 7	; 1
     b62:	0e 98       	cbi	0x01, 6	; 1
     b64:	85 e0       	ldi	r24, 0x05	; 5
     b66:	85 bd       	out	0x25, r24	; 37
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	bf 90       	pop	r11
     b76:	af 90       	pop	r10
     b78:	9f 90       	pop	r9
     b7a:	8f 90       	pop	r8
     b7c:	7f 90       	pop	r7
     b7e:	6f 90       	pop	r6
     b80:	5f 90       	pop	r5
     b82:	4f 90       	pop	r4
     b84:	08 95       	ret

00000b86 <sensors_start_sample>:
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	f7 dc       	rcall	.-1554   	; 0x57a <select_sensor>
     b8c:	f0 cc       	rjmp	.-1568   	; 0x56e <adc_start>

00000b8e <sensors_display_data>:
     b8e:	18 db       	rcall	.-2512   	; 0x1c0 <display_clear>
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	17 db       	rcall	.-2514   	; 0x1c8 <display_set_pos>
     b9a:	8e e0       	ldi	r24, 0x0E	; 14
     b9c:	91 e1       	ldi	r25, 0x11	; 17
     b9e:	0d dc       	rcall	.-2022   	; 0x3ba <display_text>
     ba0:	60 91 38 12 	lds	r22, 0x1238
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__floatunsisf>
     bae:	c2 db       	rcall	.-2172   	; 0x334 <display_value>
     bb0:	68 e0       	ldi	r22, 0x08	; 8
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	07 db       	rcall	.-2546   	; 0x1c8 <display_set_pos>
     bba:	82 e1       	ldi	r24, 0x12	; 18
     bbc:	91 e1       	ldi	r25, 0x11	; 17
     bbe:	fd db       	rcall	.-2054   	; 0x3ba <display_text>
     bc0:	60 91 39 12 	lds	r22, 0x1239
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	f3 d7       	rcall	.+4070   	; 0x1bb2 <__floatunsisf>
     bcc:	b3 db       	rcall	.-2202   	; 0x334 <display_value>
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	f8 da       	rcall	.-2576   	; 0x1c8 <display_set_pos>
     bd8:	86 e1       	ldi	r24, 0x16	; 22
     bda:	91 e1       	ldi	r25, 0x11	; 17
     bdc:	ee db       	rcall	.-2084   	; 0x3ba <display_text>
     bde:	60 91 3a 12 	lds	r22, 0x123A
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	e4 d7       	rcall	.+4040   	; 0x1bb2 <__floatunsisf>
     bea:	a4 db       	rcall	.-2232   	; 0x334 <display_value>
     bec:	68 e0       	ldi	r22, 0x08	; 8
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	e9 da       	rcall	.-2606   	; 0x1c8 <display_set_pos>
     bf6:	8a e1       	ldi	r24, 0x1A	; 26
     bf8:	91 e1       	ldi	r25, 0x11	; 17
     bfa:	df db       	rcall	.-2114   	; 0x3ba <display_text>
     bfc:	60 91 3b 12 	lds	r22, 0x123B
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	d5 d7       	rcall	.+4010   	; 0x1bb2 <__floatunsisf>
     c08:	95 db       	rcall	.-2262   	; 0x334 <display_value>
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	da da       	rcall	.-2636   	; 0x1c8 <display_set_pos>
     c14:	8e e1       	ldi	r24, 0x1E	; 30
     c16:	91 e1       	ldi	r25, 0x11	; 17
     c18:	d0 db       	rcall	.-2144   	; 0x3ba <display_text>
     c1a:	60 91 3c 12 	lds	r22, 0x123C
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	c6 d7       	rcall	.+3980   	; 0x1bb2 <__floatunsisf>
     c26:	86 db       	rcall	.-2292   	; 0x334 <display_value>
     c28:	68 e0       	ldi	r22, 0x08	; 8
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	cb da       	rcall	.-2666   	; 0x1c8 <display_set_pos>
     c32:	82 e2       	ldi	r24, 0x22	; 34
     c34:	91 e1       	ldi	r25, 0x11	; 17
     c36:	c1 db       	rcall	.-2174   	; 0x3ba <display_text>
     c38:	60 91 3d 12 	lds	r22, 0x123D
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	b7 d7       	rcall	.+3950   	; 0x1bb2 <__floatunsisf>
     c44:	77 db       	rcall	.-2322   	; 0x334 <display_value>
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	bc da       	rcall	.-2696   	; 0x1c8 <display_set_pos>
     c50:	86 e2       	ldi	r24, 0x26	; 38
     c52:	91 e1       	ldi	r25, 0x11	; 17
     c54:	b2 db       	rcall	.-2204   	; 0x3ba <display_text>
     c56:	60 91 3e 12 	lds	r22, 0x123E
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a8 d7       	rcall	.+3920   	; 0x1bb2 <__floatunsisf>
     c62:	68 db       	rcall	.-2352   	; 0x334 <display_value>
     c64:	68 e0       	ldi	r22, 0x08	; 8
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	ad da       	rcall	.-2726   	; 0x1c8 <display_set_pos>
     c6e:	8a e2       	ldi	r24, 0x2A	; 42
     c70:	91 e1       	ldi	r25, 0x11	; 17
     c72:	a3 db       	rcall	.-2234   	; 0x3ba <display_text>
     c74:	60 91 3f 12 	lds	r22, 0x123F
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	99 d7       	rcall	.+3890   	; 0x1bb2 <__floatunsisf>
     c80:	59 cb       	rjmp	.-2382   	; 0x334 <display_value>

00000c82 <sensors_get_data>:
}

uint8_t* sensors_get_data()
{
	return gSensorBuffer;
}
     c82:	88 e3       	ldi	r24, 0x38	; 56
     c84:	92 e1       	ldi	r25, 0x12	; 18
     c86:	08 95       	ret

00000c88 <__vector_24>:


ISR(ADC_vect)
{
     c88:	1f 92       	push	r1
     c8a:	0f 92       	push	r0
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	0f 92       	push	r0
     c90:	11 24       	eor	r1, r1
     c92:	0b b6       	in	r0, 0x3b	; 59
     c94:	0f 92       	push	r0
     c96:	2f 92       	push	r2
     c98:	3f 92       	push	r3
     c9a:	4f 92       	push	r4
     c9c:	5f 92       	push	r5
     c9e:	6f 92       	push	r6
     ca0:	7f 92       	push	r7
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	2d 97       	sbiw	r28, 0x0d	; 13
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	cd bf       	out	0x3d, r28	; 61
	cli();
     cdc:	f8 94       	cli
	uint8_t adcValue = ADCH;
     cde:	60 91 79 00 	lds	r22, 0x0079
	float vin = adcValue * 5.0 / 256.0;
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	66 d7       	rcall	.+3788   	; 0x1bb6 <__floatsisf>
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 ea       	ldi	r20, 0xA0	; 160
     cf0:	50 e4       	ldi	r21, 0x40	; 64
     cf2:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsf3>
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5b e3       	ldi	r21, 0x3B	; 59
     cfe:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsf3>
     d02:	6d 83       	std	Y+5, r22	; 0x05
     d04:	7e 83       	std	Y+6, r23	; 0x06
     d06:	8f 83       	std	Y+7, r24	; 0x07
     d08:	98 87       	std	Y+8, r25	; 0x08
     d0a:	56 2e       	mov	r5, r22
     d0c:	47 2e       	mov	r4, r23
     d0e:	38 2e       	mov	r3, r24
     d10:	29 2e       	mov	r2, r25
	if(gSelectedSensor == 4)
     d12:	20 91 37 12 	lds	r18, 0x1237
     d16:	29 87       	std	Y+9, r18	; 0x09
     d18:	24 30       	cpi	r18, 0x04	; 4
     d1a:	09 f0       	breq	.+2      	; 0xd1e <__vector_24+0x96>
     d1c:	3a c1       	rjmp	.+628    	; 0xf92 <__vector_24+0x30a>
	return IRShort[12][1]*10;
}

int voltage_to_mm_long(float voltage)
{
	if(voltage >= IRLong[0][0])
     d1e:	c0 90 bf 11 	lds	r12, 0x11BF
     d22:	d0 90 c0 11 	lds	r13, 0x11C0
     d26:	e0 90 c1 11 	lds	r14, 0x11C1
     d2a:	f0 90 c2 11 	lds	r15, 0x11C2
     d2e:	a7 01       	movw	r20, r14
     d30:	96 01       	movw	r18, r12
     d32:	f1 d7       	rcall	.+4066   	; 0x1d16 <__gesf2>
     d34:	88 23       	and	r24, r24
     d36:	84 f0       	brlt	.+32     	; 0xd58 <__vector_24+0xd0>
	{
		return IRLong[0][1]*10;
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e2       	ldi	r20, 0x20	; 32
     d3e:	51 e4       	ldi	r21, 0x41	; 65
     d40:	60 91 c3 11 	lds	r22, 0x11C3
     d44:	70 91 c4 11 	lds	r23, 0x11C4
     d48:	80 91 c5 11 	lds	r24, 0x11C5
     d4c:	90 91 c6 11 	lds	r25, 0x11C6
     d50:	e6 d7       	rcall	.+4044   	; 0x1d1e <__mulsf3>
     d52:	fe d6       	rcall	.+3580   	; 0x1b50 <__fixsfsi>
     d54:	cb 01       	movw	r24, r22
     d56:	17 c1       	rjmp	.+558    	; 0xf86 <__vector_24+0x2fe>
	} else if(voltage <= IRLong[14][0])
     d58:	20 91 2f 12 	lds	r18, 0x122F
     d5c:	30 91 30 12 	lds	r19, 0x1230
     d60:	40 91 31 12 	lds	r20, 0x1231
     d64:	50 91 32 12 	lds	r21, 0x1232
     d68:	bd 81       	ldd	r27, Y+5	; 0x05
     d6a:	ae 81       	ldd	r26, Y+6	; 0x06
     d6c:	1f 81       	ldd	r17, Y+7	; 0x07
     d6e:	08 85       	ldd	r16, Y+8	; 0x08
     d70:	6b 2f       	mov	r22, r27
     d72:	7a 2f       	mov	r23, r26
     d74:	81 2f       	mov	r24, r17
     d76:	90 2f       	mov	r25, r16
     d78:	7f d6       	rcall	.+3326   	; 0x1a78 <__cmpsf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	a4 f4       	brge	.+40     	; 0xda6 <__vector_24+0x11e>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     d7e:	80 90 c7 11 	lds	r8, 0x11C7
     d82:	90 90 c8 11 	lds	r9, 0x11C8
     d86:	a0 90 c9 11 	lds	r10, 0x11C9
     d8a:	b0 90 ca 11 	lds	r11, 0x11CA
		if(next == voltage)
     d8e:	a5 01       	movw	r20, r10
     d90:	94 01       	movw	r18, r8
     d92:	bd 81       	ldd	r27, Y+5	; 0x05
     d94:	ae 81       	ldd	r26, Y+6	; 0x06
     d96:	6b 2f       	mov	r22, r27
     d98:	7a 2f       	mov	r23, r26
     d9a:	81 2f       	mov	r24, r17
     d9c:	90 2f       	mov	r25, r16
     d9e:	6c d6       	rcall	.+3288   	; 0x1a78 <__cmpsf2>
     da0:	81 11       	cpse	r24, r1
     da2:	4c c0       	rjmp	.+152    	; 0xe3c <__vector_24+0x1b4>
     da4:	32 c0       	rjmp	.+100    	; 0xe0a <__vector_24+0x182>
	if(voltage >= IRLong[0][0])
	{
		return IRLong[0][1]*10;
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	60 91 33 12 	lds	r22, 0x1233
     db2:	70 91 34 12 	lds	r23, 0x1234
     db6:	80 91 35 12 	lds	r24, 0x1235
     dba:	90 91 36 12 	lds	r25, 0x1236
     dbe:	af d7       	rcall	.+3934   	; 0x1d1e <__mulsf3>
     dc0:	c7 d6       	rcall	.+3470   	; 0x1b50 <__fixsfsi>
     dc2:	cb 01       	movw	r24, r22
     dc4:	e0 c0       	rjmp	.+448    	; 0xf86 <__vector_24+0x2fe>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
     dc6:	d3 01       	movw	r26, r6
     dc8:	8d 91       	ld	r24, X+
     dca:	9d 91       	ld	r25, X+
     dcc:	0d 90       	ld	r0, X+
     dce:	bc 91       	ld	r27, X
     dd0:	a0 2d       	mov	r26, r0
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	ab 83       	std	Y+3, r26	; 0x03
     dd8:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRLong[i+1][0];
     dda:	78 01       	movw	r14, r16
     ddc:	bf ef       	ldi	r27, 0xFF	; 255
     dde:	eb 1a       	sub	r14, r27
     de0:	fb 0a       	sbc	r15, r27
     de2:	e8 e0       	ldi	r30, 0x08	; 8
     de4:	6e 0e       	add	r6, r30
     de6:	71 1c       	adc	r7, r1
     de8:	d3 01       	movw	r26, r6
     dea:	8d 90       	ld	r8, X+
     dec:	9d 90       	ld	r9, X+
     dee:	ad 90       	ld	r10, X+
     df0:	bc 90       	ld	r11, X
     df2:	1b 87       	std	Y+11, r17	; 0x0b
     df4:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
     df6:	a5 01       	movw	r20, r10
     df8:	94 01       	movw	r18, r8
     dfa:	6d 2d       	mov	r22, r13
     dfc:	7c 2d       	mov	r23, r12
     dfe:	83 2d       	mov	r24, r3
     e00:	92 2d       	mov	r25, r2
     e02:	3a d6       	rcall	.+3188   	; 0x1a78 <__cmpsf2>
     e04:	81 11       	cpse	r24, r1
     e06:	2b c0       	rjmp	.+86     	; 0xe5e <__vector_24+0x1d6>
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <__vector_24+0x188>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e0a:	ee 24       	eor	r14, r14
     e0c:	e3 94       	inc	r14
     e0e:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
     e10:	c7 01       	movw	r24, r14
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	81 54       	subi	r24, 0x41	; 65
     e20:	9e 4e       	sbci	r25, 0xEE	; 238
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e2       	ldi	r20, 0x20	; 32
     e28:	51 e4       	ldi	r21, 0x41	; 65
     e2a:	fc 01       	movw	r30, r24
     e2c:	64 81       	ldd	r22, Z+4	; 0x04
     e2e:	75 81       	ldd	r23, Z+5	; 0x05
     e30:	86 81       	ldd	r24, Z+6	; 0x06
     e32:	97 81       	ldd	r25, Z+7	; 0x07
     e34:	74 d7       	rcall	.+3816   	; 0x1d1e <__mulsf3>
     e36:	8c d6       	rcall	.+3352   	; 0x1b50 <__fixsfsi>
     e38:	cb 01       	movw	r24, r22
     e3a:	a5 c0       	rjmp	.+330    	; 0xf86 <__vector_24+0x2fe>
     e3c:	0f 2e       	mov	r0, r31
     e3e:	f7 ec       	ldi	r31, 0xC7	; 199
     e40:	6f 2e       	mov	r6, r31
     e42:	f1 e1       	ldi	r31, 0x11	; 17
     e44:	7f 2e       	mov	r7, r31
     e46:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e48:	01 e0       	ldi	r16, 0x01	; 1
     e4a:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
     e4c:	1b 86       	std	Y+11, r1	; 0x0b
     e4e:	1a 86       	std	Y+10, r1	; 0x0a
     e50:	c9 82       	std	Y+1, r12	; 0x01
     e52:	da 82       	std	Y+2, r13	; 0x02
     e54:	eb 82       	std	Y+3, r14	; 0x03
     e56:	fc 82       	std	Y+4, r15	; 0x04
     e58:	d5 2c       	mov	r13, r5
     e5a:	c4 2c       	mov	r12, r4
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <__vector_24+0x1d8>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e5e:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
     e60:	29 81       	ldd	r18, Y+1	; 0x01
     e62:	3a 81       	ldd	r19, Y+2	; 0x02
     e64:	4b 81       	ldd	r20, Y+3	; 0x03
     e66:	5c 81       	ldd	r21, Y+4	; 0x04
     e68:	6d 2d       	mov	r22, r13
     e6a:	7c 2d       	mov	r23, r12
     e6c:	83 2d       	mov	r24, r3
     e6e:	92 2d       	mov	r25, r2
     e70:	03 d6       	rcall	.+3078   	; 0x1a78 <__cmpsf2>
     e72:	88 23       	and	r24, r24
     e74:	0c f0       	brlt	.+2      	; 0xe78 <__vector_24+0x1f0>
     e76:	74 c0       	rjmp	.+232    	; 0xf60 <__vector_24+0x2d8>
     e78:	a5 01       	movw	r20, r10
     e7a:	94 01       	movw	r18, r8
     e7c:	6d 2d       	mov	r22, r13
     e7e:	7c 2d       	mov	r23, r12
     e80:	83 2d       	mov	r24, r3
     e82:	92 2d       	mov	r25, r2
     e84:	48 d7       	rcall	.+3728   	; 0x1d16 <__gesf2>
     e86:	18 16       	cp	r1, r24
     e88:	0c f0       	brlt	.+2      	; 0xe8c <__vector_24+0x204>
     e8a:	6a c0       	rjmp	.+212    	; 0xf60 <__vector_24+0x2d8>
     e8c:	c9 80       	ldd	r12, Y+1	; 0x01
     e8e:	da 80       	ldd	r13, Y+2	; 0x02
     e90:	eb 80       	ldd	r14, Y+3	; 0x03
     e92:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRLong[i][1]*10;
     e94:	ea 85       	ldd	r30, Y+10	; 0x0a
     e96:	fb 85       	ldd	r31, Y+11	; 0x0b
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	e1 54       	subi	r30, 0x41	; 65
     ea6:	fe 4e       	sbci	r31, 0xEE	; 238
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	64 81       	ldd	r22, Z+4	; 0x04
     eb2:	75 81       	ldd	r23, Z+5	; 0x05
     eb4:	86 81       	ldd	r24, Z+6	; 0x06
     eb6:	97 81       	ldd	r25, Z+7	; 0x07
     eb8:	32 d7       	rcall	.+3684   	; 0x1d1e <__mulsf3>
     eba:	4a d6       	rcall	.+3220   	; 0x1b50 <__fixsfsi>
     ebc:	1b 01       	movw	r2, r22
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     ebe:	88 27       	eor	r24, r24
     ec0:	77 fd       	sbrc	r23, 7
     ec2:	80 95       	com	r24
     ec4:	98 2f       	mov	r25, r24
     ec6:	77 d6       	rcall	.+3310   	; 0x1bb6 <__floatsisf>
     ec8:	2b 01       	movw	r4, r22
     eca:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
     ecc:	7d 81       	ldd	r23, Y+5	; 0x05
     ece:	6e 81       	ldd	r22, Y+6	; 0x06
     ed0:	9f 81       	ldd	r25, Y+7	; 0x07
     ed2:	88 85       	ldd	r24, Y+8	; 0x08
     ed4:	27 2f       	mov	r18, r23
     ed6:	36 2f       	mov	r19, r22
     ed8:	49 2f       	mov	r20, r25
     eda:	58 2f       	mov	r21, r24
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	66 d5       	rcall	.+2764   	; 0x19ae <__subsf3>
     ee2:	69 83       	std	Y+1, r22	; 0x01
     ee4:	7a 83       	std	Y+2, r23	; 0x02
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
     eea:	f8 01       	movw	r30, r16
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	e1 54       	subi	r30, 0x41	; 65
     efa:	fe 4e       	sbci	r31, 0xEE	; 238
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e2       	ldi	r20, 0x20	; 32
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	64 81       	ldd	r22, Z+4	; 0x04
     f06:	75 81       	ldd	r23, Z+5	; 0x05
     f08:	86 81       	ldd	r24, Z+6	; 0x06
     f0a:	97 81       	ldd	r25, Z+7	; 0x07
     f0c:	08 d7       	rcall	.+3600   	; 0x1d1e <__mulsf3>
     f0e:	20 d6       	rcall	.+3136   	; 0x1b50 <__fixsfsi>
			int diff = high - low;
     f10:	91 01       	movw	r18, r2
     f12:	26 1b       	sub	r18, r22
     f14:	37 0b       	sbc	r19, r23
     f16:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     f18:	88 27       	eor	r24, r24
     f1a:	77 fd       	sbrc	r23, 7
     f1c:	80 95       	com	r24
     f1e:	98 2f       	mov	r25, r24
     f20:	4a d6       	rcall	.+3220   	; 0x1bb6 <__floatsisf>
     f22:	9b 01       	movw	r18, r22
     f24:	ac 01       	movw	r20, r24
     f26:	69 81       	ldd	r22, Y+1	; 0x01
     f28:	7a 81       	ldd	r23, Y+2	; 0x02
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	f7 d6       	rcall	.+3566   	; 0x1d1e <__mulsf3>
     f30:	69 83       	std	Y+1, r22	; 0x01
     f32:	7a 83       	std	Y+2, r23	; 0x02
     f34:	8b 83       	std	Y+3, r24	; 0x03
     f36:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
     f38:	a5 01       	movw	r20, r10
     f3a:	94 01       	movw	r18, r8
     f3c:	c7 01       	movw	r24, r14
     f3e:	b6 01       	movw	r22, r12
     f40:	36 d5       	rcall	.+2668   	; 0x19ae <__subsf3>
     f42:	9b 01       	movw	r18, r22
     f44:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
     f46:	69 81       	ldd	r22, Y+1	; 0x01
     f48:	7a 81       	ldd	r23, Y+2	; 0x02
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	98 d5       	rcall	.+2864   	; 0x1a80 <__divsf3>
     f50:	9b 01       	movw	r18, r22
     f52:	ac 01       	movw	r20, r24
     f54:	c3 01       	movw	r24, r6
     f56:	b2 01       	movw	r22, r4
     f58:	2a d5       	rcall	.+2644   	; 0x19ae <__subsf3>
     f5a:	fa d5       	rcall	.+3060   	; 0x1b50 <__fixsfsi>
     f5c:	cb 01       	movw	r24, r22
     f5e:	13 c0       	rjmp	.+38     	; 0xf86 <__vector_24+0x2fe>
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
     f60:	0d 30       	cpi	r16, 0x0D	; 13
     f62:	11 05       	cpc	r17, r1
     f64:	09 f0       	breq	.+2      	; 0xf68 <__vector_24+0x2e0>
     f66:	2f cf       	rjmp	.-418    	; 0xdc6 <__vector_24+0x13e>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return IRLong[14][1]*10;
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	60 91 33 12 	lds	r22, 0x1233
     f74:	70 91 34 12 	lds	r23, 0x1234
     f78:	80 91 35 12 	lds	r24, 0x1235
     f7c:	90 91 36 12 	lds	r25, 0x1236
     f80:	ce d6       	rcall	.+3484   	; 0x1d1e <__mulsf3>
     f82:	e6 d5       	rcall	.+3020   	; 0x1b50 <__fixsfsi>
     f84:	cb 01       	movw	r24, r22
	cli();
	uint8_t adcValue = ADCH;
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
     f86:	6a e0       	ldi	r22, 0x0A	; 10
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	2c d7       	rcall	.+3672   	; 0x1de4 <__divmodhi4>
     f8c:	60 93 3c 12 	sts	0x123C, r22
     f90:	4c c1       	rjmp	.+664    	; 0x122a <__vector_24+0x5a2>
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
     f92:	99 85       	ldd	r25, Y+9	; 0x09
     f94:	89 2f       	mov	r24, r25
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9d 87       	std	Y+13, r25	; 0x0d
     f9a:	8c 87       	std	Y+12, r24	; 0x0c
	IRLong[14][1] = 150;
}

int voltage_to_mm_short(float voltage)
{
	if(voltage >= IRShort[0][0])
     f9c:	c0 90 57 11 	lds	r12, 0x1157
     fa0:	d0 90 58 11 	lds	r13, 0x1158
     fa4:	e0 90 59 11 	lds	r14, 0x1159
     fa8:	f0 90 5a 11 	lds	r15, 0x115A
     fac:	a7 01       	movw	r20, r14
     fae:	96 01       	movw	r18, r12
     fb0:	bd 81       	ldd	r27, Y+5	; 0x05
     fb2:	ae 81       	ldd	r26, Y+6	; 0x06
     fb4:	1f 81       	ldd	r17, Y+7	; 0x07
     fb6:	08 85       	ldd	r16, Y+8	; 0x08
     fb8:	6b 2f       	mov	r22, r27
     fba:	7a 2f       	mov	r23, r26
     fbc:	81 2f       	mov	r24, r17
     fbe:	90 2f       	mov	r25, r16
     fc0:	aa d6       	rcall	.+3412   	; 0x1d16 <__gesf2>
     fc2:	88 23       	and	r24, r24
     fc4:	84 f0       	brlt	.+32     	; 0xfe6 <__vector_24+0x35e>
	{
		return IRShort[0][1]*10;
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e2       	ldi	r20, 0x20	; 32
     fcc:	51 e4       	ldi	r21, 0x41	; 65
     fce:	60 91 5b 11 	lds	r22, 0x115B
     fd2:	70 91 5c 11 	lds	r23, 0x115C
     fd6:	80 91 5d 11 	lds	r24, 0x115D
     fda:	90 91 5e 11 	lds	r25, 0x115E
     fde:	9f d6       	rcall	.+3390   	; 0x1d1e <__mulsf3>
     fe0:	b7 d5       	rcall	.+2926   	; 0x1b50 <__fixsfsi>
     fe2:	cb 01       	movw	r24, r22
     fe4:	17 c1       	rjmp	.+558    	; 0x1214 <__vector_24+0x58c>
	} else if(voltage <= IRShort[12][0])
     fe6:	20 91 b7 11 	lds	r18, 0x11B7
     fea:	30 91 b8 11 	lds	r19, 0x11B8
     fee:	40 91 b9 11 	lds	r20, 0x11B9
     ff2:	50 91 ba 11 	lds	r21, 0x11BA
     ff6:	bd 81       	ldd	r27, Y+5	; 0x05
     ff8:	ae 81       	ldd	r26, Y+6	; 0x06
     ffa:	1f 81       	ldd	r17, Y+7	; 0x07
     ffc:	08 85       	ldd	r16, Y+8	; 0x08
     ffe:	6b 2f       	mov	r22, r27
    1000:	7a 2f       	mov	r23, r26
    1002:	81 2f       	mov	r24, r17
    1004:	90 2f       	mov	r25, r16
    1006:	38 d5       	rcall	.+2672   	; 0x1a78 <__cmpsf2>
    1008:	18 16       	cp	r1, r24
    100a:	a4 f4       	brge	.+40     	; 0x1034 <__vector_24+0x3ac>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    100c:	80 90 5f 11 	lds	r8, 0x115F
    1010:	90 90 60 11 	lds	r9, 0x1160
    1014:	a0 90 61 11 	lds	r10, 0x1161
    1018:	b0 90 62 11 	lds	r11, 0x1162
		if(next == voltage)
    101c:	a5 01       	movw	r20, r10
    101e:	94 01       	movw	r18, r8
    1020:	bd 81       	ldd	r27, Y+5	; 0x05
    1022:	ae 81       	ldd	r26, Y+6	; 0x06
    1024:	6b 2f       	mov	r22, r27
    1026:	7a 2f       	mov	r23, r26
    1028:	81 2f       	mov	r24, r17
    102a:	90 2f       	mov	r25, r16
    102c:	25 d5       	rcall	.+2634   	; 0x1a78 <__cmpsf2>
    102e:	81 11       	cpse	r24, r1
    1030:	4c c0       	rjmp	.+152    	; 0x10ca <__vector_24+0x442>
    1032:	32 c0       	rjmp	.+100    	; 0x1098 <__vector_24+0x410>
	if(voltage >= IRShort[0][0])
	{
		return IRShort[0][1]*10;
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e2       	ldi	r20, 0x20	; 32
    103a:	51 e4       	ldi	r21, 0x41	; 65
    103c:	60 91 bb 11 	lds	r22, 0x11BB
    1040:	70 91 bc 11 	lds	r23, 0x11BC
    1044:	80 91 bd 11 	lds	r24, 0x11BD
    1048:	90 91 be 11 	lds	r25, 0x11BE
    104c:	68 d6       	rcall	.+3280   	; 0x1d1e <__mulsf3>
    104e:	80 d5       	rcall	.+2816   	; 0x1b50 <__fixsfsi>
    1050:	cb 01       	movw	r24, r22
    1052:	e0 c0       	rjmp	.+448    	; 0x1214 <__vector_24+0x58c>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
    1054:	d3 01       	movw	r26, r6
    1056:	8d 91       	ld	r24, X+
    1058:	9d 91       	ld	r25, X+
    105a:	0d 90       	ld	r0, X+
    105c:	bc 91       	ld	r27, X
    105e:	a0 2d       	mov	r26, r0
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	ab 83       	std	Y+3, r26	; 0x03
    1066:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRShort[i+1][0];
    1068:	78 01       	movw	r14, r16
    106a:	bf ef       	ldi	r27, 0xFF	; 255
    106c:	eb 1a       	sub	r14, r27
    106e:	fb 0a       	sbc	r15, r27
    1070:	e8 e0       	ldi	r30, 0x08	; 8
    1072:	6e 0e       	add	r6, r30
    1074:	71 1c       	adc	r7, r1
    1076:	d3 01       	movw	r26, r6
    1078:	8d 90       	ld	r8, X+
    107a:	9d 90       	ld	r9, X+
    107c:	ad 90       	ld	r10, X+
    107e:	bc 90       	ld	r11, X
    1080:	1b 87       	std	Y+11, r17	; 0x0b
    1082:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
    1084:	a5 01       	movw	r20, r10
    1086:	94 01       	movw	r18, r8
    1088:	6d 2d       	mov	r22, r13
    108a:	7c 2d       	mov	r23, r12
    108c:	83 2d       	mov	r24, r3
    108e:	92 2d       	mov	r25, r2
    1090:	f3 d4       	rcall	.+2534   	; 0x1a78 <__cmpsf2>
    1092:	81 11       	cpse	r24, r1
    1094:	2b c0       	rjmp	.+86     	; 0x10ec <__vector_24+0x464>
    1096:	03 c0       	rjmp	.+6      	; 0x109e <__vector_24+0x416>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    1098:	ee 24       	eor	r14, r14
    109a:	e3 94       	inc	r14
    109c:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
    109e:	c7 01       	movw	r24, r14
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	89 5a       	subi	r24, 0xA9	; 169
    10ae:	9e 4e       	sbci	r25, 0xEE	; 238
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e2       	ldi	r20, 0x20	; 32
    10b6:	51 e4       	ldi	r21, 0x41	; 65
    10b8:	fc 01       	movw	r30, r24
    10ba:	64 81       	ldd	r22, Z+4	; 0x04
    10bc:	75 81       	ldd	r23, Z+5	; 0x05
    10be:	86 81       	ldd	r24, Z+6	; 0x06
    10c0:	97 81       	ldd	r25, Z+7	; 0x07
    10c2:	2d d6       	rcall	.+3162   	; 0x1d1e <__mulsf3>
    10c4:	45 d5       	rcall	.+2698   	; 0x1b50 <__fixsfsi>
    10c6:	cb 01       	movw	r24, r22
    10c8:	a5 c0       	rjmp	.+330    	; 0x1214 <__vector_24+0x58c>
    10ca:	0f 2e       	mov	r0, r31
    10cc:	ff e5       	ldi	r31, 0x5F	; 95
    10ce:	6f 2e       	mov	r6, r31
    10d0:	f1 e1       	ldi	r31, 0x11	; 17
    10d2:	7f 2e       	mov	r7, r31
    10d4:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10d6:	01 e0       	ldi	r16, 0x01	; 1
    10d8:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
    10da:	1b 86       	std	Y+11, r1	; 0x0b
    10dc:	1a 86       	std	Y+10, r1	; 0x0a
    10de:	c9 82       	std	Y+1, r12	; 0x01
    10e0:	da 82       	std	Y+2, r13	; 0x02
    10e2:	eb 82       	std	Y+3, r14	; 0x03
    10e4:	fc 82       	std	Y+4, r15	; 0x04
    10e6:	d5 2c       	mov	r13, r5
    10e8:	c4 2c       	mov	r12, r4
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <__vector_24+0x466>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10ec:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
    10ee:	29 81       	ldd	r18, Y+1	; 0x01
    10f0:	3a 81       	ldd	r19, Y+2	; 0x02
    10f2:	4b 81       	ldd	r20, Y+3	; 0x03
    10f4:	5c 81       	ldd	r21, Y+4	; 0x04
    10f6:	6d 2d       	mov	r22, r13
    10f8:	7c 2d       	mov	r23, r12
    10fa:	83 2d       	mov	r24, r3
    10fc:	92 2d       	mov	r25, r2
    10fe:	bc d4       	rcall	.+2424   	; 0x1a78 <__cmpsf2>
    1100:	88 23       	and	r24, r24
    1102:	0c f0       	brlt	.+2      	; 0x1106 <__vector_24+0x47e>
    1104:	74 c0       	rjmp	.+232    	; 0x11ee <__vector_24+0x566>
    1106:	a5 01       	movw	r20, r10
    1108:	94 01       	movw	r18, r8
    110a:	6d 2d       	mov	r22, r13
    110c:	7c 2d       	mov	r23, r12
    110e:	83 2d       	mov	r24, r3
    1110:	92 2d       	mov	r25, r2
    1112:	01 d6       	rcall	.+3074   	; 0x1d16 <__gesf2>
    1114:	18 16       	cp	r1, r24
    1116:	0c f0       	brlt	.+2      	; 0x111a <__vector_24+0x492>
    1118:	6a c0       	rjmp	.+212    	; 0x11ee <__vector_24+0x566>
    111a:	c9 80       	ldd	r12, Y+1	; 0x01
    111c:	da 80       	ldd	r13, Y+2	; 0x02
    111e:	eb 80       	ldd	r14, Y+3	; 0x03
    1120:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRShort[i][1]*10;
    1122:	ea 85       	ldd	r30, Y+10	; 0x0a
    1124:	fb 85       	ldd	r31, Y+11	; 0x0b
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	ee 0f       	add	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	e9 5a       	subi	r30, 0xA9	; 169
    1134:	fe 4e       	sbci	r31, 0xEE	; 238
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e2       	ldi	r20, 0x20	; 32
    113c:	51 e4       	ldi	r21, 0x41	; 65
    113e:	64 81       	ldd	r22, Z+4	; 0x04
    1140:	75 81       	ldd	r23, Z+5	; 0x05
    1142:	86 81       	ldd	r24, Z+6	; 0x06
    1144:	97 81       	ldd	r25, Z+7	; 0x07
    1146:	eb d5       	rcall	.+3030   	; 0x1d1e <__mulsf3>
    1148:	03 d5       	rcall	.+2566   	; 0x1b50 <__fixsfsi>
    114a:	1b 01       	movw	r2, r22
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    114c:	88 27       	eor	r24, r24
    114e:	77 fd       	sbrc	r23, 7
    1150:	80 95       	com	r24
    1152:	98 2f       	mov	r25, r24
    1154:	30 d5       	rcall	.+2656   	; 0x1bb6 <__floatsisf>
    1156:	2b 01       	movw	r4, r22
    1158:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
    115a:	7d 81       	ldd	r23, Y+5	; 0x05
    115c:	6e 81       	ldd	r22, Y+6	; 0x06
    115e:	9f 81       	ldd	r25, Y+7	; 0x07
    1160:	88 85       	ldd	r24, Y+8	; 0x08
    1162:	27 2f       	mov	r18, r23
    1164:	36 2f       	mov	r19, r22
    1166:	49 2f       	mov	r20, r25
    1168:	58 2f       	mov	r21, r24
    116a:	c7 01       	movw	r24, r14
    116c:	b6 01       	movw	r22, r12
    116e:	1f d4       	rcall	.+2110   	; 0x19ae <__subsf3>
    1170:	69 83       	std	Y+1, r22	; 0x01
    1172:	7a 83       	std	Y+2, r23	; 0x02
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
    1178:	f8 01       	movw	r30, r16
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	e9 5a       	subi	r30, 0xA9	; 169
    1188:	fe 4e       	sbci	r31, 0xEE	; 238
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e2       	ldi	r20, 0x20	; 32
    1190:	51 e4       	ldi	r21, 0x41	; 65
    1192:	64 81       	ldd	r22, Z+4	; 0x04
    1194:	75 81       	ldd	r23, Z+5	; 0x05
    1196:	86 81       	ldd	r24, Z+6	; 0x06
    1198:	97 81       	ldd	r25, Z+7	; 0x07
    119a:	c1 d5       	rcall	.+2946   	; 0x1d1e <__mulsf3>
    119c:	d9 d4       	rcall	.+2482   	; 0x1b50 <__fixsfsi>
			int diff = high - low;
    119e:	91 01       	movw	r18, r2
    11a0:	26 1b       	sub	r18, r22
    11a2:	37 0b       	sbc	r19, r23
    11a4:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    11a6:	88 27       	eor	r24, r24
    11a8:	77 fd       	sbrc	r23, 7
    11aa:	80 95       	com	r24
    11ac:	98 2f       	mov	r25, r24
    11ae:	03 d5       	rcall	.+2566   	; 0x1bb6 <__floatsisf>
    11b0:	9b 01       	movw	r18, r22
    11b2:	ac 01       	movw	r20, r24
    11b4:	69 81       	ldd	r22, Y+1	; 0x01
    11b6:	7a 81       	ldd	r23, Y+2	; 0x02
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	b0 d5       	rcall	.+2912   	; 0x1d1e <__mulsf3>
    11be:	69 83       	std	Y+1, r22	; 0x01
    11c0:	7a 83       	std	Y+2, r23	; 0x02
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    11c4:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
    11c6:	a5 01       	movw	r20, r10
    11c8:	94 01       	movw	r18, r8
    11ca:	c7 01       	movw	r24, r14
    11cc:	b6 01       	movw	r22, r12
    11ce:	ef d3       	rcall	.+2014   	; 0x19ae <__subsf3>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
    11d4:	69 81       	ldd	r22, Y+1	; 0x01
    11d6:	7a 81       	ldd	r23, Y+2	; 0x02
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	51 d4       	rcall	.+2210   	; 0x1a80 <__divsf3>
    11de:	9b 01       	movw	r18, r22
    11e0:	ac 01       	movw	r20, r24
    11e2:	c3 01       	movw	r24, r6
    11e4:	b2 01       	movw	r22, r4
    11e6:	e3 d3       	rcall	.+1990   	; 0x19ae <__subsf3>
    11e8:	b3 d4       	rcall	.+2406   	; 0x1b50 <__fixsfsi>
    11ea:	cb 01       	movw	r24, r22
    11ec:	13 c0       	rjmp	.+38     	; 0x1214 <__vector_24+0x58c>
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
    11ee:	0d 30       	cpi	r16, 0x0D	; 13
    11f0:	11 05       	cpc	r17, r1
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <__vector_24+0x56e>
    11f4:	2f cf       	rjmp	.-418    	; 0x1054 <__vector_24+0x3cc>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return IRShort[12][1]*10;
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e2       	ldi	r20, 0x20	; 32
    11fc:	51 e4       	ldi	r21, 0x41	; 65
    11fe:	60 91 bb 11 	lds	r22, 0x11BB
    1202:	70 91 bc 11 	lds	r23, 0x11BC
    1206:	80 91 bd 11 	lds	r24, 0x11BD
    120a:	90 91 be 11 	lds	r25, 0x11BE
    120e:	87 d5       	rcall	.+2830   	; 0x1d1e <__mulsf3>
    1210:	9f d4       	rcall	.+2366   	; 0x1b50 <__fixsfsi>
    1212:	cb 01       	movw	r24, r22
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
    1214:	ec 85       	ldd	r30, Y+12	; 0x0c
    1216:	fd 85       	ldd	r31, Y+13	; 0x0d
    1218:	e8 5c       	subi	r30, 0xC8	; 200
    121a:	fd 4e       	sbci	r31, 0xED	; 237
    121c:	6a e0       	ldi	r22, 0x0A	; 10
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	e1 d5       	rcall	.+3010   	; 0x1de4 <__divmodhi4>
    1222:	60 83       	st	Z, r22
	}
	
	if(gSelectedSensor < 6)
    1224:	39 85       	ldd	r19, Y+9	; 0x09
    1226:	36 30       	cpi	r19, 0x06	; 6
    1228:	38 f4       	brcc	.+14     	; 0x1238 <__vector_24+0x5b0>
	{
		// Not last sensor
		select_sensor(gSelectedSensor + 1);
    122a:	a9 85       	ldd	r26, Y+9	; 0x09
    122c:	8a 2f       	mov	r24, r26
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	a3 d9       	rcall	.-3258   	; 0x57a <select_sensor>
		adc_start();
    1234:	9c d9       	rcall	.-3272   	; 0x56e <adc_start>
    1236:	09 c0       	rjmp	.+18     	; 0x124a <__vector_24+0x5c2>
	} else {
		select_sensor(0);
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9e d9       	rcall	.-3268   	; 0x57a <select_sensor>
	}
}

void start_ul_sensor()
{
	TCNT0 = 0;
    123e:	16 bc       	out	0x26, r1	; 38
	PORTA |= (1<<PORTA7);
    1240:	17 9a       	sbi	0x02, 7	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1242:	b0 e5       	ldi	r27, 0x50	; 80
    1244:	ba 95       	dec	r27
    1246:	f1 f7       	brne	.-4      	; 0x1244 <__vector_24+0x5bc>
	_delay_us(15);
	PORTA &= ~(1<<PORTA7);
    1248:	17 98       	cbi	0x02, 7	; 2
		adc_start();
	} else {
		select_sensor(0);
		start_ul_sensor();
	}
	sei();
    124a:	78 94       	sei
}
    124c:	2d 96       	adiw	r28, 0x0d	; 13
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	ff 91       	pop	r31
    125e:	ef 91       	pop	r30
    1260:	bf 91       	pop	r27
    1262:	af 91       	pop	r26
    1264:	9f 91       	pop	r25
    1266:	8f 91       	pop	r24
    1268:	7f 91       	pop	r23
    126a:	6f 91       	pop	r22
    126c:	5f 91       	pop	r21
    126e:	4f 91       	pop	r20
    1270:	3f 91       	pop	r19
    1272:	2f 91       	pop	r18
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	9f 90       	pop	r9
    1286:	8f 90       	pop	r8
    1288:	7f 90       	pop	r7
    128a:	6f 90       	pop	r6
    128c:	5f 90       	pop	r5
    128e:	4f 90       	pop	r4
    1290:	3f 90       	pop	r3
    1292:	2f 90       	pop	r2
    1294:	0f 90       	pop	r0
    1296:	0b be       	out	0x3b, r0	; 59
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <__vector_4>:

ISR(PCINT0_vect)
{
    12a2:	1f 92       	push	r1
    12a4:	0f 92       	push	r0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	0f 92       	push	r0
    12aa:	11 24       	eor	r1, r1
    12ac:	0b b6       	in	r0, 0x3b	; 59
    12ae:	0f 92       	push	r0
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	4f 93       	push	r20
    12b6:	5f 93       	push	r21
    12b8:	6f 93       	push	r22
    12ba:	7f 93       	push	r23
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	af 93       	push	r26
    12c2:	bf 93       	push	r27
    12c4:	ef 93       	push	r30
    12c6:	ff 93       	push	r31
	cli();
    12c8:	f8 94       	cli
	if(PINA & (1<<PINA6))
    12ca:	06 9b       	sbis	0x00, 6	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <__vector_4+0x30>
	{
		TCNT0 = 0;
    12ce:	16 bc       	out	0x26, r1	; 38
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <__vector_4+0x3c>
	}
	else
	{
		uint8_t UL = TCNT0;
    12d2:	86 b5       	in	r24, 0x26	; 38
		gSensorBuffer[7] = UL;
    12d4:	80 93 3f 12 	sts	0x123F, r24
		sensorDataFlag = true;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 40 12 	sts	0x1240, r24
	}
	TWI_send_sensors(sensors_get_data(), 0);
    12de:	d1 dc       	rcall	.-1630   	; 0xc82 <sensors_get_data>
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	d0 d0       	rcall	.+416    	; 0x1484 <TWI_send_sensors>
	sei();
    12e4:	78 94       	sei
}
    12e6:	ff 91       	pop	r31
    12e8:	ef 91       	pop	r30
    12ea:	bf 91       	pop	r27
    12ec:	af 91       	pop	r26
    12ee:	9f 91       	pop	r25
    12f0:	8f 91       	pop	r24
    12f2:	7f 91       	pop	r23
    12f4:	6f 91       	pop	r22
    12f6:	5f 91       	pop	r21
    12f8:	4f 91       	pop	r20
    12fa:	3f 91       	pop	r19
    12fc:	2f 91       	pop	r18
    12fe:	0f 90       	pop	r0
    1300:	0b be       	out	0x3b, r0	; 59
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <set_twi_reciever_enable>:
	{
		sweepFlag_ = 0;
		return 1;
	}
	return 0;
}
    130c:	85 e4       	ldi	r24, 0x45	; 69
    130e:	80 93 bc 00 	sts	0x00BC, r24
    1312:	08 95       	ret

00001314 <clear_int>:
    1314:	81 ec       	ldi	r24, 0xC1	; 193
    1316:	80 93 bc 00 	sts	0x00BC, r24
    131a:	08 95       	ret

0000131c <start_bus>:
    131c:	84 ea       	ldi	r24, 0xA4	; 164
    131e:	80 93 bc 00 	sts	0x00BC, r24
    1322:	08 95       	ret

00001324 <stop_bus>:
    1324:	85 ed       	ldi	r24, 0xD5	; 213
    1326:	80 93 bc 00 	sts	0x00BC, r24
    132a:	08 95       	ret

0000132c <Error>:
    132c:	80 91 b9 00 	lds	r24, 0x00B9
    1330:	88 7f       	andi	r24, 0xF8	; 248
    1332:	88 33       	cpi	r24, 0x38	; 56
    1334:	09 f0       	breq	.+2      	; 0x1338 <Error+0xc>
    1336:	f6 cf       	rjmp	.-20     	; 0x1324 <stop_bus>
    1338:	ed cf       	rjmp	.-38     	; 0x1314 <clear_int>

0000133a <get_data>:
    133a:	80 91 bb 00 	lds	r24, 0x00BB
    133e:	08 95       	ret

00001340 <wait_for_bus>:
    1340:	ec eb       	ldi	r30, 0xBC	; 188
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	88 23       	and	r24, r24
    1348:	ec f7       	brge	.-6      	; 0x1344 <wait_for_bus+0x4>
    134a:	08 95       	ret

0000134c <send_data_and_wait>:
    134c:	80 93 bb 00 	sts	0x00BB, r24
    1350:	84 e8       	ldi	r24, 0x84	; 132
    1352:	80 93 bc 00 	sts	0x00BC, r24
    1356:	f4 cf       	rjmp	.-24     	; 0x1340 <wait_for_bus>

00001358 <stop_twi>:
    1358:	10 92 5a 13 	sts	0x135A, r1
    135c:	10 92 59 13 	sts	0x1359, r1
    1360:	10 92 63 13 	sts	0x1363, r1
    1364:	10 92 62 13 	sts	0x1362, r1
    1368:	10 92 4f 13 	sts	0x134F, r1
    136c:	10 92 4e 13 	sts	0x134E, r1
    1370:	10 92 54 13 	sts	0x1354, r1
    1374:	10 92 53 13 	sts	0x1353, r1
    1378:	10 92 57 13 	sts	0x1357, r1
    137c:	10 92 56 13 	sts	0x1356, r1
    1380:	08 95       	ret

00001382 <reset_TWI>:
    1382:	ec eb       	ldi	r30, 0xBC	; 188
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	80 6c       	ori	r24, 0xC0	; 192
    138a:	80 83       	st	Z, r24
    138c:	08 95       	ret

0000138e <get_sensor_from_bus>:
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	c0 91 62 13 	lds	r28, 0x1362
    1396:	d0 91 63 13 	lds	r29, 0x1363
    139a:	c8 30       	cpi	r28, 0x08	; 8
    139c:	d1 05       	cpc	r29, r1
    139e:	91 f4       	brne	.+36     	; 0x13c4 <get_sensor_from_bus+0x36>
    13a0:	e4 e6       	ldi	r30, 0x64	; 100
    13a2:	f3 e1       	ldi	r31, 0x13	; 19
    13a4:	ac e6       	ldi	r26, 0x6C	; 108
    13a6:	b3 e1       	ldi	r27, 0x13	; 19
    13a8:	8c e6       	ldi	r24, 0x6C	; 108
    13aa:	93 e1       	ldi	r25, 0x13	; 19
    13ac:	21 91       	ld	r18, Z+
    13ae:	2d 93       	st	X+, r18
    13b0:	e8 17       	cp	r30, r24
    13b2:	f9 07       	cpc	r31, r25
    13b4:	d9 f7       	brne	.-10     	; 0x13ac <get_sensor_from_bus+0x1e>
    13b6:	c1 df       	rcall	.-126    	; 0x133a <get_data>
    13b8:	80 93 5d 13 	sts	0x135D, r24
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	80 93 46 12 	sts	0x1246, r24
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <get_sensor_from_bus+0x50>
    13c4:	ba df       	rcall	.-140    	; 0x133a <get_data>
    13c6:	cc 59       	subi	r28, 0x9C	; 156
    13c8:	dc 4e       	sbci	r29, 0xEC	; 236
    13ca:	88 83       	st	Y, r24
    13cc:	80 91 62 13 	lds	r24, 0x1362
    13d0:	90 91 63 13 	lds	r25, 0x1363
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	90 93 63 13 	sts	0x1363, r25
    13da:	80 93 62 13 	sts	0x1362, r24
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <get_control_settings_from_bus>:
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	c0 91 53 13 	lds	r28, 0x1353
    13ec:	d0 91 54 13 	lds	r29, 0x1354
    13f0:	a4 df       	rcall	.-184    	; 0x133a <get_data>
    13f2:	c0 5b       	subi	r28, 0xB0	; 176
    13f4:	dc 4e       	sbci	r29, 0xEC	; 236
    13f6:	88 83       	st	Y, r24
    13f8:	10 92 54 13 	sts	0x1354, r1
    13fc:	10 92 53 13 	sts	0x1353, r1
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <get_autonom_settings_from_bus>:
    1406:	99 df       	rcall	.-206    	; 0x133a <get_data>
    1408:	80 93 4e 12 	sts	0x124E, r24
    140c:	08 95       	ret

0000140e <get_char_from_bus>:
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	c0 91 4e 13 	lds	r28, 0x134E
    1416:	d0 91 4f 13 	lds	r29, 0x134F
    141a:	8f df       	rcall	.-226    	; 0x133a <get_data>
    141c:	c1 5b       	subi	r28, 0xB1	; 177
    141e:	dd 4e       	sbci	r29, 0xED	; 237
    1420:	88 83       	st	Y, r24
    1422:	80 91 4e 13 	lds	r24, 0x134E
    1426:	90 91 4f 13 	lds	r25, 0x134F
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	90 93 4f 13 	sts	0x134F, r25
    1430:	80 93 4e 13 	sts	0x134E, r24
    1434:	80 93 5e 13 	sts	0x135E, r24
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <TWI_init>:
    143e:	80 93 55 13 	sts	0x1355, r24
    1442:	80 34       	cpi	r24, 0x40	; 64
    1444:	79 f0       	breq	.+30     	; 0x1464 <TWI_init+0x26>
    1446:	80 38       	cpi	r24, 0x80	; 128
    1448:	19 f0       	breq	.+6      	; 0x1450 <TWI_init+0x12>
    144a:	80 32       	cpi	r24, 0x20	; 32
    144c:	d1 f4       	brne	.+52     	; 0x1482 <TWI_init+0x44>
    144e:	12 c0       	rjmp	.+36     	; 0x1474 <TWI_init+0x36>
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	88 b9       	out	0x08, r24	; 8
    1454:	5b df       	rcall	.-330    	; 0x130c <set_twi_reciever_enable>
    1456:	8f e3       	ldi	r24, 0x3F	; 63
    1458:	80 93 b8 00 	sts	0x00B8, r24
    145c:	81 e8       	ldi	r24, 0x81	; 129
    145e:	80 93 ba 00 	sts	0x00BA, r24
    1462:	08 95       	ret
    1464:	8f e3       	ldi	r24, 0x3F	; 63
    1466:	80 93 b8 00 	sts	0x00B8, r24
    146a:	50 df       	rcall	.-352    	; 0x130c <set_twi_reciever_enable>
    146c:	80 e4       	ldi	r24, 0x40	; 64
    146e:	80 93 ba 00 	sts	0x00BA, r24
    1472:	08 95       	ret
    1474:	8f e3       	ldi	r24, 0x3F	; 63
    1476:	80 93 b8 00 	sts	0x00B8, r24
    147a:	48 df       	rcall	.-368    	; 0x130c <set_twi_reciever_enable>
    147c:	81 e2       	ldi	r24, 0x21	; 33
    147e:	80 93 ba 00 	sts	0x00BA, r24
    1482:	08 95       	ret

00001484 <TWI_send_sensors>:
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	d8 2f       	mov	r29, r24
    1490:	c9 2f       	mov	r28, r25
    1492:	f6 2e       	mov	r15, r22
    1494:	43 df       	rcall	.-378    	; 0x131c <start_bus>
    1496:	54 df       	rcall	.-344    	; 0x1340 <wait_for_bus>
    1498:	20 91 b9 00 	lds	r18, 0x00B9
    149c:	28 7f       	andi	r18, 0xF8	; 248
    149e:	28 30       	cpi	r18, 0x08	; 8
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <TWI_send_sensors+0x24>
    14a2:	44 df       	rcall	.-376    	; 0x132c <Error>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	1a c0       	rjmp	.+52     	; 0x14dc <TWI_send_sensors+0x58>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	50 df       	rcall	.-352    	; 0x134c <send_data_and_wait>
    14ac:	80 91 b9 00 	lds	r24, 0x00B9
    14b0:	88 7f       	andi	r24, 0xF8	; 248
    14b2:	88 31       	cpi	r24, 0x18	; 24
    14b4:	19 f0       	breq	.+6      	; 0x14bc <TWI_send_sensors+0x38>
    14b6:	3a df       	rcall	.-396    	; 0x132c <Error>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	10 c0       	rjmp	.+32     	; 0x14dc <TWI_send_sensors+0x58>
    14bc:	0d 2f       	mov	r16, r29
    14be:	1c 2f       	mov	r17, r28
    14c0:	c0 e0       	ldi	r28, 0x00	; 0
    14c2:	d0 e0       	ldi	r29, 0x00	; 0
    14c4:	f8 01       	movw	r30, r16
    14c6:	81 91       	ld	r24, Z+
    14c8:	8f 01       	movw	r16, r30
    14ca:	40 df       	rcall	.-384    	; 0x134c <send_data_and_wait>
    14cc:	21 96       	adiw	r28, 0x01	; 1
    14ce:	c8 30       	cpi	r28, 0x08	; 8
    14d0:	d1 05       	cpc	r29, r1
    14d2:	c1 f7       	brne	.-16     	; 0x14c4 <TWI_send_sensors+0x40>
    14d4:	8f 2d       	mov	r24, r15
    14d6:	3a df       	rcall	.-396    	; 0x134c <send_data_and_wait>
    14d8:	25 df       	rcall	.-438    	; 0x1324 <stop_bus>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	08 95       	ret

000014e8 <decode_message_TwiFIFO>:

//--------------------------FIFO------------------------------------------

uint8_t decode_message_TwiFIFO()
{
    14e8:	8f 92       	push	r8
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
	// TODO: send to relevant party... the display for now
	
	display_clear();
	display_text_fixed_length(msg, length);
	return 0;
}
    1504:	ad b6       	in	r10, 0x3d	; 61
    1506:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	80 91 00 01 	lds	r24, 0x0100
    1510:	90 91 01 01 	lds	r25, 0x0101
    1514:	0e 94 2a 02 	call	0x454	; 0x454 <FifoRead>
    1518:	81 11       	cpse	r24, r1
    151a:	46 c0       	rjmp	.+140    	; 0x15a8 <decode_message_TwiFIFO+0xc0>
	{
		//No new messages
		return 1; // error
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
    151c:	c0 90 00 00 	lds	r12, 0x0000
    1520:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];
    1522:	96 01       	movw	r18, r12
    1524:	21 50       	subi	r18, 0x01	; 1
    1526:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	c1 14       	cp	r12, r1
    152e:	d1 04       	cpc	r13, r1
    1530:	11 f0       	breq	.+4      	; 0x1536 <decode_message_TwiFIFO+0x4e>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
	char msg[length-1+ifzero];
    1536:	82 0f       	add	r24, r18
    1538:	93 1f       	adc	r25, r19
    153a:	2d b7       	in	r18, 0x3d	; 61
    153c:	3e b7       	in	r19, 0x3e	; 62
    153e:	28 1b       	sub	r18, r24
    1540:	39 0b       	sbc	r19, r25
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	3e bf       	out	0x3e, r19	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	2d bf       	out	0x3d, r18	; 61
    154c:	2f 5f       	subi	r18, 0xFF	; 255
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	82 2e       	mov	r8, r18
    1552:	93 2e       	mov	r9, r19

	for(int i = 0; i < length; ++i)
    1554:	1c 14       	cp	r1, r12
    1556:	1d 04       	cpc	r1, r13
    1558:	f4 f4       	brge	.+60     	; 0x1596 <decode_message_TwiFIFO+0xae>
    155a:	e2 2e       	mov	r14, r18
    155c:	f3 2e       	mov	r15, r19
    155e:	00 e0       	ldi	r16, 0x00	; 0
    1560:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gTwiFIFO, character))
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	80 91 00 01 	lds	r24, 0x0100
    156a:	90 91 01 01 	lds	r25, 0x0101
    156e:	0e 94 2a 02 	call	0x454	; 0x454 <FifoRead>
    1572:	88 23       	and	r24, r24
    1574:	31 f0       	breq	.+12     	; 0x1582 <decode_message_TwiFIFO+0x9a>
		{
			display_text("FIFO ERROR 2!");
    1576:	8e e2       	ldi	r24, 0x2E	; 46
    1578:	91 e1       	ldi	r25, 0x11	; 17
    157a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_text>
			return 1; // error
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <decode_message_TwiFIFO+0xc2>
		}

		msg[i] = *character;
    1582:	20 91 00 00 	lds	r18, 0x0000
    1586:	f7 01       	movw	r30, r14
    1588:	21 93       	st	Z+, r18
    158a:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
    158c:	0f 5f       	subi	r16, 0xFF	; 255
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	0c 15       	cp	r16, r12
    1592:	1d 05       	cpc	r17, r13
    1594:	34 f3       	brlt	.-52     	; 0x1562 <decode_message_TwiFIFO+0x7a>
	}
	
	
	// TODO: send to relevant party... the display for now
	
	display_clear();
    1596:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <display_clear>
	display_text_fixed_length(msg, length);
    159a:	b6 01       	movw	r22, r12
    159c:	88 2d       	mov	r24, r8
    159e:	99 2d       	mov	r25, r9
    15a0:	0e 94 c7 01 	call	0x38e	; 0x38e <display_text_fixed_length>
	return 0;
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <decode_message_TwiFIFO+0xc2>
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
	{
		//No new messages
		return 1; // error
    15a8:	81 e0       	ldi	r24, 0x01	; 1
	// TODO: send to relevant party... the display for now
	
	display_clear();
	display_text_fixed_length(msg, length);
	return 0;
}
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	be be       	out	0x3e, r11	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	ad be       	out	0x3d, r10	; 61
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	08 95       	ret

000015ce <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	d8 2f       	mov	r29, r24
    15d8:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, messageLength))
    15da:	60 91 5e 13 	lds	r22, 0x135E
    15de:	80 91 00 01 	lds	r24, 0x0100
    15e2:	90 91 01 01 	lds	r25, 0x0101
    15e6:	0e 94 0a 02 	call	0x414	; 0x414 <FifoWrite>
    15ea:	81 11       	cpse	r24, r1
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <write_to_TwiFIFO+0x2a>
	{
		display_text("FIFO ERROR 3");
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    15ee:	80 91 5e 13 	lds	r24, 0x135E
    15f2:	81 11       	cpse	r24, r1
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <write_to_TwiFIFO+0x36>
    15f6:	23 c0       	rjmp	.+70     	; 0x163e <write_to_TwiFIFO+0x70>

uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, messageLength))
	{
		display_text("FIFO ERROR 3");
    15f8:	8c e3       	ldi	r24, 0x3C	; 60
    15fa:	91 e1       	ldi	r25, 0x11	; 17
    15fc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_text>
		return 1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	1d c0       	rjmp	.+58     	; 0x163e <write_to_TwiFIFO+0x70>
    1604:	0d 2f       	mov	r16, r29
    1606:	1c 2f       	mov	r17, r28
	}
	
	for(int i = 0; i < messageLength; ++i)
    1608:	c0 e0       	ldi	r28, 0x00	; 0
    160a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    160c:	f8 01       	movw	r30, r16
    160e:	61 91       	ld	r22, Z+
    1610:	8f 01       	movw	r16, r30
    1612:	80 91 00 01 	lds	r24, 0x0100
    1616:	90 91 01 01 	lds	r25, 0x0101
    161a:	0e 94 0a 02 	call	0x414	; 0x414 <FifoWrite>
    161e:	88 23       	and	r24, r24
    1620:	31 f0       	breq	.+12     	; 0x162e <write_to_TwiFIFO+0x60>
		{
			display_text("FIFO ERROR 4");
    1622:	89 e4       	ldi	r24, 0x49	; 73
    1624:	91 e1       	ldi	r25, 0x11	; 17
    1626:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_text>
			return 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	08 c0       	rjmp	.+16     	; 0x163e <write_to_TwiFIFO+0x70>
	{
		display_text("FIFO ERROR 3");
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    162e:	21 96       	adiw	r28, 0x01	; 1
    1630:	80 91 5e 13 	lds	r24, 0x135E
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	c8 17       	cp	r28, r24
    1638:	d9 07       	cpc	r29, r25
    163a:	44 f3       	brlt	.-48     	; 0x160c <write_to_TwiFIFO+0x3e>
			display_text("FIFO ERROR 4");
			return 1;
		}
	}
	
	return 0;
    163c:	80 e0       	ldi	r24, 0x00	; 0
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <__vector_26>:


//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	11 24       	eor	r1, r1
    1652:	0b b6       	in	r0, 0x3b	; 59
    1654:	0f 92       	push	r0
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
	switch(myAdress)
    1672:	80 91 55 13 	lds	r24, 0x1355
    1676:	80 34       	cpi	r24, 0x40	; 64
    1678:	09 f4       	brne	.+2      	; 0x167c <__vector_26+0x34>
    167a:	87 c0       	rjmp	.+270    	; 0x178a <__vector_26+0x142>
    167c:	80 38       	cpi	r24, 0x80	; 128
    167e:	21 f0       	breq	.+8      	; 0x1688 <__vector_26+0x40>
    1680:	80 32       	cpi	r24, 0x20	; 32
    1682:	09 f0       	breq	.+2      	; 0x1686 <__vector_26+0x3e>
    1684:	7f c1       	rjmp	.+766    	; 0x1984 <__vector_26+0x33c>
    1686:	c9 c0       	rjmp	.+402    	; 0x181a <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1688:	80 91 b9 00 	lds	r24, 0x00B9
    168c:	88 7f       	andi	r24, 0xF8	; 248
    168e:	80 36       	cpi	r24, 0x60	; 96
    1690:	29 f0       	breq	.+10     	; 0x169c <__vector_26+0x54>
    1692:	80 91 b9 00 	lds	r24, 0x00B9
    1696:	88 7f       	andi	r24, 0xF8	; 248
    1698:	88 36       	cpi	r24, 0x68	; 104
    169a:	21 f4       	brne	.+8      	; 0x16a4 <__vector_26+0x5c>
			{
				instruction = 1;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 93 58 13 	sts	0x1358, r24
    16a2:	71 c0       	rjmp	.+226    	; 0x1786 <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    16a4:	80 91 b9 00 	lds	r24, 0x00B9
    16a8:	88 7f       	andi	r24, 0xF8	; 248
    16aa:	80 37       	cpi	r24, 0x70	; 112
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <__vector_26+0x70>
    16ae:	80 91 b9 00 	lds	r24, 0x00B9
    16b2:	88 7f       	andi	r24, 0xF8	; 248
    16b4:	88 37       	cpi	r24, 0x78	; 120
    16b6:	39 f4       	brne	.+14     	; 0x16c6 <__vector_26+0x7e>
			{
				currentInstruction = 255;
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	90 93 61 13 	sts	0x1361, r25
    16c0:	80 93 60 13 	sts	0x1360, r24
    16c4:	60 c0       	rjmp	.+192    	; 0x1786 <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    16c6:	80 91 b9 00 	lds	r24, 0x00B9
    16ca:	88 7f       	andi	r24, 0xF8	; 248
    16cc:	80 38       	cpi	r24, 0x80	; 128
    16ce:	b9 f5       	brne	.+110    	; 0x173e <__vector_26+0xf6>
			{
				if(instruction)
    16d0:	80 91 58 13 	lds	r24, 0x1358
    16d4:	88 23       	and	r24, r24
    16d6:	41 f0       	breq	.+16     	; 0x16e8 <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    16d8:	30 de       	rcall	.-928    	; 0x133a <get_data>
    16da:	80 93 60 13 	sts	0x1360, r24
    16de:	10 92 61 13 	sts	0x1361, r1
					instruction = 0;
    16e2:	10 92 58 13 	sts	0x1358, r1
    16e6:	4f c0       	rjmp	.+158    	; 0x1786 <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    16e8:	80 91 60 13 	lds	r24, 0x1360
    16ec:	90 91 61 13 	lds	r25, 0x1361
    16f0:	85 30       	cpi	r24, 0x05	; 5
    16f2:	91 05       	cpc	r25, r1
    16f4:	71 f0       	breq	.+28     	; 0x1712 <__vector_26+0xca>
    16f6:	24 f4       	brge	.+8      	; 0x1700 <__vector_26+0xb8>
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	09 f0       	breq	.+2      	; 0x16fe <__vector_26+0xb6>
    16fc:	44 c0       	rjmp	.+136    	; 0x1786 <__vector_26+0x13e>
    16fe:	07 c0       	rjmp	.+14     	; 0x170e <__vector_26+0xc6>
    1700:	86 30       	cpi	r24, 0x06	; 6
    1702:	91 05       	cpc	r25, r1
    1704:	51 f0       	breq	.+20     	; 0x171a <__vector_26+0xd2>
    1706:	49 97       	sbiw	r24, 0x19	; 25
    1708:	09 f0       	breq	.+2      	; 0x170c <__vector_26+0xc4>
    170a:	3d c0       	rjmp	.+122    	; 0x1786 <__vector_26+0x13e>
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    170e:	6a de       	rcall	.-812    	; 0x13e4 <get_control_settings_from_bus>
							break;
    1710:	3a c0       	rjmp	.+116    	; 0x1786 <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1712:	79 de       	rcall	.-782    	; 0x1406 <get_autonom_settings_from_bus>
							break;
    1714:	38 c0       	rjmp	.+112    	; 0x1786 <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    1716:	7b de       	rcall	.-778    	; 0x140e <get_char_from_bus>
							break;
    1718:	36 c0       	rjmp	.+108    	; 0x1786 <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    171a:	c0 91 56 13 	lds	r28, 0x1356
    171e:	d0 91 57 13 	lds	r29, 0x1357
    1722:	0b de       	rcall	.-1002   	; 0x133a <get_data>
    1724:	c9 5b       	subi	r28, 0xB9	; 185
    1726:	dd 4e       	sbci	r29, 0xED	; 237
    1728:	88 83       	st	Y, r24
	floatCounter += 1;
    172a:	80 91 56 13 	lds	r24, 0x1356
    172e:	90 91 57 13 	lds	r25, 0x1357
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	90 93 57 13 	sts	0x1357, r25
    1738:	80 93 56 13 	sts	0x1356, r24
    173c:	24 c0       	rjmp	.+72     	; 0x1786 <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    173e:	80 91 b9 00 	lds	r24, 0x00B9
    1742:	88 7f       	andi	r24, 0xF8	; 248
    1744:	80 39       	cpi	r24, 0x90	; 144
    1746:	11 f4       	brne	.+4      	; 0x174c <__vector_26+0x104>
			{
				get_sensor_from_bus();
    1748:	22 de       	rcall	.-956    	; 0x138e <get_sensor_from_bus>
    174a:	1d c0       	rjmp	.+58     	; 0x1786 <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    174c:	80 91 b9 00 	lds	r24, 0x00B9
    1750:	88 7f       	andi	r24, 0xF8	; 248
    1752:	80 3a       	cpi	r24, 0xA0	; 160
    1754:	c1 f4       	brne	.+48     	; 0x1786 <__vector_26+0x13e>
			{
				stop_twi();
    1756:	00 de       	rcall	.-1024   	; 0x1358 <stop_twi>
				switch(currentInstruction)
    1758:	80 91 60 13 	lds	r24, 0x1360
    175c:	90 91 61 13 	lds	r25, 0x1361
    1760:	85 30       	cpi	r24, 0x05	; 5
    1762:	91 05       	cpc	r25, r1
    1764:	49 f0       	breq	.+18     	; 0x1778 <__vector_26+0x130>
    1766:	89 31       	cpi	r24, 0x19	; 25
    1768:	91 05       	cpc	r25, r1
    176a:	51 f0       	breq	.+20     	; 0x1780 <__vector_26+0x138>
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	59 f4       	brne	.+22     	; 0x1786 <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 44 12 	sts	0x1244, r24
						break;
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	80 93 43 12 	sts	0x1243, r24
						break;
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1780:	8f e4       	ldi	r24, 0x4F	; 79
    1782:	92 e1       	ldi	r25, 0x12	; 18
    1784:	24 df       	rcall	.-440    	; 0x15ce <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    1786:	fd dd       	rcall	.-1030   	; 0x1382 <reset_TWI>
			break;
    1788:	fd c0       	rjmp	.+506    	; 0x1984 <__vector_26+0x33c>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    178a:	80 91 b9 00 	lds	r24, 0x00B9
    178e:	88 7f       	andi	r24, 0xF8	; 248
    1790:	80 36       	cpi	r24, 0x60	; 96
    1792:	29 f0       	breq	.+10     	; 0x179e <__vector_26+0x156>
    1794:	80 91 b9 00 	lds	r24, 0x00B9
    1798:	88 7f       	andi	r24, 0xF8	; 248
    179a:	88 36       	cpi	r24, 0x68	; 104
    179c:	21 f4       	brne	.+8      	; 0x17a6 <__vector_26+0x15e>
			{
				instruction = 1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	80 93 58 13 	sts	0x1358, r24
    17a4:	38 c0       	rjmp	.+112    	; 0x1816 <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    17a6:	80 91 b9 00 	lds	r24, 0x00B9
    17aa:	88 7f       	andi	r24, 0xF8	; 248
    17ac:	80 38       	cpi	r24, 0x80	; 128
    17ae:	e1 f4       	brne	.+56     	; 0x17e8 <__vector_26+0x1a0>
			{
				if(instruction)
    17b0:	80 91 58 13 	lds	r24, 0x1358
    17b4:	88 23       	and	r24, r24
    17b6:	41 f0       	breq	.+16     	; 0x17c8 <__vector_26+0x180>
				{
					currentInstruction = get_data();
    17b8:	c0 dd       	rcall	.-1152   	; 0x133a <get_data>
    17ba:	80 93 60 13 	sts	0x1360, r24
    17be:	10 92 61 13 	sts	0x1361, r1
					instruction = 0;
    17c2:	10 92 58 13 	sts	0x1358, r1
    17c6:	27 c0       	rjmp	.+78     	; 0x1816 <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    17c8:	80 91 60 13 	lds	r24, 0x1360
    17cc:	90 91 61 13 	lds	r25, 0x1361
    17d0:	82 30       	cpi	r24, 0x02	; 2
    17d2:	91 05       	cpc	r25, r1
    17d4:	19 f0       	breq	.+6      	; 0x17dc <__vector_26+0x194>
    17d6:	49 97       	sbiw	r24, 0x19	; 25
    17d8:	f1 f4       	brne	.+60     	; 0x1816 <__vector_26+0x1ce>
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    17dc:	ae dd       	rcall	.-1188   	; 0x133a <get_data>
    17de:	80 93 5f 13 	sts	0x135F, r24
    17e2:	19 c0       	rjmp	.+50     	; 0x1816 <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    17e4:	14 de       	rcall	.-984    	; 0x140e <get_char_from_bus>
							break;
    17e6:	17 c0       	rjmp	.+46     	; 0x1816 <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    17e8:	80 91 b9 00 	lds	r24, 0x00B9
    17ec:	88 7f       	andi	r24, 0xF8	; 248
    17ee:	80 3a       	cpi	r24, 0xA0	; 160
    17f0:	91 f4       	brne	.+36     	; 0x1816 <__vector_26+0x1ce>
			{
				stop_twi();
    17f2:	b2 dd       	rcall	.-1180   	; 0x1358 <stop_twi>
				switch(currentInstruction)
    17f4:	80 91 60 13 	lds	r24, 0x1360
    17f8:	90 91 61 13 	lds	r25, 0x1361
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	91 05       	cpc	r25, r1
    1800:	19 f0       	breq	.+6      	; 0x1808 <__vector_26+0x1c0>
    1802:	49 97       	sbiw	r24, 0x19	; 25
    1804:	41 f4       	brne	.+16     	; 0x1816 <__vector_26+0x1ce>
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	80 93 41 12 	sts	0x1241, r24
						break;
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1810:	8f e4       	ldi	r24, 0x4F	; 79
    1812:	92 e1       	ldi	r25, 0x12	; 18
    1814:	dc de       	rcall	.-584    	; 0x15ce <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    1816:	b5 dd       	rcall	.-1174   	; 0x1382 <reset_TWI>
			break;
    1818:	b5 c0       	rjmp	.+362    	; 0x1984 <__vector_26+0x33c>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    181a:	80 91 b9 00 	lds	r24, 0x00B9
    181e:	88 7f       	andi	r24, 0xF8	; 248
    1820:	80 36       	cpi	r24, 0x60	; 96
    1822:	29 f0       	breq	.+10     	; 0x182e <__vector_26+0x1e6>
    1824:	80 91 b9 00 	lds	r24, 0x00B9
    1828:	88 7f       	andi	r24, 0xF8	; 248
    182a:	88 36       	cpi	r24, 0x68	; 104
    182c:	21 f4       	brne	.+8      	; 0x1836 <__vector_26+0x1ee>
			{
				instruction = 1;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 93 58 13 	sts	0x1358, r24
    1834:	a6 c0       	rjmp	.+332    	; 0x1982 <__vector_26+0x33a>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    1836:	80 91 b9 00 	lds	r24, 0x00B9
    183a:	88 7f       	andi	r24, 0xF8	; 248
    183c:	80 37       	cpi	r24, 0x70	; 112
    183e:	29 f0       	breq	.+10     	; 0x184a <__vector_26+0x202>
    1840:	80 91 b9 00 	lds	r24, 0x00B9
    1844:	88 7f       	andi	r24, 0xF8	; 248
    1846:	88 37       	cpi	r24, 0x78	; 120
    1848:	39 f4       	brne	.+14     	; 0x1858 <__vector_26+0x210>
			{
				currentInstruction = 255;
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	90 93 61 13 	sts	0x1361, r25
    1852:	80 93 60 13 	sts	0x1360, r24
    1856:	95 c0       	rjmp	.+298    	; 0x1982 <__vector_26+0x33a>
			}
			else if(CONTROL == DATA_SLAW)
    1858:	80 91 b9 00 	lds	r24, 0x00B9
    185c:	88 7f       	andi	r24, 0xF8	; 248
    185e:	80 38       	cpi	r24, 0x80	; 128
    1860:	09 f0       	breq	.+2      	; 0x1864 <__vector_26+0x21c>
    1862:	62 c0       	rjmp	.+196    	; 0x1928 <__vector_26+0x2e0>
			{
				if(instruction)
    1864:	80 91 58 13 	lds	r24, 0x1358
    1868:	88 23       	and	r24, r24
    186a:	41 f0       	breq	.+16     	; 0x187c <__vector_26+0x234>
				{
					currentInstruction = get_data();
    186c:	66 dd       	rcall	.-1332   	; 0x133a <get_data>
    186e:	80 93 60 13 	sts	0x1360, r24
    1872:	10 92 61 13 	sts	0x1361, r1
					instruction = 0;
    1876:	10 92 58 13 	sts	0x1358, r1
    187a:	83 c0       	rjmp	.+262    	; 0x1982 <__vector_26+0x33a>
				}
				else
				{
					switch(currentInstruction)
    187c:	80 91 60 13 	lds	r24, 0x1360
    1880:	90 91 61 13 	lds	r25, 0x1361
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <__vector_26+0x244>
    188a:	4a c0       	rjmp	.+148    	; 0x1920 <__vector_26+0x2d8>
    188c:	1c f4       	brge	.+6      	; 0x1894 <__vector_26+0x24c>
    188e:	89 2b       	or	r24, r25
    1890:	41 f0       	breq	.+16     	; 0x18a2 <__vector_26+0x25a>
    1892:	77 c0       	rjmp	.+238    	; 0x1982 <__vector_26+0x33a>
    1894:	84 30       	cpi	r24, 0x04	; 4
    1896:	91 05       	cpc	r25, r1
    1898:	b1 f0       	breq	.+44     	; 0x18c6 <__vector_26+0x27e>
    189a:	05 97       	sbiw	r24, 0x05	; 5
    189c:	09 f0       	breq	.+2      	; 0x18a0 <__vector_26+0x258>
    189e:	71 c0       	rjmp	.+226    	; 0x1982 <__vector_26+0x33a>
    18a0:	41 c0       	rjmp	.+130    	; 0x1924 <__vector_26+0x2dc>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    18a2:	c0 91 59 13 	lds	r28, 0x1359
    18a6:	d0 91 5a 13 	lds	r29, 0x135A
    18aa:	47 dd       	rcall	.-1394   	; 0x133a <get_data>
    18ac:	c5 5b       	subi	r28, 0xB5	; 181
    18ae:	dd 4e       	sbci	r29, 0xED	; 237
    18b0:	88 83       	st	Y, r24
	currentCommand += 1;
    18b2:	80 91 59 13 	lds	r24, 0x1359
    18b6:	90 91 5a 13 	lds	r25, 0x135A
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	90 93 5a 13 	sts	0x135A, r25
    18c0:	80 93 59 13 	sts	0x1359, r24
    18c4:	5e c0       	rjmp	.+188    	; 0x1982 <__vector_26+0x33a>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	int ele = get_data();
    18c6:	39 dd       	rcall	.-1422   	; 0x133a <get_data>
	if(ele == 0)
    18c8:	81 11       	cpse	r24, r1
    18ca:	0a c0       	rjmp	.+20     	; 0x18e0 <__vector_26+0x298>
	{
		elevation -= 1;
    18cc:	80 91 5b 13 	lds	r24, 0x135B
    18d0:	90 91 5c 13 	lds	r25, 0x135C
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	90 93 5c 13 	sts	0x135C, r25
    18da:	80 93 5b 13 	sts	0x135B, r24
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <__vector_26+0x2aa>
	}
	else
	{
		elevation += 1;
    18e0:	80 91 5b 13 	lds	r24, 0x135B
    18e4:	90 91 5c 13 	lds	r25, 0x135C
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	90 93 5c 13 	sts	0x135C, r25
    18ee:	80 93 5b 13 	sts	0x135B, r24
	}
	if(elevation < 1)
    18f2:	80 91 5b 13 	lds	r24, 0x135B
    18f6:	90 91 5c 13 	lds	r25, 0x135C
    18fa:	18 16       	cp	r1, r24
    18fc:	19 06       	cpc	r1, r25
    18fe:	3c f0       	brlt	.+14     	; 0x190e <__vector_26+0x2c6>
	elevation = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	90 93 5c 13 	sts	0x135C, r25
    1908:	80 93 5b 13 	sts	0x135B, r24
    190c:	3a c0       	rjmp	.+116    	; 0x1982 <__vector_26+0x33a>
	else if(elevation > 7) // 7 nivåer?!
    190e:	08 97       	sbiw	r24, 0x08	; 8
    1910:	c4 f1       	brlt	.+112    	; 0x1982 <__vector_26+0x33a>
	elevation = 7;
    1912:	87 e0       	ldi	r24, 0x07	; 7
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	90 93 5c 13 	sts	0x135C, r25
    191a:	80 93 5b 13 	sts	0x135B, r24
    191e:	31 c0       	rjmp	.+98     	; 0x1982 <__vector_26+0x33a>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    1920:	61 dd       	rcall	.-1342   	; 0x13e4 <get_control_settings_from_bus>
							break;
    1922:	2f c0       	rjmp	.+94     	; 0x1982 <__vector_26+0x33a>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1924:	70 dd       	rcall	.-1312   	; 0x1406 <get_autonom_settings_from_bus>
							break;
    1926:	2d c0       	rjmp	.+90     	; 0x1982 <__vector_26+0x33a>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    1928:	80 91 b9 00 	lds	r24, 0x00B9
    192c:	88 7f       	andi	r24, 0xF8	; 248
    192e:	80 39       	cpi	r24, 0x90	; 144
    1930:	11 f4       	brne	.+4      	; 0x1936 <__vector_26+0x2ee>
			{
				get_sensor_from_bus();
    1932:	2d dd       	rcall	.-1446   	; 0x138e <get_sensor_from_bus>
    1934:	26 c0       	rjmp	.+76     	; 0x1982 <__vector_26+0x33a>
			}
			else if (CONTROL == STOP)
    1936:	80 91 b9 00 	lds	r24, 0x00B9
    193a:	88 7f       	andi	r24, 0xF8	; 248
    193c:	80 3a       	cpi	r24, 0xA0	; 160
    193e:	09 f5       	brne	.+66     	; 0x1982 <__vector_26+0x33a>
			{
				stop_twi();
    1940:	0b dd       	rcall	.-1514   	; 0x1358 <stop_twi>
				switch(currentInstruction)
    1942:	80 91 60 13 	lds	r24, 0x1360
    1946:	90 91 61 13 	lds	r25, 0x1361
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	91 05       	cpc	r25, r1
    194e:	91 f0       	breq	.+36     	; 0x1974 <__vector_26+0x32c>
    1950:	1c f4       	brge	.+6      	; 0x1958 <__vector_26+0x310>
    1952:	89 2b       	or	r24, r25
    1954:	39 f0       	breq	.+14     	; 0x1964 <__vector_26+0x31c>
    1956:	15 c0       	rjmp	.+42     	; 0x1982 <__vector_26+0x33a>
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	91 05       	cpc	r25, r1
    195c:	39 f0       	breq	.+14     	; 0x196c <__vector_26+0x324>
    195e:	05 97       	sbiw	r24, 0x05	; 5
    1960:	81 f4       	brne	.+32     	; 0x1982 <__vector_26+0x33a>
    1962:	0c c0       	rjmp	.+24     	; 0x197c <__vector_26+0x334>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	80 93 45 12 	sts	0x1245, r24
						break;
    196a:	0b c0       	rjmp	.+22     	; 0x1982 <__vector_26+0x33a>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	80 93 42 12 	sts	0x1242, r24
						break;
    1972:	07 c0       	rjmp	.+14     	; 0x1982 <__vector_26+0x33a>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	80 93 44 12 	sts	0x1244, r24
						break;
    197a:	03 c0       	rjmp	.+6      	; 0x1982 <__vector_26+0x33a>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	80 93 43 12 	sts	0x1243, r24
						break;
					}
				}
			}
			reset_TWI();
    1982:	ff dc       	rcall	.-1538   	; 0x1382 <reset_TWI>
			break;
		}
	}
    1984:	ff 91       	pop	r31
    1986:	ef 91       	pop	r30
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	bf 91       	pop	r27
    198e:	af 91       	pop	r26
    1990:	9f 91       	pop	r25
    1992:	8f 91       	pop	r24
    1994:	7f 91       	pop	r23
    1996:	6f 91       	pop	r22
    1998:	5f 91       	pop	r21
    199a:	4f 91       	pop	r20
    199c:	3f 91       	pop	r19
    199e:	2f 91       	pop	r18
    19a0:	0f 90       	pop	r0
    19a2:	0b be       	out	0x3b, r0	; 59
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	0f 90       	pop	r0
    19aa:	1f 90       	pop	r1
    19ac:	18 95       	reti

000019ae <__subsf3>:
    19ae:	50 58       	subi	r21, 0x80	; 128

000019b0 <__addsf3>:
    19b0:	bb 27       	eor	r27, r27
    19b2:	aa 27       	eor	r26, r26
    19b4:	0e d0       	rcall	.+28     	; 0x19d2 <__addsf3x>
    19b6:	75 c1       	rjmp	.+746    	; 0x1ca2 <__fp_round>
    19b8:	66 d1       	rcall	.+716    	; 0x1c86 <__fp_pscA>
    19ba:	30 f0       	brcs	.+12     	; 0x19c8 <__addsf3+0x18>
    19bc:	6b d1       	rcall	.+726    	; 0x1c94 <__fp_pscB>
    19be:	20 f0       	brcs	.+8      	; 0x19c8 <__addsf3+0x18>
    19c0:	31 f4       	brne	.+12     	; 0x19ce <__addsf3+0x1e>
    19c2:	9f 3f       	cpi	r25, 0xFF	; 255
    19c4:	11 f4       	brne	.+4      	; 0x19ca <__addsf3+0x1a>
    19c6:	1e f4       	brtc	.+6      	; 0x19ce <__addsf3+0x1e>
    19c8:	5b c1       	rjmp	.+694    	; 0x1c80 <__fp_nan>
    19ca:	0e f4       	brtc	.+2      	; 0x19ce <__addsf3+0x1e>
    19cc:	e0 95       	com	r30
    19ce:	e7 fb       	bst	r30, 7
    19d0:	51 c1       	rjmp	.+674    	; 0x1c74 <__fp_inf>

000019d2 <__addsf3x>:
    19d2:	e9 2f       	mov	r30, r25
    19d4:	77 d1       	rcall	.+750    	; 0x1cc4 <__fp_split3>
    19d6:	80 f3       	brcs	.-32     	; 0x19b8 <__addsf3+0x8>
    19d8:	ba 17       	cp	r27, r26
    19da:	62 07       	cpc	r22, r18
    19dc:	73 07       	cpc	r23, r19
    19de:	84 07       	cpc	r24, r20
    19e0:	95 07       	cpc	r25, r21
    19e2:	18 f0       	brcs	.+6      	; 0x19ea <__addsf3x+0x18>
    19e4:	71 f4       	brne	.+28     	; 0x1a02 <__addsf3x+0x30>
    19e6:	9e f5       	brtc	.+102    	; 0x1a4e <__addsf3x+0x7c>
    19e8:	8f c1       	rjmp	.+798    	; 0x1d08 <__fp_zero>
    19ea:	0e f4       	brtc	.+2      	; 0x19ee <__addsf3x+0x1c>
    19ec:	e0 95       	com	r30
    19ee:	0b 2e       	mov	r0, r27
    19f0:	ba 2f       	mov	r27, r26
    19f2:	a0 2d       	mov	r26, r0
    19f4:	0b 01       	movw	r0, r22
    19f6:	b9 01       	movw	r22, r18
    19f8:	90 01       	movw	r18, r0
    19fa:	0c 01       	movw	r0, r24
    19fc:	ca 01       	movw	r24, r20
    19fe:	a0 01       	movw	r20, r0
    1a00:	11 24       	eor	r1, r1
    1a02:	ff 27       	eor	r31, r31
    1a04:	59 1b       	sub	r21, r25
    1a06:	99 f0       	breq	.+38     	; 0x1a2e <__addsf3x+0x5c>
    1a08:	59 3f       	cpi	r21, 0xF9	; 249
    1a0a:	50 f4       	brcc	.+20     	; 0x1a20 <__addsf3x+0x4e>
    1a0c:	50 3e       	cpi	r21, 0xE0	; 224
    1a0e:	68 f1       	brcs	.+90     	; 0x1a6a <__addsf3x+0x98>
    1a10:	1a 16       	cp	r1, r26
    1a12:	f0 40       	sbci	r31, 0x00	; 0
    1a14:	a2 2f       	mov	r26, r18
    1a16:	23 2f       	mov	r18, r19
    1a18:	34 2f       	mov	r19, r20
    1a1a:	44 27       	eor	r20, r20
    1a1c:	58 5f       	subi	r21, 0xF8	; 248
    1a1e:	f3 cf       	rjmp	.-26     	; 0x1a06 <__addsf3x+0x34>
    1a20:	46 95       	lsr	r20
    1a22:	37 95       	ror	r19
    1a24:	27 95       	ror	r18
    1a26:	a7 95       	ror	r26
    1a28:	f0 40       	sbci	r31, 0x00	; 0
    1a2a:	53 95       	inc	r21
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__addsf3x+0x4e>
    1a2e:	7e f4       	brtc	.+30     	; 0x1a4e <__addsf3x+0x7c>
    1a30:	1f 16       	cp	r1, r31
    1a32:	ba 0b       	sbc	r27, r26
    1a34:	62 0b       	sbc	r22, r18
    1a36:	73 0b       	sbc	r23, r19
    1a38:	84 0b       	sbc	r24, r20
    1a3a:	ba f0       	brmi	.+46     	; 0x1a6a <__addsf3x+0x98>
    1a3c:	91 50       	subi	r25, 0x01	; 1
    1a3e:	a1 f0       	breq	.+40     	; 0x1a68 <__addsf3x+0x96>
    1a40:	ff 0f       	add	r31, r31
    1a42:	bb 1f       	adc	r27, r27
    1a44:	66 1f       	adc	r22, r22
    1a46:	77 1f       	adc	r23, r23
    1a48:	88 1f       	adc	r24, r24
    1a4a:	c2 f7       	brpl	.-16     	; 0x1a3c <__addsf3x+0x6a>
    1a4c:	0e c0       	rjmp	.+28     	; 0x1a6a <__addsf3x+0x98>
    1a4e:	ba 0f       	add	r27, r26
    1a50:	62 1f       	adc	r22, r18
    1a52:	73 1f       	adc	r23, r19
    1a54:	84 1f       	adc	r24, r20
    1a56:	48 f4       	brcc	.+18     	; 0x1a6a <__addsf3x+0x98>
    1a58:	87 95       	ror	r24
    1a5a:	77 95       	ror	r23
    1a5c:	67 95       	ror	r22
    1a5e:	b7 95       	ror	r27
    1a60:	f7 95       	ror	r31
    1a62:	9e 3f       	cpi	r25, 0xFE	; 254
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <__addsf3x+0x96>
    1a66:	b3 cf       	rjmp	.-154    	; 0x19ce <__addsf3+0x1e>
    1a68:	93 95       	inc	r25
    1a6a:	88 0f       	add	r24, r24
    1a6c:	08 f0       	brcs	.+2      	; 0x1a70 <__addsf3x+0x9e>
    1a6e:	99 27       	eor	r25, r25
    1a70:	ee 0f       	add	r30, r30
    1a72:	97 95       	ror	r25
    1a74:	87 95       	ror	r24
    1a76:	08 95       	ret

00001a78 <__cmpsf2>:
    1a78:	d9 d0       	rcall	.+434    	; 0x1c2c <__fp_cmp>
    1a7a:	08 f4       	brcc	.+2      	; 0x1a7e <__cmpsf2+0x6>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	08 95       	ret

00001a80 <__divsf3>:
    1a80:	0c d0       	rcall	.+24     	; 0x1a9a <__divsf3x>
    1a82:	0f c1       	rjmp	.+542    	; 0x1ca2 <__fp_round>
    1a84:	07 d1       	rcall	.+526    	; 0x1c94 <__fp_pscB>
    1a86:	40 f0       	brcs	.+16     	; 0x1a98 <__divsf3+0x18>
    1a88:	fe d0       	rcall	.+508    	; 0x1c86 <__fp_pscA>
    1a8a:	30 f0       	brcs	.+12     	; 0x1a98 <__divsf3+0x18>
    1a8c:	21 f4       	brne	.+8      	; 0x1a96 <__divsf3+0x16>
    1a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a90:	19 f0       	breq	.+6      	; 0x1a98 <__divsf3+0x18>
    1a92:	f0 c0       	rjmp	.+480    	; 0x1c74 <__fp_inf>
    1a94:	51 11       	cpse	r21, r1
    1a96:	39 c1       	rjmp	.+626    	; 0x1d0a <__fp_szero>
    1a98:	f3 c0       	rjmp	.+486    	; 0x1c80 <__fp_nan>

00001a9a <__divsf3x>:
    1a9a:	14 d1       	rcall	.+552    	; 0x1cc4 <__fp_split3>
    1a9c:	98 f3       	brcs	.-26     	; 0x1a84 <__divsf3+0x4>

00001a9e <__divsf3_pse>:
    1a9e:	99 23       	and	r25, r25
    1aa0:	c9 f3       	breq	.-14     	; 0x1a94 <__divsf3+0x14>
    1aa2:	55 23       	and	r21, r21
    1aa4:	b1 f3       	breq	.-20     	; 0x1a92 <__divsf3+0x12>
    1aa6:	95 1b       	sub	r25, r21
    1aa8:	55 0b       	sbc	r21, r21
    1aaa:	bb 27       	eor	r27, r27
    1aac:	aa 27       	eor	r26, r26
    1aae:	62 17       	cp	r22, r18
    1ab0:	73 07       	cpc	r23, r19
    1ab2:	84 07       	cpc	r24, r20
    1ab4:	38 f0       	brcs	.+14     	; 0x1ac4 <__divsf3_pse+0x26>
    1ab6:	9f 5f       	subi	r25, 0xFF	; 255
    1ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aba:	22 0f       	add	r18, r18
    1abc:	33 1f       	adc	r19, r19
    1abe:	44 1f       	adc	r20, r20
    1ac0:	aa 1f       	adc	r26, r26
    1ac2:	a9 f3       	breq	.-22     	; 0x1aae <__divsf3_pse+0x10>
    1ac4:	33 d0       	rcall	.+102    	; 0x1b2c <__divsf3_pse+0x8e>
    1ac6:	0e 2e       	mov	r0, r30
    1ac8:	3a f0       	brmi	.+14     	; 0x1ad8 <__divsf3_pse+0x3a>
    1aca:	e0 e8       	ldi	r30, 0x80	; 128
    1acc:	30 d0       	rcall	.+96     	; 0x1b2e <__divsf3_pse+0x90>
    1ace:	91 50       	subi	r25, 0x01	; 1
    1ad0:	50 40       	sbci	r21, 0x00	; 0
    1ad2:	e6 95       	lsr	r30
    1ad4:	00 1c       	adc	r0, r0
    1ad6:	ca f7       	brpl	.-14     	; 0x1aca <__divsf3_pse+0x2c>
    1ad8:	29 d0       	rcall	.+82     	; 0x1b2c <__divsf3_pse+0x8e>
    1ada:	fe 2f       	mov	r31, r30
    1adc:	27 d0       	rcall	.+78     	; 0x1b2c <__divsf3_pse+0x8e>
    1ade:	66 0f       	add	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	bb 1f       	adc	r27, r27
    1ae6:	26 17       	cp	r18, r22
    1ae8:	37 07       	cpc	r19, r23
    1aea:	48 07       	cpc	r20, r24
    1aec:	ab 07       	cpc	r26, r27
    1aee:	b0 e8       	ldi	r27, 0x80	; 128
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <__divsf3_pse+0x56>
    1af2:	bb 0b       	sbc	r27, r27
    1af4:	80 2d       	mov	r24, r0
    1af6:	bf 01       	movw	r22, r30
    1af8:	ff 27       	eor	r31, r31
    1afa:	93 58       	subi	r25, 0x83	; 131
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	2a f0       	brmi	.+10     	; 0x1b0a <__divsf3_pse+0x6c>
    1b00:	9e 3f       	cpi	r25, 0xFE	; 254
    1b02:	51 05       	cpc	r21, r1
    1b04:	68 f0       	brcs	.+26     	; 0x1b20 <__divsf3_pse+0x82>
    1b06:	b6 c0       	rjmp	.+364    	; 0x1c74 <__fp_inf>
    1b08:	00 c1       	rjmp	.+512    	; 0x1d0a <__fp_szero>
    1b0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b0c:	ec f3       	brlt	.-6      	; 0x1b08 <__divsf3_pse+0x6a>
    1b0e:	98 3e       	cpi	r25, 0xE8	; 232
    1b10:	dc f3       	brlt	.-10     	; 0x1b08 <__divsf3_pse+0x6a>
    1b12:	86 95       	lsr	r24
    1b14:	77 95       	ror	r23
    1b16:	67 95       	ror	r22
    1b18:	b7 95       	ror	r27
    1b1a:	f7 95       	ror	r31
    1b1c:	9f 5f       	subi	r25, 0xFF	; 255
    1b1e:	c9 f7       	brne	.-14     	; 0x1b12 <__divsf3_pse+0x74>
    1b20:	88 0f       	add	r24, r24
    1b22:	91 1d       	adc	r25, r1
    1b24:	96 95       	lsr	r25
    1b26:	87 95       	ror	r24
    1b28:	97 f9       	bld	r25, 7
    1b2a:	08 95       	ret
    1b2c:	e1 e0       	ldi	r30, 0x01	; 1
    1b2e:	66 0f       	add	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	bb 1f       	adc	r27, r27
    1b36:	62 17       	cp	r22, r18
    1b38:	73 07       	cpc	r23, r19
    1b3a:	84 07       	cpc	r24, r20
    1b3c:	ba 07       	cpc	r27, r26
    1b3e:	20 f0       	brcs	.+8      	; 0x1b48 <__divsf3_pse+0xaa>
    1b40:	62 1b       	sub	r22, r18
    1b42:	73 0b       	sbc	r23, r19
    1b44:	84 0b       	sbc	r24, r20
    1b46:	ba 0b       	sbc	r27, r26
    1b48:	ee 1f       	adc	r30, r30
    1b4a:	88 f7       	brcc	.-30     	; 0x1b2e <__divsf3_pse+0x90>
    1b4c:	e0 95       	com	r30
    1b4e:	08 95       	ret

00001b50 <__fixsfsi>:
    1b50:	04 d0       	rcall	.+8      	; 0x1b5a <__fixunssfsi>
    1b52:	68 94       	set
    1b54:	b1 11       	cpse	r27, r1
    1b56:	d9 c0       	rjmp	.+434    	; 0x1d0a <__fp_szero>
    1b58:	08 95       	ret

00001b5a <__fixunssfsi>:
    1b5a:	bc d0       	rcall	.+376    	; 0x1cd4 <__fp_splitA>
    1b5c:	88 f0       	brcs	.+34     	; 0x1b80 <__fixunssfsi+0x26>
    1b5e:	9f 57       	subi	r25, 0x7F	; 127
    1b60:	90 f0       	brcs	.+36     	; 0x1b86 <__fixunssfsi+0x2c>
    1b62:	b9 2f       	mov	r27, r25
    1b64:	99 27       	eor	r25, r25
    1b66:	b7 51       	subi	r27, 0x17	; 23
    1b68:	a0 f0       	brcs	.+40     	; 0x1b92 <__fixunssfsi+0x38>
    1b6a:	d1 f0       	breq	.+52     	; 0x1ba0 <__fixunssfsi+0x46>
    1b6c:	66 0f       	add	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	1a f0       	brmi	.+6      	; 0x1b7c <__fixunssfsi+0x22>
    1b76:	ba 95       	dec	r27
    1b78:	c9 f7       	brne	.-14     	; 0x1b6c <__fixunssfsi+0x12>
    1b7a:	12 c0       	rjmp	.+36     	; 0x1ba0 <__fixunssfsi+0x46>
    1b7c:	b1 30       	cpi	r27, 0x01	; 1
    1b7e:	81 f0       	breq	.+32     	; 0x1ba0 <__fixunssfsi+0x46>
    1b80:	c3 d0       	rcall	.+390    	; 0x1d08 <__fp_zero>
    1b82:	b1 e0       	ldi	r27, 0x01	; 1
    1b84:	08 95       	ret
    1b86:	c0 c0       	rjmp	.+384    	; 0x1d08 <__fp_zero>
    1b88:	67 2f       	mov	r22, r23
    1b8a:	78 2f       	mov	r23, r24
    1b8c:	88 27       	eor	r24, r24
    1b8e:	b8 5f       	subi	r27, 0xF8	; 248
    1b90:	39 f0       	breq	.+14     	; 0x1ba0 <__fixunssfsi+0x46>
    1b92:	b9 3f       	cpi	r27, 0xF9	; 249
    1b94:	cc f3       	brlt	.-14     	; 0x1b88 <__fixunssfsi+0x2e>
    1b96:	86 95       	lsr	r24
    1b98:	77 95       	ror	r23
    1b9a:	67 95       	ror	r22
    1b9c:	b3 95       	inc	r27
    1b9e:	d9 f7       	brne	.-10     	; 0x1b96 <__fixunssfsi+0x3c>
    1ba0:	3e f4       	brtc	.+14     	; 0x1bb0 <__fixunssfsi+0x56>
    1ba2:	90 95       	com	r25
    1ba4:	80 95       	com	r24
    1ba6:	70 95       	com	r23
    1ba8:	61 95       	neg	r22
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bac:	8f 4f       	sbci	r24, 0xFF	; 255
    1bae:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb0:	08 95       	ret

00001bb2 <__floatunsisf>:
    1bb2:	e8 94       	clt
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <__floatsisf+0x12>

00001bb6 <__floatsisf>:
    1bb6:	97 fb       	bst	r25, 7
    1bb8:	3e f4       	brtc	.+14     	; 0x1bc8 <__floatsisf+0x12>
    1bba:	90 95       	com	r25
    1bbc:	80 95       	com	r24
    1bbe:	70 95       	com	r23
    1bc0:	61 95       	neg	r22
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	99 23       	and	r25, r25
    1bca:	a9 f0       	breq	.+42     	; 0x1bf6 <__floatsisf+0x40>
    1bcc:	f9 2f       	mov	r31, r25
    1bce:	96 e9       	ldi	r25, 0x96	; 150
    1bd0:	bb 27       	eor	r27, r27
    1bd2:	93 95       	inc	r25
    1bd4:	f6 95       	lsr	r31
    1bd6:	87 95       	ror	r24
    1bd8:	77 95       	ror	r23
    1bda:	67 95       	ror	r22
    1bdc:	b7 95       	ror	r27
    1bde:	f1 11       	cpse	r31, r1
    1be0:	f8 cf       	rjmp	.-16     	; 0x1bd2 <__floatsisf+0x1c>
    1be2:	fa f4       	brpl	.+62     	; 0x1c22 <__floatsisf+0x6c>
    1be4:	bb 0f       	add	r27, r27
    1be6:	11 f4       	brne	.+4      	; 0x1bec <__floatsisf+0x36>
    1be8:	60 ff       	sbrs	r22, 0
    1bea:	1b c0       	rjmp	.+54     	; 0x1c22 <__floatsisf+0x6c>
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf4:	16 c0       	rjmp	.+44     	; 0x1c22 <__floatsisf+0x6c>
    1bf6:	88 23       	and	r24, r24
    1bf8:	11 f0       	breq	.+4      	; 0x1bfe <__floatsisf+0x48>
    1bfa:	96 e9       	ldi	r25, 0x96	; 150
    1bfc:	11 c0       	rjmp	.+34     	; 0x1c20 <__floatsisf+0x6a>
    1bfe:	77 23       	and	r23, r23
    1c00:	21 f0       	breq	.+8      	; 0x1c0a <__floatsisf+0x54>
    1c02:	9e e8       	ldi	r25, 0x8E	; 142
    1c04:	87 2f       	mov	r24, r23
    1c06:	76 2f       	mov	r23, r22
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <__floatsisf+0x5e>
    1c0a:	66 23       	and	r22, r22
    1c0c:	71 f0       	breq	.+28     	; 0x1c2a <__floatsisf+0x74>
    1c0e:	96 e8       	ldi	r25, 0x86	; 134
    1c10:	86 2f       	mov	r24, r22
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	2a f0       	brmi	.+10     	; 0x1c22 <__floatsisf+0x6c>
    1c18:	9a 95       	dec	r25
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	da f7       	brpl	.-10     	; 0x1c18 <__floatsisf+0x62>
    1c22:	88 0f       	add	r24, r24
    1c24:	96 95       	lsr	r25
    1c26:	87 95       	ror	r24
    1c28:	97 f9       	bld	r25, 7
    1c2a:	08 95       	ret

00001c2c <__fp_cmp>:
    1c2c:	99 0f       	add	r25, r25
    1c2e:	00 08       	sbc	r0, r0
    1c30:	55 0f       	add	r21, r21
    1c32:	aa 0b       	sbc	r26, r26
    1c34:	e0 e8       	ldi	r30, 0x80	; 128
    1c36:	fe ef       	ldi	r31, 0xFE	; 254
    1c38:	16 16       	cp	r1, r22
    1c3a:	17 06       	cpc	r1, r23
    1c3c:	e8 07       	cpc	r30, r24
    1c3e:	f9 07       	cpc	r31, r25
    1c40:	c0 f0       	brcs	.+48     	; 0x1c72 <__fp_cmp+0x46>
    1c42:	12 16       	cp	r1, r18
    1c44:	13 06       	cpc	r1, r19
    1c46:	e4 07       	cpc	r30, r20
    1c48:	f5 07       	cpc	r31, r21
    1c4a:	98 f0       	brcs	.+38     	; 0x1c72 <__fp_cmp+0x46>
    1c4c:	62 1b       	sub	r22, r18
    1c4e:	73 0b       	sbc	r23, r19
    1c50:	84 0b       	sbc	r24, r20
    1c52:	95 0b       	sbc	r25, r21
    1c54:	39 f4       	brne	.+14     	; 0x1c64 <__fp_cmp+0x38>
    1c56:	0a 26       	eor	r0, r26
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <__fp_cmp+0x46>
    1c5a:	23 2b       	or	r18, r19
    1c5c:	24 2b       	or	r18, r20
    1c5e:	25 2b       	or	r18, r21
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <__fp_cmp+0x3e>
    1c62:	08 95       	ret
    1c64:	0a 26       	eor	r0, r26
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <__fp_cmp+0x3e>
    1c68:	a1 40       	sbci	r26, 0x01	; 1
    1c6a:	a6 95       	lsr	r26
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	81 1d       	adc	r24, r1
    1c70:	81 1d       	adc	r24, r1
    1c72:	08 95       	ret

00001c74 <__fp_inf>:
    1c74:	97 f9       	bld	r25, 7
    1c76:	9f 67       	ori	r25, 0x7F	; 127
    1c78:	80 e8       	ldi	r24, 0x80	; 128
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	08 95       	ret

00001c80 <__fp_nan>:
    1c80:	9f ef       	ldi	r25, 0xFF	; 255
    1c82:	80 ec       	ldi	r24, 0xC0	; 192
    1c84:	08 95       	ret

00001c86 <__fp_pscA>:
    1c86:	00 24       	eor	r0, r0
    1c88:	0a 94       	dec	r0
    1c8a:	16 16       	cp	r1, r22
    1c8c:	17 06       	cpc	r1, r23
    1c8e:	18 06       	cpc	r1, r24
    1c90:	09 06       	cpc	r0, r25
    1c92:	08 95       	ret

00001c94 <__fp_pscB>:
    1c94:	00 24       	eor	r0, r0
    1c96:	0a 94       	dec	r0
    1c98:	12 16       	cp	r1, r18
    1c9a:	13 06       	cpc	r1, r19
    1c9c:	14 06       	cpc	r1, r20
    1c9e:	05 06       	cpc	r0, r21
    1ca0:	08 95       	ret

00001ca2 <__fp_round>:
    1ca2:	09 2e       	mov	r0, r25
    1ca4:	03 94       	inc	r0
    1ca6:	00 0c       	add	r0, r0
    1ca8:	11 f4       	brne	.+4      	; 0x1cae <__fp_round+0xc>
    1caa:	88 23       	and	r24, r24
    1cac:	52 f0       	brmi	.+20     	; 0x1cc2 <__fp_round+0x20>
    1cae:	bb 0f       	add	r27, r27
    1cb0:	40 f4       	brcc	.+16     	; 0x1cc2 <__fp_round+0x20>
    1cb2:	bf 2b       	or	r27, r31
    1cb4:	11 f4       	brne	.+4      	; 0x1cba <__fp_round+0x18>
    1cb6:	60 ff       	sbrs	r22, 0
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <__fp_round+0x20>
    1cba:	6f 5f       	subi	r22, 0xFF	; 255
    1cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	08 95       	ret

00001cc4 <__fp_split3>:
    1cc4:	57 fd       	sbrc	r21, 7
    1cc6:	90 58       	subi	r25, 0x80	; 128
    1cc8:	44 0f       	add	r20, r20
    1cca:	55 1f       	adc	r21, r21
    1ccc:	59 f0       	breq	.+22     	; 0x1ce4 <__fp_splitA+0x10>
    1cce:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd0:	71 f0       	breq	.+28     	; 0x1cee <__fp_splitA+0x1a>
    1cd2:	47 95       	ror	r20

00001cd4 <__fp_splitA>:
    1cd4:	88 0f       	add	r24, r24
    1cd6:	97 fb       	bst	r25, 7
    1cd8:	99 1f       	adc	r25, r25
    1cda:	61 f0       	breq	.+24     	; 0x1cf4 <__fp_splitA+0x20>
    1cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cde:	79 f0       	breq	.+30     	; 0x1cfe <__fp_splitA+0x2a>
    1ce0:	87 95       	ror	r24
    1ce2:	08 95       	ret
    1ce4:	12 16       	cp	r1, r18
    1ce6:	13 06       	cpc	r1, r19
    1ce8:	14 06       	cpc	r1, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	f2 cf       	rjmp	.-28     	; 0x1cd2 <__fp_split3+0xe>
    1cee:	46 95       	lsr	r20
    1cf0:	f1 df       	rcall	.-30     	; 0x1cd4 <__fp_splitA>
    1cf2:	08 c0       	rjmp	.+16     	; 0x1d04 <__fp_splitA+0x30>
    1cf4:	16 16       	cp	r1, r22
    1cf6:	17 06       	cpc	r1, r23
    1cf8:	18 06       	cpc	r1, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	f1 cf       	rjmp	.-30     	; 0x1ce0 <__fp_splitA+0xc>
    1cfe:	86 95       	lsr	r24
    1d00:	71 05       	cpc	r23, r1
    1d02:	61 05       	cpc	r22, r1
    1d04:	08 94       	sec
    1d06:	08 95       	ret

00001d08 <__fp_zero>:
    1d08:	e8 94       	clt

00001d0a <__fp_szero>:
    1d0a:	bb 27       	eor	r27, r27
    1d0c:	66 27       	eor	r22, r22
    1d0e:	77 27       	eor	r23, r23
    1d10:	cb 01       	movw	r24, r22
    1d12:	97 f9       	bld	r25, 7
    1d14:	08 95       	ret

00001d16 <__gesf2>:
    1d16:	8a df       	rcall	.-236    	; 0x1c2c <__fp_cmp>
    1d18:	08 f4       	brcc	.+2      	; 0x1d1c <__gesf2+0x6>
    1d1a:	8f ef       	ldi	r24, 0xFF	; 255
    1d1c:	08 95       	ret

00001d1e <__mulsf3>:
    1d1e:	0b d0       	rcall	.+22     	; 0x1d36 <__mulsf3x>
    1d20:	c0 cf       	rjmp	.-128    	; 0x1ca2 <__fp_round>
    1d22:	b1 df       	rcall	.-158    	; 0x1c86 <__fp_pscA>
    1d24:	28 f0       	brcs	.+10     	; 0x1d30 <__mulsf3+0x12>
    1d26:	b6 df       	rcall	.-148    	; 0x1c94 <__fp_pscB>
    1d28:	18 f0       	brcs	.+6      	; 0x1d30 <__mulsf3+0x12>
    1d2a:	95 23       	and	r25, r21
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <__mulsf3+0x12>
    1d2e:	a2 cf       	rjmp	.-188    	; 0x1c74 <__fp_inf>
    1d30:	a7 cf       	rjmp	.-178    	; 0x1c80 <__fp_nan>
    1d32:	11 24       	eor	r1, r1
    1d34:	ea cf       	rjmp	.-44     	; 0x1d0a <__fp_szero>

00001d36 <__mulsf3x>:
    1d36:	c6 df       	rcall	.-116    	; 0x1cc4 <__fp_split3>
    1d38:	a0 f3       	brcs	.-24     	; 0x1d22 <__mulsf3+0x4>

00001d3a <__mulsf3_pse>:
    1d3a:	95 9f       	mul	r25, r21
    1d3c:	d1 f3       	breq	.-12     	; 0x1d32 <__mulsf3+0x14>
    1d3e:	95 0f       	add	r25, r21
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	55 1f       	adc	r21, r21
    1d44:	62 9f       	mul	r22, r18
    1d46:	f0 01       	movw	r30, r0
    1d48:	72 9f       	mul	r23, r18
    1d4a:	bb 27       	eor	r27, r27
    1d4c:	f0 0d       	add	r31, r0
    1d4e:	b1 1d       	adc	r27, r1
    1d50:	63 9f       	mul	r22, r19
    1d52:	aa 27       	eor	r26, r26
    1d54:	f0 0d       	add	r31, r0
    1d56:	b1 1d       	adc	r27, r1
    1d58:	aa 1f       	adc	r26, r26
    1d5a:	64 9f       	mul	r22, r20
    1d5c:	66 27       	eor	r22, r22
    1d5e:	b0 0d       	add	r27, r0
    1d60:	a1 1d       	adc	r26, r1
    1d62:	66 1f       	adc	r22, r22
    1d64:	82 9f       	mul	r24, r18
    1d66:	22 27       	eor	r18, r18
    1d68:	b0 0d       	add	r27, r0
    1d6a:	a1 1d       	adc	r26, r1
    1d6c:	62 1f       	adc	r22, r18
    1d6e:	73 9f       	mul	r23, r19
    1d70:	b0 0d       	add	r27, r0
    1d72:	a1 1d       	adc	r26, r1
    1d74:	62 1f       	adc	r22, r18
    1d76:	83 9f       	mul	r24, r19
    1d78:	a0 0d       	add	r26, r0
    1d7a:	61 1d       	adc	r22, r1
    1d7c:	22 1f       	adc	r18, r18
    1d7e:	74 9f       	mul	r23, r20
    1d80:	33 27       	eor	r19, r19
    1d82:	a0 0d       	add	r26, r0
    1d84:	61 1d       	adc	r22, r1
    1d86:	23 1f       	adc	r18, r19
    1d88:	84 9f       	mul	r24, r20
    1d8a:	60 0d       	add	r22, r0
    1d8c:	21 1d       	adc	r18, r1
    1d8e:	82 2f       	mov	r24, r18
    1d90:	76 2f       	mov	r23, r22
    1d92:	6a 2f       	mov	r22, r26
    1d94:	11 24       	eor	r1, r1
    1d96:	9f 57       	subi	r25, 0x7F	; 127
    1d98:	50 40       	sbci	r21, 0x00	; 0
    1d9a:	8a f0       	brmi	.+34     	; 0x1dbe <__mulsf3_pse+0x84>
    1d9c:	e1 f0       	breq	.+56     	; 0x1dd6 <__mulsf3_pse+0x9c>
    1d9e:	88 23       	and	r24, r24
    1da0:	4a f0       	brmi	.+18     	; 0x1db4 <__mulsf3_pse+0x7a>
    1da2:	ee 0f       	add	r30, r30
    1da4:	ff 1f       	adc	r31, r31
    1da6:	bb 1f       	adc	r27, r27
    1da8:	66 1f       	adc	r22, r22
    1daa:	77 1f       	adc	r23, r23
    1dac:	88 1f       	adc	r24, r24
    1dae:	91 50       	subi	r25, 0x01	; 1
    1db0:	50 40       	sbci	r21, 0x00	; 0
    1db2:	a9 f7       	brne	.-22     	; 0x1d9e <__mulsf3_pse+0x64>
    1db4:	9e 3f       	cpi	r25, 0xFE	; 254
    1db6:	51 05       	cpc	r21, r1
    1db8:	70 f0       	brcs	.+28     	; 0x1dd6 <__mulsf3_pse+0x9c>
    1dba:	5c cf       	rjmp	.-328    	; 0x1c74 <__fp_inf>
    1dbc:	a6 cf       	rjmp	.-180    	; 0x1d0a <__fp_szero>
    1dbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc0:	ec f3       	brlt	.-6      	; 0x1dbc <__mulsf3_pse+0x82>
    1dc2:	98 3e       	cpi	r25, 0xE8	; 232
    1dc4:	dc f3       	brlt	.-10     	; 0x1dbc <__mulsf3_pse+0x82>
    1dc6:	86 95       	lsr	r24
    1dc8:	77 95       	ror	r23
    1dca:	67 95       	ror	r22
    1dcc:	b7 95       	ror	r27
    1dce:	f7 95       	ror	r31
    1dd0:	e7 95       	ror	r30
    1dd2:	9f 5f       	subi	r25, 0xFF	; 255
    1dd4:	c1 f7       	brne	.-16     	; 0x1dc6 <__mulsf3_pse+0x8c>
    1dd6:	fe 2b       	or	r31, r30
    1dd8:	88 0f       	add	r24, r24
    1dda:	91 1d       	adc	r25, r1
    1ddc:	96 95       	lsr	r25
    1dde:	87 95       	ror	r24
    1de0:	97 f9       	bld	r25, 7
    1de2:	08 95       	ret

00001de4 <__divmodhi4>:
    1de4:	97 fb       	bst	r25, 7
    1de6:	07 2e       	mov	r0, r23
    1de8:	16 f4       	brtc	.+4      	; 0x1dee <__divmodhi4+0xa>
    1dea:	00 94       	com	r0
    1dec:	06 d0       	rcall	.+12     	; 0x1dfa <__divmodhi4_neg1>
    1dee:	77 fd       	sbrc	r23, 7
    1df0:	08 d0       	rcall	.+16     	; 0x1e02 <__divmodhi4_neg2>
    1df2:	0b d0       	rcall	.+22     	; 0x1e0a <__udivmodhi4>
    1df4:	07 fc       	sbrc	r0, 7
    1df6:	05 d0       	rcall	.+10     	; 0x1e02 <__divmodhi4_neg2>
    1df8:	3e f4       	brtc	.+14     	; 0x1e08 <__divmodhi4_exit>

00001dfa <__divmodhi4_neg1>:
    1dfa:	90 95       	com	r25
    1dfc:	81 95       	neg	r24
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1e00:	08 95       	ret

00001e02 <__divmodhi4_neg2>:
    1e02:	70 95       	com	r23
    1e04:	61 95       	neg	r22
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255

00001e08 <__divmodhi4_exit>:
    1e08:	08 95       	ret

00001e0a <__udivmodhi4>:
    1e0a:	aa 1b       	sub	r26, r26
    1e0c:	bb 1b       	sub	r27, r27
    1e0e:	51 e1       	ldi	r21, 0x11	; 17
    1e10:	07 c0       	rjmp	.+14     	; 0x1e20 <__udivmodhi4_ep>

00001e12 <__udivmodhi4_loop>:
    1e12:	aa 1f       	adc	r26, r26
    1e14:	bb 1f       	adc	r27, r27
    1e16:	a6 17       	cp	r26, r22
    1e18:	b7 07       	cpc	r27, r23
    1e1a:	10 f0       	brcs	.+4      	; 0x1e20 <__udivmodhi4_ep>
    1e1c:	a6 1b       	sub	r26, r22
    1e1e:	b7 0b       	sbc	r27, r23

00001e20 <__udivmodhi4_ep>:
    1e20:	88 1f       	adc	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	5a 95       	dec	r21
    1e26:	a9 f7       	brne	.-22     	; 0x1e12 <__udivmodhi4_loop>
    1e28:	80 95       	com	r24
    1e2a:	90 95       	com	r25
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	08 95       	ret

00001e32 <_exit>:
    1e32:	f8 94       	cli

00001e34 <__stop_program>:
    1e34:	ff cf       	rjmp	.-2      	; 0x1e34 <__stop_program>
