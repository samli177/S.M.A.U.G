
sensormodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000102e  00800100  00001dec  00001e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  0080112e  0080112e  00002eae  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  00002eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000932  00000000  00000000  000052f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005c2a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d0  00000000  00000000  00005c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000290e  00000000  00000000  00005f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b6d  00000000  00000000  00008837  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001eba  00000000  00000000  000093a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008cc  00000000  00000000  0000b260  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008e4  00000000  00000000  0000bb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002047  00000000  00000000  0000c410  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000318  00000000  00000000  0000e457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_4>
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c2       	rjmp	.+1162   	; 0x4c0 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c5       	rjmp	.+3058   	; 0xc54 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__vector_26>
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4a c2       	rjmp	.+1172   	; 0x516 <__vector_32>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e1       	ldi	r17, 0x11	; 17
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ee       	ldi	r30, 0xEC	; 236
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 32       	cpi	r26, 0x2E	; 46
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e1       	ldi	r18, 0x13	; 19
      b4:	ae e2       	ldi	r26, 0x2E	; 46
      b6:	b1 e1       	ldi	r27, 0x11	; 17
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 34       	cpi	r26, 0x4C	; 76
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	d2 d1       	rcall	.+932    	; 0x468 <main>
      c4:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
      ca:	bc 01       	movw	r22, r24
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__floatunsisf>
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	4a e7       	ldi	r20, 0x7A	; 122
      da:	51 e4       	ldi	r21, 0x41	; 65
      dc:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
      e0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixunssfsi>
	OCR1A = delay;
      e4:	70 93 89 00 	sts	0x0089, r23
      e8:	60 93 88 00 	sts	0x0088, r22
      ec:	08 95       	ret

000000ee <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
      ee:	bc 01       	movw	r22, r24
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__floatunsisf>
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4a e7       	ldi	r20, 0x7A	; 122
      fe:	51 e4       	ldi	r21, 0x41	; 65
     100:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     104:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixunssfsi>
	OCR3A = delay;
     108:	70 93 99 00 	sts	0x0099, r23
     10c:	60 93 98 00 	sts	0x0098, r22
     110:	08 95       	ret

00000112 <init_counters>:
// OBS: fick byta timer 2 mot timer 3 så kommentarerna nedan stämmer inte riktigt...
//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     112:	e1 e8       	ldi	r30, 0x81	; 129
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	85 60       	ori	r24, 0x05	; 5
     11a:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     11c:	e1 e9       	ldi	r30, 0x91	; 145
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	85 60       	ori	r24, 0x05	; 5
     124:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     126:	88 ee       	ldi	r24, 0xE8	; 232
     128:	93 e0       	ldi	r25, 0x03	; 3
     12a:	cf df       	rcall	.-98     	; 0xca <set_counter_1>
	set_counter_2(1000);
     12c:	88 ee       	ldi	r24, 0xE8	; 232
     12e:	93 e0       	ldi	r25, 0x03	; 3
     130:	de df       	rcall	.-68     	; 0xee <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     132:	ef e6       	ldi	r30, 0x6F	; 111
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	82 60       	ori	r24, 0x02	; 2
     13a:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     13c:	e1 e7       	ldi	r30, 0x71	; 113
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	82 60       	ori	r24, 0x02	; 2
     144:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     146:	10 92 85 00 	sts	0x0085, r1
     14a:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     14e:	10 92 95 00 	sts	0x0095, r1
     152:	10 92 94 00 	sts	0x0094, r1
     156:	08 95       	ret

00000158 <toggle_enable>:
	toggle_enable();
}

void toggle_enable()
{
	PORTD |= (1<<PORTD6);
     158:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	8f e3       	ldi	r24, 0x3F	; 63
     15c:	9c e9       	ldi	r25, 0x9C	; 156
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <toggle_enable+0x6>
     162:	00 c0       	rjmp	.+0      	; 0x164 <toggle_enable+0xc>
     164:	00 00       	nop
	_delay_ms(10);
	PORTD &= !(1<<PORTD6);
     166:	8b b1       	in	r24, 0x0b	; 11
     168:	1b b8       	out	0x0b, r1	; 11
     16a:	08 95       	ret

0000016c <display_init>:
static void print_digit(int digit);
static uint8_t display_read_adress();

void display_init()
{
	DDRB = 255;
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b11100000;
     170:	8a b1       	in	r24, 0x0a	; 10
     172:	80 6e       	ori	r24, 0xE0	; 224
     174:	8a b9       	out	0x0a, r24	; 10
	
	//TODO: fix this....
	PORTD &= !(1<<PORTD5) | !(1<<PORTD7); //Instruction mode, Write mode
     176:	8b b1       	in	r24, 0x0b	; 11
     178:	1b b8       	out	0x0b, r1	; 11
     17a:	2f e7       	ldi	r18, 0x7F	; 127
     17c:	83 e8       	ldi	r24, 0x83	; 131
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	21 50       	subi	r18, 0x01	; 1
     182:	80 40       	sbci	r24, 0x00	; 0
     184:	90 40       	sbci	r25, 0x00	; 0
     186:	e1 f7       	brne	.-8      	; 0x180 <display_init+0x14>
     188:	00 c0       	rjmp	.+0      	; 0x18a <display_init+0x1e>
     18a:	00 00       	nop
	_delay_ms(31);
	PORTB = 0b00111000; //Function set
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     190:	e3 df       	rcall	.-58     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     192:	25 ed       	ldi	r18, 0xD5	; 213
     194:	2a 95       	dec	r18
     196:	f1 f7       	brne	.-4      	; 0x194 <display_init+0x28>
     198:	00 00       	nop
	_delay_us(40);
	PORTB = 0b00001111; //Display control
     19a:	8f e0       	ldi	r24, 0x0F	; 15
     19c:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     19e:	dc df       	rcall	.-72     	; 0x158 <toggle_enable>
     1a0:	85 ed       	ldi	r24, 0xD5	; 213
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <display_init+0x36>
     1a6:	00 00       	nop
	_delay_us(40);
	PORTB = 0b00000001; //Clear Display
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1ac:	d5 df       	rcall	.-86     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ae:	8f e3       	ldi	r24, 0x3F	; 63
     1b0:	9f e1       	ldi	r25, 0x1F	; 31
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <display_init+0x46>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <display_init+0x4c>
     1b8:	00 00       	nop
	_delay_ms(2);
	PORTB = 0b00000110; //Set entry mode
     1ba:	86 e0       	ldi	r24, 0x06	; 6
     1bc:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1be:	cc cf       	rjmp	.-104    	; 0x158 <toggle_enable>

000001c0 <display_clear>:
	}
}

void display_clear()
{
	PORTB = 1<<PORTB0; //Clear Display
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1c4:	c9 df       	rcall	.-110    	; 0x158 <toggle_enable>
	toggle_enable();
     1c6:	c8 cf       	rjmp	.-112    	; 0x158 <toggle_enable>

000001c8 <display_set_pos>:
}

void display_set_pos(int line, int pos)
{
	PORTD  &= !(1<<PORTD5); //RS = 0 (Instruction mode)
     1c8:	2b b1       	in	r18, 0x0b	; 11
     1ca:	1b b8       	out	0x0b, r1	; 11
	int data;
	switch(line)
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	91 05       	cpc	r25, r1
     1d0:	41 f0       	breq	.+16     	; 0x1e2 <display_set_pos+0x1a>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	91 05       	cpc	r25, r1
     1d6:	41 f0       	breq	.+16     	; 0x1e8 <display_set_pos+0x20>
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	49 f0       	breq	.+18     	; 0x1ee <display_set_pos+0x26>
	{
		case 0:
		data = 0b10000000;
     1dc:	80 e8       	ldi	r24, 0x80	; 128
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <display_set_pos+0x2a>
		break;
		case 1:
		data = 0b11000000;
		break;
		case 2:
		data = 0b10010000;
     1e2:	80 e9       	ldi	r24, 0x90	; 144
     1e4:	90 e0       	ldi	r25, 0x00	; 0
		break;
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <display_set_pos+0x2a>
		case 3:
		data = 0b11010000;
     1e8:	80 ed       	ldi	r24, 0xD0	; 208
     1ea:	90 e0       	ldi	r25, 0x00	; 0
		break;
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <display_set_pos+0x2a>
	{
		case 0:
		data = 0b10000000;
		break;
		case 1:
		data = 0b11000000;
     1ee:	80 ec       	ldi	r24, 0xC0	; 192
     1f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		data = 0b10000000;
		break;
	}
	data += pos;
     1f2:	68 0f       	add	r22, r24
     1f4:	79 1f       	adc	r23, r25
	
	PORTB = data; //Set adress
     1f6:	65 b9       	out	0x05, r22	; 5
	toggle_enable();
     1f8:	af cf       	rjmp	.-162    	; 0x158 <toggle_enable>

000001fa <display_char>:
}

void display_char(char c)
{
	//while(display_busy()); //Wait for display
	PORTD |= (1<<PORTD5); //Data mode
     1fa:	5d 9a       	sbi	0x0b, 5	; 11
	PORTB = c;
     1fc:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1fe:	ac df       	rcall	.-168    	; 0x158 <toggle_enable>
	toggle_enable();
}

uint8_t display_read_adress()
{
	PORTB = 0;
     200:	15 b8       	out	0x05, r1	; 5
	DDRB = 0;
     202:	14 b8       	out	0x04, r1	; 4
	PORTD &= ~(1<<PORTD5);
     204:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= 1<<PORTD7;
     206:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     208:	85 e3       	ldi	r24, 0x35	; 53
     20a:	8a 95       	dec	r24
     20c:	f1 f7       	brne	.-4      	; 0x20a <display_char+0x10>
     20e:	00 00       	nop
	_delay_us(10);
	toggle_enable();
     210:	a3 df       	rcall	.-186    	; 0x158 <toggle_enable>
	
	uint8_t adress = PINB;
     212:	83 b1       	in	r24, 0x03	; 3
	DDRB = 0xFF;
     214:	9f ef       	ldi	r25, 0xFF	; 255
     216:	94 b9       	out	0x04, r25	; 4
	PORTD |= 1<<PORTD5;
     218:	5d 9a       	sbi	0x0b, 5	; 11
	//while(display_busy()); //Wait for display
	PORTD |= (1<<PORTD5); //Data mode
	PORTB = c;
	toggle_enable();
	
	switch (display_read_adress())
     21a:	80 32       	cpi	r24, 0x20	; 32
     21c:	99 f0       	breq	.+38     	; 0x244 <display_char+0x4a>
     21e:	18 f4       	brcc	.+6      	; 0x226 <display_char+0x2c>
     220:	80 31       	cpi	r24, 0x10	; 16
     222:	d1 f4       	brne	.+52     	; 0x258 <display_char+0x5e>
     224:	05 c0       	rjmp	.+10     	; 0x230 <display_char+0x36>
     226:	80 35       	cpi	r24, 0x50	; 80
     228:	41 f0       	breq	.+16     	; 0x23a <display_char+0x40>
     22a:	80 36       	cpi	r24, 0x60	; 96
     22c:	a9 f4       	brne	.+42     	; 0x258 <display_char+0x5e>
     22e:	0f c0       	rjmp	.+30     	; 0x24e <display_char+0x54>
	{
		case 16:
		display_set_pos(1,0);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
		break;
     238:	c7 cf       	rjmp	.-114    	; 0x1c8 <display_set_pos>
		case 80:
		display_set_pos(2,0);
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	90 e0       	ldi	r25, 0x00	; 0
		break;
     242:	c2 cf       	rjmp	.-124    	; 0x1c8 <display_set_pos>
		case 32:
		display_set_pos(3,0);
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	83 e0       	ldi	r24, 0x03	; 3
     24a:	90 e0       	ldi	r25, 0x00	; 0
		break;
     24c:	bd cf       	rjmp	.-134    	; 0x1c8 <display_set_pos>
		case 96:
		display_set_pos(0,0);
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	b8 cf       	rjmp	.-144    	; 0x1c8 <display_set_pos>
     258:	08 95       	ret

0000025a <print_digit>:
	}
}

void print_digit(int digit)
{
	switch(digit)
     25a:	84 30       	cpi	r24, 0x04	; 4
     25c:	91 05       	cpc	r25, r1
     25e:	31 f1       	breq	.+76     	; 0x2ac <print_digit+0x52>
     260:	6c f4       	brge	.+26     	; 0x27c <print_digit+0x22>
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	91 05       	cpc	r25, r1
     266:	e1 f0       	breq	.+56     	; 0x2a0 <print_digit+0x46>
     268:	1c f4       	brge	.+6      	; 0x270 <print_digit+0x16>
     26a:	89 2b       	or	r24, r25
     26c:	b9 f0       	breq	.+46     	; 0x29c <print_digit+0x42>
     26e:	2a c0       	rjmp	.+84     	; 0x2c4 <print_digit+0x6a>
     270:	82 30       	cpi	r24, 0x02	; 2
     272:	91 05       	cpc	r25, r1
     274:	b9 f0       	breq	.+46     	; 0x2a4 <print_digit+0x4a>
     276:	03 97       	sbiw	r24, 0x03	; 3
     278:	29 f5       	brne	.+74     	; 0x2c4 <print_digit+0x6a>
     27a:	16 c0       	rjmp	.+44     	; 0x2a8 <print_digit+0x4e>
     27c:	87 30       	cpi	r24, 0x07	; 7
     27e:	91 05       	cpc	r25, r1
     280:	d9 f0       	breq	.+54     	; 0x2b8 <print_digit+0x5e>
     282:	34 f4       	brge	.+12     	; 0x290 <print_digit+0x36>
     284:	85 30       	cpi	r24, 0x05	; 5
     286:	91 05       	cpc	r25, r1
     288:	99 f0       	breq	.+38     	; 0x2b0 <print_digit+0x56>
     28a:	06 97       	sbiw	r24, 0x06	; 6
     28c:	d9 f4       	brne	.+54     	; 0x2c4 <print_digit+0x6a>
     28e:	12 c0       	rjmp	.+36     	; 0x2b4 <print_digit+0x5a>
     290:	88 30       	cpi	r24, 0x08	; 8
     292:	91 05       	cpc	r25, r1
     294:	99 f0       	breq	.+38     	; 0x2bc <print_digit+0x62>
     296:	09 97       	sbiw	r24, 0x09	; 9
     298:	a9 f4       	brne	.+42     	; 0x2c4 <print_digit+0x6a>
     29a:	12 c0       	rjmp	.+36     	; 0x2c0 <print_digit+0x66>
	{
		case 0:
			display_char('0');
     29c:	80 e3       	ldi	r24, 0x30	; 48
			break;
     29e:	ad cf       	rjmp	.-166    	; 0x1fa <display_char>
		case 1:
			display_char('1');
     2a0:	81 e3       	ldi	r24, 0x31	; 49
			break;
     2a2:	ab cf       	rjmp	.-170    	; 0x1fa <display_char>
		case 2:
			display_char('2');
     2a4:	82 e3       	ldi	r24, 0x32	; 50
			break;
     2a6:	a9 cf       	rjmp	.-174    	; 0x1fa <display_char>
		case 3:
			display_char('3');
     2a8:	83 e3       	ldi	r24, 0x33	; 51
			break;
     2aa:	a7 cf       	rjmp	.-178    	; 0x1fa <display_char>
		case 4:
			display_char('4');
     2ac:	84 e3       	ldi	r24, 0x34	; 52
			break;
     2ae:	a5 cf       	rjmp	.-182    	; 0x1fa <display_char>
		case 5:
			display_char('5');
     2b0:	85 e3       	ldi	r24, 0x35	; 53
			break;
     2b2:	a3 cf       	rjmp	.-186    	; 0x1fa <display_char>
		case 6:
			display_char('6');
     2b4:	86 e3       	ldi	r24, 0x36	; 54
			break;
     2b6:	a1 cf       	rjmp	.-190    	; 0x1fa <display_char>
		case 7:
			display_char('7');
     2b8:	87 e3       	ldi	r24, 0x37	; 55
			break;
     2ba:	9f cf       	rjmp	.-194    	; 0x1fa <display_char>
		case 8:
			display_char('8');
     2bc:	88 e3       	ldi	r24, 0x38	; 56
			break;
     2be:	9d cf       	rjmp	.-198    	; 0x1fa <display_char>
		case 9:
			display_char('9');
     2c0:	89 e3       	ldi	r24, 0x39	; 57
			break;
     2c2:	9b cf       	rjmp	.-202    	; 0x1fa <display_char>
		default:
			display_char('0');
     2c4:	80 e3       	ldi	r24, 0x30	; 48
     2c6:	99 cf       	rjmp	.-206    	; 0x1fa <display_char>

000002c8 <print_int>:
		}
	}
}

void print_int(int number)
{
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	9c 01       	movw	r18, r24
	if(number < 10)
     2ce:	8a 30       	cpi	r24, 0x0A	; 10
     2d0:	91 05       	cpc	r25, r1
     2d2:	24 f4       	brge	.+8      	; 0x2dc <print_int+0x14>
	{
		if(number != 0)
     2d4:	00 97       	sbiw	r24, 0x00	; 0
     2d6:	91 f0       	breq	.+36     	; 0x2fc <print_int+0x34>
		{
			print_digit(number);
     2d8:	c0 df       	rcall	.-128    	; 0x25a <print_digit>
     2da:	10 c0       	rjmp	.+32     	; 0x2fc <print_int+0x34>
		}
	} else
	{
		int mod = number % 10;
     2dc:	ea e0       	ldi	r30, 0x0A	; 10
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	bf 01       	movw	r22, r30
     2e2:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__divmodhi4>
     2e6:	ec 01       	movw	r28, r24
		int left = number - mod;
     2e8:	c9 01       	movw	r24, r18
     2ea:	8c 1b       	sub	r24, r28
     2ec:	9d 0b       	sbc	r25, r29
		print_int(left / 10);
     2ee:	bf 01       	movw	r22, r30
     2f0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__divmodhi4>
     2f4:	cb 01       	movw	r24, r22
     2f6:	e8 df       	rcall	.-48     	; 0x2c8 <print_int>
		print_digit(mod);
     2f8:	ce 01       	movw	r24, r28
     2fa:	af df       	rcall	.-162    	; 0x25a <print_digit>
	}
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <display_value>:
		display_char(text[i]);
	}
}

void display_value(float value)
{
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	6b 01       	movw	r12, r22
     310:	7c 01       	movw	r14, r24
	if(value == (int) value)
     312:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__fixsfsi>
     316:	eb 01       	movw	r28, r22
     318:	88 27       	eor	r24, r24
     31a:	77 fd       	sbrc	r23, 7
     31c:	80 95       	com	r24
     31e:	98 2f       	mov	r25, r24
     320:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__floatsisf>
     324:	a7 01       	movw	r20, r14
     326:	96 01       	movw	r18, r12
     328:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__cmpsf2>
     32c:	81 11       	cpse	r24, r1
     32e:	0f c0       	rjmp	.+30     	; 0x34e <display_value+0x4c>
	{
		// Integer
		if(value < 10)
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e2       	ldi	r20, 0x20	; 32
     336:	51 e4       	ldi	r21, 0x41	; 65
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__cmpsf2>
     340:	88 23       	and	r24, r24
     342:	1c f4       	brge	.+6      	; 0x34a <display_value+0x48>
		{
			print_digit(value);
     344:	ce 01       	movw	r24, r28
     346:	89 df       	rcall	.-238    	; 0x25a <print_digit>
     348:	02 c0       	rjmp	.+4      	; 0x34e <display_value+0x4c>
		} else 
		{
			print_int(value);
     34a:	ce 01       	movw	r24, r28
     34c:	bd df       	rcall	.-134    	; 0x2c8 <print_int>
		}
	}
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	df 90       	pop	r13
     358:	cf 90       	pop	r12
     35a:	08 95       	ret

0000035c <display_text_fixed_length>:
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
{
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
	for(int i = 0; i < length; ++i)
     364:	16 16       	cp	r1, r22
     366:	17 06       	cpc	r1, r23
     368:	54 f4       	brge	.+20     	; 0x37e <display_text_fixed_length+0x22>
     36a:	c8 2f       	mov	r28, r24
     36c:	d9 2f       	mov	r29, r25
	{
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
     36e:	8e 01       	movw	r16, r28
     370:	06 0f       	add	r16, r22
     372:	17 1f       	adc	r17, r23
{
	for(int i = 0; i < length; ++i)
	{
		display_char(text[i]);
     374:	89 91       	ld	r24, Y+
     376:	41 df       	rcall	.-382    	; 0x1fa <display_char>
	}
}

void display_text_fixed_length(char text[], int length)
{
	for(int i = 0; i < length; ++i)
     378:	c0 17       	cp	r28, r16
     37a:	d1 07       	cpc	r29, r17
     37c:	d9 f7       	brne	.-10     	; 0x374 <display_text_fixed_length+0x18>
	{
		display_char(text[i]);
	}
}
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	08 95       	ret

00000388 <display_text>:
		return 0;
	}
}

void display_text(char text[])
{
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	e8 2e       	mov	r14, r24
     396:	f9 2e       	mov	r15, r25
     398:	08 2f       	mov	r16, r24
     39a:	19 2f       	mov	r17, r25
	for(int i = 0; i < strlen(text); ++i)
     39c:	c0 e0       	ldi	r28, 0x00	; 0
     39e:	d0 e0       	ldi	r29, 0x00	; 0
     3a0:	05 c0       	rjmp	.+10     	; 0x3ac <display_text+0x24>
	{
		display_char(text[i]);
     3a2:	f8 01       	movw	r30, r16
     3a4:	81 91       	ld	r24, Z+
     3a6:	8f 01       	movw	r16, r30
     3a8:	28 df       	rcall	.-432    	; 0x1fa <display_char>
	}
}

void display_text(char text[])
{
	for(int i = 0; i < strlen(text); ++i)
     3aa:	21 96       	adiw	r28, 0x01	; 1
     3ac:	ee 2d       	mov	r30, r14
     3ae:	ff 2d       	mov	r31, r15
     3b0:	df 01       	movw	r26, r30
     3b2:	0d 90       	ld	r0, X+
     3b4:	00 20       	and	r0, r0
     3b6:	e9 f7       	brne	.-6      	; 0x3b2 <display_text+0x2a>
     3b8:	11 97       	sbiw	r26, 0x01	; 1
     3ba:	ae 1b       	sub	r26, r30
     3bc:	bf 0b       	sbc	r27, r31
     3be:	ca 17       	cp	r28, r26
     3c0:	db 07       	cpc	r29, r27
     3c2:	78 f3       	brcs	.-34     	; 0x3a2 <display_text+0x1a>
	{
		display_char(text[i]);
	}
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	08 95       	ret

000003d2 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     3d2:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     3d4:	90 81       	ld	r25, Z
     3d6:	91 50       	subi	r25, 0x01	; 1
     3d8:	84 81       	ldd	r24, Z+4	; 0x04
     3da:	22 81       	ldd	r18, Z+2	; 0x02
     3dc:	82 1b       	sub	r24, r18
};
     3de:	89 23       	and	r24, r25
     3e0:	08 95       	ret

000003e2 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
     3ea:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     3ec:	f2 df       	rcall	.-28     	; 0x3d2 <FifoDataLength>
     3ee:	28 81       	ld	r18, Y
     3f0:	39 81       	ldd	r19, Y+1	; 0x01
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	31 09       	sbc	r19, r1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	82 17       	cp	r24, r18
     3fa:	93 07       	cpc	r25, r19
     3fc:	69 f0       	breq	.+26     	; 0x418 <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     3fe:	8c 81       	ldd	r24, Y+4	; 0x04
     400:	9d 81       	ldd	r25, Y+5	; 0x05
     402:	fe 01       	movw	r30, r28
     404:	e8 0f       	add	r30, r24
     406:	f9 1f       	adc	r31, r25
     408:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	28 23       	and	r18, r24
     40e:	39 23       	and	r19, r25
     410:	3d 83       	std	Y+5, r19	; 0x05
     412:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	01 c0       	rjmp	.+2      	; 0x41a <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	08 95       	ret

00000422 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     42e:	d1 df       	rcall	.-94     	; 0x3d2 <FifoDataLength>
     430:	88 23       	and	r24, r24
     432:	a1 f0       	breq	.+40     	; 0x45c <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     434:	ea 81       	ldd	r30, Y+2	; 0x02
     436:	fb 81       	ldd	r31, Y+3	; 0x03
     438:	ec 0f       	add	r30, r28
     43a:	fd 1f       	adc	r31, r29
     43c:	86 81       	ldd	r24, Z+6	; 0x06
     43e:	f8 01       	movw	r30, r16
     440:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     442:	28 81       	ld	r18, Y
     444:	39 81       	ldd	r19, Y+1	; 0x01
     446:	21 50       	subi	r18, 0x01	; 1
     448:	31 09       	sbc	r19, r1
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	9b 81       	ldd	r25, Y+3	; 0x03
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	82 23       	and	r24, r18
     452:	93 23       	and	r25, r19
     454:	9b 83       	std	Y+3, r25	; 0x03
     456:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	01 c0       	rjmp	.+2      	; 0x45e <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <main>:

uint8_t displayFlag = 0;

int main(void)
{	
	display_init();
     468:	81 de       	rcall	.-766    	; 0x16c <display_init>
	sensors_init();
     46a:	9b d0       	rcall	.+310    	; 0x5a2 <sensors_init>
	
	// init TWI
	TWI_init(S_ADDRESS);
     46c:	80 e4       	ldi	r24, 0x40	; 64
     46e:	cd d7       	rcall	.+3994   	; 0x140a <TWI_init>
	init_counters();
     470:	50 de       	rcall	.-864    	; 0x112 <init_counters>
	
	set_counter_1(100);
     472:	84 e6       	ldi	r24, 0x64	; 100
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	29 de       	rcall	.-942    	; 0xca <set_counter_1>
	set_counter_2(3000);
     478:	88 eb       	ldi	r24, 0xB8	; 184
     47a:	9b e0       	ldi	r25, 0x0B	; 11
     47c:	38 de       	rcall	.-912    	; 0xee <set_counter_2>
	
	// Activate interrupts
	sei();
     47e:	78 94       	sei

	display_text("Hello");
     480:	88 e0       	ldi	r24, 0x08	; 8
     482:	91 e1       	ldi	r25, 0x11	; 17
     484:	81 df       	rcall	.-254    	; 0x388 <display_text>
				set_counter_2(2000);
			} else {
				set_counter_2(3000);
			}
			displayFlag = 0;
			TCNT3 = 0;
     486:	c4 e9       	ldi	r28, 0x94	; 148
     488:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48a:	8f e9       	ldi	r24, 0x9F	; 159
     48c:	9f e0       	ldi	r25, 0x0F	; 15
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <main+0x26>
     492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x2c>
     494:	00 00       	nop
	display_text("Hello");
	
	while(1)
	{	
		_delay_ms(1);
		if(displayFlag)
     496:	80 91 2e 11 	lds	r24, 0x112E
     49a:	88 23       	and	r24, r24
     49c:	b1 f3       	breq	.-20     	; 0x48a <main+0x22>
		{
			if(decode_message_TwiFIFO())
     49e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <decode_message_TwiFIFO>
     4a2:	88 23       	and	r24, r24
     4a4:	29 f0       	breq	.+10     	; 0x4b0 <main+0x48>
			{
				sensors_display_data();
     4a6:	5a d3       	rcall	.+1716   	; 0xb5c <sensors_display_data>
				set_counter_2(2000);
     4a8:	80 ed       	ldi	r24, 0xD0	; 208
     4aa:	97 e0       	ldi	r25, 0x07	; 7
     4ac:	20 de       	rcall	.-960    	; 0xee <set_counter_2>
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <main+0x4e>
			} else {
				set_counter_2(3000);
     4b0:	88 eb       	ldi	r24, 0xB8	; 184
     4b2:	9b e0       	ldi	r25, 0x0B	; 11
     4b4:	1c de       	rcall	.-968    	; 0xee <set_counter_2>
			}
			displayFlag = 0;
     4b6:	10 92 2e 11 	sts	0x112E, r1
			TCNT3 = 0;
     4ba:	19 82       	std	Y+1, r1	; 0x01
     4bc:	18 82       	st	Y, r1
     4be:	e5 cf       	rjmp	.-54     	; 0x48a <main+0x22>

000004c0 <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	0b b6       	in	r0, 0x3b	; 59
     4cc:	0f 92       	push	r0
     4ce:	2f 93       	push	r18
     4d0:	3f 93       	push	r19
     4d2:	4f 93       	push	r20
     4d4:	5f 93       	push	r21
     4d6:	6f 93       	push	r22
     4d8:	7f 93       	push	r23
     4da:	8f 93       	push	r24
     4dc:	9f 93       	push	r25
     4de:	af 93       	push	r26
     4e0:	bf 93       	push	r27
     4e2:	ef 93       	push	r30
     4e4:	ff 93       	push	r31
	sensors_start_sample();
     4e6:	36 d3       	rcall	.+1644   	; 0xb54 <sensors_start_sample>
	TCNT1 = 0;
     4e8:	10 92 85 00 	sts	0x0085, r1
     4ec:	10 92 84 00 	sts	0x0084, r1
}
     4f0:	ff 91       	pop	r31
     4f2:	ef 91       	pop	r30
     4f4:	bf 91       	pop	r27
     4f6:	af 91       	pop	r26
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	7f 91       	pop	r23
     4fe:	6f 91       	pop	r22
     500:	5f 91       	pop	r21
     502:	4f 91       	pop	r20
     504:	3f 91       	pop	r19
     506:	2f 91       	pop	r18
     508:	0f 90       	pop	r0
     50a:	0b be       	out	0x3b, r0	; 59
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	8f 93       	push	r24
	displayFlag = 1;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 93 2e 11 	sts	0x112E, r24
	TCNT3 = 0;
     528:	10 92 95 00 	sts	0x0095, r1
     52c:	10 92 94 00 	sts	0x0094, r1
}
     530:	8f 91       	pop	r24
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <adc_start>:
	return sensorDataFlag;
}

void sensors_reset_flag()
{
	sensorDataFlag = false;
     53c:	ea e7       	ldi	r30, 0x7A	; 122
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	80 64       	ori	r24, 0x40	; 64
     544:	80 83       	st	Z, r24
     546:	08 95       	ret

00000548 <select_sensor>:
     548:	80 93 0f 12 	sts	0x120F, r24
     54c:	22 b1       	in	r18, 0x02	; 2
     54e:	21 7e       	andi	r18, 0xE1	; 225
     550:	22 b9       	out	0x02, r18	; 2
     552:	83 30       	cpi	r24, 0x03	; 3
     554:	91 05       	cpc	r25, r1
     556:	b9 f0       	breq	.+46     	; 0x586 <select_sensor+0x3e>
     558:	3c f4       	brge	.+14     	; 0x568 <select_sensor+0x20>
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	91 05       	cpc	r25, r1
     55e:	69 f0       	breq	.+26     	; 0x57a <select_sensor+0x32>
     560:	74 f4       	brge	.+28     	; 0x57e <select_sensor+0x36>
     562:	89 2b       	or	r24, r25
     564:	41 f0       	breq	.+16     	; 0x576 <select_sensor+0x2e>
     566:	08 95       	ret
     568:	85 30       	cpi	r24, 0x05	; 5
     56a:	91 05       	cpc	r25, r1
     56c:	91 f0       	breq	.+36     	; 0x592 <select_sensor+0x4a>
     56e:	6c f0       	brlt	.+26     	; 0x58a <select_sensor+0x42>
     570:	06 97       	sbiw	r24, 0x06	; 6
     572:	b1 f4       	brne	.+44     	; 0x5a0 <select_sensor+0x58>
     574:	12 c0       	rjmp	.+36     	; 0x59a <select_sensor+0x52>
     576:	11 9a       	sbi	0x02, 1	; 2
     578:	08 95       	ret
     57a:	12 9a       	sbi	0x02, 2	; 2
     57c:	08 95       	ret
     57e:	82 b1       	in	r24, 0x02	; 2
     580:	86 60       	ori	r24, 0x06	; 6
     582:	82 b9       	out	0x02, r24	; 2
     584:	08 95       	ret
     586:	13 9a       	sbi	0x02, 3	; 2
     588:	08 95       	ret
     58a:	82 b1       	in	r24, 0x02	; 2
     58c:	8a 60       	ori	r24, 0x0A	; 10
     58e:	82 b9       	out	0x02, r24	; 2
     590:	08 95       	ret
     592:	82 b1       	in	r24, 0x02	; 2
     594:	8c 60       	ori	r24, 0x0C	; 12
     596:	82 b9       	out	0x02, r24	; 2
     598:	08 95       	ret
     59a:	82 b1       	in	r24, 0x02	; 2
     59c:	8e 60       	ori	r24, 0x0E	; 14
     59e:	82 b9       	out	0x02, r24	; 2
     5a0:	08 95       	ret

000005a2 <sensors_init>:
     5a2:	4f 92       	push	r4
     5a4:	5f 92       	push	r5
     5a6:	6f 92       	push	r6
     5a8:	7f 92       	push	r7
     5aa:	8f 92       	push	r8
     5ac:	9f 92       	push	r9
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	8f e8       	ldi	r24, 0x8F	; 143
     5c0:	80 93 7a 00 	sts	0x007A, r24
     5c4:	80 e6       	ldi	r24, 0x60	; 96
     5c6:	80 93 7c 00 	sts	0x007C, r24
     5ca:	8a e9       	ldi	r24, 0x9A	; 154
     5cc:	99 e9       	ldi	r25, 0x99	; 153
     5ce:	a9 e4       	ldi	r26, 0x49	; 73
     5d0:	b0 e4       	ldi	r27, 0x40	; 64
     5d2:	80 93 2f 11 	sts	0x112F, r24
     5d6:	90 93 30 11 	sts	0x1130, r25
     5da:	a0 93 31 11 	sts	0x1131, r26
     5de:	b0 93 32 11 	sts	0x1132, r27
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	a0 ec       	ldi	r26, 0xC0	; 192
     5e8:	b0 e4       	ldi	r27, 0x40	; 64
     5ea:	80 93 33 11 	sts	0x1133, r24
     5ee:	90 93 34 11 	sts	0x1134, r25
     5f2:	a0 93 35 11 	sts	0x1135, r26
     5f6:	b0 93 36 11 	sts	0x1136, r27
     5fa:	82 e5       	ldi	r24, 0x52	; 82
     5fc:	98 eb       	ldi	r25, 0xB8	; 184
     5fe:	ae e3       	ldi	r26, 0x3E	; 62
     600:	b0 e4       	ldi	r27, 0x40	; 64
     602:	80 93 37 11 	sts	0x1137, r24
     606:	90 93 38 11 	sts	0x1138, r25
     60a:	a0 93 39 11 	sts	0x1139, r26
     60e:	b0 93 3a 11 	sts	0x113A, r27
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	a0 ee       	ldi	r26, 0xE0	; 224
     618:	b0 e4       	ldi	r27, 0x40	; 64
     61a:	80 93 3b 11 	sts	0x113B, r24
     61e:	90 93 3c 11 	sts	0x113C, r25
     622:	a0 93 3d 11 	sts	0x113D, r26
     626:	b0 93 3e 11 	sts	0x113E, r27
     62a:	00 e0       	ldi	r16, 0x00	; 0
     62c:	10 e0       	ldi	r17, 0x00	; 0
     62e:	20 e3       	ldi	r18, 0x30	; 48
     630:	30 e4       	ldi	r19, 0x40	; 64
     632:	00 93 3f 11 	sts	0x113F, r16
     636:	10 93 40 11 	sts	0x1140, r17
     63a:	20 93 41 11 	sts	0x1141, r18
     63e:	30 93 42 11 	sts	0x1142, r19
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	a0 e0       	ldi	r26, 0x00	; 0
     648:	b1 e4       	ldi	r27, 0x41	; 65
     64a:	80 93 43 11 	sts	0x1143, r24
     64e:	90 93 44 11 	sts	0x1144, r25
     652:	a0 93 45 11 	sts	0x1145, r26
     656:	b0 93 46 11 	sts	0x1146, r27
     65a:	8a e0       	ldi	r24, 0x0A	; 10
     65c:	97 ed       	ldi	r25, 0xD7	; 215
     65e:	a3 e1       	ldi	r26, 0x13	; 19
     660:	b0 e4       	ldi	r27, 0x40	; 64
     662:	80 93 47 11 	sts	0x1147, r24
     666:	90 93 48 11 	sts	0x1148, r25
     66a:	a0 93 49 11 	sts	0x1149, r26
     66e:	b0 93 4a 11 	sts	0x114A, r27
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b1 e4       	ldi	r27, 0x41	; 65
     67a:	80 93 4b 11 	sts	0x114B, r24
     67e:	90 93 4c 11 	sts	0x114C, r25
     682:	a0 93 4d 11 	sts	0x114D, r26
     686:	b0 93 4e 11 	sts	0x114E, r27
     68a:	85 e8       	ldi	r24, 0x85	; 133
     68c:	9b ee       	ldi	r25, 0xEB	; 235
     68e:	a1 ed       	ldi	r26, 0xD1	; 209
     690:	bf e3       	ldi	r27, 0x3F	; 63
     692:	80 93 4f 11 	sts	0x114F, r24
     696:	90 93 50 11 	sts	0x1150, r25
     69a:	a0 93 51 11 	sts	0x1151, r26
     69e:	b0 93 52 11 	sts	0x1152, r27
     6a2:	0f 2e       	mov	r0, r31
     6a4:	41 2c       	mov	r4, r1
     6a6:	51 2c       	mov	r5, r1
     6a8:	f0 e7       	ldi	r31, 0x70	; 112
     6aa:	6f 2e       	mov	r6, r31
     6ac:	f1 e4       	ldi	r31, 0x41	; 65
     6ae:	7f 2e       	mov	r7, r31
     6b0:	f0 2d       	mov	r31, r0
     6b2:	40 92 53 11 	sts	0x1153, r4
     6b6:	50 92 54 11 	sts	0x1154, r5
     6ba:	60 92 55 11 	sts	0x1155, r6
     6be:	70 92 56 11 	sts	0x1156, r7
     6c2:	84 e1       	ldi	r24, 0x14	; 20
     6c4:	9e ea       	ldi	r25, 0xAE	; 174
     6c6:	a7 ea       	ldi	r26, 0xA7	; 167
     6c8:	bf e3       	ldi	r27, 0x3F	; 63
     6ca:	80 93 57 11 	sts	0x1157, r24
     6ce:	90 93 58 11 	sts	0x1158, r25
     6d2:	a0 93 59 11 	sts	0x1159, r26
     6d6:	b0 93 5a 11 	sts	0x115A, r27
     6da:	0f 2e       	mov	r0, r31
     6dc:	81 2c       	mov	r8, r1
     6de:	91 2c       	mov	r9, r1
     6e0:	f0 ea       	ldi	r31, 0xA0	; 160
     6e2:	af 2e       	mov	r10, r31
     6e4:	f1 e4       	ldi	r31, 0x41	; 65
     6e6:	bf 2e       	mov	r11, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	80 92 5b 11 	sts	0x115B, r8
     6ee:	90 92 5c 11 	sts	0x115C, r9
     6f2:	a0 92 5d 11 	sts	0x115D, r10
     6f6:	b0 92 5e 11 	sts	0x115E, r11
     6fa:	81 e7       	ldi	r24, 0x71	; 113
     6fc:	9d e3       	ldi	r25, 0x3D	; 61
     6fe:	aa e8       	ldi	r26, 0x8A	; 138
     700:	bf e3       	ldi	r27, 0x3F	; 63
     702:	80 93 5f 11 	sts	0x115F, r24
     706:	90 93 60 11 	sts	0x1160, r25
     70a:	a0 93 61 11 	sts	0x1161, r26
     70e:	b0 93 62 11 	sts	0x1162, r27
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	a8 ec       	ldi	r26, 0xC8	; 200
     718:	b1 e4       	ldi	r27, 0x41	; 65
     71a:	80 93 63 11 	sts	0x1163, r24
     71e:	90 93 64 11 	sts	0x1164, r25
     722:	a0 93 65 11 	sts	0x1165, r26
     726:	b0 93 66 11 	sts	0x1166, r27
     72a:	8f e1       	ldi	r24, 0x1F	; 31
     72c:	95 e8       	ldi	r25, 0x85	; 133
     72e:	ab e6       	ldi	r26, 0x6B	; 107
     730:	bf e3       	ldi	r27, 0x3F	; 63
     732:	80 93 67 11 	sts	0x1167, r24
     736:	90 93 68 11 	sts	0x1168, r25
     73a:	a0 93 69 11 	sts	0x1169, r26
     73e:	b0 93 6a 11 	sts	0x116A, r27
     742:	0f 2e       	mov	r0, r31
     744:	c1 2c       	mov	r12, r1
     746:	d1 2c       	mov	r13, r1
     748:	f0 ef       	ldi	r31, 0xF0	; 240
     74a:	ef 2e       	mov	r14, r31
     74c:	f1 e4       	ldi	r31, 0x41	; 65
     74e:	ff 2e       	mov	r15, r31
     750:	f0 2d       	mov	r31, r0
     752:	c0 92 6b 11 	sts	0x116B, r12
     756:	d0 92 6c 11 	sts	0x116C, r13
     75a:	e0 92 6d 11 	sts	0x116D, r14
     75e:	f0 92 6e 11 	sts	0x116E, r15
     762:	84 ea       	ldi	r24, 0xA4	; 164
     764:	90 e7       	ldi	r25, 0x70	; 112
     766:	ad e3       	ldi	r26, 0x3D	; 61
     768:	bf e3       	ldi	r27, 0x3F	; 63
     76a:	80 93 6f 11 	sts	0x116F, r24
     76e:	90 93 70 11 	sts	0x1170, r25
     772:	a0 93 71 11 	sts	0x1171, r26
     776:	b0 93 72 11 	sts	0x1172, r27
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 e2       	ldi	r26, 0x20	; 32
     780:	b2 e4       	ldi	r27, 0x42	; 66
     782:	80 93 73 11 	sts	0x1173, r24
     786:	90 93 74 11 	sts	0x1174, r25
     78a:	a0 93 75 11 	sts	0x1175, r26
     78e:	b0 93 76 11 	sts	0x1176, r27
     792:	86 ef       	ldi	r24, 0xF6	; 246
     794:	98 e2       	ldi	r25, 0x28	; 40
     796:	ac e1       	ldi	r26, 0x1C	; 28
     798:	bf e3       	ldi	r27, 0x3F	; 63
     79a:	80 93 77 11 	sts	0x1177, r24
     79e:	90 93 78 11 	sts	0x1178, r25
     7a2:	a0 93 79 11 	sts	0x1179, r26
     7a6:	b0 93 7a 11 	sts	0x117A, r27
     7aa:	00 e0       	ldi	r16, 0x00	; 0
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	28 e4       	ldi	r18, 0x48	; 72
     7b0:	32 e4       	ldi	r19, 0x42	; 66
     7b2:	00 93 7b 11 	sts	0x117B, r16
     7b6:	10 93 7c 11 	sts	0x117C, r17
     7ba:	20 93 7d 11 	sts	0x117D, r18
     7be:	30 93 7e 11 	sts	0x117E, r19
     7c2:	8c e5       	ldi	r24, 0x5C	; 92
     7c4:	9f e8       	ldi	r25, 0x8F	; 143
     7c6:	a2 e0       	ldi	r26, 0x02	; 2
     7c8:	bf e3       	ldi	r27, 0x3F	; 63
     7ca:	80 93 7f 11 	sts	0x117F, r24
     7ce:	90 93 80 11 	sts	0x1180, r25
     7d2:	a0 93 81 11 	sts	0x1181, r26
     7d6:	b0 93 82 11 	sts	0x1182, r27
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	a0 e7       	ldi	r26, 0x70	; 112
     7e0:	b2 e4       	ldi	r27, 0x42	; 66
     7e2:	80 93 83 11 	sts	0x1183, r24
     7e6:	90 93 84 11 	sts	0x1184, r25
     7ea:	a0 93 85 11 	sts	0x1185, r26
     7ee:	b0 93 86 11 	sts	0x1186, r27
     7f2:	06 e6       	ldi	r16, 0x66	; 102
     7f4:	16 e6       	ldi	r17, 0x66	; 102
     7f6:	26 ee       	ldi	r18, 0xE6	; 230
     7f8:	3e e3       	ldi	r19, 0x3E	; 62
     7fa:	00 93 87 11 	sts	0x1187, r16
     7fe:	10 93 88 11 	sts	0x1188, r17
     802:	20 93 89 11 	sts	0x1189, r18
     806:	30 93 8a 11 	sts	0x118A, r19
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	6c e8       	ldi	r22, 0x8C	; 140
     810:	72 e4       	ldi	r23, 0x42	; 66
     812:	40 93 8b 11 	sts	0x118B, r20
     816:	50 93 8c 11 	sts	0x118C, r21
     81a:	60 93 8d 11 	sts	0x118D, r22
     81e:	70 93 8e 11 	sts	0x118E, r23
     822:	85 e8       	ldi	r24, 0x85	; 133
     824:	9b ee       	ldi	r25, 0xEB	; 235
     826:	a1 ed       	ldi	r26, 0xD1	; 209
     828:	be e3       	ldi	r27, 0x3E	; 62
     82a:	80 93 8f 11 	sts	0x118F, r24
     82e:	90 93 90 11 	sts	0x1190, r25
     832:	a0 93 91 11 	sts	0x1191, r26
     836:	b0 93 92 11 	sts	0x1192, r27
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	a0 ea       	ldi	r26, 0xA0	; 160
     840:	b2 e4       	ldi	r27, 0x42	; 66
     842:	80 93 93 11 	sts	0x1193, r24
     846:	90 93 94 11 	sts	0x1194, r25
     84a:	a0 93 95 11 	sts	0x1195, r26
     84e:	b0 93 96 11 	sts	0x1196, r27
     852:	00 e0       	ldi	r16, 0x00	; 0
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	20 e3       	ldi	r18, 0x30	; 48
     858:	30 e4       	ldi	r19, 0x40	; 64
     85a:	00 93 97 11 	sts	0x1197, r16
     85e:	10 93 98 11 	sts	0x1198, r17
     862:	20 93 99 11 	sts	0x1199, r18
     866:	30 93 9a 11 	sts	0x119A, r19
     86a:	40 92 9b 11 	sts	0x119B, r4
     86e:	50 92 9c 11 	sts	0x119C, r5
     872:	60 92 9d 11 	sts	0x119D, r6
     876:	70 92 9e 11 	sts	0x119E, r7
     87a:	0f 2e       	mov	r0, r31
     87c:	f3 e3       	ldi	r31, 0x33	; 51
     87e:	4f 2e       	mov	r4, r31
     880:	54 2c       	mov	r5, r4
     882:	f3 e2       	ldi	r31, 0x23	; 35
     884:	6f 2e       	mov	r6, r31
     886:	f0 e4       	ldi	r31, 0x40	; 64
     888:	7f 2e       	mov	r7, r31
     88a:	f0 2d       	mov	r31, r0
     88c:	40 92 9f 11 	sts	0x119F, r4
     890:	50 92 a0 11 	sts	0x11A0, r5
     894:	60 92 a1 11 	sts	0x11A1, r6
     898:	70 92 a2 11 	sts	0x11A2, r7
     89c:	80 92 a3 11 	sts	0x11A3, r8
     8a0:	90 92 a4 11 	sts	0x11A4, r9
     8a4:	a0 92 a5 11 	sts	0x11A5, r10
     8a8:	b0 92 a6 11 	sts	0x11A6, r11
     8ac:	81 2c       	mov	r8, r1
     8ae:	91 2c       	mov	r9, r1
     8b0:	54 01       	movw	r10, r8
     8b2:	68 94       	set
     8b4:	b6 f8       	bld	r11, 6
     8b6:	80 92 a7 11 	sts	0x11A7, r8
     8ba:	90 92 a8 11 	sts	0x11A8, r9
     8be:	a0 92 a9 11 	sts	0x11A9, r10
     8c2:	b0 92 aa 11 	sts	0x11AA, r11
     8c6:	c0 92 ab 11 	sts	0x11AB, r12
     8ca:	d0 92 ac 11 	sts	0x11AC, r13
     8ce:	e0 92 ad 11 	sts	0x11AD, r14
     8d2:	f0 92 ae 11 	sts	0x11AE, r15
     8d6:	0f 2e       	mov	r0, r31
     8d8:	f6 e6       	ldi	r31, 0x66	; 102
     8da:	cf 2e       	mov	r12, r31
     8dc:	dc 2c       	mov	r13, r12
     8de:	f6 ec       	ldi	r31, 0xC6	; 198
     8e0:	ef 2e       	mov	r14, r31
     8e2:	ff e3       	ldi	r31, 0x3F	; 63
     8e4:	ff 2e       	mov	r15, r31
     8e6:	f0 2d       	mov	r31, r0
     8e8:	c0 92 af 11 	sts	0x11AF, r12
     8ec:	d0 92 b0 11 	sts	0x11B0, r13
     8f0:	e0 92 b1 11 	sts	0x11B1, r14
     8f4:	f0 92 b2 11 	sts	0x11B2, r15
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	20 e2       	ldi	r18, 0x20	; 32
     8fe:	32 e4       	ldi	r19, 0x42	; 66
     900:	00 93 b3 11 	sts	0x11B3, r16
     904:	10 93 b4 11 	sts	0x11B4, r17
     908:	20 93 b5 11 	sts	0x11B5, r18
     90c:	30 93 b6 11 	sts	0x11B6, r19
     910:	00 e0       	ldi	r16, 0x00	; 0
     912:	10 e0       	ldi	r17, 0x00	; 0
     914:	20 ea       	ldi	r18, 0xA0	; 160
     916:	3f e3       	ldi	r19, 0x3F	; 63
     918:	00 93 b7 11 	sts	0x11B7, r16
     91c:	10 93 b8 11 	sts	0x11B8, r17
     920:	20 93 b9 11 	sts	0x11B9, r18
     924:	30 93 ba 11 	sts	0x11BA, r19
     928:	00 e0       	ldi	r16, 0x00	; 0
     92a:	10 e0       	ldi	r17, 0x00	; 0
     92c:	28 e4       	ldi	r18, 0x48	; 72
     92e:	32 e4       	ldi	r19, 0x42	; 66
     930:	00 93 bb 11 	sts	0x11BB, r16
     934:	10 93 bc 11 	sts	0x11BC, r17
     938:	20 93 bd 11 	sts	0x11BD, r18
     93c:	30 93 be 11 	sts	0x11BE, r19
     940:	03 ec       	ldi	r16, 0xC3	; 195
     942:	15 ef       	ldi	r17, 0xF5	; 245
     944:	28 e8       	ldi	r18, 0x88	; 136
     946:	3f e3       	ldi	r19, 0x3F	; 63
     948:	00 93 bf 11 	sts	0x11BF, r16
     94c:	10 93 c0 11 	sts	0x11C0, r17
     950:	20 93 c1 11 	sts	0x11C1, r18
     954:	30 93 c2 11 	sts	0x11C2, r19
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	10 e0       	ldi	r17, 0x00	; 0
     95c:	20 e7       	ldi	r18, 0x70	; 112
     95e:	32 e4       	ldi	r19, 0x42	; 66
     960:	00 93 c3 11 	sts	0x11C3, r16
     964:	10 93 c4 11 	sts	0x11C4, r17
     968:	20 93 c5 11 	sts	0x11C5, r18
     96c:	30 93 c6 11 	sts	0x11C6, r19
     970:	0a e9       	ldi	r16, 0x9A	; 154
     972:	19 e9       	ldi	r17, 0x99	; 153
     974:	29 e5       	ldi	r18, 0x59	; 89
     976:	3f e3       	ldi	r19, 0x3F	; 63
     978:	00 93 c7 11 	sts	0x11C7, r16
     97c:	10 93 c8 11 	sts	0x11C8, r17
     980:	20 93 c9 11 	sts	0x11C9, r18
     984:	30 93 ca 11 	sts	0x11CA, r19
     988:	40 93 cb 11 	sts	0x11CB, r20
     98c:	50 93 cc 11 	sts	0x11CC, r21
     990:	60 93 cd 11 	sts	0x11CD, r22
     994:	70 93 ce 11 	sts	0x11CE, r23
     998:	4d ec       	ldi	r20, 0xCD	; 205
     99a:	5c ec       	ldi	r21, 0xCC	; 204
     99c:	6c e4       	ldi	r22, 0x4C	; 76
     99e:	7f e3       	ldi	r23, 0x3F	; 63
     9a0:	40 93 cf 11 	sts	0x11CF, r20
     9a4:	50 93 d0 11 	sts	0x11D0, r21
     9a8:	60 93 d1 11 	sts	0x11D1, r22
     9ac:	70 93 d2 11 	sts	0x11D2, r23
     9b0:	80 93 d3 11 	sts	0x11D3, r24
     9b4:	90 93 d4 11 	sts	0x11D4, r25
     9b8:	a0 93 d5 11 	sts	0x11D5, r26
     9bc:	b0 93 d6 11 	sts	0x11D6, r27
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	a0 e4       	ldi	r26, 0x40	; 64
     9c6:	bf e3       	ldi	r27, 0x3F	; 63
     9c8:	80 93 d7 11 	sts	0x11D7, r24
     9cc:	90 93 d8 11 	sts	0x11D8, r25
     9d0:	a0 93 d9 11 	sts	0x11D9, r26
     9d4:	b0 93 da 11 	sts	0x11DA, r27
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a4 eb       	ldi	r26, 0xB4	; 180
     9de:	b2 e4       	ldi	r27, 0x42	; 66
     9e0:	80 93 db 11 	sts	0x11DB, r24
     9e4:	90 93 dc 11 	sts	0x11DC, r25
     9e8:	a0 93 dd 11 	sts	0x11DD, r26
     9ec:	b0 93 de 11 	sts	0x11DE, r27
     9f0:	86 e6       	ldi	r24, 0x66	; 102
     9f2:	96 e6       	ldi	r25, 0x66	; 102
     9f4:	a6 e2       	ldi	r26, 0x26	; 38
     9f6:	bf e3       	ldi	r27, 0x3F	; 63
     9f8:	80 93 df 11 	sts	0x11DF, r24
     9fc:	90 93 e0 11 	sts	0x11E0, r25
     a00:	a0 93 e1 11 	sts	0x11E1, r26
     a04:	b0 93 e2 11 	sts	0x11E2, r27
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a8 ec       	ldi	r26, 0xC8	; 200
     a0e:	b2 e4       	ldi	r27, 0x42	; 66
     a10:	80 93 e3 11 	sts	0x11E3, r24
     a14:	90 93 e4 11 	sts	0x11E4, r25
     a18:	a0 93 e5 11 	sts	0x11E5, r26
     a1c:	b0 93 e6 11 	sts	0x11E6, r27
     a20:	8a e9       	ldi	r24, 0x9A	; 154
     a22:	99 e9       	ldi	r25, 0x99	; 153
     a24:	a9 e1       	ldi	r26, 0x19	; 25
     a26:	bf e3       	ldi	r27, 0x3F	; 63
     a28:	80 93 e7 11 	sts	0x11E7, r24
     a2c:	90 93 e8 11 	sts	0x11E8, r25
     a30:	a0 93 e9 11 	sts	0x11E9, r26
     a34:	b0 93 ea 11 	sts	0x11EA, r27
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	ac ed       	ldi	r26, 0xDC	; 220
     a3e:	b2 e4       	ldi	r27, 0x42	; 66
     a40:	80 93 eb 11 	sts	0x11EB, r24
     a44:	90 93 ec 11 	sts	0x11EC, r25
     a48:	a0 93 ed 11 	sts	0x11ED, r26
     a4c:	b0 93 ee 11 	sts	0x11EE, r27
     a50:	8d ec       	ldi	r24, 0xCD	; 205
     a52:	9c ec       	ldi	r25, 0xCC	; 204
     a54:	ac e0       	ldi	r26, 0x0C	; 12
     a56:	bf e3       	ldi	r27, 0x3F	; 63
     a58:	80 93 ef 11 	sts	0x11EF, r24
     a5c:	90 93 f0 11 	sts	0x11F0, r25
     a60:	a0 93 f1 11 	sts	0x11F1, r26
     a64:	b0 93 f2 11 	sts	0x11F2, r27
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 ef       	ldi	r26, 0xF0	; 240
     a6e:	b2 e4       	ldi	r27, 0x42	; 66
     a70:	80 93 f3 11 	sts	0x11F3, r24
     a74:	90 93 f4 11 	sts	0x11F4, r25
     a78:	a0 93 f5 11 	sts	0x11F5, r26
     a7c:	b0 93 f6 11 	sts	0x11F6, r27
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	bf e3       	ldi	r27, 0x3F	; 63
     a88:	80 93 f7 11 	sts	0x11F7, r24
     a8c:	90 93 f8 11 	sts	0x11F8, r25
     a90:	a0 93 f9 11 	sts	0x11F9, r26
     a94:	b0 93 fa 11 	sts	0x11FA, r27
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a2 e0       	ldi	r26, 0x02	; 2
     a9e:	b3 e4       	ldi	r27, 0x43	; 67
     aa0:	80 93 fb 11 	sts	0x11FB, r24
     aa4:	90 93 fc 11 	sts	0x11FC, r25
     aa8:	a0 93 fd 11 	sts	0x11FD, r26
     aac:	b0 93 fe 11 	sts	0x11FE, r27
     ab0:	86 e6       	ldi	r24, 0x66	; 102
     ab2:	96 e6       	ldi	r25, 0x66	; 102
     ab4:	a6 ee       	ldi	r26, 0xE6	; 230
     ab6:	be e3       	ldi	r27, 0x3E	; 62
     ab8:	80 93 ff 11 	sts	0x11FF, r24
     abc:	90 93 00 12 	sts	0x1200, r25
     ac0:	a0 93 01 12 	sts	0x1201, r26
     ac4:	b0 93 02 12 	sts	0x1202, r27
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	ac e0       	ldi	r26, 0x0C	; 12
     ace:	b3 e4       	ldi	r27, 0x43	; 67
     ad0:	80 93 03 12 	sts	0x1203, r24
     ad4:	90 93 04 12 	sts	0x1204, r25
     ad8:	a0 93 05 12 	sts	0x1205, r26
     adc:	b0 93 06 12 	sts	0x1206, r27
     ae0:	8d e3       	ldi	r24, 0x3D	; 61
     ae2:	9a e0       	ldi	r25, 0x0A	; 10
     ae4:	a7 ed       	ldi	r26, 0xD7	; 215
     ae6:	be e3       	ldi	r27, 0x3E	; 62
     ae8:	80 93 07 12 	sts	0x1207, r24
     aec:	90 93 08 12 	sts	0x1208, r25
     af0:	a0 93 09 12 	sts	0x1209, r26
     af4:	b0 93 0a 12 	sts	0x120A, r27
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a6 e1       	ldi	r26, 0x16	; 22
     afe:	b3 e4       	ldi	r27, 0x43	; 67
     b00:	80 93 0b 12 	sts	0x120B, r24
     b04:	90 93 0c 12 	sts	0x120C, r25
     b08:	a0 93 0d 12 	sts	0x120D, r26
     b0c:	b0 93 0e 12 	sts	0x120E, r27
     b10:	81 b1       	in	r24, 0x01	; 1
     b12:	8e 63       	ori	r24, 0x3E	; 62
     b14:	81 b9       	out	0x01, r24	; 1
     b16:	08 98       	cbi	0x01, 0	; 1
     b18:	15 98       	cbi	0x02, 5	; 2
     b1a:	82 b1       	in	r24, 0x02	; 2
     b1c:	81 7e       	andi	r24, 0xE1	; 225
     b1e:	82 b9       	out	0x02, r24	; 2
     b20:	50 9a       	sbi	0x0a, 0	; 10
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 68 00 	sts	0x0068, r24
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	80 93 6b 00 	sts	0x006B, r24
     b2e:	0f 9a       	sbi	0x01, 7	; 1
     b30:	0e 98       	cbi	0x01, 6	; 1
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	85 bd       	out	0x25, r24	; 37
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	bf 90       	pop	r11
     b44:	af 90       	pop	r10
     b46:	9f 90       	pop	r9
     b48:	8f 90       	pop	r8
     b4a:	7f 90       	pop	r7
     b4c:	6f 90       	pop	r6
     b4e:	5f 90       	pop	r5
     b50:	4f 90       	pop	r4
     b52:	08 95       	ret

00000b54 <sensors_start_sample>:
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	f7 dc       	rcall	.-1554   	; 0x548 <select_sensor>
     b5a:	f0 cc       	rjmp	.-1568   	; 0x53c <adc_start>

00000b5c <sensors_display_data>:
     b5c:	31 db       	rcall	.-2462   	; 0x1c0 <display_clear>
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	30 db       	rcall	.-2464   	; 0x1c8 <display_set_pos>
     b68:	8e e0       	ldi	r24, 0x0E	; 14
     b6a:	91 e1       	ldi	r25, 0x11	; 17
     b6c:	0d dc       	rcall	.-2022   	; 0x388 <display_text>
     b6e:	60 91 10 12 	lds	r22, 0x1210
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	f7 d7       	rcall	.+4078   	; 0x1b68 <__floatunsisf>
     b7a:	c3 db       	rcall	.-2170   	; 0x302 <display_value>
     b7c:	68 e0       	ldi	r22, 0x08	; 8
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	21 db       	rcall	.-2494   	; 0x1c8 <display_set_pos>
     b86:	82 e1       	ldi	r24, 0x12	; 18
     b88:	91 e1       	ldi	r25, 0x11	; 17
     b8a:	fe db       	rcall	.-2052   	; 0x388 <display_text>
     b8c:	60 91 11 12 	lds	r22, 0x1211
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	e8 d7       	rcall	.+4048   	; 0x1b68 <__floatunsisf>
     b98:	b4 db       	rcall	.-2200   	; 0x302 <display_value>
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	12 db       	rcall	.-2524   	; 0x1c8 <display_set_pos>
     ba4:	86 e1       	ldi	r24, 0x16	; 22
     ba6:	91 e1       	ldi	r25, 0x11	; 17
     ba8:	ef db       	rcall	.-2082   	; 0x388 <display_text>
     baa:	60 91 12 12 	lds	r22, 0x1212
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	d9 d7       	rcall	.+4018   	; 0x1b68 <__floatunsisf>
     bb6:	a5 db       	rcall	.-2230   	; 0x302 <display_value>
     bb8:	68 e0       	ldi	r22, 0x08	; 8
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	03 db       	rcall	.-2554   	; 0x1c8 <display_set_pos>
     bc2:	8a e1       	ldi	r24, 0x1A	; 26
     bc4:	91 e1       	ldi	r25, 0x11	; 17
     bc6:	e0 db       	rcall	.-2112   	; 0x388 <display_text>
     bc8:	60 91 13 12 	lds	r22, 0x1213
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	ca d7       	rcall	.+3988   	; 0x1b68 <__floatunsisf>
     bd4:	96 db       	rcall	.-2260   	; 0x302 <display_value>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	f4 da       	rcall	.-2584   	; 0x1c8 <display_set_pos>
     be0:	8e e1       	ldi	r24, 0x1E	; 30
     be2:	91 e1       	ldi	r25, 0x11	; 17
     be4:	d1 db       	rcall	.-2142   	; 0x388 <display_text>
     be6:	60 91 14 12 	lds	r22, 0x1214
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	bb d7       	rcall	.+3958   	; 0x1b68 <__floatunsisf>
     bf2:	87 db       	rcall	.-2290   	; 0x302 <display_value>
     bf4:	68 e0       	ldi	r22, 0x08	; 8
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	e5 da       	rcall	.-2614   	; 0x1c8 <display_set_pos>
     bfe:	82 e2       	ldi	r24, 0x22	; 34
     c00:	91 e1       	ldi	r25, 0x11	; 17
     c02:	c2 db       	rcall	.-2172   	; 0x388 <display_text>
     c04:	60 91 15 12 	lds	r22, 0x1215
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	ac d7       	rcall	.+3928   	; 0x1b68 <__floatunsisf>
     c10:	78 db       	rcall	.-2320   	; 0x302 <display_value>
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	83 e0       	ldi	r24, 0x03	; 3
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	d6 da       	rcall	.-2644   	; 0x1c8 <display_set_pos>
     c1c:	86 e2       	ldi	r24, 0x26	; 38
     c1e:	91 e1       	ldi	r25, 0x11	; 17
     c20:	b3 db       	rcall	.-2202   	; 0x388 <display_text>
     c22:	60 91 16 12 	lds	r22, 0x1216
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9d d7       	rcall	.+3898   	; 0x1b68 <__floatunsisf>
     c2e:	69 db       	rcall	.-2350   	; 0x302 <display_value>
     c30:	68 e0       	ldi	r22, 0x08	; 8
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	c7 da       	rcall	.-2674   	; 0x1c8 <display_set_pos>
     c3a:	8a e2       	ldi	r24, 0x2A	; 42
     c3c:	91 e1       	ldi	r25, 0x11	; 17
     c3e:	a4 db       	rcall	.-2232   	; 0x388 <display_text>
     c40:	60 91 17 12 	lds	r22, 0x1217
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	8e d7       	rcall	.+3868   	; 0x1b68 <__floatunsisf>
     c4c:	5a cb       	rjmp	.-2380   	; 0x302 <display_value>

00000c4e <sensors_get_data>:
}

uint8_t* sensors_get_data()
{
	return gSensorBuffer;
}
     c4e:	80 e1       	ldi	r24, 0x10	; 16
     c50:	92 e1       	ldi	r25, 0x12	; 18
     c52:	08 95       	ret

00000c54 <__vector_24>:


ISR(ADC_vect)
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	0b b6       	in	r0, 0x3b	; 59
     c60:	0f 92       	push	r0
     c62:	2f 92       	push	r2
     c64:	3f 92       	push	r3
     c66:	4f 92       	push	r4
     c68:	5f 92       	push	r5
     c6a:	6f 92       	push	r6
     c6c:	7f 92       	push	r7
     c6e:	8f 92       	push	r8
     c70:	9f 92       	push	r9
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	2f 93       	push	r18
     c84:	3f 93       	push	r19
     c86:	4f 93       	push	r20
     c88:	5f 93       	push	r21
     c8a:	6f 93       	push	r22
     c8c:	7f 93       	push	r23
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
     c92:	af 93       	push	r26
     c94:	bf 93       	push	r27
     c96:	ef 93       	push	r30
     c98:	ff 93       	push	r31
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	2d 97       	sbiw	r28, 0x0d	; 13
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	cd bf       	out	0x3d, r28	; 61
	cli();
     ca8:	f8 94       	cli
	uint8_t adcValue = ADCH;
     caa:	60 91 79 00 	lds	r22, 0x0079
	float vin = adcValue * 5.0 / 256.0;
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	5b d7       	rcall	.+3766   	; 0x1b6c <__floatsisf>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 ea       	ldi	r20, 0xA0	; 160
     cbc:	50 e4       	ldi	r21, 0x40	; 64
     cbe:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e8       	ldi	r20, 0x80	; 128
     cc8:	5b e3       	ldi	r21, 0x3B	; 59
     cca:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     cce:	6d 83       	std	Y+5, r22	; 0x05
     cd0:	7e 83       	std	Y+6, r23	; 0x06
     cd2:	8f 83       	std	Y+7, r24	; 0x07
     cd4:	98 87       	std	Y+8, r25	; 0x08
     cd6:	56 2e       	mov	r5, r22
     cd8:	47 2e       	mov	r4, r23
     cda:	38 2e       	mov	r3, r24
     cdc:	29 2e       	mov	r2, r25
	if(gSelectedSensor == 4)
     cde:	20 91 0f 12 	lds	r18, 0x120F
     ce2:	29 87       	std	Y+9, r18	; 0x09
     ce4:	24 30       	cpi	r18, 0x04	; 4
     ce6:	09 f0       	breq	.+2      	; 0xcea <__vector_24+0x96>
     ce8:	3a c1       	rjmp	.+628    	; 0xf5e <__vector_24+0x30a>
	return IRShort[12][1]*10;
}

int voltage_to_mm_long(float voltage)
{
	if(voltage >= IRLong[0][0])
     cea:	c0 90 97 11 	lds	r12, 0x1197
     cee:	d0 90 98 11 	lds	r13, 0x1198
     cf2:	e0 90 99 11 	lds	r14, 0x1199
     cf6:	f0 90 9a 11 	lds	r15, 0x119A
     cfa:	a7 01       	movw	r20, r14
     cfc:	96 01       	movw	r18, r12
     cfe:	e6 d7       	rcall	.+4044   	; 0x1ccc <__gesf2>
     d00:	88 23       	and	r24, r24
     d02:	84 f0       	brlt	.+32     	; 0xd24 <__vector_24+0xd0>
	{
		return IRLong[0][1]*10;
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	60 91 9b 11 	lds	r22, 0x119B
     d10:	70 91 9c 11 	lds	r23, 0x119C
     d14:	80 91 9d 11 	lds	r24, 0x119D
     d18:	90 91 9e 11 	lds	r25, 0x119E
     d1c:	db d7       	rcall	.+4022   	; 0x1cd4 <__mulsf3>
     d1e:	f3 d6       	rcall	.+3558   	; 0x1b06 <__fixsfsi>
     d20:	cb 01       	movw	r24, r22
     d22:	17 c1       	rjmp	.+558    	; 0xf52 <__vector_24+0x2fe>
	} else if(voltage <= IRLong[14][0])
     d24:	20 91 07 12 	lds	r18, 0x1207
     d28:	30 91 08 12 	lds	r19, 0x1208
     d2c:	40 91 09 12 	lds	r20, 0x1209
     d30:	50 91 0a 12 	lds	r21, 0x120A
     d34:	bd 81       	ldd	r27, Y+5	; 0x05
     d36:	ae 81       	ldd	r26, Y+6	; 0x06
     d38:	1f 81       	ldd	r17, Y+7	; 0x07
     d3a:	08 85       	ldd	r16, Y+8	; 0x08
     d3c:	6b 2f       	mov	r22, r27
     d3e:	7a 2f       	mov	r23, r26
     d40:	81 2f       	mov	r24, r17
     d42:	90 2f       	mov	r25, r16
     d44:	74 d6       	rcall	.+3304   	; 0x1a2e <__cmpsf2>
     d46:	18 16       	cp	r1, r24
     d48:	a4 f4       	brge	.+40     	; 0xd72 <__vector_24+0x11e>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     d4a:	80 90 9f 11 	lds	r8, 0x119F
     d4e:	90 90 a0 11 	lds	r9, 0x11A0
     d52:	a0 90 a1 11 	lds	r10, 0x11A1
     d56:	b0 90 a2 11 	lds	r11, 0x11A2
		if(next == voltage)
     d5a:	a5 01       	movw	r20, r10
     d5c:	94 01       	movw	r18, r8
     d5e:	bd 81       	ldd	r27, Y+5	; 0x05
     d60:	ae 81       	ldd	r26, Y+6	; 0x06
     d62:	6b 2f       	mov	r22, r27
     d64:	7a 2f       	mov	r23, r26
     d66:	81 2f       	mov	r24, r17
     d68:	90 2f       	mov	r25, r16
     d6a:	61 d6       	rcall	.+3266   	; 0x1a2e <__cmpsf2>
     d6c:	81 11       	cpse	r24, r1
     d6e:	4c c0       	rjmp	.+152    	; 0xe08 <__vector_24+0x1b4>
     d70:	32 c0       	rjmp	.+100    	; 0xdd6 <__vector_24+0x182>
	if(voltage >= IRLong[0][0])
	{
		return IRLong[0][1]*10;
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	60 91 0b 12 	lds	r22, 0x120B
     d7e:	70 91 0c 12 	lds	r23, 0x120C
     d82:	80 91 0d 12 	lds	r24, 0x120D
     d86:	90 91 0e 12 	lds	r25, 0x120E
     d8a:	a4 d7       	rcall	.+3912   	; 0x1cd4 <__mulsf3>
     d8c:	bc d6       	rcall	.+3448   	; 0x1b06 <__fixsfsi>
     d8e:	cb 01       	movw	r24, r22
     d90:	e0 c0       	rjmp	.+448    	; 0xf52 <__vector_24+0x2fe>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
     d92:	d3 01       	movw	r26, r6
     d94:	8d 91       	ld	r24, X+
     d96:	9d 91       	ld	r25, X+
     d98:	0d 90       	ld	r0, X+
     d9a:	bc 91       	ld	r27, X
     d9c:	a0 2d       	mov	r26, r0
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	ab 83       	std	Y+3, r26	; 0x03
     da4:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRLong[i+1][0];
     da6:	78 01       	movw	r14, r16
     da8:	bf ef       	ldi	r27, 0xFF	; 255
     daa:	eb 1a       	sub	r14, r27
     dac:	fb 0a       	sbc	r15, r27
     dae:	e8 e0       	ldi	r30, 0x08	; 8
     db0:	6e 0e       	add	r6, r30
     db2:	71 1c       	adc	r7, r1
     db4:	d3 01       	movw	r26, r6
     db6:	8d 90       	ld	r8, X+
     db8:	9d 90       	ld	r9, X+
     dba:	ad 90       	ld	r10, X+
     dbc:	bc 90       	ld	r11, X
     dbe:	1b 87       	std	Y+11, r17	; 0x0b
     dc0:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
     dc2:	a5 01       	movw	r20, r10
     dc4:	94 01       	movw	r18, r8
     dc6:	6d 2d       	mov	r22, r13
     dc8:	7c 2d       	mov	r23, r12
     dca:	83 2d       	mov	r24, r3
     dcc:	92 2d       	mov	r25, r2
     dce:	2f d6       	rcall	.+3166   	; 0x1a2e <__cmpsf2>
     dd0:	81 11       	cpse	r24, r1
     dd2:	2b c0       	rjmp	.+86     	; 0xe2a <__vector_24+0x1d6>
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <__vector_24+0x188>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     dd6:	ee 24       	eor	r14, r14
     dd8:	e3 94       	inc	r14
     dda:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
     ddc:	c7 01       	movw	r24, r14
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	89 56       	subi	r24, 0x69	; 105
     dec:	9e 4e       	sbci	r25, 0xEE	; 238
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e2       	ldi	r20, 0x20	; 32
     df4:	51 e4       	ldi	r21, 0x41	; 65
     df6:	fc 01       	movw	r30, r24
     df8:	64 81       	ldd	r22, Z+4	; 0x04
     dfa:	75 81       	ldd	r23, Z+5	; 0x05
     dfc:	86 81       	ldd	r24, Z+6	; 0x06
     dfe:	97 81       	ldd	r25, Z+7	; 0x07
     e00:	69 d7       	rcall	.+3794   	; 0x1cd4 <__mulsf3>
     e02:	81 d6       	rcall	.+3330   	; 0x1b06 <__fixsfsi>
     e04:	cb 01       	movw	r24, r22
     e06:	a5 c0       	rjmp	.+330    	; 0xf52 <__vector_24+0x2fe>
     e08:	0f 2e       	mov	r0, r31
     e0a:	ff e9       	ldi	r31, 0x9F	; 159
     e0c:	6f 2e       	mov	r6, r31
     e0e:	f1 e1       	ldi	r31, 0x11	; 17
     e10:	7f 2e       	mov	r7, r31
     e12:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e14:	01 e0       	ldi	r16, 0x01	; 1
     e16:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
     e18:	1b 86       	std	Y+11, r1	; 0x0b
     e1a:	1a 86       	std	Y+10, r1	; 0x0a
     e1c:	c9 82       	std	Y+1, r12	; 0x01
     e1e:	da 82       	std	Y+2, r13	; 0x02
     e20:	eb 82       	std	Y+3, r14	; 0x03
     e22:	fc 82       	std	Y+4, r15	; 0x04
     e24:	d5 2c       	mov	r13, r5
     e26:	c4 2c       	mov	r12, r4
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <__vector_24+0x1d8>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e2a:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
     e2c:	29 81       	ldd	r18, Y+1	; 0x01
     e2e:	3a 81       	ldd	r19, Y+2	; 0x02
     e30:	4b 81       	ldd	r20, Y+3	; 0x03
     e32:	5c 81       	ldd	r21, Y+4	; 0x04
     e34:	6d 2d       	mov	r22, r13
     e36:	7c 2d       	mov	r23, r12
     e38:	83 2d       	mov	r24, r3
     e3a:	92 2d       	mov	r25, r2
     e3c:	f8 d5       	rcall	.+3056   	; 0x1a2e <__cmpsf2>
     e3e:	88 23       	and	r24, r24
     e40:	0c f0       	brlt	.+2      	; 0xe44 <__vector_24+0x1f0>
     e42:	74 c0       	rjmp	.+232    	; 0xf2c <__vector_24+0x2d8>
     e44:	a5 01       	movw	r20, r10
     e46:	94 01       	movw	r18, r8
     e48:	6d 2d       	mov	r22, r13
     e4a:	7c 2d       	mov	r23, r12
     e4c:	83 2d       	mov	r24, r3
     e4e:	92 2d       	mov	r25, r2
     e50:	3d d7       	rcall	.+3706   	; 0x1ccc <__gesf2>
     e52:	18 16       	cp	r1, r24
     e54:	0c f0       	brlt	.+2      	; 0xe58 <__vector_24+0x204>
     e56:	6a c0       	rjmp	.+212    	; 0xf2c <__vector_24+0x2d8>
     e58:	c9 80       	ldd	r12, Y+1	; 0x01
     e5a:	da 80       	ldd	r13, Y+2	; 0x02
     e5c:	eb 80       	ldd	r14, Y+3	; 0x03
     e5e:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRLong[i][1]*10;
     e60:	ea 85       	ldd	r30, Y+10	; 0x0a
     e62:	fb 85       	ldd	r31, Y+11	; 0x0b
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	ee 0f       	add	r30, r30
     e6a:	ff 1f       	adc	r31, r31
     e6c:	ee 0f       	add	r30, r30
     e6e:	ff 1f       	adc	r31, r31
     e70:	e9 56       	subi	r30, 0x69	; 105
     e72:	fe 4e       	sbci	r31, 0xEE	; 238
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e2       	ldi	r20, 0x20	; 32
     e7a:	51 e4       	ldi	r21, 0x41	; 65
     e7c:	64 81       	ldd	r22, Z+4	; 0x04
     e7e:	75 81       	ldd	r23, Z+5	; 0x05
     e80:	86 81       	ldd	r24, Z+6	; 0x06
     e82:	97 81       	ldd	r25, Z+7	; 0x07
     e84:	27 d7       	rcall	.+3662   	; 0x1cd4 <__mulsf3>
     e86:	3f d6       	rcall	.+3198   	; 0x1b06 <__fixsfsi>
     e88:	1b 01       	movw	r2, r22
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     e8a:	88 27       	eor	r24, r24
     e8c:	77 fd       	sbrc	r23, 7
     e8e:	80 95       	com	r24
     e90:	98 2f       	mov	r25, r24
     e92:	6c d6       	rcall	.+3288   	; 0x1b6c <__floatsisf>
     e94:	2b 01       	movw	r4, r22
     e96:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
     e98:	7d 81       	ldd	r23, Y+5	; 0x05
     e9a:	6e 81       	ldd	r22, Y+6	; 0x06
     e9c:	9f 81       	ldd	r25, Y+7	; 0x07
     e9e:	88 85       	ldd	r24, Y+8	; 0x08
     ea0:	27 2f       	mov	r18, r23
     ea2:	36 2f       	mov	r19, r22
     ea4:	49 2f       	mov	r20, r25
     ea6:	58 2f       	mov	r21, r24
     ea8:	c7 01       	movw	r24, r14
     eaa:	b6 01       	movw	r22, r12
     eac:	5b d5       	rcall	.+2742   	; 0x1964 <__subsf3>
     eae:	69 83       	std	Y+1, r22	; 0x01
     eb0:	7a 83       	std	Y+2, r23	; 0x02
     eb2:	8b 83       	std	Y+3, r24	; 0x03
     eb4:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
     eb6:	f8 01       	movw	r30, r16
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	e9 56       	subi	r30, 0x69	; 105
     ec6:	fe 4e       	sbci	r31, 0xEE	; 238
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e2       	ldi	r20, 0x20	; 32
     ece:	51 e4       	ldi	r21, 0x41	; 65
     ed0:	64 81       	ldd	r22, Z+4	; 0x04
     ed2:	75 81       	ldd	r23, Z+5	; 0x05
     ed4:	86 81       	ldd	r24, Z+6	; 0x06
     ed6:	97 81       	ldd	r25, Z+7	; 0x07
     ed8:	fd d6       	rcall	.+3578   	; 0x1cd4 <__mulsf3>
     eda:	15 d6       	rcall	.+3114   	; 0x1b06 <__fixsfsi>
			int diff = high - low;
     edc:	91 01       	movw	r18, r2
     ede:	26 1b       	sub	r18, r22
     ee0:	37 0b       	sbc	r19, r23
     ee2:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     ee4:	88 27       	eor	r24, r24
     ee6:	77 fd       	sbrc	r23, 7
     ee8:	80 95       	com	r24
     eea:	98 2f       	mov	r25, r24
     eec:	3f d6       	rcall	.+3198   	; 0x1b6c <__floatsisf>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	69 81       	ldd	r22, Y+1	; 0x01
     ef4:	7a 81       	ldd	r23, Y+2	; 0x02
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	ec d6       	rcall	.+3544   	; 0x1cd4 <__mulsf3>
     efc:	69 83       	std	Y+1, r22	; 0x01
     efe:	7a 83       	std	Y+2, r23	; 0x02
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
     f04:	a5 01       	movw	r20, r10
     f06:	94 01       	movw	r18, r8
     f08:	c7 01       	movw	r24, r14
     f0a:	b6 01       	movw	r22, r12
     f0c:	2b d5       	rcall	.+2646   	; 0x1964 <__subsf3>
     f0e:	9b 01       	movw	r18, r22
     f10:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
     f12:	69 81       	ldd	r22, Y+1	; 0x01
     f14:	7a 81       	ldd	r23, Y+2	; 0x02
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	8d d5       	rcall	.+2842   	; 0x1a36 <__divsf3>
     f1c:	9b 01       	movw	r18, r22
     f1e:	ac 01       	movw	r20, r24
     f20:	c3 01       	movw	r24, r6
     f22:	b2 01       	movw	r22, r4
     f24:	1f d5       	rcall	.+2622   	; 0x1964 <__subsf3>
     f26:	ef d5       	rcall	.+3038   	; 0x1b06 <__fixsfsi>
     f28:	cb 01       	movw	r24, r22
     f2a:	13 c0       	rjmp	.+38     	; 0xf52 <__vector_24+0x2fe>
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
     f2c:	0d 30       	cpi	r16, 0x0D	; 13
     f2e:	11 05       	cpc	r17, r1
     f30:	09 f0       	breq	.+2      	; 0xf34 <__vector_24+0x2e0>
     f32:	2f cf       	rjmp	.-418    	; 0xd92 <__vector_24+0x13e>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return IRLong[14][1]*10;
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	60 91 0b 12 	lds	r22, 0x120B
     f40:	70 91 0c 12 	lds	r23, 0x120C
     f44:	80 91 0d 12 	lds	r24, 0x120D
     f48:	90 91 0e 12 	lds	r25, 0x120E
     f4c:	c3 d6       	rcall	.+3462   	; 0x1cd4 <__mulsf3>
     f4e:	db d5       	rcall	.+2998   	; 0x1b06 <__fixsfsi>
     f50:	cb 01       	movw	r24, r22
	cli();
	uint8_t adcValue = ADCH;
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
     f52:	6a e0       	ldi	r22, 0x0A	; 10
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	21 d7       	rcall	.+3650   	; 0x1d9a <__divmodhi4>
     f58:	60 93 14 12 	sts	0x1214, r22
     f5c:	4c c1       	rjmp	.+664    	; 0x11f6 <__vector_24+0x5a2>
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
     f5e:	99 85       	ldd	r25, Y+9	; 0x09
     f60:	89 2f       	mov	r24, r25
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9d 87       	std	Y+13, r25	; 0x0d
     f66:	8c 87       	std	Y+12, r24	; 0x0c
	IRLong[14][1] = 150;
}

int voltage_to_mm_short(float voltage)
{
	if(voltage >= IRShort[0][0])
     f68:	c0 90 2f 11 	lds	r12, 0x112F
     f6c:	d0 90 30 11 	lds	r13, 0x1130
     f70:	e0 90 31 11 	lds	r14, 0x1131
     f74:	f0 90 32 11 	lds	r15, 0x1132
     f78:	a7 01       	movw	r20, r14
     f7a:	96 01       	movw	r18, r12
     f7c:	bd 81       	ldd	r27, Y+5	; 0x05
     f7e:	ae 81       	ldd	r26, Y+6	; 0x06
     f80:	1f 81       	ldd	r17, Y+7	; 0x07
     f82:	08 85       	ldd	r16, Y+8	; 0x08
     f84:	6b 2f       	mov	r22, r27
     f86:	7a 2f       	mov	r23, r26
     f88:	81 2f       	mov	r24, r17
     f8a:	90 2f       	mov	r25, r16
     f8c:	9f d6       	rcall	.+3390   	; 0x1ccc <__gesf2>
     f8e:	88 23       	and	r24, r24
     f90:	84 f0       	brlt	.+32     	; 0xfb2 <__vector_24+0x35e>
	{
		return IRShort[0][1]*10;
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	60 91 33 11 	lds	r22, 0x1133
     f9e:	70 91 34 11 	lds	r23, 0x1134
     fa2:	80 91 35 11 	lds	r24, 0x1135
     fa6:	90 91 36 11 	lds	r25, 0x1136
     faa:	94 d6       	rcall	.+3368   	; 0x1cd4 <__mulsf3>
     fac:	ac d5       	rcall	.+2904   	; 0x1b06 <__fixsfsi>
     fae:	cb 01       	movw	r24, r22
     fb0:	17 c1       	rjmp	.+558    	; 0x11e0 <__vector_24+0x58c>
	} else if(voltage <= IRShort[12][0])
     fb2:	20 91 8f 11 	lds	r18, 0x118F
     fb6:	30 91 90 11 	lds	r19, 0x1190
     fba:	40 91 91 11 	lds	r20, 0x1191
     fbe:	50 91 92 11 	lds	r21, 0x1192
     fc2:	bd 81       	ldd	r27, Y+5	; 0x05
     fc4:	ae 81       	ldd	r26, Y+6	; 0x06
     fc6:	1f 81       	ldd	r17, Y+7	; 0x07
     fc8:	08 85       	ldd	r16, Y+8	; 0x08
     fca:	6b 2f       	mov	r22, r27
     fcc:	7a 2f       	mov	r23, r26
     fce:	81 2f       	mov	r24, r17
     fd0:	90 2f       	mov	r25, r16
     fd2:	2d d5       	rcall	.+2650   	; 0x1a2e <__cmpsf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	a4 f4       	brge	.+40     	; 0x1000 <__vector_24+0x3ac>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
     fd8:	80 90 37 11 	lds	r8, 0x1137
     fdc:	90 90 38 11 	lds	r9, 0x1138
     fe0:	a0 90 39 11 	lds	r10, 0x1139
     fe4:	b0 90 3a 11 	lds	r11, 0x113A
		if(next == voltage)
     fe8:	a5 01       	movw	r20, r10
     fea:	94 01       	movw	r18, r8
     fec:	bd 81       	ldd	r27, Y+5	; 0x05
     fee:	ae 81       	ldd	r26, Y+6	; 0x06
     ff0:	6b 2f       	mov	r22, r27
     ff2:	7a 2f       	mov	r23, r26
     ff4:	81 2f       	mov	r24, r17
     ff6:	90 2f       	mov	r25, r16
     ff8:	1a d5       	rcall	.+2612   	; 0x1a2e <__cmpsf2>
     ffa:	81 11       	cpse	r24, r1
     ffc:	4c c0       	rjmp	.+152    	; 0x1096 <__vector_24+0x442>
     ffe:	32 c0       	rjmp	.+100    	; 0x1064 <__vector_24+0x410>
	if(voltage >= IRShort[0][0])
	{
		return IRShort[0][1]*10;
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e2       	ldi	r20, 0x20	; 32
    1006:	51 e4       	ldi	r21, 0x41	; 65
    1008:	60 91 93 11 	lds	r22, 0x1193
    100c:	70 91 94 11 	lds	r23, 0x1194
    1010:	80 91 95 11 	lds	r24, 0x1195
    1014:	90 91 96 11 	lds	r25, 0x1196
    1018:	5d d6       	rcall	.+3258   	; 0x1cd4 <__mulsf3>
    101a:	75 d5       	rcall	.+2794   	; 0x1b06 <__fixsfsi>
    101c:	cb 01       	movw	r24, r22
    101e:	e0 c0       	rjmp	.+448    	; 0x11e0 <__vector_24+0x58c>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
    1020:	d3 01       	movw	r26, r6
    1022:	8d 91       	ld	r24, X+
    1024:	9d 91       	ld	r25, X+
    1026:	0d 90       	ld	r0, X+
    1028:	bc 91       	ld	r27, X
    102a:	a0 2d       	mov	r26, r0
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	ab 83       	std	Y+3, r26	; 0x03
    1032:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRShort[i+1][0];
    1034:	78 01       	movw	r14, r16
    1036:	bf ef       	ldi	r27, 0xFF	; 255
    1038:	eb 1a       	sub	r14, r27
    103a:	fb 0a       	sbc	r15, r27
    103c:	e8 e0       	ldi	r30, 0x08	; 8
    103e:	6e 0e       	add	r6, r30
    1040:	71 1c       	adc	r7, r1
    1042:	d3 01       	movw	r26, r6
    1044:	8d 90       	ld	r8, X+
    1046:	9d 90       	ld	r9, X+
    1048:	ad 90       	ld	r10, X+
    104a:	bc 90       	ld	r11, X
    104c:	1b 87       	std	Y+11, r17	; 0x0b
    104e:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
    1050:	a5 01       	movw	r20, r10
    1052:	94 01       	movw	r18, r8
    1054:	6d 2d       	mov	r22, r13
    1056:	7c 2d       	mov	r23, r12
    1058:	83 2d       	mov	r24, r3
    105a:	92 2d       	mov	r25, r2
    105c:	e8 d4       	rcall	.+2512   	; 0x1a2e <__cmpsf2>
    105e:	81 11       	cpse	r24, r1
    1060:	2b c0       	rjmp	.+86     	; 0x10b8 <__vector_24+0x464>
    1062:	03 c0       	rjmp	.+6      	; 0x106a <__vector_24+0x416>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    1064:	ee 24       	eor	r14, r14
    1066:	e3 94       	inc	r14
    1068:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
    106a:	c7 01       	movw	r24, r14
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	81 5d       	subi	r24, 0xD1	; 209
    107a:	9e 4e       	sbci	r25, 0xEE	; 238
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e2       	ldi	r20, 0x20	; 32
    1082:	51 e4       	ldi	r21, 0x41	; 65
    1084:	fc 01       	movw	r30, r24
    1086:	64 81       	ldd	r22, Z+4	; 0x04
    1088:	75 81       	ldd	r23, Z+5	; 0x05
    108a:	86 81       	ldd	r24, Z+6	; 0x06
    108c:	97 81       	ldd	r25, Z+7	; 0x07
    108e:	22 d6       	rcall	.+3140   	; 0x1cd4 <__mulsf3>
    1090:	3a d5       	rcall	.+2676   	; 0x1b06 <__fixsfsi>
    1092:	cb 01       	movw	r24, r22
    1094:	a5 c0       	rjmp	.+330    	; 0x11e0 <__vector_24+0x58c>
    1096:	0f 2e       	mov	r0, r31
    1098:	f7 e3       	ldi	r31, 0x37	; 55
    109a:	6f 2e       	mov	r6, r31
    109c:	f1 e1       	ldi	r31, 0x11	; 17
    109e:	7f 2e       	mov	r7, r31
    10a0:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10a2:	01 e0       	ldi	r16, 0x01	; 1
    10a4:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
    10a6:	1b 86       	std	Y+11, r1	; 0x0b
    10a8:	1a 86       	std	Y+10, r1	; 0x0a
    10aa:	c9 82       	std	Y+1, r12	; 0x01
    10ac:	da 82       	std	Y+2, r13	; 0x02
    10ae:	eb 82       	std	Y+3, r14	; 0x03
    10b0:	fc 82       	std	Y+4, r15	; 0x04
    10b2:	d5 2c       	mov	r13, r5
    10b4:	c4 2c       	mov	r12, r4
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <__vector_24+0x466>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10b8:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
    10ba:	29 81       	ldd	r18, Y+1	; 0x01
    10bc:	3a 81       	ldd	r19, Y+2	; 0x02
    10be:	4b 81       	ldd	r20, Y+3	; 0x03
    10c0:	5c 81       	ldd	r21, Y+4	; 0x04
    10c2:	6d 2d       	mov	r22, r13
    10c4:	7c 2d       	mov	r23, r12
    10c6:	83 2d       	mov	r24, r3
    10c8:	92 2d       	mov	r25, r2
    10ca:	b1 d4       	rcall	.+2402   	; 0x1a2e <__cmpsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	0c f0       	brlt	.+2      	; 0x10d2 <__vector_24+0x47e>
    10d0:	74 c0       	rjmp	.+232    	; 0x11ba <__vector_24+0x566>
    10d2:	a5 01       	movw	r20, r10
    10d4:	94 01       	movw	r18, r8
    10d6:	6d 2d       	mov	r22, r13
    10d8:	7c 2d       	mov	r23, r12
    10da:	83 2d       	mov	r24, r3
    10dc:	92 2d       	mov	r25, r2
    10de:	f6 d5       	rcall	.+3052   	; 0x1ccc <__gesf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	0c f0       	brlt	.+2      	; 0x10e6 <__vector_24+0x492>
    10e4:	6a c0       	rjmp	.+212    	; 0x11ba <__vector_24+0x566>
    10e6:	c9 80       	ldd	r12, Y+1	; 0x01
    10e8:	da 80       	ldd	r13, Y+2	; 0x02
    10ea:	eb 80       	ldd	r14, Y+3	; 0x03
    10ec:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRShort[i][1]*10;
    10ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    10f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	e1 5d       	subi	r30, 0xD1	; 209
    1100:	fe 4e       	sbci	r31, 0xEE	; 238
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	64 81       	ldd	r22, Z+4	; 0x04
    110c:	75 81       	ldd	r23, Z+5	; 0x05
    110e:	86 81       	ldd	r24, Z+6	; 0x06
    1110:	97 81       	ldd	r25, Z+7	; 0x07
    1112:	e0 d5       	rcall	.+3008   	; 0x1cd4 <__mulsf3>
    1114:	f8 d4       	rcall	.+2544   	; 0x1b06 <__fixsfsi>
    1116:	1b 01       	movw	r2, r22
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    1118:	88 27       	eor	r24, r24
    111a:	77 fd       	sbrc	r23, 7
    111c:	80 95       	com	r24
    111e:	98 2f       	mov	r25, r24
    1120:	25 d5       	rcall	.+2634   	; 0x1b6c <__floatsisf>
    1122:	2b 01       	movw	r4, r22
    1124:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
    1126:	7d 81       	ldd	r23, Y+5	; 0x05
    1128:	6e 81       	ldd	r22, Y+6	; 0x06
    112a:	9f 81       	ldd	r25, Y+7	; 0x07
    112c:	88 85       	ldd	r24, Y+8	; 0x08
    112e:	27 2f       	mov	r18, r23
    1130:	36 2f       	mov	r19, r22
    1132:	49 2f       	mov	r20, r25
    1134:	58 2f       	mov	r21, r24
    1136:	c7 01       	movw	r24, r14
    1138:	b6 01       	movw	r22, r12
    113a:	14 d4       	rcall	.+2088   	; 0x1964 <__subsf3>
    113c:	69 83       	std	Y+1, r22	; 0x01
    113e:	7a 83       	std	Y+2, r23	; 0x02
    1140:	8b 83       	std	Y+3, r24	; 0x03
    1142:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
    1144:	f8 01       	movw	r30, r16
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	e1 5d       	subi	r30, 0xD1	; 209
    1154:	fe 4e       	sbci	r31, 0xEE	; 238
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e2       	ldi	r20, 0x20	; 32
    115c:	51 e4       	ldi	r21, 0x41	; 65
    115e:	64 81       	ldd	r22, Z+4	; 0x04
    1160:	75 81       	ldd	r23, Z+5	; 0x05
    1162:	86 81       	ldd	r24, Z+6	; 0x06
    1164:	97 81       	ldd	r25, Z+7	; 0x07
    1166:	b6 d5       	rcall	.+2924   	; 0x1cd4 <__mulsf3>
    1168:	ce d4       	rcall	.+2460   	; 0x1b06 <__fixsfsi>
			int diff = high - low;
    116a:	91 01       	movw	r18, r2
    116c:	26 1b       	sub	r18, r22
    116e:	37 0b       	sbc	r19, r23
    1170:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    1172:	88 27       	eor	r24, r24
    1174:	77 fd       	sbrc	r23, 7
    1176:	80 95       	com	r24
    1178:	98 2f       	mov	r25, r24
    117a:	f8 d4       	rcall	.+2544   	; 0x1b6c <__floatsisf>
    117c:	9b 01       	movw	r18, r22
    117e:	ac 01       	movw	r20, r24
    1180:	69 81       	ldd	r22, Y+1	; 0x01
    1182:	7a 81       	ldd	r23, Y+2	; 0x02
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	a5 d5       	rcall	.+2890   	; 0x1cd4 <__mulsf3>
    118a:	69 83       	std	Y+1, r22	; 0x01
    118c:	7a 83       	std	Y+2, r23	; 0x02
    118e:	8b 83       	std	Y+3, r24	; 0x03
    1190:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
    1192:	a5 01       	movw	r20, r10
    1194:	94 01       	movw	r18, r8
    1196:	c7 01       	movw	r24, r14
    1198:	b6 01       	movw	r22, r12
    119a:	e4 d3       	rcall	.+1992   	; 0x1964 <__subsf3>
    119c:	9b 01       	movw	r18, r22
    119e:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
    11a0:	69 81       	ldd	r22, Y+1	; 0x01
    11a2:	7a 81       	ldd	r23, Y+2	; 0x02
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	46 d4       	rcall	.+2188   	; 0x1a36 <__divsf3>
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	c3 01       	movw	r24, r6
    11b0:	b2 01       	movw	r22, r4
    11b2:	d8 d3       	rcall	.+1968   	; 0x1964 <__subsf3>
    11b4:	a8 d4       	rcall	.+2384   	; 0x1b06 <__fixsfsi>
    11b6:	cb 01       	movw	r24, r22
    11b8:	13 c0       	rjmp	.+38     	; 0x11e0 <__vector_24+0x58c>
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
    11ba:	0d 30       	cpi	r16, 0x0D	; 13
    11bc:	11 05       	cpc	r17, r1
    11be:	09 f0       	breq	.+2      	; 0x11c2 <__vector_24+0x56e>
    11c0:	2f cf       	rjmp	.-418    	; 0x1020 <__vector_24+0x3cc>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return IRShort[12][1]*10;
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e2       	ldi	r20, 0x20	; 32
    11c8:	51 e4       	ldi	r21, 0x41	; 65
    11ca:	60 91 93 11 	lds	r22, 0x1193
    11ce:	70 91 94 11 	lds	r23, 0x1194
    11d2:	80 91 95 11 	lds	r24, 0x1195
    11d6:	90 91 96 11 	lds	r25, 0x1196
    11da:	7c d5       	rcall	.+2808   	; 0x1cd4 <__mulsf3>
    11dc:	94 d4       	rcall	.+2344   	; 0x1b06 <__fixsfsi>
    11de:	cb 01       	movw	r24, r22
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
    11e0:	ec 85       	ldd	r30, Y+12	; 0x0c
    11e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    11e4:	e0 5f       	subi	r30, 0xF0	; 240
    11e6:	fd 4e       	sbci	r31, 0xED	; 237
    11e8:	6a e0       	ldi	r22, 0x0A	; 10
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	d6 d5       	rcall	.+2988   	; 0x1d9a <__divmodhi4>
    11ee:	60 83       	st	Z, r22
	}
	
	if(gSelectedSensor < 6)
    11f0:	39 85       	ldd	r19, Y+9	; 0x09
    11f2:	36 30       	cpi	r19, 0x06	; 6
    11f4:	38 f4       	brcc	.+14     	; 0x1204 <__vector_24+0x5b0>
	{
		// Not last sensor
		select_sensor(gSelectedSensor + 1);
    11f6:	a9 85       	ldd	r26, Y+9	; 0x09
    11f8:	8a 2f       	mov	r24, r26
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	a4 d9       	rcall	.-3256   	; 0x548 <select_sensor>
		adc_start();
    1200:	9d d9       	rcall	.-3270   	; 0x53c <adc_start>
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <__vector_24+0x5c2>
	} else {
		select_sensor(0);
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9f d9       	rcall	.-3266   	; 0x548 <select_sensor>
	}
}

void start_ul_sensor()
{
	TCNT0 = 0;
    120a:	16 bc       	out	0x26, r1	; 38
	PORTA |= (1<<PORTA7);
    120c:	17 9a       	sbi	0x02, 7	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    120e:	b0 e5       	ldi	r27, 0x50	; 80
    1210:	ba 95       	dec	r27
    1212:	f1 f7       	brne	.-4      	; 0x1210 <__vector_24+0x5bc>
	_delay_us(15);
	PORTA &= ~(1<<PORTA7);
    1214:	17 98       	cbi	0x02, 7	; 2
		adc_start();
	} else {
		select_sensor(0);
		start_ul_sensor();
	}
	sei();
    1216:	78 94       	sei
}
    1218:	2d 96       	adiw	r28, 0x0d	; 13
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	cf 90       	pop	r12
    124c:	bf 90       	pop	r11
    124e:	af 90       	pop	r10
    1250:	9f 90       	pop	r9
    1252:	8f 90       	pop	r8
    1254:	7f 90       	pop	r7
    1256:	6f 90       	pop	r6
    1258:	5f 90       	pop	r5
    125a:	4f 90       	pop	r4
    125c:	3f 90       	pop	r3
    125e:	2f 90       	pop	r2
    1260:	0f 90       	pop	r0
    1262:	0b be       	out	0x3b, r0	; 59
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <__vector_4>:

ISR(PCINT0_vect)
{
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	0b b6       	in	r0, 0x3b	; 59
    127a:	0f 92       	push	r0
    127c:	2f 93       	push	r18
    127e:	3f 93       	push	r19
    1280:	4f 93       	push	r20
    1282:	5f 93       	push	r21
    1284:	6f 93       	push	r22
    1286:	7f 93       	push	r23
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    128c:	af 93       	push	r26
    128e:	bf 93       	push	r27
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
	cli();
    1294:	f8 94       	cli
	if(PINA & (1<<PINA6))
    1296:	06 9b       	sbis	0x00, 6	; 0
    1298:	02 c0       	rjmp	.+4      	; 0x129e <__vector_4+0x30>
	{
		TCNT0 = 0;
    129a:	16 bc       	out	0x26, r1	; 38
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <__vector_4+0x3c>
	}
	else
	{
		uint8_t UL = TCNT0;
    129e:	86 b5       	in	r24, 0x26	; 38
		gSensorBuffer[7] = UL;
    12a0:	80 93 17 12 	sts	0x1217, r24
		sensorDataFlag = true;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 18 12 	sts	0x1218, r24
	}
	TWI_send_sensors(sensors_get_data(), 0);
    12aa:	d1 dc       	rcall	.-1630   	; 0xc4e <sensors_get_data>
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	d0 d0       	rcall	.+416    	; 0x1450 <TWI_send_sensors>
	sei();
    12b0:	78 94       	sei
}
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	0f 90       	pop	r0
    12cc:	0b be       	out	0x3b, r0	; 59
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <set_twi_reciever_enable>:
	{
		sweepFlag_ = 0;
		return 1;
	}
	return 0;
}
    12d8:	85 e4       	ldi	r24, 0x45	; 69
    12da:	80 93 bc 00 	sts	0x00BC, r24
    12de:	08 95       	ret

000012e0 <clear_int>:
    12e0:	81 ec       	ldi	r24, 0xC1	; 193
    12e2:	80 93 bc 00 	sts	0x00BC, r24
    12e6:	08 95       	ret

000012e8 <start_bus>:
    12e8:	84 ea       	ldi	r24, 0xA4	; 164
    12ea:	80 93 bc 00 	sts	0x00BC, r24
    12ee:	08 95       	ret

000012f0 <stop_bus>:
    12f0:	85 ed       	ldi	r24, 0xD5	; 213
    12f2:	80 93 bc 00 	sts	0x00BC, r24
    12f6:	08 95       	ret

000012f8 <Error>:
    12f8:	80 91 b9 00 	lds	r24, 0x00B9
    12fc:	88 7f       	andi	r24, 0xF8	; 248
    12fe:	88 33       	cpi	r24, 0x38	; 56
    1300:	09 f0       	breq	.+2      	; 0x1304 <Error+0xc>
    1302:	f6 cf       	rjmp	.-20     	; 0x12f0 <stop_bus>
    1304:	ed cf       	rjmp	.-38     	; 0x12e0 <clear_int>

00001306 <get_data>:
    1306:	80 91 bb 00 	lds	r24, 0x00BB
    130a:	08 95       	ret

0000130c <wait_for_bus>:
    130c:	ec eb       	ldi	r30, 0xBC	; 188
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	88 23       	and	r24, r24
    1314:	ec f7       	brge	.-6      	; 0x1310 <wait_for_bus+0x4>
    1316:	08 95       	ret

00001318 <send_data_and_wait>:
    1318:	80 93 bb 00 	sts	0x00BB, r24
    131c:	84 e8       	ldi	r24, 0x84	; 132
    131e:	80 93 bc 00 	sts	0x00BC, r24
    1322:	f4 cf       	rjmp	.-24     	; 0x130c <wait_for_bus>

00001324 <stop_twi>:
    1324:	10 92 32 13 	sts	0x1332, r1
    1328:	10 92 31 13 	sts	0x1331, r1
    132c:	10 92 3b 13 	sts	0x133B, r1
    1330:	10 92 3a 13 	sts	0x133A, r1
    1334:	10 92 27 13 	sts	0x1327, r1
    1338:	10 92 26 13 	sts	0x1326, r1
    133c:	10 92 2c 13 	sts	0x132C, r1
    1340:	10 92 2b 13 	sts	0x132B, r1
    1344:	10 92 2f 13 	sts	0x132F, r1
    1348:	10 92 2e 13 	sts	0x132E, r1
    134c:	08 95       	ret

0000134e <reset_TWI>:
    134e:	ec eb       	ldi	r30, 0xBC	; 188
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	80 6c       	ori	r24, 0xC0	; 192
    1356:	80 83       	st	Z, r24
    1358:	08 95       	ret

0000135a <get_sensor_from_bus>:
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	c0 91 3a 13 	lds	r28, 0x133A
    1362:	d0 91 3b 13 	lds	r29, 0x133B
    1366:	c8 30       	cpi	r28, 0x08	; 8
    1368:	d1 05       	cpc	r29, r1
    136a:	91 f4       	brne	.+36     	; 0x1390 <get_sensor_from_bus+0x36>
    136c:	ec e3       	ldi	r30, 0x3C	; 60
    136e:	f3 e1       	ldi	r31, 0x13	; 19
    1370:	a4 e4       	ldi	r26, 0x44	; 68
    1372:	b3 e1       	ldi	r27, 0x13	; 19
    1374:	84 e4       	ldi	r24, 0x44	; 68
    1376:	93 e1       	ldi	r25, 0x13	; 19
    1378:	21 91       	ld	r18, Z+
    137a:	2d 93       	st	X+, r18
    137c:	e8 17       	cp	r30, r24
    137e:	f9 07       	cpc	r31, r25
    1380:	d9 f7       	brne	.-10     	; 0x1378 <get_sensor_from_bus+0x1e>
    1382:	c1 df       	rcall	.-126    	; 0x1306 <get_data>
    1384:	80 93 35 13 	sts	0x1335, r24
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	80 93 1e 12 	sts	0x121E, r24
    138e:	0d c0       	rjmp	.+26     	; 0x13aa <get_sensor_from_bus+0x50>
    1390:	ba df       	rcall	.-140    	; 0x1306 <get_data>
    1392:	c4 5c       	subi	r28, 0xC4	; 196
    1394:	dc 4e       	sbci	r29, 0xEC	; 236
    1396:	88 83       	st	Y, r24
    1398:	80 91 3a 13 	lds	r24, 0x133A
    139c:	90 91 3b 13 	lds	r25, 0x133B
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	90 93 3b 13 	sts	0x133B, r25
    13a6:	80 93 3a 13 	sts	0x133A, r24
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <get_control_settings_from_bus>:
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	c0 91 2b 13 	lds	r28, 0x132B
    13b8:	d0 91 2c 13 	lds	r29, 0x132C
    13bc:	a4 df       	rcall	.-184    	; 0x1306 <get_data>
    13be:	c8 5d       	subi	r28, 0xD8	; 216
    13c0:	dc 4e       	sbci	r29, 0xEC	; 236
    13c2:	88 83       	st	Y, r24
    13c4:	10 92 2c 13 	sts	0x132C, r1
    13c8:	10 92 2b 13 	sts	0x132B, r1
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <get_autonom_settings_from_bus>:
    13d2:	99 df       	rcall	.-206    	; 0x1306 <get_data>
    13d4:	80 93 26 12 	sts	0x1226, r24
    13d8:	08 95       	ret

000013da <get_char_from_bus>:
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	c0 91 26 13 	lds	r28, 0x1326
    13e2:	d0 91 27 13 	lds	r29, 0x1327
    13e6:	8f df       	rcall	.-226    	; 0x1306 <get_data>
    13e8:	c9 5d       	subi	r28, 0xD9	; 217
    13ea:	dd 4e       	sbci	r29, 0xED	; 237
    13ec:	88 83       	st	Y, r24
    13ee:	80 91 26 13 	lds	r24, 0x1326
    13f2:	90 91 27 13 	lds	r25, 0x1327
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	90 93 27 13 	sts	0x1327, r25
    13fc:	80 93 26 13 	sts	0x1326, r24
    1400:	80 93 36 13 	sts	0x1336, r24
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <TWI_init>:
    140a:	80 93 2d 13 	sts	0x132D, r24
    140e:	80 34       	cpi	r24, 0x40	; 64
    1410:	79 f0       	breq	.+30     	; 0x1430 <TWI_init+0x26>
    1412:	80 38       	cpi	r24, 0x80	; 128
    1414:	19 f0       	breq	.+6      	; 0x141c <TWI_init+0x12>
    1416:	80 32       	cpi	r24, 0x20	; 32
    1418:	d1 f4       	brne	.+52     	; 0x144e <TWI_init+0x44>
    141a:	12 c0       	rjmp	.+36     	; 0x1440 <TWI_init+0x36>
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	88 b9       	out	0x08, r24	; 8
    1420:	5b df       	rcall	.-330    	; 0x12d8 <set_twi_reciever_enable>
    1422:	8f e3       	ldi	r24, 0x3F	; 63
    1424:	80 93 b8 00 	sts	0x00B8, r24
    1428:	81 e8       	ldi	r24, 0x81	; 129
    142a:	80 93 ba 00 	sts	0x00BA, r24
    142e:	08 95       	ret
    1430:	8f e3       	ldi	r24, 0x3F	; 63
    1432:	80 93 b8 00 	sts	0x00B8, r24
    1436:	50 df       	rcall	.-352    	; 0x12d8 <set_twi_reciever_enable>
    1438:	80 e4       	ldi	r24, 0x40	; 64
    143a:	80 93 ba 00 	sts	0x00BA, r24
    143e:	08 95       	ret
    1440:	8f e3       	ldi	r24, 0x3F	; 63
    1442:	80 93 b8 00 	sts	0x00B8, r24
    1446:	48 df       	rcall	.-368    	; 0x12d8 <set_twi_reciever_enable>
    1448:	81 e2       	ldi	r24, 0x21	; 33
    144a:	80 93 ba 00 	sts	0x00BA, r24
    144e:	08 95       	ret

00001450 <TWI_send_sensors>:
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	d8 2f       	mov	r29, r24
    145c:	c9 2f       	mov	r28, r25
    145e:	f6 2e       	mov	r15, r22
    1460:	43 df       	rcall	.-378    	; 0x12e8 <start_bus>
    1462:	54 df       	rcall	.-344    	; 0x130c <wait_for_bus>
    1464:	20 91 b9 00 	lds	r18, 0x00B9
    1468:	28 7f       	andi	r18, 0xF8	; 248
    146a:	28 30       	cpi	r18, 0x08	; 8
    146c:	19 f0       	breq	.+6      	; 0x1474 <TWI_send_sensors+0x24>
    146e:	44 df       	rcall	.-376    	; 0x12f8 <Error>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	1a c0       	rjmp	.+52     	; 0x14a8 <TWI_send_sensors+0x58>
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	50 df       	rcall	.-352    	; 0x1318 <send_data_and_wait>
    1478:	80 91 b9 00 	lds	r24, 0x00B9
    147c:	88 7f       	andi	r24, 0xF8	; 248
    147e:	88 31       	cpi	r24, 0x18	; 24
    1480:	19 f0       	breq	.+6      	; 0x1488 <TWI_send_sensors+0x38>
    1482:	3a df       	rcall	.-396    	; 0x12f8 <Error>
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	10 c0       	rjmp	.+32     	; 0x14a8 <TWI_send_sensors+0x58>
    1488:	0d 2f       	mov	r16, r29
    148a:	1c 2f       	mov	r17, r28
    148c:	c0 e0       	ldi	r28, 0x00	; 0
    148e:	d0 e0       	ldi	r29, 0x00	; 0
    1490:	f8 01       	movw	r30, r16
    1492:	81 91       	ld	r24, Z+
    1494:	8f 01       	movw	r16, r30
    1496:	40 df       	rcall	.-384    	; 0x1318 <send_data_and_wait>
    1498:	21 96       	adiw	r28, 0x01	; 1
    149a:	c8 30       	cpi	r28, 0x08	; 8
    149c:	d1 05       	cpc	r29, r1
    149e:	c1 f7       	brne	.-16     	; 0x1490 <TWI_send_sensors+0x40>
    14a0:	8f 2d       	mov	r24, r15
    14a2:	3a df       	rcall	.-396    	; 0x1318 <send_data_and_wait>
    14a4:	25 df       	rcall	.-438    	; 0x12f0 <stop_bus>
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	08 95       	ret

000014b4 <decode_message_TwiFIFO>:

//--------------------------FIFO------------------------------------------

uint8_t decode_message_TwiFIFO()
{
    14b4:	8f 92       	push	r8
    14b6:	9f 92       	push	r9
    14b8:	af 92       	push	r10
    14ba:	bf 92       	push	r11
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	// TODO: send to relevant party... the display for now
	
	display_clear();
	display_text_fixed_length(msg, length);
	return 0;
}
    14d0:	ad b6       	in	r10, 0x3d	; 61
    14d2:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	80 91 00 01 	lds	r24, 0x0100
    14dc:	90 91 01 01 	lds	r25, 0x0101
    14e0:	0e 94 11 02 	call	0x422	; 0x422 <FifoRead>
    14e4:	81 11       	cpse	r24, r1
    14e6:	40 c0       	rjmp	.+128    	; 0x1568 <decode_message_TwiFIFO+0xb4>
	{
		//No new messages
		return 1; // error
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
    14e8:	c0 90 00 00 	lds	r12, 0x0000
    14ec:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];
    14ee:	96 01       	movw	r18, r12
    14f0:	21 50       	subi	r18, 0x01	; 1
    14f2:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	c1 14       	cp	r12, r1
    14fa:	d1 04       	cpc	r13, r1
    14fc:	11 f0       	breq	.+4      	; 0x1502 <decode_message_TwiFIFO+0x4e>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
	char msg[length-1+ifzero];
    1502:	82 0f       	add	r24, r18
    1504:	93 1f       	adc	r25, r19
    1506:	2d b7       	in	r18, 0x3d	; 61
    1508:	3e b7       	in	r19, 0x3e	; 62
    150a:	28 1b       	sub	r18, r24
    150c:	39 0b       	sbc	r19, r25
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	3e bf       	out	0x3e, r19	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	2d bf       	out	0x3d, r18	; 61
    1518:	2f 5f       	subi	r18, 0xFF	; 255
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	82 2e       	mov	r8, r18
    151e:	93 2e       	mov	r9, r19

	for(int i = 0; i < length; ++i)
    1520:	1c 14       	cp	r1, r12
    1522:	1d 04       	cpc	r1, r13
    1524:	c4 f4       	brge	.+48     	; 0x1556 <decode_message_TwiFIFO+0xa2>
    1526:	e2 2e       	mov	r14, r18
    1528:	f3 2e       	mov	r15, r19
    152a:	00 e0       	ldi	r16, 0x00	; 0
    152c:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gTwiFIFO, character))
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	80 91 00 01 	lds	r24, 0x0100
    1536:	90 91 01 01 	lds	r25, 0x0101
    153a:	0e 94 11 02 	call	0x422	; 0x422 <FifoRead>
    153e:	81 11       	cpse	r24, r1
    1540:	15 c0       	rjmp	.+42     	; 0x156c <decode_message_TwiFIFO+0xb8>
		{
			//display_text("FIFO ERROR 2!");
			return 1; // error
		}

		msg[i] = *character;
    1542:	20 91 00 00 	lds	r18, 0x0000
    1546:	f7 01       	movw	r30, r14
    1548:	21 93       	st	Z+, r18
    154a:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
    154c:	0f 5f       	subi	r16, 0xFF	; 255
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	0c 15       	cp	r16, r12
    1552:	1d 05       	cpc	r17, r13
    1554:	64 f3       	brlt	.-40     	; 0x152e <decode_message_TwiFIFO+0x7a>
	}
	
	
	// TODO: send to relevant party... the display for now
	
	display_clear();
    1556:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <display_clear>
	display_text_fixed_length(msg, length);
    155a:	b6 01       	movw	r22, r12
    155c:	88 2d       	mov	r24, r8
    155e:	99 2d       	mov	r25, r9
    1560:	0e 94 ae 01 	call	0x35c	; 0x35c <display_text_fixed_length>
	return 0;
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	03 c0       	rjmp	.+6      	; 0x156e <decode_message_TwiFIFO+0xba>
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
	{
		//No new messages
		return 1; // error
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	01 c0       	rjmp	.+2      	; 0x156e <decode_message_TwiFIFO+0xba>
	for(int i = 0; i < length; ++i)
	{
		if(FifoRead(gTwiFIFO, character))
		{
			//display_text("FIFO ERROR 2!");
			return 1; // error
    156c:	81 e0       	ldi	r24, 0x01	; 1
	// TODO: send to relevant party... the display for now
	
	display_clear();
	display_text_fixed_length(msg, length);
	return 0;
}
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	be be       	out	0x3e, r11	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	ad be       	out	0x3d, r10	; 61
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	cf 90       	pop	r12
    1588:	bf 90       	pop	r11
    158a:	af 90       	pop	r10
    158c:	9f 90       	pop	r9
    158e:	8f 90       	pop	r8
    1590:	08 95       	ret

00001592 <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	d8 2f       	mov	r29, r24
    159c:	c9 2f       	mov	r28, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
    159e:	60 91 36 13 	lds	r22, 0x1336
    15a2:	80 91 00 01 	lds	r24, 0x0100
    15a6:	90 91 01 01 	lds	r25, 0x0101
    15aa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <FifoWrite>
    15ae:	81 11       	cpse	r24, r1
    15b0:	1c c0       	rjmp	.+56     	; 0x15ea <write_to_TwiFIFO+0x58>
	{
		//display_text("FIFO ERROR 3");
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    15b2:	80 91 36 13 	lds	r24, 0x1336
    15b6:	88 23       	and	r24, r24
    15b8:	d1 f0       	breq	.+52     	; 0x15ee <write_to_TwiFIFO+0x5c>
    15ba:	0d 2f       	mov	r16, r29
    15bc:	1c 2f       	mov	r17, r28
    15be:	c0 e0       	ldi	r28, 0x00	; 0
    15c0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    15c2:	f8 01       	movw	r30, r16
    15c4:	61 91       	ld	r22, Z+
    15c6:	8f 01       	movw	r16, r30
    15c8:	80 91 00 01 	lds	r24, 0x0100
    15cc:	90 91 01 01 	lds	r25, 0x0101
    15d0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <FifoWrite>
    15d4:	81 11       	cpse	r24, r1
    15d6:	0d c0       	rjmp	.+26     	; 0x15f2 <write_to_TwiFIFO+0x60>
	{
		//display_text("FIFO ERROR 3");
		return 1;
	}
	
	for(int i = 0; i < messageLength; ++i)
    15d8:	21 96       	adiw	r28, 0x01	; 1
    15da:	80 91 36 13 	lds	r24, 0x1336
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	c8 17       	cp	r28, r24
    15e2:	d9 07       	cpc	r29, r25
    15e4:	74 f3       	brlt	.-36     	; 0x15c2 <write_to_TwiFIFO+0x30>
			//display_text("FIFO ERROR 4");
			return 1;
		}
	}
	
	return 0;
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <write_to_TwiFIFO+0x62>
uint8_t write_to_TwiFIFO(char msg[])
{
	if(FifoWrite(gTwiFIFO, (unsigned char)messageLength))
	{
		//display_text("FIFO ERROR 3");
		return 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <write_to_TwiFIFO+0x62>
			//display_text("FIFO ERROR 4");
			return 1;
		}
	}
	
	return 0;
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <write_to_TwiFIFO+0x62>
	for(int i = 0; i < messageLength; ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
		{
			//display_text("FIFO ERROR 4");
			return 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return 0;
}
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	08 95       	ret

000015fe <__vector_26>:


//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    15fe:	1f 92       	push	r1
    1600:	0f 92       	push	r0
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	0f 92       	push	r0
    1606:	11 24       	eor	r1, r1
    1608:	0b b6       	in	r0, 0x3b	; 59
    160a:	0f 92       	push	r0
    160c:	2f 93       	push	r18
    160e:	3f 93       	push	r19
    1610:	4f 93       	push	r20
    1612:	5f 93       	push	r21
    1614:	6f 93       	push	r22
    1616:	7f 93       	push	r23
    1618:	8f 93       	push	r24
    161a:	9f 93       	push	r25
    161c:	af 93       	push	r26
    161e:	bf 93       	push	r27
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	ef 93       	push	r30
    1626:	ff 93       	push	r31
	switch(myAdress)
    1628:	80 91 2d 13 	lds	r24, 0x132D
    162c:	80 34       	cpi	r24, 0x40	; 64
    162e:	09 f4       	brne	.+2      	; 0x1632 <__vector_26+0x34>
    1630:	87 c0       	rjmp	.+270    	; 0x1740 <__vector_26+0x142>
    1632:	80 38       	cpi	r24, 0x80	; 128
    1634:	21 f0       	breq	.+8      	; 0x163e <__vector_26+0x40>
    1636:	80 32       	cpi	r24, 0x20	; 32
    1638:	09 f0       	breq	.+2      	; 0x163c <__vector_26+0x3e>
    163a:	7f c1       	rjmp	.+766    	; 0x193a <__vector_26+0x33c>
    163c:	c9 c0       	rjmp	.+402    	; 0x17d0 <__vector_26+0x1d2>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    163e:	80 91 b9 00 	lds	r24, 0x00B9
    1642:	88 7f       	andi	r24, 0xF8	; 248
    1644:	80 36       	cpi	r24, 0x60	; 96
    1646:	29 f0       	breq	.+10     	; 0x1652 <__vector_26+0x54>
    1648:	80 91 b9 00 	lds	r24, 0x00B9
    164c:	88 7f       	andi	r24, 0xF8	; 248
    164e:	88 36       	cpi	r24, 0x68	; 104
    1650:	21 f4       	brne	.+8      	; 0x165a <__vector_26+0x5c>
			{
				instruction = 1;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 30 13 	sts	0x1330, r24
    1658:	71 c0       	rjmp	.+226    	; 0x173c <__vector_26+0x13e>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    165a:	80 91 b9 00 	lds	r24, 0x00B9
    165e:	88 7f       	andi	r24, 0xF8	; 248
    1660:	80 37       	cpi	r24, 0x70	; 112
    1662:	29 f0       	breq	.+10     	; 0x166e <__vector_26+0x70>
    1664:	80 91 b9 00 	lds	r24, 0x00B9
    1668:	88 7f       	andi	r24, 0xF8	; 248
    166a:	88 37       	cpi	r24, 0x78	; 120
    166c:	39 f4       	brne	.+14     	; 0x167c <__vector_26+0x7e>
			{
				currentInstruction = 255;
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	90 93 39 13 	sts	0x1339, r25
    1676:	80 93 38 13 	sts	0x1338, r24
    167a:	60 c0       	rjmp	.+192    	; 0x173c <__vector_26+0x13e>
			}
			else if(CONTROL == DATA_SLAW)
    167c:	80 91 b9 00 	lds	r24, 0x00B9
    1680:	88 7f       	andi	r24, 0xF8	; 248
    1682:	80 38       	cpi	r24, 0x80	; 128
    1684:	b9 f5       	brne	.+110    	; 0x16f4 <__vector_26+0xf6>
			{
				if(instruction)
    1686:	80 91 30 13 	lds	r24, 0x1330
    168a:	88 23       	and	r24, r24
    168c:	41 f0       	breq	.+16     	; 0x169e <__vector_26+0xa0>
				{
					currentInstruction = get_data();
    168e:	3b de       	rcall	.-906    	; 0x1306 <get_data>
    1690:	80 93 38 13 	sts	0x1338, r24
    1694:	10 92 39 13 	sts	0x1339, r1
					instruction = 0;
    1698:	10 92 30 13 	sts	0x1330, r1
    169c:	4f c0       	rjmp	.+158    	; 0x173c <__vector_26+0x13e>
				}
				else
				{
					switch(currentInstruction)
    169e:	80 91 38 13 	lds	r24, 0x1338
    16a2:	90 91 39 13 	lds	r25, 0x1339
    16a6:	85 30       	cpi	r24, 0x05	; 5
    16a8:	91 05       	cpc	r25, r1
    16aa:	71 f0       	breq	.+28     	; 0x16c8 <__vector_26+0xca>
    16ac:	24 f4       	brge	.+8      	; 0x16b6 <__vector_26+0xb8>
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <__vector_26+0xb6>
    16b2:	44 c0       	rjmp	.+136    	; 0x173c <__vector_26+0x13e>
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <__vector_26+0xc6>
    16b6:	86 30       	cpi	r24, 0x06	; 6
    16b8:	91 05       	cpc	r25, r1
    16ba:	51 f0       	breq	.+20     	; 0x16d0 <__vector_26+0xd2>
    16bc:	49 97       	sbiw	r24, 0x19	; 25
    16be:	09 f0       	breq	.+2      	; 0x16c2 <__vector_26+0xc4>
    16c0:	3d c0       	rjmp	.+122    	; 0x173c <__vector_26+0x13e>
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <__vector_26+0xce>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    16c4:	75 de       	rcall	.-790    	; 0x13b0 <get_control_settings_from_bus>
							break;
    16c6:	3a c0       	rjmp	.+116    	; 0x173c <__vector_26+0x13e>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    16c8:	84 de       	rcall	.-760    	; 0x13d2 <get_autonom_settings_from_bus>
							break;
    16ca:	38 c0       	rjmp	.+112    	; 0x173c <__vector_26+0x13e>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    16cc:	86 de       	rcall	.-756    	; 0x13da <get_char_from_bus>
							break;
    16ce:	36 c0       	rjmp	.+108    	; 0x173c <__vector_26+0x13e>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    16d0:	c0 91 2e 13 	lds	r28, 0x132E
    16d4:	d0 91 2f 13 	lds	r29, 0x132F
    16d8:	16 de       	rcall	.-980    	; 0x1306 <get_data>
    16da:	c1 5e       	subi	r28, 0xE1	; 225
    16dc:	dd 4e       	sbci	r29, 0xED	; 237
    16de:	88 83       	st	Y, r24
	floatCounter += 1;
    16e0:	80 91 2e 13 	lds	r24, 0x132E
    16e4:	90 91 2f 13 	lds	r25, 0x132F
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	90 93 2f 13 	sts	0x132F, r25
    16ee:	80 93 2e 13 	sts	0x132E, r24
    16f2:	24 c0       	rjmp	.+72     	; 0x173c <__vector_26+0x13e>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    16f4:	80 91 b9 00 	lds	r24, 0x00B9
    16f8:	88 7f       	andi	r24, 0xF8	; 248
    16fa:	80 39       	cpi	r24, 0x90	; 144
    16fc:	11 f4       	brne	.+4      	; 0x1702 <__vector_26+0x104>
			{
				get_sensor_from_bus();
    16fe:	2d de       	rcall	.-934    	; 0x135a <get_sensor_from_bus>
    1700:	1d c0       	rjmp	.+58     	; 0x173c <__vector_26+0x13e>
			}
			else if (CONTROL == STOP)
    1702:	80 91 b9 00 	lds	r24, 0x00B9
    1706:	88 7f       	andi	r24, 0xF8	; 248
    1708:	80 3a       	cpi	r24, 0xA0	; 160
    170a:	c1 f4       	brne	.+48     	; 0x173c <__vector_26+0x13e>
			{
				stop_twi();
    170c:	0b de       	rcall	.-1002   	; 0x1324 <stop_twi>
				switch(currentInstruction)
    170e:	80 91 38 13 	lds	r24, 0x1338
    1712:	90 91 39 13 	lds	r25, 0x1339
    1716:	85 30       	cpi	r24, 0x05	; 5
    1718:	91 05       	cpc	r25, r1
    171a:	49 f0       	breq	.+18     	; 0x172e <__vector_26+0x130>
    171c:	89 31       	cpi	r24, 0x19	; 25
    171e:	91 05       	cpc	r25, r1
    1720:	51 f0       	breq	.+20     	; 0x1736 <__vector_26+0x138>
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	59 f4       	brne	.+22     	; 0x173c <__vector_26+0x13e>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	80 93 1c 12 	sts	0x121C, r24
						break;
    172c:	07 c0       	rjmp	.+14     	; 0x173c <__vector_26+0x13e>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	80 93 1b 12 	sts	0x121B, r24
						break;
    1734:	03 c0       	rjmp	.+6      	; 0x173c <__vector_26+0x13e>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1736:	87 e2       	ldi	r24, 0x27	; 39
    1738:	92 e1       	ldi	r25, 0x12	; 18
    173a:	2b df       	rcall	.-426    	; 0x1592 <write_to_TwiFIFO>
						//USART_SendValue(floatMessage);
						break;
					}
				}
			}
			reset_TWI();
    173c:	08 de       	rcall	.-1008   	; 0x134e <reset_TWI>
			break;
    173e:	fd c0       	rjmp	.+506    	; 0x193a <__vector_26+0x33c>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1740:	80 91 b9 00 	lds	r24, 0x00B9
    1744:	88 7f       	andi	r24, 0xF8	; 248
    1746:	80 36       	cpi	r24, 0x60	; 96
    1748:	29 f0       	breq	.+10     	; 0x1754 <__vector_26+0x156>
    174a:	80 91 b9 00 	lds	r24, 0x00B9
    174e:	88 7f       	andi	r24, 0xF8	; 248
    1750:	88 36       	cpi	r24, 0x68	; 104
    1752:	21 f4       	brne	.+8      	; 0x175c <__vector_26+0x15e>
			{
				instruction = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	80 93 30 13 	sts	0x1330, r24
    175a:	38 c0       	rjmp	.+112    	; 0x17cc <__vector_26+0x1ce>
			}
			else if(CONTROL == DATA_SLAW)
    175c:	80 91 b9 00 	lds	r24, 0x00B9
    1760:	88 7f       	andi	r24, 0xF8	; 248
    1762:	80 38       	cpi	r24, 0x80	; 128
    1764:	e1 f4       	brne	.+56     	; 0x179e <__vector_26+0x1a0>
			{
				if(instruction)
    1766:	80 91 30 13 	lds	r24, 0x1330
    176a:	88 23       	and	r24, r24
    176c:	41 f0       	breq	.+16     	; 0x177e <__vector_26+0x180>
				{
					currentInstruction = get_data();
    176e:	cb dd       	rcall	.-1130   	; 0x1306 <get_data>
    1770:	80 93 38 13 	sts	0x1338, r24
    1774:	10 92 39 13 	sts	0x1339, r1
					instruction = 0;
    1778:	10 92 30 13 	sts	0x1330, r1
    177c:	27 c0       	rjmp	.+78     	; 0x17cc <__vector_26+0x1ce>
				}
				else
				{
					switch(currentInstruction)
    177e:	80 91 38 13 	lds	r24, 0x1338
    1782:	90 91 39 13 	lds	r25, 0x1339
    1786:	82 30       	cpi	r24, 0x02	; 2
    1788:	91 05       	cpc	r25, r1
    178a:	19 f0       	breq	.+6      	; 0x1792 <__vector_26+0x194>
    178c:	49 97       	sbiw	r24, 0x19	; 25
    178e:	f1 f4       	brne	.+60     	; 0x17cc <__vector_26+0x1ce>
    1790:	04 c0       	rjmp	.+8      	; 0x179a <__vector_26+0x19c>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    1792:	b9 dd       	rcall	.-1166   	; 0x1306 <get_data>
    1794:	80 93 37 13 	sts	0x1337, r24
    1798:	19 c0       	rjmp	.+50     	; 0x17cc <__vector_26+0x1ce>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    179a:	1f de       	rcall	.-962    	; 0x13da <get_char_from_bus>
							break;
    179c:	17 c0       	rjmp	.+46     	; 0x17cc <__vector_26+0x1ce>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    179e:	80 91 b9 00 	lds	r24, 0x00B9
    17a2:	88 7f       	andi	r24, 0xF8	; 248
    17a4:	80 3a       	cpi	r24, 0xA0	; 160
    17a6:	91 f4       	brne	.+36     	; 0x17cc <__vector_26+0x1ce>
			{
				stop_twi();
    17a8:	bd dd       	rcall	.-1158   	; 0x1324 <stop_twi>
				switch(currentInstruction)
    17aa:	80 91 38 13 	lds	r24, 0x1338
    17ae:	90 91 39 13 	lds	r25, 0x1339
    17b2:	82 30       	cpi	r24, 0x02	; 2
    17b4:	91 05       	cpc	r25, r1
    17b6:	19 f0       	breq	.+6      	; 0x17be <__vector_26+0x1c0>
    17b8:	49 97       	sbiw	r24, 0x19	; 25
    17ba:	41 f4       	brne	.+16     	; 0x17cc <__vector_26+0x1ce>
    17bc:	04 c0       	rjmp	.+8      	; 0x17c6 <__vector_26+0x1c8>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 93 19 12 	sts	0x1219, r24
						break;
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <__vector_26+0x1ce>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    17c6:	87 e2       	ldi	r24, 0x27	; 39
    17c8:	92 e1       	ldi	r25, 0x12	; 18
    17ca:	e3 de       	rcall	.-570    	; 0x1592 <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    17cc:	c0 dd       	rcall	.-1152   	; 0x134e <reset_TWI>
			break;
    17ce:	b5 c0       	rjmp	.+362    	; 0x193a <__vector_26+0x33c>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    17d0:	80 91 b9 00 	lds	r24, 0x00B9
    17d4:	88 7f       	andi	r24, 0xF8	; 248
    17d6:	80 36       	cpi	r24, 0x60	; 96
    17d8:	29 f0       	breq	.+10     	; 0x17e4 <__vector_26+0x1e6>
    17da:	80 91 b9 00 	lds	r24, 0x00B9
    17de:	88 7f       	andi	r24, 0xF8	; 248
    17e0:	88 36       	cpi	r24, 0x68	; 104
    17e2:	21 f4       	brne	.+8      	; 0x17ec <__vector_26+0x1ee>
			{
				instruction = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	80 93 30 13 	sts	0x1330, r24
    17ea:	a6 c0       	rjmp	.+332    	; 0x1938 <__vector_26+0x33a>
			}
			else if(CONTROL == GENERAL || CONTROL == ARBIT_GENERAL)
    17ec:	80 91 b9 00 	lds	r24, 0x00B9
    17f0:	88 7f       	andi	r24, 0xF8	; 248
    17f2:	80 37       	cpi	r24, 0x70	; 112
    17f4:	29 f0       	breq	.+10     	; 0x1800 <__vector_26+0x202>
    17f6:	80 91 b9 00 	lds	r24, 0x00B9
    17fa:	88 7f       	andi	r24, 0xF8	; 248
    17fc:	88 37       	cpi	r24, 0x78	; 120
    17fe:	39 f4       	brne	.+14     	; 0x180e <__vector_26+0x210>
			{
				currentInstruction = 255;
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	90 93 39 13 	sts	0x1339, r25
    1808:	80 93 38 13 	sts	0x1338, r24
    180c:	95 c0       	rjmp	.+298    	; 0x1938 <__vector_26+0x33a>
			}
			else if(CONTROL == DATA_SLAW)
    180e:	80 91 b9 00 	lds	r24, 0x00B9
    1812:	88 7f       	andi	r24, 0xF8	; 248
    1814:	80 38       	cpi	r24, 0x80	; 128
    1816:	09 f0       	breq	.+2      	; 0x181a <__vector_26+0x21c>
    1818:	62 c0       	rjmp	.+196    	; 0x18de <__vector_26+0x2e0>
			{
				if(instruction)
    181a:	80 91 30 13 	lds	r24, 0x1330
    181e:	88 23       	and	r24, r24
    1820:	41 f0       	breq	.+16     	; 0x1832 <__vector_26+0x234>
				{
					currentInstruction = get_data();
    1822:	71 dd       	rcall	.-1310   	; 0x1306 <get_data>
    1824:	80 93 38 13 	sts	0x1338, r24
    1828:	10 92 39 13 	sts	0x1339, r1
					instruction = 0;
    182c:	10 92 30 13 	sts	0x1330, r1
    1830:	83 c0       	rjmp	.+262    	; 0x1938 <__vector_26+0x33a>
				}
				else
				{
					switch(currentInstruction)
    1832:	80 91 38 13 	lds	r24, 0x1338
    1836:	90 91 39 13 	lds	r25, 0x1339
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <__vector_26+0x244>
    1840:	4a c0       	rjmp	.+148    	; 0x18d6 <__vector_26+0x2d8>
    1842:	1c f4       	brge	.+6      	; 0x184a <__vector_26+0x24c>
    1844:	89 2b       	or	r24, r25
    1846:	41 f0       	breq	.+16     	; 0x1858 <__vector_26+0x25a>
    1848:	77 c0       	rjmp	.+238    	; 0x1938 <__vector_26+0x33a>
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	91 05       	cpc	r25, r1
    184e:	b1 f0       	breq	.+44     	; 0x187c <__vector_26+0x27e>
    1850:	05 97       	sbiw	r24, 0x05	; 5
    1852:	09 f0       	breq	.+2      	; 0x1856 <__vector_26+0x258>
    1854:	71 c0       	rjmp	.+226    	; 0x1938 <__vector_26+0x33a>
    1856:	41 c0       	rjmp	.+130    	; 0x18da <__vector_26+0x2dc>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    1858:	c0 91 31 13 	lds	r28, 0x1331
    185c:	d0 91 32 13 	lds	r29, 0x1332
    1860:	52 dd       	rcall	.-1372   	; 0x1306 <get_data>
    1862:	cd 5d       	subi	r28, 0xDD	; 221
    1864:	dd 4e       	sbci	r29, 0xED	; 237
    1866:	88 83       	st	Y, r24
	currentCommand += 1;
    1868:	80 91 31 13 	lds	r24, 0x1331
    186c:	90 91 32 13 	lds	r25, 0x1332
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	90 93 32 13 	sts	0x1332, r25
    1876:	80 93 31 13 	sts	0x1331, r24
    187a:	5e c0       	rjmp	.+188    	; 0x1938 <__vector_26+0x33a>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	int ele = get_data();
    187c:	44 dd       	rcall	.-1400   	; 0x1306 <get_data>
	if(ele == 0)
    187e:	81 11       	cpse	r24, r1
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <__vector_26+0x298>
	{
		elevation -= 1;
    1882:	80 91 33 13 	lds	r24, 0x1333
    1886:	90 91 34 13 	lds	r25, 0x1334
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	90 93 34 13 	sts	0x1334, r25
    1890:	80 93 33 13 	sts	0x1333, r24
    1894:	09 c0       	rjmp	.+18     	; 0x18a8 <__vector_26+0x2aa>
	}
	else
	{
		elevation += 1;
    1896:	80 91 33 13 	lds	r24, 0x1333
    189a:	90 91 34 13 	lds	r25, 0x1334
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	90 93 34 13 	sts	0x1334, r25
    18a4:	80 93 33 13 	sts	0x1333, r24
	}
	if(elevation < 1)
    18a8:	80 91 33 13 	lds	r24, 0x1333
    18ac:	90 91 34 13 	lds	r25, 0x1334
    18b0:	18 16       	cp	r1, r24
    18b2:	19 06       	cpc	r1, r25
    18b4:	3c f0       	brlt	.+14     	; 0x18c4 <__vector_26+0x2c6>
	elevation = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	90 93 34 13 	sts	0x1334, r25
    18be:	80 93 33 13 	sts	0x1333, r24
    18c2:	3a c0       	rjmp	.+116    	; 0x1938 <__vector_26+0x33a>
	else if(elevation > 7) // 7 nivåer?!
    18c4:	08 97       	sbiw	r24, 0x08	; 8
    18c6:	c4 f1       	brlt	.+112    	; 0x1938 <__vector_26+0x33a>
	elevation = 7;
    18c8:	87 e0       	ldi	r24, 0x07	; 7
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	90 93 34 13 	sts	0x1334, r25
    18d0:	80 93 33 13 	sts	0x1333, r24
    18d4:	31 c0       	rjmp	.+98     	; 0x1938 <__vector_26+0x33a>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    18d6:	6c dd       	rcall	.-1320   	; 0x13b0 <get_control_settings_from_bus>
							break;
    18d8:	2f c0       	rjmp	.+94     	; 0x1938 <__vector_26+0x33a>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    18da:	7b dd       	rcall	.-1290   	; 0x13d2 <get_autonom_settings_from_bus>
							break;
    18dc:	2d c0       	rjmp	.+90     	; 0x1938 <__vector_26+0x33a>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    18de:	80 91 b9 00 	lds	r24, 0x00B9
    18e2:	88 7f       	andi	r24, 0xF8	; 248
    18e4:	80 39       	cpi	r24, 0x90	; 144
    18e6:	11 f4       	brne	.+4      	; 0x18ec <__vector_26+0x2ee>
			{
				get_sensor_from_bus();
    18e8:	38 dd       	rcall	.-1424   	; 0x135a <get_sensor_from_bus>
    18ea:	26 c0       	rjmp	.+76     	; 0x1938 <__vector_26+0x33a>
			}
			else if (CONTROL == STOP)
    18ec:	80 91 b9 00 	lds	r24, 0x00B9
    18f0:	88 7f       	andi	r24, 0xF8	; 248
    18f2:	80 3a       	cpi	r24, 0xA0	; 160
    18f4:	09 f5       	brne	.+66     	; 0x1938 <__vector_26+0x33a>
			{
				stop_twi();
    18f6:	16 dd       	rcall	.-1492   	; 0x1324 <stop_twi>
				switch(currentInstruction)
    18f8:	80 91 38 13 	lds	r24, 0x1338
    18fc:	90 91 39 13 	lds	r25, 0x1339
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	91 05       	cpc	r25, r1
    1904:	91 f0       	breq	.+36     	; 0x192a <__vector_26+0x32c>
    1906:	1c f4       	brge	.+6      	; 0x190e <__vector_26+0x310>
    1908:	89 2b       	or	r24, r25
    190a:	39 f0       	breq	.+14     	; 0x191a <__vector_26+0x31c>
    190c:	15 c0       	rjmp	.+42     	; 0x1938 <__vector_26+0x33a>
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	91 05       	cpc	r25, r1
    1912:	39 f0       	breq	.+14     	; 0x1922 <__vector_26+0x324>
    1914:	05 97       	sbiw	r24, 0x05	; 5
    1916:	81 f4       	brne	.+32     	; 0x1938 <__vector_26+0x33a>
    1918:	0c c0       	rjmp	.+24     	; 0x1932 <__vector_26+0x334>
				{
					case(I_COMMAND):
					{
						commandFlag_ = 1;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 1d 12 	sts	0x121D, r24
						break;
    1920:	0b c0       	rjmp	.+22     	; 0x1938 <__vector_26+0x33a>
					}
					case(I_ELEVATION):
					{
						elevationFlag_ = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	80 93 1a 12 	sts	0x121A, r24
						break;
    1928:	07 c0       	rjmp	.+14     	; 0x1938 <__vector_26+0x33a>
					}
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	80 93 1c 12 	sts	0x121C, r24
						break;
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <__vector_26+0x33a>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	80 93 1b 12 	sts	0x121B, r24
						break;
					}
				}
			}
			reset_TWI();
    1938:	0a dd       	rcall	.-1516   	; 0x134e <reset_TWI>
			break;
		}
	}
    193a:	ff 91       	pop	r31
    193c:	ef 91       	pop	r30
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	bf 91       	pop	r27
    1944:	af 91       	pop	r26
    1946:	9f 91       	pop	r25
    1948:	8f 91       	pop	r24
    194a:	7f 91       	pop	r23
    194c:	6f 91       	pop	r22
    194e:	5f 91       	pop	r21
    1950:	4f 91       	pop	r20
    1952:	3f 91       	pop	r19
    1954:	2f 91       	pop	r18
    1956:	0f 90       	pop	r0
    1958:	0b be       	out	0x3b, r0	; 59
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0
    1960:	1f 90       	pop	r1
    1962:	18 95       	reti

00001964 <__subsf3>:
    1964:	50 58       	subi	r21, 0x80	; 128

00001966 <__addsf3>:
    1966:	bb 27       	eor	r27, r27
    1968:	aa 27       	eor	r26, r26
    196a:	0e d0       	rcall	.+28     	; 0x1988 <__addsf3x>
    196c:	75 c1       	rjmp	.+746    	; 0x1c58 <__fp_round>
    196e:	66 d1       	rcall	.+716    	; 0x1c3c <__fp_pscA>
    1970:	30 f0       	brcs	.+12     	; 0x197e <__addsf3+0x18>
    1972:	6b d1       	rcall	.+726    	; 0x1c4a <__fp_pscB>
    1974:	20 f0       	brcs	.+8      	; 0x197e <__addsf3+0x18>
    1976:	31 f4       	brne	.+12     	; 0x1984 <__addsf3+0x1e>
    1978:	9f 3f       	cpi	r25, 0xFF	; 255
    197a:	11 f4       	brne	.+4      	; 0x1980 <__addsf3+0x1a>
    197c:	1e f4       	brtc	.+6      	; 0x1984 <__addsf3+0x1e>
    197e:	5b c1       	rjmp	.+694    	; 0x1c36 <__fp_nan>
    1980:	0e f4       	brtc	.+2      	; 0x1984 <__addsf3+0x1e>
    1982:	e0 95       	com	r30
    1984:	e7 fb       	bst	r30, 7
    1986:	51 c1       	rjmp	.+674    	; 0x1c2a <__fp_inf>

00001988 <__addsf3x>:
    1988:	e9 2f       	mov	r30, r25
    198a:	77 d1       	rcall	.+750    	; 0x1c7a <__fp_split3>
    198c:	80 f3       	brcs	.-32     	; 0x196e <__addsf3+0x8>
    198e:	ba 17       	cp	r27, r26
    1990:	62 07       	cpc	r22, r18
    1992:	73 07       	cpc	r23, r19
    1994:	84 07       	cpc	r24, r20
    1996:	95 07       	cpc	r25, r21
    1998:	18 f0       	brcs	.+6      	; 0x19a0 <__addsf3x+0x18>
    199a:	71 f4       	brne	.+28     	; 0x19b8 <__addsf3x+0x30>
    199c:	9e f5       	brtc	.+102    	; 0x1a04 <__addsf3x+0x7c>
    199e:	8f c1       	rjmp	.+798    	; 0x1cbe <__fp_zero>
    19a0:	0e f4       	brtc	.+2      	; 0x19a4 <__addsf3x+0x1c>
    19a2:	e0 95       	com	r30
    19a4:	0b 2e       	mov	r0, r27
    19a6:	ba 2f       	mov	r27, r26
    19a8:	a0 2d       	mov	r26, r0
    19aa:	0b 01       	movw	r0, r22
    19ac:	b9 01       	movw	r22, r18
    19ae:	90 01       	movw	r18, r0
    19b0:	0c 01       	movw	r0, r24
    19b2:	ca 01       	movw	r24, r20
    19b4:	a0 01       	movw	r20, r0
    19b6:	11 24       	eor	r1, r1
    19b8:	ff 27       	eor	r31, r31
    19ba:	59 1b       	sub	r21, r25
    19bc:	99 f0       	breq	.+38     	; 0x19e4 <__addsf3x+0x5c>
    19be:	59 3f       	cpi	r21, 0xF9	; 249
    19c0:	50 f4       	brcc	.+20     	; 0x19d6 <__addsf3x+0x4e>
    19c2:	50 3e       	cpi	r21, 0xE0	; 224
    19c4:	68 f1       	brcs	.+90     	; 0x1a20 <__addsf3x+0x98>
    19c6:	1a 16       	cp	r1, r26
    19c8:	f0 40       	sbci	r31, 0x00	; 0
    19ca:	a2 2f       	mov	r26, r18
    19cc:	23 2f       	mov	r18, r19
    19ce:	34 2f       	mov	r19, r20
    19d0:	44 27       	eor	r20, r20
    19d2:	58 5f       	subi	r21, 0xF8	; 248
    19d4:	f3 cf       	rjmp	.-26     	; 0x19bc <__addsf3x+0x34>
    19d6:	46 95       	lsr	r20
    19d8:	37 95       	ror	r19
    19da:	27 95       	ror	r18
    19dc:	a7 95       	ror	r26
    19de:	f0 40       	sbci	r31, 0x00	; 0
    19e0:	53 95       	inc	r21
    19e2:	c9 f7       	brne	.-14     	; 0x19d6 <__addsf3x+0x4e>
    19e4:	7e f4       	brtc	.+30     	; 0x1a04 <__addsf3x+0x7c>
    19e6:	1f 16       	cp	r1, r31
    19e8:	ba 0b       	sbc	r27, r26
    19ea:	62 0b       	sbc	r22, r18
    19ec:	73 0b       	sbc	r23, r19
    19ee:	84 0b       	sbc	r24, r20
    19f0:	ba f0       	brmi	.+46     	; 0x1a20 <__addsf3x+0x98>
    19f2:	91 50       	subi	r25, 0x01	; 1
    19f4:	a1 f0       	breq	.+40     	; 0x1a1e <__addsf3x+0x96>
    19f6:	ff 0f       	add	r31, r31
    19f8:	bb 1f       	adc	r27, r27
    19fa:	66 1f       	adc	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	c2 f7       	brpl	.-16     	; 0x19f2 <__addsf3x+0x6a>
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <__addsf3x+0x98>
    1a04:	ba 0f       	add	r27, r26
    1a06:	62 1f       	adc	r22, r18
    1a08:	73 1f       	adc	r23, r19
    1a0a:	84 1f       	adc	r24, r20
    1a0c:	48 f4       	brcc	.+18     	; 0x1a20 <__addsf3x+0x98>
    1a0e:	87 95       	ror	r24
    1a10:	77 95       	ror	r23
    1a12:	67 95       	ror	r22
    1a14:	b7 95       	ror	r27
    1a16:	f7 95       	ror	r31
    1a18:	9e 3f       	cpi	r25, 0xFE	; 254
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <__addsf3x+0x96>
    1a1c:	b3 cf       	rjmp	.-154    	; 0x1984 <__addsf3+0x1e>
    1a1e:	93 95       	inc	r25
    1a20:	88 0f       	add	r24, r24
    1a22:	08 f0       	brcs	.+2      	; 0x1a26 <__addsf3x+0x9e>
    1a24:	99 27       	eor	r25, r25
    1a26:	ee 0f       	add	r30, r30
    1a28:	97 95       	ror	r25
    1a2a:	87 95       	ror	r24
    1a2c:	08 95       	ret

00001a2e <__cmpsf2>:
    1a2e:	d9 d0       	rcall	.+434    	; 0x1be2 <__fp_cmp>
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <__cmpsf2+0x6>
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	08 95       	ret

00001a36 <__divsf3>:
    1a36:	0c d0       	rcall	.+24     	; 0x1a50 <__divsf3x>
    1a38:	0f c1       	rjmp	.+542    	; 0x1c58 <__fp_round>
    1a3a:	07 d1       	rcall	.+526    	; 0x1c4a <__fp_pscB>
    1a3c:	40 f0       	brcs	.+16     	; 0x1a4e <__divsf3+0x18>
    1a3e:	fe d0       	rcall	.+508    	; 0x1c3c <__fp_pscA>
    1a40:	30 f0       	brcs	.+12     	; 0x1a4e <__divsf3+0x18>
    1a42:	21 f4       	brne	.+8      	; 0x1a4c <__divsf3+0x16>
    1a44:	5f 3f       	cpi	r21, 0xFF	; 255
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <__divsf3+0x18>
    1a48:	f0 c0       	rjmp	.+480    	; 0x1c2a <__fp_inf>
    1a4a:	51 11       	cpse	r21, r1
    1a4c:	39 c1       	rjmp	.+626    	; 0x1cc0 <__fp_szero>
    1a4e:	f3 c0       	rjmp	.+486    	; 0x1c36 <__fp_nan>

00001a50 <__divsf3x>:
    1a50:	14 d1       	rcall	.+552    	; 0x1c7a <__fp_split3>
    1a52:	98 f3       	brcs	.-26     	; 0x1a3a <__divsf3+0x4>

00001a54 <__divsf3_pse>:
    1a54:	99 23       	and	r25, r25
    1a56:	c9 f3       	breq	.-14     	; 0x1a4a <__divsf3+0x14>
    1a58:	55 23       	and	r21, r21
    1a5a:	b1 f3       	breq	.-20     	; 0x1a48 <__divsf3+0x12>
    1a5c:	95 1b       	sub	r25, r21
    1a5e:	55 0b       	sbc	r21, r21
    1a60:	bb 27       	eor	r27, r27
    1a62:	aa 27       	eor	r26, r26
    1a64:	62 17       	cp	r22, r18
    1a66:	73 07       	cpc	r23, r19
    1a68:	84 07       	cpc	r24, r20
    1a6a:	38 f0       	brcs	.+14     	; 0x1a7a <__divsf3_pse+0x26>
    1a6c:	9f 5f       	subi	r25, 0xFF	; 255
    1a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	44 1f       	adc	r20, r20
    1a76:	aa 1f       	adc	r26, r26
    1a78:	a9 f3       	breq	.-22     	; 0x1a64 <__divsf3_pse+0x10>
    1a7a:	33 d0       	rcall	.+102    	; 0x1ae2 <__divsf3_pse+0x8e>
    1a7c:	0e 2e       	mov	r0, r30
    1a7e:	3a f0       	brmi	.+14     	; 0x1a8e <__divsf3_pse+0x3a>
    1a80:	e0 e8       	ldi	r30, 0x80	; 128
    1a82:	30 d0       	rcall	.+96     	; 0x1ae4 <__divsf3_pse+0x90>
    1a84:	91 50       	subi	r25, 0x01	; 1
    1a86:	50 40       	sbci	r21, 0x00	; 0
    1a88:	e6 95       	lsr	r30
    1a8a:	00 1c       	adc	r0, r0
    1a8c:	ca f7       	brpl	.-14     	; 0x1a80 <__divsf3_pse+0x2c>
    1a8e:	29 d0       	rcall	.+82     	; 0x1ae2 <__divsf3_pse+0x8e>
    1a90:	fe 2f       	mov	r31, r30
    1a92:	27 d0       	rcall	.+78     	; 0x1ae2 <__divsf3_pse+0x8e>
    1a94:	66 0f       	add	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	bb 1f       	adc	r27, r27
    1a9c:	26 17       	cp	r18, r22
    1a9e:	37 07       	cpc	r19, r23
    1aa0:	48 07       	cpc	r20, r24
    1aa2:	ab 07       	cpc	r26, r27
    1aa4:	b0 e8       	ldi	r27, 0x80	; 128
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <__divsf3_pse+0x56>
    1aa8:	bb 0b       	sbc	r27, r27
    1aaa:	80 2d       	mov	r24, r0
    1aac:	bf 01       	movw	r22, r30
    1aae:	ff 27       	eor	r31, r31
    1ab0:	93 58       	subi	r25, 0x83	; 131
    1ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab4:	2a f0       	brmi	.+10     	; 0x1ac0 <__divsf3_pse+0x6c>
    1ab6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ab8:	51 05       	cpc	r21, r1
    1aba:	68 f0       	brcs	.+26     	; 0x1ad6 <__divsf3_pse+0x82>
    1abc:	b6 c0       	rjmp	.+364    	; 0x1c2a <__fp_inf>
    1abe:	00 c1       	rjmp	.+512    	; 0x1cc0 <__fp_szero>
    1ac0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac2:	ec f3       	brlt	.-6      	; 0x1abe <__divsf3_pse+0x6a>
    1ac4:	98 3e       	cpi	r25, 0xE8	; 232
    1ac6:	dc f3       	brlt	.-10     	; 0x1abe <__divsf3_pse+0x6a>
    1ac8:	86 95       	lsr	r24
    1aca:	77 95       	ror	r23
    1acc:	67 95       	ror	r22
    1ace:	b7 95       	ror	r27
    1ad0:	f7 95       	ror	r31
    1ad2:	9f 5f       	subi	r25, 0xFF	; 255
    1ad4:	c9 f7       	brne	.-14     	; 0x1ac8 <__divsf3_pse+0x74>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	91 1d       	adc	r25, r1
    1ada:	96 95       	lsr	r25
    1adc:	87 95       	ror	r24
    1ade:	97 f9       	bld	r25, 7
    1ae0:	08 95       	ret
    1ae2:	e1 e0       	ldi	r30, 0x01	; 1
    1ae4:	66 0f       	add	r22, r22
    1ae6:	77 1f       	adc	r23, r23
    1ae8:	88 1f       	adc	r24, r24
    1aea:	bb 1f       	adc	r27, r27
    1aec:	62 17       	cp	r22, r18
    1aee:	73 07       	cpc	r23, r19
    1af0:	84 07       	cpc	r24, r20
    1af2:	ba 07       	cpc	r27, r26
    1af4:	20 f0       	brcs	.+8      	; 0x1afe <__divsf3_pse+0xaa>
    1af6:	62 1b       	sub	r22, r18
    1af8:	73 0b       	sbc	r23, r19
    1afa:	84 0b       	sbc	r24, r20
    1afc:	ba 0b       	sbc	r27, r26
    1afe:	ee 1f       	adc	r30, r30
    1b00:	88 f7       	brcc	.-30     	; 0x1ae4 <__divsf3_pse+0x90>
    1b02:	e0 95       	com	r30
    1b04:	08 95       	ret

00001b06 <__fixsfsi>:
    1b06:	04 d0       	rcall	.+8      	; 0x1b10 <__fixunssfsi>
    1b08:	68 94       	set
    1b0a:	b1 11       	cpse	r27, r1
    1b0c:	d9 c0       	rjmp	.+434    	; 0x1cc0 <__fp_szero>
    1b0e:	08 95       	ret

00001b10 <__fixunssfsi>:
    1b10:	bc d0       	rcall	.+376    	; 0x1c8a <__fp_splitA>
    1b12:	88 f0       	brcs	.+34     	; 0x1b36 <__fixunssfsi+0x26>
    1b14:	9f 57       	subi	r25, 0x7F	; 127
    1b16:	90 f0       	brcs	.+36     	; 0x1b3c <__fixunssfsi+0x2c>
    1b18:	b9 2f       	mov	r27, r25
    1b1a:	99 27       	eor	r25, r25
    1b1c:	b7 51       	subi	r27, 0x17	; 23
    1b1e:	a0 f0       	brcs	.+40     	; 0x1b48 <__fixunssfsi+0x38>
    1b20:	d1 f0       	breq	.+52     	; 0x1b56 <__fixunssfsi+0x46>
    1b22:	66 0f       	add	r22, r22
    1b24:	77 1f       	adc	r23, r23
    1b26:	88 1f       	adc	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	1a f0       	brmi	.+6      	; 0x1b32 <__fixunssfsi+0x22>
    1b2c:	ba 95       	dec	r27
    1b2e:	c9 f7       	brne	.-14     	; 0x1b22 <__fixunssfsi+0x12>
    1b30:	12 c0       	rjmp	.+36     	; 0x1b56 <__fixunssfsi+0x46>
    1b32:	b1 30       	cpi	r27, 0x01	; 1
    1b34:	81 f0       	breq	.+32     	; 0x1b56 <__fixunssfsi+0x46>
    1b36:	c3 d0       	rcall	.+390    	; 0x1cbe <__fp_zero>
    1b38:	b1 e0       	ldi	r27, 0x01	; 1
    1b3a:	08 95       	ret
    1b3c:	c0 c0       	rjmp	.+384    	; 0x1cbe <__fp_zero>
    1b3e:	67 2f       	mov	r22, r23
    1b40:	78 2f       	mov	r23, r24
    1b42:	88 27       	eor	r24, r24
    1b44:	b8 5f       	subi	r27, 0xF8	; 248
    1b46:	39 f0       	breq	.+14     	; 0x1b56 <__fixunssfsi+0x46>
    1b48:	b9 3f       	cpi	r27, 0xF9	; 249
    1b4a:	cc f3       	brlt	.-14     	; 0x1b3e <__fixunssfsi+0x2e>
    1b4c:	86 95       	lsr	r24
    1b4e:	77 95       	ror	r23
    1b50:	67 95       	ror	r22
    1b52:	b3 95       	inc	r27
    1b54:	d9 f7       	brne	.-10     	; 0x1b4c <__fixunssfsi+0x3c>
    1b56:	3e f4       	brtc	.+14     	; 0x1b66 <__fixunssfsi+0x56>
    1b58:	90 95       	com	r25
    1b5a:	80 95       	com	r24
    1b5c:	70 95       	com	r23
    1b5e:	61 95       	neg	r22
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	8f 4f       	sbci	r24, 0xFF	; 255
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	08 95       	ret

00001b68 <__floatunsisf>:
    1b68:	e8 94       	clt
    1b6a:	09 c0       	rjmp	.+18     	; 0x1b7e <__floatsisf+0x12>

00001b6c <__floatsisf>:
    1b6c:	97 fb       	bst	r25, 7
    1b6e:	3e f4       	brtc	.+14     	; 0x1b7e <__floatsisf+0x12>
    1b70:	90 95       	com	r25
    1b72:	80 95       	com	r24
    1b74:	70 95       	com	r23
    1b76:	61 95       	neg	r22
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	99 23       	and	r25, r25
    1b80:	a9 f0       	breq	.+42     	; 0x1bac <__floatsisf+0x40>
    1b82:	f9 2f       	mov	r31, r25
    1b84:	96 e9       	ldi	r25, 0x96	; 150
    1b86:	bb 27       	eor	r27, r27
    1b88:	93 95       	inc	r25
    1b8a:	f6 95       	lsr	r31
    1b8c:	87 95       	ror	r24
    1b8e:	77 95       	ror	r23
    1b90:	67 95       	ror	r22
    1b92:	b7 95       	ror	r27
    1b94:	f1 11       	cpse	r31, r1
    1b96:	f8 cf       	rjmp	.-16     	; 0x1b88 <__floatsisf+0x1c>
    1b98:	fa f4       	brpl	.+62     	; 0x1bd8 <__floatsisf+0x6c>
    1b9a:	bb 0f       	add	r27, r27
    1b9c:	11 f4       	brne	.+4      	; 0x1ba2 <__floatsisf+0x36>
    1b9e:	60 ff       	sbrs	r22, 0
    1ba0:	1b c0       	rjmp	.+54     	; 0x1bd8 <__floatsisf+0x6c>
    1ba2:	6f 5f       	subi	r22, 0xFF	; 255
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	16 c0       	rjmp	.+44     	; 0x1bd8 <__floatsisf+0x6c>
    1bac:	88 23       	and	r24, r24
    1bae:	11 f0       	breq	.+4      	; 0x1bb4 <__floatsisf+0x48>
    1bb0:	96 e9       	ldi	r25, 0x96	; 150
    1bb2:	11 c0       	rjmp	.+34     	; 0x1bd6 <__floatsisf+0x6a>
    1bb4:	77 23       	and	r23, r23
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <__floatsisf+0x54>
    1bb8:	9e e8       	ldi	r25, 0x8E	; 142
    1bba:	87 2f       	mov	r24, r23
    1bbc:	76 2f       	mov	r23, r22
    1bbe:	05 c0       	rjmp	.+10     	; 0x1bca <__floatsisf+0x5e>
    1bc0:	66 23       	and	r22, r22
    1bc2:	71 f0       	breq	.+28     	; 0x1be0 <__floatsisf+0x74>
    1bc4:	96 e8       	ldi	r25, 0x86	; 134
    1bc6:	86 2f       	mov	r24, r22
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	2a f0       	brmi	.+10     	; 0x1bd8 <__floatsisf+0x6c>
    1bce:	9a 95       	dec	r25
    1bd0:	66 0f       	add	r22, r22
    1bd2:	77 1f       	adc	r23, r23
    1bd4:	88 1f       	adc	r24, r24
    1bd6:	da f7       	brpl	.-10     	; 0x1bce <__floatsisf+0x62>
    1bd8:	88 0f       	add	r24, r24
    1bda:	96 95       	lsr	r25
    1bdc:	87 95       	ror	r24
    1bde:	97 f9       	bld	r25, 7
    1be0:	08 95       	ret

00001be2 <__fp_cmp>:
    1be2:	99 0f       	add	r25, r25
    1be4:	00 08       	sbc	r0, r0
    1be6:	55 0f       	add	r21, r21
    1be8:	aa 0b       	sbc	r26, r26
    1bea:	e0 e8       	ldi	r30, 0x80	; 128
    1bec:	fe ef       	ldi	r31, 0xFE	; 254
    1bee:	16 16       	cp	r1, r22
    1bf0:	17 06       	cpc	r1, r23
    1bf2:	e8 07       	cpc	r30, r24
    1bf4:	f9 07       	cpc	r31, r25
    1bf6:	c0 f0       	brcs	.+48     	; 0x1c28 <__fp_cmp+0x46>
    1bf8:	12 16       	cp	r1, r18
    1bfa:	13 06       	cpc	r1, r19
    1bfc:	e4 07       	cpc	r30, r20
    1bfe:	f5 07       	cpc	r31, r21
    1c00:	98 f0       	brcs	.+38     	; 0x1c28 <__fp_cmp+0x46>
    1c02:	62 1b       	sub	r22, r18
    1c04:	73 0b       	sbc	r23, r19
    1c06:	84 0b       	sbc	r24, r20
    1c08:	95 0b       	sbc	r25, r21
    1c0a:	39 f4       	brne	.+14     	; 0x1c1a <__fp_cmp+0x38>
    1c0c:	0a 26       	eor	r0, r26
    1c0e:	61 f0       	breq	.+24     	; 0x1c28 <__fp_cmp+0x46>
    1c10:	23 2b       	or	r18, r19
    1c12:	24 2b       	or	r18, r20
    1c14:	25 2b       	or	r18, r21
    1c16:	21 f4       	brne	.+8      	; 0x1c20 <__fp_cmp+0x3e>
    1c18:	08 95       	ret
    1c1a:	0a 26       	eor	r0, r26
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <__fp_cmp+0x3e>
    1c1e:	a1 40       	sbci	r26, 0x01	; 1
    1c20:	a6 95       	lsr	r26
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	81 1d       	adc	r24, r1
    1c26:	81 1d       	adc	r24, r1
    1c28:	08 95       	ret

00001c2a <__fp_inf>:
    1c2a:	97 f9       	bld	r25, 7
    1c2c:	9f 67       	ori	r25, 0x7F	; 127
    1c2e:	80 e8       	ldi	r24, 0x80	; 128
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	08 95       	ret

00001c36 <__fp_nan>:
    1c36:	9f ef       	ldi	r25, 0xFF	; 255
    1c38:	80 ec       	ldi	r24, 0xC0	; 192
    1c3a:	08 95       	ret

00001c3c <__fp_pscA>:
    1c3c:	00 24       	eor	r0, r0
    1c3e:	0a 94       	dec	r0
    1c40:	16 16       	cp	r1, r22
    1c42:	17 06       	cpc	r1, r23
    1c44:	18 06       	cpc	r1, r24
    1c46:	09 06       	cpc	r0, r25
    1c48:	08 95       	ret

00001c4a <__fp_pscB>:
    1c4a:	00 24       	eor	r0, r0
    1c4c:	0a 94       	dec	r0
    1c4e:	12 16       	cp	r1, r18
    1c50:	13 06       	cpc	r1, r19
    1c52:	14 06       	cpc	r1, r20
    1c54:	05 06       	cpc	r0, r21
    1c56:	08 95       	ret

00001c58 <__fp_round>:
    1c58:	09 2e       	mov	r0, r25
    1c5a:	03 94       	inc	r0
    1c5c:	00 0c       	add	r0, r0
    1c5e:	11 f4       	brne	.+4      	; 0x1c64 <__fp_round+0xc>
    1c60:	88 23       	and	r24, r24
    1c62:	52 f0       	brmi	.+20     	; 0x1c78 <__fp_round+0x20>
    1c64:	bb 0f       	add	r27, r27
    1c66:	40 f4       	brcc	.+16     	; 0x1c78 <__fp_round+0x20>
    1c68:	bf 2b       	or	r27, r31
    1c6a:	11 f4       	brne	.+4      	; 0x1c70 <__fp_round+0x18>
    1c6c:	60 ff       	sbrs	r22, 0
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <__fp_round+0x20>
    1c70:	6f 5f       	subi	r22, 0xFF	; 255
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	8f 4f       	sbci	r24, 0xFF	; 255
    1c76:	9f 4f       	sbci	r25, 0xFF	; 255
    1c78:	08 95       	ret

00001c7a <__fp_split3>:
    1c7a:	57 fd       	sbrc	r21, 7
    1c7c:	90 58       	subi	r25, 0x80	; 128
    1c7e:	44 0f       	add	r20, r20
    1c80:	55 1f       	adc	r21, r21
    1c82:	59 f0       	breq	.+22     	; 0x1c9a <__fp_splitA+0x10>
    1c84:	5f 3f       	cpi	r21, 0xFF	; 255
    1c86:	71 f0       	breq	.+28     	; 0x1ca4 <__fp_splitA+0x1a>
    1c88:	47 95       	ror	r20

00001c8a <__fp_splitA>:
    1c8a:	88 0f       	add	r24, r24
    1c8c:	97 fb       	bst	r25, 7
    1c8e:	99 1f       	adc	r25, r25
    1c90:	61 f0       	breq	.+24     	; 0x1caa <__fp_splitA+0x20>
    1c92:	9f 3f       	cpi	r25, 0xFF	; 255
    1c94:	79 f0       	breq	.+30     	; 0x1cb4 <__fp_splitA+0x2a>
    1c96:	87 95       	ror	r24
    1c98:	08 95       	ret
    1c9a:	12 16       	cp	r1, r18
    1c9c:	13 06       	cpc	r1, r19
    1c9e:	14 06       	cpc	r1, r20
    1ca0:	55 1f       	adc	r21, r21
    1ca2:	f2 cf       	rjmp	.-28     	; 0x1c88 <__fp_split3+0xe>
    1ca4:	46 95       	lsr	r20
    1ca6:	f1 df       	rcall	.-30     	; 0x1c8a <__fp_splitA>
    1ca8:	08 c0       	rjmp	.+16     	; 0x1cba <__fp_splitA+0x30>
    1caa:	16 16       	cp	r1, r22
    1cac:	17 06       	cpc	r1, r23
    1cae:	18 06       	cpc	r1, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	f1 cf       	rjmp	.-30     	; 0x1c96 <__fp_splitA+0xc>
    1cb4:	86 95       	lsr	r24
    1cb6:	71 05       	cpc	r23, r1
    1cb8:	61 05       	cpc	r22, r1
    1cba:	08 94       	sec
    1cbc:	08 95       	ret

00001cbe <__fp_zero>:
    1cbe:	e8 94       	clt

00001cc0 <__fp_szero>:
    1cc0:	bb 27       	eor	r27, r27
    1cc2:	66 27       	eor	r22, r22
    1cc4:	77 27       	eor	r23, r23
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	97 f9       	bld	r25, 7
    1cca:	08 95       	ret

00001ccc <__gesf2>:
    1ccc:	8a df       	rcall	.-236    	; 0x1be2 <__fp_cmp>
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <__gesf2+0x6>
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	08 95       	ret

00001cd4 <__mulsf3>:
    1cd4:	0b d0       	rcall	.+22     	; 0x1cec <__mulsf3x>
    1cd6:	c0 cf       	rjmp	.-128    	; 0x1c58 <__fp_round>
    1cd8:	b1 df       	rcall	.-158    	; 0x1c3c <__fp_pscA>
    1cda:	28 f0       	brcs	.+10     	; 0x1ce6 <__mulsf3+0x12>
    1cdc:	b6 df       	rcall	.-148    	; 0x1c4a <__fp_pscB>
    1cde:	18 f0       	brcs	.+6      	; 0x1ce6 <__mulsf3+0x12>
    1ce0:	95 23       	and	r25, r21
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <__mulsf3+0x12>
    1ce4:	a2 cf       	rjmp	.-188    	; 0x1c2a <__fp_inf>
    1ce6:	a7 cf       	rjmp	.-178    	; 0x1c36 <__fp_nan>
    1ce8:	11 24       	eor	r1, r1
    1cea:	ea cf       	rjmp	.-44     	; 0x1cc0 <__fp_szero>

00001cec <__mulsf3x>:
    1cec:	c6 df       	rcall	.-116    	; 0x1c7a <__fp_split3>
    1cee:	a0 f3       	brcs	.-24     	; 0x1cd8 <__mulsf3+0x4>

00001cf0 <__mulsf3_pse>:
    1cf0:	95 9f       	mul	r25, r21
    1cf2:	d1 f3       	breq	.-12     	; 0x1ce8 <__mulsf3+0x14>
    1cf4:	95 0f       	add	r25, r21
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	62 9f       	mul	r22, r18
    1cfc:	f0 01       	movw	r30, r0
    1cfe:	72 9f       	mul	r23, r18
    1d00:	bb 27       	eor	r27, r27
    1d02:	f0 0d       	add	r31, r0
    1d04:	b1 1d       	adc	r27, r1
    1d06:	63 9f       	mul	r22, r19
    1d08:	aa 27       	eor	r26, r26
    1d0a:	f0 0d       	add	r31, r0
    1d0c:	b1 1d       	adc	r27, r1
    1d0e:	aa 1f       	adc	r26, r26
    1d10:	64 9f       	mul	r22, r20
    1d12:	66 27       	eor	r22, r22
    1d14:	b0 0d       	add	r27, r0
    1d16:	a1 1d       	adc	r26, r1
    1d18:	66 1f       	adc	r22, r22
    1d1a:	82 9f       	mul	r24, r18
    1d1c:	22 27       	eor	r18, r18
    1d1e:	b0 0d       	add	r27, r0
    1d20:	a1 1d       	adc	r26, r1
    1d22:	62 1f       	adc	r22, r18
    1d24:	73 9f       	mul	r23, r19
    1d26:	b0 0d       	add	r27, r0
    1d28:	a1 1d       	adc	r26, r1
    1d2a:	62 1f       	adc	r22, r18
    1d2c:	83 9f       	mul	r24, r19
    1d2e:	a0 0d       	add	r26, r0
    1d30:	61 1d       	adc	r22, r1
    1d32:	22 1f       	adc	r18, r18
    1d34:	74 9f       	mul	r23, r20
    1d36:	33 27       	eor	r19, r19
    1d38:	a0 0d       	add	r26, r0
    1d3a:	61 1d       	adc	r22, r1
    1d3c:	23 1f       	adc	r18, r19
    1d3e:	84 9f       	mul	r24, r20
    1d40:	60 0d       	add	r22, r0
    1d42:	21 1d       	adc	r18, r1
    1d44:	82 2f       	mov	r24, r18
    1d46:	76 2f       	mov	r23, r22
    1d48:	6a 2f       	mov	r22, r26
    1d4a:	11 24       	eor	r1, r1
    1d4c:	9f 57       	subi	r25, 0x7F	; 127
    1d4e:	50 40       	sbci	r21, 0x00	; 0
    1d50:	8a f0       	brmi	.+34     	; 0x1d74 <__mulsf3_pse+0x84>
    1d52:	e1 f0       	breq	.+56     	; 0x1d8c <__mulsf3_pse+0x9c>
    1d54:	88 23       	and	r24, r24
    1d56:	4a f0       	brmi	.+18     	; 0x1d6a <__mulsf3_pse+0x7a>
    1d58:	ee 0f       	add	r30, r30
    1d5a:	ff 1f       	adc	r31, r31
    1d5c:	bb 1f       	adc	r27, r27
    1d5e:	66 1f       	adc	r22, r22
    1d60:	77 1f       	adc	r23, r23
    1d62:	88 1f       	adc	r24, r24
    1d64:	91 50       	subi	r25, 0x01	; 1
    1d66:	50 40       	sbci	r21, 0x00	; 0
    1d68:	a9 f7       	brne	.-22     	; 0x1d54 <__mulsf3_pse+0x64>
    1d6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6c:	51 05       	cpc	r21, r1
    1d6e:	70 f0       	brcs	.+28     	; 0x1d8c <__mulsf3_pse+0x9c>
    1d70:	5c cf       	rjmp	.-328    	; 0x1c2a <__fp_inf>
    1d72:	a6 cf       	rjmp	.-180    	; 0x1cc0 <__fp_szero>
    1d74:	5f 3f       	cpi	r21, 0xFF	; 255
    1d76:	ec f3       	brlt	.-6      	; 0x1d72 <__mulsf3_pse+0x82>
    1d78:	98 3e       	cpi	r25, 0xE8	; 232
    1d7a:	dc f3       	brlt	.-10     	; 0x1d72 <__mulsf3_pse+0x82>
    1d7c:	86 95       	lsr	r24
    1d7e:	77 95       	ror	r23
    1d80:	67 95       	ror	r22
    1d82:	b7 95       	ror	r27
    1d84:	f7 95       	ror	r31
    1d86:	e7 95       	ror	r30
    1d88:	9f 5f       	subi	r25, 0xFF	; 255
    1d8a:	c1 f7       	brne	.-16     	; 0x1d7c <__mulsf3_pse+0x8c>
    1d8c:	fe 2b       	or	r31, r30
    1d8e:	88 0f       	add	r24, r24
    1d90:	91 1d       	adc	r25, r1
    1d92:	96 95       	lsr	r25
    1d94:	87 95       	ror	r24
    1d96:	97 f9       	bld	r25, 7
    1d98:	08 95       	ret

00001d9a <__divmodhi4>:
    1d9a:	97 fb       	bst	r25, 7
    1d9c:	07 2e       	mov	r0, r23
    1d9e:	16 f4       	brtc	.+4      	; 0x1da4 <__divmodhi4+0xa>
    1da0:	00 94       	com	r0
    1da2:	06 d0       	rcall	.+12     	; 0x1db0 <__divmodhi4_neg1>
    1da4:	77 fd       	sbrc	r23, 7
    1da6:	08 d0       	rcall	.+16     	; 0x1db8 <__divmodhi4_neg2>
    1da8:	0b d0       	rcall	.+22     	; 0x1dc0 <__udivmodhi4>
    1daa:	07 fc       	sbrc	r0, 7
    1dac:	05 d0       	rcall	.+10     	; 0x1db8 <__divmodhi4_neg2>
    1dae:	3e f4       	brtc	.+14     	; 0x1dbe <__divmodhi4_exit>

00001db0 <__divmodhi4_neg1>:
    1db0:	90 95       	com	r25
    1db2:	81 95       	neg	r24
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	08 95       	ret

00001db8 <__divmodhi4_neg2>:
    1db8:	70 95       	com	r23
    1dba:	61 95       	neg	r22
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255

00001dbe <__divmodhi4_exit>:
    1dbe:	08 95       	ret

00001dc0 <__udivmodhi4>:
    1dc0:	aa 1b       	sub	r26, r26
    1dc2:	bb 1b       	sub	r27, r27
    1dc4:	51 e1       	ldi	r21, 0x11	; 17
    1dc6:	07 c0       	rjmp	.+14     	; 0x1dd6 <__udivmodhi4_ep>

00001dc8 <__udivmodhi4_loop>:
    1dc8:	aa 1f       	adc	r26, r26
    1dca:	bb 1f       	adc	r27, r27
    1dcc:	a6 17       	cp	r26, r22
    1dce:	b7 07       	cpc	r27, r23
    1dd0:	10 f0       	brcs	.+4      	; 0x1dd6 <__udivmodhi4_ep>
    1dd2:	a6 1b       	sub	r26, r22
    1dd4:	b7 0b       	sbc	r27, r23

00001dd6 <__udivmodhi4_ep>:
    1dd6:	88 1f       	adc	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	5a 95       	dec	r21
    1ddc:	a9 f7       	brne	.-22     	; 0x1dc8 <__udivmodhi4_loop>
    1dde:	80 95       	com	r24
    1de0:	90 95       	com	r25
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	08 95       	ret

00001de8 <_exit>:
    1de8:	f8 94       	cli

00001dea <__stop_program>:
    1dea:	ff cf       	rjmp	.-2      	; 0x1dea <__stop_program>
