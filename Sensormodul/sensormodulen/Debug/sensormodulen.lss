
sensormodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001056  00800100  00001dac  00001e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  00801156  00801156  00002e96  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  00002e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000932  00000000  00000000  000052e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005c12  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d0  00000000  00000000  00005c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a12  00000000  00000000  00005f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b77  00000000  00000000  00008923  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001eca  00000000  00000000  0000949a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e4  00000000  00000000  0000b364  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000905  00000000  00000000  0000bc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000201e  00000000  00000000  0000c54d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e8  00000000  00000000  0000e56b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__vector_4>
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	52 c2       	rjmp	.+1188   	; 0x4da <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2e c6       	rjmp	.+3164   	; 0xcbe <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_26>
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c2       	rjmp	.+1198   	; 0x530 <__vector_32>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e1       	ldi	r17, 0x11	; 17
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ea       	ldi	r30, 0xAC	; 172
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 35       	cpi	r26, 0x56	; 86
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e1       	ldi	r18, 0x13	; 19
      b4:	a6 e5       	ldi	r26, 0x56	; 86
      b6:	b1 e1       	ldi	r27, 0x11	; 17
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 37       	cpi	r26, 0x74	; 116
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	eb d1       	rcall	.+982    	; 0x49a <main>
      c4:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <set_counter_1>:
	TCNT3 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
      ca:	bc 01       	movw	r22, r24
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__floatunsisf>
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	4a e7       	ldi	r20, 0x7A	; 122
      da:	51 e4       	ldi	r21, 0x41	; 65
      dc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__mulsf3>
      e0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__fixunssfsi>
	OCR1A = delay;
      e4:	70 93 89 00 	sts	0x0089, r23
      e8:	60 93 88 00 	sts	0x0088, r22
      ec:	08 95       	ret

000000ee <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
      ee:	bc 01       	movw	r22, r24
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__floatunsisf>
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4a e7       	ldi	r20, 0x7A	; 122
      fe:	51 e4       	ldi	r21, 0x41	; 65
     100:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__mulsf3>
     104:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__fixunssfsi>
	OCR3A = delay;
     108:	70 93 99 00 	sts	0x0099, r23
     10c:	60 93 98 00 	sts	0x0098, r22
     110:	08 95       	ret

00000112 <init_counters>:
// OBS: fick byta timer 2 mot timer 3 så kommentarerna nedan stämmer inte riktigt...
//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     112:	e1 e8       	ldi	r30, 0x81	; 129
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	85 60       	ori	r24, 0x05	; 5
     11a:	80 83       	st	Z, r24
	TCCR3B |= 0b00000101; // clock 2, prescaler 1024
     11c:	e1 e9       	ldi	r30, 0x91	; 145
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	85 60       	ori	r24, 0x05	; 5
     124:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     126:	88 ee       	ldi	r24, 0xE8	; 232
     128:	93 e0       	ldi	r25, 0x03	; 3
     12a:	cf df       	rcall	.-98     	; 0xca <set_counter_1>
	set_counter_2(1000);
     12c:	88 ee       	ldi	r24, 0xE8	; 232
     12e:	93 e0       	ldi	r25, 0x03	; 3
     130:	de df       	rcall	.-68     	; 0xee <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     132:	ef e6       	ldi	r30, 0x6F	; 111
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	82 60       	ori	r24, 0x02	; 2
     13a:	80 83       	st	Z, r24
	TIMSK3 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     13c:	e1 e7       	ldi	r30, 0x71	; 113
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	82 60       	ori	r24, 0x02	; 2
     144:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     146:	10 92 85 00 	sts	0x0085, r1
     14a:	10 92 84 00 	sts	0x0084, r1
	TCNT3 = 0;
     14e:	10 92 95 00 	sts	0x0095, r1
     152:	10 92 94 00 	sts	0x0094, r1
     156:	08 95       	ret

00000158 <toggle_enable>:
	toggle_enable();
}

void toggle_enable()
{
	PORTD |= (1<<PORTD6);
     158:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	8f e3       	ldi	r24, 0x3F	; 63
     15c:	9c e9       	ldi	r25, 0x9C	; 156
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <toggle_enable+0x6>
     162:	00 c0       	rjmp	.+0      	; 0x164 <toggle_enable+0xc>
     164:	00 00       	nop
	_delay_ms(10);
	PORTD &= !(1<<PORTD6);
     166:	8b b1       	in	r24, 0x0b	; 11
     168:	1b b8       	out	0x0b, r1	; 11
     16a:	08 95       	ret

0000016c <display_init>:
static void print_digit(int digit);
static uint8_t display_read_adress();

void display_init()
{
	DDRB = 255;
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b11100000;
     170:	8a b1       	in	r24, 0x0a	; 10
     172:	80 6e       	ori	r24, 0xE0	; 224
     174:	8a b9       	out	0x0a, r24	; 10
	
	//TODO: fix this....
	PORTD &= !(1<<PORTD5) | !(1<<PORTD7); //Instruction mode, Write mode
     176:	8b b1       	in	r24, 0x0b	; 11
     178:	1b b8       	out	0x0b, r1	; 11
     17a:	2f e7       	ldi	r18, 0x7F	; 127
     17c:	83 e8       	ldi	r24, 0x83	; 131
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	21 50       	subi	r18, 0x01	; 1
     182:	80 40       	sbci	r24, 0x00	; 0
     184:	90 40       	sbci	r25, 0x00	; 0
     186:	e1 f7       	brne	.-8      	; 0x180 <display_init+0x14>
     188:	00 c0       	rjmp	.+0      	; 0x18a <display_init+0x1e>
     18a:	00 00       	nop
	_delay_ms(31);
	PORTB = 0b00111000; //Function set
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     190:	e3 df       	rcall	.-58     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     192:	25 ed       	ldi	r18, 0xD5	; 213
     194:	2a 95       	dec	r18
     196:	f1 f7       	brne	.-4      	; 0x194 <display_init+0x28>
     198:	00 00       	nop
	_delay_us(40);
	PORTB = 0b00001111; //Display control
     19a:	8f e0       	ldi	r24, 0x0F	; 15
     19c:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     19e:	dc df       	rcall	.-72     	; 0x158 <toggle_enable>
     1a0:	85 ed       	ldi	r24, 0xD5	; 213
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <display_init+0x36>
     1a6:	00 00       	nop
	_delay_us(40);
	PORTB = 0b00000001; //Clear Display
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1ac:	d5 df       	rcall	.-86     	; 0x158 <toggle_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ae:	8f e3       	ldi	r24, 0x3F	; 63
     1b0:	9f e1       	ldi	r25, 0x1F	; 31
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <display_init+0x46>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <display_init+0x4c>
     1b8:	00 00       	nop
	_delay_ms(2);
	PORTB = 0b00000110; //Set entry mode
     1ba:	86 e0       	ldi	r24, 0x06	; 6
     1bc:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1be:	cc cf       	rjmp	.-104    	; 0x158 <toggle_enable>

000001c0 <display_clear>:
	}
}

void display_clear()
{
	PORTB = 1<<PORTB0; //Clear Display
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	85 b9       	out	0x05, r24	; 5
	toggle_enable();
     1c4:	c9 df       	rcall	.-110    	; 0x158 <toggle_enable>
	toggle_enable();
     1c6:	c8 cf       	rjmp	.-112    	; 0x158 <toggle_enable>

000001c8 <display_set_pos>:
}

void display_set_pos(int line, int pos)
{
	PORTD  &= !(1<<PORTD5); //RS = 0 (Instruction mode)
     1c8:	2b b1       	in	r18, 0x0b	; 11
     1ca:	1b b8       	out	0x0b, r1	; 11
	int data;
	switch(line)
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	91 05       	cpc	r25, r1
     1d0:	41 f0       	breq	.+16     	; 0x1e2 <display_set_pos+0x1a>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	91 05       	cpc	r25, r1
     1d6:	41 f0       	breq	.+16     	; 0x1e8 <display_set_pos+0x20>
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	49 f0       	breq	.+18     	; 0x1ee <display_set_pos+0x26>
	{
		case 0:
		data = 0b10000000;
     1dc:	80 e8       	ldi	r24, 0x80	; 128
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <display_set_pos+0x2a>
		break;
		case 1:
		data = 0b11000000;
		break;
		case 2:
		data = 0b10010000;
     1e2:	80 e9       	ldi	r24, 0x90	; 144
     1e4:	90 e0       	ldi	r25, 0x00	; 0
		break;
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <display_set_pos+0x2a>
		case 3:
		data = 0b11010000;
     1e8:	80 ed       	ldi	r24, 0xD0	; 208
     1ea:	90 e0       	ldi	r25, 0x00	; 0
		break;
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <display_set_pos+0x2a>
	{
		case 0:
		data = 0b10000000;
		break;
		case 1:
		data = 0b11000000;
     1ee:	80 ec       	ldi	r24, 0xC0	; 192
     1f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		data = 0b10000000;
		break;
	}
	data += pos;
     1f2:	68 0f       	add	r22, r24
     1f4:	79 1f       	adc	r23, r25
	
	PORTB = data; //Set adress
     1f6:	65 b9       	out	0x05, r22	; 5
	toggle_enable();
     1f8:	af cf       	rjmp	.-162    	; 0x158 <toggle_enable>

000001fa <display_char>:
	_delay_ms(10);
	PORTD &= !(1<<PORTD6);
}

void display_char(char c)
{
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	d8 2f       	mov	r29, r24
	_delay_us(10);
	toggle_enable();
	if(PINB & (1<<PINB7))
	{
		PORTD &= ~(1<<PORTD7);
		DDRB = 255;
     200:	cf ef       	ldi	r28, 0xFF	; 255
	}
}

int display_busy()
{
	PORTB = 0;
     202:	15 b8       	out	0x05, r1	; 5
	DDRB = 0;
     204:	14 b8       	out	0x04, r1	; 4
	PORTD &= ~(1<<PORTD5); //Instruction mode
     206:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= (1<<PORTD7); //Read mode
     208:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	85 e3       	ldi	r24, 0x35	; 53
     20c:	8a 95       	dec	r24
     20e:	f1 f7       	brne	.-4      	; 0x20c <display_char+0x12>
     210:	00 00       	nop
	_delay_us(10);
	toggle_enable();
     212:	a2 df       	rcall	.-188    	; 0x158 <toggle_enable>
	if(PINB & (1<<PINB7))
     214:	1f 9b       	sbis	0x03, 7	; 3
     216:	03 c0       	rjmp	.+6      	; 0x21e <display_char+0x24>
	{
		PORTD &= ~(1<<PORTD7);
     218:	5f 98       	cbi	0x0b, 7	; 11
		DDRB = 255;
     21a:	c4 b9       	out	0x04, r28	; 4
     21c:	f2 cf       	rjmp	.-28     	; 0x202 <display_char+0x8>
		return 1;
	}
	else
	{
		PORTD &= ~(1<<PORTD7);
     21e:	5f 98       	cbi	0x0b, 7	; 11
		DDRB = 255;
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	c4 b9       	out	0x04, r28	; 4
}

void display_char(char c)
{
	while(display_busy()); //Wait for display
	PORTD |= (1<<PORTD5); //Data mode
     224:	5d 9a       	sbi	0x0b, 5	; 11
	PORTB = c;
     226:	d5 b9       	out	0x05, r29	; 5
	toggle_enable();
     228:	97 df       	rcall	.-210    	; 0x158 <toggle_enable>
	toggle_enable();
}

uint8_t display_read_adress()
{
	PORTB = 0;
     22a:	15 b8       	out	0x05, r1	; 5
	DDRB = 0;
     22c:	14 b8       	out	0x04, r1	; 4
	PORTD &= ~(1<<PORTD5);
     22e:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= 1<<PORTD7;
     230:	5f 9a       	sbi	0x0b, 7	; 11
     232:	85 e3       	ldi	r24, 0x35	; 53
     234:	8a 95       	dec	r24
     236:	f1 f7       	brne	.-4      	; 0x234 <display_char+0x3a>
     238:	00 00       	nop
	_delay_us(10);
	toggle_enable();
     23a:	8e df       	rcall	.-228    	; 0x158 <toggle_enable>
	
	uint8_t adress = PINB;
     23c:	83 b1       	in	r24, 0x03	; 3
	DDRB = 0xFF;
     23e:	c4 b9       	out	0x04, r28	; 4
	PORTD |= 1<<PORTD5;
     240:	5d 9a       	sbi	0x0b, 5	; 11
	while(display_busy()); //Wait for display
	PORTD |= (1<<PORTD5); //Data mode
	PORTB = c;
	toggle_enable();
	
	switch (display_read_adress())
     242:	80 32       	cpi	r24, 0x20	; 32
     244:	a9 f0       	breq	.+42     	; 0x270 <display_char+0x76>
     246:	18 f4       	brcc	.+6      	; 0x24e <display_char+0x54>
     248:	80 31       	cpi	r24, 0x10	; 16
     24a:	e9 f4       	brne	.+58     	; 0x286 <display_char+0x8c>
     24c:	05 c0       	rjmp	.+10     	; 0x258 <display_char+0x5e>
     24e:	80 35       	cpi	r24, 0x50	; 80
     250:	49 f0       	breq	.+18     	; 0x264 <display_char+0x6a>
     252:	80 36       	cpi	r24, 0x60	; 96
     254:	c1 f4       	brne	.+48     	; 0x286 <display_char+0x8c>
     256:	12 c0       	rjmp	.+36     	; 0x27c <display_char+0x82>
	{
		case 16:
		display_set_pos(1,0);
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	b3 df       	rcall	.-154    	; 0x1c8 <display_set_pos>
		break;
     262:	11 c0       	rjmp	.+34     	; 0x286 <display_char+0x8c>
		case 80:
		display_set_pos(2,0);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ad df       	rcall	.-166    	; 0x1c8 <display_set_pos>
		break;
     26e:	0b c0       	rjmp	.+22     	; 0x286 <display_char+0x8c>
		case 32:
		display_set_pos(3,0);
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	a7 df       	rcall	.-178    	; 0x1c8 <display_set_pos>
		break;
     27a:	05 c0       	rjmp	.+10     	; 0x286 <display_char+0x8c>
		case 96:
		display_set_pos(0,0);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	a1 df       	rcall	.-190    	; 0x1c8 <display_set_pos>
		break;
	}
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <print_digit>:
	}
}

void print_digit(int digit)
{
	switch(digit)
     28c:	84 30       	cpi	r24, 0x04	; 4
     28e:	91 05       	cpc	r25, r1
     290:	31 f1       	breq	.+76     	; 0x2de <print_digit+0x52>
     292:	6c f4       	brge	.+26     	; 0x2ae <print_digit+0x22>
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	91 05       	cpc	r25, r1
     298:	e1 f0       	breq	.+56     	; 0x2d2 <print_digit+0x46>
     29a:	1c f4       	brge	.+6      	; 0x2a2 <print_digit+0x16>
     29c:	89 2b       	or	r24, r25
     29e:	b9 f0       	breq	.+46     	; 0x2ce <print_digit+0x42>
     2a0:	2a c0       	rjmp	.+84     	; 0x2f6 <print_digit+0x6a>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	91 05       	cpc	r25, r1
     2a6:	b9 f0       	breq	.+46     	; 0x2d6 <print_digit+0x4a>
     2a8:	03 97       	sbiw	r24, 0x03	; 3
     2aa:	29 f5       	brne	.+74     	; 0x2f6 <print_digit+0x6a>
     2ac:	16 c0       	rjmp	.+44     	; 0x2da <print_digit+0x4e>
     2ae:	87 30       	cpi	r24, 0x07	; 7
     2b0:	91 05       	cpc	r25, r1
     2b2:	d9 f0       	breq	.+54     	; 0x2ea <print_digit+0x5e>
     2b4:	34 f4       	brge	.+12     	; 0x2c2 <print_digit+0x36>
     2b6:	85 30       	cpi	r24, 0x05	; 5
     2b8:	91 05       	cpc	r25, r1
     2ba:	99 f0       	breq	.+38     	; 0x2e2 <print_digit+0x56>
     2bc:	06 97       	sbiw	r24, 0x06	; 6
     2be:	d9 f4       	brne	.+54     	; 0x2f6 <print_digit+0x6a>
     2c0:	12 c0       	rjmp	.+36     	; 0x2e6 <print_digit+0x5a>
     2c2:	88 30       	cpi	r24, 0x08	; 8
     2c4:	91 05       	cpc	r25, r1
     2c6:	99 f0       	breq	.+38     	; 0x2ee <print_digit+0x62>
     2c8:	09 97       	sbiw	r24, 0x09	; 9
     2ca:	a9 f4       	brne	.+42     	; 0x2f6 <print_digit+0x6a>
     2cc:	12 c0       	rjmp	.+36     	; 0x2f2 <print_digit+0x66>
	{
		case 0:
			display_char('0');
     2ce:	80 e3       	ldi	r24, 0x30	; 48
			break;
     2d0:	94 cf       	rjmp	.-216    	; 0x1fa <display_char>
		case 1:
			display_char('1');
     2d2:	81 e3       	ldi	r24, 0x31	; 49
			break;
     2d4:	92 cf       	rjmp	.-220    	; 0x1fa <display_char>
		case 2:
			display_char('2');
     2d6:	82 e3       	ldi	r24, 0x32	; 50
			break;
     2d8:	90 cf       	rjmp	.-224    	; 0x1fa <display_char>
		case 3:
			display_char('3');
     2da:	83 e3       	ldi	r24, 0x33	; 51
			break;
     2dc:	8e cf       	rjmp	.-228    	; 0x1fa <display_char>
		case 4:
			display_char('4');
     2de:	84 e3       	ldi	r24, 0x34	; 52
			break;
     2e0:	8c cf       	rjmp	.-232    	; 0x1fa <display_char>
		case 5:
			display_char('5');
     2e2:	85 e3       	ldi	r24, 0x35	; 53
			break;
     2e4:	8a cf       	rjmp	.-236    	; 0x1fa <display_char>
		case 6:
			display_char('6');
     2e6:	86 e3       	ldi	r24, 0x36	; 54
			break;
     2e8:	88 cf       	rjmp	.-240    	; 0x1fa <display_char>
		case 7:
			display_char('7');
     2ea:	87 e3       	ldi	r24, 0x37	; 55
			break;
     2ec:	86 cf       	rjmp	.-244    	; 0x1fa <display_char>
		case 8:
			display_char('8');
     2ee:	88 e3       	ldi	r24, 0x38	; 56
			break;
     2f0:	84 cf       	rjmp	.-248    	; 0x1fa <display_char>
		case 9:
			display_char('9');
     2f2:	89 e3       	ldi	r24, 0x39	; 57
			break;
     2f4:	82 cf       	rjmp	.-252    	; 0x1fa <display_char>
		default:
			display_char('0');
     2f6:	80 e3       	ldi	r24, 0x30	; 48
     2f8:	80 cf       	rjmp	.-256    	; 0x1fa <display_char>

000002fa <print_int>:
		}
	}
}

void print_int(int number)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	9c 01       	movw	r18, r24
	if(number < 10)
     300:	8a 30       	cpi	r24, 0x0A	; 10
     302:	91 05       	cpc	r25, r1
     304:	24 f4       	brge	.+8      	; 0x30e <print_int+0x14>
	{
		if(number != 0)
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	91 f0       	breq	.+36     	; 0x32e <print_int+0x34>
		{
			print_digit(number);
     30a:	c0 df       	rcall	.-128    	; 0x28c <print_digit>
     30c:	10 c0       	rjmp	.+32     	; 0x32e <print_int+0x34>
		}
	} else
	{
		int mod = number % 10;
     30e:	ea e0       	ldi	r30, 0x0A	; 10
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	bf 01       	movw	r22, r30
     314:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__divmodhi4>
     318:	ec 01       	movw	r28, r24
		int left = number - mod;
     31a:	c9 01       	movw	r24, r18
     31c:	8c 1b       	sub	r24, r28
     31e:	9d 0b       	sbc	r25, r29
		print_int(left / 10);
     320:	bf 01       	movw	r22, r30
     322:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__divmodhi4>
     326:	cb 01       	movw	r24, r22
     328:	e8 df       	rcall	.-48     	; 0x2fa <print_int>
		print_digit(mod);
     32a:	ce 01       	movw	r24, r28
     32c:	af df       	rcall	.-162    	; 0x28c <print_digit>
	}
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <display_value>:
		display_char(text[i]);
	}
}

void display_value(float value)
{
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	6b 01       	movw	r12, r22
     342:	7c 01       	movw	r14, r24
	if(value == (int) value)
     344:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fixsfsi>
     348:	eb 01       	movw	r28, r22
     34a:	88 27       	eor	r24, r24
     34c:	77 fd       	sbrc	r23, 7
     34e:	80 95       	com	r24
     350:	98 2f       	mov	r25, r24
     352:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__floatsisf>
     356:	a7 01       	movw	r20, r14
     358:	96 01       	movw	r18, r12
     35a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__cmpsf2>
     35e:	81 11       	cpse	r24, r1
     360:	0f c0       	rjmp	.+30     	; 0x380 <display_value+0x4c>
	{
		// Integer
		if(value < 10)
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e2       	ldi	r20, 0x20	; 32
     368:	51 e4       	ldi	r21, 0x41	; 65
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__cmpsf2>
     372:	88 23       	and	r24, r24
     374:	1c f4       	brge	.+6      	; 0x37c <display_value+0x48>
		{
			print_digit(value);
     376:	ce 01       	movw	r24, r28
     378:	89 df       	rcall	.-238    	; 0x28c <print_digit>
     37a:	02 c0       	rjmp	.+4      	; 0x380 <display_value+0x4c>
		} else 
		{
			print_int(value);
     37c:	ce 01       	movw	r24, r28
     37e:	bd df       	rcall	.-134    	; 0x2fa <print_int>
		}
	}
}
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	df 90       	pop	r13
     38a:	cf 90       	pop	r12
     38c:	08 95       	ret

0000038e <display_text_fixed_length>:
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
	for(int i = 0; i < length; ++i)
     396:	16 16       	cp	r1, r22
     398:	17 06       	cpc	r1, r23
     39a:	54 f4       	brge	.+20     	; 0x3b0 <display_text_fixed_length+0x22>
     39c:	c8 2f       	mov	r28, r24
     39e:	d9 2f       	mov	r29, r25
	{
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
     3a0:	8e 01       	movw	r16, r28
     3a2:	06 0f       	add	r16, r22
     3a4:	17 1f       	adc	r17, r23
{
	for(int i = 0; i < length; ++i)
	{
		display_char(text[i]);
     3a6:	89 91       	ld	r24, Y+
     3a8:	28 df       	rcall	.-432    	; 0x1fa <display_char>
	}
}

void display_text_fixed_length(char text[], int length)
{
	for(int i = 0; i < length; ++i)
     3aa:	c0 17       	cp	r28, r16
     3ac:	d1 07       	cpc	r29, r17
     3ae:	d9 f7       	brne	.-10     	; 0x3a6 <display_text_fixed_length+0x18>
	{
		display_char(text[i]);
	}
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <display_text>:
		return 0;
	}
}

void display_text(char text[])
{
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	e8 2e       	mov	r14, r24
     3c8:	f9 2e       	mov	r15, r25
     3ca:	08 2f       	mov	r16, r24
     3cc:	19 2f       	mov	r17, r25
	for(int i = 0; i < strlen(text); ++i)
     3ce:	c0 e0       	ldi	r28, 0x00	; 0
     3d0:	d0 e0       	ldi	r29, 0x00	; 0
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <display_text+0x24>
	{
		display_char(text[i]);
     3d4:	f8 01       	movw	r30, r16
     3d6:	81 91       	ld	r24, Z+
     3d8:	8f 01       	movw	r16, r30
     3da:	0f df       	rcall	.-482    	; 0x1fa <display_char>
	}
}

void display_text(char text[])
{
	for(int i = 0; i < strlen(text); ++i)
     3dc:	21 96       	adiw	r28, 0x01	; 1
     3de:	ee 2d       	mov	r30, r14
     3e0:	ff 2d       	mov	r31, r15
     3e2:	df 01       	movw	r26, r30
     3e4:	0d 90       	ld	r0, X+
     3e6:	00 20       	and	r0, r0
     3e8:	e9 f7       	brne	.-6      	; 0x3e4 <display_text+0x2a>
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	ae 1b       	sub	r26, r30
     3ee:	bf 0b       	sbc	r27, r31
     3f0:	ca 17       	cp	r28, r26
     3f2:	db 07       	cpc	r29, r27
     3f4:	78 f3       	brcs	.-34     	; 0x3d4 <display_text+0x1a>
	{
		display_char(text[i]);
	}
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     404:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     406:	90 81       	ld	r25, Z
     408:	91 50       	subi	r25, 0x01	; 1
     40a:	84 81       	ldd	r24, Z+4	; 0x04
     40c:	22 81       	ldd	r18, Z+2	; 0x02
     40e:	82 1b       	sub	r24, r18
};
     410:	89 23       	and	r24, r25
     412:	08 95       	ret

00000414 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ec 01       	movw	r28, r24
     41c:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     41e:	f2 df       	rcall	.-28     	; 0x404 <FifoDataLength>
     420:	28 81       	ld	r18, Y
     422:	39 81       	ldd	r19, Y+1	; 0x01
     424:	21 50       	subi	r18, 0x01	; 1
     426:	31 09       	sbc	r19, r1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	82 17       	cp	r24, r18
     42c:	93 07       	cpc	r25, r19
     42e:	69 f0       	breq	.+26     	; 0x44a <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	fe 01       	movw	r30, r28
     436:	e8 0f       	add	r30, r24
     438:	f9 1f       	adc	r31, r25
     43a:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	28 23       	and	r18, r24
     440:	39 23       	and	r19, r25
     442:	3d 83       	std	Y+5, r19	; 0x05
     444:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	01 c0       	rjmp	.+2      	; 0x44c <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	08 95       	ret

00000454 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
     45e:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     460:	d1 df       	rcall	.-94     	; 0x404 <FifoDataLength>
     462:	88 23       	and	r24, r24
     464:	a1 f0       	breq	.+40     	; 0x48e <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     466:	ea 81       	ldd	r30, Y+2	; 0x02
     468:	fb 81       	ldd	r31, Y+3	; 0x03
     46a:	ec 0f       	add	r30, r28
     46c:	fd 1f       	adc	r31, r29
     46e:	86 81       	ldd	r24, Z+6	; 0x06
     470:	f8 01       	movw	r30, r16
     472:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     474:	28 81       	ld	r18, Y
     476:	39 81       	ldd	r19, Y+1	; 0x01
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	31 09       	sbc	r19, r1
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	9b 81       	ldd	r25, Y+3	; 0x03
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	82 23       	and	r24, r18
     484:	93 23       	and	r25, r19
     486:	9b 83       	std	Y+3, r25	; 0x03
     488:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	01 c0       	rjmp	.+2      	; 0x490 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     48e:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <main>:
char displayBuffer[64][20];
int bufferSize = 0;

int main(void)
{	
	display_init();
     49a:	68 de       	rcall	.-816    	; 0x16c <display_init>
	sensors_init();
     49c:	b1 d0       	rcall	.+354    	; 0x600 <sensors_init>
	
	// init TWI
	TWI_init(S_ADDRESS);
     49e:	80 e4       	ldi	r24, 0x40	; 64
     4a0:	b2 d7       	rcall	.+3940   	; 0x1406 <TWI_init>
	init_counters();
     4a2:	37 de       	rcall	.-914    	; 0x112 <init_counters>
	
	set_counter_1(500);
     4a4:	84 ef       	ldi	r24, 0xF4	; 244
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	10 de       	rcall	.-992    	; 0xca <set_counter_1>
	set_counter_2(3000);
     4aa:	88 eb       	ldi	r24, 0xB8	; 184
     4ac:	9b e0       	ldi	r25, 0x0B	; 11
     4ae:	1f de       	rcall	.-962    	; 0xee <set_counter_2>
	
	// Activate interrupts
	sei();
     4b0:	78 94       	sei
	
	display_text("Hello");
     4b2:	88 e0       	ldi	r24, 0x08	; 8
     4b4:	91 e1       	ldi	r25, 0x11	; 17
     4b6:	81 df       	rcall	.-254    	; 0x3ba <display_text>
	
	while(1)
	{	
		if(sensors_sampling_done())
     4b8:	f9 d3       	rcall	.+2034   	; 0xcac <sensors_sampling_done>
     4ba:	88 23       	and	r24, r24
     4bc:	21 f0       	breq	.+8      	; 0x4c6 <main+0x2c>
		{
			sensors_reset_flag();
     4be:	f9 d3       	rcall	.+2034   	; 0xcb2 <sensors_reset_flag>
			TWI_send_sensors(sensors_get_data(), 0);
     4c0:	fb d3       	rcall	.+2038   	; 0xcb8 <sensors_get_data>
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	c3 d7       	rcall	.+3974   	; 0x144c <TWI_send_sensors>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c6:	2f ef       	ldi	r18, 0xFF	; 255
     4c8:	89 e6       	ldi	r24, 0x69	; 105
     4ca:	98 e1       	ldi	r25, 0x18	; 24
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	80 40       	sbci	r24, 0x00	; 0
     4d0:	90 40       	sbci	r25, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0x32>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <main+0x3c>
     4d6:	00 00       	nop
     4d8:	ef cf       	rjmp	.-34     	; 0x4b8 <main+0x1e>

000004da <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	0b b6       	in	r0, 0x3b	; 59
     4e6:	0f 92       	push	r0
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	7f 93       	push	r23
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
     4fc:	ef 93       	push	r30
     4fe:	ff 93       	push	r31
	sensors_start_sample();
     500:	58 d3       	rcall	.+1712   	; 0xbb2 <sensors_start_sample>
	TCNT1 = 0;
     502:	10 92 85 00 	sts	0x0085, r1
     506:	10 92 84 00 	sts	0x0084, r1
}
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0b be       	out	0x3b, r0	; 59
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
     53a:	0b b6       	in	r0, 0x3b	; 59
     53c:	0f 92       	push	r0
     53e:	2f 93       	push	r18
     540:	3f 93       	push	r19
     542:	4f 93       	push	r20
     544:	5f 93       	push	r21
     546:	6f 93       	push	r22
     548:	7f 93       	push	r23
     54a:	8f 93       	push	r24
     54c:	9f 93       	push	r25
     54e:	af 93       	push	r26
     550:	bf 93       	push	r27
     552:	ef 93       	push	r30
     554:	ff 93       	push	r31
	if(decode_message_TwiFIFO())
     556:	ac d7       	rcall	.+3928   	; 0x14b0 <decode_message_TwiFIFO>
     558:	88 23       	and	r24, r24
     55a:	29 f0       	breq	.+10     	; 0x566 <__vector_32+0x36>
	{
		sensors_display_data();
     55c:	2e d3       	rcall	.+1628   	; 0xbba <sensors_display_data>
		set_counter_2(2000);
     55e:	80 ed       	ldi	r24, 0xD0	; 208
     560:	97 e0       	ldi	r25, 0x07	; 7
     562:	c5 dd       	rcall	.-1142   	; 0xee <set_counter_2>
     564:	03 c0       	rjmp	.+6      	; 0x56c <__vector_32+0x3c>
	} else {
		set_counter_2(3000);
     566:	88 eb       	ldi	r24, 0xB8	; 184
     568:	9b e0       	ldi	r25, 0x0B	; 11
     56a:	c1 dd       	rcall	.-1150   	; 0xee <set_counter_2>
	}
	TCNT3 = 0;
     56c:	10 92 95 00 	sts	0x0095, r1
     570:	10 92 94 00 	sts	0x0094, r1
}
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0b be       	out	0x3b, r0	; 59
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <adc_start>:
	ADMUX = 1<<ADLAR | 1<<REFS0;
}

void adc_start()
{
	ADCSRA |= 1<<ADSC;
     59a:	ea e7       	ldi	r30, 0x7A	; 122
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	80 64       	ori	r24, 0x40	; 64
     5a2:	80 83       	st	Z, r24
     5a4:	08 95       	ret

000005a6 <select_sensor>:
	display_value(gSensorBuffer[7]);
}

void select_sensor(int sensor)
{
	gSelectedSensor = sensor;
     5a6:	80 93 36 12 	sts	0x1236, r24
	PORTA &= ~((1<<PORTA1) | (1<<PORTA2) | (1<<PORTA3) | (1<<PORTA4));
     5aa:	22 b1       	in	r18, 0x02	; 2
     5ac:	21 7e       	andi	r18, 0xE1	; 225
     5ae:	22 b9       	out	0x02, r18	; 2
	switch(sensor)
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	91 05       	cpc	r25, r1
     5b4:	b9 f0       	breq	.+46     	; 0x5e4 <select_sensor+0x3e>
     5b6:	3c f4       	brge	.+14     	; 0x5c6 <select_sensor+0x20>
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	91 05       	cpc	r25, r1
     5bc:	69 f0       	breq	.+26     	; 0x5d8 <select_sensor+0x32>
     5be:	74 f4       	brge	.+28     	; 0x5dc <select_sensor+0x36>
     5c0:	89 2b       	or	r24, r25
     5c2:	41 f0       	breq	.+16     	; 0x5d4 <select_sensor+0x2e>
     5c4:	08 95       	ret
     5c6:	85 30       	cpi	r24, 0x05	; 5
     5c8:	91 05       	cpc	r25, r1
     5ca:	91 f0       	breq	.+36     	; 0x5f0 <select_sensor+0x4a>
     5cc:	6c f0       	brlt	.+26     	; 0x5e8 <select_sensor+0x42>
     5ce:	06 97       	sbiw	r24, 0x06	; 6
     5d0:	b1 f4       	brne	.+44     	; 0x5fe <select_sensor+0x58>
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <select_sensor+0x52>
	{
		case(0):
		PORTA |= 1<<PORTA1;
     5d4:	11 9a       	sbi	0x02, 1	; 2
		break;
     5d6:	08 95       	ret
		case(1):
		PORTA |= 1<<PORTA2;
     5d8:	12 9a       	sbi	0x02, 2	; 2
		break;
     5da:	08 95       	ret
		case(2):
		PORTA |= 1<<PORTA1 | 1<<PORTA2;
     5dc:	82 b1       	in	r24, 0x02	; 2
     5de:	86 60       	ori	r24, 0x06	; 6
     5e0:	82 b9       	out	0x02, r24	; 2
		break;
     5e2:	08 95       	ret
		case(3):
		PORTA |= 1<<PORTA3;
     5e4:	13 9a       	sbi	0x02, 3	; 2
		break;
     5e6:	08 95       	ret
		case(4):
		PORTA |= 1<<PORTA1 | 1<<PORTA3;
     5e8:	82 b1       	in	r24, 0x02	; 2
     5ea:	8a 60       	ori	r24, 0x0A	; 10
     5ec:	82 b9       	out	0x02, r24	; 2
		break;
     5ee:	08 95       	ret
		case(5):
		PORTA |= 1<<PORTA2 | 1<<PORTA3;
     5f0:	82 b1       	in	r24, 0x02	; 2
     5f2:	8c 60       	ori	r24, 0x0C	; 12
     5f4:	82 b9       	out	0x02, r24	; 2
		break;
     5f6:	08 95       	ret
		case(6):
		PORTA |= 1<<PORTA1 | 1<<PORTA2 | 1<<PORTA3;
     5f8:	82 b1       	in	r24, 0x02	; 2
     5fa:	8e 60       	ori	r24, 0x0E	; 14
     5fc:	82 b9       	out	0x02, r24	; 2
     5fe:	08 95       	ret

00000600 <sensors_init>:
static void init_mux();
static void init_tables();
static void init_UL();

void sensors_init()
{
     600:	4f 92       	push	r4
     602:	5f 92       	push	r5
     604:	6f 92       	push	r6
     606:	7f 92       	push	r7
     608:	8f 92       	push	r8
     60a:	9f 92       	push	r9
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
}

void adc_init()
{
	// ADC enabled, enable interrupt, set division factor for clock to be 128
	ADCSRA = (1<<ADEN | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
     61c:	8f e8       	ldi	r24, 0x8F	; 143
     61e:	80 93 7a 00 	sts	0x007A, r24
	
	// Left adjust, set voltage reference selection
	ADMUX = 1<<ADLAR | 1<<REFS0;
     622:	80 e6       	ldi	r24, 0x60	; 96
     624:	80 93 7c 00 	sts	0x007C, r24
}

void init_tables()
{
	// 10-80 cm
	IRShort[0][0] = 3.15;
     628:	8a e9       	ldi	r24, 0x9A	; 154
     62a:	99 e9       	ldi	r25, 0x99	; 153
     62c:	a9 e4       	ldi	r26, 0x49	; 73
     62e:	b0 e4       	ldi	r27, 0x40	; 64
     630:	80 93 56 11 	sts	0x1156, r24
     634:	90 93 57 11 	sts	0x1157, r25
     638:	a0 93 58 11 	sts	0x1158, r26
     63c:	b0 93 59 11 	sts	0x1159, r27
	IRShort[0][1] = 6;
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	a0 ec       	ldi	r26, 0xC0	; 192
     646:	b0 e4       	ldi	r27, 0x40	; 64
     648:	80 93 5a 11 	sts	0x115A, r24
     64c:	90 93 5b 11 	sts	0x115B, r25
     650:	a0 93 5c 11 	sts	0x115C, r26
     654:	b0 93 5d 11 	sts	0x115D, r27
	
	IRShort[1][0] = 2.98;
     658:	82 e5       	ldi	r24, 0x52	; 82
     65a:	98 eb       	ldi	r25, 0xB8	; 184
     65c:	ae e3       	ldi	r26, 0x3E	; 62
     65e:	b0 e4       	ldi	r27, 0x40	; 64
     660:	80 93 5e 11 	sts	0x115E, r24
     664:	90 93 5f 11 	sts	0x115F, r25
     668:	a0 93 60 11 	sts	0x1160, r26
     66c:	b0 93 61 11 	sts	0x1161, r27
	IRShort[1][1] = 7;
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 ee       	ldi	r26, 0xE0	; 224
     676:	b0 e4       	ldi	r27, 0x40	; 64
     678:	80 93 62 11 	sts	0x1162, r24
     67c:	90 93 63 11 	sts	0x1163, r25
     680:	a0 93 64 11 	sts	0x1164, r26
     684:	b0 93 65 11 	sts	0x1165, r27

	IRShort[2][0] = 2.75;
     688:	00 e0       	ldi	r16, 0x00	; 0
     68a:	10 e0       	ldi	r17, 0x00	; 0
     68c:	20 e3       	ldi	r18, 0x30	; 48
     68e:	30 e4       	ldi	r19, 0x40	; 64
     690:	00 93 66 11 	sts	0x1166, r16
     694:	10 93 67 11 	sts	0x1167, r17
     698:	20 93 68 11 	sts	0x1168, r18
     69c:	30 93 69 11 	sts	0x1169, r19
	IRShort[2][1] = 8;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	a0 e0       	ldi	r26, 0x00	; 0
     6a6:	b1 e4       	ldi	r27, 0x41	; 65
     6a8:	80 93 6a 11 	sts	0x116A, r24
     6ac:	90 93 6b 11 	sts	0x116B, r25
     6b0:	a0 93 6c 11 	sts	0x116C, r26
     6b4:	b0 93 6d 11 	sts	0x116D, r27
	
	IRShort[3][0] = 2.31;
     6b8:	8a e0       	ldi	r24, 0x0A	; 10
     6ba:	97 ed       	ldi	r25, 0xD7	; 215
     6bc:	a3 e1       	ldi	r26, 0x13	; 19
     6be:	b0 e4       	ldi	r27, 0x40	; 64
     6c0:	80 93 6e 11 	sts	0x116E, r24
     6c4:	90 93 6f 11 	sts	0x116F, r25
     6c8:	a0 93 70 11 	sts	0x1170, r26
     6cc:	b0 93 71 11 	sts	0x1171, r27
	IRShort[3][1] = 10;
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	a0 e2       	ldi	r26, 0x20	; 32
     6d6:	b1 e4       	ldi	r27, 0x41	; 65
     6d8:	80 93 72 11 	sts	0x1172, r24
     6dc:	90 93 73 11 	sts	0x1173, r25
     6e0:	a0 93 74 11 	sts	0x1174, r26
     6e4:	b0 93 75 11 	sts	0x1175, r27
	
	IRShort[4][0] = 1.64;
     6e8:	85 e8       	ldi	r24, 0x85	; 133
     6ea:	9b ee       	ldi	r25, 0xEB	; 235
     6ec:	a1 ed       	ldi	r26, 0xD1	; 209
     6ee:	bf e3       	ldi	r27, 0x3F	; 63
     6f0:	80 93 76 11 	sts	0x1176, r24
     6f4:	90 93 77 11 	sts	0x1177, r25
     6f8:	a0 93 78 11 	sts	0x1178, r26
     6fc:	b0 93 79 11 	sts	0x1179, r27
	IRShort[4][1] = 15;
     700:	0f 2e       	mov	r0, r31
     702:	41 2c       	mov	r4, r1
     704:	51 2c       	mov	r5, r1
     706:	f0 e7       	ldi	r31, 0x70	; 112
     708:	6f 2e       	mov	r6, r31
     70a:	f1 e4       	ldi	r31, 0x41	; 65
     70c:	7f 2e       	mov	r7, r31
     70e:	f0 2d       	mov	r31, r0
     710:	40 92 7a 11 	sts	0x117A, r4
     714:	50 92 7b 11 	sts	0x117B, r5
     718:	60 92 7c 11 	sts	0x117C, r6
     71c:	70 92 7d 11 	sts	0x117D, r7
	
	IRShort[5][0] = 1.31;
     720:	84 e1       	ldi	r24, 0x14	; 20
     722:	9e ea       	ldi	r25, 0xAE	; 174
     724:	a7 ea       	ldi	r26, 0xA7	; 167
     726:	bf e3       	ldi	r27, 0x3F	; 63
     728:	80 93 7e 11 	sts	0x117E, r24
     72c:	90 93 7f 11 	sts	0x117F, r25
     730:	a0 93 80 11 	sts	0x1180, r26
     734:	b0 93 81 11 	sts	0x1181, r27
	IRShort[5][1] = 20;
     738:	0f 2e       	mov	r0, r31
     73a:	81 2c       	mov	r8, r1
     73c:	91 2c       	mov	r9, r1
     73e:	f0 ea       	ldi	r31, 0xA0	; 160
     740:	af 2e       	mov	r10, r31
     742:	f1 e4       	ldi	r31, 0x41	; 65
     744:	bf 2e       	mov	r11, r31
     746:	f0 2d       	mov	r31, r0
     748:	80 92 82 11 	sts	0x1182, r8
     74c:	90 92 83 11 	sts	0x1183, r9
     750:	a0 92 84 11 	sts	0x1184, r10
     754:	b0 92 85 11 	sts	0x1185, r11
	
	IRShort[6][0] = 1.08;
     758:	81 e7       	ldi	r24, 0x71	; 113
     75a:	9d e3       	ldi	r25, 0x3D	; 61
     75c:	aa e8       	ldi	r26, 0x8A	; 138
     75e:	bf e3       	ldi	r27, 0x3F	; 63
     760:	80 93 86 11 	sts	0x1186, r24
     764:	90 93 87 11 	sts	0x1187, r25
     768:	a0 93 88 11 	sts	0x1188, r26
     76c:	b0 93 89 11 	sts	0x1189, r27
	IRShort[6][1] = 25;
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	a8 ec       	ldi	r26, 0xC8	; 200
     776:	b1 e4       	ldi	r27, 0x41	; 65
     778:	80 93 8a 11 	sts	0x118A, r24
     77c:	90 93 8b 11 	sts	0x118B, r25
     780:	a0 93 8c 11 	sts	0x118C, r26
     784:	b0 93 8d 11 	sts	0x118D, r27
	
	IRShort[7][0] = 0.92;
     788:	8f e1       	ldi	r24, 0x1F	; 31
     78a:	95 e8       	ldi	r25, 0x85	; 133
     78c:	ab e6       	ldi	r26, 0x6B	; 107
     78e:	bf e3       	ldi	r27, 0x3F	; 63
     790:	80 93 8e 11 	sts	0x118E, r24
     794:	90 93 8f 11 	sts	0x118F, r25
     798:	a0 93 90 11 	sts	0x1190, r26
     79c:	b0 93 91 11 	sts	0x1191, r27
	IRShort[7][1] = 30;
     7a0:	0f 2e       	mov	r0, r31
     7a2:	c1 2c       	mov	r12, r1
     7a4:	d1 2c       	mov	r13, r1
     7a6:	f0 ef       	ldi	r31, 0xF0	; 240
     7a8:	ef 2e       	mov	r14, r31
     7aa:	f1 e4       	ldi	r31, 0x41	; 65
     7ac:	ff 2e       	mov	r15, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	c0 92 92 11 	sts	0x1192, r12
     7b4:	d0 92 93 11 	sts	0x1193, r13
     7b8:	e0 92 94 11 	sts	0x1194, r14
     7bc:	f0 92 95 11 	sts	0x1195, r15
	
	IRShort[8][0] = 0.74;
     7c0:	84 ea       	ldi	r24, 0xA4	; 164
     7c2:	90 e7       	ldi	r25, 0x70	; 112
     7c4:	ad e3       	ldi	r26, 0x3D	; 61
     7c6:	bf e3       	ldi	r27, 0x3F	; 63
     7c8:	80 93 96 11 	sts	0x1196, r24
     7cc:	90 93 97 11 	sts	0x1197, r25
     7d0:	a0 93 98 11 	sts	0x1198, r26
     7d4:	b0 93 99 11 	sts	0x1199, r27
	IRShort[8][1] = 40;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	a0 e2       	ldi	r26, 0x20	; 32
     7de:	b2 e4       	ldi	r27, 0x42	; 66
     7e0:	80 93 9a 11 	sts	0x119A, r24
     7e4:	90 93 9b 11 	sts	0x119B, r25
     7e8:	a0 93 9c 11 	sts	0x119C, r26
     7ec:	b0 93 9d 11 	sts	0x119D, r27
	
	IRShort[9][0] = 0.61;
     7f0:	86 ef       	ldi	r24, 0xF6	; 246
     7f2:	98 e2       	ldi	r25, 0x28	; 40
     7f4:	ac e1       	ldi	r26, 0x1C	; 28
     7f6:	bf e3       	ldi	r27, 0x3F	; 63
     7f8:	80 93 9e 11 	sts	0x119E, r24
     7fc:	90 93 9f 11 	sts	0x119F, r25
     800:	a0 93 a0 11 	sts	0x11A0, r26
     804:	b0 93 a1 11 	sts	0x11A1, r27
	IRShort[9][1] = 50;
     808:	00 e0       	ldi	r16, 0x00	; 0
     80a:	10 e0       	ldi	r17, 0x00	; 0
     80c:	28 e4       	ldi	r18, 0x48	; 72
     80e:	32 e4       	ldi	r19, 0x42	; 66
     810:	00 93 a2 11 	sts	0x11A2, r16
     814:	10 93 a3 11 	sts	0x11A3, r17
     818:	20 93 a4 11 	sts	0x11A4, r18
     81c:	30 93 a5 11 	sts	0x11A5, r19
	
	IRShort[10][0] = 0.51;
     820:	8c e5       	ldi	r24, 0x5C	; 92
     822:	9f e8       	ldi	r25, 0x8F	; 143
     824:	a2 e0       	ldi	r26, 0x02	; 2
     826:	bf e3       	ldi	r27, 0x3F	; 63
     828:	80 93 a6 11 	sts	0x11A6, r24
     82c:	90 93 a7 11 	sts	0x11A7, r25
     830:	a0 93 a8 11 	sts	0x11A8, r26
     834:	b0 93 a9 11 	sts	0x11A9, r27
	IRShort[10][1] = 60;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	a0 e7       	ldi	r26, 0x70	; 112
     83e:	b2 e4       	ldi	r27, 0x42	; 66
     840:	80 93 aa 11 	sts	0x11AA, r24
     844:	90 93 ab 11 	sts	0x11AB, r25
     848:	a0 93 ac 11 	sts	0x11AC, r26
     84c:	b0 93 ad 11 	sts	0x11AD, r27
	
	IRShort[11][0] = 0.45;
     850:	06 e6       	ldi	r16, 0x66	; 102
     852:	16 e6       	ldi	r17, 0x66	; 102
     854:	26 ee       	ldi	r18, 0xE6	; 230
     856:	3e e3       	ldi	r19, 0x3E	; 62
     858:	00 93 ae 11 	sts	0x11AE, r16
     85c:	10 93 af 11 	sts	0x11AF, r17
     860:	20 93 b0 11 	sts	0x11B0, r18
     864:	30 93 b1 11 	sts	0x11B1, r19
	IRShort[11][1] = 70;
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	6c e8       	ldi	r22, 0x8C	; 140
     86e:	72 e4       	ldi	r23, 0x42	; 66
     870:	40 93 b2 11 	sts	0x11B2, r20
     874:	50 93 b3 11 	sts	0x11B3, r21
     878:	60 93 b4 11 	sts	0x11B4, r22
     87c:	70 93 b5 11 	sts	0x11B5, r23
	
	IRShort[12][0] = 0.41;
     880:	85 e8       	ldi	r24, 0x85	; 133
     882:	9b ee       	ldi	r25, 0xEB	; 235
     884:	a1 ed       	ldi	r26, 0xD1	; 209
     886:	be e3       	ldi	r27, 0x3E	; 62
     888:	80 93 b6 11 	sts	0x11B6, r24
     88c:	90 93 b7 11 	sts	0x11B7, r25
     890:	a0 93 b8 11 	sts	0x11B8, r26
     894:	b0 93 b9 11 	sts	0x11B9, r27
	IRShort[12][1] = 80;
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 ea       	ldi	r26, 0xA0	; 160
     89e:	b2 e4       	ldi	r27, 0x42	; 66
     8a0:	80 93 ba 11 	sts	0x11BA, r24
     8a4:	90 93 bb 11 	sts	0x11BB, r25
     8a8:	a0 93 bc 11 	sts	0x11BC, r26
     8ac:	b0 93 bd 11 	sts	0x11BD, r27
	
	// 20-150 cm
	IRLong[0][0] = 2.75;
     8b0:	00 e0       	ldi	r16, 0x00	; 0
     8b2:	10 e0       	ldi	r17, 0x00	; 0
     8b4:	20 e3       	ldi	r18, 0x30	; 48
     8b6:	30 e4       	ldi	r19, 0x40	; 64
     8b8:	00 93 be 11 	sts	0x11BE, r16
     8bc:	10 93 bf 11 	sts	0x11BF, r17
     8c0:	20 93 c0 11 	sts	0x11C0, r18
     8c4:	30 93 c1 11 	sts	0x11C1, r19
	IRLong[0][1] = 15;
     8c8:	40 92 c2 11 	sts	0x11C2, r4
     8cc:	50 92 c3 11 	sts	0x11C3, r5
     8d0:	60 92 c4 11 	sts	0x11C4, r6
     8d4:	70 92 c5 11 	sts	0x11C5, r7
	
	IRLong[1][0] = 2.55;
     8d8:	0f 2e       	mov	r0, r31
     8da:	f3 e3       	ldi	r31, 0x33	; 51
     8dc:	4f 2e       	mov	r4, r31
     8de:	54 2c       	mov	r5, r4
     8e0:	f3 e2       	ldi	r31, 0x23	; 35
     8e2:	6f 2e       	mov	r6, r31
     8e4:	f0 e4       	ldi	r31, 0x40	; 64
     8e6:	7f 2e       	mov	r7, r31
     8e8:	f0 2d       	mov	r31, r0
     8ea:	40 92 c6 11 	sts	0x11C6, r4
     8ee:	50 92 c7 11 	sts	0x11C7, r5
     8f2:	60 92 c8 11 	sts	0x11C8, r6
     8f6:	70 92 c9 11 	sts	0x11C9, r7
	IRLong[1][1] = 20;
     8fa:	80 92 ca 11 	sts	0x11CA, r8
     8fe:	90 92 cb 11 	sts	0x11CB, r9
     902:	a0 92 cc 11 	sts	0x11CC, r10
     906:	b0 92 cd 11 	sts	0x11CD, r11
	
	IRLong[2][0] = 2.00;
     90a:	81 2c       	mov	r8, r1
     90c:	91 2c       	mov	r9, r1
     90e:	54 01       	movw	r10, r8
     910:	68 94       	set
     912:	b6 f8       	bld	r11, 6
     914:	80 92 ce 11 	sts	0x11CE, r8
     918:	90 92 cf 11 	sts	0x11CF, r9
     91c:	a0 92 d0 11 	sts	0x11D0, r10
     920:	b0 92 d1 11 	sts	0x11D1, r11
	IRLong[2][1] = 30;
     924:	c0 92 d2 11 	sts	0x11D2, r12
     928:	d0 92 d3 11 	sts	0x11D3, r13
     92c:	e0 92 d4 11 	sts	0x11D4, r14
     930:	f0 92 d5 11 	sts	0x11D5, r15
	
	IRLong[3][0] = 1.55;
     934:	0f 2e       	mov	r0, r31
     936:	f6 e6       	ldi	r31, 0x66	; 102
     938:	cf 2e       	mov	r12, r31
     93a:	dc 2c       	mov	r13, r12
     93c:	f6 ec       	ldi	r31, 0xC6	; 198
     93e:	ef 2e       	mov	r14, r31
     940:	ff e3       	ldi	r31, 0x3F	; 63
     942:	ff 2e       	mov	r15, r31
     944:	f0 2d       	mov	r31, r0
     946:	c0 92 d6 11 	sts	0x11D6, r12
     94a:	d0 92 d7 11 	sts	0x11D7, r13
     94e:	e0 92 d8 11 	sts	0x11D8, r14
     952:	f0 92 d9 11 	sts	0x11D9, r15
	IRLong[3][1] = 40;
     956:	00 e0       	ldi	r16, 0x00	; 0
     958:	10 e0       	ldi	r17, 0x00	; 0
     95a:	20 e2       	ldi	r18, 0x20	; 32
     95c:	32 e4       	ldi	r19, 0x42	; 66
     95e:	00 93 da 11 	sts	0x11DA, r16
     962:	10 93 db 11 	sts	0x11DB, r17
     966:	20 93 dc 11 	sts	0x11DC, r18
     96a:	30 93 dd 11 	sts	0x11DD, r19
	
	IRLong[4][0] = 1.25;
     96e:	00 e0       	ldi	r16, 0x00	; 0
     970:	10 e0       	ldi	r17, 0x00	; 0
     972:	20 ea       	ldi	r18, 0xA0	; 160
     974:	3f e3       	ldi	r19, 0x3F	; 63
     976:	00 93 de 11 	sts	0x11DE, r16
     97a:	10 93 df 11 	sts	0x11DF, r17
     97e:	20 93 e0 11 	sts	0x11E0, r18
     982:	30 93 e1 11 	sts	0x11E1, r19
	IRLong[4][1] = 50;
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	28 e4       	ldi	r18, 0x48	; 72
     98c:	32 e4       	ldi	r19, 0x42	; 66
     98e:	00 93 e2 11 	sts	0x11E2, r16
     992:	10 93 e3 11 	sts	0x11E3, r17
     996:	20 93 e4 11 	sts	0x11E4, r18
     99a:	30 93 e5 11 	sts	0x11E5, r19
	
	IRLong[5][0] = 1.07;
     99e:	03 ec       	ldi	r16, 0xC3	; 195
     9a0:	15 ef       	ldi	r17, 0xF5	; 245
     9a2:	28 e8       	ldi	r18, 0x88	; 136
     9a4:	3f e3       	ldi	r19, 0x3F	; 63
     9a6:	00 93 e6 11 	sts	0x11E6, r16
     9aa:	10 93 e7 11 	sts	0x11E7, r17
     9ae:	20 93 e8 11 	sts	0x11E8, r18
     9b2:	30 93 e9 11 	sts	0x11E9, r19
	IRLong[5][1] = 60;
     9b6:	00 e0       	ldi	r16, 0x00	; 0
     9b8:	10 e0       	ldi	r17, 0x00	; 0
     9ba:	20 e7       	ldi	r18, 0x70	; 112
     9bc:	32 e4       	ldi	r19, 0x42	; 66
     9be:	00 93 ea 11 	sts	0x11EA, r16
     9c2:	10 93 eb 11 	sts	0x11EB, r17
     9c6:	20 93 ec 11 	sts	0x11EC, r18
     9ca:	30 93 ed 11 	sts	0x11ED, r19
	
	IRLong[6][0] = 0.85;
     9ce:	0a e9       	ldi	r16, 0x9A	; 154
     9d0:	19 e9       	ldi	r17, 0x99	; 153
     9d2:	29 e5       	ldi	r18, 0x59	; 89
     9d4:	3f e3       	ldi	r19, 0x3F	; 63
     9d6:	00 93 ee 11 	sts	0x11EE, r16
     9da:	10 93 ef 11 	sts	0x11EF, r17
     9de:	20 93 f0 11 	sts	0x11F0, r18
     9e2:	30 93 f1 11 	sts	0x11F1, r19
	IRLong[6][1] = 70;
     9e6:	40 93 f2 11 	sts	0x11F2, r20
     9ea:	50 93 f3 11 	sts	0x11F3, r21
     9ee:	60 93 f4 11 	sts	0x11F4, r22
     9f2:	70 93 f5 11 	sts	0x11F5, r23
	
	IRLong[7][0] = 0.80;
     9f6:	4d ec       	ldi	r20, 0xCD	; 205
     9f8:	5c ec       	ldi	r21, 0xCC	; 204
     9fa:	6c e4       	ldi	r22, 0x4C	; 76
     9fc:	7f e3       	ldi	r23, 0x3F	; 63
     9fe:	40 93 f6 11 	sts	0x11F6, r20
     a02:	50 93 f7 11 	sts	0x11F7, r21
     a06:	60 93 f8 11 	sts	0x11F8, r22
     a0a:	70 93 f9 11 	sts	0x11F9, r23
	IRLong[7][1] = 80;
     a0e:	80 93 fa 11 	sts	0x11FA, r24
     a12:	90 93 fb 11 	sts	0x11FB, r25
     a16:	a0 93 fc 11 	sts	0x11FC, r26
     a1a:	b0 93 fd 11 	sts	0x11FD, r27
	
	IRLong[8][0] = 0.75;
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 e4       	ldi	r26, 0x40	; 64
     a24:	bf e3       	ldi	r27, 0x3F	; 63
     a26:	80 93 fe 11 	sts	0x11FE, r24
     a2a:	90 93 ff 11 	sts	0x11FF, r25
     a2e:	a0 93 00 12 	sts	0x1200, r26
     a32:	b0 93 01 12 	sts	0x1201, r27
	IRLong[8][1] = 90;
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a4 eb       	ldi	r26, 0xB4	; 180
     a3c:	b2 e4       	ldi	r27, 0x42	; 66
     a3e:	80 93 02 12 	sts	0x1202, r24
     a42:	90 93 03 12 	sts	0x1203, r25
     a46:	a0 93 04 12 	sts	0x1204, r26
     a4a:	b0 93 05 12 	sts	0x1205, r27
	
	IRLong[9][0] = 0.65;
     a4e:	86 e6       	ldi	r24, 0x66	; 102
     a50:	96 e6       	ldi	r25, 0x66	; 102
     a52:	a6 e2       	ldi	r26, 0x26	; 38
     a54:	bf e3       	ldi	r27, 0x3F	; 63
     a56:	80 93 06 12 	sts	0x1206, r24
     a5a:	90 93 07 12 	sts	0x1207, r25
     a5e:	a0 93 08 12 	sts	0x1208, r26
     a62:	b0 93 09 12 	sts	0x1209, r27
	IRLong[9][1] = 100;
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	a8 ec       	ldi	r26, 0xC8	; 200
     a6c:	b2 e4       	ldi	r27, 0x42	; 66
     a6e:	80 93 0a 12 	sts	0x120A, r24
     a72:	90 93 0b 12 	sts	0x120B, r25
     a76:	a0 93 0c 12 	sts	0x120C, r26
     a7a:	b0 93 0d 12 	sts	0x120D, r27
	
	IRLong[10][0] = 0.60;
     a7e:	8a e9       	ldi	r24, 0x9A	; 154
     a80:	99 e9       	ldi	r25, 0x99	; 153
     a82:	a9 e1       	ldi	r26, 0x19	; 25
     a84:	bf e3       	ldi	r27, 0x3F	; 63
     a86:	80 93 0e 12 	sts	0x120E, r24
     a8a:	90 93 0f 12 	sts	0x120F, r25
     a8e:	a0 93 10 12 	sts	0x1210, r26
     a92:	b0 93 11 12 	sts	0x1211, r27
	IRLong[10][1] = 110;
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	ac ed       	ldi	r26, 0xDC	; 220
     a9c:	b2 e4       	ldi	r27, 0x42	; 66
     a9e:	80 93 12 12 	sts	0x1212, r24
     aa2:	90 93 13 12 	sts	0x1213, r25
     aa6:	a0 93 14 12 	sts	0x1214, r26
     aaa:	b0 93 15 12 	sts	0x1215, r27
	
	IRLong[11][0] = 0.55;
     aae:	8d ec       	ldi	r24, 0xCD	; 205
     ab0:	9c ec       	ldi	r25, 0xCC	; 204
     ab2:	ac e0       	ldi	r26, 0x0C	; 12
     ab4:	bf e3       	ldi	r27, 0x3F	; 63
     ab6:	80 93 16 12 	sts	0x1216, r24
     aba:	90 93 17 12 	sts	0x1217, r25
     abe:	a0 93 18 12 	sts	0x1218, r26
     ac2:	b0 93 19 12 	sts	0x1219, r27
	IRLong[11][1] = 120;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	a0 ef       	ldi	r26, 0xF0	; 240
     acc:	b2 e4       	ldi	r27, 0x42	; 66
     ace:	80 93 1a 12 	sts	0x121A, r24
     ad2:	90 93 1b 12 	sts	0x121B, r25
     ad6:	a0 93 1c 12 	sts	0x121C, r26
     ada:	b0 93 1d 12 	sts	0x121D, r27
	
	IRLong[12][0] = 0.50;
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	bf e3       	ldi	r27, 0x3F	; 63
     ae6:	80 93 1e 12 	sts	0x121E, r24
     aea:	90 93 1f 12 	sts	0x121F, r25
     aee:	a0 93 20 12 	sts	0x1220, r26
     af2:	b0 93 21 12 	sts	0x1221, r27
	IRLong[12][1] = 130;
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a2 e0       	ldi	r26, 0x02	; 2
     afc:	b3 e4       	ldi	r27, 0x43	; 67
     afe:	80 93 22 12 	sts	0x1222, r24
     b02:	90 93 23 12 	sts	0x1223, r25
     b06:	a0 93 24 12 	sts	0x1224, r26
     b0a:	b0 93 25 12 	sts	0x1225, r27
	
	IRLong[13][0] = 0.45;
     b0e:	86 e6       	ldi	r24, 0x66	; 102
     b10:	96 e6       	ldi	r25, 0x66	; 102
     b12:	a6 ee       	ldi	r26, 0xE6	; 230
     b14:	be e3       	ldi	r27, 0x3E	; 62
     b16:	80 93 26 12 	sts	0x1226, r24
     b1a:	90 93 27 12 	sts	0x1227, r25
     b1e:	a0 93 28 12 	sts	0x1228, r26
     b22:	b0 93 29 12 	sts	0x1229, r27
	IRLong[13][1] = 140;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	ac e0       	ldi	r26, 0x0C	; 12
     b2c:	b3 e4       	ldi	r27, 0x43	; 67
     b2e:	80 93 2a 12 	sts	0x122A, r24
     b32:	90 93 2b 12 	sts	0x122B, r25
     b36:	a0 93 2c 12 	sts	0x122C, r26
     b3a:	b0 93 2d 12 	sts	0x122D, r27
	
	IRLong[14][0] = 0.42;
     b3e:	8d e3       	ldi	r24, 0x3D	; 61
     b40:	9a e0       	ldi	r25, 0x0A	; 10
     b42:	a7 ed       	ldi	r26, 0xD7	; 215
     b44:	be e3       	ldi	r27, 0x3E	; 62
     b46:	80 93 2e 12 	sts	0x122E, r24
     b4a:	90 93 2f 12 	sts	0x122F, r25
     b4e:	a0 93 30 12 	sts	0x1230, r26
     b52:	b0 93 31 12 	sts	0x1231, r27
	IRLong[14][1] = 150;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a6 e1       	ldi	r26, 0x16	; 22
     b5c:	b3 e4       	ldi	r27, 0x43	; 67
     b5e:	80 93 32 12 	sts	0x1232, r24
     b62:	90 93 33 12 	sts	0x1233, r25
     b66:	a0 93 34 12 	sts	0x1234, r26
     b6a:	b0 93 35 12 	sts	0x1235, r27
	return 0;
}

void init_mux()
{
	DDRA |= 0b00111110;
     b6e:	81 b1       	in	r24, 0x01	; 1
     b70:	8e 63       	ori	r24, 0x3E	; 62
     b72:	81 b9       	out	0x01, r24	; 1
	DDRA &= ~(1<<PORTA0);
     b74:	08 98       	cbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA5);
     b76:	15 98       	cbi	0x02, 5	; 2
	PORTA &= ~((1<<PORTA1) | (1<<PORTA2) | (1<<PORTA3) | (1<<PORTA4));
     b78:	82 b1       	in	r24, 0x02	; 2
     b7a:	81 7e       	andi	r24, 0xE1	; 225
     b7c:	82 b9       	out	0x02, r24	; 2
	//PORTA &= 0b11100001;
}

void init_UL()
{
	DDRD |= 1;
     b7e:	50 9a       	sbi	0x0a, 0	; 10
	PCICR = 1;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 68 00 	sts	0x0068, r24
	PCMSK0 = (1<<PCINT6);
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	80 93 6b 00 	sts	0x006B, r24
	DDRA |= (1<<PORTA7);
     b8c:	0f 9a       	sbi	0x01, 7	; 1
	DDRA &= ~(1<<PORTA6);
     b8e:	0e 98       	cbi	0x01, 6	; 1
	TCCR0B = 0x05;
     b90:	85 e0       	ldi	r24, 0x05	; 5
     b92:	85 bd       	out	0x25, r24	; 37
{
	adc_init();
	init_tables();
	init_mux();
	init_UL();
}
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	bf 90       	pop	r11
     ba2:	af 90       	pop	r10
     ba4:	9f 90       	pop	r9
     ba6:	8f 90       	pop	r8
     ba8:	7f 90       	pop	r7
     baa:	6f 90       	pop	r6
     bac:	5f 90       	pop	r5
     bae:	4f 90       	pop	r4
     bb0:	08 95       	ret

00000bb2 <sensors_start_sample>:
	ADCSRA |= 1<<ADSC;
}

void sensors_start_sample()
{
	select_sensor(0);
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	f7 dc       	rcall	.-1554   	; 0x5a6 <select_sensor>
	adc_start();
     bb8:	f0 cc       	rjmp	.-1568   	; 0x59a <adc_start>

00000bba <sensors_display_data>:
}

void sensors_display_data()
{
	display_clear();
     bba:	02 db       	rcall	.-2556   	; 0x1c0 <display_clear>
	
	display_set_pos(0,0);
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	01 db       	rcall	.-2558   	; 0x1c8 <display_set_pos>
	display_text("0: ");
     bc6:	8e e0       	ldi	r24, 0x0E	; 14
     bc8:	91 e1       	ldi	r25, 0x11	; 17
     bca:	f7 db       	rcall	.-2066   	; 0x3ba <display_text>
	display_value(gSensorBuffer[0]);
     bcc:	60 91 37 12 	lds	r22, 0x1237
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a8 d7       	rcall	.+3920   	; 0x1b28 <__floatunsisf>
     bd8:	ad db       	rcall	.-2214   	; 0x334 <display_value>
	
	display_set_pos(0,8);
     bda:	68 e0       	ldi	r22, 0x08	; 8
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	f2 da       	rcall	.-2588   	; 0x1c8 <display_set_pos>
	display_text("1: ");
     be4:	82 e1       	ldi	r24, 0x12	; 18
     be6:	91 e1       	ldi	r25, 0x11	; 17
     be8:	e8 db       	rcall	.-2096   	; 0x3ba <display_text>
	display_value(gSensorBuffer[1]);
     bea:	60 91 38 12 	lds	r22, 0x1238
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	99 d7       	rcall	.+3890   	; 0x1b28 <__floatunsisf>
     bf6:	9e db       	rcall	.-2244   	; 0x334 <display_value>
	
	display_set_pos(1,0);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	e3 da       	rcall	.-2618   	; 0x1c8 <display_set_pos>
	display_text("2: ");
     c02:	86 e1       	ldi	r24, 0x16	; 22
     c04:	91 e1       	ldi	r25, 0x11	; 17
     c06:	d9 db       	rcall	.-2126   	; 0x3ba <display_text>
	display_value(gSensorBuffer[2]);
     c08:	60 91 39 12 	lds	r22, 0x1239
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	8a d7       	rcall	.+3860   	; 0x1b28 <__floatunsisf>
     c14:	8f db       	rcall	.-2274   	; 0x334 <display_value>
	
	display_set_pos(1,8);
     c16:	68 e0       	ldi	r22, 0x08	; 8
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	d4 da       	rcall	.-2648   	; 0x1c8 <display_set_pos>
	display_text("3: ");
     c20:	8a e1       	ldi	r24, 0x1A	; 26
     c22:	91 e1       	ldi	r25, 0x11	; 17
     c24:	ca db       	rcall	.-2156   	; 0x3ba <display_text>
	display_value(gSensorBuffer[3]);
     c26:	60 91 3a 12 	lds	r22, 0x123A
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	7b d7       	rcall	.+3830   	; 0x1b28 <__floatunsisf>
     c32:	80 db       	rcall	.-2304   	; 0x334 <display_value>
	
	display_set_pos(2,0);
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	c5 da       	rcall	.-2678   	; 0x1c8 <display_set_pos>
	display_text("4: ");
     c3e:	8e e1       	ldi	r24, 0x1E	; 30
     c40:	91 e1       	ldi	r25, 0x11	; 17
     c42:	bb db       	rcall	.-2186   	; 0x3ba <display_text>
	display_value(gSensorBuffer[4]);
     c44:	60 91 3b 12 	lds	r22, 0x123B
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	6c d7       	rcall	.+3800   	; 0x1b28 <__floatunsisf>
     c50:	71 db       	rcall	.-2334   	; 0x334 <display_value>
	
	display_set_pos(2,8);
     c52:	68 e0       	ldi	r22, 0x08	; 8
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	b6 da       	rcall	.-2708   	; 0x1c8 <display_set_pos>
	display_text("5: ");
     c5c:	82 e2       	ldi	r24, 0x22	; 34
     c5e:	91 e1       	ldi	r25, 0x11	; 17
     c60:	ac db       	rcall	.-2216   	; 0x3ba <display_text>
	display_value(gSensorBuffer[5]);
     c62:	60 91 3c 12 	lds	r22, 0x123C
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	5d d7       	rcall	.+3770   	; 0x1b28 <__floatunsisf>
     c6e:	62 db       	rcall	.-2364   	; 0x334 <display_value>
	
	display_set_pos(3,0);
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	a7 da       	rcall	.-2738   	; 0x1c8 <display_set_pos>
	display_text("6: ");
     c7a:	86 e2       	ldi	r24, 0x26	; 38
     c7c:	91 e1       	ldi	r25, 0x11	; 17
     c7e:	9d db       	rcall	.-2246   	; 0x3ba <display_text>
	display_value(gSensorBuffer[6]);
     c80:	60 91 3d 12 	lds	r22, 0x123D
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	4e d7       	rcall	.+3740   	; 0x1b28 <__floatunsisf>
     c8c:	53 db       	rcall	.-2394   	; 0x334 <display_value>
	
	display_set_pos(3,8);
     c8e:	68 e0       	ldi	r22, 0x08	; 8
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	98 da       	rcall	.-2768   	; 0x1c8 <display_set_pos>
	display_text("7: ");
     c98:	8a e2       	ldi	r24, 0x2A	; 42
     c9a:	91 e1       	ldi	r25, 0x11	; 17
     c9c:	8e db       	rcall	.-2276   	; 0x3ba <display_text>
	display_value(gSensorBuffer[7]);
     c9e:	60 91 3e 12 	lds	r22, 0x123E
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	3f d7       	rcall	.+3710   	; 0x1b28 <__floatunsisf>
     caa:	44 cb       	rjmp	.-2424   	; 0x334 <display_value>

00000cac <sensors_sampling_done>:
}

bool sensors_sampling_done()
{
	return sensorDataFlag;
}
     cac:	80 91 3f 12 	lds	r24, 0x123F
     cb0:	08 95       	ret

00000cb2 <sensors_reset_flag>:

void sensors_reset_flag()
{
	sensorDataFlag = false;
     cb2:	10 92 3f 12 	sts	0x123F, r1
     cb6:	08 95       	ret

00000cb8 <sensors_get_data>:
}

uint8_t* sensors_get_data()
{
	return gSensorBuffer;
}
     cb8:	87 e3       	ldi	r24, 0x37	; 55
     cba:	92 e1       	ldi	r25, 0x12	; 18
     cbc:	08 95       	ret

00000cbe <__vector_24>:


ISR(ADC_vect)
{
     cbe:	1f 92       	push	r1
     cc0:	0f 92       	push	r0
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	0f 92       	push	r0
     cc6:	11 24       	eor	r1, r1
     cc8:	0b b6       	in	r0, 0x3b	; 59
     cca:	0f 92       	push	r0
     ccc:	2f 92       	push	r2
     cce:	3f 92       	push	r3
     cd0:	4f 92       	push	r4
     cd2:	5f 92       	push	r5
     cd4:	6f 92       	push	r6
     cd6:	7f 92       	push	r7
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	2f 93       	push	r18
     cee:	3f 93       	push	r19
     cf0:	4f 93       	push	r20
     cf2:	5f 93       	push	r21
     cf4:	6f 93       	push	r22
     cf6:	7f 93       	push	r23
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	af 93       	push	r26
     cfe:	bf 93       	push	r27
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	2d 97       	sbiw	r28, 0x0d	; 13
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	cd bf       	out	0x3d, r28	; 61
	cli();
     d12:	f8 94       	cli
	uint8_t adcValue = ADCH;
     d14:	60 91 79 00 	lds	r22, 0x0079
	float vin = adcValue * 5.0 / 256.0;
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	06 d7       	rcall	.+3596   	; 0x1b2c <__floatsisf>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 ea       	ldi	r20, 0xA0	; 160
     d26:	50 e4       	ldi	r21, 0x40	; 64
     d28:	b5 d7       	rcall	.+3946   	; 0x1c94 <__mulsf3>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e8       	ldi	r20, 0x80	; 128
     d30:	5b e3       	ldi	r21, 0x3B	; 59
     d32:	b0 d7       	rcall	.+3936   	; 0x1c94 <__mulsf3>
     d34:	6d 83       	std	Y+5, r22	; 0x05
     d36:	7e 83       	std	Y+6, r23	; 0x06
     d38:	8f 83       	std	Y+7, r24	; 0x07
     d3a:	98 87       	std	Y+8, r25	; 0x08
     d3c:	56 2e       	mov	r5, r22
     d3e:	47 2e       	mov	r4, r23
     d40:	38 2e       	mov	r3, r24
     d42:	29 2e       	mov	r2, r25
	if(gSelectedSensor == 4)
     d44:	20 91 36 12 	lds	r18, 0x1236
     d48:	29 87       	std	Y+9, r18	; 0x09
     d4a:	24 30       	cpi	r18, 0x04	; 4
     d4c:	09 f0       	breq	.+2      	; 0xd50 <__vector_24+0x92>
     d4e:	2d c1       	rjmp	.+602    	; 0xfaa <__vector_24+0x2ec>
	return 0;
}

int voltage_to_mm_long(float voltage)
{
	if(voltage >= IRLong[0][0])
     d50:	c0 90 be 11 	lds	r12, 0x11BE
     d54:	d0 90 bf 11 	lds	r13, 0x11BF
     d58:	e0 90 c0 11 	lds	r14, 0x11C0
     d5c:	f0 90 c1 11 	lds	r15, 0x11C1
     d60:	a7 01       	movw	r20, r14
     d62:	96 01       	movw	r18, r12
     d64:	93 d7       	rcall	.+3878   	; 0x1c8c <__gesf2>
     d66:	88 23       	and	r24, r24
     d68:	84 f0       	brlt	.+32     	; 0xd8a <__vector_24+0xcc>
	{
		return IRLong[0][1]*10;
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	40 e2       	ldi	r20, 0x20	; 32
     d70:	51 e4       	ldi	r21, 0x41	; 65
     d72:	60 91 c2 11 	lds	r22, 0x11C2
     d76:	70 91 c3 11 	lds	r23, 0x11C3
     d7a:	80 91 c4 11 	lds	r24, 0x11C4
     d7e:	90 91 c5 11 	lds	r25, 0x11C5
     d82:	88 d7       	rcall	.+3856   	; 0x1c94 <__mulsf3>
     d84:	a0 d6       	rcall	.+3392   	; 0x1ac6 <__fixsfsi>
     d86:	cb 01       	movw	r24, r22
     d88:	0a c1       	rjmp	.+532    	; 0xf9e <__vector_24+0x2e0>
	} else if(voltage <= IRLong[14][0])
     d8a:	20 91 2e 12 	lds	r18, 0x122E
     d8e:	30 91 2f 12 	lds	r19, 0x122F
     d92:	40 91 30 12 	lds	r20, 0x1230
     d96:	50 91 31 12 	lds	r21, 0x1231
     d9a:	bd 81       	ldd	r27, Y+5	; 0x05
     d9c:	ae 81       	ldd	r26, Y+6	; 0x06
     d9e:	1f 81       	ldd	r17, Y+7	; 0x07
     da0:	08 85       	ldd	r16, Y+8	; 0x08
     da2:	6b 2f       	mov	r22, r27
     da4:	7a 2f       	mov	r23, r26
     da6:	81 2f       	mov	r24, r17
     da8:	90 2f       	mov	r25, r16
     daa:	21 d6       	rcall	.+3138   	; 0x19ee <__cmpsf2>
     dac:	18 16       	cp	r1, r24
     dae:	a4 f4       	brge	.+40     	; 0xdd8 <__vector_24+0x11a>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     db0:	80 90 c6 11 	lds	r8, 0x11C6
     db4:	90 90 c7 11 	lds	r9, 0x11C7
     db8:	a0 90 c8 11 	lds	r10, 0x11C8
     dbc:	b0 90 c9 11 	lds	r11, 0x11C9
		if(next == voltage)
     dc0:	a5 01       	movw	r20, r10
     dc2:	94 01       	movw	r18, r8
     dc4:	bd 81       	ldd	r27, Y+5	; 0x05
     dc6:	ae 81       	ldd	r26, Y+6	; 0x06
     dc8:	6b 2f       	mov	r22, r27
     dca:	7a 2f       	mov	r23, r26
     dcc:	81 2f       	mov	r24, r17
     dce:	90 2f       	mov	r25, r16
     dd0:	0e d6       	rcall	.+3100   	; 0x19ee <__cmpsf2>
     dd2:	81 11       	cpse	r24, r1
     dd4:	4c c0       	rjmp	.+152    	; 0xe6e <__vector_24+0x1b0>
     dd6:	32 c0       	rjmp	.+100    	; 0xe3c <__vector_24+0x17e>
	if(voltage >= IRLong[0][0])
	{
		return IRLong[0][1]*10;
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e2       	ldi	r20, 0x20	; 32
     dde:	51 e4       	ldi	r21, 0x41	; 65
     de0:	60 91 32 12 	lds	r22, 0x1232
     de4:	70 91 33 12 	lds	r23, 0x1233
     de8:	80 91 34 12 	lds	r24, 0x1234
     dec:	90 91 35 12 	lds	r25, 0x1235
     df0:	51 d7       	rcall	.+3746   	; 0x1c94 <__mulsf3>
     df2:	69 d6       	rcall	.+3282   	; 0x1ac6 <__fixsfsi>
     df4:	cb 01       	movw	r24, r22
     df6:	d3 c0       	rjmp	.+422    	; 0xf9e <__vector_24+0x2e0>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
     df8:	d3 01       	movw	r26, r6
     dfa:	8d 91       	ld	r24, X+
     dfc:	9d 91       	ld	r25, X+
     dfe:	0d 90       	ld	r0, X+
     e00:	bc 91       	ld	r27, X
     e02:	a0 2d       	mov	r26, r0
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	9a 83       	std	Y+2, r25	; 0x02
     e08:	ab 83       	std	Y+3, r26	; 0x03
     e0a:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRLong[i+1][0];
     e0c:	78 01       	movw	r14, r16
     e0e:	bf ef       	ldi	r27, 0xFF	; 255
     e10:	eb 1a       	sub	r14, r27
     e12:	fb 0a       	sbc	r15, r27
     e14:	e8 e0       	ldi	r30, 0x08	; 8
     e16:	6e 0e       	add	r6, r30
     e18:	71 1c       	adc	r7, r1
     e1a:	d3 01       	movw	r26, r6
     e1c:	8d 90       	ld	r8, X+
     e1e:	9d 90       	ld	r9, X+
     e20:	ad 90       	ld	r10, X+
     e22:	bc 90       	ld	r11, X
     e24:	1b 87       	std	Y+11, r17	; 0x0b
     e26:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
     e28:	a5 01       	movw	r20, r10
     e2a:	94 01       	movw	r18, r8
     e2c:	6d 2d       	mov	r22, r13
     e2e:	7c 2d       	mov	r23, r12
     e30:	83 2d       	mov	r24, r3
     e32:	92 2d       	mov	r25, r2
     e34:	dc d5       	rcall	.+3000   	; 0x19ee <__cmpsf2>
     e36:	81 11       	cpse	r24, r1
     e38:	2b c0       	rjmp	.+86     	; 0xe90 <__vector_24+0x1d2>
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <__vector_24+0x184>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e3c:	ee 24       	eor	r14, r14
     e3e:	e3 94       	inc	r14
     e40:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
     e42:	c7 01       	movw	r24, r14
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	82 54       	subi	r24, 0x42	; 66
     e52:	9e 4e       	sbci	r25, 0xEE	; 238
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	fc 01       	movw	r30, r24
     e5e:	64 81       	ldd	r22, Z+4	; 0x04
     e60:	75 81       	ldd	r23, Z+5	; 0x05
     e62:	86 81       	ldd	r24, Z+6	; 0x06
     e64:	97 81       	ldd	r25, Z+7	; 0x07
     e66:	16 d7       	rcall	.+3628   	; 0x1c94 <__mulsf3>
     e68:	2e d6       	rcall	.+3164   	; 0x1ac6 <__fixsfsi>
     e6a:	cb 01       	movw	r24, r22
     e6c:	98 c0       	rjmp	.+304    	; 0xf9e <__vector_24+0x2e0>
     e6e:	0f 2e       	mov	r0, r31
     e70:	f6 ec       	ldi	r31, 0xC6	; 198
     e72:	6f 2e       	mov	r6, r31
     e74:	f1 e1       	ldi	r31, 0x11	; 17
     e76:	7f 2e       	mov	r7, r31
     e78:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e7a:	01 e0       	ldi	r16, 0x01	; 1
     e7c:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
     e7e:	1b 86       	std	Y+11, r1	; 0x0b
     e80:	1a 86       	std	Y+10, r1	; 0x0a
     e82:	c9 82       	std	Y+1, r12	; 0x01
     e84:	da 82       	std	Y+2, r13	; 0x02
     e86:	eb 82       	std	Y+3, r14	; 0x03
     e88:	fc 82       	std	Y+4, r15	; 0x04
     e8a:	d5 2c       	mov	r13, r5
     e8c:	c4 2c       	mov	r12, r4
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <__vector_24+0x1d4>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     e90:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
     e92:	29 81       	ldd	r18, Y+1	; 0x01
     e94:	3a 81       	ldd	r19, Y+2	; 0x02
     e96:	4b 81       	ldd	r20, Y+3	; 0x03
     e98:	5c 81       	ldd	r21, Y+4	; 0x04
     e9a:	6d 2d       	mov	r22, r13
     e9c:	7c 2d       	mov	r23, r12
     e9e:	83 2d       	mov	r24, r3
     ea0:	92 2d       	mov	r25, r2
     ea2:	a5 d5       	rcall	.+2890   	; 0x19ee <__cmpsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	0c f0       	brlt	.+2      	; 0xeaa <__vector_24+0x1ec>
     ea8:	74 c0       	rjmp	.+232    	; 0xf92 <__vector_24+0x2d4>
     eaa:	a5 01       	movw	r20, r10
     eac:	94 01       	movw	r18, r8
     eae:	6d 2d       	mov	r22, r13
     eb0:	7c 2d       	mov	r23, r12
     eb2:	83 2d       	mov	r24, r3
     eb4:	92 2d       	mov	r25, r2
     eb6:	ea d6       	rcall	.+3540   	; 0x1c8c <__gesf2>
     eb8:	18 16       	cp	r1, r24
     eba:	0c f0       	brlt	.+2      	; 0xebe <__vector_24+0x200>
     ebc:	6a c0       	rjmp	.+212    	; 0xf92 <__vector_24+0x2d4>
     ebe:	c9 80       	ldd	r12, Y+1	; 0x01
     ec0:	da 80       	ldd	r13, Y+2	; 0x02
     ec2:	eb 80       	ldd	r14, Y+3	; 0x03
     ec4:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRLong[i][1]*10;
     ec6:	ea 85       	ldd	r30, Y+10	; 0x0a
     ec8:	fb 85       	ldd	r31, Y+11	; 0x0b
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	ee 0f       	add	r30, r30
     ed4:	ff 1f       	adc	r31, r31
     ed6:	e2 54       	subi	r30, 0x42	; 66
     ed8:	fe 4e       	sbci	r31, 0xEE	; 238
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e2       	ldi	r20, 0x20	; 32
     ee0:	51 e4       	ldi	r21, 0x41	; 65
     ee2:	64 81       	ldd	r22, Z+4	; 0x04
     ee4:	75 81       	ldd	r23, Z+5	; 0x05
     ee6:	86 81       	ldd	r24, Z+6	; 0x06
     ee8:	97 81       	ldd	r25, Z+7	; 0x07
     eea:	d4 d6       	rcall	.+3496   	; 0x1c94 <__mulsf3>
     eec:	ec d5       	rcall	.+3032   	; 0x1ac6 <__fixsfsi>
     eee:	1b 01       	movw	r2, r22
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     ef0:	88 27       	eor	r24, r24
     ef2:	77 fd       	sbrc	r23, 7
     ef4:	80 95       	com	r24
     ef6:	98 2f       	mov	r25, r24
     ef8:	19 d6       	rcall	.+3122   	; 0x1b2c <__floatsisf>
     efa:	2b 01       	movw	r4, r22
     efc:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
     efe:	7d 81       	ldd	r23, Y+5	; 0x05
     f00:	6e 81       	ldd	r22, Y+6	; 0x06
     f02:	9f 81       	ldd	r25, Y+7	; 0x07
     f04:	88 85       	ldd	r24, Y+8	; 0x08
     f06:	27 2f       	mov	r18, r23
     f08:	36 2f       	mov	r19, r22
     f0a:	49 2f       	mov	r20, r25
     f0c:	58 2f       	mov	r21, r24
     f0e:	c7 01       	movw	r24, r14
     f10:	b6 01       	movw	r22, r12
     f12:	08 d5       	rcall	.+2576   	; 0x1924 <__subsf3>
     f14:	69 83       	std	Y+1, r22	; 0x01
     f16:	7a 83       	std	Y+2, r23	; 0x02
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
     f1c:	f8 01       	movw	r30, r16
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	e2 54       	subi	r30, 0x42	; 66
     f2c:	fe 4e       	sbci	r31, 0xEE	; 238
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e2       	ldi	r20, 0x20	; 32
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	64 81       	ldd	r22, Z+4	; 0x04
     f38:	75 81       	ldd	r23, Z+5	; 0x05
     f3a:	86 81       	ldd	r24, Z+6	; 0x06
     f3c:	97 81       	ldd	r25, Z+7	; 0x07
     f3e:	aa d6       	rcall	.+3412   	; 0x1c94 <__mulsf3>
     f40:	c2 d5       	rcall	.+2948   	; 0x1ac6 <__fixsfsi>
			int diff = high - low;
     f42:	91 01       	movw	r18, r2
     f44:	26 1b       	sub	r18, r22
     f46:	37 0b       	sbc	r19, r23
     f48:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     f4a:	88 27       	eor	r24, r24
     f4c:	77 fd       	sbrc	r23, 7
     f4e:	80 95       	com	r24
     f50:	98 2f       	mov	r25, r24
     f52:	ec d5       	rcall	.+3032   	; 0x1b2c <__floatsisf>
     f54:	9b 01       	movw	r18, r22
     f56:	ac 01       	movw	r20, r24
     f58:	69 81       	ldd	r22, Y+1	; 0x01
     f5a:	7a 81       	ldd	r23, Y+2	; 0x02
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	99 d6       	rcall	.+3378   	; 0x1c94 <__mulsf3>
     f62:	69 83       	std	Y+1, r22	; 0x01
     f64:	7a 83       	std	Y+2, r23	; 0x02
     f66:	8b 83       	std	Y+3, r24	; 0x03
     f68:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
     f6a:	a5 01       	movw	r20, r10
     f6c:	94 01       	movw	r18, r8
     f6e:	c7 01       	movw	r24, r14
     f70:	b6 01       	movw	r22, r12
     f72:	d8 d4       	rcall	.+2480   	; 0x1924 <__subsf3>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
     f78:	69 81       	ldd	r22, Y+1	; 0x01
     f7a:	7a 81       	ldd	r23, Y+2	; 0x02
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	3a d5       	rcall	.+2676   	; 0x19f6 <__divsf3>
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	c3 01       	movw	r24, r6
     f88:	b2 01       	movw	r22, r4
     f8a:	cc d4       	rcall	.+2456   	; 0x1924 <__subsf3>
     f8c:	9c d5       	rcall	.+2872   	; 0x1ac6 <__fixsfsi>
     f8e:	cb 01       	movw	r24, r22
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <__vector_24+0x2e0>
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
     f92:	0d 30       	cpi	r16, 0x0D	; 13
     f94:	11 05       	cpc	r17, r1
     f96:	09 f0       	breq	.+2      	; 0xf9a <__vector_24+0x2dc>
     f98:	2f cf       	rjmp	.-418    	; 0xdf8 <__vector_24+0x13a>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return 0;
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
	cli();
	uint8_t adcValue = ADCH;
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
     f9e:	6a e0       	ldi	r22, 0x0A	; 10
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	db d6       	rcall	.+3510   	; 0x1d5a <__divmodhi4>
     fa4:	60 93 3b 12 	sts	0x123B, r22
     fa8:	3f c1       	rjmp	.+638    	; 0x1228 <__vector_24+0x56a>
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
     faa:	99 85       	ldd	r25, Y+9	; 0x09
     fac:	89 2f       	mov	r24, r25
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9d 87       	std	Y+13, r25	; 0x0d
     fb2:	8c 87       	std	Y+12, r24	; 0x0c
	IRLong[14][1] = 150;
}

int voltage_to_mm_short(float voltage)
{
	if(voltage >= IRShort[0][0])
     fb4:	c0 90 56 11 	lds	r12, 0x1156
     fb8:	d0 90 57 11 	lds	r13, 0x1157
     fbc:	e0 90 58 11 	lds	r14, 0x1158
     fc0:	f0 90 59 11 	lds	r15, 0x1159
     fc4:	a7 01       	movw	r20, r14
     fc6:	96 01       	movw	r18, r12
     fc8:	bd 81       	ldd	r27, Y+5	; 0x05
     fca:	ae 81       	ldd	r26, Y+6	; 0x06
     fcc:	1f 81       	ldd	r17, Y+7	; 0x07
     fce:	08 85       	ldd	r16, Y+8	; 0x08
     fd0:	6b 2f       	mov	r22, r27
     fd2:	7a 2f       	mov	r23, r26
     fd4:	81 2f       	mov	r24, r17
     fd6:	90 2f       	mov	r25, r16
     fd8:	59 d6       	rcall	.+3250   	; 0x1c8c <__gesf2>
     fda:	88 23       	and	r24, r24
     fdc:	84 f0       	brlt	.+32     	; 0xffe <__vector_24+0x340>
	{
		return IRShort[0][1]*10;
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	60 91 5a 11 	lds	r22, 0x115A
     fea:	70 91 5b 11 	lds	r23, 0x115B
     fee:	80 91 5c 11 	lds	r24, 0x115C
     ff2:	90 91 5d 11 	lds	r25, 0x115D
     ff6:	4e d6       	rcall	.+3228   	; 0x1c94 <__mulsf3>
     ff8:	66 d5       	rcall	.+2764   	; 0x1ac6 <__fixsfsi>
     ffa:	cb 01       	movw	r24, r22
     ffc:	0a c1       	rjmp	.+532    	; 0x1212 <__vector_24+0x554>
	} else if(voltage <= IRShort[12][0])
     ffe:	20 91 b6 11 	lds	r18, 0x11B6
    1002:	30 91 b7 11 	lds	r19, 0x11B7
    1006:	40 91 b8 11 	lds	r20, 0x11B8
    100a:	50 91 b9 11 	lds	r21, 0x11B9
    100e:	bd 81       	ldd	r27, Y+5	; 0x05
    1010:	ae 81       	ldd	r26, Y+6	; 0x06
    1012:	1f 81       	ldd	r17, Y+7	; 0x07
    1014:	08 85       	ldd	r16, Y+8	; 0x08
    1016:	6b 2f       	mov	r22, r27
    1018:	7a 2f       	mov	r23, r26
    101a:	81 2f       	mov	r24, r17
    101c:	90 2f       	mov	r25, r16
    101e:	e7 d4       	rcall	.+2510   	; 0x19ee <__cmpsf2>
    1020:	18 16       	cp	r1, r24
    1022:	a4 f4       	brge	.+40     	; 0x104c <__vector_24+0x38e>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    1024:	80 90 5e 11 	lds	r8, 0x115E
    1028:	90 90 5f 11 	lds	r9, 0x115F
    102c:	a0 90 60 11 	lds	r10, 0x1160
    1030:	b0 90 61 11 	lds	r11, 0x1161
		if(next == voltage)
    1034:	a5 01       	movw	r20, r10
    1036:	94 01       	movw	r18, r8
    1038:	bd 81       	ldd	r27, Y+5	; 0x05
    103a:	ae 81       	ldd	r26, Y+6	; 0x06
    103c:	6b 2f       	mov	r22, r27
    103e:	7a 2f       	mov	r23, r26
    1040:	81 2f       	mov	r24, r17
    1042:	90 2f       	mov	r25, r16
    1044:	d4 d4       	rcall	.+2472   	; 0x19ee <__cmpsf2>
    1046:	81 11       	cpse	r24, r1
    1048:	4c c0       	rjmp	.+152    	; 0x10e2 <__vector_24+0x424>
    104a:	32 c0       	rjmp	.+100    	; 0x10b0 <__vector_24+0x3f2>
	if(voltage >= IRShort[0][0])
	{
		return IRShort[0][1]*10;
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	60 91 ba 11 	lds	r22, 0x11BA
    1058:	70 91 bb 11 	lds	r23, 0x11BB
    105c:	80 91 bc 11 	lds	r24, 0x11BC
    1060:	90 91 bd 11 	lds	r25, 0x11BD
    1064:	17 d6       	rcall	.+3118   	; 0x1c94 <__mulsf3>
    1066:	2f d5       	rcall	.+2654   	; 0x1ac6 <__fixsfsi>
    1068:	cb 01       	movw	r24, r22
    106a:	d3 c0       	rjmp	.+422    	; 0x1212 <__vector_24+0x554>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
    106c:	d3 01       	movw	r26, r6
    106e:	8d 91       	ld	r24, X+
    1070:	9d 91       	ld	r25, X+
    1072:	0d 90       	ld	r0, X+
    1074:	bc 91       	ld	r27, X
    1076:	a0 2d       	mov	r26, r0
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	ab 83       	std	Y+3, r26	; 0x03
    107e:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRShort[i+1][0];
    1080:	78 01       	movw	r14, r16
    1082:	bf ef       	ldi	r27, 0xFF	; 255
    1084:	eb 1a       	sub	r14, r27
    1086:	fb 0a       	sbc	r15, r27
    1088:	e8 e0       	ldi	r30, 0x08	; 8
    108a:	6e 0e       	add	r6, r30
    108c:	71 1c       	adc	r7, r1
    108e:	d3 01       	movw	r26, r6
    1090:	8d 90       	ld	r8, X+
    1092:	9d 90       	ld	r9, X+
    1094:	ad 90       	ld	r10, X+
    1096:	bc 90       	ld	r11, X
    1098:	1b 87       	std	Y+11, r17	; 0x0b
    109a:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
    109c:	a5 01       	movw	r20, r10
    109e:	94 01       	movw	r18, r8
    10a0:	6d 2d       	mov	r22, r13
    10a2:	7c 2d       	mov	r23, r12
    10a4:	83 2d       	mov	r24, r3
    10a6:	92 2d       	mov	r25, r2
    10a8:	a2 d4       	rcall	.+2372   	; 0x19ee <__cmpsf2>
    10aa:	81 11       	cpse	r24, r1
    10ac:	2b c0       	rjmp	.+86     	; 0x1104 <__vector_24+0x446>
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <__vector_24+0x3f8>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10b0:	ee 24       	eor	r14, r14
    10b2:	e3 94       	inc	r14
    10b4:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
    10b6:	c7 01       	movw	r24, r14
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	8a 5a       	subi	r24, 0xAA	; 170
    10c6:	9e 4e       	sbci	r25, 0xEE	; 238
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e2       	ldi	r20, 0x20	; 32
    10ce:	51 e4       	ldi	r21, 0x41	; 65
    10d0:	fc 01       	movw	r30, r24
    10d2:	64 81       	ldd	r22, Z+4	; 0x04
    10d4:	75 81       	ldd	r23, Z+5	; 0x05
    10d6:	86 81       	ldd	r24, Z+6	; 0x06
    10d8:	97 81       	ldd	r25, Z+7	; 0x07
    10da:	dc d5       	rcall	.+3000   	; 0x1c94 <__mulsf3>
    10dc:	f4 d4       	rcall	.+2536   	; 0x1ac6 <__fixsfsi>
    10de:	cb 01       	movw	r24, r22
    10e0:	98 c0       	rjmp	.+304    	; 0x1212 <__vector_24+0x554>
    10e2:	0f 2e       	mov	r0, r31
    10e4:	fe e5       	ldi	r31, 0x5E	; 94
    10e6:	6f 2e       	mov	r6, r31
    10e8:	f1 e1       	ldi	r31, 0x11	; 17
    10ea:	7f 2e       	mov	r7, r31
    10ec:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    10ee:	01 e0       	ldi	r16, 0x01	; 1
    10f0:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
    10f2:	1b 86       	std	Y+11, r1	; 0x0b
    10f4:	1a 86       	std	Y+10, r1	; 0x0a
    10f6:	c9 82       	std	Y+1, r12	; 0x01
    10f8:	da 82       	std	Y+2, r13	; 0x02
    10fa:	eb 82       	std	Y+3, r14	; 0x03
    10fc:	fc 82       	std	Y+4, r15	; 0x04
    10fe:	d5 2c       	mov	r13, r5
    1100:	c4 2c       	mov	r12, r4
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <__vector_24+0x448>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
    1104:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
    1106:	29 81       	ldd	r18, Y+1	; 0x01
    1108:	3a 81       	ldd	r19, Y+2	; 0x02
    110a:	4b 81       	ldd	r20, Y+3	; 0x03
    110c:	5c 81       	ldd	r21, Y+4	; 0x04
    110e:	6d 2d       	mov	r22, r13
    1110:	7c 2d       	mov	r23, r12
    1112:	83 2d       	mov	r24, r3
    1114:	92 2d       	mov	r25, r2
    1116:	6b d4       	rcall	.+2262   	; 0x19ee <__cmpsf2>
    1118:	88 23       	and	r24, r24
    111a:	0c f0       	brlt	.+2      	; 0x111e <__vector_24+0x460>
    111c:	74 c0       	rjmp	.+232    	; 0x1206 <__vector_24+0x548>
    111e:	a5 01       	movw	r20, r10
    1120:	94 01       	movw	r18, r8
    1122:	6d 2d       	mov	r22, r13
    1124:	7c 2d       	mov	r23, r12
    1126:	83 2d       	mov	r24, r3
    1128:	92 2d       	mov	r25, r2
    112a:	b0 d5       	rcall	.+2912   	; 0x1c8c <__gesf2>
    112c:	18 16       	cp	r1, r24
    112e:	0c f0       	brlt	.+2      	; 0x1132 <__vector_24+0x474>
    1130:	6a c0       	rjmp	.+212    	; 0x1206 <__vector_24+0x548>
    1132:	c9 80       	ldd	r12, Y+1	; 0x01
    1134:	da 80       	ldd	r13, Y+2	; 0x02
    1136:	eb 80       	ldd	r14, Y+3	; 0x03
    1138:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRShort[i][1]*10;
    113a:	ea 85       	ldd	r30, Y+10	; 0x0a
    113c:	fb 85       	ldd	r31, Y+11	; 0x0b
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	ea 5a       	subi	r30, 0xAA	; 170
    114c:	fe 4e       	sbci	r31, 0xEE	; 238
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	64 81       	ldd	r22, Z+4	; 0x04
    1158:	75 81       	ldd	r23, Z+5	; 0x05
    115a:	86 81       	ldd	r24, Z+6	; 0x06
    115c:	97 81       	ldd	r25, Z+7	; 0x07
    115e:	9a d5       	rcall	.+2868   	; 0x1c94 <__mulsf3>
    1160:	b2 d4       	rcall	.+2404   	; 0x1ac6 <__fixsfsi>
    1162:	1b 01       	movw	r2, r22
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    1164:	88 27       	eor	r24, r24
    1166:	77 fd       	sbrc	r23, 7
    1168:	80 95       	com	r24
    116a:	98 2f       	mov	r25, r24
    116c:	df d4       	rcall	.+2494   	; 0x1b2c <__floatsisf>
    116e:	2b 01       	movw	r4, r22
    1170:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
    1172:	7d 81       	ldd	r23, Y+5	; 0x05
    1174:	6e 81       	ldd	r22, Y+6	; 0x06
    1176:	9f 81       	ldd	r25, Y+7	; 0x07
    1178:	88 85       	ldd	r24, Y+8	; 0x08
    117a:	27 2f       	mov	r18, r23
    117c:	36 2f       	mov	r19, r22
    117e:	49 2f       	mov	r20, r25
    1180:	58 2f       	mov	r21, r24
    1182:	c7 01       	movw	r24, r14
    1184:	b6 01       	movw	r22, r12
    1186:	ce d3       	rcall	.+1948   	; 0x1924 <__subsf3>
    1188:	69 83       	std	Y+1, r22	; 0x01
    118a:	7a 83       	std	Y+2, r23	; 0x02
    118c:	8b 83       	std	Y+3, r24	; 0x03
    118e:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
    1190:	f8 01       	movw	r30, r16
    1192:	ee 0f       	add	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	ea 5a       	subi	r30, 0xAA	; 170
    11a0:	fe 4e       	sbci	r31, 0xEE	; 238
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	64 81       	ldd	r22, Z+4	; 0x04
    11ac:	75 81       	ldd	r23, Z+5	; 0x05
    11ae:	86 81       	ldd	r24, Z+6	; 0x06
    11b0:	97 81       	ldd	r25, Z+7	; 0x07
    11b2:	70 d5       	rcall	.+2784   	; 0x1c94 <__mulsf3>
    11b4:	88 d4       	rcall	.+2320   	; 0x1ac6 <__fixsfsi>
			int diff = high - low;
    11b6:	91 01       	movw	r18, r2
    11b8:	26 1b       	sub	r18, r22
    11ba:	37 0b       	sbc	r19, r23
    11bc:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
    11be:	88 27       	eor	r24, r24
    11c0:	77 fd       	sbrc	r23, 7
    11c2:	80 95       	com	r24
    11c4:	98 2f       	mov	r25, r24
    11c6:	b2 d4       	rcall	.+2404   	; 0x1b2c <__floatsisf>
    11c8:	9b 01       	movw	r18, r22
    11ca:	ac 01       	movw	r20, r24
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	5f d5       	rcall	.+2750   	; 0x1c94 <__mulsf3>
    11d6:	69 83       	std	Y+1, r22	; 0x01
    11d8:	7a 83       	std	Y+2, r23	; 0x02
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
    11de:	a5 01       	movw	r20, r10
    11e0:	94 01       	movw	r18, r8
    11e2:	c7 01       	movw	r24, r14
    11e4:	b6 01       	movw	r22, r12
    11e6:	9e d3       	rcall	.+1852   	; 0x1924 <__subsf3>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
    11ec:	69 81       	ldd	r22, Y+1	; 0x01
    11ee:	7a 81       	ldd	r23, Y+2	; 0x02
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	00 d4       	rcall	.+2048   	; 0x19f6 <__divsf3>
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	c3 01       	movw	r24, r6
    11fc:	b2 01       	movw	r22, r4
    11fe:	92 d3       	rcall	.+1828   	; 0x1924 <__subsf3>
    1200:	62 d4       	rcall	.+2244   	; 0x1ac6 <__fixsfsi>
    1202:	cb 01       	movw	r24, r22
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <__vector_24+0x554>
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
    1206:	0d 30       	cpi	r16, 0x0D	; 13
    1208:	11 05       	cpc	r17, r1
    120a:	09 f0       	breq	.+2      	; 0x120e <__vector_24+0x550>
    120c:	2f cf       	rjmp	.-418    	; 0x106c <__vector_24+0x3ae>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return 0;
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
    1212:	ec 85       	ldd	r30, Y+12	; 0x0c
    1214:	fd 85       	ldd	r31, Y+13	; 0x0d
    1216:	e9 5c       	subi	r30, 0xC9	; 201
    1218:	fd 4e       	sbci	r31, 0xED	; 237
    121a:	6a e0       	ldi	r22, 0x0A	; 10
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	9d d5       	rcall	.+2874   	; 0x1d5a <__divmodhi4>
    1220:	60 83       	st	Z, r22
	}
	
	if(gSelectedSensor < 6)
    1222:	39 85       	ldd	r19, Y+9	; 0x09
    1224:	36 30       	cpi	r19, 0x06	; 6
    1226:	38 f4       	brcc	.+14     	; 0x1236 <__vector_24+0x578>
	{
		// Not last sensor
		select_sensor(gSelectedSensor + 1);
    1228:	a9 85       	ldd	r26, Y+9	; 0x09
    122a:	8a 2f       	mov	r24, r26
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	ba d9       	rcall	.-3212   	; 0x5a6 <select_sensor>
		adc_start();
    1232:	b3 d9       	rcall	.-3226   	; 0x59a <adc_start>
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <__vector_24+0x58a>
	} else {
		select_sensor(0);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	b5 d9       	rcall	.-3222   	; 0x5a6 <select_sensor>
	}
}

void start_ul_sensor()
{
	TCNT0 = 0;
    123c:	16 bc       	out	0x26, r1	; 38
	PORTA |= (1<<PORTA7);
    123e:	17 9a       	sbi	0x02, 7	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1240:	b0 e5       	ldi	r27, 0x50	; 80
    1242:	ba 95       	dec	r27
    1244:	f1 f7       	brne	.-4      	; 0x1242 <__vector_24+0x584>
	_delay_us(15);
	PORTA &= ~(1<<PORTA7);
    1246:	17 98       	cbi	0x02, 7	; 2
		adc_start();
	} else {
		select_sensor(0);
		start_ul_sensor();
	}
	sei();
    1248:	78 94       	sei
}
    124a:	2d 96       	adiw	r28, 0x0d	; 13
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	bf 90       	pop	r11
    1280:	af 90       	pop	r10
    1282:	9f 90       	pop	r9
    1284:	8f 90       	pop	r8
    1286:	7f 90       	pop	r7
    1288:	6f 90       	pop	r6
    128a:	5f 90       	pop	r5
    128c:	4f 90       	pop	r4
    128e:	3f 90       	pop	r3
    1290:	2f 90       	pop	r2
    1292:	0f 90       	pop	r0
    1294:	0b be       	out	0x3b, r0	; 59
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 90       	pop	r0
    129c:	1f 90       	pop	r1
    129e:	18 95       	reti

000012a0 <__vector_4>:

ISR(PCINT0_vect)
{
    12a0:	1f 92       	push	r1
    12a2:	0f 92       	push	r0
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
    12aa:	8f 93       	push	r24
	cli();
    12ac:	f8 94       	cli
	if(PINA & (1<<PINA6))
    12ae:	06 9b       	sbis	0x00, 6	; 0
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <__vector_4+0x16>
	{
		TCNT0 = 0;
    12b2:	16 bc       	out	0x26, r1	; 38
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <__vector_4+0x22>
	}
	else
	{
		uint8_t UL = TCNT0;
    12b6:	86 b5       	in	r24, 0x26	; 38
		gSensorBuffer[7] = UL;
    12b8:	80 93 3e 12 	sts	0x123E, r24
		sensorDataFlag = true;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 93 3f 12 	sts	0x123F, r24
	}
	sei();
    12c2:	78 94       	sei
}
    12c4:	8f 91       	pop	r24
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <set_twi_reciever_enable>:
	{
		sweepFlag_ = 0;
		return 1;
	}
	return 0;
}
    12d0:	85 e4       	ldi	r24, 0x45	; 69
    12d2:	80 93 bc 00 	sts	0x00BC, r24
    12d6:	08 95       	ret

000012d8 <clear_int>:
    12d8:	81 ec       	ldi	r24, 0xC1	; 193
    12da:	80 93 bc 00 	sts	0x00BC, r24
    12de:	08 95       	ret

000012e0 <start_bus>:
    12e0:	84 ea       	ldi	r24, 0xA4	; 164
    12e2:	80 93 bc 00 	sts	0x00BC, r24
    12e6:	08 95       	ret

000012e8 <stop_bus>:
    12e8:	85 ed       	ldi	r24, 0xD5	; 213
    12ea:	80 93 bc 00 	sts	0x00BC, r24
    12ee:	08 95       	ret

000012f0 <Error>:
    12f0:	80 91 b9 00 	lds	r24, 0x00B9
    12f4:	88 7f       	andi	r24, 0xF8	; 248
    12f6:	88 33       	cpi	r24, 0x38	; 56
    12f8:	09 f0       	breq	.+2      	; 0x12fc <Error+0xc>
    12fa:	f6 cf       	rjmp	.-20     	; 0x12e8 <stop_bus>
    12fc:	ed cf       	rjmp	.-38     	; 0x12d8 <clear_int>

000012fe <get_data>:
    12fe:	80 91 bb 00 	lds	r24, 0x00BB
    1302:	08 95       	ret

00001304 <wait_for_bus>:
    1304:	ec eb       	ldi	r30, 0xBC	; 188
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	88 23       	and	r24, r24
    130c:	ec f7       	brge	.-6      	; 0x1308 <wait_for_bus+0x4>
    130e:	08 95       	ret

00001310 <send_data_and_wait>:
    1310:	80 93 bb 00 	sts	0x00BB, r24
    1314:	84 e8       	ldi	r24, 0x84	; 132
    1316:	80 93 bc 00 	sts	0x00BC, r24
    131a:	f4 cf       	rjmp	.-24     	; 0x1304 <wait_for_bus>

0000131c <stop_twi>:
    131c:	10 92 59 13 	sts	0x1359, r1
    1320:	10 92 58 13 	sts	0x1358, r1
    1324:	10 92 63 13 	sts	0x1363, r1
    1328:	10 92 62 13 	sts	0x1362, r1
    132c:	10 92 4e 13 	sts	0x134E, r1
    1330:	10 92 4d 13 	sts	0x134D, r1
    1334:	10 92 53 13 	sts	0x1353, r1
    1338:	10 92 52 13 	sts	0x1352, r1
    133c:	10 92 56 13 	sts	0x1356, r1
    1340:	10 92 55 13 	sts	0x1355, r1
    1344:	08 95       	ret

00001346 <reset_TWI>:
    1346:	ec eb       	ldi	r30, 0xBC	; 188
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 6c       	ori	r24, 0xC0	; 192
    134e:	80 83       	st	Z, r24
    1350:	08 95       	ret

00001352 <get_sensor_from_bus>:
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	c0 91 62 13 	lds	r28, 0x1362
    135a:	d0 91 63 13 	lds	r29, 0x1363
    135e:	c8 30       	cpi	r28, 0x08	; 8
    1360:	d1 05       	cpc	r29, r1
    1362:	91 f4       	brne	.+36     	; 0x1388 <get_sensor_from_bus+0x36>
    1364:	e4 e6       	ldi	r30, 0x64	; 100
    1366:	f3 e1       	ldi	r31, 0x13	; 19
    1368:	ac e6       	ldi	r26, 0x6C	; 108
    136a:	b3 e1       	ldi	r27, 0x13	; 19
    136c:	8c e6       	ldi	r24, 0x6C	; 108
    136e:	93 e1       	ldi	r25, 0x13	; 19
    1370:	21 91       	ld	r18, Z+
    1372:	2d 93       	st	X+, r18
    1374:	e8 17       	cp	r30, r24
    1376:	f9 07       	cpc	r31, r25
    1378:	d9 f7       	brne	.-10     	; 0x1370 <get_sensor_from_bus+0x1e>
    137a:	c1 df       	rcall	.-126    	; 0x12fe <get_data>
    137c:	80 93 5c 13 	sts	0x135C, r24
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	80 93 45 12 	sts	0x1245, r24
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <get_sensor_from_bus+0x50>
    1388:	ba df       	rcall	.-140    	; 0x12fe <get_data>
    138a:	cc 59       	subi	r28, 0x9C	; 156
    138c:	dc 4e       	sbci	r29, 0xEC	; 236
    138e:	88 83       	st	Y, r24
    1390:	80 91 62 13 	lds	r24, 0x1362
    1394:	90 91 63 13 	lds	r25, 0x1363
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	90 93 63 13 	sts	0x1363, r25
    139e:	80 93 62 13 	sts	0x1362, r24
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <get_control_settings_from_bus>:
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	c0 91 52 13 	lds	r28, 0x1352
    13b0:	d0 91 53 13 	lds	r29, 0x1353
    13b4:	a4 df       	rcall	.-184    	; 0x12fe <get_data>
    13b6:	c1 5b       	subi	r28, 0xB1	; 177
    13b8:	dc 4e       	sbci	r29, 0xEC	; 236
    13ba:	88 83       	st	Y, r24
    13bc:	10 92 53 13 	sts	0x1353, r1
    13c0:	10 92 52 13 	sts	0x1352, r1
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	08 95       	ret

000013ca <get_autonom_settings_from_bus>:
    13ca:	99 df       	rcall	.-206    	; 0x12fe <get_data>
    13cc:	80 93 4d 12 	sts	0x124D, r24
    13d0:	08 95       	ret

000013d2 <get_char_from_bus>:
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	c0 91 4d 13 	lds	r28, 0x134D
    13da:	d0 91 4e 13 	lds	r29, 0x134E
    13de:	8f df       	rcall	.-226    	; 0x12fe <get_data>
    13e0:	c2 5b       	subi	r28, 0xB2	; 178
    13e2:	dd 4e       	sbci	r29, 0xED	; 237
    13e4:	88 83       	st	Y, r24
    13e6:	80 91 4d 13 	lds	r24, 0x134D
    13ea:	90 91 4e 13 	lds	r25, 0x134E
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	90 93 4e 13 	sts	0x134E, r25
    13f4:	80 93 4d 13 	sts	0x134D, r24
    13f8:	90 93 5e 13 	sts	0x135E, r25
    13fc:	80 93 5d 13 	sts	0x135D, r24
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <TWI_init>:
    1406:	80 93 54 13 	sts	0x1354, r24
    140a:	80 34       	cpi	r24, 0x40	; 64
    140c:	79 f0       	breq	.+30     	; 0x142c <TWI_init+0x26>
    140e:	80 38       	cpi	r24, 0x80	; 128
    1410:	19 f0       	breq	.+6      	; 0x1418 <TWI_init+0x12>
    1412:	80 32       	cpi	r24, 0x20	; 32
    1414:	d1 f4       	brne	.+52     	; 0x144a <TWI_init+0x44>
    1416:	12 c0       	rjmp	.+36     	; 0x143c <TWI_init+0x36>
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	88 b9       	out	0x08, r24	; 8
    141c:	59 df       	rcall	.-334    	; 0x12d0 <set_twi_reciever_enable>
    141e:	8f e3       	ldi	r24, 0x3F	; 63
    1420:	80 93 b8 00 	sts	0x00B8, r24
    1424:	81 e8       	ldi	r24, 0x81	; 129
    1426:	80 93 ba 00 	sts	0x00BA, r24
    142a:	08 95       	ret
    142c:	8f e3       	ldi	r24, 0x3F	; 63
    142e:	80 93 b8 00 	sts	0x00B8, r24
    1432:	4e df       	rcall	.-356    	; 0x12d0 <set_twi_reciever_enable>
    1434:	80 e4       	ldi	r24, 0x40	; 64
    1436:	80 93 ba 00 	sts	0x00BA, r24
    143a:	08 95       	ret
    143c:	8f e3       	ldi	r24, 0x3F	; 63
    143e:	80 93 b8 00 	sts	0x00B8, r24
    1442:	46 df       	rcall	.-372    	; 0x12d0 <set_twi_reciever_enable>
    1444:	81 e2       	ldi	r24, 0x21	; 33
    1446:	80 93 ba 00 	sts	0x00BA, r24
    144a:	08 95       	ret

0000144c <TWI_send_sensors>:
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	d8 2f       	mov	r29, r24
    1458:	c9 2f       	mov	r28, r25
    145a:	f6 2e       	mov	r15, r22
    145c:	41 df       	rcall	.-382    	; 0x12e0 <start_bus>
    145e:	52 df       	rcall	.-348    	; 0x1304 <wait_for_bus>
    1460:	20 91 b9 00 	lds	r18, 0x00B9
    1464:	28 7f       	andi	r18, 0xF8	; 248
    1466:	28 30       	cpi	r18, 0x08	; 8
    1468:	19 f0       	breq	.+6      	; 0x1470 <TWI_send_sensors+0x24>
    146a:	42 df       	rcall	.-380    	; 0x12f0 <Error>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	1a c0       	rjmp	.+52     	; 0x14a4 <TWI_send_sensors+0x58>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	4e df       	rcall	.-356    	; 0x1310 <send_data_and_wait>
    1474:	80 91 b9 00 	lds	r24, 0x00B9
    1478:	88 7f       	andi	r24, 0xF8	; 248
    147a:	88 31       	cpi	r24, 0x18	; 24
    147c:	19 f0       	breq	.+6      	; 0x1484 <TWI_send_sensors+0x38>
    147e:	38 df       	rcall	.-400    	; 0x12f0 <Error>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	10 c0       	rjmp	.+32     	; 0x14a4 <TWI_send_sensors+0x58>
    1484:	0d 2f       	mov	r16, r29
    1486:	1c 2f       	mov	r17, r28
    1488:	c0 e0       	ldi	r28, 0x00	; 0
    148a:	d0 e0       	ldi	r29, 0x00	; 0
    148c:	f8 01       	movw	r30, r16
    148e:	81 91       	ld	r24, Z+
    1490:	8f 01       	movw	r16, r30
    1492:	3e df       	rcall	.-388    	; 0x1310 <send_data_and_wait>
    1494:	21 96       	adiw	r28, 0x01	; 1
    1496:	c8 30       	cpi	r28, 0x08	; 8
    1498:	d1 05       	cpc	r29, r1
    149a:	c1 f7       	brne	.-16     	; 0x148c <TWI_send_sensors+0x40>
    149c:	8f 2d       	mov	r24, r15
    149e:	38 df       	rcall	.-400    	; 0x1310 <send_data_and_wait>
    14a0:	23 df       	rcall	.-442    	; 0x12e8 <stop_bus>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	08 95       	ret

000014b0 <decode_message_TwiFIFO>:

//------------------------------------------------------------------------------FIFO

uint8_t decode_message_TwiFIFO()
{
    14b0:	8f 92       	push	r8
    14b2:	9f 92       	push	r9
    14b4:	af 92       	push	r10
    14b6:	bf 92       	push	r11
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
	
	display_clear();
	display_text_fixed_length(msg, length);
	
	return 0;
}
    14cc:	ad b6       	in	r10, 0x3d	; 61
    14ce:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	80 91 00 01 	lds	r24, 0x0100
    14d8:	90 91 01 01 	lds	r25, 0x0101
    14dc:	0e 94 2a 02 	call	0x454	; 0x454 <FifoRead>
    14e0:	81 11       	cpse	r24, r1
    14e2:	46 c0       	rjmp	.+140    	; 0x1570 <decode_message_TwiFIFO+0xc0>
	{
		//No new messages
		return 1; // error
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
    14e4:	c0 90 00 00 	lds	r12, 0x0000
    14e8:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];
    14ea:	96 01       	movw	r18, r12
    14ec:	21 50       	subi	r18, 0x01	; 1
    14ee:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	c1 14       	cp	r12, r1
    14f6:	d1 04       	cpc	r13, r1
    14f8:	11 f0       	breq	.+4      	; 0x14fe <decode_message_TwiFIFO+0x4e>
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
	char msg[length-1+ifzero];
    14fe:	82 0f       	add	r24, r18
    1500:	93 1f       	adc	r25, r19
    1502:	2d b7       	in	r18, 0x3d	; 61
    1504:	3e b7       	in	r19, 0x3e	; 62
    1506:	28 1b       	sub	r18, r24
    1508:	39 0b       	sbc	r19, r25
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	3e bf       	out	0x3e, r19	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	2d bf       	out	0x3d, r18	; 61
    1514:	2f 5f       	subi	r18, 0xFF	; 255
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	82 2e       	mov	r8, r18
    151a:	93 2e       	mov	r9, r19

	for(int i = 0; i < length; ++i)
    151c:	1c 14       	cp	r1, r12
    151e:	1d 04       	cpc	r1, r13
    1520:	f4 f4       	brge	.+60     	; 0x155e <decode_message_TwiFIFO+0xae>
    1522:	e2 2e       	mov	r14, r18
    1524:	f3 2e       	mov	r15, r19
    1526:	00 e0       	ldi	r16, 0x00	; 0
    1528:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gTwiFIFO, character))
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	80 91 00 01 	lds	r24, 0x0100
    1532:	90 91 01 01 	lds	r25, 0x0101
    1536:	0e 94 2a 02 	call	0x454	; 0x454 <FifoRead>
    153a:	88 23       	and	r24, r24
    153c:	31 f0       	breq	.+12     	; 0x154a <decode_message_TwiFIFO+0x9a>
		{
			display_text("FIFO ERROR 2!");
    153e:	8e e2       	ldi	r24, 0x2E	; 46
    1540:	91 e1       	ldi	r25, 0x11	; 17
    1542:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_text>
			return 1; // error
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <decode_message_TwiFIFO+0xc2>
		}

		msg[i] = *character;
    154a:	20 91 00 00 	lds	r18, 0x0000
    154e:	f7 01       	movw	r30, r14
    1550:	21 93       	st	Z+, r18
    1552:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
    1554:	0f 5f       	subi	r16, 0xFF	; 255
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	0c 15       	cp	r16, r12
    155a:	1d 05       	cpc	r17, r13
    155c:	34 f3       	brlt	.-52     	; 0x152a <decode_message_TwiFIFO+0x7a>
	}
	
	
	// TODO: send to relevant party... the display for now
	
	display_clear();
    155e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <display_clear>
	display_text_fixed_length(msg, length);
    1562:	b6 01       	movw	r22, r12
    1564:	88 2d       	mov	r24, r8
    1566:	99 2d       	mov	r25, r9
    1568:	0e 94 c7 01 	call	0x38e	; 0x38e <display_text_fixed_length>
	
	return 0;
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <decode_message_TwiFIFO+0xc2>
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
	{
		//No new messages
		return 1; // error
    1570:	81 e0       	ldi	r24, 0x01	; 1
	
	display_clear();
	display_text_fixed_length(msg, length);
	
	return 0;
}
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	be be       	out	0x3e, r11	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	ad be       	out	0x3d, r10	; 61
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	bf 90       	pop	r11
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	08 95       	ret

00001596 <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	e8 2e       	mov	r14, r24
    15a4:	f9 2e       	mov	r15, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)strlen(msg)))
    15a6:	e8 2f       	mov	r30, r24
    15a8:	f9 2f       	mov	r31, r25
    15aa:	df 01       	movw	r26, r30
    15ac:	0d 90       	ld	r0, X+
    15ae:	00 20       	and	r0, r0
    15b0:	e9 f7       	brne	.-6      	; 0x15ac <write_to_TwiFIFO+0x16>
    15b2:	11 97       	sbiw	r26, 0x01	; 1
    15b4:	bd 01       	movw	r22, r26
    15b6:	6e 1b       	sub	r22, r30
    15b8:	7f 0b       	sbc	r23, r31
    15ba:	80 91 00 01 	lds	r24, 0x0100
    15be:	90 91 01 01 	lds	r25, 0x0101
    15c2:	0e 94 0a 02 	call	0x414	; 0x414 <FifoWrite>
    15c6:	81 11       	cpse	r24, r1
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <write_to_TwiFIFO+0x3e>
    15ca:	0e 2d       	mov	r16, r14
    15cc:	1f 2d       	mov	r17, r15
    15ce:	c0 e0       	ldi	r28, 0x00	; 0
    15d0:	d0 e0       	ldi	r29, 0x00	; 0
    15d2:	18 c0       	rjmp	.+48     	; 0x1604 <write_to_TwiFIFO+0x6e>
	{
		display_text("FIFO ERROR 3");
    15d4:	8c e3       	ldi	r24, 0x3C	; 60
    15d6:	91 e1       	ldi	r25, 0x11	; 17
    15d8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_text>
		return 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	1f c0       	rjmp	.+62     	; 0x161e <write_to_TwiFIFO+0x88>
	}
	
	for(int i = 0; i < strlen(msg); ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    15e0:	f8 01       	movw	r30, r16
    15e2:	61 91       	ld	r22, Z+
    15e4:	8f 01       	movw	r16, r30
    15e6:	80 91 00 01 	lds	r24, 0x0100
    15ea:	90 91 01 01 	lds	r25, 0x0101
    15ee:	0e 94 0a 02 	call	0x414	; 0x414 <FifoWrite>
    15f2:	88 23       	and	r24, r24
    15f4:	31 f0       	breq	.+12     	; 0x1602 <write_to_TwiFIFO+0x6c>
		{
			display_text("FIFO ERROR 4");
    15f6:	89 e4       	ldi	r24, 0x49	; 73
    15f8:	91 e1       	ldi	r25, 0x11	; 17
    15fa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_text>
			return 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e c0       	rjmp	.+28     	; 0x161e <write_to_TwiFIFO+0x88>
	{
		display_text("FIFO ERROR 3");
		return 1;
	}
	
	for(int i = 0; i < strlen(msg); ++i)
    1602:	21 96       	adiw	r28, 0x01	; 1
    1604:	ee 2d       	mov	r30, r14
    1606:	ff 2d       	mov	r31, r15
    1608:	df 01       	movw	r26, r30
    160a:	0d 90       	ld	r0, X+
    160c:	00 20       	and	r0, r0
    160e:	e9 f7       	brne	.-6      	; 0x160a <write_to_TwiFIFO+0x74>
    1610:	11 97       	sbiw	r26, 0x01	; 1
    1612:	ae 1b       	sub	r26, r30
    1614:	bf 0b       	sbc	r27, r31
    1616:	ca 17       	cp	r28, r26
    1618:	db 07       	cpc	r29, r27
    161a:	10 f3       	brcs	.-60     	; 0x15e0 <write_to_TwiFIFO+0x4a>
			display_text("FIFO ERROR 4");
			return 1;
		}
	}
	
	return 0;
    161c:	80 e0       	ldi	r24, 0x00	; 0
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	08 95       	ret

0000162c <__vector_26>:


//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	0b b6       	in	r0, 0x3b	; 59
    1638:	0f 92       	push	r0
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	ef 93       	push	r30
    1654:	ff 93       	push	r31
	switch(myAdress)
    1656:	80 91 54 13 	lds	r24, 0x1354
    165a:	85 30       	cpi	r24, 0x05	; 5
    165c:	09 f4       	brne	.+2      	; 0x1660 <__vector_26+0x34>
    165e:	48 c1       	rjmp	.+656    	; 0x18f0 <__vector_26+0x2c4>
    1660:	48 f4       	brcc	.+18     	; 0x1674 <__vector_26+0x48>
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	09 f4       	brne	.+2      	; 0x1668 <__vector_26+0x3c>
    1666:	40 c1       	rjmp	.+640    	; 0x18e8 <__vector_26+0x2bc>
    1668:	08 f4       	brcc	.+2      	; 0x166c <__vector_26+0x40>
    166a:	36 c1       	rjmp	.+620    	; 0x18d8 <__vector_26+0x2ac>
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	09 f0       	breq	.+2      	; 0x1672 <__vector_26+0x46>
    1670:	44 c1       	rjmp	.+648    	; 0x18fa <__vector_26+0x2ce>
    1672:	36 c1       	rjmp	.+620    	; 0x18e0 <__vector_26+0x2b4>
    1674:	80 34       	cpi	r24, 0x40	; 64
    1676:	09 f4       	brne	.+2      	; 0x167a <__vector_26+0x4e>
    1678:	6f c0       	rjmp	.+222    	; 0x1758 <__vector_26+0x12c>
    167a:	80 38       	cpi	r24, 0x80	; 128
    167c:	21 f0       	breq	.+8      	; 0x1686 <__vector_26+0x5a>
    167e:	80 32       	cpi	r24, 0x20	; 32
    1680:	09 f0       	breq	.+2      	; 0x1684 <__vector_26+0x58>
    1682:	3b c1       	rjmp	.+630    	; 0x18fa <__vector_26+0x2ce>
    1684:	b1 c0       	rjmp	.+354    	; 0x17e8 <__vector_26+0x1bc>
	{
		case(C_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1686:	80 91 b9 00 	lds	r24, 0x00B9
    168a:	88 7f       	andi	r24, 0xF8	; 248
    168c:	80 36       	cpi	r24, 0x60	; 96
    168e:	29 f0       	breq	.+10     	; 0x169a <__vector_26+0x6e>
    1690:	80 91 b9 00 	lds	r24, 0x00B9
    1694:	88 7f       	andi	r24, 0xF8	; 248
    1696:	88 36       	cpi	r24, 0x68	; 104
    1698:	21 f4       	brne	.+8      	; 0x16a2 <__vector_26+0x76>
			{
				instruction = 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 93 57 13 	sts	0x1357, r24
    16a0:	59 c0       	rjmp	.+178    	; 0x1754 <__vector_26+0x128>
				
			}
			else if(CONTROL == DATA_SLAW)
    16a2:	80 91 b9 00 	lds	r24, 0x00B9
    16a6:	88 7f       	andi	r24, 0xF8	; 248
    16a8:	80 38       	cpi	r24, 0x80	; 128
    16aa:	b1 f5       	brne	.+108    	; 0x1718 <__vector_26+0xec>
			{
				if(instruction)
    16ac:	80 91 57 13 	lds	r24, 0x1357
    16b0:	88 23       	and	r24, r24
    16b2:	41 f0       	breq	.+16     	; 0x16c4 <__vector_26+0x98>
				{
					currentInstruction = get_data();
    16b4:	24 de       	rcall	.-952    	; 0x12fe <get_data>
    16b6:	80 93 60 13 	sts	0x1360, r24
    16ba:	10 92 61 13 	sts	0x1361, r1
					instruction = 0;
    16be:	10 92 57 13 	sts	0x1357, r1
    16c2:	48 c0       	rjmp	.+144    	; 0x1754 <__vector_26+0x128>
				}
				else
				{
					switch(currentInstruction)
    16c4:	80 91 60 13 	lds	r24, 0x1360
    16c8:	90 91 61 13 	lds	r25, 0x1361
    16cc:	85 30       	cpi	r24, 0x05	; 5
    16ce:	91 05       	cpc	r25, r1
    16d0:	69 f0       	breq	.+26     	; 0x16ec <__vector_26+0xc0>
    16d2:	24 f4       	brge	.+8      	; 0x16dc <__vector_26+0xb0>
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	09 f0       	breq	.+2      	; 0x16da <__vector_26+0xae>
    16d8:	3d c0       	rjmp	.+122    	; 0x1754 <__vector_26+0x128>
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <__vector_26+0xbc>
    16dc:	86 30       	cpi	r24, 0x06	; 6
    16de:	91 05       	cpc	r25, r1
    16e0:	49 f0       	breq	.+18     	; 0x16f4 <__vector_26+0xc8>
    16e2:	49 97       	sbiw	r24, 0x19	; 25
    16e4:	b9 f5       	brne	.+110    	; 0x1754 <__vector_26+0x128>
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <__vector_26+0xc4>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    16e8:	5f de       	rcall	.-834    	; 0x13a8 <get_control_settings_from_bus>
							break;
    16ea:	34 c0       	rjmp	.+104    	; 0x1754 <__vector_26+0x128>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    16ec:	6e de       	rcall	.-804    	; 0x13ca <get_autonom_settings_from_bus>
							break;
    16ee:	32 c0       	rjmp	.+100    	; 0x1754 <__vector_26+0x128>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    16f0:	70 de       	rcall	.-800    	; 0x13d2 <get_char_from_bus>
							break;
    16f2:	30 c0       	rjmp	.+96     	; 0x1754 <__vector_26+0x128>
	currentCommand += 1;
}

void get_float_from_bus()
{
	floatMessage[floatCounter] = get_data();
    16f4:	c0 91 55 13 	lds	r28, 0x1355
    16f8:	d0 91 56 13 	lds	r29, 0x1356
    16fc:	00 de       	rcall	.-1024   	; 0x12fe <get_data>
    16fe:	ca 5b       	subi	r28, 0xBA	; 186
    1700:	dd 4e       	sbci	r29, 0xED	; 237
    1702:	88 83       	st	Y, r24
	floatCounter += 1;
    1704:	80 91 55 13 	lds	r24, 0x1355
    1708:	90 91 56 13 	lds	r25, 0x1356
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	90 93 56 13 	sts	0x1356, r25
    1712:	80 93 55 13 	sts	0x1355, r24
    1716:	1e c0       	rjmp	.+60     	; 0x1754 <__vector_26+0x128>
							break;
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    1718:	80 91 b9 00 	lds	r24, 0x00B9
    171c:	88 7f       	andi	r24, 0xF8	; 248
    171e:	80 39       	cpi	r24, 0x90	; 144
    1720:	11 f4       	brne	.+4      	; 0x1726 <__vector_26+0xfa>
			{
				get_sensor_from_bus();
    1722:	17 de       	rcall	.-978    	; 0x1352 <get_sensor_from_bus>
    1724:	17 c0       	rjmp	.+46     	; 0x1754 <__vector_26+0x128>
			}
			else if (CONTROL == STOP)
    1726:	80 91 b9 00 	lds	r24, 0x00B9
    172a:	88 7f       	andi	r24, 0xF8	; 248
    172c:	80 3a       	cpi	r24, 0xA0	; 160
    172e:	91 f4       	brne	.+36     	; 0x1754 <__vector_26+0x128>
			{
				stop_twi();
    1730:	f5 dd       	rcall	.-1046   	; 0x131c <stop_twi>
				switch(currentInstruction)
    1732:	80 91 60 13 	lds	r24, 0x1360
    1736:	90 91 61 13 	lds	r25, 0x1361
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	19 f0       	breq	.+6      	; 0x1746 <__vector_26+0x11a>
    1740:	05 97       	sbiw	r24, 0x05	; 5
    1742:	41 f4       	brne	.+16     	; 0x1754 <__vector_26+0x128>
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__vector_26+0x122>
				{
					case(I_SETTINGS):
					{
						controlSettingsFlag_ = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	80 93 43 12 	sts	0x1243, r24
						break;
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <__vector_26+0x128>
					}
					case(I_AUTONOM):
					{
						autonomSettingsFlag_ = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	80 93 42 12 	sts	0x1242, r24
						//Do smart stuff
						break;
					}
				}
			}
			reset_TWI();
    1754:	f8 dd       	rcall	.-1040   	; 0x1346 <reset_TWI>
			break;
    1756:	d1 c0       	rjmp	.+418    	; 0x18fa <__vector_26+0x2ce>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1758:	80 91 b9 00 	lds	r24, 0x00B9
    175c:	88 7f       	andi	r24, 0xF8	; 248
    175e:	80 36       	cpi	r24, 0x60	; 96
    1760:	29 f0       	breq	.+10     	; 0x176c <__vector_26+0x140>
    1762:	80 91 b9 00 	lds	r24, 0x00B9
    1766:	88 7f       	andi	r24, 0xF8	; 248
    1768:	88 36       	cpi	r24, 0x68	; 104
    176a:	21 f4       	brne	.+8      	; 0x1774 <__vector_26+0x148>
			{
				instruction = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 57 13 	sts	0x1357, r24
    1772:	38 c0       	rjmp	.+112    	; 0x17e4 <__vector_26+0x1b8>
			}
			else if(CONTROL == DATA_SLAW)
    1774:	80 91 b9 00 	lds	r24, 0x00B9
    1778:	88 7f       	andi	r24, 0xF8	; 248
    177a:	80 38       	cpi	r24, 0x80	; 128
    177c:	e1 f4       	brne	.+56     	; 0x17b6 <__vector_26+0x18a>
			{
				if(instruction)
    177e:	80 91 57 13 	lds	r24, 0x1357
    1782:	88 23       	and	r24, r24
    1784:	41 f0       	breq	.+16     	; 0x1796 <__vector_26+0x16a>
				{
					currentInstruction = get_data();
    1786:	bb dd       	rcall	.-1162   	; 0x12fe <get_data>
    1788:	80 93 60 13 	sts	0x1360, r24
    178c:	10 92 61 13 	sts	0x1361, r1
					instruction = 0;
    1790:	10 92 57 13 	sts	0x1357, r1
    1794:	27 c0       	rjmp	.+78     	; 0x17e4 <__vector_26+0x1b8>
				}
				else
				{
					switch(currentInstruction)
    1796:	80 91 60 13 	lds	r24, 0x1360
    179a:	90 91 61 13 	lds	r25, 0x1361
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	91 05       	cpc	r25, r1
    17a2:	19 f0       	breq	.+6      	; 0x17aa <__vector_26+0x17e>
    17a4:	49 97       	sbiw	r24, 0x19	; 25
    17a6:	f1 f4       	brne	.+60     	; 0x17e4 <__vector_26+0x1b8>
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <__vector_26+0x186>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    17aa:	a9 dd       	rcall	.-1198   	; 0x12fe <get_data>
    17ac:	80 93 5f 13 	sts	0x135F, r24
    17b0:	19 c0       	rjmp	.+50     	; 0x17e4 <__vector_26+0x1b8>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    17b2:	0f de       	rcall	.-994    	; 0x13d2 <get_char_from_bus>
							break;
    17b4:	17 c0       	rjmp	.+46     	; 0x17e4 <__vector_26+0x1b8>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    17b6:	80 91 b9 00 	lds	r24, 0x00B9
    17ba:	88 7f       	andi	r24, 0xF8	; 248
    17bc:	80 3a       	cpi	r24, 0xA0	; 160
    17be:	91 f4       	brne	.+36     	; 0x17e4 <__vector_26+0x1b8>
			{
				stop_twi();
    17c0:	ad dd       	rcall	.-1190   	; 0x131c <stop_twi>
				switch(currentInstruction)
    17c2:	80 91 60 13 	lds	r24, 0x1360
    17c6:	90 91 61 13 	lds	r25, 0x1361
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	91 05       	cpc	r25, r1
    17ce:	19 f0       	breq	.+6      	; 0x17d6 <__vector_26+0x1aa>
    17d0:	49 97       	sbiw	r24, 0x19	; 25
    17d2:	41 f4       	brne	.+16     	; 0x17e4 <__vector_26+0x1b8>
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <__vector_26+0x1b2>
				{
					case(I_SWEEP):
					{
						sweepFlag_ = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 93 40 12 	sts	0x1240, r24
						break;
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <__vector_26+0x1b8>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    17de:	8e e4       	ldi	r24, 0x4E	; 78
    17e0:	92 e1       	ldi	r25, 0x12	; 18
    17e2:	d9 de       	rcall	.-590    	; 0x1596 <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    17e4:	b0 dd       	rcall	.-1184   	; 0x1346 <reset_TWI>
			break;
    17e6:	89 c0       	rjmp	.+274    	; 0x18fa <__vector_26+0x2ce>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADDRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    17e8:	80 91 b9 00 	lds	r24, 0x00B9
    17ec:	88 7f       	andi	r24, 0xF8	; 248
    17ee:	80 36       	cpi	r24, 0x60	; 96
    17f0:	29 f0       	breq	.+10     	; 0x17fc <__vector_26+0x1d0>
    17f2:	80 91 b9 00 	lds	r24, 0x00B9
    17f6:	88 7f       	andi	r24, 0xF8	; 248
    17f8:	88 36       	cpi	r24, 0x68	; 104
    17fa:	21 f4       	brne	.+8      	; 0x1804 <__vector_26+0x1d8>
			{
				instruction = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	80 93 57 13 	sts	0x1357, r24
    1802:	7a c0       	rjmp	.+244    	; 0x18f8 <__vector_26+0x2cc>
			}
			else if(CONTROL == DATA_SLAW)
    1804:	80 91 b9 00 	lds	r24, 0x00B9
    1808:	88 7f       	andi	r24, 0xF8	; 248
    180a:	80 38       	cpi	r24, 0x80	; 128
    180c:	09 f0       	breq	.+2      	; 0x1810 <__vector_26+0x1e4>
    180e:	57 c0       	rjmp	.+174    	; 0x18be <__vector_26+0x292>
			{
				if(instruction)
    1810:	80 91 57 13 	lds	r24, 0x1357
    1814:	88 23       	and	r24, r24
    1816:	41 f0       	breq	.+16     	; 0x1828 <__vector_26+0x1fc>
				{
					currentInstruction = get_data();
    1818:	72 dd       	rcall	.-1308   	; 0x12fe <get_data>
    181a:	80 93 60 13 	sts	0x1360, r24
    181e:	10 92 61 13 	sts	0x1361, r1
					instruction = 0;
    1822:	10 92 57 13 	sts	0x1357, r1
    1826:	68 c0       	rjmp	.+208    	; 0x18f8 <__vector_26+0x2cc>
				}
				else
				{
					switch(currentInstruction)
    1828:	80 91 60 13 	lds	r24, 0x1360
    182c:	90 91 61 13 	lds	r25, 0x1361
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <__vector_26+0x20c>
    1836:	3f c0       	rjmp	.+126    	; 0x18b6 <__vector_26+0x28a>
    1838:	1c f4       	brge	.+6      	; 0x1840 <__vector_26+0x214>
    183a:	89 2b       	or	r24, r25
    183c:	41 f0       	breq	.+16     	; 0x184e <__vector_26+0x222>
    183e:	5c c0       	rjmp	.+184    	; 0x18f8 <__vector_26+0x2cc>
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	91 05       	cpc	r25, r1
    1844:	b1 f0       	breq	.+44     	; 0x1872 <__vector_26+0x246>
    1846:	05 97       	sbiw	r24, 0x05	; 5
    1848:	09 f0       	breq	.+2      	; 0x184c <__vector_26+0x220>
    184a:	56 c0       	rjmp	.+172    	; 0x18f8 <__vector_26+0x2cc>
    184c:	36 c0       	rjmp	.+108    	; 0x18ba <__vector_26+0x28e>
	messageLength = messageCounter;
}

void get_command_from_bus()
{
	command[currentCommand] = get_data();
    184e:	c0 91 58 13 	lds	r28, 0x1358
    1852:	d0 91 59 13 	lds	r29, 0x1359
    1856:	53 dd       	rcall	.-1370   	; 0x12fe <get_data>
    1858:	c6 5b       	subi	r28, 0xB6	; 182
    185a:	dd 4e       	sbci	r29, 0xED	; 237
    185c:	88 83       	st	Y, r24
	currentCommand += 1;
    185e:	80 91 58 13 	lds	r24, 0x1358
    1862:	90 91 59 13 	lds	r25, 0x1359
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	90 93 59 13 	sts	0x1359, r25
    186c:	80 93 58 13 	sts	0x1358, r24
    1870:	43 c0       	rjmp	.+134    	; 0x18f8 <__vector_26+0x2cc>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation += get_data();
    1872:	45 dd       	rcall	.-1398   	; 0x12fe <get_data>
    1874:	20 91 5a 13 	lds	r18, 0x135A
    1878:	30 91 5b 13 	lds	r19, 0x135B
    187c:	a9 01       	movw	r20, r18
    187e:	48 0f       	add	r20, r24
    1880:	51 1d       	adc	r21, r1
    1882:	ca 01       	movw	r24, r20
	if(elevation < 1)
    1884:	18 16       	cp	r1, r24
    1886:	19 06       	cpc	r1, r25
    1888:	3c f0       	brlt	.+14     	; 0x1898 <__vector_26+0x26c>
		elevation = 1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	90 93 5b 13 	sts	0x135B, r25
    1892:	80 93 5a 13 	sts	0x135A, r24
    1896:	30 c0       	rjmp	.+96     	; 0x18f8 <__vector_26+0x2cc>
	else if(elevation > 7) // 7 nivåer?!
    1898:	48 30       	cpi	r20, 0x08	; 8
    189a:	51 05       	cpc	r21, r1
    189c:	2c f4       	brge	.+10     	; 0x18a8 <__vector_26+0x27c>
	floatCounter += 1;
}

void get_elevation_from_bus()
{
	elevation += get_data();
    189e:	50 93 5b 13 	sts	0x135B, r21
    18a2:	40 93 5a 13 	sts	0x135A, r20
    18a6:	28 c0       	rjmp	.+80     	; 0x18f8 <__vector_26+0x2cc>
	if(elevation < 1)
		elevation = 1;
	else if(elevation > 7) // 7 nivåer?!
		elevation = 7;
    18a8:	87 e0       	ldi	r24, 0x07	; 7
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	90 93 5b 13 	sts	0x135B, r25
    18b0:	80 93 5a 13 	sts	0x135A, r24
    18b4:	21 c0       	rjmp	.+66     	; 0x18f8 <__vector_26+0x2cc>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    18b6:	78 dd       	rcall	.-1296   	; 0x13a8 <get_control_settings_from_bus>
							break;
    18b8:	1f c0       	rjmp	.+62     	; 0x18f8 <__vector_26+0x2cc>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    18ba:	87 dd       	rcall	.-1266   	; 0x13ca <get_autonom_settings_from_bus>
							break;
    18bc:	1d c0       	rjmp	.+58     	; 0x18f8 <__vector_26+0x2cc>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    18be:	80 91 b9 00 	lds	r24, 0x00B9
    18c2:	88 7f       	andi	r24, 0xF8	; 248
    18c4:	80 39       	cpi	r24, 0x90	; 144
    18c6:	11 f4       	brne	.+4      	; 0x18cc <__vector_26+0x2a0>
			{
				get_sensor_from_bus();
    18c8:	44 dd       	rcall	.-1400   	; 0x1352 <get_sensor_from_bus>
    18ca:	16 c0       	rjmp	.+44     	; 0x18f8 <__vector_26+0x2cc>
			}
			else if (CONTROL == STOP)
    18cc:	80 91 b9 00 	lds	r24, 0x00B9
    18d0:	88 7f       	andi	r24, 0xF8	; 248
    18d2:	80 3a       	cpi	r24, 0xA0	; 160
    18d4:	89 f4       	brne	.+34     	; 0x18f8 <__vector_26+0x2cc>
			{
				stop_twi();
    18d6:	22 dd       	rcall	.-1468   	; 0x131c <stop_twi>
				case(I_COMMAND):
				{
					commandFlag_ = 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	80 93 44 12 	sts	0x1244, r24
					break;
    18de:	0d c0       	rjmp	.+26     	; 0x18fa <__vector_26+0x2ce>
				}
				case(I_ELEVATION):
				{
					elevationFlag_ = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 41 12 	sts	0x1241, r24
					break;
    18e6:	09 c0       	rjmp	.+18     	; 0x18fa <__vector_26+0x2ce>
				}
				case(I_SETTINGS):
				{
					controlSettingsFlag_ = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	80 93 43 12 	sts	0x1243, r24
					break;
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <__vector_26+0x2ce>
				}
				case(I_AUTONOM):
				{
					autonomSettingsFlag_ = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 42 12 	sts	0x1242, r24
					break;
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <__vector_26+0x2ce>
				}
			}
			reset_TWI();
    18f8:	26 dd       	rcall	.-1460   	; 0x1346 <reset_TWI>
			break;
		}
	}
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	bf 91       	pop	r27
    1904:	af 91       	pop	r26
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	7f 91       	pop	r23
    190c:	6f 91       	pop	r22
    190e:	5f 91       	pop	r21
    1910:	4f 91       	pop	r20
    1912:	3f 91       	pop	r19
    1914:	2f 91       	pop	r18
    1916:	0f 90       	pop	r0
    1918:	0b be       	out	0x3b, r0	; 59
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <__subsf3>:
    1924:	50 58       	subi	r21, 0x80	; 128

00001926 <__addsf3>:
    1926:	bb 27       	eor	r27, r27
    1928:	aa 27       	eor	r26, r26
    192a:	0e d0       	rcall	.+28     	; 0x1948 <__addsf3x>
    192c:	75 c1       	rjmp	.+746    	; 0x1c18 <__fp_round>
    192e:	66 d1       	rcall	.+716    	; 0x1bfc <__fp_pscA>
    1930:	30 f0       	brcs	.+12     	; 0x193e <__addsf3+0x18>
    1932:	6b d1       	rcall	.+726    	; 0x1c0a <__fp_pscB>
    1934:	20 f0       	brcs	.+8      	; 0x193e <__addsf3+0x18>
    1936:	31 f4       	brne	.+12     	; 0x1944 <__addsf3+0x1e>
    1938:	9f 3f       	cpi	r25, 0xFF	; 255
    193a:	11 f4       	brne	.+4      	; 0x1940 <__addsf3+0x1a>
    193c:	1e f4       	brtc	.+6      	; 0x1944 <__addsf3+0x1e>
    193e:	5b c1       	rjmp	.+694    	; 0x1bf6 <__fp_nan>
    1940:	0e f4       	brtc	.+2      	; 0x1944 <__addsf3+0x1e>
    1942:	e0 95       	com	r30
    1944:	e7 fb       	bst	r30, 7
    1946:	51 c1       	rjmp	.+674    	; 0x1bea <__fp_inf>

00001948 <__addsf3x>:
    1948:	e9 2f       	mov	r30, r25
    194a:	77 d1       	rcall	.+750    	; 0x1c3a <__fp_split3>
    194c:	80 f3       	brcs	.-32     	; 0x192e <__addsf3+0x8>
    194e:	ba 17       	cp	r27, r26
    1950:	62 07       	cpc	r22, r18
    1952:	73 07       	cpc	r23, r19
    1954:	84 07       	cpc	r24, r20
    1956:	95 07       	cpc	r25, r21
    1958:	18 f0       	brcs	.+6      	; 0x1960 <__addsf3x+0x18>
    195a:	71 f4       	brne	.+28     	; 0x1978 <__addsf3x+0x30>
    195c:	9e f5       	brtc	.+102    	; 0x19c4 <__addsf3x+0x7c>
    195e:	8f c1       	rjmp	.+798    	; 0x1c7e <__fp_zero>
    1960:	0e f4       	brtc	.+2      	; 0x1964 <__addsf3x+0x1c>
    1962:	e0 95       	com	r30
    1964:	0b 2e       	mov	r0, r27
    1966:	ba 2f       	mov	r27, r26
    1968:	a0 2d       	mov	r26, r0
    196a:	0b 01       	movw	r0, r22
    196c:	b9 01       	movw	r22, r18
    196e:	90 01       	movw	r18, r0
    1970:	0c 01       	movw	r0, r24
    1972:	ca 01       	movw	r24, r20
    1974:	a0 01       	movw	r20, r0
    1976:	11 24       	eor	r1, r1
    1978:	ff 27       	eor	r31, r31
    197a:	59 1b       	sub	r21, r25
    197c:	99 f0       	breq	.+38     	; 0x19a4 <__addsf3x+0x5c>
    197e:	59 3f       	cpi	r21, 0xF9	; 249
    1980:	50 f4       	brcc	.+20     	; 0x1996 <__addsf3x+0x4e>
    1982:	50 3e       	cpi	r21, 0xE0	; 224
    1984:	68 f1       	brcs	.+90     	; 0x19e0 <__addsf3x+0x98>
    1986:	1a 16       	cp	r1, r26
    1988:	f0 40       	sbci	r31, 0x00	; 0
    198a:	a2 2f       	mov	r26, r18
    198c:	23 2f       	mov	r18, r19
    198e:	34 2f       	mov	r19, r20
    1990:	44 27       	eor	r20, r20
    1992:	58 5f       	subi	r21, 0xF8	; 248
    1994:	f3 cf       	rjmp	.-26     	; 0x197c <__addsf3x+0x34>
    1996:	46 95       	lsr	r20
    1998:	37 95       	ror	r19
    199a:	27 95       	ror	r18
    199c:	a7 95       	ror	r26
    199e:	f0 40       	sbci	r31, 0x00	; 0
    19a0:	53 95       	inc	r21
    19a2:	c9 f7       	brne	.-14     	; 0x1996 <__addsf3x+0x4e>
    19a4:	7e f4       	brtc	.+30     	; 0x19c4 <__addsf3x+0x7c>
    19a6:	1f 16       	cp	r1, r31
    19a8:	ba 0b       	sbc	r27, r26
    19aa:	62 0b       	sbc	r22, r18
    19ac:	73 0b       	sbc	r23, r19
    19ae:	84 0b       	sbc	r24, r20
    19b0:	ba f0       	brmi	.+46     	; 0x19e0 <__addsf3x+0x98>
    19b2:	91 50       	subi	r25, 0x01	; 1
    19b4:	a1 f0       	breq	.+40     	; 0x19de <__addsf3x+0x96>
    19b6:	ff 0f       	add	r31, r31
    19b8:	bb 1f       	adc	r27, r27
    19ba:	66 1f       	adc	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	88 1f       	adc	r24, r24
    19c0:	c2 f7       	brpl	.-16     	; 0x19b2 <__addsf3x+0x6a>
    19c2:	0e c0       	rjmp	.+28     	; 0x19e0 <__addsf3x+0x98>
    19c4:	ba 0f       	add	r27, r26
    19c6:	62 1f       	adc	r22, r18
    19c8:	73 1f       	adc	r23, r19
    19ca:	84 1f       	adc	r24, r20
    19cc:	48 f4       	brcc	.+18     	; 0x19e0 <__addsf3x+0x98>
    19ce:	87 95       	ror	r24
    19d0:	77 95       	ror	r23
    19d2:	67 95       	ror	r22
    19d4:	b7 95       	ror	r27
    19d6:	f7 95       	ror	r31
    19d8:	9e 3f       	cpi	r25, 0xFE	; 254
    19da:	08 f0       	brcs	.+2      	; 0x19de <__addsf3x+0x96>
    19dc:	b3 cf       	rjmp	.-154    	; 0x1944 <__addsf3+0x1e>
    19de:	93 95       	inc	r25
    19e0:	88 0f       	add	r24, r24
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <__addsf3x+0x9e>
    19e4:	99 27       	eor	r25, r25
    19e6:	ee 0f       	add	r30, r30
    19e8:	97 95       	ror	r25
    19ea:	87 95       	ror	r24
    19ec:	08 95       	ret

000019ee <__cmpsf2>:
    19ee:	d9 d0       	rcall	.+434    	; 0x1ba2 <__fp_cmp>
    19f0:	08 f4       	brcc	.+2      	; 0x19f4 <__cmpsf2+0x6>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	08 95       	ret

000019f6 <__divsf3>:
    19f6:	0c d0       	rcall	.+24     	; 0x1a10 <__divsf3x>
    19f8:	0f c1       	rjmp	.+542    	; 0x1c18 <__fp_round>
    19fa:	07 d1       	rcall	.+526    	; 0x1c0a <__fp_pscB>
    19fc:	40 f0       	brcs	.+16     	; 0x1a0e <__divsf3+0x18>
    19fe:	fe d0       	rcall	.+508    	; 0x1bfc <__fp_pscA>
    1a00:	30 f0       	brcs	.+12     	; 0x1a0e <__divsf3+0x18>
    1a02:	21 f4       	brne	.+8      	; 0x1a0c <__divsf3+0x16>
    1a04:	5f 3f       	cpi	r21, 0xFF	; 255
    1a06:	19 f0       	breq	.+6      	; 0x1a0e <__divsf3+0x18>
    1a08:	f0 c0       	rjmp	.+480    	; 0x1bea <__fp_inf>
    1a0a:	51 11       	cpse	r21, r1
    1a0c:	39 c1       	rjmp	.+626    	; 0x1c80 <__fp_szero>
    1a0e:	f3 c0       	rjmp	.+486    	; 0x1bf6 <__fp_nan>

00001a10 <__divsf3x>:
    1a10:	14 d1       	rcall	.+552    	; 0x1c3a <__fp_split3>
    1a12:	98 f3       	brcs	.-26     	; 0x19fa <__divsf3+0x4>

00001a14 <__divsf3_pse>:
    1a14:	99 23       	and	r25, r25
    1a16:	c9 f3       	breq	.-14     	; 0x1a0a <__divsf3+0x14>
    1a18:	55 23       	and	r21, r21
    1a1a:	b1 f3       	breq	.-20     	; 0x1a08 <__divsf3+0x12>
    1a1c:	95 1b       	sub	r25, r21
    1a1e:	55 0b       	sbc	r21, r21
    1a20:	bb 27       	eor	r27, r27
    1a22:	aa 27       	eor	r26, r26
    1a24:	62 17       	cp	r22, r18
    1a26:	73 07       	cpc	r23, r19
    1a28:	84 07       	cpc	r24, r20
    1a2a:	38 f0       	brcs	.+14     	; 0x1a3a <__divsf3_pse+0x26>
    1a2c:	9f 5f       	subi	r25, 0xFF	; 255
    1a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a30:	22 0f       	add	r18, r18
    1a32:	33 1f       	adc	r19, r19
    1a34:	44 1f       	adc	r20, r20
    1a36:	aa 1f       	adc	r26, r26
    1a38:	a9 f3       	breq	.-22     	; 0x1a24 <__divsf3_pse+0x10>
    1a3a:	33 d0       	rcall	.+102    	; 0x1aa2 <__divsf3_pse+0x8e>
    1a3c:	0e 2e       	mov	r0, r30
    1a3e:	3a f0       	brmi	.+14     	; 0x1a4e <__divsf3_pse+0x3a>
    1a40:	e0 e8       	ldi	r30, 0x80	; 128
    1a42:	30 d0       	rcall	.+96     	; 0x1aa4 <__divsf3_pse+0x90>
    1a44:	91 50       	subi	r25, 0x01	; 1
    1a46:	50 40       	sbci	r21, 0x00	; 0
    1a48:	e6 95       	lsr	r30
    1a4a:	00 1c       	adc	r0, r0
    1a4c:	ca f7       	brpl	.-14     	; 0x1a40 <__divsf3_pse+0x2c>
    1a4e:	29 d0       	rcall	.+82     	; 0x1aa2 <__divsf3_pse+0x8e>
    1a50:	fe 2f       	mov	r31, r30
    1a52:	27 d0       	rcall	.+78     	; 0x1aa2 <__divsf3_pse+0x8e>
    1a54:	66 0f       	add	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	bb 1f       	adc	r27, r27
    1a5c:	26 17       	cp	r18, r22
    1a5e:	37 07       	cpc	r19, r23
    1a60:	48 07       	cpc	r20, r24
    1a62:	ab 07       	cpc	r26, r27
    1a64:	b0 e8       	ldi	r27, 0x80	; 128
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <__divsf3_pse+0x56>
    1a68:	bb 0b       	sbc	r27, r27
    1a6a:	80 2d       	mov	r24, r0
    1a6c:	bf 01       	movw	r22, r30
    1a6e:	ff 27       	eor	r31, r31
    1a70:	93 58       	subi	r25, 0x83	; 131
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
    1a74:	2a f0       	brmi	.+10     	; 0x1a80 <__divsf3_pse+0x6c>
    1a76:	9e 3f       	cpi	r25, 0xFE	; 254
    1a78:	51 05       	cpc	r21, r1
    1a7a:	68 f0       	brcs	.+26     	; 0x1a96 <__divsf3_pse+0x82>
    1a7c:	b6 c0       	rjmp	.+364    	; 0x1bea <__fp_inf>
    1a7e:	00 c1       	rjmp	.+512    	; 0x1c80 <__fp_szero>
    1a80:	5f 3f       	cpi	r21, 0xFF	; 255
    1a82:	ec f3       	brlt	.-6      	; 0x1a7e <__divsf3_pse+0x6a>
    1a84:	98 3e       	cpi	r25, 0xE8	; 232
    1a86:	dc f3       	brlt	.-10     	; 0x1a7e <__divsf3_pse+0x6a>
    1a88:	86 95       	lsr	r24
    1a8a:	77 95       	ror	r23
    1a8c:	67 95       	ror	r22
    1a8e:	b7 95       	ror	r27
    1a90:	f7 95       	ror	r31
    1a92:	9f 5f       	subi	r25, 0xFF	; 255
    1a94:	c9 f7       	brne	.-14     	; 0x1a88 <__divsf3_pse+0x74>
    1a96:	88 0f       	add	r24, r24
    1a98:	91 1d       	adc	r25, r1
    1a9a:	96 95       	lsr	r25
    1a9c:	87 95       	ror	r24
    1a9e:	97 f9       	bld	r25, 7
    1aa0:	08 95       	ret
    1aa2:	e1 e0       	ldi	r30, 0x01	; 1
    1aa4:	66 0f       	add	r22, r22
    1aa6:	77 1f       	adc	r23, r23
    1aa8:	88 1f       	adc	r24, r24
    1aaa:	bb 1f       	adc	r27, r27
    1aac:	62 17       	cp	r22, r18
    1aae:	73 07       	cpc	r23, r19
    1ab0:	84 07       	cpc	r24, r20
    1ab2:	ba 07       	cpc	r27, r26
    1ab4:	20 f0       	brcs	.+8      	; 0x1abe <__divsf3_pse+0xaa>
    1ab6:	62 1b       	sub	r22, r18
    1ab8:	73 0b       	sbc	r23, r19
    1aba:	84 0b       	sbc	r24, r20
    1abc:	ba 0b       	sbc	r27, r26
    1abe:	ee 1f       	adc	r30, r30
    1ac0:	88 f7       	brcc	.-30     	; 0x1aa4 <__divsf3_pse+0x90>
    1ac2:	e0 95       	com	r30
    1ac4:	08 95       	ret

00001ac6 <__fixsfsi>:
    1ac6:	04 d0       	rcall	.+8      	; 0x1ad0 <__fixunssfsi>
    1ac8:	68 94       	set
    1aca:	b1 11       	cpse	r27, r1
    1acc:	d9 c0       	rjmp	.+434    	; 0x1c80 <__fp_szero>
    1ace:	08 95       	ret

00001ad0 <__fixunssfsi>:
    1ad0:	bc d0       	rcall	.+376    	; 0x1c4a <__fp_splitA>
    1ad2:	88 f0       	brcs	.+34     	; 0x1af6 <__fixunssfsi+0x26>
    1ad4:	9f 57       	subi	r25, 0x7F	; 127
    1ad6:	90 f0       	brcs	.+36     	; 0x1afc <__fixunssfsi+0x2c>
    1ad8:	b9 2f       	mov	r27, r25
    1ada:	99 27       	eor	r25, r25
    1adc:	b7 51       	subi	r27, 0x17	; 23
    1ade:	a0 f0       	brcs	.+40     	; 0x1b08 <__fixunssfsi+0x38>
    1ae0:	d1 f0       	breq	.+52     	; 0x1b16 <__fixunssfsi+0x46>
    1ae2:	66 0f       	add	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	1a f0       	brmi	.+6      	; 0x1af2 <__fixunssfsi+0x22>
    1aec:	ba 95       	dec	r27
    1aee:	c9 f7       	brne	.-14     	; 0x1ae2 <__fixunssfsi+0x12>
    1af0:	12 c0       	rjmp	.+36     	; 0x1b16 <__fixunssfsi+0x46>
    1af2:	b1 30       	cpi	r27, 0x01	; 1
    1af4:	81 f0       	breq	.+32     	; 0x1b16 <__fixunssfsi+0x46>
    1af6:	c3 d0       	rcall	.+390    	; 0x1c7e <__fp_zero>
    1af8:	b1 e0       	ldi	r27, 0x01	; 1
    1afa:	08 95       	ret
    1afc:	c0 c0       	rjmp	.+384    	; 0x1c7e <__fp_zero>
    1afe:	67 2f       	mov	r22, r23
    1b00:	78 2f       	mov	r23, r24
    1b02:	88 27       	eor	r24, r24
    1b04:	b8 5f       	subi	r27, 0xF8	; 248
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <__fixunssfsi+0x46>
    1b08:	b9 3f       	cpi	r27, 0xF9	; 249
    1b0a:	cc f3       	brlt	.-14     	; 0x1afe <__fixunssfsi+0x2e>
    1b0c:	86 95       	lsr	r24
    1b0e:	77 95       	ror	r23
    1b10:	67 95       	ror	r22
    1b12:	b3 95       	inc	r27
    1b14:	d9 f7       	brne	.-10     	; 0x1b0c <__fixunssfsi+0x3c>
    1b16:	3e f4       	brtc	.+14     	; 0x1b26 <__fixunssfsi+0x56>
    1b18:	90 95       	com	r25
    1b1a:	80 95       	com	r24
    1b1c:	70 95       	com	r23
    1b1e:	61 95       	neg	r22
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	8f 4f       	sbci	r24, 0xFF	; 255
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	08 95       	ret

00001b28 <__floatunsisf>:
    1b28:	e8 94       	clt
    1b2a:	09 c0       	rjmp	.+18     	; 0x1b3e <__floatsisf+0x12>

00001b2c <__floatsisf>:
    1b2c:	97 fb       	bst	r25, 7
    1b2e:	3e f4       	brtc	.+14     	; 0x1b3e <__floatsisf+0x12>
    1b30:	90 95       	com	r25
    1b32:	80 95       	com	r24
    1b34:	70 95       	com	r23
    1b36:	61 95       	neg	r22
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	99 23       	and	r25, r25
    1b40:	a9 f0       	breq	.+42     	; 0x1b6c <__floatsisf+0x40>
    1b42:	f9 2f       	mov	r31, r25
    1b44:	96 e9       	ldi	r25, 0x96	; 150
    1b46:	bb 27       	eor	r27, r27
    1b48:	93 95       	inc	r25
    1b4a:	f6 95       	lsr	r31
    1b4c:	87 95       	ror	r24
    1b4e:	77 95       	ror	r23
    1b50:	67 95       	ror	r22
    1b52:	b7 95       	ror	r27
    1b54:	f1 11       	cpse	r31, r1
    1b56:	f8 cf       	rjmp	.-16     	; 0x1b48 <__floatsisf+0x1c>
    1b58:	fa f4       	brpl	.+62     	; 0x1b98 <__floatsisf+0x6c>
    1b5a:	bb 0f       	add	r27, r27
    1b5c:	11 f4       	brne	.+4      	; 0x1b62 <__floatsisf+0x36>
    1b5e:	60 ff       	sbrs	r22, 0
    1b60:	1b c0       	rjmp	.+54     	; 0x1b98 <__floatsisf+0x6c>
    1b62:	6f 5f       	subi	r22, 0xFF	; 255
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	8f 4f       	sbci	r24, 0xFF	; 255
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	16 c0       	rjmp	.+44     	; 0x1b98 <__floatsisf+0x6c>
    1b6c:	88 23       	and	r24, r24
    1b6e:	11 f0       	breq	.+4      	; 0x1b74 <__floatsisf+0x48>
    1b70:	96 e9       	ldi	r25, 0x96	; 150
    1b72:	11 c0       	rjmp	.+34     	; 0x1b96 <__floatsisf+0x6a>
    1b74:	77 23       	and	r23, r23
    1b76:	21 f0       	breq	.+8      	; 0x1b80 <__floatsisf+0x54>
    1b78:	9e e8       	ldi	r25, 0x8E	; 142
    1b7a:	87 2f       	mov	r24, r23
    1b7c:	76 2f       	mov	r23, r22
    1b7e:	05 c0       	rjmp	.+10     	; 0x1b8a <__floatsisf+0x5e>
    1b80:	66 23       	and	r22, r22
    1b82:	71 f0       	breq	.+28     	; 0x1ba0 <__floatsisf+0x74>
    1b84:	96 e8       	ldi	r25, 0x86	; 134
    1b86:	86 2f       	mov	r24, r22
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	2a f0       	brmi	.+10     	; 0x1b98 <__floatsisf+0x6c>
    1b8e:	9a 95       	dec	r25
    1b90:	66 0f       	add	r22, r22
    1b92:	77 1f       	adc	r23, r23
    1b94:	88 1f       	adc	r24, r24
    1b96:	da f7       	brpl	.-10     	; 0x1b8e <__floatsisf+0x62>
    1b98:	88 0f       	add	r24, r24
    1b9a:	96 95       	lsr	r25
    1b9c:	87 95       	ror	r24
    1b9e:	97 f9       	bld	r25, 7
    1ba0:	08 95       	ret

00001ba2 <__fp_cmp>:
    1ba2:	99 0f       	add	r25, r25
    1ba4:	00 08       	sbc	r0, r0
    1ba6:	55 0f       	add	r21, r21
    1ba8:	aa 0b       	sbc	r26, r26
    1baa:	e0 e8       	ldi	r30, 0x80	; 128
    1bac:	fe ef       	ldi	r31, 0xFE	; 254
    1bae:	16 16       	cp	r1, r22
    1bb0:	17 06       	cpc	r1, r23
    1bb2:	e8 07       	cpc	r30, r24
    1bb4:	f9 07       	cpc	r31, r25
    1bb6:	c0 f0       	brcs	.+48     	; 0x1be8 <__fp_cmp+0x46>
    1bb8:	12 16       	cp	r1, r18
    1bba:	13 06       	cpc	r1, r19
    1bbc:	e4 07       	cpc	r30, r20
    1bbe:	f5 07       	cpc	r31, r21
    1bc0:	98 f0       	brcs	.+38     	; 0x1be8 <__fp_cmp+0x46>
    1bc2:	62 1b       	sub	r22, r18
    1bc4:	73 0b       	sbc	r23, r19
    1bc6:	84 0b       	sbc	r24, r20
    1bc8:	95 0b       	sbc	r25, r21
    1bca:	39 f4       	brne	.+14     	; 0x1bda <__fp_cmp+0x38>
    1bcc:	0a 26       	eor	r0, r26
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <__fp_cmp+0x46>
    1bd0:	23 2b       	or	r18, r19
    1bd2:	24 2b       	or	r18, r20
    1bd4:	25 2b       	or	r18, r21
    1bd6:	21 f4       	brne	.+8      	; 0x1be0 <__fp_cmp+0x3e>
    1bd8:	08 95       	ret
    1bda:	0a 26       	eor	r0, r26
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <__fp_cmp+0x3e>
    1bde:	a1 40       	sbci	r26, 0x01	; 1
    1be0:	a6 95       	lsr	r26
    1be2:	8f ef       	ldi	r24, 0xFF	; 255
    1be4:	81 1d       	adc	r24, r1
    1be6:	81 1d       	adc	r24, r1
    1be8:	08 95       	ret

00001bea <__fp_inf>:
    1bea:	97 f9       	bld	r25, 7
    1bec:	9f 67       	ori	r25, 0x7F	; 127
    1bee:	80 e8       	ldi	r24, 0x80	; 128
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	08 95       	ret

00001bf6 <__fp_nan>:
    1bf6:	9f ef       	ldi	r25, 0xFF	; 255
    1bf8:	80 ec       	ldi	r24, 0xC0	; 192
    1bfa:	08 95       	ret

00001bfc <__fp_pscA>:
    1bfc:	00 24       	eor	r0, r0
    1bfe:	0a 94       	dec	r0
    1c00:	16 16       	cp	r1, r22
    1c02:	17 06       	cpc	r1, r23
    1c04:	18 06       	cpc	r1, r24
    1c06:	09 06       	cpc	r0, r25
    1c08:	08 95       	ret

00001c0a <__fp_pscB>:
    1c0a:	00 24       	eor	r0, r0
    1c0c:	0a 94       	dec	r0
    1c0e:	12 16       	cp	r1, r18
    1c10:	13 06       	cpc	r1, r19
    1c12:	14 06       	cpc	r1, r20
    1c14:	05 06       	cpc	r0, r21
    1c16:	08 95       	ret

00001c18 <__fp_round>:
    1c18:	09 2e       	mov	r0, r25
    1c1a:	03 94       	inc	r0
    1c1c:	00 0c       	add	r0, r0
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <__fp_round+0xc>
    1c20:	88 23       	and	r24, r24
    1c22:	52 f0       	brmi	.+20     	; 0x1c38 <__fp_round+0x20>
    1c24:	bb 0f       	add	r27, r27
    1c26:	40 f4       	brcc	.+16     	; 0x1c38 <__fp_round+0x20>
    1c28:	bf 2b       	or	r27, r31
    1c2a:	11 f4       	brne	.+4      	; 0x1c30 <__fp_round+0x18>
    1c2c:	60 ff       	sbrs	r22, 0
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <__fp_round+0x20>
    1c30:	6f 5f       	subi	r22, 0xFF	; 255
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	8f 4f       	sbci	r24, 0xFF	; 255
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	08 95       	ret

00001c3a <__fp_split3>:
    1c3a:	57 fd       	sbrc	r21, 7
    1c3c:	90 58       	subi	r25, 0x80	; 128
    1c3e:	44 0f       	add	r20, r20
    1c40:	55 1f       	adc	r21, r21
    1c42:	59 f0       	breq	.+22     	; 0x1c5a <__fp_splitA+0x10>
    1c44:	5f 3f       	cpi	r21, 0xFF	; 255
    1c46:	71 f0       	breq	.+28     	; 0x1c64 <__fp_splitA+0x1a>
    1c48:	47 95       	ror	r20

00001c4a <__fp_splitA>:
    1c4a:	88 0f       	add	r24, r24
    1c4c:	97 fb       	bst	r25, 7
    1c4e:	99 1f       	adc	r25, r25
    1c50:	61 f0       	breq	.+24     	; 0x1c6a <__fp_splitA+0x20>
    1c52:	9f 3f       	cpi	r25, 0xFF	; 255
    1c54:	79 f0       	breq	.+30     	; 0x1c74 <__fp_splitA+0x2a>
    1c56:	87 95       	ror	r24
    1c58:	08 95       	ret
    1c5a:	12 16       	cp	r1, r18
    1c5c:	13 06       	cpc	r1, r19
    1c5e:	14 06       	cpc	r1, r20
    1c60:	55 1f       	adc	r21, r21
    1c62:	f2 cf       	rjmp	.-28     	; 0x1c48 <__fp_split3+0xe>
    1c64:	46 95       	lsr	r20
    1c66:	f1 df       	rcall	.-30     	; 0x1c4a <__fp_splitA>
    1c68:	08 c0       	rjmp	.+16     	; 0x1c7a <__fp_splitA+0x30>
    1c6a:	16 16       	cp	r1, r22
    1c6c:	17 06       	cpc	r1, r23
    1c6e:	18 06       	cpc	r1, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	f1 cf       	rjmp	.-30     	; 0x1c56 <__fp_splitA+0xc>
    1c74:	86 95       	lsr	r24
    1c76:	71 05       	cpc	r23, r1
    1c78:	61 05       	cpc	r22, r1
    1c7a:	08 94       	sec
    1c7c:	08 95       	ret

00001c7e <__fp_zero>:
    1c7e:	e8 94       	clt

00001c80 <__fp_szero>:
    1c80:	bb 27       	eor	r27, r27
    1c82:	66 27       	eor	r22, r22
    1c84:	77 27       	eor	r23, r23
    1c86:	cb 01       	movw	r24, r22
    1c88:	97 f9       	bld	r25, 7
    1c8a:	08 95       	ret

00001c8c <__gesf2>:
    1c8c:	8a df       	rcall	.-236    	; 0x1ba2 <__fp_cmp>
    1c8e:	08 f4       	brcc	.+2      	; 0x1c92 <__gesf2+0x6>
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	08 95       	ret

00001c94 <__mulsf3>:
    1c94:	0b d0       	rcall	.+22     	; 0x1cac <__mulsf3x>
    1c96:	c0 cf       	rjmp	.-128    	; 0x1c18 <__fp_round>
    1c98:	b1 df       	rcall	.-158    	; 0x1bfc <__fp_pscA>
    1c9a:	28 f0       	brcs	.+10     	; 0x1ca6 <__mulsf3+0x12>
    1c9c:	b6 df       	rcall	.-148    	; 0x1c0a <__fp_pscB>
    1c9e:	18 f0       	brcs	.+6      	; 0x1ca6 <__mulsf3+0x12>
    1ca0:	95 23       	and	r25, r21
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <__mulsf3+0x12>
    1ca4:	a2 cf       	rjmp	.-188    	; 0x1bea <__fp_inf>
    1ca6:	a7 cf       	rjmp	.-178    	; 0x1bf6 <__fp_nan>
    1ca8:	11 24       	eor	r1, r1
    1caa:	ea cf       	rjmp	.-44     	; 0x1c80 <__fp_szero>

00001cac <__mulsf3x>:
    1cac:	c6 df       	rcall	.-116    	; 0x1c3a <__fp_split3>
    1cae:	a0 f3       	brcs	.-24     	; 0x1c98 <__mulsf3+0x4>

00001cb0 <__mulsf3_pse>:
    1cb0:	95 9f       	mul	r25, r21
    1cb2:	d1 f3       	breq	.-12     	; 0x1ca8 <__mulsf3+0x14>
    1cb4:	95 0f       	add	r25, r21
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	55 1f       	adc	r21, r21
    1cba:	62 9f       	mul	r22, r18
    1cbc:	f0 01       	movw	r30, r0
    1cbe:	72 9f       	mul	r23, r18
    1cc0:	bb 27       	eor	r27, r27
    1cc2:	f0 0d       	add	r31, r0
    1cc4:	b1 1d       	adc	r27, r1
    1cc6:	63 9f       	mul	r22, r19
    1cc8:	aa 27       	eor	r26, r26
    1cca:	f0 0d       	add	r31, r0
    1ccc:	b1 1d       	adc	r27, r1
    1cce:	aa 1f       	adc	r26, r26
    1cd0:	64 9f       	mul	r22, r20
    1cd2:	66 27       	eor	r22, r22
    1cd4:	b0 0d       	add	r27, r0
    1cd6:	a1 1d       	adc	r26, r1
    1cd8:	66 1f       	adc	r22, r22
    1cda:	82 9f       	mul	r24, r18
    1cdc:	22 27       	eor	r18, r18
    1cde:	b0 0d       	add	r27, r0
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	62 1f       	adc	r22, r18
    1ce4:	73 9f       	mul	r23, r19
    1ce6:	b0 0d       	add	r27, r0
    1ce8:	a1 1d       	adc	r26, r1
    1cea:	62 1f       	adc	r22, r18
    1cec:	83 9f       	mul	r24, r19
    1cee:	a0 0d       	add	r26, r0
    1cf0:	61 1d       	adc	r22, r1
    1cf2:	22 1f       	adc	r18, r18
    1cf4:	74 9f       	mul	r23, r20
    1cf6:	33 27       	eor	r19, r19
    1cf8:	a0 0d       	add	r26, r0
    1cfa:	61 1d       	adc	r22, r1
    1cfc:	23 1f       	adc	r18, r19
    1cfe:	84 9f       	mul	r24, r20
    1d00:	60 0d       	add	r22, r0
    1d02:	21 1d       	adc	r18, r1
    1d04:	82 2f       	mov	r24, r18
    1d06:	76 2f       	mov	r23, r22
    1d08:	6a 2f       	mov	r22, r26
    1d0a:	11 24       	eor	r1, r1
    1d0c:	9f 57       	subi	r25, 0x7F	; 127
    1d0e:	50 40       	sbci	r21, 0x00	; 0
    1d10:	8a f0       	brmi	.+34     	; 0x1d34 <__mulsf3_pse+0x84>
    1d12:	e1 f0       	breq	.+56     	; 0x1d4c <__mulsf3_pse+0x9c>
    1d14:	88 23       	and	r24, r24
    1d16:	4a f0       	brmi	.+18     	; 0x1d2a <__mulsf3_pse+0x7a>
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	bb 1f       	adc	r27, r27
    1d1e:	66 1f       	adc	r22, r22
    1d20:	77 1f       	adc	r23, r23
    1d22:	88 1f       	adc	r24, r24
    1d24:	91 50       	subi	r25, 0x01	; 1
    1d26:	50 40       	sbci	r21, 0x00	; 0
    1d28:	a9 f7       	brne	.-22     	; 0x1d14 <__mulsf3_pse+0x64>
    1d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d2c:	51 05       	cpc	r21, r1
    1d2e:	70 f0       	brcs	.+28     	; 0x1d4c <__mulsf3_pse+0x9c>
    1d30:	5c cf       	rjmp	.-328    	; 0x1bea <__fp_inf>
    1d32:	a6 cf       	rjmp	.-180    	; 0x1c80 <__fp_szero>
    1d34:	5f 3f       	cpi	r21, 0xFF	; 255
    1d36:	ec f3       	brlt	.-6      	; 0x1d32 <__mulsf3_pse+0x82>
    1d38:	98 3e       	cpi	r25, 0xE8	; 232
    1d3a:	dc f3       	brlt	.-10     	; 0x1d32 <__mulsf3_pse+0x82>
    1d3c:	86 95       	lsr	r24
    1d3e:	77 95       	ror	r23
    1d40:	67 95       	ror	r22
    1d42:	b7 95       	ror	r27
    1d44:	f7 95       	ror	r31
    1d46:	e7 95       	ror	r30
    1d48:	9f 5f       	subi	r25, 0xFF	; 255
    1d4a:	c1 f7       	brne	.-16     	; 0x1d3c <__mulsf3_pse+0x8c>
    1d4c:	fe 2b       	or	r31, r30
    1d4e:	88 0f       	add	r24, r24
    1d50:	91 1d       	adc	r25, r1
    1d52:	96 95       	lsr	r25
    1d54:	87 95       	ror	r24
    1d56:	97 f9       	bld	r25, 7
    1d58:	08 95       	ret

00001d5a <__divmodhi4>:
    1d5a:	97 fb       	bst	r25, 7
    1d5c:	07 2e       	mov	r0, r23
    1d5e:	16 f4       	brtc	.+4      	; 0x1d64 <__divmodhi4+0xa>
    1d60:	00 94       	com	r0
    1d62:	06 d0       	rcall	.+12     	; 0x1d70 <__divmodhi4_neg1>
    1d64:	77 fd       	sbrc	r23, 7
    1d66:	08 d0       	rcall	.+16     	; 0x1d78 <__divmodhi4_neg2>
    1d68:	0b d0       	rcall	.+22     	; 0x1d80 <__udivmodhi4>
    1d6a:	07 fc       	sbrc	r0, 7
    1d6c:	05 d0       	rcall	.+10     	; 0x1d78 <__divmodhi4_neg2>
    1d6e:	3e f4       	brtc	.+14     	; 0x1d7e <__divmodhi4_exit>

00001d70 <__divmodhi4_neg1>:
    1d70:	90 95       	com	r25
    1d72:	81 95       	neg	r24
    1d74:	9f 4f       	sbci	r25, 0xFF	; 255
    1d76:	08 95       	ret

00001d78 <__divmodhi4_neg2>:
    1d78:	70 95       	com	r23
    1d7a:	61 95       	neg	r22
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255

00001d7e <__divmodhi4_exit>:
    1d7e:	08 95       	ret

00001d80 <__udivmodhi4>:
    1d80:	aa 1b       	sub	r26, r26
    1d82:	bb 1b       	sub	r27, r27
    1d84:	51 e1       	ldi	r21, 0x11	; 17
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <__udivmodhi4_ep>

00001d88 <__udivmodhi4_loop>:
    1d88:	aa 1f       	adc	r26, r26
    1d8a:	bb 1f       	adc	r27, r27
    1d8c:	a6 17       	cp	r26, r22
    1d8e:	b7 07       	cpc	r27, r23
    1d90:	10 f0       	brcs	.+4      	; 0x1d96 <__udivmodhi4_ep>
    1d92:	a6 1b       	sub	r26, r22
    1d94:	b7 0b       	sbc	r27, r23

00001d96 <__udivmodhi4_ep>:
    1d96:	88 1f       	adc	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	5a 95       	dec	r21
    1d9c:	a9 f7       	brne	.-22     	; 0x1d88 <__udivmodhi4_loop>
    1d9e:	80 95       	com	r24
    1da0:	90 95       	com	r25
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	08 95       	ret

00001da8 <_exit>:
    1da8:	f8 94       	cli

00001daa <__stop_program>:
    1daa:	ff cf       	rjmp	.-2      	; 0x1daa <__stop_program>
